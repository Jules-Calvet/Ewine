
Test_Wifi_04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037e8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08003924  08003924  00013924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039e8  080039e8  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  080039e8  080039e8  000139e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039f0  080039f0  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039f0  080039f0  000139f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039f4  080039f4  000139f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080039f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  200000a0  08003a98  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08003a98  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac10  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002027  00000000  00000000  0002acd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  0002cd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  0002d8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174ae  00000000  00000000  0002e3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce36  00000000  00000000  00045876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d0e0  00000000  00000000  000526ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df78c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036b0  00000000  00000000  000df7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000a0 	.word	0x200000a0
 8000158:	00000000 	.word	0x00000000
 800015c:	0800390c 	.word	0x0800390c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000a4 	.word	0x200000a4
 8000178:	0800390c 	.word	0x0800390c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b08a      	sub	sp, #40	; 0x28
 8000498:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
 80004a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004aa:	4b2a      	ldr	r3, [pc, #168]	; (8000554 <MX_GPIO_Init+0xc0>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	4a29      	ldr	r2, [pc, #164]	; (8000554 <MX_GPIO_Init+0xc0>)
 80004b0:	f043 0304 	orr.w	r3, r3, #4
 80004b4:	61d3      	str	r3, [r2, #28]
 80004b6:	4b27      	ldr	r3, [pc, #156]	; (8000554 <MX_GPIO_Init+0xc0>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	f003 0304 	and.w	r3, r3, #4
 80004be:	613b      	str	r3, [r7, #16]
 80004c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004c2:	4b24      	ldr	r3, [pc, #144]	; (8000554 <MX_GPIO_Init+0xc0>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	4a23      	ldr	r2, [pc, #140]	; (8000554 <MX_GPIO_Init+0xc0>)
 80004c8:	f043 0320 	orr.w	r3, r3, #32
 80004cc:	61d3      	str	r3, [r2, #28]
 80004ce:	4b21      	ldr	r3, [pc, #132]	; (8000554 <MX_GPIO_Init+0xc0>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	f003 0320 	and.w	r3, r3, #32
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b1e      	ldr	r3, [pc, #120]	; (8000554 <MX_GPIO_Init+0xc0>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	4a1d      	ldr	r2, [pc, #116]	; (8000554 <MX_GPIO_Init+0xc0>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	61d3      	str	r3, [r2, #28]
 80004e6:	4b1b      	ldr	r3, [pc, #108]	; (8000554 <MX_GPIO_Init+0xc0>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f2:	4b18      	ldr	r3, [pc, #96]	; (8000554 <MX_GPIO_Init+0xc0>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	4a17      	ldr	r2, [pc, #92]	; (8000554 <MX_GPIO_Init+0xc0>)
 80004f8:	f043 0302 	orr.w	r3, r3, #2
 80004fc:	61d3      	str	r3, [r2, #28]
 80004fe:	4b15      	ldr	r3, [pc, #84]	; (8000554 <MX_GPIO_Init+0xc0>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	f003 0302 	and.w	r3, r3, #2
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2120      	movs	r1, #32
 800050e:	4812      	ldr	r0, [pc, #72]	; (8000558 <MX_GPIO_Init+0xc4>)
 8000510:	f000 fee8 	bl	80012e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800051a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800051e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000524:	f107 0314 	add.w	r3, r7, #20
 8000528:	4619      	mov	r1, r3
 800052a:	480c      	ldr	r0, [pc, #48]	; (800055c <MX_GPIO_Init+0xc8>)
 800052c:	f000 fd4a 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000530:	2320      	movs	r3, #32
 8000532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000534:	2301      	movs	r3, #1
 8000536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000538:	2300      	movs	r3, #0
 800053a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053c:	2300      	movs	r3, #0
 800053e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	4619      	mov	r1, r3
 8000546:	4804      	ldr	r0, [pc, #16]	; (8000558 <MX_GPIO_Init+0xc4>)
 8000548:	f000 fd3c 	bl	8000fc4 <HAL_GPIO_Init>

}
 800054c:	bf00      	nop
 800054e:	3728      	adds	r7, #40	; 0x28
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40023800 	.word	0x40023800
 8000558:	40020000 	.word	0x40020000
 800055c:	40020800 	.word	0x40020800

08000560 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000568:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800056c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	2b00      	cmp	r3, #0
 8000576:	d013      	beq.n	80005a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000578:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800057c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000580:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	2b00      	cmp	r3, #0
 8000586:	d00b      	beq.n	80005a0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000588:	e000      	b.n	800058c <ITM_SendChar+0x2c>
    {
      __NOP();
 800058a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f9      	beq.n	800058a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000596:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	b2d2      	uxtb	r2, r2
 800059e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005a0:	687b      	ldr	r3, [r7, #4]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr

080005ac <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	e009      	b.n	80005d2 <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	1c5a      	adds	r2, r3, #1
 80005c2:	60ba      	str	r2, [r7, #8]
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff ffca 	bl	8000560 <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	3301      	adds	r3, #1
 80005d0:	617b      	str	r3, [r7, #20]
 80005d2:	697a      	ldr	r2, [r7, #20]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	dbf1      	blt.n	80005be <_write+0x12>
}
return len;
 80005da:	687b      	ldr	r3, [r7, #4]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3718      	adds	r7, #24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fb37 	bl	8000c5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f80c 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f7ff ff50 	bl	8000494 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 fa02 	bl	80009fc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005f8:	f000 f9d6 	bl	80009a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Wifi_Init();
 80005fc:	f000 fad2 	bl	8000ba4 <Wifi_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Wifi_Process();
 8000600:	f000 fb00 	bl	8000c04 <Wifi_Process>
 8000604:	e7fc      	b.n	8000600 <main+0x1c>
	...

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b092      	sub	sp, #72	; 0x48
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	2234      	movs	r2, #52	; 0x34
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fc64 	bl	8002ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	463b      	mov	r3, r7
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062a:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <SystemClock_Config+0x98>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000632:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <SystemClock_Config+0x98>)
 8000634:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000638:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063a:	2302      	movs	r3, #2
 800063c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063e:	2301      	movs	r3, #1
 8000640:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000642:	2310      	movs	r3, #16
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064a:	2300      	movs	r3, #0
 800064c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800064e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000654:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000658:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4618      	mov	r0, r3
 8000660:	f000 fe58 	bl	8001314 <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800066a:	f000 f82a 	bl	80006c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2303      	movs	r3, #3
 8000674:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000682:	463b      	mov	r3, r7
 8000684:	2101      	movs	r1, #1
 8000686:	4618      	mov	r0, r3
 8000688:	f001 f974 	bl	8001974 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000692:	f000 f816 	bl	80006c2 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3748      	adds	r7, #72	; 0x48
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40007000 	.word	0x40007000

080006a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006b4:	d101      	bne.n	80006ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006b6:	f000 fae9 	bl	8000c8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c6:	b672      	cpsid	i
}
 80006c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ca:	e7fe      	b.n	80006ca <Error_Handler+0x8>

080006cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80006d2:	4b14      	ldr	r3, [pc, #80]	; (8000724 <HAL_MspInit+0x58>)
 80006d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d6:	4a13      	ldr	r2, [pc, #76]	; (8000724 <HAL_MspInit+0x58>)
 80006d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006dc:	6253      	str	r3, [r2, #36]	; 0x24
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <HAL_MspInit+0x58>)
 80006e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <HAL_MspInit+0x58>)
 80006ec:	6a1b      	ldr	r3, [r3, #32]
 80006ee:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <HAL_MspInit+0x58>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6213      	str	r3, [r2, #32]
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <HAL_MspInit+0x58>)
 80006f8:	6a1b      	ldr	r3, [r3, #32]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <HAL_MspInit+0x58>)
 8000704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000706:	4a07      	ldr	r2, [pc, #28]	; (8000724 <HAL_MspInit+0x58>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070c:	6253      	str	r3, [r2, #36]	; 0x24
 800070e:	4b05      	ldr	r3, [pc, #20]	; (8000724 <HAL_MspInit+0x58>)
 8000710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071a:	bf00      	nop
 800071c:	3714      	adds	r7, #20
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	40023800 	.word	0x40023800

08000728 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08e      	sub	sp, #56	; 0x38
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000730:	2300      	movs	r3, #0
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000734:	2300      	movs	r3, #0
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000738:	2300      	movs	r3, #0
 800073a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800073e:	4b33      	ldr	r3, [pc, #204]	; (800080c <HAL_InitTick+0xe4>)
 8000740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000742:	4a32      	ldr	r2, [pc, #200]	; (800080c <HAL_InitTick+0xe4>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6253      	str	r3, [r2, #36]	; 0x24
 800074a:	4b30      	ldr	r3, [pc, #192]	; (800080c <HAL_InitTick+0xe4>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000756:	f107 0210 	add.w	r2, r7, #16
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f001 fb6d 	bl	8001e40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000766:	6a3b      	ldr	r3, [r7, #32]
 8000768:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800076a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800076c:	2b00      	cmp	r3, #0
 800076e:	d103      	bne.n	8000778 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000770:	f001 fb3e 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
 8000774:	6378      	str	r0, [r7, #52]	; 0x34
 8000776:	e004      	b.n	8000782 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000778:	f001 fb3a 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
 800077c:	4603      	mov	r3, r0
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000784:	4a22      	ldr	r2, [pc, #136]	; (8000810 <HAL_InitTick+0xe8>)
 8000786:	fba2 2303 	umull	r2, r3, r2, r3
 800078a:	0c9b      	lsrs	r3, r3, #18
 800078c:	3b01      	subs	r3, #1
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000790:	4b20      	ldr	r3, [pc, #128]	; (8000814 <HAL_InitTick+0xec>)
 8000792:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000796:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000798:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <HAL_InitTick+0xec>)
 800079a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800079e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80007a0:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <HAL_InitTick+0xec>)
 80007a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80007a6:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <HAL_InitTick+0xec>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ac:	4b19      	ldr	r3, [pc, #100]	; (8000814 <HAL_InitTick+0xec>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 80007b2:	4818      	ldr	r0, [pc, #96]	; (8000814 <HAL_InitTick+0xec>)
 80007b4:	f001 fbd4 	bl	8001f60 <HAL_TIM_Base_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80007be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d11b      	bne.n	80007fe <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80007c6:	4813      	ldr	r0, [pc, #76]	; (8000814 <HAL_InitTick+0xec>)
 80007c8:	f001 fc12 	bl	8001ff0 <HAL_TIM_Base_Start_IT>
 80007cc:	4603      	mov	r3, r0
 80007ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80007d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d111      	bne.n	80007fe <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007da:	201c      	movs	r0, #28
 80007dc:	f000 fb65 	bl	8000eaa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b0f      	cmp	r3, #15
 80007e4:	d808      	bhi.n	80007f8 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80007e6:	2200      	movs	r2, #0
 80007e8:	6879      	ldr	r1, [r7, #4]
 80007ea:	201c      	movs	r0, #28
 80007ec:	f000 fb41 	bl	8000e72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007f0:	4a09      	ldr	r2, [pc, #36]	; (8000818 <HAL_InitTick+0xf0>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6013      	str	r3, [r2, #0]
 80007f6:	e002      	b.n	80007fe <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 80007f8:	2301      	movs	r3, #1
 80007fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80007fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000802:	4618      	mov	r0, r3
 8000804:	3738      	adds	r7, #56	; 0x38
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800
 8000810:	431bde83 	.word	0x431bde83
 8000814:	200000bc 	.word	0x200000bc
 8000818:	20000034 	.word	0x20000034

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <NMI_Handler+0x4>

08000822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <MemManage_Handler+0x4>

0800082e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler+0x4>

0800083a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr

08000846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr

08000852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr

0800085e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
	...

0800086c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <TIM2_IRQHandler+0x10>)
 8000872:	f001 fc0f 	bl	8002094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000bc 	.word	0x200000bc

08000880 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <USART1_IRQHandler+0x10>)
 8000886:	f001 fe85 	bl	8002594 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000100 	.word	0x20000100

08000894 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	e00a      	b.n	80008bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008a6:	f3af 8000 	nop.w
 80008aa:	4601      	mov	r1, r0
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	1c5a      	adds	r2, r3, #1
 80008b0:	60ba      	str	r2, [r7, #8]
 80008b2:	b2ca      	uxtb	r2, r1
 80008b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	3301      	adds	r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697a      	ldr	r2, [r7, #20]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	dbf0      	blt.n	80008a6 <_read+0x12>
  }

  return len;
 80008c4:	687b      	ldr	r3, [r7, #4]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <_close>:
  }
  return len;
}

int _close(int file)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008da:	4618      	mov	r0, r3
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008f4:	605a      	str	r2, [r3, #4]
  return 0;
 80008f6:	2300      	movs	r3, #0
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr

08000902 <_isatty>:

int _isatty(int file)
{
 8000902:	b480      	push	{r7}
 8000904:	b083      	sub	sp, #12
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800090a:	2301      	movs	r3, #1
}
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr

08000916 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000916:	b480      	push	{r7}
 8000918:	b085      	sub	sp, #20
 800091a:	af00      	add	r7, sp, #0
 800091c:	60f8      	str	r0, [r7, #12]
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000922:	2300      	movs	r3, #0
}
 8000924:	4618      	mov	r0, r3
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
	...

08000930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000938:	4a14      	ldr	r2, [pc, #80]	; (800098c <_sbrk+0x5c>)
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <_sbrk+0x60>)
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <_sbrk+0x64>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d102      	bne.n	8000952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <_sbrk+0x64>)
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <_sbrk+0x68>)
 8000950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <_sbrk+0x64>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4413      	add	r3, r2
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	429a      	cmp	r2, r3
 800095e:	d207      	bcs.n	8000970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000960:	f002 fa96 	bl	8002e90 <__errno>
 8000964:	4603      	mov	r3, r0
 8000966:	220c      	movs	r2, #12
 8000968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800096a:	f04f 33ff 	mov.w	r3, #4294967295
 800096e:	e009      	b.n	8000984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <_sbrk+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <_sbrk+0x64>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	4a05      	ldr	r2, [pc, #20]	; (8000994 <_sbrk+0x64>)
 8000980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20014000 	.word	0x20014000
 8000990:	00000400 	.word	0x00000400
 8000994:	200000fc 	.word	0x200000fc
 8000998:	20000200 	.word	0x20000200

0800099c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <MX_USART1_UART_Init+0x50>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009e0:	f001 fcc8 	bl	8002374 <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ea:	f7ff fe6a 	bl	80006c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000100 	.word	0x20000100
 80009f8:	40013800 	.word	0x40013800

080009fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a02:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <MX_USART2_UART_Init+0x50>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a34:	f001 fc9e 	bl	8002374 <HAL_UART_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a3e:	f7ff fe40 	bl	80006c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000144 	.word	0x20000144
 8000a4c:	40004400 	.word	0x40004400

08000a50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08c      	sub	sp, #48	; 0x30
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a32      	ldr	r2, [pc, #200]	; (8000b38 <HAL_UART_MspInit+0xe8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d131      	bne.n	8000ad6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a72:	4b32      	ldr	r3, [pc, #200]	; (8000b3c <HAL_UART_MspInit+0xec>)
 8000a74:	6a1b      	ldr	r3, [r3, #32]
 8000a76:	4a31      	ldr	r2, [pc, #196]	; (8000b3c <HAL_UART_MspInit+0xec>)
 8000a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7c:	6213      	str	r3, [r2, #32]
 8000a7e:	4b2f      	ldr	r3, [pc, #188]	; (8000b3c <HAL_UART_MspInit+0xec>)
 8000a80:	6a1b      	ldr	r3, [r3, #32]
 8000a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a86:	61bb      	str	r3, [r7, #24]
 8000a88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <HAL_UART_MspInit+0xec>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	4a2b      	ldr	r2, [pc, #172]	; (8000b3c <HAL_UART_MspInit+0xec>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	61d3      	str	r3, [r2, #28]
 8000a96:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <HAL_UART_MspInit+0xec>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000aa2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4820      	ldr	r0, [pc, #128]	; (8000b40 <HAL_UART_MspInit+0xf0>)
 8000ac0:	f000 fa80 	bl	8000fc4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2025      	movs	r0, #37	; 0x25
 8000aca:	f000 f9d2 	bl	8000e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ace:	2025      	movs	r0, #37	; 0x25
 8000ad0:	f000 f9eb 	bl	8000eaa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ad4:	e02c      	b.n	8000b30 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a1a      	ldr	r2, [pc, #104]	; (8000b44 <HAL_UART_MspInit+0xf4>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d127      	bne.n	8000b30 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <HAL_UART_MspInit+0xec>)
 8000ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae4:	4a15      	ldr	r2, [pc, #84]	; (8000b3c <HAL_UART_MspInit+0xec>)
 8000ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aea:	6253      	str	r3, [r2, #36]	; 0x24
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <HAL_UART_MspInit+0xec>)
 8000aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_UART_MspInit+0xec>)
 8000afa:	69db      	ldr	r3, [r3, #28]
 8000afc:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <HAL_UART_MspInit+0xec>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	61d3      	str	r3, [r2, #28]
 8000b04:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_UART_MspInit+0xec>)
 8000b06:	69db      	ldr	r3, [r3, #28]
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b10:	230c      	movs	r3, #12
 8000b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b20:	2307      	movs	r3, #7
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <HAL_UART_MspInit+0xf0>)
 8000b2c:	f000 fa4a 	bl	8000fc4 <HAL_GPIO_Init>
}
 8000b30:	bf00      	nop
 8000b32:	3730      	adds	r7, #48	; 0x30
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40013800 	.word	0x40013800
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40004400 	.word	0x40004400

08000b48 <HAL_UART_RxCpltCallback>:
char rxBuffer[100];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if (huart == &huart1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <HAL_UART_RxCpltCallback+0x48>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d117      	bne.n	8000b88 <HAL_UART_RxCpltCallback+0x40>
  {
	  //debug rxBuffer
	  //printf("Wifi Response: %s\n", rxBuffer);
	  if(strstr(rxBuffer, "WIFI CONNECTE") != NULL)printf("Wifi_Init Successful !\n");
 8000b58:	490e      	ldr	r1, [pc, #56]	; (8000b94 <HAL_UART_RxCpltCallback+0x4c>)
 8000b5a:	480f      	ldr	r0, [pc, #60]	; (8000b98 <HAL_UART_RxCpltCallback+0x50>)
 8000b5c:	f002 fa40 	bl	8002fe0 <strstr>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <HAL_UART_RxCpltCallback+0x26>
 8000b66:	480d      	ldr	r0, [pc, #52]	; (8000b9c <HAL_UART_RxCpltCallback+0x54>)
 8000b68:	f002 fa32 	bl	8002fd0 <puts>
 8000b6c:	e002      	b.n	8000b74 <HAL_UART_RxCpltCallback+0x2c>
	  else printf("Wifi_Init Failed !\n");
 8000b6e:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <HAL_UART_RxCpltCallback+0x58>)
 8000b70:	f002 fa2e 	bl	8002fd0 <puts>
	  memset(rxBuffer, 0, sizeof(rxBuffer));
 8000b74:	2264      	movs	r2, #100	; 0x64
 8000b76:	2100      	movs	r1, #0
 8000b78:	4807      	ldr	r0, [pc, #28]	; (8000b98 <HAL_UART_RxCpltCallback+0x50>)
 8000b7a:	f002 f9b3 	bl	8002ee4 <memset>
	  HAL_UART_Receive_IT(&huart1, (uint8_t*)rxBuffer, sizeof(rxBuffer)-1);
 8000b7e:	2263      	movs	r2, #99	; 0x63
 8000b80:	4905      	ldr	r1, [pc, #20]	; (8000b98 <HAL_UART_RxCpltCallback+0x50>)
 8000b82:	4803      	ldr	r0, [pc, #12]	; (8000b90 <HAL_UART_RxCpltCallback+0x48>)
 8000b84:	f001 fcd5 	bl	8002532 <HAL_UART_Receive_IT>
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000100 	.word	0x20000100
 8000b94:	08003924 	.word	0x08003924
 8000b98:	20000188 	.word	0x20000188
 8000b9c:	08003934 	.word	0x08003934
 8000ba0:	0800394c 	.word	0x0800394c

08000ba4 <Wifi_Init>:

void Wifi_Init(void){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	//Put the wifi in listening mode
	HAL_UART_Receive_IT(&huart1, (uint8_t*)rxBuffer, sizeof(rxBuffer)-1);
 8000ba8:	2263      	movs	r2, #99	; 0x63
 8000baa:	4912      	ldr	r1, [pc, #72]	; (8000bf4 <Wifi_Init+0x50>)
 8000bac:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <Wifi_Init+0x54>)
 8000bae:	f001 fcc0 	bl	8002532 <HAL_UART_Receive_IT>
	//check that the ESP8266 is operational
	HAL_UART_Transmit(&huart1, (uint8_t*)at, strlen(at) , 1000); //Send
 8000bb2:	4812      	ldr	r0, [pc, #72]	; (8000bfc <Wifi_Init+0x58>)
 8000bb4:	f7ff fae2 	bl	800017c <strlen>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc0:	490e      	ldr	r1, [pc, #56]	; (8000bfc <Wifi_Init+0x58>)
 8000bc2:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <Wifi_Init+0x54>)
 8000bc4:	f001 fc23 	bl	800240e <HAL_UART_Transmit>

	HAL_Delay(1000);
 8000bc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bcc:	f000 f87a 	bl	8000cc4 <HAL_Delay>
	//connect the ESP8266 to 'Reseau du KGB' Wifi
	HAL_UART_Transmit(&huart1, (uint8_t*)apConnect, strlen(apConnect) , 1000); //Connect
 8000bd0:	480b      	ldr	r0, [pc, #44]	; (8000c00 <Wifi_Init+0x5c>)
 8000bd2:	f7ff fad3 	bl	800017c <strlen>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bde:	4908      	ldr	r1, [pc, #32]	; (8000c00 <Wifi_Init+0x5c>)
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <Wifi_Init+0x54>)
 8000be2:	f001 fc14 	bl	800240e <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000be6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bea:	f000 f86b 	bl	8000cc4 <HAL_Delay>
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000188 	.word	0x20000188
 8000bf8:	20000100 	.word	0x20000100
 8000bfc:	20000004 	.word	0x20000004
 8000c00:	2000000c 	.word	0x2000000c

08000c04 <Wifi_Process>:

void Wifi_Process(void){
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0


}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	; (8000c48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	; (8000c54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c36:	f7ff feb1 	bl	800099c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3a:	f002 f92f 	bl	8002e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c3e:	f7ff fcd1 	bl	80005e4 <main>
  bx lr
 8000c42:	4770      	bx	lr
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000c4c:	080039f8 	.word	0x080039f8
  ldr r2, =_sbss
 8000c50:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000c54:	20000200 	.word	0x20000200

08000c58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC1_IRQHandler>

08000c5a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f8f9 	bl	8000e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f7ff fd5c 	bl	8000728 <HAL_InitTick>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d002      	beq.n	8000c7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	71fb      	strb	r3, [r7, #7]
 8000c7a:	e001      	b.n	8000c80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c7c:	f7ff fd26 	bl	80006cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c80:	79fb      	ldrb	r3, [r7, #7]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_IncTick+0x1c>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <HAL_IncTick+0x20>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4413      	add	r3, r2
 8000c9a:	4a03      	ldr	r2, [pc, #12]	; (8000ca8 <HAL_IncTick+0x1c>)
 8000c9c:	6013      	str	r3, [r2, #0]
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	200001ec 	.word	0x200001ec
 8000cac:	20000038 	.word	0x20000038

08000cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b02      	ldr	r3, [pc, #8]	; (8000cc0 <HAL_GetTick+0x10>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	200001ec 	.word	0x200001ec

08000cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ccc:	f7ff fff0 	bl	8000cb0 <HAL_GetTick>
 8000cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cdc:	d004      	beq.n	8000ce8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <HAL_Delay+0x40>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ce8:	bf00      	nop
 8000cea:	f7ff ffe1 	bl	8000cb0 <HAL_GetTick>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d8f7      	bhi.n	8000cea <HAL_Delay+0x26>
  {
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000038 	.word	0x20000038

08000d08 <__NVIC_SetPriorityGrouping>:
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d24:	4013      	ands	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	60d3      	str	r3, [r2, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_GetPriorityGrouping>:
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_EnableIRQ>:
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	db0b      	blt.n	8000d96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	f003 021f 	and.w	r2, r3, #31
 8000d84:	4906      	ldr	r1, [pc, #24]	; (8000da0 <__NVIC_EnableIRQ+0x34>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	095b      	lsrs	r3, r3, #5
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100

08000da4 <__NVIC_SetPriority>:
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db0a      	blt.n	8000dce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	490c      	ldr	r1, [pc, #48]	; (8000df0 <__NVIC_SetPriority+0x4c>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000dcc:	e00a      	b.n	8000de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4908      	ldr	r1, [pc, #32]	; (8000df4 <__NVIC_SetPriority+0x50>)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	3b04      	subs	r3, #4
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <NVIC_EncodePriority>:
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f1c3 0307 	rsb	r3, r3, #7
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	bf28      	it	cs
 8000e16:	2304      	movcs	r3, #4
 8000e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d902      	bls.n	8000e28 <NVIC_EncodePriority+0x30>
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3b03      	subs	r3, #3
 8000e26:	e000      	b.n	8000e2a <NVIC_EncodePriority+0x32>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43da      	mvns	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43d9      	mvns	r1, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	4313      	orrs	r3, r2
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3724      	adds	r7, #36	; 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff4f 	bl	8000d08 <__NVIC_SetPriorityGrouping>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e84:	f7ff ff64 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8000e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68b9      	ldr	r1, [r7, #8]
 8000e8e:	6978      	ldr	r0, [r7, #20]
 8000e90:	f7ff ffb2 	bl	8000df8 <NVIC_EncodePriority>
 8000e94:	4602      	mov	r2, r0
 8000e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff81 	bl	8000da4 <__NVIC_SetPriority>
}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff57 	bl	8000d6c <__NVIC_EnableIRQ>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b085      	sub	sp, #20
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d008      	beq.n	8000ef0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e022      	b.n	8000f36 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 020e 	bic.w	r2, r2, #14
 8000efe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 0201 	bic.w	r2, r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	f003 021c 	and.w	r2, r3, #28
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f22:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d005      	beq.n	8000f64 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2204      	movs	r2, #4
 8000f5c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	73fb      	strb	r3, [r7, #15]
 8000f62:	e029      	b.n	8000fb8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f022 020e 	bic.w	r2, r2, #14
 8000f72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f022 0201 	bic.w	r2, r2, #1
 8000f82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	f003 021c 	and.w	r2, r3, #28
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f90:	2101      	movs	r1, #1
 8000f92:	fa01 f202 	lsl.w	r2, r1, r2
 8000f96:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	4798      	blx	r3
    }
  }
  return status;
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fda:	e160      	b.n	800129e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 8152 	beq.w	8001298 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d005      	beq.n	800100c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001008:	2b02      	cmp	r3, #2
 800100a:	d130      	bne.n	800106e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001042:	2201      	movs	r2, #1
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	091b      	lsrs	r3, r3, #4
 8001058:	f003 0201 	and.w	r2, r3, #1
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	2b03      	cmp	r3, #3
 8001078:	d017      	beq.n	80010aa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2203      	movs	r2, #3
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d123      	bne.n	80010fe <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	08da      	lsrs	r2, r3, #3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3208      	adds	r2, #8
 80010be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	220f      	movs	r2, #15
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	691a      	ldr	r2, [r3, #16]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	08da      	lsrs	r2, r3, #3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3208      	adds	r2, #8
 80010f8:	6939      	ldr	r1, [r7, #16]
 80010fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	2203      	movs	r2, #3
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0203 	and.w	r2, r3, #3
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 80ac 	beq.w	8001298 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001140:	4b5e      	ldr	r3, [pc, #376]	; (80012bc <HAL_GPIO_Init+0x2f8>)
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	4a5d      	ldr	r2, [pc, #372]	; (80012bc <HAL_GPIO_Init+0x2f8>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6213      	str	r3, [r2, #32]
 800114c:	4b5b      	ldr	r3, [pc, #364]	; (80012bc <HAL_GPIO_Init+0x2f8>)
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001158:	4a59      	ldr	r2, [pc, #356]	; (80012c0 <HAL_GPIO_Init+0x2fc>)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	089b      	lsrs	r3, r3, #2
 800115e:	3302      	adds	r3, #2
 8001160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001164:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	220f      	movs	r2, #15
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a51      	ldr	r2, [pc, #324]	; (80012c4 <HAL_GPIO_Init+0x300>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d025      	beq.n	80011d0 <HAL_GPIO_Init+0x20c>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a50      	ldr	r2, [pc, #320]	; (80012c8 <HAL_GPIO_Init+0x304>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d01f      	beq.n	80011cc <HAL_GPIO_Init+0x208>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a4f      	ldr	r2, [pc, #316]	; (80012cc <HAL_GPIO_Init+0x308>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d019      	beq.n	80011c8 <HAL_GPIO_Init+0x204>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a4e      	ldr	r2, [pc, #312]	; (80012d0 <HAL_GPIO_Init+0x30c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d013      	beq.n	80011c4 <HAL_GPIO_Init+0x200>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a4d      	ldr	r2, [pc, #308]	; (80012d4 <HAL_GPIO_Init+0x310>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d00d      	beq.n	80011c0 <HAL_GPIO_Init+0x1fc>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a4c      	ldr	r2, [pc, #304]	; (80012d8 <HAL_GPIO_Init+0x314>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d007      	beq.n	80011bc <HAL_GPIO_Init+0x1f8>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a4b      	ldr	r2, [pc, #300]	; (80012dc <HAL_GPIO_Init+0x318>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d101      	bne.n	80011b8 <HAL_GPIO_Init+0x1f4>
 80011b4:	2306      	movs	r3, #6
 80011b6:	e00c      	b.n	80011d2 <HAL_GPIO_Init+0x20e>
 80011b8:	2307      	movs	r3, #7
 80011ba:	e00a      	b.n	80011d2 <HAL_GPIO_Init+0x20e>
 80011bc:	2305      	movs	r3, #5
 80011be:	e008      	b.n	80011d2 <HAL_GPIO_Init+0x20e>
 80011c0:	2304      	movs	r3, #4
 80011c2:	e006      	b.n	80011d2 <HAL_GPIO_Init+0x20e>
 80011c4:	2303      	movs	r3, #3
 80011c6:	e004      	b.n	80011d2 <HAL_GPIO_Init+0x20e>
 80011c8:	2302      	movs	r3, #2
 80011ca:	e002      	b.n	80011d2 <HAL_GPIO_Init+0x20e>
 80011cc:	2301      	movs	r3, #1
 80011ce:	e000      	b.n	80011d2 <HAL_GPIO_Init+0x20e>
 80011d0:	2300      	movs	r3, #0
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	f002 0203 	and.w	r2, r2, #3
 80011d8:	0092      	lsls	r2, r2, #2
 80011da:	4093      	lsls	r3, r2
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011e2:	4937      	ldr	r1, [pc, #220]	; (80012c0 <HAL_GPIO_Init+0x2fc>)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	3302      	adds	r3, #2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f0:	4b3b      	ldr	r3, [pc, #236]	; (80012e0 <HAL_GPIO_Init+0x31c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001214:	4a32      	ldr	r2, [pc, #200]	; (80012e0 <HAL_GPIO_Init+0x31c>)
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800121a:	4b31      	ldr	r3, [pc, #196]	; (80012e0 <HAL_GPIO_Init+0x31c>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4313      	orrs	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800123e:	4a28      	ldr	r2, [pc, #160]	; (80012e0 <HAL_GPIO_Init+0x31c>)
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001244:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <HAL_GPIO_Init+0x31c>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	43db      	mvns	r3, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001268:	4a1d      	ldr	r2, [pc, #116]	; (80012e0 <HAL_GPIO_Init+0x31c>)
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800126e:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <HAL_GPIO_Init+0x31c>)
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	43db      	mvns	r3, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001292:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <HAL_GPIO_Init+0x31c>)
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	3301      	adds	r3, #1
 800129c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	fa22 f303 	lsr.w	r3, r2, r3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f47f ae97 	bne.w	8000fdc <HAL_GPIO_Init+0x18>
  }
}
 80012ae:	bf00      	nop
 80012b0:	bf00      	nop
 80012b2:	371c      	adds	r7, #28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40010000 	.word	0x40010000
 80012c4:	40020000 	.word	0x40020000
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40020c00 	.word	0x40020c00
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40021400 	.word	0x40021400
 80012dc:	40021800 	.word	0x40021800
 80012e0:	40010400 	.word	0x40010400

080012e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	807b      	strh	r3, [r7, #2]
 80012f0:	4613      	mov	r3, r2
 80012f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012f4:	787b      	ldrb	r3, [r7, #1]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012fa:	887a      	ldrh	r2, [r7, #2]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001300:	e003      	b.n	800130a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	041a      	lsls	r2, r3, #16
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	619a      	str	r2, [r3, #24]
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e31d      	b.n	8001962 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001326:	4b94      	ldr	r3, [pc, #592]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001330:	4b91      	ldr	r3, [pc, #580]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001338:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d07b      	beq.n	800143e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	2b08      	cmp	r3, #8
 800134a:	d006      	beq.n	800135a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	2b0c      	cmp	r3, #12
 8001350:	d10f      	bne.n	8001372 <HAL_RCC_OscConfig+0x5e>
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001358:	d10b      	bne.n	8001372 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135a:	4b87      	ldr	r3, [pc, #540]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d06a      	beq.n	800143c <HAL_RCC_OscConfig+0x128>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d166      	bne.n	800143c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e2f7      	b.n	8001962 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d106      	bne.n	8001388 <HAL_RCC_OscConfig+0x74>
 800137a:	4b7f      	ldr	r3, [pc, #508]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a7e      	ldr	r2, [pc, #504]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 8001380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e02d      	b.n	80013e4 <HAL_RCC_OscConfig+0xd0>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10c      	bne.n	80013aa <HAL_RCC_OscConfig+0x96>
 8001390:	4b79      	ldr	r3, [pc, #484]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a78      	ldr	r2, [pc, #480]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 8001396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b76      	ldr	r3, [pc, #472]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a75      	ldr	r2, [pc, #468]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 80013a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	e01c      	b.n	80013e4 <HAL_RCC_OscConfig+0xd0>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b05      	cmp	r3, #5
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0xb8>
 80013b2:	4b71      	ldr	r3, [pc, #452]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a70      	ldr	r2, [pc, #448]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 80013b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	4b6e      	ldr	r3, [pc, #440]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a6d      	ldr	r2, [pc, #436]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 80013c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e00b      	b.n	80013e4 <HAL_RCC_OscConfig+0xd0>
 80013cc:	4b6a      	ldr	r3, [pc, #424]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a69      	ldr	r2, [pc, #420]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 80013d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b67      	ldr	r3, [pc, #412]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a66      	ldr	r2, [pc, #408]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 80013de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d013      	beq.n	8001414 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7ff fc60 	bl	8000cb0 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f4:	f7ff fc5c 	bl	8000cb0 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b64      	cmp	r3, #100	; 0x64
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e2ad      	b.n	8001962 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001406:	4b5c      	ldr	r3, [pc, #368]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0xe0>
 8001412:	e014      	b.n	800143e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fc4c 	bl	8000cb0 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800141c:	f7ff fc48 	bl	8000cb0 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	; 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e299      	b.n	8001962 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800142e:	4b52      	ldr	r3, [pc, #328]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x108>
 800143a:	e000      	b.n	800143e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d05a      	beq.n	8001500 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	2b04      	cmp	r3, #4
 800144e:	d005      	beq.n	800145c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2b0c      	cmp	r3, #12
 8001454:	d119      	bne.n	800148a <HAL_RCC_OscConfig+0x176>
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d116      	bne.n	800148a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145c:	4b46      	ldr	r3, [pc, #280]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <HAL_RCC_OscConfig+0x160>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d001      	beq.n	8001474 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e276      	b.n	8001962 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001474:	4b40      	ldr	r3, [pc, #256]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	493d      	ldr	r1, [pc, #244]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001488:	e03a      	b.n	8001500 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d020      	beq.n	80014d4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001492:	4b3a      	ldr	r3, [pc, #232]	; (800157c <HAL_RCC_OscConfig+0x268>)
 8001494:	2201      	movs	r2, #1
 8001496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fc0a 	bl	8000cb0 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a0:	f7ff fc06 	bl	8000cb0 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e257      	b.n	8001962 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014b2:	4b31      	ldr	r3, [pc, #196]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014be:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	492a      	ldr	r1, [pc, #168]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	604b      	str	r3, [r1, #4]
 80014d2:	e015      	b.n	8001500 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d4:	4b29      	ldr	r3, [pc, #164]	; (800157c <HAL_RCC_OscConfig+0x268>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014da:	f7ff fbe9 	bl	8000cb0 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e2:	f7ff fbe5 	bl	8000cb0 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e236      	b.n	8001962 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014f4:	4b20      	ldr	r3, [pc, #128]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f0      	bne.n	80014e2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80b8 	beq.w	800167e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d170      	bne.n	80015f6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <HAL_RCC_OscConfig+0x218>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e21a      	b.n	8001962 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1a      	ldr	r2, [r3, #32]
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001538:	429a      	cmp	r2, r3
 800153a:	d921      	bls.n	8001580 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	4618      	mov	r0, r3
 8001542:	f000 fcad 	bl	8001ea0 <RCC_SetFlashLatencyFromMSIRange>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e208      	b.n	8001962 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	4906      	ldr	r1, [pc, #24]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 800155e:	4313      	orrs	r3, r2
 8001560:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	061b      	lsls	r3, r3, #24
 8001570:	4901      	ldr	r1, [pc, #4]	; (8001578 <HAL_RCC_OscConfig+0x264>)
 8001572:	4313      	orrs	r3, r2
 8001574:	604b      	str	r3, [r1, #4]
 8001576:	e020      	b.n	80015ba <HAL_RCC_OscConfig+0x2a6>
 8001578:	40023800 	.word	0x40023800
 800157c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001580:	4b99      	ldr	r3, [pc, #612]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	4996      	ldr	r1, [pc, #600]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 800158e:	4313      	orrs	r3, r2
 8001590:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001592:	4b95      	ldr	r3, [pc, #596]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	061b      	lsls	r3, r3, #24
 80015a0:	4991      	ldr	r1, [pc, #580]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fc78 	bl	8001ea0 <RCC_SetFlashLatencyFromMSIRange>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e1d3      	b.n	8001962 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	0b5b      	lsrs	r3, r3, #13
 80015c0:	3301      	adds	r3, #1
 80015c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80015ca:	4a87      	ldr	r2, [pc, #540]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 80015cc:	6892      	ldr	r2, [r2, #8]
 80015ce:	0912      	lsrs	r2, r2, #4
 80015d0:	f002 020f 	and.w	r2, r2, #15
 80015d4:	4985      	ldr	r1, [pc, #532]	; (80017ec <HAL_RCC_OscConfig+0x4d8>)
 80015d6:	5c8a      	ldrb	r2, [r1, r2]
 80015d8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80015da:	4a85      	ldr	r2, [pc, #532]	; (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 80015dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015de:	4b85      	ldr	r3, [pc, #532]	; (80017f4 <HAL_RCC_OscConfig+0x4e0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff f8a0 	bl	8000728 <HAL_InitTick>
 80015e8:	4603      	mov	r3, r0
 80015ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d045      	beq.n	800167e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	e1b5      	b.n	8001962 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d029      	beq.n	8001652 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015fe:	4b7e      	ldr	r3, [pc, #504]	; (80017f8 <HAL_RCC_OscConfig+0x4e4>)
 8001600:	2201      	movs	r2, #1
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fb54 	bl	8000cb0 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800160c:	f7ff fb50 	bl	8000cb0 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e1a1      	b.n	8001962 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800161e:	4b72      	ldr	r3, [pc, #456]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800162a:	4b6f      	ldr	r3, [pc, #444]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	496c      	ldr	r1, [pc, #432]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800163c:	4b6a      	ldr	r3, [pc, #424]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	061b      	lsls	r3, r3, #24
 800164a:	4967      	ldr	r1, [pc, #412]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
 8001650:	e015      	b.n	800167e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001652:	4b69      	ldr	r3, [pc, #420]	; (80017f8 <HAL_RCC_OscConfig+0x4e4>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fb2a 	bl	8000cb0 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001660:	f7ff fb26 	bl	8000cb0 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e177      	b.n	8001962 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001672:	4b5d      	ldr	r3, [pc, #372]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	2b00      	cmp	r3, #0
 8001688:	d030      	beq.n	80016ec <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d016      	beq.n	80016c0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001692:	4b5a      	ldr	r3, [pc, #360]	; (80017fc <HAL_RCC_OscConfig+0x4e8>)
 8001694:	2201      	movs	r2, #1
 8001696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001698:	f7ff fb0a 	bl	8000cb0 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a0:	f7ff fb06 	bl	8000cb0 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e157      	b.n	8001962 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016b2:	4b4d      	ldr	r3, [pc, #308]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 80016b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x38c>
 80016be:	e015      	b.n	80016ec <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c0:	4b4e      	ldr	r3, [pc, #312]	; (80017fc <HAL_RCC_OscConfig+0x4e8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c6:	f7ff faf3 	bl	8000cb0 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ce:	f7ff faef 	bl	8000cb0 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e140      	b.n	8001962 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016e0:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 80016e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f0      	bne.n	80016ce <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80b5 	beq.w	8001864 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016fa:	2300      	movs	r3, #0
 80016fc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fe:	4b3a      	ldr	r3, [pc, #232]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10d      	bne.n	8001726 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4b37      	ldr	r3, [pc, #220]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	4a36      	ldr	r2, [pc, #216]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001714:	6253      	str	r3, [r2, #36]	; 0x24
 8001716:	4b34      	ldr	r3, [pc, #208]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001722:	2301      	movs	r3, #1
 8001724:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001726:	4b36      	ldr	r3, [pc, #216]	; (8001800 <HAL_RCC_OscConfig+0x4ec>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172e:	2b00      	cmp	r3, #0
 8001730:	d118      	bne.n	8001764 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001732:	4b33      	ldr	r3, [pc, #204]	; (8001800 <HAL_RCC_OscConfig+0x4ec>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a32      	ldr	r2, [pc, #200]	; (8001800 <HAL_RCC_OscConfig+0x4ec>)
 8001738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173e:	f7ff fab7 	bl	8000cb0 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001746:	f7ff fab3 	bl	8000cb0 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b64      	cmp	r3, #100	; 0x64
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e104      	b.n	8001962 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001758:	4b29      	ldr	r3, [pc, #164]	; (8001800 <HAL_RCC_OscConfig+0x4ec>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f0      	beq.n	8001746 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d106      	bne.n	800177a <HAL_RCC_OscConfig+0x466>
 800176c:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 800176e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001770:	4a1d      	ldr	r2, [pc, #116]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 8001772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001776:	6353      	str	r3, [r2, #52]	; 0x34
 8001778:	e02d      	b.n	80017d6 <HAL_RCC_OscConfig+0x4c2>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0x488>
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 8001784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001786:	4a18      	ldr	r2, [pc, #96]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 8001788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800178c:	6353      	str	r3, [r2, #52]	; 0x34
 800178e:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 8001790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001792:	4a15      	ldr	r2, [pc, #84]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 8001794:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001798:	6353      	str	r3, [r2, #52]	; 0x34
 800179a:	e01c      	b.n	80017d6 <HAL_RCC_OscConfig+0x4c2>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b05      	cmp	r3, #5
 80017a2:	d10c      	bne.n	80017be <HAL_RCC_OscConfig+0x4aa>
 80017a4:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 80017a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a8:	4a0f      	ldr	r2, [pc, #60]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 80017aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ae:	6353      	str	r3, [r2, #52]	; 0x34
 80017b0:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 80017b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b4:	4a0c      	ldr	r2, [pc, #48]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 80017b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ba:	6353      	str	r3, [r2, #52]	; 0x34
 80017bc:	e00b      	b.n	80017d6 <HAL_RCC_OscConfig+0x4c2>
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 80017c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c2:	4a09      	ldr	r2, [pc, #36]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 80017c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017c8:	6353      	str	r3, [r2, #52]	; 0x34
 80017ca:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 80017cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ce:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <HAL_RCC_OscConfig+0x4d4>)
 80017d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017d4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d024      	beq.n	8001828 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017de:	f7ff fa67 	bl	8000cb0 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017e4:	e019      	b.n	800181a <HAL_RCC_OscConfig+0x506>
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	0800396c 	.word	0x0800396c
 80017f0:	20000000 	.word	0x20000000
 80017f4:	20000034 	.word	0x20000034
 80017f8:	42470020 	.word	0x42470020
 80017fc:	42470680 	.word	0x42470680
 8001800:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001804:	f7ff fa54 	bl	8000cb0 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e0a3      	b.n	8001962 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800181a:	4b54      	ldr	r3, [pc, #336]	; (800196c <HAL_RCC_OscConfig+0x658>)
 800181c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800181e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0ee      	beq.n	8001804 <HAL_RCC_OscConfig+0x4f0>
 8001826:	e014      	b.n	8001852 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001828:	f7ff fa42 	bl	8000cb0 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800182e:	e00a      	b.n	8001846 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001830:	f7ff fa3e 	bl	8000cb0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f241 3288 	movw	r2, #5000	; 0x1388
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e08d      	b.n	8001962 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001846:	4b49      	ldr	r3, [pc, #292]	; (800196c <HAL_RCC_OscConfig+0x658>)
 8001848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1ee      	bne.n	8001830 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001852:	7ffb      	ldrb	r3, [r7, #31]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d105      	bne.n	8001864 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001858:	4b44      	ldr	r3, [pc, #272]	; (800196c <HAL_RCC_OscConfig+0x658>)
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	4a43      	ldr	r2, [pc, #268]	; (800196c <HAL_RCC_OscConfig+0x658>)
 800185e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001862:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	2b00      	cmp	r3, #0
 800186a:	d079      	beq.n	8001960 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	2b0c      	cmp	r3, #12
 8001870:	d056      	beq.n	8001920 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	2b02      	cmp	r3, #2
 8001878:	d13b      	bne.n	80018f2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187a:	4b3d      	ldr	r3, [pc, #244]	; (8001970 <HAL_RCC_OscConfig+0x65c>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff fa16 	bl	8000cb0 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff fa12 	bl	8000cb0 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e063      	b.n	8001962 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800189a:	4b34      	ldr	r3, [pc, #208]	; (800196c <HAL_RCC_OscConfig+0x658>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a6:	4b31      	ldr	r3, [pc, #196]	; (800196c <HAL_RCC_OscConfig+0x658>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	4319      	orrs	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	430b      	orrs	r3, r1
 80018be:	492b      	ldr	r1, [pc, #172]	; (800196c <HAL_RCC_OscConfig+0x658>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c4:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <HAL_RCC_OscConfig+0x65c>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ca:	f7ff f9f1 	bl	8000cb0 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d2:	f7ff f9ed 	bl	8000cb0 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e03e      	b.n	8001962 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018e4:	4b21      	ldr	r3, [pc, #132]	; (800196c <HAL_RCC_OscConfig+0x658>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x5be>
 80018f0:	e036      	b.n	8001960 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f2:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <HAL_RCC_OscConfig+0x65c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff f9da 	bl	8000cb0 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff f9d6 	bl	8000cb0 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e027      	b.n	8001962 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001912:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_RCC_OscConfig+0x658>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x5ec>
 800191e:	e01f      	b.n	8001960 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e01a      	b.n	8001962 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_RCC_OscConfig+0x658>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193c:	429a      	cmp	r2, r3
 800193e:	d10d      	bne.n	800195c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	429a      	cmp	r2, r3
 800194c:	d106      	bne.n	800195c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3720      	adds	r7, #32
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	42470060 	.word	0x42470060

08001974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e11a      	b.n	8001bbe <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001988:	4b8f      	ldr	r3, [pc, #572]	; (8001bc8 <HAL_RCC_ClockConfig+0x254>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d919      	bls.n	80019ca <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d105      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x34>
 800199c:	4b8a      	ldr	r3, [pc, #552]	; (8001bc8 <HAL_RCC_ClockConfig+0x254>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a89      	ldr	r2, [pc, #548]	; (8001bc8 <HAL_RCC_ClockConfig+0x254>)
 80019a2:	f043 0304 	orr.w	r3, r3, #4
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b87      	ldr	r3, [pc, #540]	; (8001bc8 <HAL_RCC_ClockConfig+0x254>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f023 0201 	bic.w	r2, r3, #1
 80019b0:	4985      	ldr	r1, [pc, #532]	; (8001bc8 <HAL_RCC_ClockConfig+0x254>)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b8:	4b83      	ldr	r3, [pc, #524]	; (8001bc8 <HAL_RCC_ClockConfig+0x254>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d001      	beq.n	80019ca <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e0f9      	b.n	8001bbe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d008      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d6:	4b7d      	ldr	r3, [pc, #500]	; (8001bcc <HAL_RCC_ClockConfig+0x258>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	497a      	ldr	r1, [pc, #488]	; (8001bcc <HAL_RCC_ClockConfig+0x258>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 808e 	beq.w	8001b12 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d107      	bne.n	8001a0e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019fe:	4b73      	ldr	r3, [pc, #460]	; (8001bcc <HAL_RCC_ClockConfig+0x258>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d121      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e0d7      	b.n	8001bbe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d107      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a16:	4b6d      	ldr	r3, [pc, #436]	; (8001bcc <HAL_RCC_ClockConfig+0x258>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d115      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e0cb      	b.n	8001bbe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d107      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a2e:	4b67      	ldr	r3, [pc, #412]	; (8001bcc <HAL_RCC_ClockConfig+0x258>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d109      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e0bf      	b.n	8001bbe <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a3e:	4b63      	ldr	r3, [pc, #396]	; (8001bcc <HAL_RCC_ClockConfig+0x258>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e0b7      	b.n	8001bbe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a4e:	4b5f      	ldr	r3, [pc, #380]	; (8001bcc <HAL_RCC_ClockConfig+0x258>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f023 0203 	bic.w	r2, r3, #3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	495c      	ldr	r1, [pc, #368]	; (8001bcc <HAL_RCC_ClockConfig+0x258>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a60:	f7ff f926 	bl	8000cb0 <HAL_GetTick>
 8001a64:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d112      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a6e:	e00a      	b.n	8001a86 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a70:	f7ff f91e 	bl	8000cb0 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e09b      	b.n	8001bbe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a86:	4b51      	ldr	r3, [pc, #324]	; (8001bcc <HAL_RCC_ClockConfig+0x258>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d1ee      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xfc>
 8001a92:	e03e      	b.n	8001b12 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d112      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a9c:	e00a      	b.n	8001ab4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9e:	f7ff f907 	bl	8000cb0 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e084      	b.n	8001bbe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab4:	4b45      	ldr	r3, [pc, #276]	; (8001bcc <HAL_RCC_ClockConfig+0x258>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b0c      	cmp	r3, #12
 8001abe:	d1ee      	bne.n	8001a9e <HAL_RCC_ClockConfig+0x12a>
 8001ac0:	e027      	b.n	8001b12 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d11d      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aca:	e00a      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001acc:	f7ff f8f0 	bl	8000cb0 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e06d      	b.n	8001bbe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ae2:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <HAL_RCC_ClockConfig+0x258>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d1ee      	bne.n	8001acc <HAL_RCC_ClockConfig+0x158>
 8001aee:	e010      	b.n	8001b12 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af0:	f7ff f8de 	bl	8000cb0 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e05b      	b.n	8001bbe <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b06:	4b31      	ldr	r3, [pc, #196]	; (8001bcc <HAL_RCC_ClockConfig+0x258>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1ee      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b12:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <HAL_RCC_ClockConfig+0x254>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d219      	bcs.n	8001b54 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d105      	bne.n	8001b32 <HAL_RCC_ClockConfig+0x1be>
 8001b26:	4b28      	ldr	r3, [pc, #160]	; (8001bc8 <HAL_RCC_ClockConfig+0x254>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a27      	ldr	r2, [pc, #156]	; (8001bc8 <HAL_RCC_ClockConfig+0x254>)
 8001b2c:	f043 0304 	orr.w	r3, r3, #4
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <HAL_RCC_ClockConfig+0x254>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f023 0201 	bic.w	r2, r3, #1
 8001b3a:	4923      	ldr	r1, [pc, #140]	; (8001bc8 <HAL_RCC_ClockConfig+0x254>)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b42:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <HAL_RCC_ClockConfig+0x254>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e034      	b.n	8001bbe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b60:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <HAL_RCC_ClockConfig+0x258>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	4917      	ldr	r1, [pc, #92]	; (8001bcc <HAL_RCC_ClockConfig+0x258>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d009      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b7e:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <HAL_RCC_ClockConfig+0x258>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	490f      	ldr	r1, [pc, #60]	; (8001bcc <HAL_RCC_ClockConfig+0x258>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b92:	f000 f823 	bl	8001bdc <HAL_RCC_GetSysClockFreq>
 8001b96:	4602      	mov	r2, r0
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <HAL_RCC_ClockConfig+0x258>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	490b      	ldr	r1, [pc, #44]	; (8001bd0 <HAL_RCC_ClockConfig+0x25c>)
 8001ba4:	5ccb      	ldrb	r3, [r1, r3]
 8001ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8001baa:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_RCC_ClockConfig+0x264>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fdb8 	bl	8000728 <HAL_InitTick>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bbc:	7afb      	ldrb	r3, [r7, #11]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40023c00 	.word	0x40023c00
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	0800396c 	.word	0x0800396c
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	20000034 	.word	0x20000034

08001bdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001be0:	b092      	sub	sp, #72	; 0x48
 8001be2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001be4:	4b79      	ldr	r3, [pc, #484]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b0c      	cmp	r3, #12
 8001bf2:	d00d      	beq.n	8001c10 <HAL_RCC_GetSysClockFreq+0x34>
 8001bf4:	2b0c      	cmp	r3, #12
 8001bf6:	f200 80d5 	bhi.w	8001da4 <HAL_RCC_GetSysClockFreq+0x1c8>
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d002      	beq.n	8001c04 <HAL_RCC_GetSysClockFreq+0x28>
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d003      	beq.n	8001c0a <HAL_RCC_GetSysClockFreq+0x2e>
 8001c02:	e0cf      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c04:	4b72      	ldr	r3, [pc, #456]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001c06:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001c08:	e0da      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c0a:	4b72      	ldr	r3, [pc, #456]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001c0c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001c0e:	e0d7      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c12:	0c9b      	lsrs	r3, r3, #18
 8001c14:	f003 020f 	and.w	r2, r3, #15
 8001c18:	4b6f      	ldr	r3, [pc, #444]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001c1a:	5c9b      	ldrb	r3, [r3, r2]
 8001c1c:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c20:	0d9b      	lsrs	r3, r3, #22
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	3301      	adds	r3, #1
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c2a:	4b68      	ldr	r3, [pc, #416]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d05d      	beq.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c38:	2200      	movs	r2, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	4604      	mov	r4, r0
 8001c40:	460d      	mov	r5, r1
 8001c42:	4622      	mov	r2, r4
 8001c44:	462b      	mov	r3, r5
 8001c46:	f04f 0000 	mov.w	r0, #0
 8001c4a:	f04f 0100 	mov.w	r1, #0
 8001c4e:	0159      	lsls	r1, r3, #5
 8001c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c54:	0150      	lsls	r0, r2, #5
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	1a51      	subs	r1, r2, r1
 8001c5e:	6139      	str	r1, [r7, #16]
 8001c60:	4629      	mov	r1, r5
 8001c62:	eb63 0301 	sbc.w	r3, r3, r1
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c74:	4659      	mov	r1, fp
 8001c76:	018b      	lsls	r3, r1, #6
 8001c78:	4651      	mov	r1, sl
 8001c7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c7e:	4651      	mov	r1, sl
 8001c80:	018a      	lsls	r2, r1, #6
 8001c82:	46d4      	mov	ip, sl
 8001c84:	ebb2 080c 	subs.w	r8, r2, ip
 8001c88:	4659      	mov	r1, fp
 8001c8a:	eb63 0901 	sbc.w	r9, r3, r1
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ca2:	4690      	mov	r8, r2
 8001ca4:	4699      	mov	r9, r3
 8001ca6:	4623      	mov	r3, r4
 8001ca8:	eb18 0303 	adds.w	r3, r8, r3
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	462b      	mov	r3, r5
 8001cb0:	eb49 0303 	adc.w	r3, r9, r3
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cc2:	4629      	mov	r1, r5
 8001cc4:	024b      	lsls	r3, r1, #9
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	4629      	mov	r1, r5
 8001cca:	4604      	mov	r4, r0
 8001ccc:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001cd0:	4601      	mov	r1, r0
 8001cd2:	024a      	lsls	r2, r1, #9
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cda:	2200      	movs	r2, #0
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ce0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ce4:	f7fe fa52 	bl	800018c <__aeabi_uldivmod>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4613      	mov	r3, r2
 8001cee:	647b      	str	r3, [r7, #68]	; 0x44
 8001cf0:	e055      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	623b      	str	r3, [r7, #32]
 8001cf8:	627a      	str	r2, [r7, #36]	; 0x24
 8001cfa:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cfe:	4642      	mov	r2, r8
 8001d00:	464b      	mov	r3, r9
 8001d02:	f04f 0000 	mov.w	r0, #0
 8001d06:	f04f 0100 	mov.w	r1, #0
 8001d0a:	0159      	lsls	r1, r3, #5
 8001d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d10:	0150      	lsls	r0, r2, #5
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	46c4      	mov	ip, r8
 8001d18:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001d1c:	4640      	mov	r0, r8
 8001d1e:	4649      	mov	r1, r9
 8001d20:	468c      	mov	ip, r1
 8001d22:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d32:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d36:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d3a:	ebb2 040a 	subs.w	r4, r2, sl
 8001d3e:	eb63 050b 	sbc.w	r5, r3, fp
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	00eb      	lsls	r3, r5, #3
 8001d4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d50:	00e2      	lsls	r2, r4, #3
 8001d52:	4614      	mov	r4, r2
 8001d54:	461d      	mov	r5, r3
 8001d56:	4603      	mov	r3, r0
 8001d58:	18e3      	adds	r3, r4, r3
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	eb45 0303 	adc.w	r3, r5, r3
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d70:	4629      	mov	r1, r5
 8001d72:	028b      	lsls	r3, r1, #10
 8001d74:	4620      	mov	r0, r4
 8001d76:	4629      	mov	r1, r5
 8001d78:	4604      	mov	r4, r0
 8001d7a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001d7e:	4601      	mov	r1, r0
 8001d80:	028a      	lsls	r2, r1, #10
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d88:	2200      	movs	r2, #0
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	61fa      	str	r2, [r7, #28]
 8001d8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d92:	f7fe f9fb 	bl	800018c <__aeabi_uldivmod>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8001d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001da0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001da2:	e00d      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	0b5b      	lsrs	r3, r3, #13
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db2:	3301      	adds	r3, #1
 8001db4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001dbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3748      	adds	r7, #72	; 0x48
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	00f42400 	.word	0x00f42400
 8001dd4:	007a1200 	.word	0x007a1200
 8001dd8:	08003960 	.word	0x08003960

08001ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de0:	4b02      	ldr	r3, [pc, #8]	; (8001dec <HAL_RCC_GetHCLKFreq+0x10>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	20000000 	.word	0x20000000

08001df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001df4:	f7ff fff2 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	4903      	ldr	r1, [pc, #12]	; (8001e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	0800397c 	.word	0x0800397c

08001e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e1c:	f7ff ffde 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	0adb      	lsrs	r3, r3, #11
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	4903      	ldr	r1, [pc, #12]	; (8001e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	0800397c 	.word	0x0800397c

08001e40 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <HAL_RCC_GetClockConfig+0x58>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 0203 	and.w	r2, r3, #3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <HAL_RCC_GetClockConfig+0x58>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_RCC_GetClockConfig+0x58>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <HAL_RCC_GetClockConfig+0x58>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	08db      	lsrs	r3, r3, #3
 8001e7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_RCC_GetClockConfig+0x5c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0201 	and.w	r2, r3, #1
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	601a      	str	r2, [r3, #0]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40023c00 	.word	0x40023c00

08001ea0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001eac:	4b29      	ldr	r3, [pc, #164]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d12c      	bne.n	8001f12 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001eb8:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001ec4:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	e016      	b.n	8001efe <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed0:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	4a1f      	ldr	r2, [pc, #124]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eda:	6253      	str	r3, [r2, #36]	; 0x24
 8001edc:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001ef0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef2:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	4a17      	ldr	r2, [pc, #92]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001efc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001f04:	d105      	bne.n	8001f12 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001f0c:	d101      	bne.n	8001f12 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001f0e:	2301      	movs	r3, #1
 8001f10:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d105      	bne.n	8001f24 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001f18:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0f      	ldr	r2, [pc, #60]	; (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f1e:	f043 0304 	orr.w	r3, r3, #4
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f023 0201 	bic.w	r2, r3, #1
 8001f2c:	490b      	ldr	r1, [pc, #44]	; (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d001      	beq.n	8001f46 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40007000 	.word	0x40007000
 8001f5c:	40023c00 	.word	0x40023c00

08001f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e031      	b.n	8001fd6 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d106      	bne.n	8001f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f829 	bl	8001fde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	f000 f978 	bl	8002294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b01      	cmp	r3, #1
 8002002:	d001      	beq.n	8002008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e03a      	b.n	800207e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002028:	d00e      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0x58>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a16      	ldr	r2, [pc, #88]	; (8002088 <HAL_TIM_Base_Start_IT+0x98>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d009      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0x58>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a14      	ldr	r2, [pc, #80]	; (800208c <HAL_TIM_Base_Start_IT+0x9c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d004      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0x58>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a13      	ldr	r2, [pc, #76]	; (8002090 <HAL_TIM_Base_Start_IT+0xa0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d111      	bne.n	800206c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2b06      	cmp	r3, #6
 8002058:	d010      	beq.n	800207c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 0201 	orr.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800206a:	e007      	b.n	800207c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	40000400 	.word	0x40000400
 800208c:	40000800 	.word	0x40000800
 8002090:	40010800 	.word	0x40010800

08002094 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d122      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d11b      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0202 	mvn.w	r2, #2
 80020c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f8c1 	bl	800225e <HAL_TIM_IC_CaptureCallback>
 80020dc:	e005      	b.n	80020ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f8b4 	bl	800224c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f8c3 	bl	8002270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d122      	bne.n	8002144 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b04      	cmp	r3, #4
 800210a:	d11b      	bne.n	8002144 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0204 	mvn.w	r2, #4
 8002114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2202      	movs	r2, #2
 800211a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f897 	bl	800225e <HAL_TIM_IC_CaptureCallback>
 8002130:	e005      	b.n	800213e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f88a 	bl	800224c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f899 	bl	8002270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b08      	cmp	r3, #8
 8002150:	d122      	bne.n	8002198 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b08      	cmp	r3, #8
 800215e:	d11b      	bne.n	8002198 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0208 	mvn.w	r2, #8
 8002168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2204      	movs	r2, #4
 800216e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f86d 	bl	800225e <HAL_TIM_IC_CaptureCallback>
 8002184:	e005      	b.n	8002192 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f860 	bl	800224c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f86f 	bl	8002270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b10      	cmp	r3, #16
 80021a4:	d122      	bne.n	80021ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b10      	cmp	r3, #16
 80021b2:	d11b      	bne.n	80021ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0210 	mvn.w	r2, #16
 80021bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2208      	movs	r2, #8
 80021c2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f843 	bl	800225e <HAL_TIM_IC_CaptureCallback>
 80021d8:	e005      	b.n	80021e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f836 	bl	800224c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f845 	bl	8002270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d10e      	bne.n	8002218 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b01      	cmp	r3, #1
 8002206:	d107      	bne.n	8002218 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0201 	mvn.w	r2, #1
 8002210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7fe fa46 	bl	80006a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002222:	2b40      	cmp	r3, #64	; 0x40
 8002224:	d10e      	bne.n	8002244 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002230:	2b40      	cmp	r3, #64	; 0x40
 8002232:	d107      	bne.n	8002244 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800223c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f81f 	bl	8002282 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr

0800225e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr

08002282 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022aa:	d00f      	beq.n	80022cc <TIM_Base_SetConfig+0x38>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a2b      	ldr	r2, [pc, #172]	; (800235c <TIM_Base_SetConfig+0xc8>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d00b      	beq.n	80022cc <TIM_Base_SetConfig+0x38>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a2a      	ldr	r2, [pc, #168]	; (8002360 <TIM_Base_SetConfig+0xcc>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d007      	beq.n	80022cc <TIM_Base_SetConfig+0x38>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a29      	ldr	r2, [pc, #164]	; (8002364 <TIM_Base_SetConfig+0xd0>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d003      	beq.n	80022cc <TIM_Base_SetConfig+0x38>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a28      	ldr	r2, [pc, #160]	; (8002368 <TIM_Base_SetConfig+0xd4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d108      	bne.n	80022de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e4:	d017      	beq.n	8002316 <TIM_Base_SetConfig+0x82>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a1c      	ldr	r2, [pc, #112]	; (800235c <TIM_Base_SetConfig+0xc8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d013      	beq.n	8002316 <TIM_Base_SetConfig+0x82>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a1b      	ldr	r2, [pc, #108]	; (8002360 <TIM_Base_SetConfig+0xcc>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00f      	beq.n	8002316 <TIM_Base_SetConfig+0x82>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a1a      	ldr	r2, [pc, #104]	; (8002364 <TIM_Base_SetConfig+0xd0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00b      	beq.n	8002316 <TIM_Base_SetConfig+0x82>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a19      	ldr	r2, [pc, #100]	; (8002368 <TIM_Base_SetConfig+0xd4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d007      	beq.n	8002316 <TIM_Base_SetConfig+0x82>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a18      	ldr	r2, [pc, #96]	; (800236c <TIM_Base_SetConfig+0xd8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d003      	beq.n	8002316 <TIM_Base_SetConfig+0x82>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a17      	ldr	r2, [pc, #92]	; (8002370 <TIM_Base_SetConfig+0xdc>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d108      	bne.n	8002328 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800231c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4313      	orrs	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	4313      	orrs	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	615a      	str	r2, [r3, #20]
}
 8002352:	bf00      	nop
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	40000400 	.word	0x40000400
 8002360:	40000800 	.word	0x40000800
 8002364:	40000c00 	.word	0x40000c00
 8002368:	40010800 	.word	0x40010800
 800236c:	40010c00 	.word	0x40010c00
 8002370:	40011000 	.word	0x40011000

08002374 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e03f      	b.n	8002406 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7fe fb58 	bl	8000a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2224      	movs	r2, #36	; 0x24
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 fc85 	bl	8002cc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695a      	ldr	r2, [r3, #20]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b08a      	sub	sp, #40	; 0x28
 8002412:	af02      	add	r7, sp, #8
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	603b      	str	r3, [r7, #0]
 800241a:	4613      	mov	r3, r2
 800241c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b20      	cmp	r3, #32
 800242c:	d17c      	bne.n	8002528 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <HAL_UART_Transmit+0x2c>
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e075      	b.n	800252a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_UART_Transmit+0x3e>
 8002448:	2302      	movs	r3, #2
 800244a:	e06e      	b.n	800252a <HAL_UART_Transmit+0x11c>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2221      	movs	r2, #33	; 0x21
 800245e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002462:	f7fe fc25 	bl	8000cb0 <HAL_GetTick>
 8002466:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	88fa      	ldrh	r2, [r7, #6]
 800246c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	88fa      	ldrh	r2, [r7, #6]
 8002472:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800247c:	d108      	bne.n	8002490 <HAL_UART_Transmit+0x82>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d104      	bne.n	8002490 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	e003      	b.n	8002498 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002494:	2300      	movs	r3, #0
 8002496:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80024a0:	e02a      	b.n	80024f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2200      	movs	r2, #0
 80024aa:	2180      	movs	r1, #128	; 0x80
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 fa38 	bl	8002922 <UART_WaitOnFlagUntilTimeout>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e036      	b.n	800252a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10b      	bne.n	80024da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	3302      	adds	r3, #2
 80024d6:	61bb      	str	r3, [r7, #24]
 80024d8:	e007      	b.n	80024ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	781a      	ldrb	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	3301      	adds	r3, #1
 80024e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1cf      	bne.n	80024a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2200      	movs	r2, #0
 800250a:	2140      	movs	r1, #64	; 0x40
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 fa08 	bl	8002922 <UART_WaitOnFlagUntilTimeout>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e006      	b.n	800252a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2220      	movs	r2, #32
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	e000      	b.n	800252a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002528:	2302      	movs	r3, #2
  }
}
 800252a:	4618      	mov	r0, r3
 800252c:	3720      	adds	r7, #32
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
 8002538:	60f8      	str	r0, [r7, #12]
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	4613      	mov	r3, r2
 800253e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b20      	cmp	r3, #32
 800254a:	d11d      	bne.n	8002588 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_UART_Receive_IT+0x26>
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e016      	b.n	800258a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_UART_Receive_IT+0x38>
 8002566:	2302      	movs	r3, #2
 8002568:	e00f      	b.n	800258a <HAL_UART_Receive_IT+0x58>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002578:	88fb      	ldrh	r3, [r7, #6]
 800257a:	461a      	mov	r2, r3
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 fa19 	bl	80029b6 <UART_Start_Receive_IT>
 8002584:	4603      	mov	r3, r0
 8002586:	e000      	b.n	800258a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002588:	2302      	movs	r3, #2
  }
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	; 0x28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10d      	bne.n	80025e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	f003 0320 	and.w	r3, r3, #32
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_UART_IRQHandler+0x52>
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 fac9 	bl	8002b76 <UART_Receive_IT>
      return;
 80025e4:	e17b      	b.n	80028de <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80b1 	beq.w	8002750 <HAL_UART_IRQHandler+0x1bc>
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d105      	bne.n	8002604 <HAL_UART_IRQHandler+0x70>
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 80a6 	beq.w	8002750 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00a      	beq.n	8002624 <HAL_UART_IRQHandler+0x90>
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	f043 0201 	orr.w	r2, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <HAL_UART_IRQHandler+0xb0>
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f043 0202 	orr.w	r2, r3, #2
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00a      	beq.n	8002664 <HAL_UART_IRQHandler+0xd0>
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	f043 0204 	orr.w	r2, r3, #4
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00f      	beq.n	800268e <HAL_UART_IRQHandler+0xfa>
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b00      	cmp	r3, #0
 8002676:	d104      	bne.n	8002682 <HAL_UART_IRQHandler+0xee>
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f043 0208 	orr.w	r2, r3, #8
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 811e 	beq.w	80028d4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	f003 0320 	and.w	r3, r3, #32
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <HAL_UART_IRQHandler+0x11e>
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 fa62 	bl	8002b76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026bc:	2b40      	cmp	r3, #64	; 0x40
 80026be:	bf0c      	ite	eq
 80026c0:	2301      	moveq	r3, #1
 80026c2:	2300      	movne	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <HAL_UART_IRQHandler+0x146>
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d031      	beq.n	800273e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f9a4 	bl	8002a28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ea:	2b40      	cmp	r3, #64	; 0x40
 80026ec:	d123      	bne.n	8002736 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695a      	ldr	r2, [r3, #20]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026fc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	2b00      	cmp	r3, #0
 8002704:	d013      	beq.n	800272e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270a:	4a76      	ldr	r2, [pc, #472]	; (80028e4 <HAL_UART_IRQHandler+0x350>)
 800270c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fc14 	bl	8000f40 <HAL_DMA_Abort_IT>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d016      	beq.n	800274c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002728:	4610      	mov	r0, r2
 800272a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800272c:	e00e      	b.n	800274c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f8e3 	bl	80028fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002734:	e00a      	b.n	800274c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f8df 	bl	80028fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800273c:	e006      	b.n	800274c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f8db 	bl	80028fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800274a:	e0c3      	b.n	80028d4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800274c:	bf00      	nop
    return;
 800274e:	e0c1      	b.n	80028d4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	2b01      	cmp	r3, #1
 8002756:	f040 80a1 	bne.w	800289c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 809b 	beq.w	800289c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 8095 	beq.w	800289c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002792:	2b40      	cmp	r3, #64	; 0x40
 8002794:	d14e      	bne.n	8002834 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80027a0:	8a3b      	ldrh	r3, [r7, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 8098 	beq.w	80028d8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027ac:	8a3a      	ldrh	r2, [r7, #16]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	f080 8092 	bcs.w	80028d8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	8a3a      	ldrh	r2, [r7, #16]
 80027b8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d02b      	beq.n	800281c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027d2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0201 	bic.w	r2, r2, #1
 80027e2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027f2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0210 	bic.w	r2, r2, #16
 8002810:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe fb55 	bl	8000ec6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002824:	b29b      	uxth	r3, r3
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	b29b      	uxth	r3, r3
 800282a:	4619      	mov	r1, r3
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f86d 	bl	800290c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002832:	e051      	b.n	80028d8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800283c:	b29b      	uxth	r3, r3
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002846:	b29b      	uxth	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d047      	beq.n	80028dc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800284c:	8a7b      	ldrh	r3, [r7, #18]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d044      	beq.n	80028dc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002860:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695a      	ldr	r2, [r3, #20]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0201 	bic.w	r2, r2, #1
 8002870:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0210 	bic.w	r2, r2, #16
 800288e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002890:	8a7b      	ldrh	r3, [r7, #18]
 8002892:	4619      	mov	r1, r3
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f839 	bl	800290c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800289a:	e01f      	b.n	80028dc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_UART_IRQHandler+0x324>
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f8f9 	bl	8002aa8 <UART_Transmit_IT>
    return;
 80028b6:	e012      	b.n	80028de <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00d      	beq.n	80028de <HAL_UART_IRQHandler+0x34a>
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f93a 	bl	8002b46 <UART_EndTransmit_IT>
    return;
 80028d2:	e004      	b.n	80028de <HAL_UART_IRQHandler+0x34a>
    return;
 80028d4:	bf00      	nop
 80028d6:	e002      	b.n	80028de <HAL_UART_IRQHandler+0x34a>
      return;
 80028d8:	bf00      	nop
 80028da:	e000      	b.n	80028de <HAL_UART_IRQHandler+0x34a>
      return;
 80028dc:	bf00      	nop
  }
}
 80028de:	3728      	adds	r7, #40	; 0x28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	08002a81 	.word	0x08002a81

080028e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr

080028fa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr

08002922 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b084      	sub	sp, #16
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	603b      	str	r3, [r7, #0]
 800292e:	4613      	mov	r3, r2
 8002930:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002932:	e02c      	b.n	800298e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293a:	d028      	beq.n	800298e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <UART_WaitOnFlagUntilTimeout+0x30>
 8002942:	f7fe f9b5 	bl	8000cb0 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	429a      	cmp	r2, r3
 8002950:	d21d      	bcs.n	800298e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002960:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695a      	ldr	r2, [r3, #20]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0201 	bic.w	r2, r2, #1
 8002970:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2220      	movs	r2, #32
 800297e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e00f      	b.n	80029ae <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4013      	ands	r3, r2
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	429a      	cmp	r2, r3
 800299c:	bf0c      	ite	eq
 800299e:	2301      	moveq	r3, #1
 80029a0:	2300      	movne	r3, #0
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d0c3      	beq.n	8002934 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b085      	sub	sp, #20
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	4613      	mov	r3, r2
 80029c2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	88fa      	ldrh	r2, [r7, #6]
 80029ce:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	88fa      	ldrh	r2, [r7, #6]
 80029d4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2222      	movs	r2, #34	; 0x22
 80029e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029fa:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0220 	orr.w	r2, r2, #32
 8002a1a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002a3e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695a      	ldr	r2, [r3, #20]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0201 	bic.w	r2, r2, #1
 8002a4e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d107      	bne.n	8002a68 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0210 	bic.w	r2, r2, #16
 8002a66:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f7ff ff2d 	bl	80028fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002aa0:	bf00      	nop
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b21      	cmp	r3, #33	; 0x21
 8002aba:	d13e      	bne.n	8002b3a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac4:	d114      	bne.n	8002af0 <UART_Transmit_IT+0x48>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d110      	bne.n	8002af0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ae2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	1c9a      	adds	r2, r3, #2
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	621a      	str	r2, [r3, #32]
 8002aee:	e008      	b.n	8002b02 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	1c59      	adds	r1, r3, #1
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6211      	str	r1, [r2, #32]
 8002afa:	781a      	ldrb	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10f      	bne.n	8002b36 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e000      	b.n	8002b3c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b3a:	2302      	movs	r3, #2
  }
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff febe 	bl	80028e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b086      	sub	sp, #24
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b22      	cmp	r3, #34	; 0x22
 8002b88:	f040 8099 	bne.w	8002cbe <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b94:	d117      	bne.n	8002bc6 <UART_Receive_IT+0x50>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d113      	bne.n	8002bc6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbe:	1c9a      	adds	r2, r3, #2
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	629a      	str	r2, [r3, #40]	; 0x28
 8002bc4:	e026      	b.n	8002c14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd8:	d007      	beq.n	8002bea <UART_Receive_IT+0x74>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10a      	bne.n	8002bf8 <UART_Receive_IT+0x82>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	e008      	b.n	8002c0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4619      	mov	r1, r3
 8002c22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d148      	bne.n	8002cba <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0220 	bic.w	r2, r2, #32
 8002c36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695a      	ldr	r2, [r3, #20]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d123      	bne.n	8002cb0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0210 	bic.w	r2, r2, #16
 8002c7c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	2b10      	cmp	r3, #16
 8002c8a:	d10a      	bne.n	8002ca2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff fe2f 	bl	800290c <HAL_UARTEx_RxEventCallback>
 8002cae:	e002      	b.n	8002cb6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7fd ff49 	bl	8000b48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e002      	b.n	8002cc0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	e000      	b.n	8002cc0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002cbe:	2302      	movs	r3, #2
  }
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002d08:	f023 030c 	bic.w	r3, r3, #12
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	430b      	orrs	r3, r1
 8002d14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699a      	ldr	r2, [r3, #24]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a55      	ldr	r2, [pc, #340]	; (8002e88 <UART_SetConfig+0x1c0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d103      	bne.n	8002d3e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d36:	f7ff f86f 	bl	8001e18 <HAL_RCC_GetPCLK2Freq>
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	e002      	b.n	8002d44 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d3e:	f7ff f857 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
 8002d42:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d4c:	d14c      	bne.n	8002de8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	009a      	lsls	r2, r3, #2
 8002d58:	441a      	add	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d64:	4a49      	ldr	r2, [pc, #292]	; (8002e8c <UART_SetConfig+0x1c4>)
 8002d66:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	0119      	lsls	r1, r3, #4
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	009a      	lsls	r2, r3, #2
 8002d78:	441a      	add	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d84:	4b41      	ldr	r3, [pc, #260]	; (8002e8c <UART_SetConfig+0x1c4>)
 8002d86:	fba3 0302 	umull	r0, r3, r3, r2
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	2064      	movs	r0, #100	; 0x64
 8002d8e:	fb00 f303 	mul.w	r3, r0, r3
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	3332      	adds	r3, #50	; 0x32
 8002d98:	4a3c      	ldr	r2, [pc, #240]	; (8002e8c <UART_SetConfig+0x1c4>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002da6:	4419      	add	r1, r3
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	009a      	lsls	r2, r3, #2
 8002db2:	441a      	add	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dbe:	4b33      	ldr	r3, [pc, #204]	; (8002e8c <UART_SetConfig+0x1c4>)
 8002dc0:	fba3 0302 	umull	r0, r3, r3, r2
 8002dc4:	095b      	lsrs	r3, r3, #5
 8002dc6:	2064      	movs	r0, #100	; 0x64
 8002dc8:	fb00 f303 	mul.w	r3, r0, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	3332      	adds	r3, #50	; 0x32
 8002dd2:	4a2e      	ldr	r2, [pc, #184]	; (8002e8c <UART_SetConfig+0x1c4>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	f003 0207 	and.w	r2, r3, #7
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	440a      	add	r2, r1
 8002de4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002de6:	e04a      	b.n	8002e7e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	009a      	lsls	r2, r3, #2
 8002df2:	441a      	add	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfe:	4a23      	ldr	r2, [pc, #140]	; (8002e8c <UART_SetConfig+0x1c4>)
 8002e00:	fba2 2303 	umull	r2, r3, r2, r3
 8002e04:	095b      	lsrs	r3, r3, #5
 8002e06:	0119      	lsls	r1, r3, #4
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	009a      	lsls	r2, r3, #2
 8002e12:	441a      	add	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e1e:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <UART_SetConfig+0x1c4>)
 8002e20:	fba3 0302 	umull	r0, r3, r3, r2
 8002e24:	095b      	lsrs	r3, r3, #5
 8002e26:	2064      	movs	r0, #100	; 0x64
 8002e28:	fb00 f303 	mul.w	r3, r0, r3
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	3332      	adds	r3, #50	; 0x32
 8002e32:	4a16      	ldr	r2, [pc, #88]	; (8002e8c <UART_SetConfig+0x1c4>)
 8002e34:	fba2 2303 	umull	r2, r3, r2, r3
 8002e38:	095b      	lsrs	r3, r3, #5
 8002e3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e3e:	4419      	add	r1, r3
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	009a      	lsls	r2, r3, #2
 8002e4a:	441a      	add	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e56:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <UART_SetConfig+0x1c4>)
 8002e58:	fba3 0302 	umull	r0, r3, r3, r2
 8002e5c:	095b      	lsrs	r3, r3, #5
 8002e5e:	2064      	movs	r0, #100	; 0x64
 8002e60:	fb00 f303 	mul.w	r3, r0, r3
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	3332      	adds	r3, #50	; 0x32
 8002e6a:	4a08      	ldr	r2, [pc, #32]	; (8002e8c <UART_SetConfig+0x1c4>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	095b      	lsrs	r3, r3, #5
 8002e72:	f003 020f 	and.w	r2, r3, #15
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	440a      	add	r2, r1
 8002e7c:	609a      	str	r2, [r3, #8]
}
 8002e7e:	bf00      	nop
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40013800 	.word	0x40013800
 8002e8c:	51eb851f 	.word	0x51eb851f

08002e90 <__errno>:
 8002e90:	4b01      	ldr	r3, [pc, #4]	; (8002e98 <__errno+0x8>)
 8002e92:	6818      	ldr	r0, [r3, #0]
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	2000003c 	.word	0x2000003c

08002e9c <__libc_init_array>:
 8002e9c:	b570      	push	{r4, r5, r6, lr}
 8002e9e:	2600      	movs	r6, #0
 8002ea0:	4d0c      	ldr	r5, [pc, #48]	; (8002ed4 <__libc_init_array+0x38>)
 8002ea2:	4c0d      	ldr	r4, [pc, #52]	; (8002ed8 <__libc_init_array+0x3c>)
 8002ea4:	1b64      	subs	r4, r4, r5
 8002ea6:	10a4      	asrs	r4, r4, #2
 8002ea8:	42a6      	cmp	r6, r4
 8002eaa:	d109      	bne.n	8002ec0 <__libc_init_array+0x24>
 8002eac:	f000 fd2e 	bl	800390c <_init>
 8002eb0:	2600      	movs	r6, #0
 8002eb2:	4d0a      	ldr	r5, [pc, #40]	; (8002edc <__libc_init_array+0x40>)
 8002eb4:	4c0a      	ldr	r4, [pc, #40]	; (8002ee0 <__libc_init_array+0x44>)
 8002eb6:	1b64      	subs	r4, r4, r5
 8002eb8:	10a4      	asrs	r4, r4, #2
 8002eba:	42a6      	cmp	r6, r4
 8002ebc:	d105      	bne.n	8002eca <__libc_init_array+0x2e>
 8002ebe:	bd70      	pop	{r4, r5, r6, pc}
 8002ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec4:	4798      	blx	r3
 8002ec6:	3601      	adds	r6, #1
 8002ec8:	e7ee      	b.n	8002ea8 <__libc_init_array+0xc>
 8002eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ece:	4798      	blx	r3
 8002ed0:	3601      	adds	r6, #1
 8002ed2:	e7f2      	b.n	8002eba <__libc_init_array+0x1e>
 8002ed4:	080039f0 	.word	0x080039f0
 8002ed8:	080039f0 	.word	0x080039f0
 8002edc:	080039f0 	.word	0x080039f0
 8002ee0:	080039f4 	.word	0x080039f4

08002ee4 <memset>:
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	4402      	add	r2, r0
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d100      	bne.n	8002eee <memset+0xa>
 8002eec:	4770      	bx	lr
 8002eee:	f803 1b01 	strb.w	r1, [r3], #1
 8002ef2:	e7f9      	b.n	8002ee8 <memset+0x4>

08002ef4 <_puts_r>:
 8002ef4:	b570      	push	{r4, r5, r6, lr}
 8002ef6:	460e      	mov	r6, r1
 8002ef8:	4605      	mov	r5, r0
 8002efa:	b118      	cbz	r0, 8002f04 <_puts_r+0x10>
 8002efc:	6983      	ldr	r3, [r0, #24]
 8002efe:	b90b      	cbnz	r3, 8002f04 <_puts_r+0x10>
 8002f00:	f000 fa5a 	bl	80033b8 <__sinit>
 8002f04:	69ab      	ldr	r3, [r5, #24]
 8002f06:	68ac      	ldr	r4, [r5, #8]
 8002f08:	b913      	cbnz	r3, 8002f10 <_puts_r+0x1c>
 8002f0a:	4628      	mov	r0, r5
 8002f0c:	f000 fa54 	bl	80033b8 <__sinit>
 8002f10:	4b2c      	ldr	r3, [pc, #176]	; (8002fc4 <_puts_r+0xd0>)
 8002f12:	429c      	cmp	r4, r3
 8002f14:	d120      	bne.n	8002f58 <_puts_r+0x64>
 8002f16:	686c      	ldr	r4, [r5, #4]
 8002f18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f1a:	07db      	lsls	r3, r3, #31
 8002f1c:	d405      	bmi.n	8002f2a <_puts_r+0x36>
 8002f1e:	89a3      	ldrh	r3, [r4, #12]
 8002f20:	0598      	lsls	r0, r3, #22
 8002f22:	d402      	bmi.n	8002f2a <_puts_r+0x36>
 8002f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f26:	f000 fae5 	bl	80034f4 <__retarget_lock_acquire_recursive>
 8002f2a:	89a3      	ldrh	r3, [r4, #12]
 8002f2c:	0719      	lsls	r1, r3, #28
 8002f2e:	d51d      	bpl.n	8002f6c <_puts_r+0x78>
 8002f30:	6923      	ldr	r3, [r4, #16]
 8002f32:	b1db      	cbz	r3, 8002f6c <_puts_r+0x78>
 8002f34:	3e01      	subs	r6, #1
 8002f36:	68a3      	ldr	r3, [r4, #8]
 8002f38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	60a3      	str	r3, [r4, #8]
 8002f40:	bb39      	cbnz	r1, 8002f92 <_puts_r+0x9e>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	da38      	bge.n	8002fb8 <_puts_r+0xc4>
 8002f46:	4622      	mov	r2, r4
 8002f48:	210a      	movs	r1, #10
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	f000 f85e 	bl	800300c <__swbuf_r>
 8002f50:	3001      	adds	r0, #1
 8002f52:	d011      	beq.n	8002f78 <_puts_r+0x84>
 8002f54:	250a      	movs	r5, #10
 8002f56:	e011      	b.n	8002f7c <_puts_r+0x88>
 8002f58:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <_puts_r+0xd4>)
 8002f5a:	429c      	cmp	r4, r3
 8002f5c:	d101      	bne.n	8002f62 <_puts_r+0x6e>
 8002f5e:	68ac      	ldr	r4, [r5, #8]
 8002f60:	e7da      	b.n	8002f18 <_puts_r+0x24>
 8002f62:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <_puts_r+0xd8>)
 8002f64:	429c      	cmp	r4, r3
 8002f66:	bf08      	it	eq
 8002f68:	68ec      	ldreq	r4, [r5, #12]
 8002f6a:	e7d5      	b.n	8002f18 <_puts_r+0x24>
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	4628      	mov	r0, r5
 8002f70:	f000 f89e 	bl	80030b0 <__swsetup_r>
 8002f74:	2800      	cmp	r0, #0
 8002f76:	d0dd      	beq.n	8002f34 <_puts_r+0x40>
 8002f78:	f04f 35ff 	mov.w	r5, #4294967295
 8002f7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f7e:	07da      	lsls	r2, r3, #31
 8002f80:	d405      	bmi.n	8002f8e <_puts_r+0x9a>
 8002f82:	89a3      	ldrh	r3, [r4, #12]
 8002f84:	059b      	lsls	r3, r3, #22
 8002f86:	d402      	bmi.n	8002f8e <_puts_r+0x9a>
 8002f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f8a:	f000 fab4 	bl	80034f6 <__retarget_lock_release_recursive>
 8002f8e:	4628      	mov	r0, r5
 8002f90:	bd70      	pop	{r4, r5, r6, pc}
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	da04      	bge.n	8002fa0 <_puts_r+0xac>
 8002f96:	69a2      	ldr	r2, [r4, #24]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	dc06      	bgt.n	8002faa <_puts_r+0xb6>
 8002f9c:	290a      	cmp	r1, #10
 8002f9e:	d004      	beq.n	8002faa <_puts_r+0xb6>
 8002fa0:	6823      	ldr	r3, [r4, #0]
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	6022      	str	r2, [r4, #0]
 8002fa6:	7019      	strb	r1, [r3, #0]
 8002fa8:	e7c5      	b.n	8002f36 <_puts_r+0x42>
 8002faa:	4622      	mov	r2, r4
 8002fac:	4628      	mov	r0, r5
 8002fae:	f000 f82d 	bl	800300c <__swbuf_r>
 8002fb2:	3001      	adds	r0, #1
 8002fb4:	d1bf      	bne.n	8002f36 <_puts_r+0x42>
 8002fb6:	e7df      	b.n	8002f78 <_puts_r+0x84>
 8002fb8:	250a      	movs	r5, #10
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	6022      	str	r2, [r4, #0]
 8002fc0:	701d      	strb	r5, [r3, #0]
 8002fc2:	e7db      	b.n	8002f7c <_puts_r+0x88>
 8002fc4:	080039a8 	.word	0x080039a8
 8002fc8:	080039c8 	.word	0x080039c8
 8002fcc:	08003988 	.word	0x08003988

08002fd0 <puts>:
 8002fd0:	4b02      	ldr	r3, [pc, #8]	; (8002fdc <puts+0xc>)
 8002fd2:	4601      	mov	r1, r0
 8002fd4:	6818      	ldr	r0, [r3, #0]
 8002fd6:	f7ff bf8d 	b.w	8002ef4 <_puts_r>
 8002fda:	bf00      	nop
 8002fdc:	2000003c 	.word	0x2000003c

08002fe0 <strstr>:
 8002fe0:	780a      	ldrb	r2, [r1, #0]
 8002fe2:	b570      	push	{r4, r5, r6, lr}
 8002fe4:	b96a      	cbnz	r2, 8003002 <strstr+0x22>
 8002fe6:	bd70      	pop	{r4, r5, r6, pc}
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d109      	bne.n	8003000 <strstr+0x20>
 8002fec:	460c      	mov	r4, r1
 8002fee:	4605      	mov	r5, r0
 8002ff0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f6      	beq.n	8002fe6 <strstr+0x6>
 8002ff8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002ffc:	429e      	cmp	r6, r3
 8002ffe:	d0f7      	beq.n	8002ff0 <strstr+0x10>
 8003000:	3001      	adds	r0, #1
 8003002:	7803      	ldrb	r3, [r0, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1ef      	bne.n	8002fe8 <strstr+0x8>
 8003008:	4618      	mov	r0, r3
 800300a:	e7ec      	b.n	8002fe6 <strstr+0x6>

0800300c <__swbuf_r>:
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300e:	460e      	mov	r6, r1
 8003010:	4614      	mov	r4, r2
 8003012:	4605      	mov	r5, r0
 8003014:	b118      	cbz	r0, 800301e <__swbuf_r+0x12>
 8003016:	6983      	ldr	r3, [r0, #24]
 8003018:	b90b      	cbnz	r3, 800301e <__swbuf_r+0x12>
 800301a:	f000 f9cd 	bl	80033b8 <__sinit>
 800301e:	4b21      	ldr	r3, [pc, #132]	; (80030a4 <__swbuf_r+0x98>)
 8003020:	429c      	cmp	r4, r3
 8003022:	d12b      	bne.n	800307c <__swbuf_r+0x70>
 8003024:	686c      	ldr	r4, [r5, #4]
 8003026:	69a3      	ldr	r3, [r4, #24]
 8003028:	60a3      	str	r3, [r4, #8]
 800302a:	89a3      	ldrh	r3, [r4, #12]
 800302c:	071a      	lsls	r2, r3, #28
 800302e:	d52f      	bpl.n	8003090 <__swbuf_r+0x84>
 8003030:	6923      	ldr	r3, [r4, #16]
 8003032:	b36b      	cbz	r3, 8003090 <__swbuf_r+0x84>
 8003034:	6923      	ldr	r3, [r4, #16]
 8003036:	6820      	ldr	r0, [r4, #0]
 8003038:	b2f6      	uxtb	r6, r6
 800303a:	1ac0      	subs	r0, r0, r3
 800303c:	6963      	ldr	r3, [r4, #20]
 800303e:	4637      	mov	r7, r6
 8003040:	4283      	cmp	r3, r0
 8003042:	dc04      	bgt.n	800304e <__swbuf_r+0x42>
 8003044:	4621      	mov	r1, r4
 8003046:	4628      	mov	r0, r5
 8003048:	f000 f922 	bl	8003290 <_fflush_r>
 800304c:	bb30      	cbnz	r0, 800309c <__swbuf_r+0x90>
 800304e:	68a3      	ldr	r3, [r4, #8]
 8003050:	3001      	adds	r0, #1
 8003052:	3b01      	subs	r3, #1
 8003054:	60a3      	str	r3, [r4, #8]
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	6022      	str	r2, [r4, #0]
 800305c:	701e      	strb	r6, [r3, #0]
 800305e:	6963      	ldr	r3, [r4, #20]
 8003060:	4283      	cmp	r3, r0
 8003062:	d004      	beq.n	800306e <__swbuf_r+0x62>
 8003064:	89a3      	ldrh	r3, [r4, #12]
 8003066:	07db      	lsls	r3, r3, #31
 8003068:	d506      	bpl.n	8003078 <__swbuf_r+0x6c>
 800306a:	2e0a      	cmp	r6, #10
 800306c:	d104      	bne.n	8003078 <__swbuf_r+0x6c>
 800306e:	4621      	mov	r1, r4
 8003070:	4628      	mov	r0, r5
 8003072:	f000 f90d 	bl	8003290 <_fflush_r>
 8003076:	b988      	cbnz	r0, 800309c <__swbuf_r+0x90>
 8003078:	4638      	mov	r0, r7
 800307a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800307c:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <__swbuf_r+0x9c>)
 800307e:	429c      	cmp	r4, r3
 8003080:	d101      	bne.n	8003086 <__swbuf_r+0x7a>
 8003082:	68ac      	ldr	r4, [r5, #8]
 8003084:	e7cf      	b.n	8003026 <__swbuf_r+0x1a>
 8003086:	4b09      	ldr	r3, [pc, #36]	; (80030ac <__swbuf_r+0xa0>)
 8003088:	429c      	cmp	r4, r3
 800308a:	bf08      	it	eq
 800308c:	68ec      	ldreq	r4, [r5, #12]
 800308e:	e7ca      	b.n	8003026 <__swbuf_r+0x1a>
 8003090:	4621      	mov	r1, r4
 8003092:	4628      	mov	r0, r5
 8003094:	f000 f80c 	bl	80030b0 <__swsetup_r>
 8003098:	2800      	cmp	r0, #0
 800309a:	d0cb      	beq.n	8003034 <__swbuf_r+0x28>
 800309c:	f04f 37ff 	mov.w	r7, #4294967295
 80030a0:	e7ea      	b.n	8003078 <__swbuf_r+0x6c>
 80030a2:	bf00      	nop
 80030a4:	080039a8 	.word	0x080039a8
 80030a8:	080039c8 	.word	0x080039c8
 80030ac:	08003988 	.word	0x08003988

080030b0 <__swsetup_r>:
 80030b0:	4b32      	ldr	r3, [pc, #200]	; (800317c <__swsetup_r+0xcc>)
 80030b2:	b570      	push	{r4, r5, r6, lr}
 80030b4:	681d      	ldr	r5, [r3, #0]
 80030b6:	4606      	mov	r6, r0
 80030b8:	460c      	mov	r4, r1
 80030ba:	b125      	cbz	r5, 80030c6 <__swsetup_r+0x16>
 80030bc:	69ab      	ldr	r3, [r5, #24]
 80030be:	b913      	cbnz	r3, 80030c6 <__swsetup_r+0x16>
 80030c0:	4628      	mov	r0, r5
 80030c2:	f000 f979 	bl	80033b8 <__sinit>
 80030c6:	4b2e      	ldr	r3, [pc, #184]	; (8003180 <__swsetup_r+0xd0>)
 80030c8:	429c      	cmp	r4, r3
 80030ca:	d10f      	bne.n	80030ec <__swsetup_r+0x3c>
 80030cc:	686c      	ldr	r4, [r5, #4]
 80030ce:	89a3      	ldrh	r3, [r4, #12]
 80030d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030d4:	0719      	lsls	r1, r3, #28
 80030d6:	d42c      	bmi.n	8003132 <__swsetup_r+0x82>
 80030d8:	06dd      	lsls	r5, r3, #27
 80030da:	d411      	bmi.n	8003100 <__swsetup_r+0x50>
 80030dc:	2309      	movs	r3, #9
 80030de:	6033      	str	r3, [r6, #0]
 80030e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80030e4:	f04f 30ff 	mov.w	r0, #4294967295
 80030e8:	81a3      	strh	r3, [r4, #12]
 80030ea:	e03e      	b.n	800316a <__swsetup_r+0xba>
 80030ec:	4b25      	ldr	r3, [pc, #148]	; (8003184 <__swsetup_r+0xd4>)
 80030ee:	429c      	cmp	r4, r3
 80030f0:	d101      	bne.n	80030f6 <__swsetup_r+0x46>
 80030f2:	68ac      	ldr	r4, [r5, #8]
 80030f4:	e7eb      	b.n	80030ce <__swsetup_r+0x1e>
 80030f6:	4b24      	ldr	r3, [pc, #144]	; (8003188 <__swsetup_r+0xd8>)
 80030f8:	429c      	cmp	r4, r3
 80030fa:	bf08      	it	eq
 80030fc:	68ec      	ldreq	r4, [r5, #12]
 80030fe:	e7e6      	b.n	80030ce <__swsetup_r+0x1e>
 8003100:	0758      	lsls	r0, r3, #29
 8003102:	d512      	bpl.n	800312a <__swsetup_r+0x7a>
 8003104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003106:	b141      	cbz	r1, 800311a <__swsetup_r+0x6a>
 8003108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800310c:	4299      	cmp	r1, r3
 800310e:	d002      	beq.n	8003116 <__swsetup_r+0x66>
 8003110:	4630      	mov	r0, r6
 8003112:	f000 fa57 	bl	80035c4 <_free_r>
 8003116:	2300      	movs	r3, #0
 8003118:	6363      	str	r3, [r4, #52]	; 0x34
 800311a:	89a3      	ldrh	r3, [r4, #12]
 800311c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003120:	81a3      	strh	r3, [r4, #12]
 8003122:	2300      	movs	r3, #0
 8003124:	6063      	str	r3, [r4, #4]
 8003126:	6923      	ldr	r3, [r4, #16]
 8003128:	6023      	str	r3, [r4, #0]
 800312a:	89a3      	ldrh	r3, [r4, #12]
 800312c:	f043 0308 	orr.w	r3, r3, #8
 8003130:	81a3      	strh	r3, [r4, #12]
 8003132:	6923      	ldr	r3, [r4, #16]
 8003134:	b94b      	cbnz	r3, 800314a <__swsetup_r+0x9a>
 8003136:	89a3      	ldrh	r3, [r4, #12]
 8003138:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800313c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003140:	d003      	beq.n	800314a <__swsetup_r+0x9a>
 8003142:	4621      	mov	r1, r4
 8003144:	4630      	mov	r0, r6
 8003146:	f000 f9fd 	bl	8003544 <__smakebuf_r>
 800314a:	89a0      	ldrh	r0, [r4, #12]
 800314c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003150:	f010 0301 	ands.w	r3, r0, #1
 8003154:	d00a      	beq.n	800316c <__swsetup_r+0xbc>
 8003156:	2300      	movs	r3, #0
 8003158:	60a3      	str	r3, [r4, #8]
 800315a:	6963      	ldr	r3, [r4, #20]
 800315c:	425b      	negs	r3, r3
 800315e:	61a3      	str	r3, [r4, #24]
 8003160:	6923      	ldr	r3, [r4, #16]
 8003162:	b943      	cbnz	r3, 8003176 <__swsetup_r+0xc6>
 8003164:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003168:	d1ba      	bne.n	80030e0 <__swsetup_r+0x30>
 800316a:	bd70      	pop	{r4, r5, r6, pc}
 800316c:	0781      	lsls	r1, r0, #30
 800316e:	bf58      	it	pl
 8003170:	6963      	ldrpl	r3, [r4, #20]
 8003172:	60a3      	str	r3, [r4, #8]
 8003174:	e7f4      	b.n	8003160 <__swsetup_r+0xb0>
 8003176:	2000      	movs	r0, #0
 8003178:	e7f7      	b.n	800316a <__swsetup_r+0xba>
 800317a:	bf00      	nop
 800317c:	2000003c 	.word	0x2000003c
 8003180:	080039a8 	.word	0x080039a8
 8003184:	080039c8 	.word	0x080039c8
 8003188:	08003988 	.word	0x08003988

0800318c <__sflush_r>:
 800318c:	898a      	ldrh	r2, [r1, #12]
 800318e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003190:	4605      	mov	r5, r0
 8003192:	0710      	lsls	r0, r2, #28
 8003194:	460c      	mov	r4, r1
 8003196:	d457      	bmi.n	8003248 <__sflush_r+0xbc>
 8003198:	684b      	ldr	r3, [r1, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	dc04      	bgt.n	80031a8 <__sflush_r+0x1c>
 800319e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	dc01      	bgt.n	80031a8 <__sflush_r+0x1c>
 80031a4:	2000      	movs	r0, #0
 80031a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031aa:	2e00      	cmp	r6, #0
 80031ac:	d0fa      	beq.n	80031a4 <__sflush_r+0x18>
 80031ae:	2300      	movs	r3, #0
 80031b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80031b4:	682f      	ldr	r7, [r5, #0]
 80031b6:	602b      	str	r3, [r5, #0]
 80031b8:	d032      	beq.n	8003220 <__sflush_r+0x94>
 80031ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031bc:	89a3      	ldrh	r3, [r4, #12]
 80031be:	075a      	lsls	r2, r3, #29
 80031c0:	d505      	bpl.n	80031ce <__sflush_r+0x42>
 80031c2:	6863      	ldr	r3, [r4, #4]
 80031c4:	1ac0      	subs	r0, r0, r3
 80031c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031c8:	b10b      	cbz	r3, 80031ce <__sflush_r+0x42>
 80031ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031cc:	1ac0      	subs	r0, r0, r3
 80031ce:	2300      	movs	r3, #0
 80031d0:	4602      	mov	r2, r0
 80031d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031d4:	4628      	mov	r0, r5
 80031d6:	6a21      	ldr	r1, [r4, #32]
 80031d8:	47b0      	blx	r6
 80031da:	1c43      	adds	r3, r0, #1
 80031dc:	89a3      	ldrh	r3, [r4, #12]
 80031de:	d106      	bne.n	80031ee <__sflush_r+0x62>
 80031e0:	6829      	ldr	r1, [r5, #0]
 80031e2:	291d      	cmp	r1, #29
 80031e4:	d82c      	bhi.n	8003240 <__sflush_r+0xb4>
 80031e6:	4a29      	ldr	r2, [pc, #164]	; (800328c <__sflush_r+0x100>)
 80031e8:	40ca      	lsrs	r2, r1
 80031ea:	07d6      	lsls	r6, r2, #31
 80031ec:	d528      	bpl.n	8003240 <__sflush_r+0xb4>
 80031ee:	2200      	movs	r2, #0
 80031f0:	6062      	str	r2, [r4, #4]
 80031f2:	6922      	ldr	r2, [r4, #16]
 80031f4:	04d9      	lsls	r1, r3, #19
 80031f6:	6022      	str	r2, [r4, #0]
 80031f8:	d504      	bpl.n	8003204 <__sflush_r+0x78>
 80031fa:	1c42      	adds	r2, r0, #1
 80031fc:	d101      	bne.n	8003202 <__sflush_r+0x76>
 80031fe:	682b      	ldr	r3, [r5, #0]
 8003200:	b903      	cbnz	r3, 8003204 <__sflush_r+0x78>
 8003202:	6560      	str	r0, [r4, #84]	; 0x54
 8003204:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003206:	602f      	str	r7, [r5, #0]
 8003208:	2900      	cmp	r1, #0
 800320a:	d0cb      	beq.n	80031a4 <__sflush_r+0x18>
 800320c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003210:	4299      	cmp	r1, r3
 8003212:	d002      	beq.n	800321a <__sflush_r+0x8e>
 8003214:	4628      	mov	r0, r5
 8003216:	f000 f9d5 	bl	80035c4 <_free_r>
 800321a:	2000      	movs	r0, #0
 800321c:	6360      	str	r0, [r4, #52]	; 0x34
 800321e:	e7c2      	b.n	80031a6 <__sflush_r+0x1a>
 8003220:	6a21      	ldr	r1, [r4, #32]
 8003222:	2301      	movs	r3, #1
 8003224:	4628      	mov	r0, r5
 8003226:	47b0      	blx	r6
 8003228:	1c41      	adds	r1, r0, #1
 800322a:	d1c7      	bne.n	80031bc <__sflush_r+0x30>
 800322c:	682b      	ldr	r3, [r5, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0c4      	beq.n	80031bc <__sflush_r+0x30>
 8003232:	2b1d      	cmp	r3, #29
 8003234:	d001      	beq.n	800323a <__sflush_r+0xae>
 8003236:	2b16      	cmp	r3, #22
 8003238:	d101      	bne.n	800323e <__sflush_r+0xb2>
 800323a:	602f      	str	r7, [r5, #0]
 800323c:	e7b2      	b.n	80031a4 <__sflush_r+0x18>
 800323e:	89a3      	ldrh	r3, [r4, #12]
 8003240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003244:	81a3      	strh	r3, [r4, #12]
 8003246:	e7ae      	b.n	80031a6 <__sflush_r+0x1a>
 8003248:	690f      	ldr	r7, [r1, #16]
 800324a:	2f00      	cmp	r7, #0
 800324c:	d0aa      	beq.n	80031a4 <__sflush_r+0x18>
 800324e:	0793      	lsls	r3, r2, #30
 8003250:	bf18      	it	ne
 8003252:	2300      	movne	r3, #0
 8003254:	680e      	ldr	r6, [r1, #0]
 8003256:	bf08      	it	eq
 8003258:	694b      	ldreq	r3, [r1, #20]
 800325a:	1bf6      	subs	r6, r6, r7
 800325c:	600f      	str	r7, [r1, #0]
 800325e:	608b      	str	r3, [r1, #8]
 8003260:	2e00      	cmp	r6, #0
 8003262:	dd9f      	ble.n	80031a4 <__sflush_r+0x18>
 8003264:	4633      	mov	r3, r6
 8003266:	463a      	mov	r2, r7
 8003268:	4628      	mov	r0, r5
 800326a:	6a21      	ldr	r1, [r4, #32]
 800326c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003270:	47e0      	blx	ip
 8003272:	2800      	cmp	r0, #0
 8003274:	dc06      	bgt.n	8003284 <__sflush_r+0xf8>
 8003276:	89a3      	ldrh	r3, [r4, #12]
 8003278:	f04f 30ff 	mov.w	r0, #4294967295
 800327c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003280:	81a3      	strh	r3, [r4, #12]
 8003282:	e790      	b.n	80031a6 <__sflush_r+0x1a>
 8003284:	4407      	add	r7, r0
 8003286:	1a36      	subs	r6, r6, r0
 8003288:	e7ea      	b.n	8003260 <__sflush_r+0xd4>
 800328a:	bf00      	nop
 800328c:	20400001 	.word	0x20400001

08003290 <_fflush_r>:
 8003290:	b538      	push	{r3, r4, r5, lr}
 8003292:	690b      	ldr	r3, [r1, #16]
 8003294:	4605      	mov	r5, r0
 8003296:	460c      	mov	r4, r1
 8003298:	b913      	cbnz	r3, 80032a0 <_fflush_r+0x10>
 800329a:	2500      	movs	r5, #0
 800329c:	4628      	mov	r0, r5
 800329e:	bd38      	pop	{r3, r4, r5, pc}
 80032a0:	b118      	cbz	r0, 80032aa <_fflush_r+0x1a>
 80032a2:	6983      	ldr	r3, [r0, #24]
 80032a4:	b90b      	cbnz	r3, 80032aa <_fflush_r+0x1a>
 80032a6:	f000 f887 	bl	80033b8 <__sinit>
 80032aa:	4b14      	ldr	r3, [pc, #80]	; (80032fc <_fflush_r+0x6c>)
 80032ac:	429c      	cmp	r4, r3
 80032ae:	d11b      	bne.n	80032e8 <_fflush_r+0x58>
 80032b0:	686c      	ldr	r4, [r5, #4]
 80032b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0ef      	beq.n	800329a <_fflush_r+0xa>
 80032ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80032bc:	07d0      	lsls	r0, r2, #31
 80032be:	d404      	bmi.n	80032ca <_fflush_r+0x3a>
 80032c0:	0599      	lsls	r1, r3, #22
 80032c2:	d402      	bmi.n	80032ca <_fflush_r+0x3a>
 80032c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032c6:	f000 f915 	bl	80034f4 <__retarget_lock_acquire_recursive>
 80032ca:	4628      	mov	r0, r5
 80032cc:	4621      	mov	r1, r4
 80032ce:	f7ff ff5d 	bl	800318c <__sflush_r>
 80032d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032d4:	4605      	mov	r5, r0
 80032d6:	07da      	lsls	r2, r3, #31
 80032d8:	d4e0      	bmi.n	800329c <_fflush_r+0xc>
 80032da:	89a3      	ldrh	r3, [r4, #12]
 80032dc:	059b      	lsls	r3, r3, #22
 80032de:	d4dd      	bmi.n	800329c <_fflush_r+0xc>
 80032e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032e2:	f000 f908 	bl	80034f6 <__retarget_lock_release_recursive>
 80032e6:	e7d9      	b.n	800329c <_fflush_r+0xc>
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <_fflush_r+0x70>)
 80032ea:	429c      	cmp	r4, r3
 80032ec:	d101      	bne.n	80032f2 <_fflush_r+0x62>
 80032ee:	68ac      	ldr	r4, [r5, #8]
 80032f0:	e7df      	b.n	80032b2 <_fflush_r+0x22>
 80032f2:	4b04      	ldr	r3, [pc, #16]	; (8003304 <_fflush_r+0x74>)
 80032f4:	429c      	cmp	r4, r3
 80032f6:	bf08      	it	eq
 80032f8:	68ec      	ldreq	r4, [r5, #12]
 80032fa:	e7da      	b.n	80032b2 <_fflush_r+0x22>
 80032fc:	080039a8 	.word	0x080039a8
 8003300:	080039c8 	.word	0x080039c8
 8003304:	08003988 	.word	0x08003988

08003308 <std>:
 8003308:	2300      	movs	r3, #0
 800330a:	b510      	push	{r4, lr}
 800330c:	4604      	mov	r4, r0
 800330e:	e9c0 3300 	strd	r3, r3, [r0]
 8003312:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003316:	6083      	str	r3, [r0, #8]
 8003318:	8181      	strh	r1, [r0, #12]
 800331a:	6643      	str	r3, [r0, #100]	; 0x64
 800331c:	81c2      	strh	r2, [r0, #14]
 800331e:	6183      	str	r3, [r0, #24]
 8003320:	4619      	mov	r1, r3
 8003322:	2208      	movs	r2, #8
 8003324:	305c      	adds	r0, #92	; 0x5c
 8003326:	f7ff fddd 	bl	8002ee4 <memset>
 800332a:	4b05      	ldr	r3, [pc, #20]	; (8003340 <std+0x38>)
 800332c:	6224      	str	r4, [r4, #32]
 800332e:	6263      	str	r3, [r4, #36]	; 0x24
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <std+0x3c>)
 8003332:	62a3      	str	r3, [r4, #40]	; 0x28
 8003334:	4b04      	ldr	r3, [pc, #16]	; (8003348 <std+0x40>)
 8003336:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003338:	4b04      	ldr	r3, [pc, #16]	; (800334c <std+0x44>)
 800333a:	6323      	str	r3, [r4, #48]	; 0x30
 800333c:	bd10      	pop	{r4, pc}
 800333e:	bf00      	nop
 8003340:	0800379d 	.word	0x0800379d
 8003344:	080037bf 	.word	0x080037bf
 8003348:	080037f7 	.word	0x080037f7
 800334c:	0800381b 	.word	0x0800381b

08003350 <_cleanup_r>:
 8003350:	4901      	ldr	r1, [pc, #4]	; (8003358 <_cleanup_r+0x8>)
 8003352:	f000 b8af 	b.w	80034b4 <_fwalk_reent>
 8003356:	bf00      	nop
 8003358:	08003291 	.word	0x08003291

0800335c <__sfmoreglue>:
 800335c:	2268      	movs	r2, #104	; 0x68
 800335e:	b570      	push	{r4, r5, r6, lr}
 8003360:	1e4d      	subs	r5, r1, #1
 8003362:	4355      	muls	r5, r2
 8003364:	460e      	mov	r6, r1
 8003366:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800336a:	f000 f993 	bl	8003694 <_malloc_r>
 800336e:	4604      	mov	r4, r0
 8003370:	b140      	cbz	r0, 8003384 <__sfmoreglue+0x28>
 8003372:	2100      	movs	r1, #0
 8003374:	e9c0 1600 	strd	r1, r6, [r0]
 8003378:	300c      	adds	r0, #12
 800337a:	60a0      	str	r0, [r4, #8]
 800337c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003380:	f7ff fdb0 	bl	8002ee4 <memset>
 8003384:	4620      	mov	r0, r4
 8003386:	bd70      	pop	{r4, r5, r6, pc}

08003388 <__sfp_lock_acquire>:
 8003388:	4801      	ldr	r0, [pc, #4]	; (8003390 <__sfp_lock_acquire+0x8>)
 800338a:	f000 b8b3 	b.w	80034f4 <__retarget_lock_acquire_recursive>
 800338e:	bf00      	nop
 8003390:	200001f1 	.word	0x200001f1

08003394 <__sfp_lock_release>:
 8003394:	4801      	ldr	r0, [pc, #4]	; (800339c <__sfp_lock_release+0x8>)
 8003396:	f000 b8ae 	b.w	80034f6 <__retarget_lock_release_recursive>
 800339a:	bf00      	nop
 800339c:	200001f1 	.word	0x200001f1

080033a0 <__sinit_lock_acquire>:
 80033a0:	4801      	ldr	r0, [pc, #4]	; (80033a8 <__sinit_lock_acquire+0x8>)
 80033a2:	f000 b8a7 	b.w	80034f4 <__retarget_lock_acquire_recursive>
 80033a6:	bf00      	nop
 80033a8:	200001f2 	.word	0x200001f2

080033ac <__sinit_lock_release>:
 80033ac:	4801      	ldr	r0, [pc, #4]	; (80033b4 <__sinit_lock_release+0x8>)
 80033ae:	f000 b8a2 	b.w	80034f6 <__retarget_lock_release_recursive>
 80033b2:	bf00      	nop
 80033b4:	200001f2 	.word	0x200001f2

080033b8 <__sinit>:
 80033b8:	b510      	push	{r4, lr}
 80033ba:	4604      	mov	r4, r0
 80033bc:	f7ff fff0 	bl	80033a0 <__sinit_lock_acquire>
 80033c0:	69a3      	ldr	r3, [r4, #24]
 80033c2:	b11b      	cbz	r3, 80033cc <__sinit+0x14>
 80033c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033c8:	f7ff bff0 	b.w	80033ac <__sinit_lock_release>
 80033cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80033d0:	6523      	str	r3, [r4, #80]	; 0x50
 80033d2:	4b13      	ldr	r3, [pc, #76]	; (8003420 <__sinit+0x68>)
 80033d4:	4a13      	ldr	r2, [pc, #76]	; (8003424 <__sinit+0x6c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80033da:	42a3      	cmp	r3, r4
 80033dc:	bf08      	it	eq
 80033de:	2301      	moveq	r3, #1
 80033e0:	4620      	mov	r0, r4
 80033e2:	bf08      	it	eq
 80033e4:	61a3      	streq	r3, [r4, #24]
 80033e6:	f000 f81f 	bl	8003428 <__sfp>
 80033ea:	6060      	str	r0, [r4, #4]
 80033ec:	4620      	mov	r0, r4
 80033ee:	f000 f81b 	bl	8003428 <__sfp>
 80033f2:	60a0      	str	r0, [r4, #8]
 80033f4:	4620      	mov	r0, r4
 80033f6:	f000 f817 	bl	8003428 <__sfp>
 80033fa:	2200      	movs	r2, #0
 80033fc:	2104      	movs	r1, #4
 80033fe:	60e0      	str	r0, [r4, #12]
 8003400:	6860      	ldr	r0, [r4, #4]
 8003402:	f7ff ff81 	bl	8003308 <std>
 8003406:	2201      	movs	r2, #1
 8003408:	2109      	movs	r1, #9
 800340a:	68a0      	ldr	r0, [r4, #8]
 800340c:	f7ff ff7c 	bl	8003308 <std>
 8003410:	2202      	movs	r2, #2
 8003412:	2112      	movs	r1, #18
 8003414:	68e0      	ldr	r0, [r4, #12]
 8003416:	f7ff ff77 	bl	8003308 <std>
 800341a:	2301      	movs	r3, #1
 800341c:	61a3      	str	r3, [r4, #24]
 800341e:	e7d1      	b.n	80033c4 <__sinit+0xc>
 8003420:	08003984 	.word	0x08003984
 8003424:	08003351 	.word	0x08003351

08003428 <__sfp>:
 8003428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342a:	4607      	mov	r7, r0
 800342c:	f7ff ffac 	bl	8003388 <__sfp_lock_acquire>
 8003430:	4b1e      	ldr	r3, [pc, #120]	; (80034ac <__sfp+0x84>)
 8003432:	681e      	ldr	r6, [r3, #0]
 8003434:	69b3      	ldr	r3, [r6, #24]
 8003436:	b913      	cbnz	r3, 800343e <__sfp+0x16>
 8003438:	4630      	mov	r0, r6
 800343a:	f7ff ffbd 	bl	80033b8 <__sinit>
 800343e:	3648      	adds	r6, #72	; 0x48
 8003440:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003444:	3b01      	subs	r3, #1
 8003446:	d503      	bpl.n	8003450 <__sfp+0x28>
 8003448:	6833      	ldr	r3, [r6, #0]
 800344a:	b30b      	cbz	r3, 8003490 <__sfp+0x68>
 800344c:	6836      	ldr	r6, [r6, #0]
 800344e:	e7f7      	b.n	8003440 <__sfp+0x18>
 8003450:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003454:	b9d5      	cbnz	r5, 800348c <__sfp+0x64>
 8003456:	4b16      	ldr	r3, [pc, #88]	; (80034b0 <__sfp+0x88>)
 8003458:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800345c:	60e3      	str	r3, [r4, #12]
 800345e:	6665      	str	r5, [r4, #100]	; 0x64
 8003460:	f000 f847 	bl	80034f2 <__retarget_lock_init_recursive>
 8003464:	f7ff ff96 	bl	8003394 <__sfp_lock_release>
 8003468:	2208      	movs	r2, #8
 800346a:	4629      	mov	r1, r5
 800346c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003470:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003474:	6025      	str	r5, [r4, #0]
 8003476:	61a5      	str	r5, [r4, #24]
 8003478:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800347c:	f7ff fd32 	bl	8002ee4 <memset>
 8003480:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003484:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003488:	4620      	mov	r0, r4
 800348a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800348c:	3468      	adds	r4, #104	; 0x68
 800348e:	e7d9      	b.n	8003444 <__sfp+0x1c>
 8003490:	2104      	movs	r1, #4
 8003492:	4638      	mov	r0, r7
 8003494:	f7ff ff62 	bl	800335c <__sfmoreglue>
 8003498:	4604      	mov	r4, r0
 800349a:	6030      	str	r0, [r6, #0]
 800349c:	2800      	cmp	r0, #0
 800349e:	d1d5      	bne.n	800344c <__sfp+0x24>
 80034a0:	f7ff ff78 	bl	8003394 <__sfp_lock_release>
 80034a4:	230c      	movs	r3, #12
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	e7ee      	b.n	8003488 <__sfp+0x60>
 80034aa:	bf00      	nop
 80034ac:	08003984 	.word	0x08003984
 80034b0:	ffff0001 	.word	0xffff0001

080034b4 <_fwalk_reent>:
 80034b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034b8:	4606      	mov	r6, r0
 80034ba:	4688      	mov	r8, r1
 80034bc:	2700      	movs	r7, #0
 80034be:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80034c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034c6:	f1b9 0901 	subs.w	r9, r9, #1
 80034ca:	d505      	bpl.n	80034d8 <_fwalk_reent+0x24>
 80034cc:	6824      	ldr	r4, [r4, #0]
 80034ce:	2c00      	cmp	r4, #0
 80034d0:	d1f7      	bne.n	80034c2 <_fwalk_reent+0xe>
 80034d2:	4638      	mov	r0, r7
 80034d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034d8:	89ab      	ldrh	r3, [r5, #12]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d907      	bls.n	80034ee <_fwalk_reent+0x3a>
 80034de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034e2:	3301      	adds	r3, #1
 80034e4:	d003      	beq.n	80034ee <_fwalk_reent+0x3a>
 80034e6:	4629      	mov	r1, r5
 80034e8:	4630      	mov	r0, r6
 80034ea:	47c0      	blx	r8
 80034ec:	4307      	orrs	r7, r0
 80034ee:	3568      	adds	r5, #104	; 0x68
 80034f0:	e7e9      	b.n	80034c6 <_fwalk_reent+0x12>

080034f2 <__retarget_lock_init_recursive>:
 80034f2:	4770      	bx	lr

080034f4 <__retarget_lock_acquire_recursive>:
 80034f4:	4770      	bx	lr

080034f6 <__retarget_lock_release_recursive>:
 80034f6:	4770      	bx	lr

080034f8 <__swhatbuf_r>:
 80034f8:	b570      	push	{r4, r5, r6, lr}
 80034fa:	460e      	mov	r6, r1
 80034fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003500:	4614      	mov	r4, r2
 8003502:	2900      	cmp	r1, #0
 8003504:	461d      	mov	r5, r3
 8003506:	b096      	sub	sp, #88	; 0x58
 8003508:	da08      	bge.n	800351c <__swhatbuf_r+0x24>
 800350a:	2200      	movs	r2, #0
 800350c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003510:	602a      	str	r2, [r5, #0]
 8003512:	061a      	lsls	r2, r3, #24
 8003514:	d410      	bmi.n	8003538 <__swhatbuf_r+0x40>
 8003516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800351a:	e00e      	b.n	800353a <__swhatbuf_r+0x42>
 800351c:	466a      	mov	r2, sp
 800351e:	f000 f9a3 	bl	8003868 <_fstat_r>
 8003522:	2800      	cmp	r0, #0
 8003524:	dbf1      	blt.n	800350a <__swhatbuf_r+0x12>
 8003526:	9a01      	ldr	r2, [sp, #4]
 8003528:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800352c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003530:	425a      	negs	r2, r3
 8003532:	415a      	adcs	r2, r3
 8003534:	602a      	str	r2, [r5, #0]
 8003536:	e7ee      	b.n	8003516 <__swhatbuf_r+0x1e>
 8003538:	2340      	movs	r3, #64	; 0x40
 800353a:	2000      	movs	r0, #0
 800353c:	6023      	str	r3, [r4, #0]
 800353e:	b016      	add	sp, #88	; 0x58
 8003540:	bd70      	pop	{r4, r5, r6, pc}
	...

08003544 <__smakebuf_r>:
 8003544:	898b      	ldrh	r3, [r1, #12]
 8003546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003548:	079d      	lsls	r5, r3, #30
 800354a:	4606      	mov	r6, r0
 800354c:	460c      	mov	r4, r1
 800354e:	d507      	bpl.n	8003560 <__smakebuf_r+0x1c>
 8003550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003554:	6023      	str	r3, [r4, #0]
 8003556:	6123      	str	r3, [r4, #16]
 8003558:	2301      	movs	r3, #1
 800355a:	6163      	str	r3, [r4, #20]
 800355c:	b002      	add	sp, #8
 800355e:	bd70      	pop	{r4, r5, r6, pc}
 8003560:	466a      	mov	r2, sp
 8003562:	ab01      	add	r3, sp, #4
 8003564:	f7ff ffc8 	bl	80034f8 <__swhatbuf_r>
 8003568:	9900      	ldr	r1, [sp, #0]
 800356a:	4605      	mov	r5, r0
 800356c:	4630      	mov	r0, r6
 800356e:	f000 f891 	bl	8003694 <_malloc_r>
 8003572:	b948      	cbnz	r0, 8003588 <__smakebuf_r+0x44>
 8003574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003578:	059a      	lsls	r2, r3, #22
 800357a:	d4ef      	bmi.n	800355c <__smakebuf_r+0x18>
 800357c:	f023 0303 	bic.w	r3, r3, #3
 8003580:	f043 0302 	orr.w	r3, r3, #2
 8003584:	81a3      	strh	r3, [r4, #12]
 8003586:	e7e3      	b.n	8003550 <__smakebuf_r+0xc>
 8003588:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <__smakebuf_r+0x7c>)
 800358a:	62b3      	str	r3, [r6, #40]	; 0x28
 800358c:	89a3      	ldrh	r3, [r4, #12]
 800358e:	6020      	str	r0, [r4, #0]
 8003590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003594:	81a3      	strh	r3, [r4, #12]
 8003596:	9b00      	ldr	r3, [sp, #0]
 8003598:	6120      	str	r0, [r4, #16]
 800359a:	6163      	str	r3, [r4, #20]
 800359c:	9b01      	ldr	r3, [sp, #4]
 800359e:	b15b      	cbz	r3, 80035b8 <__smakebuf_r+0x74>
 80035a0:	4630      	mov	r0, r6
 80035a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035a6:	f000 f971 	bl	800388c <_isatty_r>
 80035aa:	b128      	cbz	r0, 80035b8 <__smakebuf_r+0x74>
 80035ac:	89a3      	ldrh	r3, [r4, #12]
 80035ae:	f023 0303 	bic.w	r3, r3, #3
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	81a3      	strh	r3, [r4, #12]
 80035b8:	89a0      	ldrh	r0, [r4, #12]
 80035ba:	4305      	orrs	r5, r0
 80035bc:	81a5      	strh	r5, [r4, #12]
 80035be:	e7cd      	b.n	800355c <__smakebuf_r+0x18>
 80035c0:	08003351 	.word	0x08003351

080035c4 <_free_r>:
 80035c4:	b538      	push	{r3, r4, r5, lr}
 80035c6:	4605      	mov	r5, r0
 80035c8:	2900      	cmp	r1, #0
 80035ca:	d040      	beq.n	800364e <_free_r+0x8a>
 80035cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035d0:	1f0c      	subs	r4, r1, #4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	bfb8      	it	lt
 80035d6:	18e4      	addlt	r4, r4, r3
 80035d8:	f000 f97a 	bl	80038d0 <__malloc_lock>
 80035dc:	4a1c      	ldr	r2, [pc, #112]	; (8003650 <_free_r+0x8c>)
 80035de:	6813      	ldr	r3, [r2, #0]
 80035e0:	b933      	cbnz	r3, 80035f0 <_free_r+0x2c>
 80035e2:	6063      	str	r3, [r4, #4]
 80035e4:	6014      	str	r4, [r2, #0]
 80035e6:	4628      	mov	r0, r5
 80035e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035ec:	f000 b976 	b.w	80038dc <__malloc_unlock>
 80035f0:	42a3      	cmp	r3, r4
 80035f2:	d908      	bls.n	8003606 <_free_r+0x42>
 80035f4:	6820      	ldr	r0, [r4, #0]
 80035f6:	1821      	adds	r1, r4, r0
 80035f8:	428b      	cmp	r3, r1
 80035fa:	bf01      	itttt	eq
 80035fc:	6819      	ldreq	r1, [r3, #0]
 80035fe:	685b      	ldreq	r3, [r3, #4]
 8003600:	1809      	addeq	r1, r1, r0
 8003602:	6021      	streq	r1, [r4, #0]
 8003604:	e7ed      	b.n	80035e2 <_free_r+0x1e>
 8003606:	461a      	mov	r2, r3
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	b10b      	cbz	r3, 8003610 <_free_r+0x4c>
 800360c:	42a3      	cmp	r3, r4
 800360e:	d9fa      	bls.n	8003606 <_free_r+0x42>
 8003610:	6811      	ldr	r1, [r2, #0]
 8003612:	1850      	adds	r0, r2, r1
 8003614:	42a0      	cmp	r0, r4
 8003616:	d10b      	bne.n	8003630 <_free_r+0x6c>
 8003618:	6820      	ldr	r0, [r4, #0]
 800361a:	4401      	add	r1, r0
 800361c:	1850      	adds	r0, r2, r1
 800361e:	4283      	cmp	r3, r0
 8003620:	6011      	str	r1, [r2, #0]
 8003622:	d1e0      	bne.n	80035e6 <_free_r+0x22>
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4401      	add	r1, r0
 800362a:	6011      	str	r1, [r2, #0]
 800362c:	6053      	str	r3, [r2, #4]
 800362e:	e7da      	b.n	80035e6 <_free_r+0x22>
 8003630:	d902      	bls.n	8003638 <_free_r+0x74>
 8003632:	230c      	movs	r3, #12
 8003634:	602b      	str	r3, [r5, #0]
 8003636:	e7d6      	b.n	80035e6 <_free_r+0x22>
 8003638:	6820      	ldr	r0, [r4, #0]
 800363a:	1821      	adds	r1, r4, r0
 800363c:	428b      	cmp	r3, r1
 800363e:	bf01      	itttt	eq
 8003640:	6819      	ldreq	r1, [r3, #0]
 8003642:	685b      	ldreq	r3, [r3, #4]
 8003644:	1809      	addeq	r1, r1, r0
 8003646:	6021      	streq	r1, [r4, #0]
 8003648:	6063      	str	r3, [r4, #4]
 800364a:	6054      	str	r4, [r2, #4]
 800364c:	e7cb      	b.n	80035e6 <_free_r+0x22>
 800364e:	bd38      	pop	{r3, r4, r5, pc}
 8003650:	200001f4 	.word	0x200001f4

08003654 <sbrk_aligned>:
 8003654:	b570      	push	{r4, r5, r6, lr}
 8003656:	4e0e      	ldr	r6, [pc, #56]	; (8003690 <sbrk_aligned+0x3c>)
 8003658:	460c      	mov	r4, r1
 800365a:	6831      	ldr	r1, [r6, #0]
 800365c:	4605      	mov	r5, r0
 800365e:	b911      	cbnz	r1, 8003666 <sbrk_aligned+0x12>
 8003660:	f000 f88c 	bl	800377c <_sbrk_r>
 8003664:	6030      	str	r0, [r6, #0]
 8003666:	4621      	mov	r1, r4
 8003668:	4628      	mov	r0, r5
 800366a:	f000 f887 	bl	800377c <_sbrk_r>
 800366e:	1c43      	adds	r3, r0, #1
 8003670:	d00a      	beq.n	8003688 <sbrk_aligned+0x34>
 8003672:	1cc4      	adds	r4, r0, #3
 8003674:	f024 0403 	bic.w	r4, r4, #3
 8003678:	42a0      	cmp	r0, r4
 800367a:	d007      	beq.n	800368c <sbrk_aligned+0x38>
 800367c:	1a21      	subs	r1, r4, r0
 800367e:	4628      	mov	r0, r5
 8003680:	f000 f87c 	bl	800377c <_sbrk_r>
 8003684:	3001      	adds	r0, #1
 8003686:	d101      	bne.n	800368c <sbrk_aligned+0x38>
 8003688:	f04f 34ff 	mov.w	r4, #4294967295
 800368c:	4620      	mov	r0, r4
 800368e:	bd70      	pop	{r4, r5, r6, pc}
 8003690:	200001f8 	.word	0x200001f8

08003694 <_malloc_r>:
 8003694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003698:	1ccd      	adds	r5, r1, #3
 800369a:	f025 0503 	bic.w	r5, r5, #3
 800369e:	3508      	adds	r5, #8
 80036a0:	2d0c      	cmp	r5, #12
 80036a2:	bf38      	it	cc
 80036a4:	250c      	movcc	r5, #12
 80036a6:	2d00      	cmp	r5, #0
 80036a8:	4607      	mov	r7, r0
 80036aa:	db01      	blt.n	80036b0 <_malloc_r+0x1c>
 80036ac:	42a9      	cmp	r1, r5
 80036ae:	d905      	bls.n	80036bc <_malloc_r+0x28>
 80036b0:	230c      	movs	r3, #12
 80036b2:	2600      	movs	r6, #0
 80036b4:	603b      	str	r3, [r7, #0]
 80036b6:	4630      	mov	r0, r6
 80036b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036bc:	4e2e      	ldr	r6, [pc, #184]	; (8003778 <_malloc_r+0xe4>)
 80036be:	f000 f907 	bl	80038d0 <__malloc_lock>
 80036c2:	6833      	ldr	r3, [r6, #0]
 80036c4:	461c      	mov	r4, r3
 80036c6:	bb34      	cbnz	r4, 8003716 <_malloc_r+0x82>
 80036c8:	4629      	mov	r1, r5
 80036ca:	4638      	mov	r0, r7
 80036cc:	f7ff ffc2 	bl	8003654 <sbrk_aligned>
 80036d0:	1c43      	adds	r3, r0, #1
 80036d2:	4604      	mov	r4, r0
 80036d4:	d14d      	bne.n	8003772 <_malloc_r+0xde>
 80036d6:	6834      	ldr	r4, [r6, #0]
 80036d8:	4626      	mov	r6, r4
 80036da:	2e00      	cmp	r6, #0
 80036dc:	d140      	bne.n	8003760 <_malloc_r+0xcc>
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	4631      	mov	r1, r6
 80036e2:	4638      	mov	r0, r7
 80036e4:	eb04 0803 	add.w	r8, r4, r3
 80036e8:	f000 f848 	bl	800377c <_sbrk_r>
 80036ec:	4580      	cmp	r8, r0
 80036ee:	d13a      	bne.n	8003766 <_malloc_r+0xd2>
 80036f0:	6821      	ldr	r1, [r4, #0]
 80036f2:	3503      	adds	r5, #3
 80036f4:	1a6d      	subs	r5, r5, r1
 80036f6:	f025 0503 	bic.w	r5, r5, #3
 80036fa:	3508      	adds	r5, #8
 80036fc:	2d0c      	cmp	r5, #12
 80036fe:	bf38      	it	cc
 8003700:	250c      	movcc	r5, #12
 8003702:	4638      	mov	r0, r7
 8003704:	4629      	mov	r1, r5
 8003706:	f7ff ffa5 	bl	8003654 <sbrk_aligned>
 800370a:	3001      	adds	r0, #1
 800370c:	d02b      	beq.n	8003766 <_malloc_r+0xd2>
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	442b      	add	r3, r5
 8003712:	6023      	str	r3, [r4, #0]
 8003714:	e00e      	b.n	8003734 <_malloc_r+0xa0>
 8003716:	6822      	ldr	r2, [r4, #0]
 8003718:	1b52      	subs	r2, r2, r5
 800371a:	d41e      	bmi.n	800375a <_malloc_r+0xc6>
 800371c:	2a0b      	cmp	r2, #11
 800371e:	d916      	bls.n	800374e <_malloc_r+0xba>
 8003720:	1961      	adds	r1, r4, r5
 8003722:	42a3      	cmp	r3, r4
 8003724:	6025      	str	r5, [r4, #0]
 8003726:	bf18      	it	ne
 8003728:	6059      	strne	r1, [r3, #4]
 800372a:	6863      	ldr	r3, [r4, #4]
 800372c:	bf08      	it	eq
 800372e:	6031      	streq	r1, [r6, #0]
 8003730:	5162      	str	r2, [r4, r5]
 8003732:	604b      	str	r3, [r1, #4]
 8003734:	4638      	mov	r0, r7
 8003736:	f104 060b 	add.w	r6, r4, #11
 800373a:	f000 f8cf 	bl	80038dc <__malloc_unlock>
 800373e:	f026 0607 	bic.w	r6, r6, #7
 8003742:	1d23      	adds	r3, r4, #4
 8003744:	1af2      	subs	r2, r6, r3
 8003746:	d0b6      	beq.n	80036b6 <_malloc_r+0x22>
 8003748:	1b9b      	subs	r3, r3, r6
 800374a:	50a3      	str	r3, [r4, r2]
 800374c:	e7b3      	b.n	80036b6 <_malloc_r+0x22>
 800374e:	6862      	ldr	r2, [r4, #4]
 8003750:	42a3      	cmp	r3, r4
 8003752:	bf0c      	ite	eq
 8003754:	6032      	streq	r2, [r6, #0]
 8003756:	605a      	strne	r2, [r3, #4]
 8003758:	e7ec      	b.n	8003734 <_malloc_r+0xa0>
 800375a:	4623      	mov	r3, r4
 800375c:	6864      	ldr	r4, [r4, #4]
 800375e:	e7b2      	b.n	80036c6 <_malloc_r+0x32>
 8003760:	4634      	mov	r4, r6
 8003762:	6876      	ldr	r6, [r6, #4]
 8003764:	e7b9      	b.n	80036da <_malloc_r+0x46>
 8003766:	230c      	movs	r3, #12
 8003768:	4638      	mov	r0, r7
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	f000 f8b6 	bl	80038dc <__malloc_unlock>
 8003770:	e7a1      	b.n	80036b6 <_malloc_r+0x22>
 8003772:	6025      	str	r5, [r4, #0]
 8003774:	e7de      	b.n	8003734 <_malloc_r+0xa0>
 8003776:	bf00      	nop
 8003778:	200001f4 	.word	0x200001f4

0800377c <_sbrk_r>:
 800377c:	b538      	push	{r3, r4, r5, lr}
 800377e:	2300      	movs	r3, #0
 8003780:	4d05      	ldr	r5, [pc, #20]	; (8003798 <_sbrk_r+0x1c>)
 8003782:	4604      	mov	r4, r0
 8003784:	4608      	mov	r0, r1
 8003786:	602b      	str	r3, [r5, #0]
 8003788:	f7fd f8d2 	bl	8000930 <_sbrk>
 800378c:	1c43      	adds	r3, r0, #1
 800378e:	d102      	bne.n	8003796 <_sbrk_r+0x1a>
 8003790:	682b      	ldr	r3, [r5, #0]
 8003792:	b103      	cbz	r3, 8003796 <_sbrk_r+0x1a>
 8003794:	6023      	str	r3, [r4, #0]
 8003796:	bd38      	pop	{r3, r4, r5, pc}
 8003798:	200001fc 	.word	0x200001fc

0800379c <__sread>:
 800379c:	b510      	push	{r4, lr}
 800379e:	460c      	mov	r4, r1
 80037a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037a4:	f000 f8a0 	bl	80038e8 <_read_r>
 80037a8:	2800      	cmp	r0, #0
 80037aa:	bfab      	itete	ge
 80037ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80037ae:	89a3      	ldrhlt	r3, [r4, #12]
 80037b0:	181b      	addge	r3, r3, r0
 80037b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80037b6:	bfac      	ite	ge
 80037b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80037ba:	81a3      	strhlt	r3, [r4, #12]
 80037bc:	bd10      	pop	{r4, pc}

080037be <__swrite>:
 80037be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037c2:	461f      	mov	r7, r3
 80037c4:	898b      	ldrh	r3, [r1, #12]
 80037c6:	4605      	mov	r5, r0
 80037c8:	05db      	lsls	r3, r3, #23
 80037ca:	460c      	mov	r4, r1
 80037cc:	4616      	mov	r6, r2
 80037ce:	d505      	bpl.n	80037dc <__swrite+0x1e>
 80037d0:	2302      	movs	r3, #2
 80037d2:	2200      	movs	r2, #0
 80037d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037d8:	f000 f868 	bl	80038ac <_lseek_r>
 80037dc:	89a3      	ldrh	r3, [r4, #12]
 80037de:	4632      	mov	r2, r6
 80037e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037e4:	81a3      	strh	r3, [r4, #12]
 80037e6:	4628      	mov	r0, r5
 80037e8:	463b      	mov	r3, r7
 80037ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037f2:	f000 b817 	b.w	8003824 <_write_r>

080037f6 <__sseek>:
 80037f6:	b510      	push	{r4, lr}
 80037f8:	460c      	mov	r4, r1
 80037fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037fe:	f000 f855 	bl	80038ac <_lseek_r>
 8003802:	1c43      	adds	r3, r0, #1
 8003804:	89a3      	ldrh	r3, [r4, #12]
 8003806:	bf15      	itete	ne
 8003808:	6560      	strne	r0, [r4, #84]	; 0x54
 800380a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800380e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003812:	81a3      	strheq	r3, [r4, #12]
 8003814:	bf18      	it	ne
 8003816:	81a3      	strhne	r3, [r4, #12]
 8003818:	bd10      	pop	{r4, pc}

0800381a <__sclose>:
 800381a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800381e:	f000 b813 	b.w	8003848 <_close_r>
	...

08003824 <_write_r>:
 8003824:	b538      	push	{r3, r4, r5, lr}
 8003826:	4604      	mov	r4, r0
 8003828:	4608      	mov	r0, r1
 800382a:	4611      	mov	r1, r2
 800382c:	2200      	movs	r2, #0
 800382e:	4d05      	ldr	r5, [pc, #20]	; (8003844 <_write_r+0x20>)
 8003830:	602a      	str	r2, [r5, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	f7fc feba 	bl	80005ac <_write>
 8003838:	1c43      	adds	r3, r0, #1
 800383a:	d102      	bne.n	8003842 <_write_r+0x1e>
 800383c:	682b      	ldr	r3, [r5, #0]
 800383e:	b103      	cbz	r3, 8003842 <_write_r+0x1e>
 8003840:	6023      	str	r3, [r4, #0]
 8003842:	bd38      	pop	{r3, r4, r5, pc}
 8003844:	200001fc 	.word	0x200001fc

08003848 <_close_r>:
 8003848:	b538      	push	{r3, r4, r5, lr}
 800384a:	2300      	movs	r3, #0
 800384c:	4d05      	ldr	r5, [pc, #20]	; (8003864 <_close_r+0x1c>)
 800384e:	4604      	mov	r4, r0
 8003850:	4608      	mov	r0, r1
 8003852:	602b      	str	r3, [r5, #0]
 8003854:	f7fd f83b 	bl	80008ce <_close>
 8003858:	1c43      	adds	r3, r0, #1
 800385a:	d102      	bne.n	8003862 <_close_r+0x1a>
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	b103      	cbz	r3, 8003862 <_close_r+0x1a>
 8003860:	6023      	str	r3, [r4, #0]
 8003862:	bd38      	pop	{r3, r4, r5, pc}
 8003864:	200001fc 	.word	0x200001fc

08003868 <_fstat_r>:
 8003868:	b538      	push	{r3, r4, r5, lr}
 800386a:	2300      	movs	r3, #0
 800386c:	4d06      	ldr	r5, [pc, #24]	; (8003888 <_fstat_r+0x20>)
 800386e:	4604      	mov	r4, r0
 8003870:	4608      	mov	r0, r1
 8003872:	4611      	mov	r1, r2
 8003874:	602b      	str	r3, [r5, #0]
 8003876:	f7fd f835 	bl	80008e4 <_fstat>
 800387a:	1c43      	adds	r3, r0, #1
 800387c:	d102      	bne.n	8003884 <_fstat_r+0x1c>
 800387e:	682b      	ldr	r3, [r5, #0]
 8003880:	b103      	cbz	r3, 8003884 <_fstat_r+0x1c>
 8003882:	6023      	str	r3, [r4, #0]
 8003884:	bd38      	pop	{r3, r4, r5, pc}
 8003886:	bf00      	nop
 8003888:	200001fc 	.word	0x200001fc

0800388c <_isatty_r>:
 800388c:	b538      	push	{r3, r4, r5, lr}
 800388e:	2300      	movs	r3, #0
 8003890:	4d05      	ldr	r5, [pc, #20]	; (80038a8 <_isatty_r+0x1c>)
 8003892:	4604      	mov	r4, r0
 8003894:	4608      	mov	r0, r1
 8003896:	602b      	str	r3, [r5, #0]
 8003898:	f7fd f833 	bl	8000902 <_isatty>
 800389c:	1c43      	adds	r3, r0, #1
 800389e:	d102      	bne.n	80038a6 <_isatty_r+0x1a>
 80038a0:	682b      	ldr	r3, [r5, #0]
 80038a2:	b103      	cbz	r3, 80038a6 <_isatty_r+0x1a>
 80038a4:	6023      	str	r3, [r4, #0]
 80038a6:	bd38      	pop	{r3, r4, r5, pc}
 80038a8:	200001fc 	.word	0x200001fc

080038ac <_lseek_r>:
 80038ac:	b538      	push	{r3, r4, r5, lr}
 80038ae:	4604      	mov	r4, r0
 80038b0:	4608      	mov	r0, r1
 80038b2:	4611      	mov	r1, r2
 80038b4:	2200      	movs	r2, #0
 80038b6:	4d05      	ldr	r5, [pc, #20]	; (80038cc <_lseek_r+0x20>)
 80038b8:	602a      	str	r2, [r5, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	f7fd f82b 	bl	8000916 <_lseek>
 80038c0:	1c43      	adds	r3, r0, #1
 80038c2:	d102      	bne.n	80038ca <_lseek_r+0x1e>
 80038c4:	682b      	ldr	r3, [r5, #0]
 80038c6:	b103      	cbz	r3, 80038ca <_lseek_r+0x1e>
 80038c8:	6023      	str	r3, [r4, #0]
 80038ca:	bd38      	pop	{r3, r4, r5, pc}
 80038cc:	200001fc 	.word	0x200001fc

080038d0 <__malloc_lock>:
 80038d0:	4801      	ldr	r0, [pc, #4]	; (80038d8 <__malloc_lock+0x8>)
 80038d2:	f7ff be0f 	b.w	80034f4 <__retarget_lock_acquire_recursive>
 80038d6:	bf00      	nop
 80038d8:	200001f0 	.word	0x200001f0

080038dc <__malloc_unlock>:
 80038dc:	4801      	ldr	r0, [pc, #4]	; (80038e4 <__malloc_unlock+0x8>)
 80038de:	f7ff be0a 	b.w	80034f6 <__retarget_lock_release_recursive>
 80038e2:	bf00      	nop
 80038e4:	200001f0 	.word	0x200001f0

080038e8 <_read_r>:
 80038e8:	b538      	push	{r3, r4, r5, lr}
 80038ea:	4604      	mov	r4, r0
 80038ec:	4608      	mov	r0, r1
 80038ee:	4611      	mov	r1, r2
 80038f0:	2200      	movs	r2, #0
 80038f2:	4d05      	ldr	r5, [pc, #20]	; (8003908 <_read_r+0x20>)
 80038f4:	602a      	str	r2, [r5, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	f7fc ffcc 	bl	8000894 <_read>
 80038fc:	1c43      	adds	r3, r0, #1
 80038fe:	d102      	bne.n	8003906 <_read_r+0x1e>
 8003900:	682b      	ldr	r3, [r5, #0]
 8003902:	b103      	cbz	r3, 8003906 <_read_r+0x1e>
 8003904:	6023      	str	r3, [r4, #0]
 8003906:	bd38      	pop	{r3, r4, r5, pc}
 8003908:	200001fc 	.word	0x200001fc

0800390c <_init>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	bf00      	nop
 8003910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003912:	bc08      	pop	{r3}
 8003914:	469e      	mov	lr, r3
 8003916:	4770      	bx	lr

08003918 <_fini>:
 8003918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391a:	bf00      	nop
 800391c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391e:	bc08      	pop	{r3}
 8003920:	469e      	mov	lr, r3
 8003922:	4770      	bx	lr
