
Test_Wifi_04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035c4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08003700  08003700  00013700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037c4  080037c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080037c4  080037c4  000137c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037cc  080037cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037cc  080037cc  000137cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037d0  080037d0  000137d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080037d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000070  08003844  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08003844  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a843  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e94  00000000  00000000  0002a8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0002c770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  0002d318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017119  00000000  00000000  0002dde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4fd  00000000  00000000  00044f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d04a  00000000  00000000  000513fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de448  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003610  00000000  00000000  000de498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	080036e8 	.word	0x080036e8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	080036e8 	.word	0x080036e8

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08a      	sub	sp, #40	; 0x28
 8000488:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	f107 0314 	add.w	r3, r7, #20
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
 8000498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049a:	4b2a      	ldr	r3, [pc, #168]	; (8000544 <MX_GPIO_Init+0xc0>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	4a29      	ldr	r2, [pc, #164]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004a0:	f043 0304 	orr.w	r3, r3, #4
 80004a4:	61d3      	str	r3, [r2, #28]
 80004a6:	4b27      	ldr	r3, [pc, #156]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	f003 0304 	and.w	r3, r3, #4
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004b2:	4b24      	ldr	r3, [pc, #144]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a23      	ldr	r2, [pc, #140]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004b8:	f043 0320 	orr.w	r3, r3, #32
 80004bc:	61d3      	str	r3, [r2, #28]
 80004be:	4b21      	ldr	r3, [pc, #132]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	f003 0320 	and.w	r3, r3, #32
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b1e      	ldr	r3, [pc, #120]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a1d      	ldr	r2, [pc, #116]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e2:	4b18      	ldr	r3, [pc, #96]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	4a17      	ldr	r2, [pc, #92]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004e8:	f043 0302 	orr.w	r3, r3, #2
 80004ec:	61d3      	str	r3, [r2, #28]
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	f003 0302 	and.w	r3, r3, #2
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2120      	movs	r1, #32
 80004fe:	4812      	ldr	r0, [pc, #72]	; (8000548 <MX_GPIO_Init+0xc4>)
 8000500:	f000 fe74 	bl	80011ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800050a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800050e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	4619      	mov	r1, r3
 800051a:	480c      	ldr	r0, [pc, #48]	; (800054c <MX_GPIO_Init+0xc8>)
 800051c:	f000 fcd6 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000520:	2320      	movs	r3, #32
 8000522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000524:	2301      	movs	r3, #1
 8000526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	2300      	movs	r3, #0
 800052a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052c:	2300      	movs	r3, #0
 800052e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	4619      	mov	r1, r3
 8000536:	4804      	ldr	r0, [pc, #16]	; (8000548 <MX_GPIO_Init+0xc4>)
 8000538:	f000 fcc8 	bl	8000ecc <HAL_GPIO_Init>

}
 800053c:	bf00      	nop
 800053e:	3728      	adds	r7, #40	; 0x28
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40023800 	.word	0x40023800
 8000548:	40020000 	.word	0x40020000
 800054c:	40020800 	.word	0x40020800

08000550 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000558:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800055c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000560:	f003 0301 	and.w	r3, r3, #1
 8000564:	2b00      	cmp	r3, #0
 8000566:	d013      	beq.n	8000590 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000568:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800056c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000570:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000574:	2b00      	cmp	r3, #0
 8000576:	d00b      	beq.n	8000590 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000578:	e000      	b.n	800057c <ITM_SendChar+0x2c>
    {
      __NOP();
 800057a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800057c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d0f9      	beq.n	800057a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000586:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	b2d2      	uxtb	r2, r2
 800058e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000590:	687b      	ldr	r3, [r7, #4]
}
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	e009      	b.n	80005c2 <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	1c5a      	adds	r2, r3, #1
 80005b2:	60ba      	str	r2, [r7, #8]
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff ffca 	bl	8000550 <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	3301      	adds	r3, #1
 80005c0:	617b      	str	r3, [r7, #20]
 80005c2:	697a      	ldr	r2, [r7, #20]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	dbf1      	blt.n	80005ae <_write+0x12>
}
return len;
 80005ca:	687b      	ldr	r3, [r7, #4]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fae5 	bl	8000ba6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f81e 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f7ff ff50 	bl	8000484 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e4:	f000 fa14 	bl	8000a10 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005e8:	f000 f9e8 	bl	80009bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t*)gbl_rcv_buffer, sizeof(gbl_rcv_buffer[0]));
 80005ec:	2201      	movs	r2, #1
 80005ee:	4907      	ldr	r1, [pc, #28]	; (800060c <main+0x38>)
 80005f0:	4807      	ldr	r0, [pc, #28]	; (8000610 <main+0x3c>)
 80005f2:	f001 fee3 	bl	80023bc <HAL_UART_Receive_IT>
	printf("AT\n");
	HAL_Delay(5000);
	strncpy(gbl_tsm_buffer, "AT+CWLAP", 9);
	HAL_UART_Transmit_IT(&huart1, (uint8_t*)gbl_tsm_buffer, sizeof(gbl_tsm_buffer[0]));
	printf("AT+CWLAP\n");*/
  strncpy(gbl_tsm_buffer, "AT+CWJAP=jhles,'montazac'", 9);
 80005f6:	4b07      	ldr	r3, [pc, #28]	; (8000614 <main+0x40>)
 80005f8:	4a07      	ldr	r2, [pc, #28]	; (8000618 <main+0x44>)
 80005fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80005fc:	c303      	stmia	r3!, {r0, r1}
 80005fe:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)gbl_tsm_buffer, sizeof(gbl_tsm_buffer[0]));
 8000600:	2201      	movs	r2, #1
 8000602:	4904      	ldr	r1, [pc, #16]	; (8000614 <main+0x40>)
 8000604:	4802      	ldr	r0, [pc, #8]	; (8000610 <main+0x3c>)
 8000606:	f001 fe87 	bl	8002318 <HAL_UART_Transmit_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060a:	e7fe      	b.n	800060a <main+0x36>
 800060c:	2000008c 	.word	0x2000008c
 8000610:	20000198 	.word	0x20000198
 8000614:	200000f0 	.word	0x200000f0
 8000618:	08003700 	.word	0x08003700

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b092      	sub	sp, #72	; 0x48
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	2234      	movs	r2, #52	; 0x34
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fb5e 	bl	8002cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	463b      	mov	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063e:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <SystemClock_Config+0x98>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000646:	4a1b      	ldr	r2, [pc, #108]	; (80006b4 <SystemClock_Config+0x98>)
 8000648:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800064c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064e:	2302      	movs	r3, #2
 8000650:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000652:	2301      	movs	r3, #1
 8000654:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000656:	2310      	movs	r3, #16
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065e:	2300      	movs	r3, #0
 8000660:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000662:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000668:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800066c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fdd2 	bl	800121c <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800067e:	f000 f82a 	bl	80006d6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2303      	movs	r3, #3
 8000688:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000696:	463b      	mov	r3, r7
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f8ee 	bl	800187c <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006a6:	f000 f816 	bl	80006d6 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3748      	adds	r7, #72	; 0x48
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40007000 	.word	0x40007000

080006b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006c8:	d101      	bne.n	80006ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006ca:	f000 fa85 	bl	8000bd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006da:	b672      	cpsid	i
}
 80006dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006de:	e7fe      	b.n	80006de <Error_Handler+0x8>

080006e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <HAL_MspInit+0x58>)
 80006e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ea:	4a13      	ldr	r2, [pc, #76]	; (8000738 <HAL_MspInit+0x58>)
 80006ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006f0:	6253      	str	r3, [r2, #36]	; 0x24
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <HAL_MspInit+0x58>)
 80006f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <HAL_MspInit+0x58>)
 8000700:	6a1b      	ldr	r3, [r3, #32]
 8000702:	4a0d      	ldr	r2, [pc, #52]	; (8000738 <HAL_MspInit+0x58>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6213      	str	r3, [r2, #32]
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <HAL_MspInit+0x58>)
 800070c:	6a1b      	ldr	r3, [r3, #32]
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_MspInit+0x58>)
 8000718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800071a:	4a07      	ldr	r2, [pc, #28]	; (8000738 <HAL_MspInit+0x58>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000720:	6253      	str	r3, [r2, #36]	; 0x24
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_MspInit+0x58>)
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072e:	bf00      	nop
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	40023800 	.word	0x40023800

0800073c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08e      	sub	sp, #56	; 0x38
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000744:	2300      	movs	r3, #0
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000748:	2300      	movs	r3, #0
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800074c:	2300      	movs	r3, #0
 800074e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000752:	4b33      	ldr	r3, [pc, #204]	; (8000820 <HAL_InitTick+0xe4>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	4a32      	ldr	r2, [pc, #200]	; (8000820 <HAL_InitTick+0xe4>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6253      	str	r3, [r2, #36]	; 0x24
 800075e:	4b30      	ldr	r3, [pc, #192]	; (8000820 <HAL_InitTick+0xe4>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800076a:	f107 0210 	add.w	r2, r7, #16
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4611      	mov	r1, r2
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fae7 	bl	8001d48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800077a:	6a3b      	ldr	r3, [r7, #32]
 800077c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800077e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000780:	2b00      	cmp	r3, #0
 8000782:	d103      	bne.n	800078c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000784:	f001 fab8 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 8000788:	6378      	str	r0, [r7, #52]	; 0x34
 800078a:	e004      	b.n	8000796 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800078c:	f001 fab4 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 8000790:	4603      	mov	r3, r0
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000798:	4a22      	ldr	r2, [pc, #136]	; (8000824 <HAL_InitTick+0xe8>)
 800079a:	fba2 2303 	umull	r2, r3, r2, r3
 800079e:	0c9b      	lsrs	r3, r3, #18
 80007a0:	3b01      	subs	r3, #1
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80007a4:	4b20      	ldr	r3, [pc, #128]	; (8000828 <HAL_InitTick+0xec>)
 80007a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80007ac:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <HAL_InitTick+0xec>)
 80007ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007b2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80007b4:	4a1c      	ldr	r2, [pc, #112]	; (8000828 <HAL_InitTick+0xec>)
 80007b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007b8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <HAL_InitTick+0xec>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <HAL_InitTick+0xec>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 80007c6:	4818      	ldr	r0, [pc, #96]	; (8000828 <HAL_InitTick+0xec>)
 80007c8:	f001 fb4e 	bl	8001e68 <HAL_TIM_Base_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80007d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d11b      	bne.n	8000812 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80007da:	4813      	ldr	r0, [pc, #76]	; (8000828 <HAL_InitTick+0xec>)
 80007dc:	f001 fb8c 	bl	8001ef8 <HAL_TIM_Base_Start_IT>
 80007e0:	4603      	mov	r3, r0
 80007e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80007e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d111      	bne.n	8000812 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007ee:	201c      	movs	r0, #28
 80007f0:	f000 fadf 	bl	8000db2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b0f      	cmp	r3, #15
 80007f8:	d808      	bhi.n	800080c <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80007fa:	2200      	movs	r2, #0
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	201c      	movs	r0, #28
 8000800:	f000 fabb 	bl	8000d7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000804:	4a09      	ldr	r2, [pc, #36]	; (800082c <HAL_InitTick+0xf0>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6013      	str	r3, [r2, #0]
 800080a:	e002      	b.n	8000812 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 800080c:	2301      	movs	r3, #1
 800080e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000812:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000816:	4618      	mov	r0, r3
 8000818:	3738      	adds	r7, #56	; 0x38
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	431bde83 	.word	0x431bde83
 8000828:	20000154 	.word	0x20000154
 800082c:	20000004 	.word	0x20000004

08000830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <NMI_Handler+0x4>

08000836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <HardFault_Handler+0x4>

0800083c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <MemManage_Handler+0x4>

08000842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <UsageFault_Handler+0x4>

0800084e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr

0800085a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr

08000866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr

08000872 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
	...

08000880 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <TIM2_IRQHandler+0x10>)
 8000886:	f001 fb89 	bl	8001f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000154 	.word	0x20000154

08000894 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000898:	4802      	ldr	r0, [pc, #8]	; (80008a4 <USART1_IRQHandler+0x10>)
 800089a:	f001 fdbf 	bl	800241c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000198 	.word	0x20000198

080008a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	e00a      	b.n	80008d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008ba:	f3af 8000 	nop.w
 80008be:	4601      	mov	r1, r0
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	1c5a      	adds	r2, r3, #1
 80008c4:	60ba      	str	r2, [r7, #8]
 80008c6:	b2ca      	uxtb	r2, r1
 80008c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	3301      	adds	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697a      	ldr	r2, [r7, #20]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	dbf0      	blt.n	80008ba <_read+0x12>
  }

  return len;
 80008d8:	687b      	ldr	r3, [r7, #4]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80008e2:	b480      	push	{r7}
 80008e4:	b083      	sub	sp, #12
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr

080008f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000908:	605a      	str	r2, [r3, #4]
  return 0;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr

08000916 <_isatty>:

int _isatty(int file)
{
 8000916:	b480      	push	{r7}
 8000918:	b083      	sub	sp, #12
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr

0800092a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800092a:	b480      	push	{r7}
 800092c:	b085      	sub	sp, #20
 800092e:	af00      	add	r7, sp, #0
 8000930:	60f8      	str	r0, [r7, #12]
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000936:	2300      	movs	r3, #0
}
 8000938:	4618      	mov	r0, r3
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
	...

08000944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800094c:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <_sbrk+0x5c>)
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <_sbrk+0x60>)
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d102      	bne.n	8000966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <_sbrk+0x64>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <_sbrk+0x68>)
 8000964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <_sbrk+0x64>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	429a      	cmp	r2, r3
 8000972:	d207      	bcs.n	8000984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000974:	f002 f990 	bl	8002c98 <__errno>
 8000978:	4603      	mov	r3, r0
 800097a:	220c      	movs	r2, #12
 800097c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800097e:	f04f 33ff 	mov.w	r3, #4294967295
 8000982:	e009      	b.n	8000998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <_sbrk+0x64>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <_sbrk+0x64>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <_sbrk+0x64>)
 8000994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000996:	68fb      	ldr	r3, [r7, #12]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3718      	adds	r7, #24
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20014000 	.word	0x20014000
 80009a4:	00000400 	.word	0x00000400
 80009a8:	20000194 	.word	0x20000194
 80009ac:	20000238 	.word	0x20000238

080009b0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <MX_USART1_UART_Init+0x50>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009f4:	f001 fc42 	bl	800227c <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009fe:	f7ff fe6a 	bl	80006d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000198 	.word	0x20000198
 8000a0c:	40013800 	.word	0x40013800

08000a10 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <MX_USART2_UART_Init+0x50>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a48:	f001 fc18 	bl	800227c <HAL_UART_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a52:	f7ff fe40 	bl	80006d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200001dc 	.word	0x200001dc
 8000a60:	40004400 	.word	0x40004400

08000a64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08c      	sub	sp, #48	; 0x30
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a32      	ldr	r2, [pc, #200]	; (8000b4c <HAL_UART_MspInit+0xe8>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d131      	bne.n	8000aea <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a86:	4b32      	ldr	r3, [pc, #200]	; (8000b50 <HAL_UART_MspInit+0xec>)
 8000a88:	6a1b      	ldr	r3, [r3, #32]
 8000a8a:	4a31      	ldr	r2, [pc, #196]	; (8000b50 <HAL_UART_MspInit+0xec>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a90:	6213      	str	r3, [r2, #32]
 8000a92:	4b2f      	ldr	r3, [pc, #188]	; (8000b50 <HAL_UART_MspInit+0xec>)
 8000a94:	6a1b      	ldr	r3, [r3, #32]
 8000a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9a:	61bb      	str	r3, [r7, #24]
 8000a9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	4b2c      	ldr	r3, [pc, #176]	; (8000b50 <HAL_UART_MspInit+0xec>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	4a2b      	ldr	r2, [pc, #172]	; (8000b50 <HAL_UART_MspInit+0xec>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	61d3      	str	r3, [r2, #28]
 8000aaa:	4b29      	ldr	r3, [pc, #164]	; (8000b50 <HAL_UART_MspInit+0xec>)
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ab6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ac8:	2307      	movs	r3, #7
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4820      	ldr	r0, [pc, #128]	; (8000b54 <HAL_UART_MspInit+0xf0>)
 8000ad4:	f000 f9fa 	bl	8000ecc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	2025      	movs	r0, #37	; 0x25
 8000ade:	f000 f94c 	bl	8000d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ae2:	2025      	movs	r0, #37	; 0x25
 8000ae4:	f000 f965 	bl	8000db2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ae8:	e02c      	b.n	8000b44 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a1a      	ldr	r2, [pc, #104]	; (8000b58 <HAL_UART_MspInit+0xf4>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d127      	bne.n	8000b44 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_UART_MspInit+0xec>)
 8000af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af8:	4a15      	ldr	r2, [pc, #84]	; (8000b50 <HAL_UART_MspInit+0xec>)
 8000afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afe:	6253      	str	r3, [r2, #36]	; 0x24
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <HAL_UART_MspInit+0xec>)
 8000b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <HAL_UART_MspInit+0xec>)
 8000b0e:	69db      	ldr	r3, [r3, #28]
 8000b10:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <HAL_UART_MspInit+0xec>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	61d3      	str	r3, [r2, #28]
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_UART_MspInit+0xec>)
 8000b1a:	69db      	ldr	r3, [r3, #28]
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b24:	230c      	movs	r3, #12
 8000b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b34:	2307      	movs	r3, #7
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <HAL_UART_MspInit+0xf0>)
 8000b40:	f000 f9c4 	bl	8000ecc <HAL_GPIO_Init>
}
 8000b44:	bf00      	nop
 8000b46:	3730      	adds	r7, #48	; 0x30
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40013800 	.word	0x40013800
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020000 	.word	0x40020000
 8000b58:	40004400 	.word	0x40004400

08000b5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b5c:	480c      	ldr	r0, [pc, #48]	; (8000b90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b5e:	490d      	ldr	r1, [pc, #52]	; (8000b94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b60:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b64:	e002      	b.n	8000b6c <LoopCopyDataInit>

08000b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6a:	3304      	adds	r3, #4

08000b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b70:	d3f9      	bcc.n	8000b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b72:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b74:	4c0a      	ldr	r4, [pc, #40]	; (8000ba0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b78:	e001      	b.n	8000b7e <LoopFillZerobss>

08000b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b7c:	3204      	adds	r2, #4

08000b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b80:	d3fb      	bcc.n	8000b7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b82:	f7ff ff15 	bl	80009b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b86:	f002 f88d 	bl	8002ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b8a:	f7ff fd23 	bl	80005d4 <main>
  bx lr
 8000b8e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b98:	080037d4 	.word	0x080037d4
  ldr r2, =_sbss
 8000b9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ba0:	20000234 	.word	0x20000234

08000ba4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC1_IRQHandler>

08000ba6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bac:	2300      	movs	r3, #0
 8000bae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f000 f8d7 	bl	8000d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb6:	200f      	movs	r0, #15
 8000bb8:	f7ff fdc0 	bl	800073c <HAL_InitTick>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d002      	beq.n	8000bc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	71fb      	strb	r3, [r7, #7]
 8000bc6:	e001      	b.n	8000bcc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bc8:	f7ff fd8a 	bl	80006e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <HAL_IncTick+0x1c>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_IncTick+0x20>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	4a03      	ldr	r2, [pc, #12]	; (8000bf4 <HAL_IncTick+0x1c>)
 8000be8:	6013      	str	r3, [r2, #0]
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000220 	.word	0x20000220
 8000bf8:	20000008 	.word	0x20000008

08000bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b02      	ldr	r3, [pc, #8]	; (8000c0c <HAL_GetTick+0x10>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	20000220 	.word	0x20000220

08000c10 <__NVIC_SetPriorityGrouping>:
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_GetPriorityGrouping>:
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <__NVIC_GetPriorityGrouping+0x18>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 0307 	and.w	r3, r3, #7
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_EnableIRQ>:
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	db0b      	blt.n	8000c9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f003 021f 	and.w	r2, r3, #31
 8000c8c:	4906      	ldr	r1, [pc, #24]	; (8000ca8 <__NVIC_EnableIRQ+0x34>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	2001      	movs	r0, #1
 8000c96:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <__NVIC_SetPriority>:
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db0a      	blt.n	8000cd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	; (8000cf8 <__NVIC_SetPriority+0x4c>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cd4:	e00a      	b.n	8000cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4908      	ldr	r1, [pc, #32]	; (8000cfc <__NVIC_SetPriority+0x50>)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	0112      	lsls	r2, r2, #4
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	761a      	strb	r2, [r3, #24]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <NVIC_EncodePriority>:
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	; 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff ff4f 	bl	8000c10 <__NVIC_SetPriorityGrouping>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d8c:	f7ff ff64 	bl	8000c58 <__NVIC_GetPriorityGrouping>
 8000d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	6978      	ldr	r0, [r7, #20]
 8000d98:	f7ff ffb2 	bl	8000d00 <NVIC_EncodePriority>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff81 	bl	8000cac <__NVIC_SetPriority>
}
 8000daa:	bf00      	nop
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff57 	bl	8000c74 <__NVIC_EnableIRQ>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b085      	sub	sp, #20
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d008      	beq.n	8000df8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2204      	movs	r2, #4
 8000dea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e022      	b.n	8000e3e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f022 020e 	bic.w	r2, r2, #14
 8000e06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f022 0201 	bic.w	r2, r2, #1
 8000e16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	f003 021c 	and.w	r2, r3, #28
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e24:	2101      	movs	r1, #1
 8000e26:	fa01 f202 	lsl.w	r2, r1, r2
 8000e2a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e50:	2300      	movs	r3, #0
 8000e52:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d005      	beq.n	8000e6c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2204      	movs	r2, #4
 8000e64:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	73fb      	strb	r3, [r7, #15]
 8000e6a:	e029      	b.n	8000ec0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f022 020e 	bic.w	r2, r2, #14
 8000e7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0201 	bic.w	r2, r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	f003 021c 	and.w	r2, r3, #28
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e98:	2101      	movs	r1, #1
 8000e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	4798      	blx	r3
    }
  }
  return status;
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ee2:	e160      	b.n	80011a6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	2101      	movs	r1, #1
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f000 8152 	beq.w	80011a0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d005      	beq.n	8000f14 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d130      	bne.n	8000f76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	f003 0201 	and.w	r2, r3, #1
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d017      	beq.n	8000fb2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d123      	bne.n	8001006 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	220f      	movs	r2, #15
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	691a      	ldr	r2, [r3, #16]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	f003 0307 	and.w	r3, r3, #7
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	08da      	lsrs	r2, r3, #3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3208      	adds	r2, #8
 8001000:	6939      	ldr	r1, [r7, #16]
 8001002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2203      	movs	r2, #3
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0203 	and.w	r2, r3, #3
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 80ac 	beq.w	80011a0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001048:	4b5e      	ldr	r3, [pc, #376]	; (80011c4 <HAL_GPIO_Init+0x2f8>)
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	4a5d      	ldr	r2, [pc, #372]	; (80011c4 <HAL_GPIO_Init+0x2f8>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6213      	str	r3, [r2, #32]
 8001054:	4b5b      	ldr	r3, [pc, #364]	; (80011c4 <HAL_GPIO_Init+0x2f8>)
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001060:	4a59      	ldr	r2, [pc, #356]	; (80011c8 <HAL_GPIO_Init+0x2fc>)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	089b      	lsrs	r3, r3, #2
 8001066:	3302      	adds	r3, #2
 8001068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	220f      	movs	r2, #15
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a51      	ldr	r2, [pc, #324]	; (80011cc <HAL_GPIO_Init+0x300>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d025      	beq.n	80010d8 <HAL_GPIO_Init+0x20c>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a50      	ldr	r2, [pc, #320]	; (80011d0 <HAL_GPIO_Init+0x304>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d01f      	beq.n	80010d4 <HAL_GPIO_Init+0x208>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a4f      	ldr	r2, [pc, #316]	; (80011d4 <HAL_GPIO_Init+0x308>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d019      	beq.n	80010d0 <HAL_GPIO_Init+0x204>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a4e      	ldr	r2, [pc, #312]	; (80011d8 <HAL_GPIO_Init+0x30c>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d013      	beq.n	80010cc <HAL_GPIO_Init+0x200>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a4d      	ldr	r2, [pc, #308]	; (80011dc <HAL_GPIO_Init+0x310>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d00d      	beq.n	80010c8 <HAL_GPIO_Init+0x1fc>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a4c      	ldr	r2, [pc, #304]	; (80011e0 <HAL_GPIO_Init+0x314>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d007      	beq.n	80010c4 <HAL_GPIO_Init+0x1f8>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a4b      	ldr	r2, [pc, #300]	; (80011e4 <HAL_GPIO_Init+0x318>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d101      	bne.n	80010c0 <HAL_GPIO_Init+0x1f4>
 80010bc:	2306      	movs	r3, #6
 80010be:	e00c      	b.n	80010da <HAL_GPIO_Init+0x20e>
 80010c0:	2307      	movs	r3, #7
 80010c2:	e00a      	b.n	80010da <HAL_GPIO_Init+0x20e>
 80010c4:	2305      	movs	r3, #5
 80010c6:	e008      	b.n	80010da <HAL_GPIO_Init+0x20e>
 80010c8:	2304      	movs	r3, #4
 80010ca:	e006      	b.n	80010da <HAL_GPIO_Init+0x20e>
 80010cc:	2303      	movs	r3, #3
 80010ce:	e004      	b.n	80010da <HAL_GPIO_Init+0x20e>
 80010d0:	2302      	movs	r3, #2
 80010d2:	e002      	b.n	80010da <HAL_GPIO_Init+0x20e>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <HAL_GPIO_Init+0x20e>
 80010d8:	2300      	movs	r3, #0
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	f002 0203 	and.w	r2, r2, #3
 80010e0:	0092      	lsls	r2, r2, #2
 80010e2:	4093      	lsls	r3, r2
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010ea:	4937      	ldr	r1, [pc, #220]	; (80011c8 <HAL_GPIO_Init+0x2fc>)
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3302      	adds	r3, #2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f8:	4b3b      	ldr	r3, [pc, #236]	; (80011e8 <HAL_GPIO_Init+0x31c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800111c:	4a32      	ldr	r2, [pc, #200]	; (80011e8 <HAL_GPIO_Init+0x31c>)
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001122:	4b31      	ldr	r3, [pc, #196]	; (80011e8 <HAL_GPIO_Init+0x31c>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001146:	4a28      	ldr	r2, [pc, #160]	; (80011e8 <HAL_GPIO_Init+0x31c>)
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114c:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <HAL_GPIO_Init+0x31c>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001170:	4a1d      	ldr	r2, [pc, #116]	; (80011e8 <HAL_GPIO_Init+0x31c>)
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <HAL_GPIO_Init+0x31c>)
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800119a:	4a13      	ldr	r2, [pc, #76]	; (80011e8 <HAL_GPIO_Init+0x31c>)
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3301      	adds	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	fa22 f303 	lsr.w	r3, r2, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f47f ae97 	bne.w	8000ee4 <HAL_GPIO_Init+0x18>
  }
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	371c      	adds	r7, #28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40010000 	.word	0x40010000
 80011cc:	40020000 	.word	0x40020000
 80011d0:	40020400 	.word	0x40020400
 80011d4:	40020800 	.word	0x40020800
 80011d8:	40020c00 	.word	0x40020c00
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40021400 	.word	0x40021400
 80011e4:	40021800 	.word	0x40021800
 80011e8:	40010400 	.word	0x40010400

080011ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
 80011f8:	4613      	mov	r3, r2
 80011fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011fc:	787b      	ldrb	r3, [r7, #1]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001208:	e003      	b.n	8001212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800120a:	887b      	ldrh	r3, [r7, #2]
 800120c:	041a      	lsls	r2, r3, #16
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	619a      	str	r2, [r3, #24]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e31d      	b.n	800186a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800122e:	4b94      	ldr	r3, [pc, #592]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001238:	4b91      	ldr	r3, [pc, #580]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001240:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d07b      	beq.n	8001346 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	2b08      	cmp	r3, #8
 8001252:	d006      	beq.n	8001262 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	2b0c      	cmp	r3, #12
 8001258:	d10f      	bne.n	800127a <HAL_RCC_OscConfig+0x5e>
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001260:	d10b      	bne.n	800127a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001262:	4b87      	ldr	r3, [pc, #540]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d06a      	beq.n	8001344 <HAL_RCC_OscConfig+0x128>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d166      	bne.n	8001344 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e2f7      	b.n	800186a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d106      	bne.n	8001290 <HAL_RCC_OscConfig+0x74>
 8001282:	4b7f      	ldr	r3, [pc, #508]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a7e      	ldr	r2, [pc, #504]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 8001288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	e02d      	b.n	80012ec <HAL_RCC_OscConfig+0xd0>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d10c      	bne.n	80012b2 <HAL_RCC_OscConfig+0x96>
 8001298:	4b79      	ldr	r3, [pc, #484]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a78      	ldr	r2, [pc, #480]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 800129e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b76      	ldr	r3, [pc, #472]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a75      	ldr	r2, [pc, #468]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 80012aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	e01c      	b.n	80012ec <HAL_RCC_OscConfig+0xd0>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	d10c      	bne.n	80012d4 <HAL_RCC_OscConfig+0xb8>
 80012ba:	4b71      	ldr	r3, [pc, #452]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a70      	ldr	r2, [pc, #448]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 80012c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	4b6e      	ldr	r3, [pc, #440]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a6d      	ldr	r2, [pc, #436]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 80012cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e00b      	b.n	80012ec <HAL_RCC_OscConfig+0xd0>
 80012d4:	4b6a      	ldr	r3, [pc, #424]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a69      	ldr	r2, [pc, #420]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 80012da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4b67      	ldr	r3, [pc, #412]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a66      	ldr	r2, [pc, #408]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 80012e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d013      	beq.n	800131c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fc82 	bl	8000bfc <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff fc7e 	bl	8000bfc <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	; 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e2ad      	b.n	800186a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800130e:	4b5c      	ldr	r3, [pc, #368]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0xe0>
 800131a:	e014      	b.n	8001346 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fc6e 	bl	8000bfc <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001324:	f7ff fc6a 	bl	8000bfc <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b64      	cmp	r3, #100	; 0x64
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e299      	b.n	800186a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001336:	4b52      	ldr	r3, [pc, #328]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x108>
 8001342:	e000      	b.n	8001346 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d05a      	beq.n	8001408 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	2b04      	cmp	r3, #4
 8001356:	d005      	beq.n	8001364 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	2b0c      	cmp	r3, #12
 800135c:	d119      	bne.n	8001392 <HAL_RCC_OscConfig+0x176>
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d116      	bne.n	8001392 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001364:	4b46      	ldr	r3, [pc, #280]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <HAL_RCC_OscConfig+0x160>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d001      	beq.n	800137c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e276      	b.n	800186a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137c:	4b40      	ldr	r3, [pc, #256]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	493d      	ldr	r1, [pc, #244]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 800138c:	4313      	orrs	r3, r2
 800138e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001390:	e03a      	b.n	8001408 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d020      	beq.n	80013dc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800139a:	4b3a      	ldr	r3, [pc, #232]	; (8001484 <HAL_RCC_OscConfig+0x268>)
 800139c:	2201      	movs	r2, #1
 800139e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fc2c 	bl	8000bfc <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a8:	f7ff fc28 	bl	8000bfc <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e257      	b.n	800186a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013ba:	4b31      	ldr	r3, [pc, #196]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f0      	beq.n	80013a8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c6:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	492a      	ldr	r1, [pc, #168]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	604b      	str	r3, [r1, #4]
 80013da:	e015      	b.n	8001408 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013dc:	4b29      	ldr	r3, [pc, #164]	; (8001484 <HAL_RCC_OscConfig+0x268>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e2:	f7ff fc0b 	bl	8000bfc <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ea:	f7ff fc07 	bl	8000bfc <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e236      	b.n	800186a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013fc:	4b20      	ldr	r3, [pc, #128]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f0      	bne.n	80013ea <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0310 	and.w	r3, r3, #16
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 80b8 	beq.w	8001586 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d170      	bne.n	80014fe <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <HAL_RCC_OscConfig+0x218>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e21a      	b.n	800186a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a1a      	ldr	r2, [r3, #32]
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001440:	429a      	cmp	r2, r3
 8001442:	d921      	bls.n	8001488 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	4618      	mov	r0, r3
 800144a:	f000 fcad 	bl	8001da8 <RCC_SetFlashLatencyFromMSIRange>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e208      	b.n	800186a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	4906      	ldr	r1, [pc, #24]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 8001466:	4313      	orrs	r3, r2
 8001468:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	061b      	lsls	r3, r3, #24
 8001478:	4901      	ldr	r1, [pc, #4]	; (8001480 <HAL_RCC_OscConfig+0x264>)
 800147a:	4313      	orrs	r3, r2
 800147c:	604b      	str	r3, [r1, #4]
 800147e:	e020      	b.n	80014c2 <HAL_RCC_OscConfig+0x2a6>
 8001480:	40023800 	.word	0x40023800
 8001484:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001488:	4b99      	ldr	r3, [pc, #612]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	4996      	ldr	r1, [pc, #600]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 8001496:	4313      	orrs	r3, r2
 8001498:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800149a:	4b95      	ldr	r3, [pc, #596]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	061b      	lsls	r3, r3, #24
 80014a8:	4991      	ldr	r1, [pc, #580]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 fc78 	bl	8001da8 <RCC_SetFlashLatencyFromMSIRange>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e1d3      	b.n	800186a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	0b5b      	lsrs	r3, r3, #13
 80014c8:	3301      	adds	r3, #1
 80014ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014d2:	4a87      	ldr	r2, [pc, #540]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 80014d4:	6892      	ldr	r2, [r2, #8]
 80014d6:	0912      	lsrs	r2, r2, #4
 80014d8:	f002 020f 	and.w	r2, r2, #15
 80014dc:	4985      	ldr	r1, [pc, #532]	; (80016f4 <HAL_RCC_OscConfig+0x4d8>)
 80014de:	5c8a      	ldrb	r2, [r1, r2]
 80014e0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014e2:	4a85      	ldr	r2, [pc, #532]	; (80016f8 <HAL_RCC_OscConfig+0x4dc>)
 80014e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014e6:	4b85      	ldr	r3, [pc, #532]	; (80016fc <HAL_RCC_OscConfig+0x4e0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f926 	bl	800073c <HAL_InitTick>
 80014f0:	4603      	mov	r3, r0
 80014f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d045      	beq.n	8001586 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	e1b5      	b.n	800186a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d029      	beq.n	800155a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001506:	4b7e      	ldr	r3, [pc, #504]	; (8001700 <HAL_RCC_OscConfig+0x4e4>)
 8001508:	2201      	movs	r2, #1
 800150a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150c:	f7ff fb76 	bl	8000bfc <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001514:	f7ff fb72 	bl	8000bfc <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e1a1      	b.n	800186a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001526:	4b72      	ldr	r3, [pc, #456]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f0      	beq.n	8001514 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001532:	4b6f      	ldr	r3, [pc, #444]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	496c      	ldr	r1, [pc, #432]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 8001540:	4313      	orrs	r3, r2
 8001542:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001544:	4b6a      	ldr	r3, [pc, #424]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	061b      	lsls	r3, r3, #24
 8001552:	4967      	ldr	r1, [pc, #412]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 8001554:	4313      	orrs	r3, r2
 8001556:	604b      	str	r3, [r1, #4]
 8001558:	e015      	b.n	8001586 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800155a:	4b69      	ldr	r3, [pc, #420]	; (8001700 <HAL_RCC_OscConfig+0x4e4>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fb4c 	bl	8000bfc <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001568:	f7ff fb48 	bl	8000bfc <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e177      	b.n	800186a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800157a:	4b5d      	ldr	r3, [pc, #372]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	d030      	beq.n	80015f4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d016      	beq.n	80015c8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800159a:	4b5a      	ldr	r3, [pc, #360]	; (8001704 <HAL_RCC_OscConfig+0x4e8>)
 800159c:	2201      	movs	r2, #1
 800159e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a0:	f7ff fb2c 	bl	8000bfc <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a8:	f7ff fb28 	bl	8000bfc <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e157      	b.n	800186a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015ba:	4b4d      	ldr	r3, [pc, #308]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 80015bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0x38c>
 80015c6:	e015      	b.n	80015f4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c8:	4b4e      	ldr	r3, [pc, #312]	; (8001704 <HAL_RCC_OscConfig+0x4e8>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ce:	f7ff fb15 	bl	8000bfc <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d6:	f7ff fb11 	bl	8000bfc <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e140      	b.n	800186a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015e8:	4b41      	ldr	r3, [pc, #260]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 80015ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 80b5 	beq.w	800176c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001606:	4b3a      	ldr	r3, [pc, #232]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10d      	bne.n	800162e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	4b37      	ldr	r3, [pc, #220]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	4a36      	ldr	r2, [pc, #216]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 8001618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161c:	6253      	str	r3, [r2, #36]	; 0x24
 800161e:	4b34      	ldr	r3, [pc, #208]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800162a:	2301      	movs	r3, #1
 800162c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162e:	4b36      	ldr	r3, [pc, #216]	; (8001708 <HAL_RCC_OscConfig+0x4ec>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001636:	2b00      	cmp	r3, #0
 8001638:	d118      	bne.n	800166c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163a:	4b33      	ldr	r3, [pc, #204]	; (8001708 <HAL_RCC_OscConfig+0x4ec>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a32      	ldr	r2, [pc, #200]	; (8001708 <HAL_RCC_OscConfig+0x4ec>)
 8001640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001646:	f7ff fad9 	bl	8000bfc <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800164e:	f7ff fad5 	bl	8000bfc <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b64      	cmp	r3, #100	; 0x64
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e104      	b.n	800186a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001660:	4b29      	ldr	r3, [pc, #164]	; (8001708 <HAL_RCC_OscConfig+0x4ec>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d106      	bne.n	8001682 <HAL_RCC_OscConfig+0x466>
 8001674:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 8001676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001678:	4a1d      	ldr	r2, [pc, #116]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 800167a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167e:	6353      	str	r3, [r2, #52]	; 0x34
 8001680:	e02d      	b.n	80016de <HAL_RCC_OscConfig+0x4c2>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x488>
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 800168c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168e:	4a18      	ldr	r2, [pc, #96]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 8001690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001694:	6353      	str	r3, [r2, #52]	; 0x34
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 8001698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800169a:	4a15      	ldr	r2, [pc, #84]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 800169c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016a0:	6353      	str	r3, [r2, #52]	; 0x34
 80016a2:	e01c      	b.n	80016de <HAL_RCC_OscConfig+0x4c2>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b05      	cmp	r3, #5
 80016aa:	d10c      	bne.n	80016c6 <HAL_RCC_OscConfig+0x4aa>
 80016ac:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 80016ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b0:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 80016b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016b6:	6353      	str	r3, [r2, #52]	; 0x34
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 80016ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016bc:	4a0c      	ldr	r2, [pc, #48]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 80016be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c2:	6353      	str	r3, [r2, #52]	; 0x34
 80016c4:	e00b      	b.n	80016de <HAL_RCC_OscConfig+0x4c2>
 80016c6:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 80016c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ca:	4a09      	ldr	r2, [pc, #36]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 80016cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016d0:	6353      	str	r3, [r2, #52]	; 0x34
 80016d2:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 80016d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d6:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <HAL_RCC_OscConfig+0x4d4>)
 80016d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016dc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d024      	beq.n	8001730 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e6:	f7ff fa89 	bl	8000bfc <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016ec:	e019      	b.n	8001722 <HAL_RCC_OscConfig+0x506>
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800
 80016f4:	08003748 	.word	0x08003748
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000004 	.word	0x20000004
 8001700:	42470020 	.word	0x42470020
 8001704:	42470680 	.word	0x42470680
 8001708:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800170c:	f7ff fa76 	bl	8000bfc <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	; 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e0a3      	b.n	800186a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001722:	4b54      	ldr	r3, [pc, #336]	; (8001874 <HAL_RCC_OscConfig+0x658>)
 8001724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0ee      	beq.n	800170c <HAL_RCC_OscConfig+0x4f0>
 800172e:	e014      	b.n	800175a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001730:	f7ff fa64 	bl	8000bfc <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001736:	e00a      	b.n	800174e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001738:	f7ff fa60 	bl	8000bfc <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	; 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e08d      	b.n	800186a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800174e:	4b49      	ldr	r3, [pc, #292]	; (8001874 <HAL_RCC_OscConfig+0x658>)
 8001750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1ee      	bne.n	8001738 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800175a:	7ffb      	ldrb	r3, [r7, #31]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d105      	bne.n	800176c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001760:	4b44      	ldr	r3, [pc, #272]	; (8001874 <HAL_RCC_OscConfig+0x658>)
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	4a43      	ldr	r2, [pc, #268]	; (8001874 <HAL_RCC_OscConfig+0x658>)
 8001766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800176a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	2b00      	cmp	r3, #0
 8001772:	d079      	beq.n	8001868 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	2b0c      	cmp	r3, #12
 8001778:	d056      	beq.n	8001828 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	2b02      	cmp	r3, #2
 8001780:	d13b      	bne.n	80017fa <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001782:	4b3d      	ldr	r3, [pc, #244]	; (8001878 <HAL_RCC_OscConfig+0x65c>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fa38 	bl	8000bfc <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001790:	f7ff fa34 	bl	8000bfc <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e063      	b.n	800186a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017a2:	4b34      	ldr	r3, [pc, #208]	; (8001874 <HAL_RCC_OscConfig+0x658>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ae:	4b31      	ldr	r3, [pc, #196]	; (8001874 <HAL_RCC_OscConfig+0x658>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	4319      	orrs	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	430b      	orrs	r3, r1
 80017c6:	492b      	ldr	r1, [pc, #172]	; (8001874 <HAL_RCC_OscConfig+0x658>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017cc:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <HAL_RCC_OscConfig+0x65c>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d2:	f7ff fa13 	bl	8000bfc <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017da:	f7ff fa0f 	bl	8000bfc <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e03e      	b.n	800186a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017ec:	4b21      	ldr	r3, [pc, #132]	; (8001874 <HAL_RCC_OscConfig+0x658>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x5be>
 80017f8:	e036      	b.n	8001868 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fa:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <HAL_RCC_OscConfig+0x65c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff f9fc 	bl	8000bfc <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001808:	f7ff f9f8 	bl	8000bfc <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e027      	b.n	800186a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800181a:	4b16      	ldr	r3, [pc, #88]	; (8001874 <HAL_RCC_OscConfig+0x658>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x5ec>
 8001826:	e01f      	b.n	8001868 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e01a      	b.n	800186a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <HAL_RCC_OscConfig+0x658>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001844:	429a      	cmp	r2, r3
 8001846:	d10d      	bne.n	8001864 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d106      	bne.n	8001864 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3720      	adds	r7, #32
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	42470060 	.word	0x42470060

0800187c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e11a      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001890:	4b8f      	ldr	r3, [pc, #572]	; (8001ad0 <HAL_RCC_ClockConfig+0x254>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d919      	bls.n	80018d2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d105      	bne.n	80018b0 <HAL_RCC_ClockConfig+0x34>
 80018a4:	4b8a      	ldr	r3, [pc, #552]	; (8001ad0 <HAL_RCC_ClockConfig+0x254>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a89      	ldr	r2, [pc, #548]	; (8001ad0 <HAL_RCC_ClockConfig+0x254>)
 80018aa:	f043 0304 	orr.w	r3, r3, #4
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	4b87      	ldr	r3, [pc, #540]	; (8001ad0 <HAL_RCC_ClockConfig+0x254>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f023 0201 	bic.w	r2, r3, #1
 80018b8:	4985      	ldr	r1, [pc, #532]	; (8001ad0 <HAL_RCC_ClockConfig+0x254>)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c0:	4b83      	ldr	r3, [pc, #524]	; (8001ad0 <HAL_RCC_ClockConfig+0x254>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d001      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e0f9      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d008      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018de:	4b7d      	ldr	r3, [pc, #500]	; (8001ad4 <HAL_RCC_ClockConfig+0x258>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	497a      	ldr	r1, [pc, #488]	; (8001ad4 <HAL_RCC_ClockConfig+0x258>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 808e 	beq.w	8001a1a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001906:	4b73      	ldr	r3, [pc, #460]	; (8001ad4 <HAL_RCC_ClockConfig+0x258>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d121      	bne.n	8001956 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e0d7      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b03      	cmp	r3, #3
 800191c:	d107      	bne.n	800192e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800191e:	4b6d      	ldr	r3, [pc, #436]	; (8001ad4 <HAL_RCC_ClockConfig+0x258>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d115      	bne.n	8001956 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e0cb      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d107      	bne.n	8001946 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001936:	4b67      	ldr	r3, [pc, #412]	; (8001ad4 <HAL_RCC_ClockConfig+0x258>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d109      	bne.n	8001956 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e0bf      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001946:	4b63      	ldr	r3, [pc, #396]	; (8001ad4 <HAL_RCC_ClockConfig+0x258>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e0b7      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001956:	4b5f      	ldr	r3, [pc, #380]	; (8001ad4 <HAL_RCC_ClockConfig+0x258>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f023 0203 	bic.w	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	495c      	ldr	r1, [pc, #368]	; (8001ad4 <HAL_RCC_ClockConfig+0x258>)
 8001964:	4313      	orrs	r3, r2
 8001966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001968:	f7ff f948 	bl	8000bfc <HAL_GetTick>
 800196c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d112      	bne.n	800199c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001976:	e00a      	b.n	800198e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001978:	f7ff f940 	bl	8000bfc <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	f241 3288 	movw	r2, #5000	; 0x1388
 8001986:	4293      	cmp	r3, r2
 8001988:	d901      	bls.n	800198e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e09b      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800198e:	4b51      	ldr	r3, [pc, #324]	; (8001ad4 <HAL_RCC_ClockConfig+0x258>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b08      	cmp	r3, #8
 8001998:	d1ee      	bne.n	8001978 <HAL_RCC_ClockConfig+0xfc>
 800199a:	e03e      	b.n	8001a1a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d112      	bne.n	80019ca <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a4:	e00a      	b.n	80019bc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a6:	f7ff f929 	bl	8000bfc <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e084      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019bc:	4b45      	ldr	r3, [pc, #276]	; (8001ad4 <HAL_RCC_ClockConfig+0x258>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b0c      	cmp	r3, #12
 80019c6:	d1ee      	bne.n	80019a6 <HAL_RCC_ClockConfig+0x12a>
 80019c8:	e027      	b.n	8001a1a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d11d      	bne.n	8001a0e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019d2:	e00a      	b.n	80019ea <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d4:	f7ff f912 	bl	8000bfc <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e06d      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ea:	4b3a      	ldr	r3, [pc, #232]	; (8001ad4 <HAL_RCC_ClockConfig+0x258>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d1ee      	bne.n	80019d4 <HAL_RCC_ClockConfig+0x158>
 80019f6:	e010      	b.n	8001a1a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f8:	f7ff f900 	bl	8000bfc <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e05b      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a0e:	4b31      	ldr	r3, [pc, #196]	; (8001ad4 <HAL_RCC_ClockConfig+0x258>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 030c 	and.w	r3, r3, #12
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1ee      	bne.n	80019f8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <HAL_RCC_ClockConfig+0x254>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d219      	bcs.n	8001a5c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d105      	bne.n	8001a3a <HAL_RCC_ClockConfig+0x1be>
 8001a2e:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <HAL_RCC_ClockConfig+0x254>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a27      	ldr	r2, [pc, #156]	; (8001ad0 <HAL_RCC_ClockConfig+0x254>)
 8001a34:	f043 0304 	orr.w	r3, r3, #4
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <HAL_RCC_ClockConfig+0x254>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 0201 	bic.w	r2, r3, #1
 8001a42:	4923      	ldr	r1, [pc, #140]	; (8001ad0 <HAL_RCC_ClockConfig+0x254>)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4a:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <HAL_RCC_ClockConfig+0x254>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e034      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a68:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <HAL_RCC_ClockConfig+0x258>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	4917      	ldr	r1, [pc, #92]	; (8001ad4 <HAL_RCC_ClockConfig+0x258>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d009      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <HAL_RCC_ClockConfig+0x258>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	490f      	ldr	r1, [pc, #60]	; (8001ad4 <HAL_RCC_ClockConfig+0x258>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a9a:	f000 f823 	bl	8001ae4 <HAL_RCC_GetSysClockFreq>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_RCC_ClockConfig+0x258>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	091b      	lsrs	r3, r3, #4
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	490b      	ldr	r1, [pc, #44]	; (8001ad8 <HAL_RCC_ClockConfig+0x25c>)
 8001aac:	5ccb      	ldrb	r3, [r1, r3]
 8001aae:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <HAL_RCC_ClockConfig+0x260>)
 8001ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <HAL_RCC_ClockConfig+0x264>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fe3e 	bl	800073c <HAL_InitTick>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ac4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023c00 	.word	0x40023c00
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	08003748 	.word	0x08003748
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000004 	.word	0x20000004

08001ae4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae8:	b092      	sub	sp, #72	; 0x48
 8001aea:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001aec:	4b79      	ldr	r3, [pc, #484]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b0c      	cmp	r3, #12
 8001afa:	d00d      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x34>
 8001afc:	2b0c      	cmp	r3, #12
 8001afe:	f200 80d5 	bhi.w	8001cac <HAL_RCC_GetSysClockFreq+0x1c8>
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d002      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x28>
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d003      	beq.n	8001b12 <HAL_RCC_GetSysClockFreq+0x2e>
 8001b0a:	e0cf      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b0c:	4b72      	ldr	r3, [pc, #456]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001b0e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001b10:	e0da      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b12:	4b72      	ldr	r3, [pc, #456]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001b14:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001b16:	e0d7      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b1a:	0c9b      	lsrs	r3, r3, #18
 8001b1c:	f003 020f 	and.w	r2, r3, #15
 8001b20:	4b6f      	ldr	r3, [pc, #444]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001b22:	5c9b      	ldrb	r3, [r3, r2]
 8001b24:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b28:	0d9b      	lsrs	r3, r3, #22
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	3301      	adds	r3, #1
 8001b30:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b32:	4b68      	ldr	r3, [pc, #416]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d05d      	beq.n	8001bfa <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b40:	2200      	movs	r2, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	4611      	mov	r1, r2
 8001b46:	4604      	mov	r4, r0
 8001b48:	460d      	mov	r5, r1
 8001b4a:	4622      	mov	r2, r4
 8001b4c:	462b      	mov	r3, r5
 8001b4e:	f04f 0000 	mov.w	r0, #0
 8001b52:	f04f 0100 	mov.w	r1, #0
 8001b56:	0159      	lsls	r1, r3, #5
 8001b58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b5c:	0150      	lsls	r0, r2, #5
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4621      	mov	r1, r4
 8001b64:	1a51      	subs	r1, r2, r1
 8001b66:	6139      	str	r1, [r7, #16]
 8001b68:	4629      	mov	r1, r5
 8001b6a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b7c:	4659      	mov	r1, fp
 8001b7e:	018b      	lsls	r3, r1, #6
 8001b80:	4651      	mov	r1, sl
 8001b82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b86:	4651      	mov	r1, sl
 8001b88:	018a      	lsls	r2, r1, #6
 8001b8a:	46d4      	mov	ip, sl
 8001b8c:	ebb2 080c 	subs.w	r8, r2, ip
 8001b90:	4659      	mov	r1, fp
 8001b92:	eb63 0901 	sbc.w	r9, r3, r1
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001baa:	4690      	mov	r8, r2
 8001bac:	4699      	mov	r9, r3
 8001bae:	4623      	mov	r3, r4
 8001bb0:	eb18 0303 	adds.w	r3, r8, r3
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	462b      	mov	r3, r5
 8001bb8:	eb49 0303 	adc.w	r3, r9, r3
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bca:	4629      	mov	r1, r5
 8001bcc:	024b      	lsls	r3, r1, #9
 8001bce:	4620      	mov	r0, r4
 8001bd0:	4629      	mov	r1, r5
 8001bd2:	4604      	mov	r4, r0
 8001bd4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001bd8:	4601      	mov	r1, r0
 8001bda:	024a      	lsls	r2, r1, #9
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be2:	2200      	movs	r2, #0
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001be8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bec:	f7fe fac6 	bl	800017c <__aeabi_uldivmod>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	647b      	str	r3, [r7, #68]	; 0x44
 8001bf8:	e055      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	623b      	str	r3, [r7, #32]
 8001c00:	627a      	str	r2, [r7, #36]	; 0x24
 8001c02:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c06:	4642      	mov	r2, r8
 8001c08:	464b      	mov	r3, r9
 8001c0a:	f04f 0000 	mov.w	r0, #0
 8001c0e:	f04f 0100 	mov.w	r1, #0
 8001c12:	0159      	lsls	r1, r3, #5
 8001c14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c18:	0150      	lsls	r0, r2, #5
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	46c4      	mov	ip, r8
 8001c20:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001c24:	4640      	mov	r0, r8
 8001c26:	4649      	mov	r1, r9
 8001c28:	468c      	mov	ip, r1
 8001c2a:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c3a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c3e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c42:	ebb2 040a 	subs.w	r4, r2, sl
 8001c46:	eb63 050b 	sbc.w	r5, r3, fp
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	00eb      	lsls	r3, r5, #3
 8001c54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c58:	00e2      	lsls	r2, r4, #3
 8001c5a:	4614      	mov	r4, r2
 8001c5c:	461d      	mov	r5, r3
 8001c5e:	4603      	mov	r3, r0
 8001c60:	18e3      	adds	r3, r4, r3
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	460b      	mov	r3, r1
 8001c66:	eb45 0303 	adc.w	r3, r5, r3
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c78:	4629      	mov	r1, r5
 8001c7a:	028b      	lsls	r3, r1, #10
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	4629      	mov	r1, r5
 8001c80:	4604      	mov	r4, r0
 8001c82:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001c86:	4601      	mov	r1, r0
 8001c88:	028a      	lsls	r2, r1, #10
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c90:	2200      	movs	r2, #0
 8001c92:	61bb      	str	r3, [r7, #24]
 8001c94:	61fa      	str	r2, [r7, #28]
 8001c96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c9a:	f7fe fa6f 	bl	800017c <__aeabi_uldivmod>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8001ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ca8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001caa:	e00d      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001cac:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	0b5b      	lsrs	r3, r3, #13
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cba:	3301      	adds	r3, #1
 8001cbc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001cc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3748      	adds	r7, #72	; 0x48
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	00f42400 	.word	0x00f42400
 8001cdc:	007a1200 	.word	0x007a1200
 8001ce0:	0800373c 	.word	0x0800373c

08001ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce8:	4b02      	ldr	r3, [pc, #8]	; (8001cf4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	20000000 	.word	0x20000000

08001cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cfc:	f7ff fff2 	bl	8001ce4 <HAL_RCC_GetHCLKFreq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	0a1b      	lsrs	r3, r3, #8
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	4903      	ldr	r1, [pc, #12]	; (8001d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d0e:	5ccb      	ldrb	r3, [r1, r3]
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	08003758 	.word	0x08003758

08001d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d24:	f7ff ffde 	bl	8001ce4 <HAL_RCC_GetHCLKFreq>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	0adb      	lsrs	r3, r3, #11
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	4903      	ldr	r1, [pc, #12]	; (8001d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d36:	5ccb      	ldrb	r3, [r1, r3]
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40023800 	.word	0x40023800
 8001d44:	08003758 	.word	0x08003758

08001d48 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	220f      	movs	r2, #15
 8001d56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <HAL_RCC_GetClockConfig+0x58>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 0203 	and.w	r2, r3, #3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <HAL_RCC_GetClockConfig+0x58>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_RCC_GetClockConfig+0x58>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <HAL_RCC_GetClockConfig+0x58>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	08db      	lsrs	r3, r3, #3
 8001d82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0201 	and.w	r2, r3, #1
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	601a      	str	r2, [r3, #0]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40023c00 	.word	0x40023c00

08001da8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001db4:	4b29      	ldr	r3, [pc, #164]	; (8001e5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d12c      	bne.n	8001e1a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dc0:	4b26      	ldr	r3, [pc, #152]	; (8001e5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001dcc:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	e016      	b.n	8001e06 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd8:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	4a1f      	ldr	r2, [pc, #124]	; (8001e5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de2:	6253      	str	r3, [r2, #36]	; 0x24
 8001de4:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001df0:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001df8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dfa:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	4a17      	ldr	r2, [pc, #92]	; (8001e5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e04:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001e0c:	d105      	bne.n	8001e1a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001e14:	d101      	bne.n	8001e1a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001e16:	2301      	movs	r3, #1
 8001e18:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d105      	bne.n	8001e2c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001e20:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0f      	ldr	r2, [pc, #60]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e26:	f043 0304 	orr.w	r3, r3, #4
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	4b0d      	ldr	r3, [pc, #52]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f023 0201 	bic.w	r2, r3, #1
 8001e34:	490b      	ldr	r1, [pc, #44]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e3c:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d001      	beq.n	8001e4e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	371c      	adds	r7, #28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40007000 	.word	0x40007000
 8001e64:	40023c00 	.word	0x40023c00

08001e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e031      	b.n	8001ede <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d106      	bne.n	8001e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f829 	bl	8001ee6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	f000 f978 	bl	800219c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d001      	beq.n	8001f10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e03a      	b.n	8001f86 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f30:	d00e      	beq.n	8001f50 <HAL_TIM_Base_Start_IT+0x58>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a16      	ldr	r2, [pc, #88]	; (8001f90 <HAL_TIM_Base_Start_IT+0x98>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d009      	beq.n	8001f50 <HAL_TIM_Base_Start_IT+0x58>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <HAL_TIM_Base_Start_IT+0x9c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d004      	beq.n	8001f50 <HAL_TIM_Base_Start_IT+0x58>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a13      	ldr	r2, [pc, #76]	; (8001f98 <HAL_TIM_Base_Start_IT+0xa0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d111      	bne.n	8001f74 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d010      	beq.n	8001f84 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0201 	orr.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f72:	e007      	b.n	8001f84 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	40000400 	.word	0x40000400
 8001f94:	40000800 	.word	0x40000800
 8001f98:	40010800 	.word	0x40010800

08001f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d122      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d11b      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0202 	mvn.w	r2, #2
 8001fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f8c1 	bl	8002166 <HAL_TIM_IC_CaptureCallback>
 8001fe4:	e005      	b.n	8001ff2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f8b4 	bl	8002154 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f8c3 	bl	8002178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b04      	cmp	r3, #4
 8002004:	d122      	bne.n	800204c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b04      	cmp	r3, #4
 8002012:	d11b      	bne.n	800204c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0204 	mvn.w	r2, #4
 800201c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2202      	movs	r2, #2
 8002022:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f897 	bl	8002166 <HAL_TIM_IC_CaptureCallback>
 8002038:	e005      	b.n	8002046 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f88a 	bl	8002154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f899 	bl	8002178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b08      	cmp	r3, #8
 8002058:	d122      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b08      	cmp	r3, #8
 8002066:	d11b      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0208 	mvn.w	r2, #8
 8002070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2204      	movs	r2, #4
 8002076:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f86d 	bl	8002166 <HAL_TIM_IC_CaptureCallback>
 800208c:	e005      	b.n	800209a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f860 	bl	8002154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f86f 	bl	8002178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	2b10      	cmp	r3, #16
 80020ac:	d122      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	2b10      	cmp	r3, #16
 80020ba:	d11b      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0210 	mvn.w	r2, #16
 80020c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2208      	movs	r2, #8
 80020ca:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f843 	bl	8002166 <HAL_TIM_IC_CaptureCallback>
 80020e0:	e005      	b.n	80020ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f836 	bl	8002154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f845 	bl	8002178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d10e      	bne.n	8002120 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b01      	cmp	r3, #1
 800210e:	d107      	bne.n	8002120 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0201 	mvn.w	r2, #1
 8002118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe facc 	bl	80006b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212a:	2b40      	cmp	r3, #64	; 0x40
 800212c:	d10e      	bne.n	800214c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002138:	2b40      	cmp	r3, #64	; 0x40
 800213a:	d107      	bne.n	800214c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f81f 	bl	800218a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr

0800218a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b2:	d00f      	beq.n	80021d4 <TIM_Base_SetConfig+0x38>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a2b      	ldr	r2, [pc, #172]	; (8002264 <TIM_Base_SetConfig+0xc8>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d00b      	beq.n	80021d4 <TIM_Base_SetConfig+0x38>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a2a      	ldr	r2, [pc, #168]	; (8002268 <TIM_Base_SetConfig+0xcc>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d007      	beq.n	80021d4 <TIM_Base_SetConfig+0x38>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a29      	ldr	r2, [pc, #164]	; (800226c <TIM_Base_SetConfig+0xd0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d003      	beq.n	80021d4 <TIM_Base_SetConfig+0x38>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a28      	ldr	r2, [pc, #160]	; (8002270 <TIM_Base_SetConfig+0xd4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d108      	bne.n	80021e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ec:	d017      	beq.n	800221e <TIM_Base_SetConfig+0x82>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a1c      	ldr	r2, [pc, #112]	; (8002264 <TIM_Base_SetConfig+0xc8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d013      	beq.n	800221e <TIM_Base_SetConfig+0x82>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a1b      	ldr	r2, [pc, #108]	; (8002268 <TIM_Base_SetConfig+0xcc>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00f      	beq.n	800221e <TIM_Base_SetConfig+0x82>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a1a      	ldr	r2, [pc, #104]	; (800226c <TIM_Base_SetConfig+0xd0>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00b      	beq.n	800221e <TIM_Base_SetConfig+0x82>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a19      	ldr	r2, [pc, #100]	; (8002270 <TIM_Base_SetConfig+0xd4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d007      	beq.n	800221e <TIM_Base_SetConfig+0x82>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a18      	ldr	r2, [pc, #96]	; (8002274 <TIM_Base_SetConfig+0xd8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d003      	beq.n	800221e <TIM_Base_SetConfig+0x82>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a17      	ldr	r2, [pc, #92]	; (8002278 <TIM_Base_SetConfig+0xdc>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d108      	bne.n	8002230 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	4313      	orrs	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	615a      	str	r2, [r3, #20]
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	40000400 	.word	0x40000400
 8002268:	40000800 	.word	0x40000800
 800226c:	40000c00 	.word	0x40000c00
 8002270:	40010800 	.word	0x40010800
 8002274:	40010c00 	.word	0x40010c00
 8002278:	40011000 	.word	0x40011000

0800227c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e03f      	b.n	800230e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d106      	bne.n	80022a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe fbde 	bl	8000a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2224      	movs	r2, #36	; 0x24
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 fc05 	bl	8002ad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695a      	ldr	r2, [r3, #20]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	4613      	mov	r3, r2
 8002324:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b20      	cmp	r3, #32
 8002330:	d136      	bne.n	80023a0 <HAL_UART_Transmit_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <HAL_UART_Transmit_IT+0x26>
 8002338:	88fb      	ldrh	r3, [r7, #6]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d104      	bne.n	8002348 <HAL_UART_Transmit_IT+0x30>
    {
    	printf("HAL_ERROR\n");
 800233e:	481c      	ldr	r0, [pc, #112]	; (80023b0 <HAL_UART_Transmit_IT+0x98>)
 8002340:	f000 fd4a 	bl	8002dd8 <puts>
    	return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e02f      	b.n	80023a8 <HAL_UART_Transmit_IT+0x90>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_UART_Transmit_IT+0x3e>
 8002352:	2302      	movs	r3, #2
 8002354:	e028      	b.n	80023a8 <HAL_UART_Transmit_IT+0x90>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	88fa      	ldrh	r2, [r7, #6]
 8002368:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	88fa      	ldrh	r2, [r7, #6]
 800236e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2221      	movs	r2, #33	; 0x21
 800237a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002394:	60da      	str	r2, [r3, #12]
    printf("HAL_OK\n");
 8002396:	4807      	ldr	r0, [pc, #28]	; (80023b4 <HAL_UART_Transmit_IT+0x9c>)
 8002398:	f000 fd1e 	bl	8002dd8 <puts>
    return HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	e003      	b.n	80023a8 <HAL_UART_Transmit_IT+0x90>
  }
  else
  {
	printf("HAL_BUSY\n");
 80023a0:	4805      	ldr	r0, [pc, #20]	; (80023b8 <HAL_UART_Transmit_IT+0xa0>)
 80023a2:	f000 fd19 	bl	8002dd8 <puts>
    return HAL_BUSY;
 80023a6:	2302      	movs	r3, #2
  }
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	0800371c 	.word	0x0800371c
 80023b4:	08003728 	.word	0x08003728
 80023b8:	08003730 	.word	0x08003730

080023bc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	4613      	mov	r3, r2
 80023c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	d11d      	bne.n	8002412 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <HAL_UART_Receive_IT+0x26>
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e016      	b.n	8002414 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_UART_Receive_IT+0x38>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e00f      	b.n	8002414 <HAL_UART_Receive_IT+0x58>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002402:	88fb      	ldrh	r3, [r7, #6]
 8002404:	461a      	mov	r2, r3
 8002406:	68b9      	ldr	r1, [r7, #8]
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f9d7 	bl	80027bc <UART_Start_Receive_IT>
 800240e:	4603      	mov	r3, r0
 8002410:	e000      	b.n	8002414 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002412:	2302      	movs	r3, #2
  }
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	; 0x28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800243c:	2300      	movs	r3, #0
 800243e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10d      	bne.n	800246e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	f003 0320 	and.w	r3, r3, #32
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_UART_IRQHandler+0x52>
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	f003 0320 	and.w	r3, r3, #32
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fa88 	bl	800297c <UART_Receive_IT>
      return;
 800246c:	e17b      	b.n	8002766 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 80b1 	beq.w	80025d8 <HAL_UART_IRQHandler+0x1bc>
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d105      	bne.n	800248c <HAL_UART_IRQHandler+0x70>
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 80a6 	beq.w	80025d8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <HAL_UART_IRQHandler+0x90>
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f043 0201 	orr.w	r2, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00a      	beq.n	80024cc <HAL_UART_IRQHandler+0xb0>
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f043 0202 	orr.w	r2, r3, #2
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_UART_IRQHandler+0xd0>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	f043 0204 	orr.w	r2, r3, #4
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00f      	beq.n	8002516 <HAL_UART_IRQHandler+0xfa>
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	f003 0320 	and.w	r3, r3, #32
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d104      	bne.n	800250a <HAL_UART_IRQHandler+0xee>
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d005      	beq.n	8002516 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f043 0208 	orr.w	r2, r3, #8
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 811e 	beq.w	800275c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	2b00      	cmp	r3, #0
 8002528:	d007      	beq.n	800253a <HAL_UART_IRQHandler+0x11e>
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 fa21 	bl	800297c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002544:	2b40      	cmp	r3, #64	; 0x40
 8002546:	bf0c      	ite	eq
 8002548:	2301      	moveq	r3, #1
 800254a:	2300      	movne	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d102      	bne.n	8002562 <HAL_UART_IRQHandler+0x146>
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d031      	beq.n	80025c6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f963 	bl	800282e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002572:	2b40      	cmp	r3, #64	; 0x40
 8002574:	d123      	bne.n	80025be <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002584:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258a:	2b00      	cmp	r3, #0
 800258c:	d013      	beq.n	80025b6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002592:	4a76      	ldr	r2, [pc, #472]	; (800276c <HAL_UART_IRQHandler+0x350>)
 8002594:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259a:	4618      	mov	r0, r3
 800259c:	f7fe fc54 	bl	8000e48 <HAL_DMA_Abort_IT>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d016      	beq.n	80025d4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025b0:	4610      	mov	r0, r2
 80025b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b4:	e00e      	b.n	80025d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f8ec 	bl	8002794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025bc:	e00a      	b.n	80025d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f8e8 	bl	8002794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c4:	e006      	b.n	80025d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f8e4 	bl	8002794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80025d2:	e0c3      	b.n	800275c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d4:	bf00      	nop
    return;
 80025d6:	e0c1      	b.n	800275c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	2b01      	cmp	r3, #1
 80025de:	f040 80a1 	bne.w	8002724 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 809b 	beq.w	8002724 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 8095 	beq.w	8002724 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261a:	2b40      	cmp	r3, #64	; 0x40
 800261c:	d14e      	bne.n	80026bc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002628:	8a3b      	ldrh	r3, [r7, #16]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 8098 	beq.w	8002760 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002634:	8a3a      	ldrh	r2, [r7, #16]
 8002636:	429a      	cmp	r2, r3
 8002638:	f080 8092 	bcs.w	8002760 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	8a3a      	ldrh	r2, [r7, #16]
 8002640:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	2b20      	cmp	r3, #32
 800264a:	d02b      	beq.n	80026a4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800265a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0201 	bic.w	r2, r2, #1
 800266a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800267a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0210 	bic.w	r2, r2, #16
 8002698:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe fb95 	bl	8000dce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	4619      	mov	r1, r3
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f876 	bl	80027a6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80026ba:	e051      	b.n	8002760 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d047      	beq.n	8002764 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80026d4:	8a7b      	ldrh	r3, [r7, #18]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d044      	beq.n	8002764 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80026e8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0201 	bic.w	r2, r2, #1
 80026f8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0210 	bic.w	r2, r2, #16
 8002716:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002718:	8a7b      	ldrh	r3, [r7, #18]
 800271a:	4619      	mov	r1, r3
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f842 	bl	80027a6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002722:	e01f      	b.n	8002764 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272a:	2b00      	cmp	r3, #0
 800272c:	d008      	beq.n	8002740 <HAL_UART_IRQHandler+0x324>
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f8b8 	bl	80028ae <UART_Transmit_IT>
    return;
 800273e:	e012      	b.n	8002766 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00d      	beq.n	8002766 <HAL_UART_IRQHandler+0x34a>
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f8f9 	bl	800294c <UART_EndTransmit_IT>
    return;
 800275a:	e004      	b.n	8002766 <HAL_UART_IRQHandler+0x34a>
    return;
 800275c:	bf00      	nop
 800275e:	e002      	b.n	8002766 <HAL_UART_IRQHandler+0x34a>
      return;
 8002760:	bf00      	nop
 8002762:	e000      	b.n	8002766 <HAL_UART_IRQHandler+0x34a>
      return;
 8002764:	bf00      	nop
  }
}
 8002766:	3728      	adds	r7, #40	; 0x28
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	08002887 	.word	0x08002887

08002770 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr

08002782 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr

080027a6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	460b      	mov	r3, r1
 80027b0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	4613      	mov	r3, r2
 80027c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	88fa      	ldrh	r2, [r7, #6]
 80027d4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	88fa      	ldrh	r2, [r7, #6]
 80027da:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2222      	movs	r2, #34	; 0x22
 80027e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002800:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0201 	orr.w	r2, r2, #1
 8002810:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0220 	orr.w	r2, r2, #32
 8002820:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002844:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0201 	bic.w	r2, r2, #1
 8002854:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	2b01      	cmp	r3, #1
 800285c:	d107      	bne.n	800286e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0210 	bic.w	r2, r2, #16
 800286c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr

08002886 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b084      	sub	sp, #16
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f7ff ff77 	bl	8002794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b085      	sub	sp, #20
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b21      	cmp	r3, #33	; 0x21
 80028c0:	d13e      	bne.n	8002940 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ca:	d114      	bne.n	80028f6 <UART_Transmit_IT+0x48>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d110      	bne.n	80028f6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	1c9a      	adds	r2, r3, #2
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	621a      	str	r2, [r3, #32]
 80028f4:	e008      	b.n	8002908 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	1c59      	adds	r1, r3, #1
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6211      	str	r1, [r2, #32]
 8002900:	781a      	ldrb	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b29b      	uxth	r3, r3
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	4619      	mov	r1, r3
 8002916:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10f      	bne.n	800293c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800292a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800293a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	e000      	b.n	8002942 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002940:	2302      	movs	r3, #2
  }
}
 8002942:	4618      	mov	r0, r3
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002962:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff feff 	bl	8002770 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b22      	cmp	r3, #34	; 0x22
 800298e:	f040 8099 	bne.w	8002ac4 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800299a:	d117      	bne.n	80029cc <UART_Receive_IT+0x50>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d113      	bne.n	80029cc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	1c9a      	adds	r2, r3, #2
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	629a      	str	r2, [r3, #40]	; 0x28
 80029ca:	e026      	b.n	8002a1a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029de:	d007      	beq.n	80029f0 <UART_Receive_IT+0x74>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10a      	bne.n	80029fe <UART_Receive_IT+0x82>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d106      	bne.n	80029fe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	701a      	strb	r2, [r3, #0]
 80029fc:	e008      	b.n	8002a10 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	4619      	mov	r1, r3
 8002a28:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d148      	bne.n	8002ac0 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0220 	bic.w	r2, r2, #32
 8002a3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695a      	ldr	r2, [r3, #20]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0201 	bic.w	r2, r2, #1
 8002a5c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d123      	bne.n	8002ab6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0210 	bic.w	r2, r2, #16
 8002a82:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	2b10      	cmp	r3, #16
 8002a90:	d10a      	bne.n	8002aa8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002aac:	4619      	mov	r1, r3
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff fe79 	bl	80027a6 <HAL_UARTEx_RxEventCallback>
 8002ab4:	e002      	b.n	8002abc <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff fe63 	bl	8002782 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	e002      	b.n	8002ac6 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e000      	b.n	8002ac6 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002ac4:	2302      	movs	r3, #2
  }
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002b10:	f023 030c 	bic.w	r3, r3, #12
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	430b      	orrs	r3, r1
 8002b1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699a      	ldr	r2, [r3, #24]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a55      	ldr	r2, [pc, #340]	; (8002c90 <UART_SetConfig+0x1c0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d103      	bne.n	8002b46 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b3e:	f7ff f8ef 	bl	8001d20 <HAL_RCC_GetPCLK2Freq>
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	e002      	b.n	8002b4c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b46:	f7ff f8d7 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 8002b4a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b54:	d14c      	bne.n	8002bf0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009a      	lsls	r2, r3, #2
 8002b60:	441a      	add	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6c:	4a49      	ldr	r2, [pc, #292]	; (8002c94 <UART_SetConfig+0x1c4>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	0119      	lsls	r1, r3, #4
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009a      	lsls	r2, r3, #2
 8002b80:	441a      	add	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b8c:	4b41      	ldr	r3, [pc, #260]	; (8002c94 <UART_SetConfig+0x1c4>)
 8002b8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	2064      	movs	r0, #100	; 0x64
 8002b96:	fb00 f303 	mul.w	r3, r0, r3
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	3332      	adds	r3, #50	; 0x32
 8002ba0:	4a3c      	ldr	r2, [pc, #240]	; (8002c94 <UART_SetConfig+0x1c4>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bae:	4419      	add	r1, r3
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009a      	lsls	r2, r3, #2
 8002bba:	441a      	add	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bc6:	4b33      	ldr	r3, [pc, #204]	; (8002c94 <UART_SetConfig+0x1c4>)
 8002bc8:	fba3 0302 	umull	r0, r3, r3, r2
 8002bcc:	095b      	lsrs	r3, r3, #5
 8002bce:	2064      	movs	r0, #100	; 0x64
 8002bd0:	fb00 f303 	mul.w	r3, r0, r3
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	3332      	adds	r3, #50	; 0x32
 8002bda:	4a2e      	ldr	r2, [pc, #184]	; (8002c94 <UART_SetConfig+0x1c4>)
 8002bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002be0:	095b      	lsrs	r3, r3, #5
 8002be2:	f003 0207 	and.w	r2, r3, #7
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	440a      	add	r2, r1
 8002bec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002bee:	e04a      	b.n	8002c86 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009a      	lsls	r2, r3, #2
 8002bfa:	441a      	add	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c06:	4a23      	ldr	r2, [pc, #140]	; (8002c94 <UART_SetConfig+0x1c4>)
 8002c08:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	0119      	lsls	r1, r3, #4
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	009a      	lsls	r2, r3, #2
 8002c1a:	441a      	add	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c26:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <UART_SetConfig+0x1c4>)
 8002c28:	fba3 0302 	umull	r0, r3, r3, r2
 8002c2c:	095b      	lsrs	r3, r3, #5
 8002c2e:	2064      	movs	r0, #100	; 0x64
 8002c30:	fb00 f303 	mul.w	r3, r0, r3
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	3332      	adds	r3, #50	; 0x32
 8002c3a:	4a16      	ldr	r2, [pc, #88]	; (8002c94 <UART_SetConfig+0x1c4>)
 8002c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c40:	095b      	lsrs	r3, r3, #5
 8002c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c46:	4419      	add	r1, r3
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	009a      	lsls	r2, r3, #2
 8002c52:	441a      	add	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <UART_SetConfig+0x1c4>)
 8002c60:	fba3 0302 	umull	r0, r3, r3, r2
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	2064      	movs	r0, #100	; 0x64
 8002c68:	fb00 f303 	mul.w	r3, r0, r3
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	3332      	adds	r3, #50	; 0x32
 8002c72:	4a08      	ldr	r2, [pc, #32]	; (8002c94 <UART_SetConfig+0x1c4>)
 8002c74:	fba2 2303 	umull	r2, r3, r2, r3
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	f003 020f 	and.w	r2, r3, #15
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	440a      	add	r2, r1
 8002c84:	609a      	str	r2, [r3, #8]
}
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40013800 	.word	0x40013800
 8002c94:	51eb851f 	.word	0x51eb851f

08002c98 <__errno>:
 8002c98:	4b01      	ldr	r3, [pc, #4]	; (8002ca0 <__errno+0x8>)
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	2000000c 	.word	0x2000000c

08002ca4 <__libc_init_array>:
 8002ca4:	b570      	push	{r4, r5, r6, lr}
 8002ca6:	2600      	movs	r6, #0
 8002ca8:	4d0c      	ldr	r5, [pc, #48]	; (8002cdc <__libc_init_array+0x38>)
 8002caa:	4c0d      	ldr	r4, [pc, #52]	; (8002ce0 <__libc_init_array+0x3c>)
 8002cac:	1b64      	subs	r4, r4, r5
 8002cae:	10a4      	asrs	r4, r4, #2
 8002cb0:	42a6      	cmp	r6, r4
 8002cb2:	d109      	bne.n	8002cc8 <__libc_init_array+0x24>
 8002cb4:	f000 fd18 	bl	80036e8 <_init>
 8002cb8:	2600      	movs	r6, #0
 8002cba:	4d0a      	ldr	r5, [pc, #40]	; (8002ce4 <__libc_init_array+0x40>)
 8002cbc:	4c0a      	ldr	r4, [pc, #40]	; (8002ce8 <__libc_init_array+0x44>)
 8002cbe:	1b64      	subs	r4, r4, r5
 8002cc0:	10a4      	asrs	r4, r4, #2
 8002cc2:	42a6      	cmp	r6, r4
 8002cc4:	d105      	bne.n	8002cd2 <__libc_init_array+0x2e>
 8002cc6:	bd70      	pop	{r4, r5, r6, pc}
 8002cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ccc:	4798      	blx	r3
 8002cce:	3601      	adds	r6, #1
 8002cd0:	e7ee      	b.n	8002cb0 <__libc_init_array+0xc>
 8002cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd6:	4798      	blx	r3
 8002cd8:	3601      	adds	r6, #1
 8002cda:	e7f2      	b.n	8002cc2 <__libc_init_array+0x1e>
 8002cdc:	080037cc 	.word	0x080037cc
 8002ce0:	080037cc 	.word	0x080037cc
 8002ce4:	080037cc 	.word	0x080037cc
 8002ce8:	080037d0 	.word	0x080037d0

08002cec <memset>:
 8002cec:	4603      	mov	r3, r0
 8002cee:	4402      	add	r2, r0
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d100      	bne.n	8002cf6 <memset+0xa>
 8002cf4:	4770      	bx	lr
 8002cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8002cfa:	e7f9      	b.n	8002cf0 <memset+0x4>

08002cfc <_puts_r>:
 8002cfc:	b570      	push	{r4, r5, r6, lr}
 8002cfe:	460e      	mov	r6, r1
 8002d00:	4605      	mov	r5, r0
 8002d02:	b118      	cbz	r0, 8002d0c <_puts_r+0x10>
 8002d04:	6983      	ldr	r3, [r0, #24]
 8002d06:	b90b      	cbnz	r3, 8002d0c <_puts_r+0x10>
 8002d08:	f000 fa44 	bl	8003194 <__sinit>
 8002d0c:	69ab      	ldr	r3, [r5, #24]
 8002d0e:	68ac      	ldr	r4, [r5, #8]
 8002d10:	b913      	cbnz	r3, 8002d18 <_puts_r+0x1c>
 8002d12:	4628      	mov	r0, r5
 8002d14:	f000 fa3e 	bl	8003194 <__sinit>
 8002d18:	4b2c      	ldr	r3, [pc, #176]	; (8002dcc <_puts_r+0xd0>)
 8002d1a:	429c      	cmp	r4, r3
 8002d1c:	d120      	bne.n	8002d60 <_puts_r+0x64>
 8002d1e:	686c      	ldr	r4, [r5, #4]
 8002d20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d22:	07db      	lsls	r3, r3, #31
 8002d24:	d405      	bmi.n	8002d32 <_puts_r+0x36>
 8002d26:	89a3      	ldrh	r3, [r4, #12]
 8002d28:	0598      	lsls	r0, r3, #22
 8002d2a:	d402      	bmi.n	8002d32 <_puts_r+0x36>
 8002d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d2e:	f000 facf 	bl	80032d0 <__retarget_lock_acquire_recursive>
 8002d32:	89a3      	ldrh	r3, [r4, #12]
 8002d34:	0719      	lsls	r1, r3, #28
 8002d36:	d51d      	bpl.n	8002d74 <_puts_r+0x78>
 8002d38:	6923      	ldr	r3, [r4, #16]
 8002d3a:	b1db      	cbz	r3, 8002d74 <_puts_r+0x78>
 8002d3c:	3e01      	subs	r6, #1
 8002d3e:	68a3      	ldr	r3, [r4, #8]
 8002d40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d44:	3b01      	subs	r3, #1
 8002d46:	60a3      	str	r3, [r4, #8]
 8002d48:	bb39      	cbnz	r1, 8002d9a <_puts_r+0x9e>
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	da38      	bge.n	8002dc0 <_puts_r+0xc4>
 8002d4e:	4622      	mov	r2, r4
 8002d50:	210a      	movs	r1, #10
 8002d52:	4628      	mov	r0, r5
 8002d54:	f000 f848 	bl	8002de8 <__swbuf_r>
 8002d58:	3001      	adds	r0, #1
 8002d5a:	d011      	beq.n	8002d80 <_puts_r+0x84>
 8002d5c:	250a      	movs	r5, #10
 8002d5e:	e011      	b.n	8002d84 <_puts_r+0x88>
 8002d60:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <_puts_r+0xd4>)
 8002d62:	429c      	cmp	r4, r3
 8002d64:	d101      	bne.n	8002d6a <_puts_r+0x6e>
 8002d66:	68ac      	ldr	r4, [r5, #8]
 8002d68:	e7da      	b.n	8002d20 <_puts_r+0x24>
 8002d6a:	4b1a      	ldr	r3, [pc, #104]	; (8002dd4 <_puts_r+0xd8>)
 8002d6c:	429c      	cmp	r4, r3
 8002d6e:	bf08      	it	eq
 8002d70:	68ec      	ldreq	r4, [r5, #12]
 8002d72:	e7d5      	b.n	8002d20 <_puts_r+0x24>
 8002d74:	4621      	mov	r1, r4
 8002d76:	4628      	mov	r0, r5
 8002d78:	f000 f888 	bl	8002e8c <__swsetup_r>
 8002d7c:	2800      	cmp	r0, #0
 8002d7e:	d0dd      	beq.n	8002d3c <_puts_r+0x40>
 8002d80:	f04f 35ff 	mov.w	r5, #4294967295
 8002d84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d86:	07da      	lsls	r2, r3, #31
 8002d88:	d405      	bmi.n	8002d96 <_puts_r+0x9a>
 8002d8a:	89a3      	ldrh	r3, [r4, #12]
 8002d8c:	059b      	lsls	r3, r3, #22
 8002d8e:	d402      	bmi.n	8002d96 <_puts_r+0x9a>
 8002d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d92:	f000 fa9e 	bl	80032d2 <__retarget_lock_release_recursive>
 8002d96:	4628      	mov	r0, r5
 8002d98:	bd70      	pop	{r4, r5, r6, pc}
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	da04      	bge.n	8002da8 <_puts_r+0xac>
 8002d9e:	69a2      	ldr	r2, [r4, #24]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	dc06      	bgt.n	8002db2 <_puts_r+0xb6>
 8002da4:	290a      	cmp	r1, #10
 8002da6:	d004      	beq.n	8002db2 <_puts_r+0xb6>
 8002da8:	6823      	ldr	r3, [r4, #0]
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	6022      	str	r2, [r4, #0]
 8002dae:	7019      	strb	r1, [r3, #0]
 8002db0:	e7c5      	b.n	8002d3e <_puts_r+0x42>
 8002db2:	4622      	mov	r2, r4
 8002db4:	4628      	mov	r0, r5
 8002db6:	f000 f817 	bl	8002de8 <__swbuf_r>
 8002dba:	3001      	adds	r0, #1
 8002dbc:	d1bf      	bne.n	8002d3e <_puts_r+0x42>
 8002dbe:	e7df      	b.n	8002d80 <_puts_r+0x84>
 8002dc0:	250a      	movs	r5, #10
 8002dc2:	6823      	ldr	r3, [r4, #0]
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	6022      	str	r2, [r4, #0]
 8002dc8:	701d      	strb	r5, [r3, #0]
 8002dca:	e7db      	b.n	8002d84 <_puts_r+0x88>
 8002dcc:	08003784 	.word	0x08003784
 8002dd0:	080037a4 	.word	0x080037a4
 8002dd4:	08003764 	.word	0x08003764

08002dd8 <puts>:
 8002dd8:	4b02      	ldr	r3, [pc, #8]	; (8002de4 <puts+0xc>)
 8002dda:	4601      	mov	r1, r0
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	f7ff bf8d 	b.w	8002cfc <_puts_r>
 8002de2:	bf00      	nop
 8002de4:	2000000c 	.word	0x2000000c

08002de8 <__swbuf_r>:
 8002de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dea:	460e      	mov	r6, r1
 8002dec:	4614      	mov	r4, r2
 8002dee:	4605      	mov	r5, r0
 8002df0:	b118      	cbz	r0, 8002dfa <__swbuf_r+0x12>
 8002df2:	6983      	ldr	r3, [r0, #24]
 8002df4:	b90b      	cbnz	r3, 8002dfa <__swbuf_r+0x12>
 8002df6:	f000 f9cd 	bl	8003194 <__sinit>
 8002dfa:	4b21      	ldr	r3, [pc, #132]	; (8002e80 <__swbuf_r+0x98>)
 8002dfc:	429c      	cmp	r4, r3
 8002dfe:	d12b      	bne.n	8002e58 <__swbuf_r+0x70>
 8002e00:	686c      	ldr	r4, [r5, #4]
 8002e02:	69a3      	ldr	r3, [r4, #24]
 8002e04:	60a3      	str	r3, [r4, #8]
 8002e06:	89a3      	ldrh	r3, [r4, #12]
 8002e08:	071a      	lsls	r2, r3, #28
 8002e0a:	d52f      	bpl.n	8002e6c <__swbuf_r+0x84>
 8002e0c:	6923      	ldr	r3, [r4, #16]
 8002e0e:	b36b      	cbz	r3, 8002e6c <__swbuf_r+0x84>
 8002e10:	6923      	ldr	r3, [r4, #16]
 8002e12:	6820      	ldr	r0, [r4, #0]
 8002e14:	b2f6      	uxtb	r6, r6
 8002e16:	1ac0      	subs	r0, r0, r3
 8002e18:	6963      	ldr	r3, [r4, #20]
 8002e1a:	4637      	mov	r7, r6
 8002e1c:	4283      	cmp	r3, r0
 8002e1e:	dc04      	bgt.n	8002e2a <__swbuf_r+0x42>
 8002e20:	4621      	mov	r1, r4
 8002e22:	4628      	mov	r0, r5
 8002e24:	f000 f922 	bl	800306c <_fflush_r>
 8002e28:	bb30      	cbnz	r0, 8002e78 <__swbuf_r+0x90>
 8002e2a:	68a3      	ldr	r3, [r4, #8]
 8002e2c:	3001      	adds	r0, #1
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	60a3      	str	r3, [r4, #8]
 8002e32:	6823      	ldr	r3, [r4, #0]
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	6022      	str	r2, [r4, #0]
 8002e38:	701e      	strb	r6, [r3, #0]
 8002e3a:	6963      	ldr	r3, [r4, #20]
 8002e3c:	4283      	cmp	r3, r0
 8002e3e:	d004      	beq.n	8002e4a <__swbuf_r+0x62>
 8002e40:	89a3      	ldrh	r3, [r4, #12]
 8002e42:	07db      	lsls	r3, r3, #31
 8002e44:	d506      	bpl.n	8002e54 <__swbuf_r+0x6c>
 8002e46:	2e0a      	cmp	r6, #10
 8002e48:	d104      	bne.n	8002e54 <__swbuf_r+0x6c>
 8002e4a:	4621      	mov	r1, r4
 8002e4c:	4628      	mov	r0, r5
 8002e4e:	f000 f90d 	bl	800306c <_fflush_r>
 8002e52:	b988      	cbnz	r0, 8002e78 <__swbuf_r+0x90>
 8002e54:	4638      	mov	r0, r7
 8002e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <__swbuf_r+0x9c>)
 8002e5a:	429c      	cmp	r4, r3
 8002e5c:	d101      	bne.n	8002e62 <__swbuf_r+0x7a>
 8002e5e:	68ac      	ldr	r4, [r5, #8]
 8002e60:	e7cf      	b.n	8002e02 <__swbuf_r+0x1a>
 8002e62:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <__swbuf_r+0xa0>)
 8002e64:	429c      	cmp	r4, r3
 8002e66:	bf08      	it	eq
 8002e68:	68ec      	ldreq	r4, [r5, #12]
 8002e6a:	e7ca      	b.n	8002e02 <__swbuf_r+0x1a>
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	4628      	mov	r0, r5
 8002e70:	f000 f80c 	bl	8002e8c <__swsetup_r>
 8002e74:	2800      	cmp	r0, #0
 8002e76:	d0cb      	beq.n	8002e10 <__swbuf_r+0x28>
 8002e78:	f04f 37ff 	mov.w	r7, #4294967295
 8002e7c:	e7ea      	b.n	8002e54 <__swbuf_r+0x6c>
 8002e7e:	bf00      	nop
 8002e80:	08003784 	.word	0x08003784
 8002e84:	080037a4 	.word	0x080037a4
 8002e88:	08003764 	.word	0x08003764

08002e8c <__swsetup_r>:
 8002e8c:	4b32      	ldr	r3, [pc, #200]	; (8002f58 <__swsetup_r+0xcc>)
 8002e8e:	b570      	push	{r4, r5, r6, lr}
 8002e90:	681d      	ldr	r5, [r3, #0]
 8002e92:	4606      	mov	r6, r0
 8002e94:	460c      	mov	r4, r1
 8002e96:	b125      	cbz	r5, 8002ea2 <__swsetup_r+0x16>
 8002e98:	69ab      	ldr	r3, [r5, #24]
 8002e9a:	b913      	cbnz	r3, 8002ea2 <__swsetup_r+0x16>
 8002e9c:	4628      	mov	r0, r5
 8002e9e:	f000 f979 	bl	8003194 <__sinit>
 8002ea2:	4b2e      	ldr	r3, [pc, #184]	; (8002f5c <__swsetup_r+0xd0>)
 8002ea4:	429c      	cmp	r4, r3
 8002ea6:	d10f      	bne.n	8002ec8 <__swsetup_r+0x3c>
 8002ea8:	686c      	ldr	r4, [r5, #4]
 8002eaa:	89a3      	ldrh	r3, [r4, #12]
 8002eac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002eb0:	0719      	lsls	r1, r3, #28
 8002eb2:	d42c      	bmi.n	8002f0e <__swsetup_r+0x82>
 8002eb4:	06dd      	lsls	r5, r3, #27
 8002eb6:	d411      	bmi.n	8002edc <__swsetup_r+0x50>
 8002eb8:	2309      	movs	r3, #9
 8002eba:	6033      	str	r3, [r6, #0]
 8002ebc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec4:	81a3      	strh	r3, [r4, #12]
 8002ec6:	e03e      	b.n	8002f46 <__swsetup_r+0xba>
 8002ec8:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <__swsetup_r+0xd4>)
 8002eca:	429c      	cmp	r4, r3
 8002ecc:	d101      	bne.n	8002ed2 <__swsetup_r+0x46>
 8002ece:	68ac      	ldr	r4, [r5, #8]
 8002ed0:	e7eb      	b.n	8002eaa <__swsetup_r+0x1e>
 8002ed2:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <__swsetup_r+0xd8>)
 8002ed4:	429c      	cmp	r4, r3
 8002ed6:	bf08      	it	eq
 8002ed8:	68ec      	ldreq	r4, [r5, #12]
 8002eda:	e7e6      	b.n	8002eaa <__swsetup_r+0x1e>
 8002edc:	0758      	lsls	r0, r3, #29
 8002ede:	d512      	bpl.n	8002f06 <__swsetup_r+0x7a>
 8002ee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ee2:	b141      	cbz	r1, 8002ef6 <__swsetup_r+0x6a>
 8002ee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ee8:	4299      	cmp	r1, r3
 8002eea:	d002      	beq.n	8002ef2 <__swsetup_r+0x66>
 8002eec:	4630      	mov	r0, r6
 8002eee:	f000 fa57 	bl	80033a0 <_free_r>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	6363      	str	r3, [r4, #52]	; 0x34
 8002ef6:	89a3      	ldrh	r3, [r4, #12]
 8002ef8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002efc:	81a3      	strh	r3, [r4, #12]
 8002efe:	2300      	movs	r3, #0
 8002f00:	6063      	str	r3, [r4, #4]
 8002f02:	6923      	ldr	r3, [r4, #16]
 8002f04:	6023      	str	r3, [r4, #0]
 8002f06:	89a3      	ldrh	r3, [r4, #12]
 8002f08:	f043 0308 	orr.w	r3, r3, #8
 8002f0c:	81a3      	strh	r3, [r4, #12]
 8002f0e:	6923      	ldr	r3, [r4, #16]
 8002f10:	b94b      	cbnz	r3, 8002f26 <__swsetup_r+0x9a>
 8002f12:	89a3      	ldrh	r3, [r4, #12]
 8002f14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f1c:	d003      	beq.n	8002f26 <__swsetup_r+0x9a>
 8002f1e:	4621      	mov	r1, r4
 8002f20:	4630      	mov	r0, r6
 8002f22:	f000 f9fd 	bl	8003320 <__smakebuf_r>
 8002f26:	89a0      	ldrh	r0, [r4, #12]
 8002f28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f2c:	f010 0301 	ands.w	r3, r0, #1
 8002f30:	d00a      	beq.n	8002f48 <__swsetup_r+0xbc>
 8002f32:	2300      	movs	r3, #0
 8002f34:	60a3      	str	r3, [r4, #8]
 8002f36:	6963      	ldr	r3, [r4, #20]
 8002f38:	425b      	negs	r3, r3
 8002f3a:	61a3      	str	r3, [r4, #24]
 8002f3c:	6923      	ldr	r3, [r4, #16]
 8002f3e:	b943      	cbnz	r3, 8002f52 <__swsetup_r+0xc6>
 8002f40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002f44:	d1ba      	bne.n	8002ebc <__swsetup_r+0x30>
 8002f46:	bd70      	pop	{r4, r5, r6, pc}
 8002f48:	0781      	lsls	r1, r0, #30
 8002f4a:	bf58      	it	pl
 8002f4c:	6963      	ldrpl	r3, [r4, #20]
 8002f4e:	60a3      	str	r3, [r4, #8]
 8002f50:	e7f4      	b.n	8002f3c <__swsetup_r+0xb0>
 8002f52:	2000      	movs	r0, #0
 8002f54:	e7f7      	b.n	8002f46 <__swsetup_r+0xba>
 8002f56:	bf00      	nop
 8002f58:	2000000c 	.word	0x2000000c
 8002f5c:	08003784 	.word	0x08003784
 8002f60:	080037a4 	.word	0x080037a4
 8002f64:	08003764 	.word	0x08003764

08002f68 <__sflush_r>:
 8002f68:	898a      	ldrh	r2, [r1, #12]
 8002f6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6c:	4605      	mov	r5, r0
 8002f6e:	0710      	lsls	r0, r2, #28
 8002f70:	460c      	mov	r4, r1
 8002f72:	d457      	bmi.n	8003024 <__sflush_r+0xbc>
 8002f74:	684b      	ldr	r3, [r1, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	dc04      	bgt.n	8002f84 <__sflush_r+0x1c>
 8002f7a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	dc01      	bgt.n	8002f84 <__sflush_r+0x1c>
 8002f80:	2000      	movs	r0, #0
 8002f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f86:	2e00      	cmp	r6, #0
 8002f88:	d0fa      	beq.n	8002f80 <__sflush_r+0x18>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f90:	682f      	ldr	r7, [r5, #0]
 8002f92:	602b      	str	r3, [r5, #0]
 8002f94:	d032      	beq.n	8002ffc <__sflush_r+0x94>
 8002f96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f98:	89a3      	ldrh	r3, [r4, #12]
 8002f9a:	075a      	lsls	r2, r3, #29
 8002f9c:	d505      	bpl.n	8002faa <__sflush_r+0x42>
 8002f9e:	6863      	ldr	r3, [r4, #4]
 8002fa0:	1ac0      	subs	r0, r0, r3
 8002fa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fa4:	b10b      	cbz	r3, 8002faa <__sflush_r+0x42>
 8002fa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fa8:	1ac0      	subs	r0, r0, r3
 8002faa:	2300      	movs	r3, #0
 8002fac:	4602      	mov	r2, r0
 8002fae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fb0:	4628      	mov	r0, r5
 8002fb2:	6a21      	ldr	r1, [r4, #32]
 8002fb4:	47b0      	blx	r6
 8002fb6:	1c43      	adds	r3, r0, #1
 8002fb8:	89a3      	ldrh	r3, [r4, #12]
 8002fba:	d106      	bne.n	8002fca <__sflush_r+0x62>
 8002fbc:	6829      	ldr	r1, [r5, #0]
 8002fbe:	291d      	cmp	r1, #29
 8002fc0:	d82c      	bhi.n	800301c <__sflush_r+0xb4>
 8002fc2:	4a29      	ldr	r2, [pc, #164]	; (8003068 <__sflush_r+0x100>)
 8002fc4:	40ca      	lsrs	r2, r1
 8002fc6:	07d6      	lsls	r6, r2, #31
 8002fc8:	d528      	bpl.n	800301c <__sflush_r+0xb4>
 8002fca:	2200      	movs	r2, #0
 8002fcc:	6062      	str	r2, [r4, #4]
 8002fce:	6922      	ldr	r2, [r4, #16]
 8002fd0:	04d9      	lsls	r1, r3, #19
 8002fd2:	6022      	str	r2, [r4, #0]
 8002fd4:	d504      	bpl.n	8002fe0 <__sflush_r+0x78>
 8002fd6:	1c42      	adds	r2, r0, #1
 8002fd8:	d101      	bne.n	8002fde <__sflush_r+0x76>
 8002fda:	682b      	ldr	r3, [r5, #0]
 8002fdc:	b903      	cbnz	r3, 8002fe0 <__sflush_r+0x78>
 8002fde:	6560      	str	r0, [r4, #84]	; 0x54
 8002fe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fe2:	602f      	str	r7, [r5, #0]
 8002fe4:	2900      	cmp	r1, #0
 8002fe6:	d0cb      	beq.n	8002f80 <__sflush_r+0x18>
 8002fe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fec:	4299      	cmp	r1, r3
 8002fee:	d002      	beq.n	8002ff6 <__sflush_r+0x8e>
 8002ff0:	4628      	mov	r0, r5
 8002ff2:	f000 f9d5 	bl	80033a0 <_free_r>
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	6360      	str	r0, [r4, #52]	; 0x34
 8002ffa:	e7c2      	b.n	8002f82 <__sflush_r+0x1a>
 8002ffc:	6a21      	ldr	r1, [r4, #32]
 8002ffe:	2301      	movs	r3, #1
 8003000:	4628      	mov	r0, r5
 8003002:	47b0      	blx	r6
 8003004:	1c41      	adds	r1, r0, #1
 8003006:	d1c7      	bne.n	8002f98 <__sflush_r+0x30>
 8003008:	682b      	ldr	r3, [r5, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0c4      	beq.n	8002f98 <__sflush_r+0x30>
 800300e:	2b1d      	cmp	r3, #29
 8003010:	d001      	beq.n	8003016 <__sflush_r+0xae>
 8003012:	2b16      	cmp	r3, #22
 8003014:	d101      	bne.n	800301a <__sflush_r+0xb2>
 8003016:	602f      	str	r7, [r5, #0]
 8003018:	e7b2      	b.n	8002f80 <__sflush_r+0x18>
 800301a:	89a3      	ldrh	r3, [r4, #12]
 800301c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003020:	81a3      	strh	r3, [r4, #12]
 8003022:	e7ae      	b.n	8002f82 <__sflush_r+0x1a>
 8003024:	690f      	ldr	r7, [r1, #16]
 8003026:	2f00      	cmp	r7, #0
 8003028:	d0aa      	beq.n	8002f80 <__sflush_r+0x18>
 800302a:	0793      	lsls	r3, r2, #30
 800302c:	bf18      	it	ne
 800302e:	2300      	movne	r3, #0
 8003030:	680e      	ldr	r6, [r1, #0]
 8003032:	bf08      	it	eq
 8003034:	694b      	ldreq	r3, [r1, #20]
 8003036:	1bf6      	subs	r6, r6, r7
 8003038:	600f      	str	r7, [r1, #0]
 800303a:	608b      	str	r3, [r1, #8]
 800303c:	2e00      	cmp	r6, #0
 800303e:	dd9f      	ble.n	8002f80 <__sflush_r+0x18>
 8003040:	4633      	mov	r3, r6
 8003042:	463a      	mov	r2, r7
 8003044:	4628      	mov	r0, r5
 8003046:	6a21      	ldr	r1, [r4, #32]
 8003048:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800304c:	47e0      	blx	ip
 800304e:	2800      	cmp	r0, #0
 8003050:	dc06      	bgt.n	8003060 <__sflush_r+0xf8>
 8003052:	89a3      	ldrh	r3, [r4, #12]
 8003054:	f04f 30ff 	mov.w	r0, #4294967295
 8003058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800305c:	81a3      	strh	r3, [r4, #12]
 800305e:	e790      	b.n	8002f82 <__sflush_r+0x1a>
 8003060:	4407      	add	r7, r0
 8003062:	1a36      	subs	r6, r6, r0
 8003064:	e7ea      	b.n	800303c <__sflush_r+0xd4>
 8003066:	bf00      	nop
 8003068:	20400001 	.word	0x20400001

0800306c <_fflush_r>:
 800306c:	b538      	push	{r3, r4, r5, lr}
 800306e:	690b      	ldr	r3, [r1, #16]
 8003070:	4605      	mov	r5, r0
 8003072:	460c      	mov	r4, r1
 8003074:	b913      	cbnz	r3, 800307c <_fflush_r+0x10>
 8003076:	2500      	movs	r5, #0
 8003078:	4628      	mov	r0, r5
 800307a:	bd38      	pop	{r3, r4, r5, pc}
 800307c:	b118      	cbz	r0, 8003086 <_fflush_r+0x1a>
 800307e:	6983      	ldr	r3, [r0, #24]
 8003080:	b90b      	cbnz	r3, 8003086 <_fflush_r+0x1a>
 8003082:	f000 f887 	bl	8003194 <__sinit>
 8003086:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <_fflush_r+0x6c>)
 8003088:	429c      	cmp	r4, r3
 800308a:	d11b      	bne.n	80030c4 <_fflush_r+0x58>
 800308c:	686c      	ldr	r4, [r5, #4]
 800308e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0ef      	beq.n	8003076 <_fflush_r+0xa>
 8003096:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003098:	07d0      	lsls	r0, r2, #31
 800309a:	d404      	bmi.n	80030a6 <_fflush_r+0x3a>
 800309c:	0599      	lsls	r1, r3, #22
 800309e:	d402      	bmi.n	80030a6 <_fflush_r+0x3a>
 80030a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030a2:	f000 f915 	bl	80032d0 <__retarget_lock_acquire_recursive>
 80030a6:	4628      	mov	r0, r5
 80030a8:	4621      	mov	r1, r4
 80030aa:	f7ff ff5d 	bl	8002f68 <__sflush_r>
 80030ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030b0:	4605      	mov	r5, r0
 80030b2:	07da      	lsls	r2, r3, #31
 80030b4:	d4e0      	bmi.n	8003078 <_fflush_r+0xc>
 80030b6:	89a3      	ldrh	r3, [r4, #12]
 80030b8:	059b      	lsls	r3, r3, #22
 80030ba:	d4dd      	bmi.n	8003078 <_fflush_r+0xc>
 80030bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030be:	f000 f908 	bl	80032d2 <__retarget_lock_release_recursive>
 80030c2:	e7d9      	b.n	8003078 <_fflush_r+0xc>
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <_fflush_r+0x70>)
 80030c6:	429c      	cmp	r4, r3
 80030c8:	d101      	bne.n	80030ce <_fflush_r+0x62>
 80030ca:	68ac      	ldr	r4, [r5, #8]
 80030cc:	e7df      	b.n	800308e <_fflush_r+0x22>
 80030ce:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <_fflush_r+0x74>)
 80030d0:	429c      	cmp	r4, r3
 80030d2:	bf08      	it	eq
 80030d4:	68ec      	ldreq	r4, [r5, #12]
 80030d6:	e7da      	b.n	800308e <_fflush_r+0x22>
 80030d8:	08003784 	.word	0x08003784
 80030dc:	080037a4 	.word	0x080037a4
 80030e0:	08003764 	.word	0x08003764

080030e4 <std>:
 80030e4:	2300      	movs	r3, #0
 80030e6:	b510      	push	{r4, lr}
 80030e8:	4604      	mov	r4, r0
 80030ea:	e9c0 3300 	strd	r3, r3, [r0]
 80030ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030f2:	6083      	str	r3, [r0, #8]
 80030f4:	8181      	strh	r1, [r0, #12]
 80030f6:	6643      	str	r3, [r0, #100]	; 0x64
 80030f8:	81c2      	strh	r2, [r0, #14]
 80030fa:	6183      	str	r3, [r0, #24]
 80030fc:	4619      	mov	r1, r3
 80030fe:	2208      	movs	r2, #8
 8003100:	305c      	adds	r0, #92	; 0x5c
 8003102:	f7ff fdf3 	bl	8002cec <memset>
 8003106:	4b05      	ldr	r3, [pc, #20]	; (800311c <std+0x38>)
 8003108:	6224      	str	r4, [r4, #32]
 800310a:	6263      	str	r3, [r4, #36]	; 0x24
 800310c:	4b04      	ldr	r3, [pc, #16]	; (8003120 <std+0x3c>)
 800310e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003110:	4b04      	ldr	r3, [pc, #16]	; (8003124 <std+0x40>)
 8003112:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003114:	4b04      	ldr	r3, [pc, #16]	; (8003128 <std+0x44>)
 8003116:	6323      	str	r3, [r4, #48]	; 0x30
 8003118:	bd10      	pop	{r4, pc}
 800311a:	bf00      	nop
 800311c:	08003579 	.word	0x08003579
 8003120:	0800359b 	.word	0x0800359b
 8003124:	080035d3 	.word	0x080035d3
 8003128:	080035f7 	.word	0x080035f7

0800312c <_cleanup_r>:
 800312c:	4901      	ldr	r1, [pc, #4]	; (8003134 <_cleanup_r+0x8>)
 800312e:	f000 b8af 	b.w	8003290 <_fwalk_reent>
 8003132:	bf00      	nop
 8003134:	0800306d 	.word	0x0800306d

08003138 <__sfmoreglue>:
 8003138:	2268      	movs	r2, #104	; 0x68
 800313a:	b570      	push	{r4, r5, r6, lr}
 800313c:	1e4d      	subs	r5, r1, #1
 800313e:	4355      	muls	r5, r2
 8003140:	460e      	mov	r6, r1
 8003142:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003146:	f000 f993 	bl	8003470 <_malloc_r>
 800314a:	4604      	mov	r4, r0
 800314c:	b140      	cbz	r0, 8003160 <__sfmoreglue+0x28>
 800314e:	2100      	movs	r1, #0
 8003150:	e9c0 1600 	strd	r1, r6, [r0]
 8003154:	300c      	adds	r0, #12
 8003156:	60a0      	str	r0, [r4, #8]
 8003158:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800315c:	f7ff fdc6 	bl	8002cec <memset>
 8003160:	4620      	mov	r0, r4
 8003162:	bd70      	pop	{r4, r5, r6, pc}

08003164 <__sfp_lock_acquire>:
 8003164:	4801      	ldr	r0, [pc, #4]	; (800316c <__sfp_lock_acquire+0x8>)
 8003166:	f000 b8b3 	b.w	80032d0 <__retarget_lock_acquire_recursive>
 800316a:	bf00      	nop
 800316c:	20000225 	.word	0x20000225

08003170 <__sfp_lock_release>:
 8003170:	4801      	ldr	r0, [pc, #4]	; (8003178 <__sfp_lock_release+0x8>)
 8003172:	f000 b8ae 	b.w	80032d2 <__retarget_lock_release_recursive>
 8003176:	bf00      	nop
 8003178:	20000225 	.word	0x20000225

0800317c <__sinit_lock_acquire>:
 800317c:	4801      	ldr	r0, [pc, #4]	; (8003184 <__sinit_lock_acquire+0x8>)
 800317e:	f000 b8a7 	b.w	80032d0 <__retarget_lock_acquire_recursive>
 8003182:	bf00      	nop
 8003184:	20000226 	.word	0x20000226

08003188 <__sinit_lock_release>:
 8003188:	4801      	ldr	r0, [pc, #4]	; (8003190 <__sinit_lock_release+0x8>)
 800318a:	f000 b8a2 	b.w	80032d2 <__retarget_lock_release_recursive>
 800318e:	bf00      	nop
 8003190:	20000226 	.word	0x20000226

08003194 <__sinit>:
 8003194:	b510      	push	{r4, lr}
 8003196:	4604      	mov	r4, r0
 8003198:	f7ff fff0 	bl	800317c <__sinit_lock_acquire>
 800319c:	69a3      	ldr	r3, [r4, #24]
 800319e:	b11b      	cbz	r3, 80031a8 <__sinit+0x14>
 80031a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031a4:	f7ff bff0 	b.w	8003188 <__sinit_lock_release>
 80031a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80031ac:	6523      	str	r3, [r4, #80]	; 0x50
 80031ae:	4b13      	ldr	r3, [pc, #76]	; (80031fc <__sinit+0x68>)
 80031b0:	4a13      	ldr	r2, [pc, #76]	; (8003200 <__sinit+0x6c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80031b6:	42a3      	cmp	r3, r4
 80031b8:	bf08      	it	eq
 80031ba:	2301      	moveq	r3, #1
 80031bc:	4620      	mov	r0, r4
 80031be:	bf08      	it	eq
 80031c0:	61a3      	streq	r3, [r4, #24]
 80031c2:	f000 f81f 	bl	8003204 <__sfp>
 80031c6:	6060      	str	r0, [r4, #4]
 80031c8:	4620      	mov	r0, r4
 80031ca:	f000 f81b 	bl	8003204 <__sfp>
 80031ce:	60a0      	str	r0, [r4, #8]
 80031d0:	4620      	mov	r0, r4
 80031d2:	f000 f817 	bl	8003204 <__sfp>
 80031d6:	2200      	movs	r2, #0
 80031d8:	2104      	movs	r1, #4
 80031da:	60e0      	str	r0, [r4, #12]
 80031dc:	6860      	ldr	r0, [r4, #4]
 80031de:	f7ff ff81 	bl	80030e4 <std>
 80031e2:	2201      	movs	r2, #1
 80031e4:	2109      	movs	r1, #9
 80031e6:	68a0      	ldr	r0, [r4, #8]
 80031e8:	f7ff ff7c 	bl	80030e4 <std>
 80031ec:	2202      	movs	r2, #2
 80031ee:	2112      	movs	r1, #18
 80031f0:	68e0      	ldr	r0, [r4, #12]
 80031f2:	f7ff ff77 	bl	80030e4 <std>
 80031f6:	2301      	movs	r3, #1
 80031f8:	61a3      	str	r3, [r4, #24]
 80031fa:	e7d1      	b.n	80031a0 <__sinit+0xc>
 80031fc:	08003760 	.word	0x08003760
 8003200:	0800312d 	.word	0x0800312d

08003204 <__sfp>:
 8003204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003206:	4607      	mov	r7, r0
 8003208:	f7ff ffac 	bl	8003164 <__sfp_lock_acquire>
 800320c:	4b1e      	ldr	r3, [pc, #120]	; (8003288 <__sfp+0x84>)
 800320e:	681e      	ldr	r6, [r3, #0]
 8003210:	69b3      	ldr	r3, [r6, #24]
 8003212:	b913      	cbnz	r3, 800321a <__sfp+0x16>
 8003214:	4630      	mov	r0, r6
 8003216:	f7ff ffbd 	bl	8003194 <__sinit>
 800321a:	3648      	adds	r6, #72	; 0x48
 800321c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003220:	3b01      	subs	r3, #1
 8003222:	d503      	bpl.n	800322c <__sfp+0x28>
 8003224:	6833      	ldr	r3, [r6, #0]
 8003226:	b30b      	cbz	r3, 800326c <__sfp+0x68>
 8003228:	6836      	ldr	r6, [r6, #0]
 800322a:	e7f7      	b.n	800321c <__sfp+0x18>
 800322c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003230:	b9d5      	cbnz	r5, 8003268 <__sfp+0x64>
 8003232:	4b16      	ldr	r3, [pc, #88]	; (800328c <__sfp+0x88>)
 8003234:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003238:	60e3      	str	r3, [r4, #12]
 800323a:	6665      	str	r5, [r4, #100]	; 0x64
 800323c:	f000 f847 	bl	80032ce <__retarget_lock_init_recursive>
 8003240:	f7ff ff96 	bl	8003170 <__sfp_lock_release>
 8003244:	2208      	movs	r2, #8
 8003246:	4629      	mov	r1, r5
 8003248:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800324c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003250:	6025      	str	r5, [r4, #0]
 8003252:	61a5      	str	r5, [r4, #24]
 8003254:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003258:	f7ff fd48 	bl	8002cec <memset>
 800325c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003260:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003264:	4620      	mov	r0, r4
 8003266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003268:	3468      	adds	r4, #104	; 0x68
 800326a:	e7d9      	b.n	8003220 <__sfp+0x1c>
 800326c:	2104      	movs	r1, #4
 800326e:	4638      	mov	r0, r7
 8003270:	f7ff ff62 	bl	8003138 <__sfmoreglue>
 8003274:	4604      	mov	r4, r0
 8003276:	6030      	str	r0, [r6, #0]
 8003278:	2800      	cmp	r0, #0
 800327a:	d1d5      	bne.n	8003228 <__sfp+0x24>
 800327c:	f7ff ff78 	bl	8003170 <__sfp_lock_release>
 8003280:	230c      	movs	r3, #12
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	e7ee      	b.n	8003264 <__sfp+0x60>
 8003286:	bf00      	nop
 8003288:	08003760 	.word	0x08003760
 800328c:	ffff0001 	.word	0xffff0001

08003290 <_fwalk_reent>:
 8003290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003294:	4606      	mov	r6, r0
 8003296:	4688      	mov	r8, r1
 8003298:	2700      	movs	r7, #0
 800329a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800329e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032a2:	f1b9 0901 	subs.w	r9, r9, #1
 80032a6:	d505      	bpl.n	80032b4 <_fwalk_reent+0x24>
 80032a8:	6824      	ldr	r4, [r4, #0]
 80032aa:	2c00      	cmp	r4, #0
 80032ac:	d1f7      	bne.n	800329e <_fwalk_reent+0xe>
 80032ae:	4638      	mov	r0, r7
 80032b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032b4:	89ab      	ldrh	r3, [r5, #12]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d907      	bls.n	80032ca <_fwalk_reent+0x3a>
 80032ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032be:	3301      	adds	r3, #1
 80032c0:	d003      	beq.n	80032ca <_fwalk_reent+0x3a>
 80032c2:	4629      	mov	r1, r5
 80032c4:	4630      	mov	r0, r6
 80032c6:	47c0      	blx	r8
 80032c8:	4307      	orrs	r7, r0
 80032ca:	3568      	adds	r5, #104	; 0x68
 80032cc:	e7e9      	b.n	80032a2 <_fwalk_reent+0x12>

080032ce <__retarget_lock_init_recursive>:
 80032ce:	4770      	bx	lr

080032d0 <__retarget_lock_acquire_recursive>:
 80032d0:	4770      	bx	lr

080032d2 <__retarget_lock_release_recursive>:
 80032d2:	4770      	bx	lr

080032d4 <__swhatbuf_r>:
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	460e      	mov	r6, r1
 80032d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032dc:	4614      	mov	r4, r2
 80032de:	2900      	cmp	r1, #0
 80032e0:	461d      	mov	r5, r3
 80032e2:	b096      	sub	sp, #88	; 0x58
 80032e4:	da08      	bge.n	80032f8 <__swhatbuf_r+0x24>
 80032e6:	2200      	movs	r2, #0
 80032e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80032ec:	602a      	str	r2, [r5, #0]
 80032ee:	061a      	lsls	r2, r3, #24
 80032f0:	d410      	bmi.n	8003314 <__swhatbuf_r+0x40>
 80032f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032f6:	e00e      	b.n	8003316 <__swhatbuf_r+0x42>
 80032f8:	466a      	mov	r2, sp
 80032fa:	f000 f9a3 	bl	8003644 <_fstat_r>
 80032fe:	2800      	cmp	r0, #0
 8003300:	dbf1      	blt.n	80032e6 <__swhatbuf_r+0x12>
 8003302:	9a01      	ldr	r2, [sp, #4]
 8003304:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003308:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800330c:	425a      	negs	r2, r3
 800330e:	415a      	adcs	r2, r3
 8003310:	602a      	str	r2, [r5, #0]
 8003312:	e7ee      	b.n	80032f2 <__swhatbuf_r+0x1e>
 8003314:	2340      	movs	r3, #64	; 0x40
 8003316:	2000      	movs	r0, #0
 8003318:	6023      	str	r3, [r4, #0]
 800331a:	b016      	add	sp, #88	; 0x58
 800331c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003320 <__smakebuf_r>:
 8003320:	898b      	ldrh	r3, [r1, #12]
 8003322:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003324:	079d      	lsls	r5, r3, #30
 8003326:	4606      	mov	r6, r0
 8003328:	460c      	mov	r4, r1
 800332a:	d507      	bpl.n	800333c <__smakebuf_r+0x1c>
 800332c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003330:	6023      	str	r3, [r4, #0]
 8003332:	6123      	str	r3, [r4, #16]
 8003334:	2301      	movs	r3, #1
 8003336:	6163      	str	r3, [r4, #20]
 8003338:	b002      	add	sp, #8
 800333a:	bd70      	pop	{r4, r5, r6, pc}
 800333c:	466a      	mov	r2, sp
 800333e:	ab01      	add	r3, sp, #4
 8003340:	f7ff ffc8 	bl	80032d4 <__swhatbuf_r>
 8003344:	9900      	ldr	r1, [sp, #0]
 8003346:	4605      	mov	r5, r0
 8003348:	4630      	mov	r0, r6
 800334a:	f000 f891 	bl	8003470 <_malloc_r>
 800334e:	b948      	cbnz	r0, 8003364 <__smakebuf_r+0x44>
 8003350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003354:	059a      	lsls	r2, r3, #22
 8003356:	d4ef      	bmi.n	8003338 <__smakebuf_r+0x18>
 8003358:	f023 0303 	bic.w	r3, r3, #3
 800335c:	f043 0302 	orr.w	r3, r3, #2
 8003360:	81a3      	strh	r3, [r4, #12]
 8003362:	e7e3      	b.n	800332c <__smakebuf_r+0xc>
 8003364:	4b0d      	ldr	r3, [pc, #52]	; (800339c <__smakebuf_r+0x7c>)
 8003366:	62b3      	str	r3, [r6, #40]	; 0x28
 8003368:	89a3      	ldrh	r3, [r4, #12]
 800336a:	6020      	str	r0, [r4, #0]
 800336c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003370:	81a3      	strh	r3, [r4, #12]
 8003372:	9b00      	ldr	r3, [sp, #0]
 8003374:	6120      	str	r0, [r4, #16]
 8003376:	6163      	str	r3, [r4, #20]
 8003378:	9b01      	ldr	r3, [sp, #4]
 800337a:	b15b      	cbz	r3, 8003394 <__smakebuf_r+0x74>
 800337c:	4630      	mov	r0, r6
 800337e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003382:	f000 f971 	bl	8003668 <_isatty_r>
 8003386:	b128      	cbz	r0, 8003394 <__smakebuf_r+0x74>
 8003388:	89a3      	ldrh	r3, [r4, #12]
 800338a:	f023 0303 	bic.w	r3, r3, #3
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	81a3      	strh	r3, [r4, #12]
 8003394:	89a0      	ldrh	r0, [r4, #12]
 8003396:	4305      	orrs	r5, r0
 8003398:	81a5      	strh	r5, [r4, #12]
 800339a:	e7cd      	b.n	8003338 <__smakebuf_r+0x18>
 800339c:	0800312d 	.word	0x0800312d

080033a0 <_free_r>:
 80033a0:	b538      	push	{r3, r4, r5, lr}
 80033a2:	4605      	mov	r5, r0
 80033a4:	2900      	cmp	r1, #0
 80033a6:	d040      	beq.n	800342a <_free_r+0x8a>
 80033a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033ac:	1f0c      	subs	r4, r1, #4
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	bfb8      	it	lt
 80033b2:	18e4      	addlt	r4, r4, r3
 80033b4:	f000 f97a 	bl	80036ac <__malloc_lock>
 80033b8:	4a1c      	ldr	r2, [pc, #112]	; (800342c <_free_r+0x8c>)
 80033ba:	6813      	ldr	r3, [r2, #0]
 80033bc:	b933      	cbnz	r3, 80033cc <_free_r+0x2c>
 80033be:	6063      	str	r3, [r4, #4]
 80033c0:	6014      	str	r4, [r2, #0]
 80033c2:	4628      	mov	r0, r5
 80033c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033c8:	f000 b976 	b.w	80036b8 <__malloc_unlock>
 80033cc:	42a3      	cmp	r3, r4
 80033ce:	d908      	bls.n	80033e2 <_free_r+0x42>
 80033d0:	6820      	ldr	r0, [r4, #0]
 80033d2:	1821      	adds	r1, r4, r0
 80033d4:	428b      	cmp	r3, r1
 80033d6:	bf01      	itttt	eq
 80033d8:	6819      	ldreq	r1, [r3, #0]
 80033da:	685b      	ldreq	r3, [r3, #4]
 80033dc:	1809      	addeq	r1, r1, r0
 80033de:	6021      	streq	r1, [r4, #0]
 80033e0:	e7ed      	b.n	80033be <_free_r+0x1e>
 80033e2:	461a      	mov	r2, r3
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	b10b      	cbz	r3, 80033ec <_free_r+0x4c>
 80033e8:	42a3      	cmp	r3, r4
 80033ea:	d9fa      	bls.n	80033e2 <_free_r+0x42>
 80033ec:	6811      	ldr	r1, [r2, #0]
 80033ee:	1850      	adds	r0, r2, r1
 80033f0:	42a0      	cmp	r0, r4
 80033f2:	d10b      	bne.n	800340c <_free_r+0x6c>
 80033f4:	6820      	ldr	r0, [r4, #0]
 80033f6:	4401      	add	r1, r0
 80033f8:	1850      	adds	r0, r2, r1
 80033fa:	4283      	cmp	r3, r0
 80033fc:	6011      	str	r1, [r2, #0]
 80033fe:	d1e0      	bne.n	80033c2 <_free_r+0x22>
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	4401      	add	r1, r0
 8003406:	6011      	str	r1, [r2, #0]
 8003408:	6053      	str	r3, [r2, #4]
 800340a:	e7da      	b.n	80033c2 <_free_r+0x22>
 800340c:	d902      	bls.n	8003414 <_free_r+0x74>
 800340e:	230c      	movs	r3, #12
 8003410:	602b      	str	r3, [r5, #0]
 8003412:	e7d6      	b.n	80033c2 <_free_r+0x22>
 8003414:	6820      	ldr	r0, [r4, #0]
 8003416:	1821      	adds	r1, r4, r0
 8003418:	428b      	cmp	r3, r1
 800341a:	bf01      	itttt	eq
 800341c:	6819      	ldreq	r1, [r3, #0]
 800341e:	685b      	ldreq	r3, [r3, #4]
 8003420:	1809      	addeq	r1, r1, r0
 8003422:	6021      	streq	r1, [r4, #0]
 8003424:	6063      	str	r3, [r4, #4]
 8003426:	6054      	str	r4, [r2, #4]
 8003428:	e7cb      	b.n	80033c2 <_free_r+0x22>
 800342a:	bd38      	pop	{r3, r4, r5, pc}
 800342c:	20000228 	.word	0x20000228

08003430 <sbrk_aligned>:
 8003430:	b570      	push	{r4, r5, r6, lr}
 8003432:	4e0e      	ldr	r6, [pc, #56]	; (800346c <sbrk_aligned+0x3c>)
 8003434:	460c      	mov	r4, r1
 8003436:	6831      	ldr	r1, [r6, #0]
 8003438:	4605      	mov	r5, r0
 800343a:	b911      	cbnz	r1, 8003442 <sbrk_aligned+0x12>
 800343c:	f000 f88c 	bl	8003558 <_sbrk_r>
 8003440:	6030      	str	r0, [r6, #0]
 8003442:	4621      	mov	r1, r4
 8003444:	4628      	mov	r0, r5
 8003446:	f000 f887 	bl	8003558 <_sbrk_r>
 800344a:	1c43      	adds	r3, r0, #1
 800344c:	d00a      	beq.n	8003464 <sbrk_aligned+0x34>
 800344e:	1cc4      	adds	r4, r0, #3
 8003450:	f024 0403 	bic.w	r4, r4, #3
 8003454:	42a0      	cmp	r0, r4
 8003456:	d007      	beq.n	8003468 <sbrk_aligned+0x38>
 8003458:	1a21      	subs	r1, r4, r0
 800345a:	4628      	mov	r0, r5
 800345c:	f000 f87c 	bl	8003558 <_sbrk_r>
 8003460:	3001      	adds	r0, #1
 8003462:	d101      	bne.n	8003468 <sbrk_aligned+0x38>
 8003464:	f04f 34ff 	mov.w	r4, #4294967295
 8003468:	4620      	mov	r0, r4
 800346a:	bd70      	pop	{r4, r5, r6, pc}
 800346c:	2000022c 	.word	0x2000022c

08003470 <_malloc_r>:
 8003470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003474:	1ccd      	adds	r5, r1, #3
 8003476:	f025 0503 	bic.w	r5, r5, #3
 800347a:	3508      	adds	r5, #8
 800347c:	2d0c      	cmp	r5, #12
 800347e:	bf38      	it	cc
 8003480:	250c      	movcc	r5, #12
 8003482:	2d00      	cmp	r5, #0
 8003484:	4607      	mov	r7, r0
 8003486:	db01      	blt.n	800348c <_malloc_r+0x1c>
 8003488:	42a9      	cmp	r1, r5
 800348a:	d905      	bls.n	8003498 <_malloc_r+0x28>
 800348c:	230c      	movs	r3, #12
 800348e:	2600      	movs	r6, #0
 8003490:	603b      	str	r3, [r7, #0]
 8003492:	4630      	mov	r0, r6
 8003494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003498:	4e2e      	ldr	r6, [pc, #184]	; (8003554 <_malloc_r+0xe4>)
 800349a:	f000 f907 	bl	80036ac <__malloc_lock>
 800349e:	6833      	ldr	r3, [r6, #0]
 80034a0:	461c      	mov	r4, r3
 80034a2:	bb34      	cbnz	r4, 80034f2 <_malloc_r+0x82>
 80034a4:	4629      	mov	r1, r5
 80034a6:	4638      	mov	r0, r7
 80034a8:	f7ff ffc2 	bl	8003430 <sbrk_aligned>
 80034ac:	1c43      	adds	r3, r0, #1
 80034ae:	4604      	mov	r4, r0
 80034b0:	d14d      	bne.n	800354e <_malloc_r+0xde>
 80034b2:	6834      	ldr	r4, [r6, #0]
 80034b4:	4626      	mov	r6, r4
 80034b6:	2e00      	cmp	r6, #0
 80034b8:	d140      	bne.n	800353c <_malloc_r+0xcc>
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	4631      	mov	r1, r6
 80034be:	4638      	mov	r0, r7
 80034c0:	eb04 0803 	add.w	r8, r4, r3
 80034c4:	f000 f848 	bl	8003558 <_sbrk_r>
 80034c8:	4580      	cmp	r8, r0
 80034ca:	d13a      	bne.n	8003542 <_malloc_r+0xd2>
 80034cc:	6821      	ldr	r1, [r4, #0]
 80034ce:	3503      	adds	r5, #3
 80034d0:	1a6d      	subs	r5, r5, r1
 80034d2:	f025 0503 	bic.w	r5, r5, #3
 80034d6:	3508      	adds	r5, #8
 80034d8:	2d0c      	cmp	r5, #12
 80034da:	bf38      	it	cc
 80034dc:	250c      	movcc	r5, #12
 80034de:	4638      	mov	r0, r7
 80034e0:	4629      	mov	r1, r5
 80034e2:	f7ff ffa5 	bl	8003430 <sbrk_aligned>
 80034e6:	3001      	adds	r0, #1
 80034e8:	d02b      	beq.n	8003542 <_malloc_r+0xd2>
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	442b      	add	r3, r5
 80034ee:	6023      	str	r3, [r4, #0]
 80034f0:	e00e      	b.n	8003510 <_malloc_r+0xa0>
 80034f2:	6822      	ldr	r2, [r4, #0]
 80034f4:	1b52      	subs	r2, r2, r5
 80034f6:	d41e      	bmi.n	8003536 <_malloc_r+0xc6>
 80034f8:	2a0b      	cmp	r2, #11
 80034fa:	d916      	bls.n	800352a <_malloc_r+0xba>
 80034fc:	1961      	adds	r1, r4, r5
 80034fe:	42a3      	cmp	r3, r4
 8003500:	6025      	str	r5, [r4, #0]
 8003502:	bf18      	it	ne
 8003504:	6059      	strne	r1, [r3, #4]
 8003506:	6863      	ldr	r3, [r4, #4]
 8003508:	bf08      	it	eq
 800350a:	6031      	streq	r1, [r6, #0]
 800350c:	5162      	str	r2, [r4, r5]
 800350e:	604b      	str	r3, [r1, #4]
 8003510:	4638      	mov	r0, r7
 8003512:	f104 060b 	add.w	r6, r4, #11
 8003516:	f000 f8cf 	bl	80036b8 <__malloc_unlock>
 800351a:	f026 0607 	bic.w	r6, r6, #7
 800351e:	1d23      	adds	r3, r4, #4
 8003520:	1af2      	subs	r2, r6, r3
 8003522:	d0b6      	beq.n	8003492 <_malloc_r+0x22>
 8003524:	1b9b      	subs	r3, r3, r6
 8003526:	50a3      	str	r3, [r4, r2]
 8003528:	e7b3      	b.n	8003492 <_malloc_r+0x22>
 800352a:	6862      	ldr	r2, [r4, #4]
 800352c:	42a3      	cmp	r3, r4
 800352e:	bf0c      	ite	eq
 8003530:	6032      	streq	r2, [r6, #0]
 8003532:	605a      	strne	r2, [r3, #4]
 8003534:	e7ec      	b.n	8003510 <_malloc_r+0xa0>
 8003536:	4623      	mov	r3, r4
 8003538:	6864      	ldr	r4, [r4, #4]
 800353a:	e7b2      	b.n	80034a2 <_malloc_r+0x32>
 800353c:	4634      	mov	r4, r6
 800353e:	6876      	ldr	r6, [r6, #4]
 8003540:	e7b9      	b.n	80034b6 <_malloc_r+0x46>
 8003542:	230c      	movs	r3, #12
 8003544:	4638      	mov	r0, r7
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	f000 f8b6 	bl	80036b8 <__malloc_unlock>
 800354c:	e7a1      	b.n	8003492 <_malloc_r+0x22>
 800354e:	6025      	str	r5, [r4, #0]
 8003550:	e7de      	b.n	8003510 <_malloc_r+0xa0>
 8003552:	bf00      	nop
 8003554:	20000228 	.word	0x20000228

08003558 <_sbrk_r>:
 8003558:	b538      	push	{r3, r4, r5, lr}
 800355a:	2300      	movs	r3, #0
 800355c:	4d05      	ldr	r5, [pc, #20]	; (8003574 <_sbrk_r+0x1c>)
 800355e:	4604      	mov	r4, r0
 8003560:	4608      	mov	r0, r1
 8003562:	602b      	str	r3, [r5, #0]
 8003564:	f7fd f9ee 	bl	8000944 <_sbrk>
 8003568:	1c43      	adds	r3, r0, #1
 800356a:	d102      	bne.n	8003572 <_sbrk_r+0x1a>
 800356c:	682b      	ldr	r3, [r5, #0]
 800356e:	b103      	cbz	r3, 8003572 <_sbrk_r+0x1a>
 8003570:	6023      	str	r3, [r4, #0]
 8003572:	bd38      	pop	{r3, r4, r5, pc}
 8003574:	20000230 	.word	0x20000230

08003578 <__sread>:
 8003578:	b510      	push	{r4, lr}
 800357a:	460c      	mov	r4, r1
 800357c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003580:	f000 f8a0 	bl	80036c4 <_read_r>
 8003584:	2800      	cmp	r0, #0
 8003586:	bfab      	itete	ge
 8003588:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800358a:	89a3      	ldrhlt	r3, [r4, #12]
 800358c:	181b      	addge	r3, r3, r0
 800358e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003592:	bfac      	ite	ge
 8003594:	6563      	strge	r3, [r4, #84]	; 0x54
 8003596:	81a3      	strhlt	r3, [r4, #12]
 8003598:	bd10      	pop	{r4, pc}

0800359a <__swrite>:
 800359a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800359e:	461f      	mov	r7, r3
 80035a0:	898b      	ldrh	r3, [r1, #12]
 80035a2:	4605      	mov	r5, r0
 80035a4:	05db      	lsls	r3, r3, #23
 80035a6:	460c      	mov	r4, r1
 80035a8:	4616      	mov	r6, r2
 80035aa:	d505      	bpl.n	80035b8 <__swrite+0x1e>
 80035ac:	2302      	movs	r3, #2
 80035ae:	2200      	movs	r2, #0
 80035b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035b4:	f000 f868 	bl	8003688 <_lseek_r>
 80035b8:	89a3      	ldrh	r3, [r4, #12]
 80035ba:	4632      	mov	r2, r6
 80035bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035c0:	81a3      	strh	r3, [r4, #12]
 80035c2:	4628      	mov	r0, r5
 80035c4:	463b      	mov	r3, r7
 80035c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035ce:	f000 b817 	b.w	8003600 <_write_r>

080035d2 <__sseek>:
 80035d2:	b510      	push	{r4, lr}
 80035d4:	460c      	mov	r4, r1
 80035d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035da:	f000 f855 	bl	8003688 <_lseek_r>
 80035de:	1c43      	adds	r3, r0, #1
 80035e0:	89a3      	ldrh	r3, [r4, #12]
 80035e2:	bf15      	itete	ne
 80035e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80035e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80035ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80035ee:	81a3      	strheq	r3, [r4, #12]
 80035f0:	bf18      	it	ne
 80035f2:	81a3      	strhne	r3, [r4, #12]
 80035f4:	bd10      	pop	{r4, pc}

080035f6 <__sclose>:
 80035f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035fa:	f000 b813 	b.w	8003624 <_close_r>
	...

08003600 <_write_r>:
 8003600:	b538      	push	{r3, r4, r5, lr}
 8003602:	4604      	mov	r4, r0
 8003604:	4608      	mov	r0, r1
 8003606:	4611      	mov	r1, r2
 8003608:	2200      	movs	r2, #0
 800360a:	4d05      	ldr	r5, [pc, #20]	; (8003620 <_write_r+0x20>)
 800360c:	602a      	str	r2, [r5, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	f7fc ffc4 	bl	800059c <_write>
 8003614:	1c43      	adds	r3, r0, #1
 8003616:	d102      	bne.n	800361e <_write_r+0x1e>
 8003618:	682b      	ldr	r3, [r5, #0]
 800361a:	b103      	cbz	r3, 800361e <_write_r+0x1e>
 800361c:	6023      	str	r3, [r4, #0]
 800361e:	bd38      	pop	{r3, r4, r5, pc}
 8003620:	20000230 	.word	0x20000230

08003624 <_close_r>:
 8003624:	b538      	push	{r3, r4, r5, lr}
 8003626:	2300      	movs	r3, #0
 8003628:	4d05      	ldr	r5, [pc, #20]	; (8003640 <_close_r+0x1c>)
 800362a:	4604      	mov	r4, r0
 800362c:	4608      	mov	r0, r1
 800362e:	602b      	str	r3, [r5, #0]
 8003630:	f7fd f957 	bl	80008e2 <_close>
 8003634:	1c43      	adds	r3, r0, #1
 8003636:	d102      	bne.n	800363e <_close_r+0x1a>
 8003638:	682b      	ldr	r3, [r5, #0]
 800363a:	b103      	cbz	r3, 800363e <_close_r+0x1a>
 800363c:	6023      	str	r3, [r4, #0]
 800363e:	bd38      	pop	{r3, r4, r5, pc}
 8003640:	20000230 	.word	0x20000230

08003644 <_fstat_r>:
 8003644:	b538      	push	{r3, r4, r5, lr}
 8003646:	2300      	movs	r3, #0
 8003648:	4d06      	ldr	r5, [pc, #24]	; (8003664 <_fstat_r+0x20>)
 800364a:	4604      	mov	r4, r0
 800364c:	4608      	mov	r0, r1
 800364e:	4611      	mov	r1, r2
 8003650:	602b      	str	r3, [r5, #0]
 8003652:	f7fd f951 	bl	80008f8 <_fstat>
 8003656:	1c43      	adds	r3, r0, #1
 8003658:	d102      	bne.n	8003660 <_fstat_r+0x1c>
 800365a:	682b      	ldr	r3, [r5, #0]
 800365c:	b103      	cbz	r3, 8003660 <_fstat_r+0x1c>
 800365e:	6023      	str	r3, [r4, #0]
 8003660:	bd38      	pop	{r3, r4, r5, pc}
 8003662:	bf00      	nop
 8003664:	20000230 	.word	0x20000230

08003668 <_isatty_r>:
 8003668:	b538      	push	{r3, r4, r5, lr}
 800366a:	2300      	movs	r3, #0
 800366c:	4d05      	ldr	r5, [pc, #20]	; (8003684 <_isatty_r+0x1c>)
 800366e:	4604      	mov	r4, r0
 8003670:	4608      	mov	r0, r1
 8003672:	602b      	str	r3, [r5, #0]
 8003674:	f7fd f94f 	bl	8000916 <_isatty>
 8003678:	1c43      	adds	r3, r0, #1
 800367a:	d102      	bne.n	8003682 <_isatty_r+0x1a>
 800367c:	682b      	ldr	r3, [r5, #0]
 800367e:	b103      	cbz	r3, 8003682 <_isatty_r+0x1a>
 8003680:	6023      	str	r3, [r4, #0]
 8003682:	bd38      	pop	{r3, r4, r5, pc}
 8003684:	20000230 	.word	0x20000230

08003688 <_lseek_r>:
 8003688:	b538      	push	{r3, r4, r5, lr}
 800368a:	4604      	mov	r4, r0
 800368c:	4608      	mov	r0, r1
 800368e:	4611      	mov	r1, r2
 8003690:	2200      	movs	r2, #0
 8003692:	4d05      	ldr	r5, [pc, #20]	; (80036a8 <_lseek_r+0x20>)
 8003694:	602a      	str	r2, [r5, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	f7fd f947 	bl	800092a <_lseek>
 800369c:	1c43      	adds	r3, r0, #1
 800369e:	d102      	bne.n	80036a6 <_lseek_r+0x1e>
 80036a0:	682b      	ldr	r3, [r5, #0]
 80036a2:	b103      	cbz	r3, 80036a6 <_lseek_r+0x1e>
 80036a4:	6023      	str	r3, [r4, #0]
 80036a6:	bd38      	pop	{r3, r4, r5, pc}
 80036a8:	20000230 	.word	0x20000230

080036ac <__malloc_lock>:
 80036ac:	4801      	ldr	r0, [pc, #4]	; (80036b4 <__malloc_lock+0x8>)
 80036ae:	f7ff be0f 	b.w	80032d0 <__retarget_lock_acquire_recursive>
 80036b2:	bf00      	nop
 80036b4:	20000224 	.word	0x20000224

080036b8 <__malloc_unlock>:
 80036b8:	4801      	ldr	r0, [pc, #4]	; (80036c0 <__malloc_unlock+0x8>)
 80036ba:	f7ff be0a 	b.w	80032d2 <__retarget_lock_release_recursive>
 80036be:	bf00      	nop
 80036c0:	20000224 	.word	0x20000224

080036c4 <_read_r>:
 80036c4:	b538      	push	{r3, r4, r5, lr}
 80036c6:	4604      	mov	r4, r0
 80036c8:	4608      	mov	r0, r1
 80036ca:	4611      	mov	r1, r2
 80036cc:	2200      	movs	r2, #0
 80036ce:	4d05      	ldr	r5, [pc, #20]	; (80036e4 <_read_r+0x20>)
 80036d0:	602a      	str	r2, [r5, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	f7fd f8e8 	bl	80008a8 <_read>
 80036d8:	1c43      	adds	r3, r0, #1
 80036da:	d102      	bne.n	80036e2 <_read_r+0x1e>
 80036dc:	682b      	ldr	r3, [r5, #0]
 80036de:	b103      	cbz	r3, 80036e2 <_read_r+0x1e>
 80036e0:	6023      	str	r3, [r4, #0]
 80036e2:	bd38      	pop	{r3, r4, r5, pc}
 80036e4:	20000230 	.word	0x20000230

080036e8 <_init>:
 80036e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ea:	bf00      	nop
 80036ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ee:	bc08      	pop	{r3}
 80036f0:	469e      	mov	lr, r3
 80036f2:	4770      	bx	lr

080036f4 <_fini>:
 80036f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f6:	bf00      	nop
 80036f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036fa:	bc08      	pop	{r3}
 80036fc:	469e      	mov	lr, r3
 80036fe:	4770      	bx	lr
