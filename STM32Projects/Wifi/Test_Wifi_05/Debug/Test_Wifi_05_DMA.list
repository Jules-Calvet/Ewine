
Test_Wifi_05_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006418  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08006558  08006558  00016558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800674c  0800674c  0001674c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006754  08006754  00016754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006758  08006758  00016758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000008  0800675c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005ec  20000088  080067dc  00020088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000674  080067dc  00020674  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001705c  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003448  00000000  00000000  00037114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001660  00000000  00000000  0003a560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001508  00000000  00000000  0003bbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000239a2  00000000  00000000  0003d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015cdc  00000000  00000000  00060a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000da757  00000000  00000000  00076746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00150e9d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000063bc  00000000  00000000  00150ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000088 	.word	0x20000088
 800015c:	00000000 	.word	0x00000000
 8000160:	08006540 	.word	0x08006540

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000008c 	.word	0x2000008c
 800017c:	08006540 	.word	0x08006540

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000530:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4313      	orrs	r3, r2
 800053a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000540:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4013      	ands	r3, r2
 8000546:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000548:	68fb      	ldr	r3, [r7, #12]
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800055a:	2004      	movs	r0, #4
 800055c:	f7ff ffe2 	bl	8000524 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000560:	2001      	movs	r0, #1
 8000562:	f7ff ffdf 	bl	8000524 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2100      	movs	r1, #0
 800056a:	200c      	movs	r0, #12
 800056c:	f000 ff87 	bl	800147e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000570:	200c      	movs	r0, #12
 8000572:	f000 ff9e 	bl	80014b2 <HAL_NVIC_EnableIRQ>

}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}

0800057a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800057a:	b480      	push	{r7}
 800057c:	b085      	sub	sp, #20
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000588:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4313      	orrs	r3, r2
 8000590:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000596:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4013      	ands	r3, r2
 800059c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800059e:	68fb      	ldr	r3, [r7, #12]
}
 80005a0:	bf00      	nop
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c0:	2004      	movs	r0, #4
 80005c2:	f7ff ffda 	bl	800057a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	2002      	movs	r0, #2
 80005c8:	f7ff ffd7 	bl	800057a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005cc:	2001      	movs	r0, #1
 80005ce:	f7ff ffd4 	bl	800057a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005d2:	2008      	movs	r0, #8
 80005d4:	f7ff ffd1 	bl	800057a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2123      	movs	r1, #35	; 0x23
 80005dc:	4814      	ldr	r0, [pc, #80]	; (8000630 <MX_GPIO_Init+0x84>)
 80005de:	f001 fc25 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005e2:	2310      	movs	r3, #16
 80005e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	4619      	mov	r1, r3
 80005f2:	4810      	ldr	r0, [pc, #64]	; (8000634 <MX_GPIO_Init+0x88>)
 80005f4:	f001 faaa 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80005f8:	2323      	movs	r3, #35	; 0x23
 80005fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fc:	2301      	movs	r3, #1
 80005fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4619      	mov	r1, r3
 800060c:	4808      	ldr	r0, [pc, #32]	; (8000630 <MX_GPIO_Init+0x84>)
 800060e:	f001 fa9d 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000612:	2303      	movs	r3, #3
 8000614:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	4619      	mov	r1, r3
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <MX_GPIO_Init+0x8c>)
 8000624:	f001 fa92 	bl	8001b4c <HAL_GPIO_Init>

}
 8000628:	bf00      	nop
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	48000400 	.word	0x48000400
 8000634:	48000800 	.word	0x48000800
 8000638:	48000c00 	.word	0x48000c00

0800063c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000644:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000648:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	2b00      	cmp	r3, #0
 8000652:	d013      	beq.n	800067c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000654:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000658:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800065c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000660:	2b00      	cmp	r3, #0
 8000662:	d00b      	beq.n	800067c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000664:	e000      	b.n	8000668 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000666:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000668:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0f9      	beq.n	8000666 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000672:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800067c:	687b      	ldr	r3, [r7, #4]
}
 800067e:	4618      	mov	r0, r3
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800069a:	f023 0218 	bic.w	r2, r3, #24
 800069e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b086      	sub	sp, #24
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	60f8      	str	r0, [r7, #12]
 80006be:	60b9      	str	r1, [r7, #8]
 80006c0:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
 80006c6:	e009      	b.n	80006dc <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	60ba      	str	r2, [r7, #8]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ffb3 	bl	800063c <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	3301      	adds	r3, #1
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	697a      	ldr	r2, [r7, #20]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	dbf1      	blt.n	80006c8 <_write+0x12>
}
return len;
 80006e4:	687b      	ldr	r3, [r7, #4]
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f4:	f000 fd62 	bl	80011bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f8:	f000 f814 	bl	8000724 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006fc:	f000 f888 	bl	8000810 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f7ff ff54 	bl	80005ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000704:	f7ff ff27 	bl	8000556 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000708:	f000 fa5c 	bl	8000bc4 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 800070c:	f000 fb84 	bl	8000e18 <MX_USB_PCD_Init>
  MX_LPUART1_UART_Init();
 8000710:	f000 fa0c 	bl	8000b2c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //Wifi_Init();
  printf("StartReception : \n");
 8000714:	4802      	ldr	r0, [pc, #8]	; (8000720 <main+0x30>)
 8000716:	f004 ff95 	bl	8005644 <puts>
  StartReception();
 800071a:	f000 fc19 	bl	8000f50 <StartReception>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800071e:	e7fe      	b.n	800071e <main+0x2e>
 8000720:	08006558 	.word	0x08006558

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b09a      	sub	sp, #104	; 0x68
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2248      	movs	r2, #72	; 0x48
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f004 fef8 	bl	8005528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
 8000746:	615a      	str	r2, [r3, #20]
 8000748:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800074a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000758:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800075a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	f023 0303 	bic.w	r3, r3, #3
 8000764:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800076e:	f001 fc79 	bl	8002064 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff ff89 	bl	800068a <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	4b24      	ldr	r3, [pc, #144]	; (800080c <SystemClock_Config+0xe8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000780:	4a22      	ldr	r2, [pc, #136]	; (800080c <SystemClock_Config+0xe8>)
 8000782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b20      	ldr	r3, [pc, #128]	; (800080c <SystemClock_Config+0xe8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000794:	2327      	movs	r3, #39	; 0x27
 8000796:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800079e:	2301      	movs	r3, #1
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007a8:	2301      	movs	r3, #1
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ac:	2340      	movs	r3, #64	; 0x40
 80007ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007b0:	2300      	movs	r3, #0
 80007b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007b4:	2360      	movs	r3, #96	; 0x60
 80007b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 0320 	add.w	r3, r7, #32
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 ffe3 	bl	800278c <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80007cc:	f000 f83d 	bl	800084a <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80007d0:	236f      	movs	r3, #111	; 0x6f
 80007d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80007d4:	2302      	movs	r3, #2
 80007d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2101      	movs	r1, #1
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 fb3f 	bl	8002e74 <HAL_RCC_ClockConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80007fc:	f000 f825 	bl	800084a <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000800:	f003 f8fa 	bl	80039f8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000804:	bf00      	nop
 8000806:	3768      	adds	r7, #104	; 0x68
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	58000400 	.word	0x58000400

08000810 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b094      	sub	sp, #80	; 0x50
 8000814:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000816:	463b      	mov	r3, r7
 8000818:	2250      	movs	r2, #80	; 0x50
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f004 fe83 	bl	8005528 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000822:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000826:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000828:	2300      	movs	r3, #0
 800082a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800082c:	2300      	movs	r3, #0
 800082e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	4618      	mov	r0, r3
 8000834:	f002 ff6a 	bl	800370c <HAL_RCCEx_PeriphCLKConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800083e:	f000 f804 	bl	800084a <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000842:	bf00      	nop
 8000844:	3750      	adds	r7, #80	; 0x50
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084e:	b672      	cpsid	i
}
 8000850:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000852:	e7fe      	b.n	8000852 <Error_Handler+0x8>

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <NMI_Handler+0x4>

08000868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <HardFault_Handler+0x4>

0800086e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <MemManage_Handler+0x4>

08000874 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <BusFault_Handler+0x4>

0800087a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <UsageFault_Handler+0x4>

08000880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ae:	f000 fcdf 	bl	8001270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <DMA1_Channel2_IRQHandler+0x10>)
 80008be:	f000 fff4 	bl	80018aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200001d0 	.word	0x200001d0

080008cc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <LPUART1_IRQHandler+0x10>)
 80008d2:	f003 fa9f 	bl	8003e14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000a8 	.word	0x200000a8

080008e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	e00a      	b.n	8000908 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008f2:	f3af 8000 	nop.w
 80008f6:	4601      	mov	r1, r0
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	60ba      	str	r2, [r7, #8]
 80008fe:	b2ca      	uxtb	r2, r1
 8000900:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	3301      	adds	r3, #1
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697a      	ldr	r2, [r7, #20]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	429a      	cmp	r2, r3
 800090e:	dbf0      	blt.n	80008f2 <_read+0x12>
  }

  return len;
 8000910:	687b      	ldr	r3, [r7, #4]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <_close>:
  }
  return len;
}

int _close(int file)
{
 800091a:	b480      	push	{r7}
 800091c:	b083      	sub	sp, #12
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000926:	4618      	mov	r0, r3
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000932:	b480      	push	{r7}
 8000934:	b083      	sub	sp, #12
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
 800093a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000942:	605a      	str	r2, [r3, #4]
  return 0;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <_isatty>:

int _isatty(int file)
{
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800095a:	2301      	movs	r3, #1
}
 800095c:	4618      	mov	r0, r3
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	3714      	adds	r7, #20
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
	...

08000984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800098c:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <_sbrk+0x5c>)
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <_sbrk+0x60>)
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <_sbrk+0x64>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <_sbrk+0x68>)
 80009a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d207      	bcs.n	80009c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b4:	f004 fd8e 	bl	80054d4 <__errno>
 80009b8:	4603      	mov	r3, r0
 80009ba:	220c      	movs	r2, #12
 80009bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009be:	f04f 33ff 	mov.w	r3, #4294967295
 80009c2:	e009      	b.n	80009d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ca:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <_sbrk+0x64>)
 80009d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d6:	68fb      	ldr	r3, [r7, #12]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20030000 	.word	0x20030000
 80009e4:	00000400 	.word	0x00000400
 80009e8:	200000a4 	.word	0x200000a4
 80009ec:	20000678 	.word	0x20000678

080009f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <SystemInit+0x98>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fa:	4a23      	ldr	r2, [pc, #140]	; (8000a88 <SystemInit+0x98>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a18:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000a1c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <SystemInit+0x9c>)
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a3a:	f023 0305 	bic.w	r3, r3, #5
 8000a3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a4e:	f023 0301 	bic.w	r3, r3, #1
 8000a52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a5a:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <SystemInit+0xa0>)
 8000a5c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <SystemInit+0xa0>)
 8000a64:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00
 8000a8c:	faf6fefb 	.word	0xfaf6fefb
 8000a90:	22041000 	.word	0x22041000

08000a94 <LL_AHB2_GRP1_EnableClock>:
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000aa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ab0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
}
 8000aba:	bf00      	nop
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b085      	sub	sp, #20
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ad2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ad4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ae2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aea:	68fb      	ldr	r3, [r7, #12]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
}
 8000b1e:	bf00      	nop
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b32:	4a23      	ldr	r2, [pc, #140]	; (8000bc0 <MX_LPUART1_UART_Init+0x94>)
 8000b34:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000b36:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5c:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b62:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b74:	4811      	ldr	r0, [pc, #68]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b76:	f003 f876 	bl	8003c66 <HAL_UART_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b80:	f7ff fe63 	bl	800084a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b84:	2100      	movs	r1, #0
 8000b86:	480d      	ldr	r0, [pc, #52]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b88:	f004 fb4a 	bl	8005220 <HAL_UARTEx_SetTxFifoThreshold>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b92:	f7ff fe5a 	bl	800084a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b96:	2100      	movs	r1, #0
 8000b98:	4808      	ldr	r0, [pc, #32]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b9a:	f004 fb7f 	bl	800529c <HAL_UARTEx_SetRxFifoThreshold>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ba4:	f7ff fe51 	bl	800084a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000ba8:	4804      	ldr	r0, [pc, #16]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000baa:	f004 fb00 	bl	80051ae <HAL_UARTEx_DisableFifoMode>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bb4:	f7ff fe49 	bl	800084a <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200000a8 	.word	0x200000a8
 8000bc0:	40008000 	.word	0x40008000

08000bc4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bc8:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000bca:	4a24      	ldr	r2, [pc, #144]	; (8000c5c <MX_USART1_UART_Init+0x98>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bce:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000bd6:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bdc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bde:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000be4:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bea:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000bec:	220c      	movs	r2, #12
 8000bee:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf0:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c0e:	4812      	ldr	r0, [pc, #72]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000c10:	f003 f829 	bl	8003c66 <HAL_UART_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000c1a:	f7ff fe16 	bl	800084a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	480d      	ldr	r0, [pc, #52]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000c22:	f004 fafd 	bl	8005220 <HAL_UARTEx_SetTxFifoThreshold>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000c2c:	f7ff fe0d 	bl	800084a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c30:	2100      	movs	r1, #0
 8000c32:	4809      	ldr	r0, [pc, #36]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000c34:	f004 fb32 	bl	800529c <HAL_UARTEx_SetRxFifoThreshold>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000c3e:	f7ff fe04 	bl	800084a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000c44:	f004 fab3 	bl	80051ae <HAL_UARTEx_DisableFifoMode>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000c4e:	f7ff fdfc 	bl	800084a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000013c 	.word	0x2000013c
 8000c5c:	40013800 	.word	0x40013800

08000c60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b09c      	sub	sp, #112	; 0x70
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	2250      	movs	r2, #80	; 0x50
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f004 fc51 	bl	8005528 <memset>
  if(uartHandle->Instance==LPUART1)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a44      	ldr	r2, [pc, #272]	; (8000d9c <HAL_UART_MspInit+0x13c>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d156      	bne.n	8000d3e <HAL_UART_MspInit+0xde>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c90:	2302      	movs	r3, #2
 8000c92:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f002 fd35 	bl	800370c <HAL_RCCEx_PeriphCLKConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ca8:	f7ff fdcf 	bl	800084a <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cac:	2001      	movs	r0, #1
 8000cae:	f7ff ff0a 	bl	8000ac6 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	2004      	movs	r0, #4
 8000cb4:	f7ff feee 	bl	8000a94 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000cc8:	2308      	movs	r3, #8
 8000cca:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ccc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4833      	ldr	r0, [pc, #204]	; (8000da0 <HAL_UART_MspInit+0x140>)
 8000cd4:	f000 ff3a 	bl	8001b4c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8000cd8:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000cda:	4a33      	ldr	r2, [pc, #204]	; (8000da8 <HAL_UART_MspInit+0x148>)
 8000cdc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000cde:	4b31      	ldr	r3, [pc, #196]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000ce0:	2210      	movs	r2, #16
 8000ce2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ce4:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cea:	4b2e      	ldr	r3, [pc, #184]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cf0:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000cf2:	2280      	movs	r2, #128	; 0x80
 8000cf4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cf6:	4b2b      	ldr	r3, [pc, #172]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cfc:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000d02:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000d04:	2220      	movs	r2, #32
 8000d06:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d08:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000d0e:	4825      	ldr	r0, [pc, #148]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000d10:	f000 fbea 	bl	80014e8 <HAL_DMA_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000d1a:	f7ff fd96 	bl	800084a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a20      	ldr	r2, [pc, #128]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000d22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000d26:	4a1f      	ldr	r2, [pc, #124]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	2025      	movs	r0, #37	; 0x25
 8000d32:	f000 fba4 	bl	800147e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000d36:	2025      	movs	r0, #37	; 0x25
 8000d38:	f000 fbbb 	bl	80014b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d3c:	e029      	b.n	8000d92 <HAL_UART_MspInit+0x132>
  else if(uartHandle->Instance==USART1)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a1a      	ldr	r2, [pc, #104]	; (8000dac <HAL_UART_MspInit+0x14c>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d124      	bne.n	8000d92 <HAL_UART_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4618      	mov	r0, r3
 8000d56:	f002 fcd9 	bl	800370c <HAL_RCCEx_PeriphCLKConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <HAL_UART_MspInit+0x104>
      Error_Handler();
 8000d60:	f7ff fd73 	bl	800084a <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d64:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d68:	f7ff fec6 	bl	8000af8 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6c:	2002      	movs	r0, #2
 8000d6e:	f7ff fe91 	bl	8000a94 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d72:	23c0      	movs	r3, #192	; 0xc0
 8000d74:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d82:	2307      	movs	r3, #7
 8000d84:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d86:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4808      	ldr	r0, [pc, #32]	; (8000db0 <HAL_UART_MspInit+0x150>)
 8000d8e:	f000 fedd 	bl	8001b4c <HAL_GPIO_Init>
}
 8000d92:	bf00      	nop
 8000d94:	3770      	adds	r7, #112	; 0x70
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40008000 	.word	0x40008000
 8000da0:	48000800 	.word	0x48000800
 8000da4:	200001d0 	.word	0x200001d0
 8000da8:	4002001c 	.word	0x4002001c
 8000dac:	40013800 	.word	0x40013800
 8000db0:	48000400 	.word	0x48000400

08000db4 <LL_AHB2_GRP1_EnableClock>:
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
}
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <LL_APB1_GRP1_EnableClock>:
{
 8000de6:	b480      	push	{r7}
 8000de8:	b085      	sub	sp, #20
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000df2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000df4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4013      	ands	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000e1c:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <MX_USB_PCD_Init+0x48>)
 8000e1e:	4a11      	ldr	r2, [pc, #68]	; (8000e64 <MX_USB_PCD_Init+0x4c>)
 8000e20:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_USB_PCD_Init+0x48>)
 8000e24:	2208      	movs	r2, #8
 8000e26:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <MX_USB_PCD_Init+0x48>)
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_USB_PCD_Init+0x48>)
 8000e30:	2202      	movs	r2, #2
 8000e32:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <MX_USB_PCD_Init+0x48>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_USB_PCD_Init+0x48>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000e40:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <MX_USB_PCD_Init+0x48>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_USB_PCD_Init+0x48>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_USB_PCD_Init+0x48>)
 8000e4e:	f001 f805 	bl	8001e5c <HAL_PCD_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000e58:	f7ff fcf7 	bl	800084a <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000230 	.word	0x20000230
 8000e64:	40006800 	.word	0x40006800

08000e68 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b09c      	sub	sp, #112	; 0x70
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	2250      	movs	r2, #80	; 0x50
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f004 fb4d 	bl	8005528 <memset>
  if(pcdHandle->Instance==USB)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a1f      	ldr	r2, [pc, #124]	; (8000f10 <HAL_PCD_MspInit+0xa8>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d136      	bne.n	8000f06 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e9c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000e9e:	2318      	movs	r3, #24
 8000ea0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000ea2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ea6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000ea8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000eac:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000eae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000eb2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000eb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eb8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000eba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ebe:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f002 fc21 	bl	800370c <HAL_RCCEx_PeriphCLKConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000ed0:	f7ff fcbb 	bl	800084a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f7ff ff6d 	bl	8000db4 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000eda:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ede:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000eec:	230a      	movs	r3, #10
 8000eee:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efa:	f000 fe27 	bl	8001b4c <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000efe:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000f02:	f7ff ff70 	bl	8000de6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000f06:	bf00      	nop
 8000f08:	3770      	adds	r7, #112	; 0x70
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40006800 	.word	0x40006800

08000f14 <PrintInfo>:
  * @param  String String to be sent to user display
  * @param  Size   Size of string
  * @retval None
  */
void PrintInfo(UART_HandleTypeDef *huart, uint8_t *String, uint16_t Size)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	80fb      	strh	r3, [r7, #6]
  if (HAL_OK != HAL_UART_Transmit(huart, String, Size,1000))
 8000f22:	88fa      	ldrh	r2, [r7, #6]
 8000f24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f002 feeb 	bl	8003d06 <HAL_UART_Transmit>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d002      	beq.n	8000f3c <PrintInfo+0x28>
  {
    Error_Handler();
 8000f36:	f7ff fc88 	bl	800084a <Error_Handler>
  } else { printf("Command AT sent : %s\n",String); }
}
 8000f3a:	e003      	b.n	8000f44 <PrintInfo+0x30>
  } else { printf("Command AT sent : %s\n",String); }
 8000f3c:	68b9      	ldr	r1, [r7, #8]
 8000f3e:	4803      	ldr	r0, [pc, #12]	; (8000f4c <PrintInfo+0x38>)
 8000f40:	f004 fafa 	bl	8005538 <iprintf>
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	0800656c 	.word	0x0800656c

08000f50 <StartReception>:
/**
  * @brief  This function prints user info on PC com port and initiates RX transfer
  * @retval None
  */
void StartReception(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* Initializes Buffer swap mechanism (used in User callback) :
     - 2 physical buffers aRXBufferA and aRXBufferB (RX_BUFFER_SIZE length)
  */
  pBufferReadyForReception = aRXBufferA;
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <StartReception+0x48>)
 8000f56:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <StartReception+0x4c>)
 8000f58:	601a      	str	r2, [r3, #0]
  pBufferReadyForUser      = aRXBufferB;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <StartReception+0x50>)
 8000f5c:	4a11      	ldr	r2, [pc, #68]	; (8000fa4 <StartReception+0x54>)
 8000f5e:	601a      	str	r2, [r3, #0]
  uwNbReceivedChars        = 0;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <StartReception+0x58>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]

  /* Print user info on PC com port */
  //printf("Command AT : %s\n",apConnectAlready);
  PrintInfo(&hlpuart1, apConnectAlready, COUNTOF(apConnectAlready));
 8000f66:	220e      	movs	r2, #14
 8000f68:	4910      	ldr	r1, [pc, #64]	; (8000fac <StartReception+0x5c>)
 8000f6a:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <StartReception+0x60>)
 8000f6c:	f7ff ffd2 	bl	8000f14 <PrintInfo>
     following events :
     - DMA RX Half Transfer event (HT)
     - DMA RX Transfer Complete event (TC)
     - IDLE event on UART Rx line (indicating a pause is UART reception flow)
  */
  if (HAL_OK != HAL_UARTEx_ReceiveToIdle_DMA(&hlpuart1, aRXBufferUser, RX_BUFFER_SIZE))
 8000f70:	2264      	movs	r2, #100	; 0x64
 8000f72:	4910      	ldr	r1, [pc, #64]	; (8000fb4 <StartReception+0x64>)
 8000f74:	480e      	ldr	r0, [pc, #56]	; (8000fb0 <StartReception+0x60>)
 8000f76:	f004 f9cf 	bl	8005318 <HAL_UARTEx_ReceiveToIdle_DMA>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d005      	beq.n	8000f8c <StartReception+0x3c>
  {
    Error_Handler();
 8000f80:	f7ff fc63 	bl	800084a <Error_Handler>
    printf("StartReception Failed\n");
 8000f84:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <StartReception+0x68>)
 8000f86:	f004 fb5d 	bl	8005644 <puts>
  } else {
	  printf("StartReception OK\n");

  }
}
 8000f8a:	e002      	b.n	8000f92 <StartReception+0x42>
	  printf("StartReception OK\n");
 8000f8c:	480b      	ldr	r0, [pc, #44]	; (8000fbc <StartReception+0x6c>)
 8000f8e:	f004 fb59 	bl	8005644 <puts>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000658 	.word	0x20000658
 8000f9c:	20000588 	.word	0x20000588
 8000fa0:	20000654 	.word	0x20000654
 8000fa4:	200005ec 	.word	0x200005ec
 8000fa8:	20000650 	.word	0x20000650
 8000fac:	2000000c 	.word	0x2000000c
 8000fb0:	200000a8 	.word	0x200000a8
 8000fb4:	20000524 	.word	0x20000524
 8000fb8:	08006584 	.word	0x08006584
 8000fbc:	0800659c 	.word	0x0800659c

08000fc0 <UserDataTreatment>:
  * @param  huart UART handle.
  * @param  pData Pointer on received data buffer to be processed
  * @retval Size  Nb of received characters available in buffer
  */
void UserDataTreatment(UART_HandleTypeDef *huart, uint8_t* pData, uint16_t Size)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	80fb      	strh	r3, [r7, #6]
   *
   * pData and Size defines the buffer where received data have been copied, in order to be processed.
   * During this processing of already received data, reception is still ongoing.
   *
   */
  uint8_t* pBuff = pData;
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	617b      	str	r3, [r7, #20]
  uint8_t  i;

  printf("Callback : %s\n",pData);
 8000fd2:	68b9      	ldr	r1, [r7, #8]
 8000fd4:	4811      	ldr	r0, [pc, #68]	; (800101c <UserDataTreatment+0x5c>)
 8000fd6:	f004 faaf 	bl	8005538 <iprintf>

  /* Implementation of loopback is on purpose implemented in direct register access,
     in order to be able to echo received characters as fast as they are received.
     Wait for TC flag to be raised at end of transmit is then removed, only TXE is checked */

  for (i = 0; i < Size; i++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	74fb      	strb	r3, [r7, #19]
 8000fde:	e012      	b.n	8001006 <UserDataTreatment+0x46>
  {
    while (!(__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE))) {}
 8000fe0:	bf00      	nop
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	69db      	ldr	r3, [r3, #28]
 8000fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fec:	2b80      	cmp	r3, #128	; 0x80
 8000fee:	d1f8      	bne.n	8000fe2 <UserDataTreatment+0x22>
    huart->Instance->TDR = *pBuff;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	781a      	ldrb	r2, [r3, #0]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	629a      	str	r2, [r3, #40]	; 0x28
    pBuff++;
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
  for (i = 0; i < Size; i++)
 8001000:	7cfb      	ldrb	r3, [r7, #19]
 8001002:	3301      	adds	r3, #1
 8001004:	74fb      	strb	r3, [r7, #19]
 8001006:	7cfb      	ldrb	r3, [r7, #19]
 8001008:	b29b      	uxth	r3, r3
 800100a:	88fa      	ldrh	r2, [r7, #6]
 800100c:	429a      	cmp	r2, r3
 800100e:	d8e7      	bhi.n	8000fe0 <UserDataTreatment+0x20>
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	080065b0 	.word	0x080065b0

08001020 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	807b      	strh	r3, [r7, #2]
  static uint8_t old_pos = 0;
  uint8_t *ptemp;
  uint8_t i;

  /* Check if number of received data in recpetion buffer has changed */
  if (Size != old_pos)
 800102c:	4b41      	ldr	r3, [pc, #260]	; (8001134 <HAL_UARTEx_RxEventCallback+0x114>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b29b      	uxth	r3, r3
 8001032:	887a      	ldrh	r2, [r7, #2]
 8001034:	429a      	cmp	r2, r3
 8001036:	d074      	beq.n	8001122 <HAL_UARTEx_RxEventCallback+0x102>
  {
    /* Check if position of index in reception buffer has simply be increased
       of if end of buffer has been reached */
    if (Size > old_pos)
 8001038:	4b3e      	ldr	r3, [pc, #248]	; (8001134 <HAL_UARTEx_RxEventCallback+0x114>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b29b      	uxth	r3, r3
 800103e:	887a      	ldrh	r2, [r7, #2]
 8001040:	429a      	cmp	r2, r3
 8001042:	d91e      	bls.n	8001082 <HAL_UARTEx_RxEventCallback+0x62>
    {
      /* Current position is higher than previous one */
      uwNbReceivedChars = Size - old_pos;
 8001044:	887b      	ldrh	r3, [r7, #2]
 8001046:	4a3b      	ldr	r2, [pc, #236]	; (8001134 <HAL_UARTEx_RxEventCallback+0x114>)
 8001048:	7812      	ldrb	r2, [r2, #0]
 800104a:	1a9b      	subs	r3, r3, r2
 800104c:	461a      	mov	r2, r3
 800104e:	4b3a      	ldr	r3, [pc, #232]	; (8001138 <HAL_UARTEx_RxEventCallback+0x118>)
 8001050:	601a      	str	r2, [r3, #0]
      /* Copy received data in "User" buffer for evacuation */
      for (i = 0; i < uwNbReceivedChars; i++)
 8001052:	2300      	movs	r3, #0
 8001054:	73fb      	strb	r3, [r7, #15]
 8001056:	e00e      	b.n	8001076 <HAL_UARTEx_RxEventCallback+0x56>
      {
        pBufferReadyForUser[i] = aRXBufferUser[old_pos + i];
 8001058:	4b36      	ldr	r3, [pc, #216]	; (8001134 <HAL_UARTEx_RxEventCallback+0x114>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	441a      	add	r2, r3
 8001062:	4b36      	ldr	r3, [pc, #216]	; (800113c <HAL_UARTEx_RxEventCallback+0x11c>)
 8001064:	6819      	ldr	r1, [r3, #0]
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	440b      	add	r3, r1
 800106a:	4935      	ldr	r1, [pc, #212]	; (8001140 <HAL_UARTEx_RxEventCallback+0x120>)
 800106c:	5c8a      	ldrb	r2, [r1, r2]
 800106e:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < uwNbReceivedChars; i++)
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	3301      	adds	r3, #1
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <HAL_UARTEx_RxEventCallback+0x118>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	429a      	cmp	r2, r3
 800107e:	d3eb      	bcc.n	8001058 <HAL_UARTEx_RxEventCallback+0x38>
 8001080:	e03c      	b.n	80010fc <HAL_UARTEx_RxEventCallback+0xdc>
    }
    else
    {
      /* Current position is lower than previous one : end of buffer has been reached */
      /* First copy data from current position till end of buffer */
      uwNbReceivedChars = RX_BUFFER_SIZE - old_pos;
 8001082:	4b2c      	ldr	r3, [pc, #176]	; (8001134 <HAL_UARTEx_RxEventCallback+0x114>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800108a:	461a      	mov	r2, r3
 800108c:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <HAL_UARTEx_RxEventCallback+0x118>)
 800108e:	601a      	str	r2, [r3, #0]
      /* Copy received data in "User" buffer for evacuation */
      for (i = 0; i < uwNbReceivedChars; i++)
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	e00e      	b.n	80010b4 <HAL_UARTEx_RxEventCallback+0x94>
      {
        pBufferReadyForUser[i] = aRXBufferUser[old_pos + i];
 8001096:	4b27      	ldr	r3, [pc, #156]	; (8001134 <HAL_UARTEx_RxEventCallback+0x114>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	441a      	add	r2, r3
 80010a0:	4b26      	ldr	r3, [pc, #152]	; (800113c <HAL_UARTEx_RxEventCallback+0x11c>)
 80010a2:	6819      	ldr	r1, [r3, #0]
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	440b      	add	r3, r1
 80010a8:	4925      	ldr	r1, [pc, #148]	; (8001140 <HAL_UARTEx_RxEventCallback+0x120>)
 80010aa:	5c8a      	ldrb	r2, [r1, r2]
 80010ac:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < uwNbReceivedChars; i++)
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	3301      	adds	r3, #1
 80010b2:	73fb      	strb	r3, [r7, #15]
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	4b20      	ldr	r3, [pc, #128]	; (8001138 <HAL_UARTEx_RxEventCallback+0x118>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d3eb      	bcc.n	8001096 <HAL_UARTEx_RxEventCallback+0x76>
      }
      /* Check and continue with beginning of buffer */
      if (Size > 0)
 80010be:	887b      	ldrh	r3, [r7, #2]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d01b      	beq.n	80010fc <HAL_UARTEx_RxEventCallback+0xdc>
      {
        for (i = 0; i < Size; i++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	e00d      	b.n	80010e6 <HAL_UARTEx_RxEventCallback+0xc6>
        {
          pBufferReadyForUser[uwNbReceivedChars + i] = aRXBufferUser[i];
 80010ca:	7bfa      	ldrb	r2, [r7, #15]
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <HAL_UARTEx_RxEventCallback+0x11c>)
 80010ce:	6819      	ldr	r1, [r3, #0]
 80010d0:	7bf8      	ldrb	r0, [r7, #15]
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <HAL_UARTEx_RxEventCallback+0x118>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4403      	add	r3, r0
 80010d8:	440b      	add	r3, r1
 80010da:	4919      	ldr	r1, [pc, #100]	; (8001140 <HAL_UARTEx_RxEventCallback+0x120>)
 80010dc:	5c8a      	ldrb	r2, [r1, r2]
 80010de:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < Size; i++)
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	3301      	adds	r3, #1
 80010e4:	73fb      	strb	r3, [r7, #15]
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	887a      	ldrh	r2, [r7, #2]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d8ec      	bhi.n	80010ca <HAL_UARTEx_RxEventCallback+0xaa>
        }
        uwNbReceivedChars += Size;
 80010f0:	887a      	ldrh	r2, [r7, #2]
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_UARTEx_RxEventCallback+0x118>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <HAL_UARTEx_RxEventCallback+0x118>)
 80010fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* Process received data that has been extracted from Rx User buffer */
    UserDataTreatment(huart, pBufferReadyForUser, uwNbReceivedChars);
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <HAL_UARTEx_RxEventCallback+0x11c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <HAL_UARTEx_RxEventCallback+0x118>)
 8001102:	6812      	ldr	r2, [r2, #0]
 8001104:	b292      	uxth	r2, r2
 8001106:	4619      	mov	r1, r3
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff59 	bl	8000fc0 <UserDataTreatment>

    /* Swap buffers for next bytes to be processed */
    ptemp = pBufferReadyForUser;
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_UARTEx_RxEventCallback+0x11c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	60bb      	str	r3, [r7, #8]
    pBufferReadyForUser = pBufferReadyForReception;
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <HAL_UARTEx_RxEventCallback+0x124>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a08      	ldr	r2, [pc, #32]	; (800113c <HAL_UARTEx_RxEventCallback+0x11c>)
 800111a:	6013      	str	r3, [r2, #0]
    pBufferReadyForReception = ptemp;
 800111c:	4a09      	ldr	r2, [pc, #36]	; (8001144 <HAL_UARTEx_RxEventCallback+0x124>)
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	6013      	str	r3, [r2, #0]
  }
  /* Update old_pos as new reference of position in User Rx buffer that
     indicates position to which data have been processed */
  old_pos = Size;
 8001122:	887b      	ldrh	r3, [r7, #2]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_UARTEx_RxEventCallback+0x114>)
 8001128:	701a      	strb	r2, [r3, #0]
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000065c 	.word	0x2000065c
 8001138:	20000650 	.word	0x20000650
 800113c:	20000654 	.word	0x20000654
 8001140:	20000524 	.word	0x20000524
 8001144:	20000658 	.word	0x20000658

08001148 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001148:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114c:	3304      	adds	r3, #4

0800114e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800114e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001150:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001152:	d3f9      	bcc.n	8001148 <CopyDataInit>
  bx lr
 8001154:	4770      	bx	lr

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001156:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001158:	3004      	adds	r0, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800115a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>
  bx lr
 800115e:	4770      	bx	lr

08001160 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001162:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001164:	f7ff fc44 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001168:	480b      	ldr	r0, [pc, #44]	; (8001198 <LoopForever+0x6>)
 800116a:	490c      	ldr	r1, [pc, #48]	; (800119c <LoopForever+0xa>)
 800116c:	4a0c      	ldr	r2, [pc, #48]	; (80011a0 <LoopForever+0xe>)
 800116e:	2300      	movs	r3, #0
 8001170:	f7ff ffed 	bl	800114e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001174:	480b      	ldr	r0, [pc, #44]	; (80011a4 <LoopForever+0x12>)
 8001176:	490c      	ldr	r1, [pc, #48]	; (80011a8 <LoopForever+0x16>)
 8001178:	4a0c      	ldr	r2, [pc, #48]	; (80011ac <LoopForever+0x1a>)
 800117a:	2300      	movs	r3, #0
 800117c:	f7ff ffe7 	bl	800114e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001180:	480b      	ldr	r0, [pc, #44]	; (80011b0 <LoopForever+0x1e>)
 8001182:	490c      	ldr	r1, [pc, #48]	; (80011b4 <LoopForever+0x22>)
 8001184:	2300      	movs	r3, #0
 8001186:	f7ff ffe8 	bl	800115a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800118a:	f004 f9a9 	bl	80054e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800118e:	f7ff faaf 	bl	80006f0 <main>

08001192 <LoopForever>:

LoopForever:
  b LoopForever
 8001192:	e7fe      	b.n	8001192 <LoopForever>
  ldr   r0, =_estack
 8001194:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001198:	20000008 	.word	0x20000008
 800119c:	20000088 	.word	0x20000088
 80011a0:	0800675c 	.word	0x0800675c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80011a4:	20030000 	.word	0x20030000
 80011a8:	20030000 	.word	0x20030000
 80011ac:	080067dc 	.word	0x080067dc
  INIT_BSS _sbss, _ebss
 80011b0:	20000088 	.word	0x20000088
 80011b4:	20000674 	.word	0x20000674

080011b8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b8:	e7fe      	b.n	80011b8 <ADC1_IRQHandler>
	...

080011bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <HAL_Init+0x3c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a0b      	ldr	r2, [pc, #44]	; (80011f8 <HAL_Init+0x3c>)
 80011cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d2:	2003      	movs	r0, #3
 80011d4:	f000 f948 	bl	8001468 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011d8:	2000      	movs	r0, #0
 80011da:	f000 f80f 	bl	80011fc <HAL_InitTick>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d002      	beq.n	80011ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	71fb      	strb	r3, [r7, #7]
 80011e8:	e001      	b.n	80011ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011ea:	f7ff fb33 	bl	8000854 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011ee:	79fb      	ldrb	r3, [r7, #7]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	58004000 	.word	0x58004000

080011fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <HAL_InitTick+0x6c>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d024      	beq.n	800125a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001210:	f001 ffdc 	bl	80031cc <HAL_RCC_GetHCLKFreq>
 8001214:	4602      	mov	r2, r0
 8001216:	4b14      	ldr	r3, [pc, #80]	; (8001268 <HAL_InitTick+0x6c>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	4619      	mov	r1, r3
 800121c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001220:	fbb3 f3f1 	udiv	r3, r3, r1
 8001224:	fbb2 f3f3 	udiv	r3, r2, r3
 8001228:	4618      	mov	r0, r3
 800122a:	f000 f950 	bl	80014ce <HAL_SYSTICK_Config>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10f      	bne.n	8001254 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b0f      	cmp	r3, #15
 8001238:	d809      	bhi.n	800124e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123a:	2200      	movs	r2, #0
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	f04f 30ff 	mov.w	r0, #4294967295
 8001242:	f000 f91c 	bl	800147e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001246:	4a09      	ldr	r2, [pc, #36]	; (800126c <HAL_InitTick+0x70>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	e007      	b.n	800125e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	e004      	b.n	800125e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	73fb      	strb	r3, [r7, #15]
 8001258:	e001      	b.n	800125e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000020 	.word	0x20000020
 800126c:	2000001c 	.word	0x2000001c

08001270 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_IncTick+0x20>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_IncTick+0x24>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	4a04      	ldr	r2, [pc, #16]	; (8001294 <HAL_IncTick+0x24>)
 8001282:	6013      	str	r3, [r2, #0]
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000020 	.word	0x20000020
 8001294:	20000660 	.word	0x20000660

08001298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <HAL_GetTick+0x14>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000660 	.word	0x20000660

080012b0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <HAL_GetTickPrio+0x14>)
 80012b6:	681b      	ldr	r3, [r3, #0]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	2000001c 	.word	0x2000001c

080012c8 <__NVIC_SetPriorityGrouping>:
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e4:	4013      	ands	r3, r2
 80012e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fa:	4a04      	ldr	r2, [pc, #16]	; (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	60d3      	str	r3, [r2, #12]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_GetPriorityGrouping>:
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <__NVIC_GetPriorityGrouping+0x18>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	0a1b      	lsrs	r3, r3, #8
 800131a:	f003 0307 	and.w	r3, r3, #7
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_EnableIRQ>:
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db0b      	blt.n	8001356 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f003 021f 	and.w	r2, r3, #31
 8001344:	4907      	ldr	r1, [pc, #28]	; (8001364 <__NVIC_EnableIRQ+0x38>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	2001      	movs	r0, #1
 800134e:	fa00 f202 	lsl.w	r2, r0, r2
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000e100 	.word	0xe000e100

08001368 <__NVIC_SetPriority>:
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	2b00      	cmp	r3, #0
 800137a:	db0a      	blt.n	8001392 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	490c      	ldr	r1, [pc, #48]	; (80013b4 <__NVIC_SetPriority+0x4c>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	0112      	lsls	r2, r2, #4
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	440b      	add	r3, r1
 800138c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001390:	e00a      	b.n	80013a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4908      	ldr	r1, [pc, #32]	; (80013b8 <__NVIC_SetPriority+0x50>)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	3b04      	subs	r3, #4
 80013a0:	0112      	lsls	r2, r2, #4
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	440b      	add	r3, r1
 80013a6:	761a      	strb	r2, [r3, #24]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000e100 	.word	0xe000e100
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <NVIC_EncodePriority>:
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	; 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f1c3 0307 	rsb	r3, r3, #7
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	bf28      	it	cs
 80013da:	2304      	movcs	r3, #4
 80013dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3304      	adds	r3, #4
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d902      	bls.n	80013ec <NVIC_EncodePriority+0x30>
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3b03      	subs	r3, #3
 80013ea:	e000      	b.n	80013ee <NVIC_EncodePriority+0x32>
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	f04f 32ff 	mov.w	r2, #4294967295
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	43d9      	mvns	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	4313      	orrs	r3, r2
}
 8001416:	4618      	mov	r0, r3
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <SysTick_Config>:
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001434:	d301      	bcc.n	800143a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001436:	2301      	movs	r3, #1
 8001438:	e00f      	b.n	800145a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143a:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <SysTick_Config+0x40>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001442:	210f      	movs	r1, #15
 8001444:	f04f 30ff 	mov.w	r0, #4294967295
 8001448:	f7ff ff8e 	bl	8001368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <SysTick_Config+0x40>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001452:	4b04      	ldr	r3, [pc, #16]	; (8001464 <SysTick_Config+0x40>)
 8001454:	2207      	movs	r2, #7
 8001456:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	e000e010 	.word	0xe000e010

08001468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ff29 	bl	80012c8 <__NVIC_SetPriorityGrouping>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b086      	sub	sp, #24
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800148c:	f7ff ff40 	bl	8001310 <__NVIC_GetPriorityGrouping>
 8001490:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f7ff ff90 	bl	80013bc <NVIC_EncodePriority>
 800149c:	4602      	mov	r2, r0
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff5f 	bl	8001368 <__NVIC_SetPriority>
}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff33 	bl	800132c <__NVIC_EnableIRQ>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ffa4 	bl	8001424 <SysTick_Config>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e08e      	b.n	8001618 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	4b47      	ldr	r3, [pc, #284]	; (8001620 <HAL_DMA_Init+0x138>)
 8001502:	429a      	cmp	r2, r3
 8001504:	d80f      	bhi.n	8001526 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	4b45      	ldr	r3, [pc, #276]	; (8001624 <HAL_DMA_Init+0x13c>)
 800150e:	4413      	add	r3, r2
 8001510:	4a45      	ldr	r2, [pc, #276]	; (8001628 <HAL_DMA_Init+0x140>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	091b      	lsrs	r3, r3, #4
 8001518:	009a      	lsls	r2, r3, #2
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a42      	ldr	r2, [pc, #264]	; (800162c <HAL_DMA_Init+0x144>)
 8001522:	641a      	str	r2, [r3, #64]	; 0x40
 8001524:	e00e      	b.n	8001544 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	4b40      	ldr	r3, [pc, #256]	; (8001630 <HAL_DMA_Init+0x148>)
 800152e:	4413      	add	r3, r2
 8001530:	4a3d      	ldr	r2, [pc, #244]	; (8001628 <HAL_DMA_Init+0x140>)
 8001532:	fba2 2303 	umull	r2, r3, r2, r3
 8001536:	091b      	lsrs	r3, r3, #4
 8001538:	009a      	lsls	r2, r3, #2
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a3c      	ldr	r2, [pc, #240]	; (8001634 <HAL_DMA_Init+0x14c>)
 8001542:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2202      	movs	r2, #2
 8001548:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800155a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800155e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001568:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001574:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001580:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	4313      	orrs	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 fa74 	bl	8001a84 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015a4:	d102      	bne.n	80015ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80015b8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015c2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d010      	beq.n	80015ee <HAL_DMA_Init+0x106>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d80c      	bhi.n	80015ee <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 fa93 	bl	8001b00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	e008      	b.n	8001600 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40020407 	.word	0x40020407
 8001624:	bffdfff8 	.word	0xbffdfff8
 8001628:	cccccccd 	.word	0xcccccccd
 800162c:	40020000 	.word	0x40020000
 8001630:	bffdfbf8 	.word	0xbffdfbf8
 8001634:	40020400 	.word	0x40020400

08001638 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
 8001644:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <HAL_DMA_Start_IT+0x20>
 8001654:	2302      	movs	r3, #2
 8001656:	e066      	b.n	8001726 <HAL_DMA_Start_IT+0xee>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b01      	cmp	r3, #1
 800166a:	d155      	bne.n	8001718 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2202      	movs	r2, #2
 8001670:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0201 	bic.w	r2, r2, #1
 8001688:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	68b9      	ldr	r1, [r7, #8]
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f000 f9b9 	bl	8001a08 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	2b00      	cmp	r3, #0
 800169c:	d008      	beq.n	80016b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f042 020e 	orr.w	r2, r2, #14
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e00f      	b.n	80016d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0204 	bic.w	r2, r2, #4
 80016be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 020a 	orr.w	r2, r2, #10
 80016ce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d007      	beq.n	80016ee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016ec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d007      	beq.n	8001706 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001704:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0201 	orr.w	r2, r2, #1
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e005      	b.n	8001724 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001720:	2302      	movs	r3, #2
 8001722:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001724:	7dfb      	ldrb	r3, [r7, #23]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e04f      	b.n	80017e0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d008      	beq.n	800175e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2204      	movs	r2, #4
 8001750:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e040      	b.n	80017e0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 020e 	bic.w	r2, r2, #14
 800176c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800177c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0201 	bic.w	r2, r2, #1
 800178c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	f003 021c 	and.w	r2, r3, #28
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	2101      	movs	r1, #1
 800179c:	fa01 f202 	lsl.w	r2, r1, r2
 80017a0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80017aa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00c      	beq.n	80017ce <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80017cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d005      	beq.n	8001810 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2204      	movs	r2, #4
 8001808:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	73fb      	strb	r3, [r7, #15]
 800180e:	e047      	b.n	80018a0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 020e 	bic.w	r2, r2, #14
 800181e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0201 	bic.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800183a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800183e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001844:	f003 021c 	and.w	r2, r3, #28
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	2101      	movs	r1, #1
 800184e:	fa01 f202 	lsl.w	r2, r1, r2
 8001852:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800185c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00c      	beq.n	8001880 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001870:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001874:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800187e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	4798      	blx	r3
    }
  }
  return status;
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b084      	sub	sp, #16
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	f003 031c 	and.w	r3, r3, #28
 80018ca:	2204      	movs	r2, #4
 80018cc:	409a      	lsls	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d026      	beq.n	8001924 <HAL_DMA_IRQHandler+0x7a>
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d021      	beq.n	8001924 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0320 	and.w	r3, r3, #32
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d107      	bne.n	80018fe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0204 	bic.w	r2, r2, #4
 80018fc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	f003 021c 	and.w	r2, r3, #28
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	2104      	movs	r1, #4
 800190c:	fa01 f202 	lsl.w	r2, r1, r2
 8001910:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	2b00      	cmp	r3, #0
 8001918:	d071      	beq.n	80019fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001922:	e06c      	b.n	80019fe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001928:	f003 031c 	and.w	r3, r3, #28
 800192c:	2202      	movs	r2, #2
 800192e:	409a      	lsls	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4013      	ands	r3, r2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d02e      	beq.n	8001996 <HAL_DMA_IRQHandler+0xec>
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d029      	beq.n	8001996 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0320 	and.w	r3, r3, #32
 800194c:	2b00      	cmp	r3, #0
 800194e:	d10b      	bne.n	8001968 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 020a 	bic.w	r2, r2, #10
 800195e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196c:	f003 021c 	and.w	r2, r3, #28
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	2102      	movs	r1, #2
 8001976:	fa01 f202 	lsl.w	r2, r1, r2
 800197a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	2b00      	cmp	r3, #0
 800198a:	d038      	beq.n	80019fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001994:	e033      	b.n	80019fe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f003 031c 	and.w	r3, r3, #28
 800199e:	2208      	movs	r2, #8
 80019a0:	409a      	lsls	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d02a      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x156>
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	f003 0308 	and.w	r3, r3, #8
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d025      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 020e 	bic.w	r2, r2, #14
 80019c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c8:	f003 021c 	and.w	r2, r3, #28
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	2101      	movs	r1, #1
 80019d2:	fa01 f202 	lsl.w	r2, r1, r2
 80019d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d004      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80019fe:	bf00      	nop
 8001a00:	bf00      	nop
}
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a1e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d004      	beq.n	8001a32 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a30:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	f003 021c 	and.w	r2, r3, #28
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	2101      	movs	r1, #1
 8001a40:	fa01 f202 	lsl.w	r2, r1, r2
 8001a44:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2b10      	cmp	r3, #16
 8001a54:	d108      	bne.n	8001a68 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a66:	e007      	b.n	8001a78 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	60da      	str	r2, [r3, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d80a      	bhi.n	8001aae <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9c:	089b      	lsrs	r3, r3, #2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001aa4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6493      	str	r3, [r2, #72]	; 0x48
 8001aac:	e007      	b.n	8001abe <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	009a      	lsls	r2, r3, #2
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001ab8:	4413      	add	r3, r2
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	3b08      	subs	r3, #8
 8001ac6:	4a0c      	ldr	r2, [pc, #48]	; (8001af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8001acc:	091b      	lsrs	r3, r3, #4
 8001ace:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001ad4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f003 031f 	and.w	r3, r3, #31
 8001adc:	2201      	movs	r2, #1
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	40020407 	.word	0x40020407
 8001af4:	4002081c 	.word	0x4002081c
 8001af8:	cccccccd 	.word	0xcccccccd
 8001afc:	40020880 	.word	0x40020880

08001b00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b10:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a09      	ldr	r2, [pc, #36]	; (8001b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8001b24:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2201      	movs	r2, #1
 8001b30:	409a      	lsls	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001b36:	bf00      	nop
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	1000823f 	.word	0x1000823f
 8001b48:	40020940 	.word	0x40020940

08001b4c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b5a:	e14c      	b.n	8001df6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	2101      	movs	r1, #1
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	fa01 f303 	lsl.w	r3, r1, r3
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 813e 	beq.w	8001df0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d005      	beq.n	8001b8c <HAL_GPIO_Init+0x40>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d130      	bne.n	8001bee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	091b      	lsrs	r3, r3, #4
 8001bd8:	f003 0201 	and.w	r2, r3, #1
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d017      	beq.n	8001c2a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	2203      	movs	r2, #3
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d123      	bne.n	8001c7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	08da      	lsrs	r2, r3, #3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3208      	adds	r2, #8
 8001c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	220f      	movs	r2, #15
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	691a      	ldr	r2, [r3, #16]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	08da      	lsrs	r2, r3, #3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3208      	adds	r2, #8
 8001c78:	6939      	ldr	r1, [r7, #16]
 8001c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	2203      	movs	r2, #3
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 0203 	and.w	r2, r3, #3
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 8098 	beq.w	8001df0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001cc0:	4a54      	ldr	r2, [pc, #336]	; (8001e14 <HAL_GPIO_Init+0x2c8>)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	089b      	lsrs	r3, r3, #2
 8001cc6:	3302      	adds	r3, #2
 8001cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	220f      	movs	r2, #15
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cea:	d019      	beq.n	8001d20 <HAL_GPIO_Init+0x1d4>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a4a      	ldr	r2, [pc, #296]	; (8001e18 <HAL_GPIO_Init+0x2cc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d013      	beq.n	8001d1c <HAL_GPIO_Init+0x1d0>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a49      	ldr	r2, [pc, #292]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d00d      	beq.n	8001d18 <HAL_GPIO_Init+0x1cc>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a48      	ldr	r2, [pc, #288]	; (8001e20 <HAL_GPIO_Init+0x2d4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d007      	beq.n	8001d14 <HAL_GPIO_Init+0x1c8>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a47      	ldr	r2, [pc, #284]	; (8001e24 <HAL_GPIO_Init+0x2d8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d101      	bne.n	8001d10 <HAL_GPIO_Init+0x1c4>
 8001d0c:	2304      	movs	r3, #4
 8001d0e:	e008      	b.n	8001d22 <HAL_GPIO_Init+0x1d6>
 8001d10:	2307      	movs	r3, #7
 8001d12:	e006      	b.n	8001d22 <HAL_GPIO_Init+0x1d6>
 8001d14:	2303      	movs	r3, #3
 8001d16:	e004      	b.n	8001d22 <HAL_GPIO_Init+0x1d6>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e002      	b.n	8001d22 <HAL_GPIO_Init+0x1d6>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <HAL_GPIO_Init+0x1d6>
 8001d20:	2300      	movs	r3, #0
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	f002 0203 	and.w	r2, r2, #3
 8001d28:	0092      	lsls	r2, r2, #2
 8001d2a:	4093      	lsls	r3, r2
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d32:	4938      	ldr	r1, [pc, #224]	; (8001e14 <HAL_GPIO_Init+0x2c8>)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	089b      	lsrs	r3, r3, #2
 8001d38:	3302      	adds	r3, #2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d40:	4b39      	ldr	r3, [pc, #228]	; (8001e28 <HAL_GPIO_Init+0x2dc>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d64:	4a30      	ldr	r2, [pc, #192]	; (8001e28 <HAL_GPIO_Init+0x2dc>)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d6a:	4b2f      	ldr	r3, [pc, #188]	; (8001e28 <HAL_GPIO_Init+0x2dc>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4013      	ands	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d8e:	4a26      	ldr	r2, [pc, #152]	; (8001e28 <HAL_GPIO_Init+0x2dc>)
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d94:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <HAL_GPIO_Init+0x2dc>)
 8001d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dba:	4a1b      	ldr	r2, [pc, #108]	; (8001e28 <HAL_GPIO_Init+0x2dc>)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001dc2:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <HAL_GPIO_Init+0x2dc>)
 8001dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001de8:	4a0f      	ldr	r2, [pc, #60]	; (8001e28 <HAL_GPIO_Init+0x2dc>)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	3301      	adds	r3, #1
 8001df4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f47f aeab 	bne.w	8001b5c <HAL_GPIO_Init+0x10>
  }
}
 8001e06:	bf00      	nop
 8001e08:	bf00      	nop
 8001e0a:	371c      	adds	r7, #28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	40010000 	.word	0x40010000
 8001e18:	48000400 	.word	0x48000400
 8001e1c:	48000800 	.word	0x48000800
 8001e20:	48000c00 	.word	0x48000c00
 8001e24:	48001000 	.word	0x48001000
 8001e28:	58000800 	.word	0x58000800

08001e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e3c:	787b      	ldrb	r3, [r7, #1]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e48:	e002      	b.n	8001e50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e4a:	887a      	ldrh	r2, [r7, #2]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e5e:	b08b      	sub	sp, #44	; 0x2c
 8001e60:	af06      	add	r7, sp, #24
 8001e62:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e0cb      	b.n	8002006 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7fe fff0 	bl	8000e68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f003 fae1 	bl	800545c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73fb      	strb	r3, [r7, #15]
 8001e9e:	e040      	b.n	8001f22 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	440b      	add	r3, r1
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	440b      	add	r3, r1
 8001ec6:	7bfa      	ldrb	r2, [r7, #15]
 8001ec8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	440b      	add	r3, r1
 8001eda:	3303      	adds	r3, #3
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ee0:	7bfa      	ldrb	r2, [r7, #15]
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	440b      	add	r3, r1
 8001eee:	3338      	adds	r3, #56	; 0x38
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ef4:	7bfa      	ldrb	r2, [r7, #15]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	440b      	add	r3, r1
 8001f02:	333c      	adds	r3, #60	; 0x3c
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f08:	7bfa      	ldrb	r2, [r7, #15]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	440b      	add	r3, r1
 8001f16:	3340      	adds	r3, #64	; 0x40
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	73fb      	strb	r3, [r7, #15]
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d3b9      	bcc.n	8001ea0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	e044      	b.n	8001fbc <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	440b      	add	r3, r1
 8001f40:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	440b      	add	r3, r1
 8001f56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f5a:	7bfa      	ldrb	r2, [r7, #15]
 8001f5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	440b      	add	r3, r1
 8001f82:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	440b      	add	r3, r1
 8001f98:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fa0:	7bfa      	ldrb	r2, [r7, #15]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	440b      	add	r3, r1
 8001fae:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	73fb      	strb	r3, [r7, #15]
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d3b5      	bcc.n	8001f32 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	687e      	ldr	r6, [r7, #4]
 8001fce:	466d      	mov	r5, sp
 8001fd0:	f106 0410 	add.w	r4, r6, #16
 8001fd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd8:	6823      	ldr	r3, [r4, #0]
 8001fda:	602b      	str	r3, [r5, #0]
 8001fdc:	1d33      	adds	r3, r6, #4
 8001fde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fe0:	6838      	ldr	r0, [r7, #0]
 8001fe2:	f003 fa56 	bl	8005492 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d102      	bne.n	8002004 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f805 	bl	800200e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800200e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800200e:	b480      	push	{r7}
 8002010:	b085      	sub	sp, #20
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002032:	b29b      	uxth	r3, r3
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002046:	b29b      	uxth	r3, r3
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a04      	ldr	r2, [pc, #16]	; (8002080 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800206e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002072:	6013      	str	r3, [r2, #0]
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	58000400 	.word	0x58000400

08002084 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002088:	4b04      	ldr	r3, [pc, #16]	; (800209c <HAL_PWREx_GetVoltageRange+0x18>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	58000400 	.word	0x58000400

080020a0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80020a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020b2:	d101      	bne.n	80020b8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <LL_RCC_HSE_Enable>:
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80020c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d6:	6013      	str	r3, [r2, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <LL_RCC_HSE_Disable>:
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80020e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f4:	6013      	str	r3, [r2, #0]
}
 80020f6:	bf00      	nop
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_RCC_HSE_IsReady>:
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002112:	d101      	bne.n	8002118 <LL_RCC_HSE_IsReady+0x18>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <LL_RCC_HSE_IsReady+0x1a>
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_RCC_HSI_Enable>:
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002136:	6013      	str	r3, [r2, #0]
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <LL_RCC_HSI_Disable>:
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002154:	6013      	str	r3, [r2, #0]
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_RCC_HSI_IsReady>:
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002172:	d101      	bne.n	8002178 <LL_RCC_HSI_IsReady+0x18>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <LL_RCC_HSI_IsReady+0x1a>
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800218c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	061b      	lsls	r3, r3, #24
 800219a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800219e:	4313      	orrs	r3, r2
 80021a0:	604b      	str	r3, [r1, #4]
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <LL_RCC_HSI48_Enable>:
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80021b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80021c6:	bf00      	nop
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <LL_RCC_HSI48_Disable>:
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80021d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021e0:	f023 0301 	bic.w	r3, r3, #1
 80021e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <LL_RCC_HSI48_IsReady>:
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80021f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b02      	cmp	r3, #2
 8002204:	d101      	bne.n	800220a <LL_RCC_HSI48_IsReady+0x18>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <LL_RCC_HSI48_IsReady+0x1a>
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <LL_RCC_LSE_Enable>:
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800221a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_RCC_LSE_Disable>:
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800223c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002244:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <LL_RCC_LSE_EnableBypass>:
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800225e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002266:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002272:	bf00      	nop
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_RCC_LSE_DisableBypass>:
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800228c:	f023 0304 	bic.w	r3, r3, #4
 8002290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80022a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d101      	bne.n	80022b6 <LL_RCC_LSE_IsReady+0x18>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <LL_RCC_LSE_IsReady+0x1a>
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80022c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80022da:	bf00      	nop
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80022e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800230a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b02      	cmp	r3, #2
 8002318:	d101      	bne.n	800231e <LL_RCC_LSI1_IsReady+0x18>
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <LL_RCC_LSI1_IsReady+0x1a>
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800232e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002336:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800233a:	f043 0304 	orr.w	r3, r3, #4
 800233e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002342:	bf00      	nop
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002354:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002358:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800235c:	f023 0304 	bic.w	r3, r3, #4
 8002360:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b08      	cmp	r3, #8
 8002380:	d101      	bne.n	8002386 <LL_RCC_LSI2_IsReady+0x18>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <LL_RCC_LSI2_IsReady+0x1a>
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800239a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800239e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	021b      	lsls	r3, r3, #8
 80023aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80023c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6013      	str	r3, [r2, #0]
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80023e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	6013      	str	r3, [r2, #0]
}
 80023f2:	bf00      	nop
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b02      	cmp	r3, #2
 800240c:	d101      	bne.n	8002412 <LL_RCC_MSI_IsReady+0x16>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <LL_RCC_MSI_IsReady+0x18>
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002430:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800244c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002456:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2bb0      	cmp	r3, #176	; 0xb0
 800245c:	d901      	bls.n	8002462 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800245e:	23b0      	movs	r3, #176	; 0xb0
 8002460:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002462:	687b      	ldr	r3, [r7, #4]
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800248a:	4313      	orrs	r3, r2
 800248c:	604b      	str	r3, [r1, #4]
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80024a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f023 0203 	bic.w	r2, r3, #3
 80024ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80024c2:	b480      	push	{r7}
 80024c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80024c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 030c 	and.w	r3, r3, #12
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80024e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800250a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002512:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002516:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800253e:	f023 020f 	bic.w	r2, r3, #15
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800256e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4313      	orrs	r3, r2
 8002576:	608b      	str	r3, [r1, #8]
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800258c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002596:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4313      	orrs	r3, r2
 800259e:	608b      	str	r3, [r1, #8]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80025b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80025c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80025e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80025fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002606:	4618      	mov	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800261e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002622:	6013      	str	r3, [r2, #0]
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800263c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002640:	6013      	str	r3, [r2, #0]
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800265e:	d101      	bne.n	8002664 <LL_RCC_PLL_IsReady+0x18>
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <LL_RCC_PLL_IsReady+0x1a>
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	0a1b      	lsrs	r3, r3, #8
 800267c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800268e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80026a2:	b480      	push	{r7}
 80026a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80026a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80026be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0303 	and.w	r3, r3, #3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80026d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e4:	d101      	bne.n	80026ea <LL_RCC_IsActiveFlag_HPRE+0x18>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80026f6:	b480      	push	{r7}
 80026f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80026fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800270a:	d101      	bne.n	8002710 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002724:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800272c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002730:	d101      	bne.n	8002736 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002750:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002754:	d101      	bne.n	800275a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800276a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002774:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002778:	d101      	bne.n	800277e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800278c:	b590      	push	{r4, r7, lr}
 800278e:	b08d      	sub	sp, #52	; 0x34
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e363      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 808d 	beq.w	80028c6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ac:	f7ff fe89 	bl	80024c2 <LL_RCC_GetSysClkSource>
 80027b0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027b2:	f7ff ff82 	bl	80026ba <LL_RCC_PLL_GetMainSource>
 80027b6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80027b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <HAL_RCC_OscConfig+0x3e>
 80027be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c0:	2b0c      	cmp	r3, #12
 80027c2:	d147      	bne.n	8002854 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80027c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d144      	bne.n	8002854 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e347      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80027da:	f7ff fe34 	bl	8002446 <LL_RCC_MSI_GetRange>
 80027de:	4603      	mov	r3, r0
 80027e0:	429c      	cmp	r4, r3
 80027e2:	d914      	bls.n	800280e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fd2f 	bl	800324c <RCC_SetFlashLatencyFromMSIRange>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e336      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fe0e 	bl	800241e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fe32 	bl	8002470 <LL_RCC_MSI_SetCalibTrimming>
 800280c:	e013      	b.n	8002836 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff fe03 	bl	800241e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fe27 	bl	8002470 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	4618      	mov	r0, r3
 8002828:	f000 fd10 	bl	800324c <RCC_SetFlashLatencyFromMSIRange>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e317      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002836:	f000 fcc9 	bl	80031cc <HAL_RCC_GetHCLKFreq>
 800283a:	4603      	mov	r3, r0
 800283c:	4aa4      	ldr	r2, [pc, #656]	; (8002ad0 <HAL_RCC_OscConfig+0x344>)
 800283e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002840:	4ba4      	ldr	r3, [pc, #656]	; (8002ad4 <HAL_RCC_OscConfig+0x348>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe fcd9 	bl	80011fc <HAL_InitTick>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d039      	beq.n	80028c4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e308      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01e      	beq.n	800289a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800285c:	f7ff fdb0 	bl	80023c0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002860:	f7fe fd1a 	bl	8001298 <HAL_GetTick>
 8002864:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002868:	f7fe fd16 	bl	8001298 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e2f5      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800287a:	f7ff fdbf 	bl	80023fc <LL_RCC_MSI_IsReady>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f1      	beq.n	8002868 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fdc8 	bl	800241e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fdec 	bl	8002470 <LL_RCC_MSI_SetCalibTrimming>
 8002898:	e015      	b.n	80028c6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800289a:	f7ff fda0 	bl	80023de <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800289e:	f7fe fcfb 	bl	8001298 <HAL_GetTick>
 80028a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028a6:	f7fe fcf7 	bl	8001298 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e2d6      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80028b8:	f7ff fda0 	bl	80023fc <LL_RCC_MSI_IsReady>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f1      	bne.n	80028a6 <HAL_RCC_OscConfig+0x11a>
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80028c4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d047      	beq.n	8002962 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028d2:	f7ff fdf6 	bl	80024c2 <LL_RCC_GetSysClkSource>
 80028d6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028d8:	f7ff feef 	bl	80026ba <LL_RCC_PLL_GetMainSource>
 80028dc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d005      	beq.n	80028f0 <HAL_RCC_OscConfig+0x164>
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	d108      	bne.n	80028fc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d105      	bne.n	80028fc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d134      	bne.n	8002962 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e2b4      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002904:	d102      	bne.n	800290c <HAL_RCC_OscConfig+0x180>
 8002906:	f7ff fbdd 	bl	80020c4 <LL_RCC_HSE_Enable>
 800290a:	e001      	b.n	8002910 <HAL_RCC_OscConfig+0x184>
 800290c:	f7ff fbe9 	bl	80020e2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d012      	beq.n	800293e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fe fcbe 	bl	8001298 <HAL_GetTick>
 800291c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002920:	f7fe fcba 	bl	8001298 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	; 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e299      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002932:	f7ff fbe5 	bl	8002100 <LL_RCC_HSE_IsReady>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0f1      	beq.n	8002920 <HAL_RCC_OscConfig+0x194>
 800293c:	e011      	b.n	8002962 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293e:	f7fe fcab 	bl	8001298 <HAL_GetTick>
 8002942:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002946:	f7fe fca7 	bl	8001298 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b64      	cmp	r3, #100	; 0x64
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e286      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002958:	f7ff fbd2 	bl	8002100 <LL_RCC_HSE_IsReady>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f1      	bne.n	8002946 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d04c      	beq.n	8002a08 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800296e:	f7ff fda8 	bl	80024c2 <LL_RCC_GetSysClkSource>
 8002972:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002974:	f7ff fea1 	bl	80026ba <LL_RCC_PLL_GetMainSource>
 8002978:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2b04      	cmp	r3, #4
 800297e:	d005      	beq.n	800298c <HAL_RCC_OscConfig+0x200>
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	2b0c      	cmp	r3, #12
 8002984:	d10e      	bne.n	80029a4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d10b      	bne.n	80029a4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e266      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fbf1 	bl	8002184 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80029a2:	e031      	b.n	8002a08 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d019      	beq.n	80029e0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ac:	f7ff fbba 	bl	8002124 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7fe fc72 	bl	8001298 <HAL_GetTick>
 80029b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b8:	f7fe fc6e 	bl	8001298 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e24d      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80029ca:	f7ff fbc9 	bl	8002160 <LL_RCC_HSI_IsReady>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f1      	beq.n	80029b8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fbd3 	bl	8002184 <LL_RCC_HSI_SetCalibTrimming>
 80029de:	e013      	b.n	8002a08 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029e0:	f7ff fbaf 	bl	8002142 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7fe fc58 	bl	8001298 <HAL_GetTick>
 80029e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ec:	f7fe fc54 	bl	8001298 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e233      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80029fe:	f7ff fbaf 	bl	8002160 <LL_RCC_HSI_IsReady>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f1      	bne.n	80029ec <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d106      	bne.n	8002a22 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80a3 	beq.w	8002b68 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d076      	beq.n	8002b18 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d046      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002a36:	f7ff fc66 	bl	8002306 <LL_RCC_LSI1_IsReady>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d113      	bne.n	8002a68 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002a40:	f7ff fc3f 	bl	80022c2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a44:	f7fe fc28 	bl	8001298 <HAL_GetTick>
 8002a48:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a4c:	f7fe fc24 	bl	8001298 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e203      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002a5e:	f7ff fc52 	bl	8002306 <LL_RCC_LSI1_IsReady>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f1      	beq.n	8002a4c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002a68:	f7ff fc5f 	bl	800232a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7fe fc14 	bl	8001298 <HAL_GetTick>
 8002a70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002a74:	f7fe fc10 	bl	8001298 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e1ef      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002a86:	f7ff fc72 	bl	800236e <LL_RCC_LSI2_IsReady>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f1      	beq.n	8002a74 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fc7c 	bl	8002392 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002a9a:	f7ff fc23 	bl	80022e4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9e:	f7fe fbfb 	bl	8001298 <HAL_GetTick>
 8002aa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002aa6:	f7fe fbf7 	bl	8001298 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e1d6      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002ab8:	f7ff fc25 	bl	8002306 <LL_RCC_LSI1_IsReady>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f1      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x31a>
 8002ac2:	e051      	b.n	8002b68 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002ac4:	f7ff fbfd 	bl	80022c2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fbe6 	bl	8001298 <HAL_GetTick>
 8002acc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002ace:	e00c      	b.n	8002aea <HAL_RCC_OscConfig+0x35e>
 8002ad0:	20000008 	.word	0x20000008
 8002ad4:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002ad8:	f7fe fbde 	bl	8001298 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e1bd      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002aea:	f7ff fc0c 	bl	8002306 <LL_RCC_LSI1_IsReady>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0f1      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002af4:	f7ff fc2a 	bl	800234c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002afa:	f7fe fbcd 	bl	8001298 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e1ac      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002b0c:	f7ff fc2f 	bl	800236e <LL_RCC_LSI2_IsReady>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f1      	bne.n	8002afa <HAL_RCC_OscConfig+0x36e>
 8002b16:	e027      	b.n	8002b68 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002b18:	f7ff fc18 	bl	800234c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1c:	f7fe fbbc 	bl	8001298 <HAL_GetTick>
 8002b20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002b24:	f7fe fbb8 	bl	8001298 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e197      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002b36:	f7ff fc1a 	bl	800236e <LL_RCC_LSI2_IsReady>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f1      	bne.n	8002b24 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002b40:	f7ff fbd0 	bl	80022e4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b44:	f7fe fba8 	bl	8001298 <HAL_GetTick>
 8002b48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002b4c:	f7fe fba4 	bl	8001298 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e183      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002b5e:	f7ff fbd2 	bl	8002306 <LL_RCC_LSI1_IsReady>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f1      	bne.n	8002b4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d05b      	beq.n	8002c2c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b74:	4ba7      	ldr	r3, [pc, #668]	; (8002e14 <HAL_RCC_OscConfig+0x688>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d114      	bne.n	8002baa <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002b80:	f7ff fa70 	bl	8002064 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b84:	f7fe fb88 	bl	8001298 <HAL_GetTick>
 8002b88:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8c:	f7fe fb84 	bl	8001298 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e163      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b9e:	4b9d      	ldr	r3, [pc, #628]	; (8002e14 <HAL_RCC_OscConfig+0x688>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d102      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x42c>
 8002bb2:	f7ff fb30 	bl	8002216 <LL_RCC_LSE_Enable>
 8002bb6:	e00c      	b.n	8002bd2 <HAL_RCC_OscConfig+0x446>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b05      	cmp	r3, #5
 8002bbe:	d104      	bne.n	8002bca <HAL_RCC_OscConfig+0x43e>
 8002bc0:	f7ff fb4b 	bl	800225a <LL_RCC_LSE_EnableBypass>
 8002bc4:	f7ff fb27 	bl	8002216 <LL_RCC_LSE_Enable>
 8002bc8:	e003      	b.n	8002bd2 <HAL_RCC_OscConfig+0x446>
 8002bca:	f7ff fb35 	bl	8002238 <LL_RCC_LSE_Disable>
 8002bce:	f7ff fb55 	bl	800227c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d014      	beq.n	8002c04 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bda:	f7fe fb5d 	bl	8001298 <HAL_GetTick>
 8002bde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002be0:	e00a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be2:	f7fe fb59 	bl	8001298 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e136      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002bf8:	f7ff fb51 	bl	800229e <LL_RCC_LSE_IsReady>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0ef      	beq.n	8002be2 <HAL_RCC_OscConfig+0x456>
 8002c02:	e013      	b.n	8002c2c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c04:	f7fe fb48 	bl	8001298 <HAL_GetTick>
 8002c08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0c:	f7fe fb44 	bl	8001298 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e121      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002c22:	f7ff fb3c 	bl	800229e <LL_RCC_LSE_IsReady>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1ef      	bne.n	8002c0c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d02c      	beq.n	8002c92 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d014      	beq.n	8002c6a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c40:	f7ff fab5 	bl	80021ae <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c44:	f7fe fb28 	bl	8001298 <HAL_GetTick>
 8002c48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c4c:	f7fe fb24 	bl	8001298 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e103      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002c5e:	f7ff fac8 	bl	80021f2 <LL_RCC_HSI48_IsReady>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0f1      	beq.n	8002c4c <HAL_RCC_OscConfig+0x4c0>
 8002c68:	e013      	b.n	8002c92 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c6a:	f7ff fab1 	bl	80021d0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6e:	f7fe fb13 	bl	8001298 <HAL_GetTick>
 8002c72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c76:	f7fe fb0f 	bl	8001298 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e0ee      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002c88:	f7ff fab3 	bl	80021f2 <LL_RCC_HSI48_IsReady>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f1      	bne.n	8002c76 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 80e4 	beq.w	8002e64 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c9c:	f7ff fc11 	bl	80024c2 <LL_RCC_GetSysClkSource>
 8002ca0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	f040 80b4 	bne.w	8002e1c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 0203 	and.w	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d123      	bne.n	8002d0a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d11c      	bne.n	8002d0a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	0a1b      	lsrs	r3, r3, #8
 8002cd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d114      	bne.n	8002d0a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d10d      	bne.n	8002d0a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d106      	bne.n	8002d0a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d05d      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2b0c      	cmp	r3, #12
 8002d0e:	d058      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e0a1      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d22:	f7ff fc84 	bl	800262e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d26:	f7fe fab7 	bl	8001298 <HAL_GetTick>
 8002d2a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2e:	f7fe fab3 	bl	8001298 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e092      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1ef      	bne.n	8002d2e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	4b30      	ldr	r3, [pc, #192]	; (8002e18 <HAL_RCC_OscConfig+0x68c>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d60:	4311      	orrs	r1, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d66:	0212      	lsls	r2, r2, #8
 8002d68:	4311      	orrs	r1, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d6e:	4311      	orrs	r1, r2
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d74:	4311      	orrs	r1, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d84:	f7ff fc44 	bl	8002610 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d98:	f7fe fa7e 	bl	8001298 <HAL_GetTick>
 8002d9c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da0:	f7fe fa7a 	bl	8001298 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e059      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0ef      	beq.n	8002da0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc0:	e050      	b.n	8002e64 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e04f      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d147      	bne.n	8002e64 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002dd4:	f7ff fc1c 	bl	8002610 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002de8:	f7fe fa56 	bl	8001298 <HAL_GetTick>
 8002dec:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df0:	f7fe fa52 	bl	8001298 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e031      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0ef      	beq.n	8002df0 <HAL_RCC_OscConfig+0x664>
 8002e10:	e028      	b.n	8002e64 <HAL_RCC_OscConfig+0x6d8>
 8002e12:	bf00      	nop
 8002e14:	58000400 	.word	0x58000400
 8002e18:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	2b0c      	cmp	r3, #12
 8002e20:	d01e      	beq.n	8002e60 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e22:	f7ff fc04 	bl	800262e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e26:	f7fe fa37 	bl	8001298 <HAL_GetTick>
 8002e2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2e:	f7fe fa33 	bl	8001298 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e012      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1ef      	bne.n	8002e2e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <HAL_RCC_OscConfig+0x6e4>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	60cb      	str	r3, [r1, #12]
 8002e5e:	e001      	b.n	8002e64 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3734      	adds	r7, #52	; 0x34
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd90      	pop	{r4, r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	eefefffc 	.word	0xeefefffc

08002e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e12d      	b.n	80030e4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e88:	4b98      	ldr	r3, [pc, #608]	; (80030ec <HAL_RCC_ClockConfig+0x278>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d91b      	bls.n	8002ece <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b95      	ldr	r3, [pc, #596]	; (80030ec <HAL_RCC_ClockConfig+0x278>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 0207 	bic.w	r2, r3, #7
 8002e9e:	4993      	ldr	r1, [pc, #588]	; (80030ec <HAL_RCC_ClockConfig+0x278>)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ea6:	f7fe f9f7 	bl	8001298 <HAL_GetTick>
 8002eaa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002eae:	f7fe f9f3 	bl	8001298 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e111      	b.n	80030e4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec0:	4b8a      	ldr	r3, [pc, #552]	; (80030ec <HAL_RCC_ClockConfig+0x278>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d1ef      	bne.n	8002eae <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d016      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff fafb 	bl	80024da <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ee4:	f7fe f9d8 	bl	8001298 <HAL_GetTick>
 8002ee8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002eec:	f7fe f9d4 	bl	8001298 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e0f2      	b.n	80030e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002efe:	f7ff fbe8 	bl	80026d2 <LL_RCC_IsActiveFlag_HPRE>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f1      	beq.n	8002eec <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0320 	and.w	r3, r3, #32
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d016      	beq.n	8002f42 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff faf2 	bl	8002502 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f1e:	f7fe f9bb 	bl	8001298 <HAL_GetTick>
 8002f22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f26:	f7fe f9b7 	bl	8001298 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e0d5      	b.n	80030e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002f38:	f7ff fbdd 	bl	80026f6 <LL_RCC_IsActiveFlag_C2HPRE>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f1      	beq.n	8002f26 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d016      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff faeb 	bl	800252e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f58:	f7fe f99e 	bl	8001298 <HAL_GetTick>
 8002f5c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f60:	f7fe f99a 	bl	8001298 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e0b8      	b.n	80030e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002f72:	f7ff fbd3 	bl	800271c <LL_RCC_IsActiveFlag_SHDHPRE>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f1      	beq.n	8002f60 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d016      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fae5 	bl	800255c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f92:	f7fe f981 	bl	8001298 <HAL_GetTick>
 8002f96:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f9a:	f7fe f97d 	bl	8001298 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e09b      	b.n	80030e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002fac:	f7ff fbc9 	bl	8002742 <LL_RCC_IsActiveFlag_PPRE1>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f1      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d017      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fadb 	bl	8002584 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002fce:	f7fe f963 	bl	8001298 <HAL_GetTick>
 8002fd2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002fd6:	f7fe f95f 	bl	8001298 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e07d      	b.n	80030e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002fe8:	f7ff fbbd 	bl	8002766 <LL_RCC_IsActiveFlag_PPRE2>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f1      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d043      	beq.n	8003086 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d106      	bne.n	8003014 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003006:	f7ff f87b 	bl	8002100 <LL_RCC_HSE_IsReady>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d11e      	bne.n	800304e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e067      	b.n	80030e4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b03      	cmp	r3, #3
 800301a:	d106      	bne.n	800302a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800301c:	f7ff fb16 	bl	800264c <LL_RCC_PLL_IsReady>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d113      	bne.n	800304e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e05c      	b.n	80030e4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003032:	f7ff f9e3 	bl	80023fc <LL_RCC_MSI_IsReady>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d108      	bne.n	800304e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e051      	b.n	80030e4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003040:	f7ff f88e 	bl	8002160 <LL_RCC_HSI_IsReady>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e04a      	b.n	80030e4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fa21 	bl	800249a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003058:	f7fe f91e 	bl	8001298 <HAL_GetTick>
 800305c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305e:	e00a      	b.n	8003076 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003060:	f7fe f91a 	bl	8001298 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	; 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e036      	b.n	80030e4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003076:	f7ff fa24 	bl	80024c2 <LL_RCC_GetSysClkSource>
 800307a:	4602      	mov	r2, r0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	429a      	cmp	r2, r3
 8003084:	d1ec      	bne.n	8003060 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003086:	4b19      	ldr	r3, [pc, #100]	; (80030ec <HAL_RCC_ClockConfig+0x278>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d21b      	bcs.n	80030cc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003094:	4b15      	ldr	r3, [pc, #84]	; (80030ec <HAL_RCC_ClockConfig+0x278>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f023 0207 	bic.w	r2, r3, #7
 800309c:	4913      	ldr	r1, [pc, #76]	; (80030ec <HAL_RCC_ClockConfig+0x278>)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a4:	f7fe f8f8 	bl	8001298 <HAL_GetTick>
 80030a8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030aa:	e008      	b.n	80030be <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80030ac:	f7fe f8f4 	bl	8001298 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e012      	b.n	80030e4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <HAL_RCC_ClockConfig+0x278>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d1ef      	bne.n	80030ac <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80030cc:	f000 f87e 	bl	80031cc <HAL_RCC_GetHCLKFreq>
 80030d0:	4603      	mov	r3, r0
 80030d2:	4a07      	ldr	r2, [pc, #28]	; (80030f0 <HAL_RCC_ClockConfig+0x27c>)
 80030d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80030d6:	f7fe f8eb 	bl	80012b0 <HAL_GetTickPrio>
 80030da:	4603      	mov	r3, r0
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fe f88d 	bl	80011fc <HAL_InitTick>
 80030e2:	4603      	mov	r3, r0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	58004000 	.word	0x58004000
 80030f0:	20000008 	.word	0x20000008

080030f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030fa:	f7ff f9e2 	bl	80024c2 <LL_RCC_GetSysClkSource>
 80030fe:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10a      	bne.n	800311c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003106:	f7ff f99e 	bl	8002446 <LL_RCC_MSI_GetRange>
 800310a:	4603      	mov	r3, r0
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	4a2b      	ldr	r2, [pc, #172]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	e04b      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b04      	cmp	r3, #4
 8003120:	d102      	bne.n	8003128 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003122:	4b28      	ldr	r3, [pc, #160]	; (80031c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	e045      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b08      	cmp	r3, #8
 800312c:	d10a      	bne.n	8003144 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800312e:	f7fe ffb7 	bl	80020a0 <LL_RCC_HSE_IsEnabledDiv2>
 8003132:	4603      	mov	r3, r0
 8003134:	2b01      	cmp	r3, #1
 8003136:	d102      	bne.n	800313e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003138:	4b22      	ldr	r3, [pc, #136]	; (80031c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	e03a      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800313e:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	e037      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003144:	f7ff fab9 	bl	80026ba <LL_RCC_PLL_GetMainSource>
 8003148:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b02      	cmp	r3, #2
 800314e:	d003      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0x64>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b03      	cmp	r3, #3
 8003154:	d003      	beq.n	800315e <HAL_RCC_GetSysClockFreq+0x6a>
 8003156:	e00d      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003158:	4b1a      	ldr	r3, [pc, #104]	; (80031c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800315a:	60bb      	str	r3, [r7, #8]
        break;
 800315c:	e015      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800315e:	f7fe ff9f 	bl	80020a0 <LL_RCC_HSE_IsEnabledDiv2>
 8003162:	4603      	mov	r3, r0
 8003164:	2b01      	cmp	r3, #1
 8003166:	d102      	bne.n	800316e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003168:	4b16      	ldr	r3, [pc, #88]	; (80031c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800316a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800316c:	e00d      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800316e:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003170:	60bb      	str	r3, [r7, #8]
        break;
 8003172:	e00a      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003174:	f7ff f967 	bl	8002446 <LL_RCC_MSI_GetRange>
 8003178:	4603      	mov	r3, r0
 800317a:	091b      	lsrs	r3, r3, #4
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	4a0f      	ldr	r2, [pc, #60]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003186:	60bb      	str	r3, [r7, #8]
        break;
 8003188:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800318a:	f7ff fa71 	bl	8002670 <LL_RCC_PLL_GetN>
 800318e:	4602      	mov	r2, r0
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	fb03 f402 	mul.w	r4, r3, r2
 8003196:	f7ff fa84 	bl	80026a2 <LL_RCC_PLL_GetDivider>
 800319a:	4603      	mov	r3, r0
 800319c:	091b      	lsrs	r3, r3, #4
 800319e:	3301      	adds	r3, #1
 80031a0:	fbb4 f4f3 	udiv	r4, r4, r3
 80031a4:	f7ff fa71 	bl	800268a <LL_RCC_PLL_GetR>
 80031a8:	4603      	mov	r3, r0
 80031aa:	0f5b      	lsrs	r3, r3, #29
 80031ac:	3301      	adds	r3, #1
 80031ae:	fbb4 f3f3 	udiv	r3, r4, r3
 80031b2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80031b4:	68fb      	ldr	r3, [r7, #12]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd90      	pop	{r4, r7, pc}
 80031be:	bf00      	nop
 80031c0:	0800664c 	.word	0x0800664c
 80031c4:	00f42400 	.word	0x00f42400
 80031c8:	01e84800 	.word	0x01e84800

080031cc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031cc:	b598      	push	{r3, r4, r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80031d0:	f7ff ff90 	bl	80030f4 <HAL_RCC_GetSysClockFreq>
 80031d4:	4604      	mov	r4, r0
 80031d6:	f7ff f9e9 	bl	80025ac <LL_RCC_GetAHBPrescaler>
 80031da:	4603      	mov	r3, r0
 80031dc:	091b      	lsrs	r3, r3, #4
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	4a03      	ldr	r2, [pc, #12]	; (80031f0 <HAL_RCC_GetHCLKFreq+0x24>)
 80031e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd98      	pop	{r3, r4, r7, pc}
 80031f0:	080065ec 	.word	0x080065ec

080031f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f4:	b598      	push	{r3, r4, r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80031f8:	f7ff ffe8 	bl	80031cc <HAL_RCC_GetHCLKFreq>
 80031fc:	4604      	mov	r4, r0
 80031fe:	f7ff f9ef 	bl	80025e0 <LL_RCC_GetAPB1Prescaler>
 8003202:	4603      	mov	r3, r0
 8003204:	0a1b      	lsrs	r3, r3, #8
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	4a04      	ldr	r2, [pc, #16]	; (800321c <HAL_RCC_GetPCLK1Freq+0x28>)
 800320c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	bd98      	pop	{r3, r4, r7, pc}
 800321c:	0800662c 	.word	0x0800662c

08003220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003220:	b598      	push	{r3, r4, r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003224:	f7ff ffd2 	bl	80031cc <HAL_RCC_GetHCLKFreq>
 8003228:	4604      	mov	r4, r0
 800322a:	f7ff f9e5 	bl	80025f8 <LL_RCC_GetAPB2Prescaler>
 800322e:	4603      	mov	r3, r0
 8003230:	0adb      	lsrs	r3, r3, #11
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	4a04      	ldr	r2, [pc, #16]	; (8003248 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003244:	4618      	mov	r0, r3
 8003246:	bd98      	pop	{r3, r4, r7, pc}
 8003248:	0800662c 	.word	0x0800662c

0800324c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800324c:	b590      	push	{r4, r7, lr}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2bb0      	cmp	r3, #176	; 0xb0
 8003258:	d903      	bls.n	8003262 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800325a:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	e007      	b.n	8003272 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	4a11      	ldr	r2, [pc, #68]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800326c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003270:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003272:	f7ff f9a7 	bl	80025c4 <LL_RCC_GetAHB4Prescaler>
 8003276:	4603      	mov	r3, r0
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	4a0d      	ldr	r2, [pc, #52]	; (80032b4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	fbb2 f3f3 	udiv	r3, r2, r3
 800328a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003290:	fba2 2303 	umull	r2, r3, r2, r3
 8003294:	0c9c      	lsrs	r4, r3, #18
 8003296:	f7fe fef5 	bl	8002084 <HAL_PWREx_GetVoltageRange>
 800329a:	4603      	mov	r3, r0
 800329c:	4619      	mov	r1, r3
 800329e:	4620      	mov	r0, r4
 80032a0:	f000 f80c 	bl	80032bc <RCC_SetFlashLatency>
 80032a4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd90      	pop	{r4, r7, pc}
 80032ae:	bf00      	nop
 80032b0:	0800664c 	.word	0x0800664c
 80032b4:	080065ec 	.word	0x080065ec
 80032b8:	431bde83 	.word	0x431bde83

080032bc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80032bc:	b590      	push	{r4, r7, lr}
 80032be:	b093      	sub	sp, #76	; 0x4c
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80032c6:	4b37      	ldr	r3, [pc, #220]	; (80033a4 <RCC_SetFlashLatency+0xe8>)
 80032c8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80032cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80032d2:	4a35      	ldr	r2, [pc, #212]	; (80033a8 <RCC_SetFlashLatency+0xec>)
 80032d4:	f107 031c 	add.w	r3, r7, #28
 80032d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80032da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80032de:	4b33      	ldr	r3, [pc, #204]	; (80033ac <RCC_SetFlashLatency+0xf0>)
 80032e0:	f107 040c 	add.w	r4, r7, #12
 80032e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80032ea:	2300      	movs	r3, #0
 80032ec:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032f4:	d11a      	bne.n	800332c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80032f6:	2300      	movs	r3, #0
 80032f8:	643b      	str	r3, [r7, #64]	; 0x40
 80032fa:	e013      	b.n	8003324 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80032fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	3348      	adds	r3, #72	; 0x48
 8003302:	443b      	add	r3, r7
 8003304:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	429a      	cmp	r2, r3
 800330c:	d807      	bhi.n	800331e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800330e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	3348      	adds	r3, #72	; 0x48
 8003314:	443b      	add	r3, r7
 8003316:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800331a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800331c:	e020      	b.n	8003360 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800331e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003320:	3301      	adds	r3, #1
 8003322:	643b      	str	r3, [r7, #64]	; 0x40
 8003324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003326:	2b03      	cmp	r3, #3
 8003328:	d9e8      	bls.n	80032fc <RCC_SetFlashLatency+0x40>
 800332a:	e019      	b.n	8003360 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800332c:	2300      	movs	r3, #0
 800332e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003330:	e013      	b.n	800335a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	3348      	adds	r3, #72	; 0x48
 8003338:	443b      	add	r3, r7
 800333a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	429a      	cmp	r2, r3
 8003342:	d807      	bhi.n	8003354 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	3348      	adds	r3, #72	; 0x48
 800334a:	443b      	add	r3, r7
 800334c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003350:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003352:	e005      	b.n	8003360 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003356:	3301      	adds	r3, #1
 8003358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800335a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335c:	2b02      	cmp	r3, #2
 800335e:	d9e8      	bls.n	8003332 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003360:	4b13      	ldr	r3, [pc, #76]	; (80033b0 <RCC_SetFlashLatency+0xf4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f023 0207 	bic.w	r2, r3, #7
 8003368:	4911      	ldr	r1, [pc, #68]	; (80033b0 <RCC_SetFlashLatency+0xf4>)
 800336a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800336c:	4313      	orrs	r3, r2
 800336e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003370:	f7fd ff92 	bl	8001298 <HAL_GetTick>
 8003374:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003376:	e008      	b.n	800338a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003378:	f7fd ff8e 	bl	8001298 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e007      	b.n	800339a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800338a:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <RCC_SetFlashLatency+0xf4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003394:	429a      	cmp	r2, r3
 8003396:	d1ef      	bne.n	8003378 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	374c      	adds	r7, #76	; 0x4c
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd90      	pop	{r4, r7, pc}
 80033a2:	bf00      	nop
 80033a4:	080065c0 	.word	0x080065c0
 80033a8:	080065d0 	.word	0x080065d0
 80033ac:	080065dc 	.word	0x080065dc
 80033b0:	58004000 	.word	0x58004000

080033b4 <LL_RCC_LSE_IsEnabled>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80033b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <LL_RCC_LSE_IsEnabled+0x18>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <LL_RCC_LSE_IsEnabled+0x1a>
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <LL_RCC_LSE_IsReady>:
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80033dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d101      	bne.n	80033f0 <LL_RCC_LSE_IsReady+0x18>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <LL_RCC_LSE_IsReady+0x1a>
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <LL_RCC_MSI_EnablePLLMode>:
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800340a:	f043 0304 	orr.w	r3, r3, #4
 800340e:	6013      	str	r3, [r2, #0]
}
 8003410:	bf00      	nop
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <LL_RCC_SetRFWKPClockSource>:
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800342a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800342e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <LL_RCC_SetSMPSClockSource>:
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800344e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	f023 0203 	bic.w	r2, r3, #3
 8003458:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4313      	orrs	r3, r2
 8003460:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <LL_RCC_SetSMPSPrescaler>:
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003480:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4313      	orrs	r3, r2
 8003488:	624b      	str	r3, [r1, #36]	; 0x24
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <LL_RCC_SetUSARTClockSource>:
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800349e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a6:	f023 0203 	bic.w	r2, r3, #3
 80034aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <LL_RCC_SetLPUARTClockSource>:
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80034ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <LL_RCC_SetI2CClockSource>:
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80034f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003506:	43db      	mvns	r3, r3
 8003508:	401a      	ands	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003512:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <LL_RCC_SetLPTIMClockSource>:
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003534:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	0c1b      	lsrs	r3, r3, #16
 800353c:	041b      	lsls	r3, r3, #16
 800353e:	43db      	mvns	r3, r3
 8003540:	401a      	ands	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	041b      	lsls	r3, r3, #16
 8003546:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <LL_RCC_SetSAIClockSource>:
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003570:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_RCC_SetRNGClockSource>:
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003598:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800359c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <LL_RCC_SetCLK48ClockSource>:
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80035bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <LL_RCC_SetUSBClockSource>:
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff ffe3 	bl	80035b4 <LL_RCC_SetCLK48ClockSource>
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <LL_RCC_SetADCClockSource>:
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80035fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003606:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800360a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <LL_RCC_SetRTCClockSource>:
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800362a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800362e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003632:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003636:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <LL_RCC_GetRTCClockSource>:
{
 800364e:	b480      	push	{r7}
 8003650:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800365e:	4618      	mov	r0, r3
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <LL_RCC_ForceBackupDomainReset>:
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800366c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003674:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003680:	bf00      	nop
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <LL_RCC_ReleaseBackupDomainReset>:
{
 800368a:	b480      	push	{r7}
 800368c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800368e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003696:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800369a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800369e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80036a2:	bf00      	nop
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <LL_RCC_PLLSAI1_Enable>:
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80036b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036be:	6013      	str	r3, [r2, #0]
}
 80036c0:	bf00      	nop
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <LL_RCC_PLLSAI1_Disable>:
{
 80036ca:	b480      	push	{r7}
 80036cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80036ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036dc:	6013      	str	r3, [r2, #0]
}
 80036de:	bf00      	nop
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <LL_RCC_PLLSAI1_IsReady>:
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80036ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036fa:	d101      	bne.n	8003700 <LL_RCC_PLLSAI1_IsReady+0x18>
 80036fc:	2301      	movs	r3, #1
 80036fe:	e000      	b.n	8003702 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003714:	2300      	movs	r3, #0
 8003716:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003718:	2300      	movs	r3, #0
 800371a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003724:	2b00      	cmp	r3, #0
 8003726:	d034      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003730:	d021      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003732:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003736:	d81b      	bhi.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003738:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800373c:	d01d      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800373e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003742:	d815      	bhi.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00b      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800374c:	d110      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800374e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800375e:	e00d      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3304      	adds	r3, #4
 8003764:	4618      	mov	r0, r3
 8003766:	f000 f94d 	bl	8003a04 <RCCEx_PLLSAI1_ConfigNP>
 800376a:	4603      	mov	r3, r0
 800376c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800376e:	e005      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	77fb      	strb	r3, [r7, #31]
        break;
 8003774:	e002      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003776:	bf00      	nop
 8003778:	e000      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800377a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800377c:	7ffb      	ldrb	r3, [r7, #31]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d105      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff fee8 	bl	800355c <LL_RCC_SetSAIClockSource>
 800378c:	e001      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378e:	7ffb      	ldrb	r3, [r7, #31]
 8003790:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800379a:	2b00      	cmp	r3, #0
 800379c:	d046      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800379e:	f7ff ff56 	bl	800364e <LL_RCC_GetRTCClockSource>
 80037a2:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d03c      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80037ae:	f7fe fc59 	bl	8002064 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d105      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff ff30 	bl	8003622 <LL_RCC_SetRTCClockSource>
 80037c2:	e02e      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80037c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037cc:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80037ce:	f7ff ff4b 	bl	8003668 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80037d2:	f7ff ff5a 	bl	800368a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	4313      	orrs	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80037e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80037ee:	f7ff fde1 	bl	80033b4 <LL_RCC_LSE_IsEnabled>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d114      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037f8:	f7fd fd4e 	bl	8001298 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80037fe:	e00b      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003800:	f7fd fd4a 	bl	8001298 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f241 3288 	movw	r2, #5000	; 0x1388
 800380e:	4293      	cmp	r3, r2
 8003810:	d902      	bls.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	77fb      	strb	r3, [r7, #31]
              break;
 8003816:	e004      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003818:	f7ff fdde 	bl	80033d8 <LL_RCC_LSE_IsReady>
 800381c:	4603      	mov	r3, r0
 800381e:	2b01      	cmp	r3, #1
 8003820:	d1ee      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003822:	7ffb      	ldrb	r3, [r7, #31]
 8003824:	77bb      	strb	r3, [r7, #30]
 8003826:	e001      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003828:	7ffb      	ldrb	r3, [r7, #31]
 800382a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d004      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff fe2a 	bl	8003496 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d004      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff fe35 	bl	80034c2 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0310 	and.w	r3, r3, #16
 8003860:	2b00      	cmp	r3, #0
 8003862:	d004      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff fe5d 	bl	8003528 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b00      	cmp	r3, #0
 8003878:	d004      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff fe52 	bl	8003528 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d004      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff fe2a 	bl	80034ee <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d004      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fe1f 	bl	80034ee <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d022      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff fe8d 	bl	80035e0 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038ce:	d107      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80038d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038de:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038e8:	d10b      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3304      	adds	r3, #4
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 f8e3 	bl	8003aba <RCCEx_PLLSAI1_ConfigNQ>
 80038f4:	4603      	mov	r3, r0
 80038f6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80038f8:	7ffb      	ldrb	r3, [r7, #31]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80038fe:	7ffb      	ldrb	r3, [r7, #31]
 8003900:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800390a:	2b00      	cmp	r3, #0
 800390c:	d02b      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003916:	d008      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003920:	d003      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	2b00      	cmp	r3, #0
 8003928:	d105      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff fe2a 	bl	8003588 <LL_RCC_SetRNGClockSource>
 8003934:	e00a      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	2000      	movs	r0, #0
 8003942:	f7ff fe21 	bl	8003588 <LL_RCC_SetRNGClockSource>
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f7ff fe34 	bl	80035b4 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003950:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003954:	d107      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003960:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003964:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800396e:	2b00      	cmp	r3, #0
 8003970:	d022      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fe3d 	bl	80035f6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003984:	d107      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003994:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800399e:	d10b      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3304      	adds	r3, #4
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 f8e3 	bl	8003b70 <RCCEx_PLLSAI1_ConfigNR>
 80039aa:	4603      	mov	r3, r0
 80039ac:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80039ae:	7ffb      	ldrb	r3, [r7, #31]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80039b4:	7ffb      	ldrb	r3, [r7, #31]
 80039b6:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d004      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff fd26 	bl	800341a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff fd45 	bl	800346e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff fd2c 	bl	8003446 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80039ee:	7fbb      	ldrb	r3, [r7, #30]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3720      	adds	r7, #32
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80039fc:	f7ff fcfe 	bl	80033fc <LL_RCC_MSI_EnablePLLMode>
}
 8003a00:	bf00      	nop
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003a10:	f7ff fe5b 	bl	80036ca <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a14:	f7fd fc40 	bl	8001298 <HAL_GetTick>
 8003a18:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a1a:	e009      	b.n	8003a30 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a1c:	f7fd fc3c 	bl	8001298 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d902      	bls.n	8003a30 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8003a2e:	e004      	b.n	8003a3a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a30:	f7ff fe5a 	bl	80036e8 <LL_RCC_PLLSAI1_IsReady>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d137      	bne.n	8003ab0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	021b      	lsls	r3, r3, #8
 8003a50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a54:	4313      	orrs	r3, r2
 8003a56:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003a6e:	f7ff fe1d 	bl	80036ac <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a72:	f7fd fc11 	bl	8001298 <HAL_GetTick>
 8003a76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a78:	e009      	b.n	8003a8e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a7a:	f7fd fc0d 	bl	8001298 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d902      	bls.n	8003a8e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	73fb      	strb	r3, [r7, #15]
        break;
 8003a8c:	e004      	b.n	8003a98 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a8e:	f7ff fe2b 	bl	80036e8 <LL_RCC_PLLSAI1_IsReady>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d1f0      	bne.n	8003a7a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d108      	bne.n	8003ab0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aac:	4313      	orrs	r3, r2
 8003aae:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003ac6:	f7ff fe00 	bl	80036ca <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003aca:	f7fd fbe5 	bl	8001298 <HAL_GetTick>
 8003ace:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003ad0:	e009      	b.n	8003ae6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ad2:	f7fd fbe1 	bl	8001298 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d902      	bls.n	8003ae6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae4:	e004      	b.n	8003af0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003ae6:	f7ff fdff 	bl	80036e8 <LL_RCC_PLLSAI1_IsReady>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f0      	bne.n	8003ad2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d137      	bne.n	8003b66 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	021b      	lsls	r3, r3, #8
 8003b06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b20:	4313      	orrs	r3, r2
 8003b22:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003b24:	f7ff fdc2 	bl	80036ac <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b28:	f7fd fbb6 	bl	8001298 <HAL_GetTick>
 8003b2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003b2e:	e009      	b.n	8003b44 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b30:	f7fd fbb2 	bl	8001298 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d902      	bls.n	8003b44 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	73fb      	strb	r3, [r7, #15]
        break;
 8003b42:	e004      	b.n	8003b4e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003b44:	f7ff fdd0 	bl	80036e8 <LL_RCC_PLLSAI1_IsReady>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d1f0      	bne.n	8003b30 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d108      	bne.n	8003b66 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b62:	4313      	orrs	r3, r2
 8003b64:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003b7c:	f7ff fda5 	bl	80036ca <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003b80:	f7fd fb8a 	bl	8001298 <HAL_GetTick>
 8003b84:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003b86:	e009      	b.n	8003b9c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b88:	f7fd fb86 	bl	8001298 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d902      	bls.n	8003b9c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	73fb      	strb	r3, [r7, #15]
      break;
 8003b9a:	e004      	b.n	8003ba6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003b9c:	f7ff fda4 	bl	80036e8 <LL_RCC_PLLSAI1_IsReady>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d137      	bne.n	8003c1c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	021b      	lsls	r3, r3, #8
 8003bbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003bda:	f7ff fd67 	bl	80036ac <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bde:	f7fd fb5b 	bl	8001298 <HAL_GetTick>
 8003be2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003be4:	e009      	b.n	8003bfa <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003be6:	f7fd fb57 	bl	8001298 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d902      	bls.n	8003bfa <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	73fb      	strb	r3, [r7, #15]
        break;
 8003bf8:	e004      	b.n	8003c04 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003bfa:	f7ff fd75 	bl	80036e8 <LL_RCC_PLLSAI1_IsReady>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d1f0      	bne.n	8003be6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d108      	bne.n	8003c1c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <LL_RCC_GetUSARTClockSource>:
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c32:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4013      	ands	r3, r2
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <LL_RCC_GetLPUARTClockSource>:
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4013      	ands	r3, r2
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b082      	sub	sp, #8
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e042      	b.n	8003cfe <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fc ffe8 	bl	8000c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2224      	movs	r2, #36	; 0x24
 8003c94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0201 	bic.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fbff 	bl	80044ac <UART_SetConfig>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e022      	b.n	8003cfe <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 fe1b 	bl	80048fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cd4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ce4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0201 	orr.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fea2 	bl	8004a40 <UART_CheckIdleState>
 8003cfc:	4603      	mov	r3, r0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b08a      	sub	sp, #40	; 0x28
 8003d0a:	af02      	add	r7, sp, #8
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	4613      	mov	r3, r2
 8003d14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d173      	bne.n	8003e08 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <HAL_UART_Transmit+0x26>
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e06c      	b.n	8003e0a <HAL_UART_Transmit+0x104>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2221      	movs	r2, #33	; 0x21
 8003d3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d40:	f7fd faaa 	bl	8001298 <HAL_GetTick>
 8003d44:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	88fa      	ldrh	r2, [r7, #6]
 8003d4a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	88fa      	ldrh	r2, [r7, #6]
 8003d52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5e:	d108      	bne.n	8003d72 <HAL_UART_Transmit+0x6c>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d104      	bne.n	8003d72 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	61bb      	str	r3, [r7, #24]
 8003d70:	e003      	b.n	8003d7a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d7a:	e02c      	b.n	8003dd6 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2200      	movs	r2, #0
 8003d84:	2180      	movs	r1, #128	; 0x80
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 fea8 	bl	8004adc <UART_WaitOnFlagUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e039      	b.n	8003e0a <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10b      	bne.n	8003db4 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	461a      	mov	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003daa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	3302      	adds	r3, #2
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	e007      	b.n	8003dc4 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	781a      	ldrb	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1cc      	bne.n	8003d7c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2200      	movs	r2, #0
 8003dea:	2140      	movs	r1, #64	; 0x40
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 fe75 	bl	8004adc <UART_WaitOnFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e006      	b.n	8003e0a <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	e000      	b.n	8003e0a <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8003e08:	2302      	movs	r3, #2
  }
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3720      	adds	r7, #32
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b0ba      	sub	sp, #232	; 0xe8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003e3e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003e42:	4013      	ands	r3, r2
 8003e44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003e48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d11b      	bne.n	8003e88 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e54:	f003 0320 	and.w	r3, r3, #32
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d015      	beq.n	8003e88 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d105      	bne.n	8003e74 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d009      	beq.n	8003e88 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 82e3 	beq.w	8004444 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	4798      	blx	r3
      }
      return;
 8003e86:	e2dd      	b.n	8004444 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003e88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 8123 	beq.w	80040d8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003e92:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003e96:	4b8d      	ldr	r3, [pc, #564]	; (80040cc <HAL_UART_IRQHandler+0x2b8>)
 8003e98:	4013      	ands	r3, r2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003e9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003ea2:	4b8b      	ldr	r3, [pc, #556]	; (80040d0 <HAL_UART_IRQHandler+0x2bc>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 8116 	beq.w	80040d8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d011      	beq.n	8003edc <HAL_UART_IRQHandler+0xc8>
 8003eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00b      	beq.n	8003edc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed2:	f043 0201 	orr.w	r2, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d011      	beq.n	8003f0c <HAL_UART_IRQHandler+0xf8>
 8003ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00b      	beq.n	8003f0c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f02:	f043 0204 	orr.w	r2, r3, #4
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d011      	beq.n	8003f3c <HAL_UART_IRQHandler+0x128>
 8003f18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00b      	beq.n	8003f3c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2204      	movs	r2, #4
 8003f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f32:	f043 0202 	orr.w	r2, r3, #2
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d017      	beq.n	8003f78 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d105      	bne.n	8003f60 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003f54:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003f58:	4b5c      	ldr	r3, [pc, #368]	; (80040cc <HAL_UART_IRQHandler+0x2b8>)
 8003f5a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00b      	beq.n	8003f78 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2208      	movs	r2, #8
 8003f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6e:	f043 0208 	orr.w	r2, r3, #8
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d012      	beq.n	8003faa <HAL_UART_IRQHandler+0x196>
 8003f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00c      	beq.n	8003faa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa0:	f043 0220 	orr.w	r2, r3, #32
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 8249 	beq.w	8004448 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fba:	f003 0320 	and.w	r3, r3, #32
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d013      	beq.n	8003fea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d105      	bne.n	8003fda <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d007      	beq.n	8003fea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffe:	2b40      	cmp	r3, #64	; 0x40
 8004000:	d005      	beq.n	800400e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004002:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004006:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800400a:	2b00      	cmp	r3, #0
 800400c:	d054      	beq.n	80040b8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 ff13 	bl	8004e3a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401e:	2b40      	cmp	r3, #64	; 0x40
 8004020:	d146      	bne.n	80040b0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3308      	adds	r3, #8
 8004028:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004030:	e853 3f00 	ldrex	r3, [r3]
 8004034:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004038:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800403c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3308      	adds	r3, #8
 800404a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800404e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004052:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004056:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800405a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004066:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1d9      	bne.n	8004022 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004074:	2b00      	cmp	r3, #0
 8004076:	d017      	beq.n	80040a8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800407e:	4a15      	ldr	r2, [pc, #84]	; (80040d4 <HAL_UART_IRQHandler+0x2c0>)
 8004080:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004088:	4618      	mov	r0, r3
 800408a:	f7fd fbaf 	bl	80017ec <HAL_DMA_Abort_IT>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d019      	beq.n	80040c8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80040a2:	4610      	mov	r0, r2
 80040a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a6:	e00f      	b.n	80040c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f9f5 	bl	8004498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ae:	e00b      	b.n	80040c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f9f1 	bl	8004498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b6:	e007      	b.n	80040c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f9ed 	bl	8004498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80040c6:	e1bf      	b.n	8004448 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c8:	bf00      	nop
    return;
 80040ca:	e1bd      	b.n	8004448 <HAL_UART_IRQHandler+0x634>
 80040cc:	10000001 	.word	0x10000001
 80040d0:	04000120 	.word	0x04000120
 80040d4:	080050f1 	.word	0x080050f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040dc:	2b01      	cmp	r3, #1
 80040de:	f040 8153 	bne.w	8004388 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80040e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 814c 	beq.w	8004388 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80040f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 8145 	beq.w	8004388 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2210      	movs	r2, #16
 8004104:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004110:	2b40      	cmp	r3, #64	; 0x40
 8004112:	f040 80bb 	bne.w	800428c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004124:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 818f 	beq.w	800444c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004134:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004138:	429a      	cmp	r2, r3
 800413a:	f080 8187 	bcs.w	800444c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004144:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0320 	and.w	r3, r3, #32
 8004156:	2b00      	cmp	r3, #0
 8004158:	f040 8087 	bne.w	800426a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004170:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004178:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004186:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800418a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004192:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800419e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1da      	bne.n	800415c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3308      	adds	r3, #8
 80041ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b0:	e853 3f00 	ldrex	r3, [r3]
 80041b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041b8:	f023 0301 	bic.w	r3, r3, #1
 80041bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3308      	adds	r3, #8
 80041c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041d6:	e841 2300 	strex	r3, r2, [r1]
 80041da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80041dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1e1      	bne.n	80041a6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	3308      	adds	r3, #8
 80041e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041ec:	e853 3f00 	ldrex	r3, [r3]
 80041f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3308      	adds	r3, #8
 8004202:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004206:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004208:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800420c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800420e:	e841 2300 	strex	r3, r2, [r1]
 8004212:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1e3      	bne.n	80041e2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2220      	movs	r2, #32
 800421e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004238:	f023 0310 	bic.w	r3, r3, #16
 800423c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800424a:	65bb      	str	r3, [r7, #88]	; 0x58
 800424c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004250:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004252:	e841 2300 	strex	r3, r2, [r1]
 8004256:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1e4      	bne.n	8004228 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004264:	4618      	mov	r0, r3
 8004266:	f7fd fa62 	bl	800172e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2202      	movs	r2, #2
 800426e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800427c:	b29b      	uxth	r3, r3
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	b29b      	uxth	r3, r3
 8004282:	4619      	mov	r1, r3
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7fc fecb 	bl	8001020 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800428a:	e0df      	b.n	800444c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004298:	b29b      	uxth	r3, r3
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 80d1 	beq.w	8004450 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80042ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80cc 	beq.w	8004450 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c0:	e853 3f00 	ldrex	r3, [r3]
 80042c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	461a      	mov	r2, r3
 80042d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042da:	647b      	str	r3, [r7, #68]	; 0x44
 80042dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042e2:	e841 2300 	strex	r3, r2, [r1]
 80042e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1e4      	bne.n	80042b8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3308      	adds	r3, #8
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	e853 3f00 	ldrex	r3, [r3]
 80042fc:	623b      	str	r3, [r7, #32]
   return(result);
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004304:	f023 0301 	bic.w	r3, r3, #1
 8004308:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3308      	adds	r3, #8
 8004312:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004316:	633a      	str	r2, [r7, #48]	; 0x30
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800431c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800431e:	e841 2300 	strex	r3, r2, [r1]
 8004322:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1e1      	bne.n	80042ee <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2220      	movs	r2, #32
 800432e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	60fb      	str	r3, [r7, #12]
   return(result);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0310 	bic.w	r3, r3, #16
 8004352:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004360:	61fb      	str	r3, [r7, #28]
 8004362:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004364:	69b9      	ldr	r1, [r7, #24]
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	e841 2300 	strex	r3, r2, [r1]
 800436c:	617b      	str	r3, [r7, #20]
   return(result);
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1e4      	bne.n	800433e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800437a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800437e:	4619      	mov	r1, r3
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7fc fe4d 	bl	8001020 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004386:	e063      	b.n	8004450 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800438c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00e      	beq.n	80043b2 <HAL_UART_IRQHandler+0x59e>
 8004394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80043a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fee1 	bl	8005172 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043b0:	e051      	b.n	8004456 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80043b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d014      	beq.n	80043e8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80043be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d105      	bne.n	80043d6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80043ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d008      	beq.n	80043e8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d03a      	beq.n	8004454 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	4798      	blx	r3
    }
    return;
 80043e6:	e035      	b.n	8004454 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d009      	beq.n	8004408 <HAL_UART_IRQHandler+0x5f4>
 80043f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 fe8b 	bl	800511c <UART_EndTransmit_IT>
    return;
 8004406:	e026      	b.n	8004456 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800440c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d009      	beq.n	8004428 <HAL_UART_IRQHandler+0x614>
 8004414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004418:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 feba 	bl	800519a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004426:	e016      	b.n	8004456 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d010      	beq.n	8004456 <HAL_UART_IRQHandler+0x642>
 8004434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004438:	2b00      	cmp	r3, #0
 800443a:	da0c      	bge.n	8004456 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fea2 	bl	8005186 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004442:	e008      	b.n	8004456 <HAL_UART_IRQHandler+0x642>
      return;
 8004444:	bf00      	nop
 8004446:	e006      	b.n	8004456 <HAL_UART_IRQHandler+0x642>
    return;
 8004448:	bf00      	nop
 800444a:	e004      	b.n	8004456 <HAL_UART_IRQHandler+0x642>
      return;
 800444c:	bf00      	nop
 800444e:	e002      	b.n	8004456 <HAL_UART_IRQHandler+0x642>
      return;
 8004450:	bf00      	nop
 8004452:	e000      	b.n	8004456 <HAL_UART_IRQHandler+0x642>
    return;
 8004454:	bf00      	nop
  }
}
 8004456:	37e8      	adds	r7, #232	; 0xe8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044b0:	b08c      	sub	sp, #48	; 0x30
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	431a      	orrs	r2, r3
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	431a      	orrs	r2, r3
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	4baf      	ldr	r3, [pc, #700]	; (8004798 <UART_SetConfig+0x2ec>)
 80044dc:	4013      	ands	r3, r2
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	6812      	ldr	r2, [r2, #0]
 80044e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044e4:	430b      	orrs	r3, r1
 80044e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4aa4      	ldr	r2, [pc, #656]	; (800479c <UART_SetConfig+0x2f0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d004      	beq.n	8004518 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004514:	4313      	orrs	r3, r2
 8004516:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004522:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	6812      	ldr	r2, [r2, #0]
 800452a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800452c:	430b      	orrs	r3, r1
 800452e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004536:	f023 010f 	bic.w	r1, r3, #15
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a95      	ldr	r2, [pc, #596]	; (80047a0 <UART_SetConfig+0x2f4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d125      	bne.n	800459c <UART_SetConfig+0xf0>
 8004550:	2003      	movs	r0, #3
 8004552:	f7ff fb68 	bl	8003c26 <LL_RCC_GetUSARTClockSource>
 8004556:	4603      	mov	r3, r0
 8004558:	2b03      	cmp	r3, #3
 800455a:	d81b      	bhi.n	8004594 <UART_SetConfig+0xe8>
 800455c:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <UART_SetConfig+0xb8>)
 800455e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004562:	bf00      	nop
 8004564:	08004575 	.word	0x08004575
 8004568:	08004585 	.word	0x08004585
 800456c:	0800457d 	.word	0x0800457d
 8004570:	0800458d 	.word	0x0800458d
 8004574:	2301      	movs	r3, #1
 8004576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800457a:	e042      	b.n	8004602 <UART_SetConfig+0x156>
 800457c:	2302      	movs	r3, #2
 800457e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004582:	e03e      	b.n	8004602 <UART_SetConfig+0x156>
 8004584:	2304      	movs	r3, #4
 8004586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800458a:	e03a      	b.n	8004602 <UART_SetConfig+0x156>
 800458c:	2308      	movs	r3, #8
 800458e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004592:	e036      	b.n	8004602 <UART_SetConfig+0x156>
 8004594:	2310      	movs	r3, #16
 8004596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800459a:	e032      	b.n	8004602 <UART_SetConfig+0x156>
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a7e      	ldr	r2, [pc, #504]	; (800479c <UART_SetConfig+0x2f0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d12a      	bne.n	80045fc <UART_SetConfig+0x150>
 80045a6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80045aa:	f7ff fb4c 	bl	8003c46 <LL_RCC_GetLPUARTClockSource>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045b4:	d01a      	beq.n	80045ec <UART_SetConfig+0x140>
 80045b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045ba:	d81b      	bhi.n	80045f4 <UART_SetConfig+0x148>
 80045bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045c0:	d00c      	beq.n	80045dc <UART_SetConfig+0x130>
 80045c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045c6:	d815      	bhi.n	80045f4 <UART_SetConfig+0x148>
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <UART_SetConfig+0x128>
 80045cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d0:	d008      	beq.n	80045e4 <UART_SetConfig+0x138>
 80045d2:	e00f      	b.n	80045f4 <UART_SetConfig+0x148>
 80045d4:	2300      	movs	r3, #0
 80045d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045da:	e012      	b.n	8004602 <UART_SetConfig+0x156>
 80045dc:	2302      	movs	r3, #2
 80045de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045e2:	e00e      	b.n	8004602 <UART_SetConfig+0x156>
 80045e4:	2304      	movs	r3, #4
 80045e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ea:	e00a      	b.n	8004602 <UART_SetConfig+0x156>
 80045ec:	2308      	movs	r3, #8
 80045ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045f2:	e006      	b.n	8004602 <UART_SetConfig+0x156>
 80045f4:	2310      	movs	r3, #16
 80045f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045fa:	e002      	b.n	8004602 <UART_SetConfig+0x156>
 80045fc:	2310      	movs	r3, #16
 80045fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a65      	ldr	r2, [pc, #404]	; (800479c <UART_SetConfig+0x2f0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	f040 8097 	bne.w	800473c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800460e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004612:	2b08      	cmp	r3, #8
 8004614:	d823      	bhi.n	800465e <UART_SetConfig+0x1b2>
 8004616:	a201      	add	r2, pc, #4	; (adr r2, 800461c <UART_SetConfig+0x170>)
 8004618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461c:	08004641 	.word	0x08004641
 8004620:	0800465f 	.word	0x0800465f
 8004624:	08004649 	.word	0x08004649
 8004628:	0800465f 	.word	0x0800465f
 800462c:	0800464f 	.word	0x0800464f
 8004630:	0800465f 	.word	0x0800465f
 8004634:	0800465f 	.word	0x0800465f
 8004638:	0800465f 	.word	0x0800465f
 800463c:	08004657 	.word	0x08004657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004640:	f7fe fdd8 	bl	80031f4 <HAL_RCC_GetPCLK1Freq>
 8004644:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004646:	e010      	b.n	800466a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004648:	4b56      	ldr	r3, [pc, #344]	; (80047a4 <UART_SetConfig+0x2f8>)
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800464c:	e00d      	b.n	800466a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800464e:	f7fe fd51 	bl	80030f4 <HAL_RCC_GetSysClockFreq>
 8004652:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004654:	e009      	b.n	800466a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800465c:	e005      	b.n	800466a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004668:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 812b 	beq.w	80048c8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	4a4c      	ldr	r2, [pc, #304]	; (80047a8 <UART_SetConfig+0x2fc>)
 8004678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800467c:	461a      	mov	r2, r3
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	fbb3 f3f2 	udiv	r3, r3, r2
 8004684:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	4613      	mov	r3, r2
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	4413      	add	r3, r2
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	429a      	cmp	r2, r3
 8004694:	d305      	bcc.n	80046a2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d903      	bls.n	80046aa <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80046a8:	e10e      	b.n	80048c8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	2200      	movs	r2, #0
 80046ae:	60bb      	str	r3, [r7, #8]
 80046b0:	60fa      	str	r2, [r7, #12]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	4a3c      	ldr	r2, [pc, #240]	; (80047a8 <UART_SetConfig+0x2fc>)
 80046b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2200      	movs	r2, #0
 80046c0:	603b      	str	r3, [r7, #0]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046cc:	f7fb fda8 	bl	8000220 <__aeabi_uldivmod>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4610      	mov	r0, r2
 80046d6:	4619      	mov	r1, r3
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	020b      	lsls	r3, r1, #8
 80046e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80046e6:	0202      	lsls	r2, r0, #8
 80046e8:	6979      	ldr	r1, [r7, #20]
 80046ea:	6849      	ldr	r1, [r1, #4]
 80046ec:	0849      	lsrs	r1, r1, #1
 80046ee:	2000      	movs	r0, #0
 80046f0:	460c      	mov	r4, r1
 80046f2:	4605      	mov	r5, r0
 80046f4:	eb12 0804 	adds.w	r8, r2, r4
 80046f8:	eb43 0905 	adc.w	r9, r3, r5
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	469a      	mov	sl, r3
 8004704:	4693      	mov	fp, r2
 8004706:	4652      	mov	r2, sl
 8004708:	465b      	mov	r3, fp
 800470a:	4640      	mov	r0, r8
 800470c:	4649      	mov	r1, r9
 800470e:	f7fb fd87 	bl	8000220 <__aeabi_uldivmod>
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	4613      	mov	r3, r2
 8004718:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004720:	d308      	bcc.n	8004734 <UART_SetConfig+0x288>
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004728:	d204      	bcs.n	8004734 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6a3a      	ldr	r2, [r7, #32]
 8004730:	60da      	str	r2, [r3, #12]
 8004732:	e0c9      	b.n	80048c8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800473a:	e0c5      	b.n	80048c8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004744:	d16d      	bne.n	8004822 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004746:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800474a:	3b01      	subs	r3, #1
 800474c:	2b07      	cmp	r3, #7
 800474e:	d82d      	bhi.n	80047ac <UART_SetConfig+0x300>
 8004750:	a201      	add	r2, pc, #4	; (adr r2, 8004758 <UART_SetConfig+0x2ac>)
 8004752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004756:	bf00      	nop
 8004758:	08004779 	.word	0x08004779
 800475c:	08004781 	.word	0x08004781
 8004760:	080047ad 	.word	0x080047ad
 8004764:	08004787 	.word	0x08004787
 8004768:	080047ad 	.word	0x080047ad
 800476c:	080047ad 	.word	0x080047ad
 8004770:	080047ad 	.word	0x080047ad
 8004774:	0800478f 	.word	0x0800478f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004778:	f7fe fd52 	bl	8003220 <HAL_RCC_GetPCLK2Freq>
 800477c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800477e:	e01b      	b.n	80047b8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004780:	4b08      	ldr	r3, [pc, #32]	; (80047a4 <UART_SetConfig+0x2f8>)
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004784:	e018      	b.n	80047b8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004786:	f7fe fcb5 	bl	80030f4 <HAL_RCC_GetSysClockFreq>
 800478a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800478c:	e014      	b.n	80047b8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800478e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004794:	e010      	b.n	80047b8 <UART_SetConfig+0x30c>
 8004796:	bf00      	nop
 8004798:	cfff69f3 	.word	0xcfff69f3
 800479c:	40008000 	.word	0x40008000
 80047a0:	40013800 	.word	0x40013800
 80047a4:	00f42400 	.word	0x00f42400
 80047a8:	0800668c 	.word	0x0800668c
      default:
        pclk = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80047b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 8084 	beq.w	80048c8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	4a4b      	ldr	r2, [pc, #300]	; (80048f4 <UART_SetConfig+0x448>)
 80047c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047ca:	461a      	mov	r2, r3
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80047d2:	005a      	lsls	r2, r3, #1
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	085b      	lsrs	r3, r3, #1
 80047da:	441a      	add	r2, r3
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	2b0f      	cmp	r3, #15
 80047ea:	d916      	bls.n	800481a <UART_SetConfig+0x36e>
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f2:	d212      	bcs.n	800481a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	f023 030f 	bic.w	r3, r3, #15
 80047fc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	085b      	lsrs	r3, r3, #1
 8004802:	b29b      	uxth	r3, r3
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	b29a      	uxth	r2, r3
 800480a:	8bfb      	ldrh	r3, [r7, #30]
 800480c:	4313      	orrs	r3, r2
 800480e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	8bfa      	ldrh	r2, [r7, #30]
 8004816:	60da      	str	r2, [r3, #12]
 8004818:	e056      	b.n	80048c8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004820:	e052      	b.n	80048c8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004822:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004826:	3b01      	subs	r3, #1
 8004828:	2b07      	cmp	r3, #7
 800482a:	d822      	bhi.n	8004872 <UART_SetConfig+0x3c6>
 800482c:	a201      	add	r2, pc, #4	; (adr r2, 8004834 <UART_SetConfig+0x388>)
 800482e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004832:	bf00      	nop
 8004834:	08004855 	.word	0x08004855
 8004838:	0800485d 	.word	0x0800485d
 800483c:	08004873 	.word	0x08004873
 8004840:	08004863 	.word	0x08004863
 8004844:	08004873 	.word	0x08004873
 8004848:	08004873 	.word	0x08004873
 800484c:	08004873 	.word	0x08004873
 8004850:	0800486b 	.word	0x0800486b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004854:	f7fe fce4 	bl	8003220 <HAL_RCC_GetPCLK2Freq>
 8004858:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800485a:	e010      	b.n	800487e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800485c:	4b26      	ldr	r3, [pc, #152]	; (80048f8 <UART_SetConfig+0x44c>)
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004860:	e00d      	b.n	800487e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004862:	f7fe fc47 	bl	80030f4 <HAL_RCC_GetSysClockFreq>
 8004866:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004868:	e009      	b.n	800487e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800486a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004870:	e005      	b.n	800487e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004872:	2300      	movs	r3, #0
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800487c:	bf00      	nop
    }

    if (pclk != 0U)
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	2b00      	cmp	r3, #0
 8004882:	d021      	beq.n	80048c8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	4a1a      	ldr	r2, [pc, #104]	; (80048f4 <UART_SetConfig+0x448>)
 800488a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800488e:	461a      	mov	r2, r3
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	fbb3 f2f2 	udiv	r2, r3, r2
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	085b      	lsrs	r3, r3, #1
 800489c:	441a      	add	r2, r3
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	2b0f      	cmp	r3, #15
 80048ac:	d909      	bls.n	80048c2 <UART_SetConfig+0x416>
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b4:	d205      	bcs.n	80048c2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	60da      	str	r2, [r3, #12]
 80048c0:	e002      	b.n	80048c8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2200      	movs	r2, #0
 80048dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2200      	movs	r2, #0
 80048e2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80048e4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3730      	adds	r7, #48	; 0x30
 80048ec:	46bd      	mov	sp, r7
 80048ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048f2:	bf00      	nop
 80048f4:	0800668c 	.word	0x0800668c
 80048f8:	00f42400 	.word	0x00f42400

080048fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004990:	f003 0310 	and.w	r3, r3, #16
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00a      	beq.n	80049ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	f003 0320 	and.w	r3, r3, #32
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d01a      	beq.n	8004a12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049fa:	d10a      	bne.n	8004a12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	605a      	str	r2, [r3, #4]
  }
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af02      	add	r7, sp, #8
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a50:	f7fc fc22 	bl	8001298 <HAL_GetTick>
 8004a54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d10e      	bne.n	8004a82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f832 	bl	8004adc <UART_WaitOnFlagUntilTimeout>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e028      	b.n	8004ad4 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d10e      	bne.n	8004aae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f81c 	bl	8004adc <UART_WaitOnFlagUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e012      	b.n	8004ad4 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b09c      	sub	sp, #112	; 0x70
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	603b      	str	r3, [r7, #0]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aec:	e0a9      	b.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af4:	f000 80a5 	beq.w	8004c42 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af8:	f7fc fbce 	bl	8001298 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d302      	bcc.n	8004b0e <UART_WaitOnFlagUntilTimeout+0x32>
 8004b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d140      	bne.n	8004b90 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b16:	e853 3f00 	ldrex	r3, [r3]
 8004b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b22:	667b      	str	r3, [r7, #100]	; 0x64
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b2e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b34:	e841 2300 	strex	r3, r2, [r1]
 8004b38:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1e6      	bne.n	8004b0e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3308      	adds	r3, #8
 8004b46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b4a:	e853 3f00 	ldrex	r3, [r3]
 8004b4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b52:	f023 0301 	bic.w	r3, r3, #1
 8004b56:	663b      	str	r3, [r7, #96]	; 0x60
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b60:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b62:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e5      	bne.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e069      	b.n	8004c64 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d051      	beq.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bac:	d149      	bne.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bb6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc0:	e853 3f00 	ldrex	r3, [r3]
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8004bd8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bde:	e841 2300 	strex	r3, r2, [r1]
 8004be2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1e6      	bne.n	8004bb8 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	3308      	adds	r3, #8
 8004bf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	e853 3f00 	ldrex	r3, [r3]
 8004bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f023 0301 	bic.w	r3, r3, #1
 8004c00:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3308      	adds	r3, #8
 8004c08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c0a:	623a      	str	r2, [r7, #32]
 8004c0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0e:	69f9      	ldr	r1, [r7, #28]
 8004c10:	6a3a      	ldr	r2, [r7, #32]
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1e5      	bne.n	8004bea <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e010      	b.n	8004c64 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69da      	ldr	r2, [r3, #28]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	bf0c      	ite	eq
 8004c52:	2301      	moveq	r3, #1
 8004c54:	2300      	movne	r3, #0
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	461a      	mov	r2, r3
 8004c5a:	79fb      	ldrb	r3, [r7, #7]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	f43f af46 	beq.w	8004aee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3770      	adds	r7, #112	; 0x70
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b096      	sub	sp, #88	; 0x58
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	4613      	mov	r3, r2
 8004c78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	88fa      	ldrh	r2, [r7, #6]
 8004c84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2222      	movs	r2, #34	; 0x22
 8004c94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d02d      	beq.n	8004cfe <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ca8:	4a40      	ldr	r2, [pc, #256]	; (8004dac <UART_Start_Receive_DMA+0x140>)
 8004caa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cb2:	4a3f      	ldr	r2, [pc, #252]	; (8004db0 <UART_Start_Receive_DMA+0x144>)
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cbc:	4a3d      	ldr	r2, [pc, #244]	; (8004db4 <UART_Start_Receive_DMA+0x148>)
 8004cbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3324      	adds	r3, #36	; 0x24
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cdc:	461a      	mov	r2, r3
 8004cde:	88fb      	ldrh	r3, [r7, #6]
 8004ce0:	f7fc fcaa 	bl	8001638 <HAL_DMA_Start_IT>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d009      	beq.n	8004cfe <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2210      	movs	r2, #16
 8004cee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e051      	b.n	8004da2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d018      	beq.n	8004d38 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d0e:	e853 3f00 	ldrex	r3, [r3]
 8004d12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d1a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d24:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d26:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d28:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d2c:	e841 2300 	strex	r3, r2, [r1]
 8004d30:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1e6      	bne.n	8004d06 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	e853 3f00 	ldrex	r3, [r3]
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	f043 0301 	orr.w	r3, r3, #1
 8004d4e:	653b      	str	r3, [r7, #80]	; 0x50
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3308      	adds	r3, #8
 8004d56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d58:	637a      	str	r2, [r7, #52]	; 0x34
 8004d5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d60:	e841 2300 	strex	r3, r2, [r1]
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e5      	bne.n	8004d38 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3308      	adds	r3, #8
 8004d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	e853 3f00 	ldrex	r3, [r3]
 8004d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3308      	adds	r3, #8
 8004d8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d8c:	623a      	str	r2, [r7, #32]
 8004d8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d90:	69f9      	ldr	r1, [r7, #28]
 8004d92:	6a3a      	ldr	r2, [r7, #32]
 8004d94:	e841 2300 	strex	r3, r2, [r1]
 8004d98:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e5      	bne.n	8004d6c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3758      	adds	r7, #88	; 0x58
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	08004f07 	.word	0x08004f07
 8004db0:	08005033 	.word	0x08005033
 8004db4:	08005071 	.word	0x08005071

08004db8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b08f      	sub	sp, #60	; 0x3c
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	e853 3f00 	ldrex	r3, [r3]
 8004dcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004de0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004de6:	e841 2300 	strex	r3, r2, [r1]
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1e6      	bne.n	8004dc0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3308      	adds	r3, #8
 8004df8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	e853 3f00 	ldrex	r3, [r3]
 8004e00:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e08:	633b      	str	r3, [r7, #48]	; 0x30
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3308      	adds	r3, #8
 8004e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e12:	61ba      	str	r2, [r7, #24]
 8004e14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	6979      	ldr	r1, [r7, #20]
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e5      	bne.n	8004df2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8004e2e:	bf00      	nop
 8004e30:	373c      	adds	r7, #60	; 0x3c
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b095      	sub	sp, #84	; 0x54
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4a:	e853 3f00 	ldrex	r3, [r3]
 8004e4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e60:	643b      	str	r3, [r7, #64]	; 0x40
 8004e62:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e68:	e841 2300 	strex	r3, r2, [r1]
 8004e6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e6      	bne.n	8004e42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3308      	adds	r3, #8
 8004e7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	e853 3f00 	ldrex	r3, [r3]
 8004e82:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	f023 0301 	bic.w	r3, r3, #1
 8004e8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	3308      	adds	r3, #8
 8004e96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ea0:	e841 2300 	strex	r3, r2, [r1]
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1e3      	bne.n	8004e74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d118      	bne.n	8004ee6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	e853 3f00 	ldrex	r3, [r3]
 8004ec0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f023 0310 	bic.w	r3, r3, #16
 8004ec8:	647b      	str	r3, [r7, #68]	; 0x44
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed2:	61bb      	str	r3, [r7, #24]
 8004ed4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed6:	6979      	ldr	r1, [r7, #20]
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	e841 2300 	strex	r3, r2, [r1]
 8004ede:	613b      	str	r3, [r7, #16]
   return(result);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1e6      	bne.n	8004eb4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004efa:	bf00      	nop
 8004efc:	3754      	adds	r7, #84	; 0x54
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b09c      	sub	sp, #112	; 0x70
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0320 	and.w	r3, r3, #32
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d171      	bne.n	8005006 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8004f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f24:	2200      	movs	r2, #0
 8004f26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f32:	e853 3f00 	ldrex	r3, [r3]
 8004f36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	461a      	mov	r2, r3
 8004f46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f48:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f4a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f50:	e841 2300 	strex	r3, r2, [r1]
 8004f54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e6      	bne.n	8004f2a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3308      	adds	r3, #8
 8004f62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6e:	f023 0301 	bic.w	r3, r3, #1
 8004f72:	667b      	str	r3, [r7, #100]	; 0x64
 8004f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3308      	adds	r3, #8
 8004f7a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f7c:	647a      	str	r2, [r7, #68]	; 0x44
 8004f7e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e5      	bne.n	8004f5c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3308      	adds	r3, #8
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	623b      	str	r3, [r7, #32]
   return(result);
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fa6:	663b      	str	r3, [r7, #96]	; 0x60
 8004fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3308      	adds	r3, #8
 8004fae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fb0:	633a      	str	r2, [r7, #48]	; 0x30
 8004fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e5      	bne.n	8004f90 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d118      	bne.n	8005006 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	e853 3f00 	ldrex	r3, [r3]
 8004fe0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f023 0310 	bic.w	r3, r3, #16
 8004fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ff2:	61fb      	str	r3, [r7, #28]
 8004ff4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff6:	69b9      	ldr	r1, [r7, #24]
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	e841 2300 	strex	r3, r2, [r1]
 8004ffe:	617b      	str	r3, [r7, #20]
   return(result);
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1e6      	bne.n	8004fd4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005008:	2200      	movs	r2, #0
 800500a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800500c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800500e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005010:	2b01      	cmp	r3, #1
 8005012:	d107      	bne.n	8005024 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005016:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800501a:	4619      	mov	r1, r3
 800501c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800501e:	f7fb ffff 	bl	8001020 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005022:	e002      	b.n	800502a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005024:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005026:	f7ff fa23 	bl	8004470 <HAL_UART_RxCpltCallback>
}
 800502a:	bf00      	nop
 800502c:	3770      	adds	r7, #112	; 0x70
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b084      	sub	sp, #16
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2201      	movs	r2, #1
 8005044:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800504a:	2b01      	cmp	r3, #1
 800504c:	d109      	bne.n	8005062 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005054:	085b      	lsrs	r3, r3, #1
 8005056:	b29b      	uxth	r3, r3
 8005058:	4619      	mov	r1, r3
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f7fb ffe0 	bl	8001020 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005060:	e002      	b.n	8005068 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f7ff fa0e 	bl	8004484 <HAL_UART_RxHalfCpltCallback>
}
 8005068:	bf00      	nop
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005084:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800508c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005098:	2b80      	cmp	r3, #128	; 0x80
 800509a:	d109      	bne.n	80050b0 <UART_DMAError+0x40>
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	2b21      	cmp	r3, #33	; 0x21
 80050a0:	d106      	bne.n	80050b0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80050aa:	6978      	ldr	r0, [r7, #20]
 80050ac:	f7ff fe84 	bl	8004db8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ba:	2b40      	cmp	r3, #64	; 0x40
 80050bc:	d109      	bne.n	80050d2 <UART_DMAError+0x62>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b22      	cmp	r3, #34	; 0x22
 80050c2:	d106      	bne.n	80050d2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80050cc:	6978      	ldr	r0, [r7, #20]
 80050ce:	f7ff feb4 	bl	8004e3a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d8:	f043 0210 	orr.w	r2, r3, #16
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050e2:	6978      	ldr	r0, [r7, #20]
 80050e4:	f7ff f9d8 	bl	8004498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050e8:	bf00      	nop
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff f9c2 	bl	8004498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005114:	bf00      	nop
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b088      	sub	sp, #32
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	e853 3f00 	ldrex	r3, [r3]
 8005130:	60bb      	str	r3, [r7, #8]
   return(result);
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005138:	61fb      	str	r3, [r7, #28]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	461a      	mov	r2, r3
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005146:	6979      	ldr	r1, [r7, #20]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	e841 2300 	strex	r3, r2, [r1]
 800514e:	613b      	str	r3, [r7, #16]
   return(result);
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1e6      	bne.n	8005124 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2220      	movs	r2, #32
 800515a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7ff f979 	bl	800445c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800516a:	bf00      	nop
 800516c:	3720      	adds	r7, #32
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b085      	sub	sp, #20
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d101      	bne.n	80051c4 <HAL_UARTEx_DisableFifoMode+0x16>
 80051c0:	2302      	movs	r3, #2
 80051c2:	e027      	b.n	8005214 <HAL_UARTEx_DisableFifoMode+0x66>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2224      	movs	r2, #36	; 0x24
 80051d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0201 	bic.w	r2, r2, #1
 80051ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80051f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2220      	movs	r2, #32
 8005206:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005230:	2b01      	cmp	r3, #1
 8005232:	d101      	bne.n	8005238 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005234:	2302      	movs	r3, #2
 8005236:	e02d      	b.n	8005294 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2224      	movs	r2, #36	; 0x24
 8005244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0201 	bic.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f8a3 	bl	80053c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2220      	movs	r2, #32
 8005286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e02d      	b.n	8005310 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2224      	movs	r2, #36	; 0x24
 80052c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0201 	bic.w	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f865 	bl	80053c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2220      	movs	r2, #32
 8005302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08c      	sub	sp, #48	; 0x30
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	4613      	mov	r3, r2
 8005324:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800532c:	2b20      	cmp	r3, #32
 800532e:	d142      	bne.n	80053b6 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8005336:	88fb      	ldrh	r3, [r7, #6]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e03b      	b.n	80053b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2201      	movs	r2, #1
 8005344:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800534c:	88fb      	ldrh	r3, [r7, #6]
 800534e:	461a      	mov	r2, r3
 8005350:	68b9      	ldr	r1, [r7, #8]
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f7ff fc8a 	bl	8004c6c <UART_Start_Receive_DMA>
 8005358:	4603      	mov	r3, r0
 800535a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800535e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005362:	2b00      	cmp	r3, #0
 8005364:	d124      	bne.n	80053b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800536a:	2b01      	cmp	r3, #1
 800536c:	d11d      	bne.n	80053aa <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2210      	movs	r2, #16
 8005374:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	617b      	str	r3, [r7, #20]
   return(result);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f043 0310 	orr.w	r3, r3, #16
 800538a:	62bb      	str	r3, [r7, #40]	; 0x28
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	461a      	mov	r2, r3
 8005392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005394:	627b      	str	r3, [r7, #36]	; 0x24
 8005396:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	6a39      	ldr	r1, [r7, #32]
 800539a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e6      	bne.n	8005376 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80053a8:	e002      	b.n	80053b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80053b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80053b4:	e000      	b.n	80053b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80053b6:	2302      	movs	r3, #2
  }
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3730      	adds	r7, #48	; 0x30
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d108      	bne.n	80053e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80053e0:	e031      	b.n	8005446 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80053e2:	2308      	movs	r3, #8
 80053e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80053e6:	2308      	movs	r3, #8
 80053e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	0e5b      	lsrs	r3, r3, #25
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	0f5b      	lsrs	r3, r3, #29
 8005402:	b2db      	uxtb	r3, r3
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800540a:	7bbb      	ldrb	r3, [r7, #14]
 800540c:	7b3a      	ldrb	r2, [r7, #12]
 800540e:	4911      	ldr	r1, [pc, #68]	; (8005454 <UARTEx_SetNbDataToProcess+0x94>)
 8005410:	5c8a      	ldrb	r2, [r1, r2]
 8005412:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005416:	7b3a      	ldrb	r2, [r7, #12]
 8005418:	490f      	ldr	r1, [pc, #60]	; (8005458 <UARTEx_SetNbDataToProcess+0x98>)
 800541a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800541c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005420:	b29a      	uxth	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005428:	7bfb      	ldrb	r3, [r7, #15]
 800542a:	7b7a      	ldrb	r2, [r7, #13]
 800542c:	4909      	ldr	r1, [pc, #36]	; (8005454 <UARTEx_SetNbDataToProcess+0x94>)
 800542e:	5c8a      	ldrb	r2, [r1, r2]
 8005430:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005434:	7b7a      	ldrb	r2, [r7, #13]
 8005436:	4908      	ldr	r1, [pc, #32]	; (8005458 <UARTEx_SetNbDataToProcess+0x98>)
 8005438:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800543a:	fb93 f3f2 	sdiv	r3, r3, r2
 800543e:	b29a      	uxth	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005446:	bf00      	nop
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	080066a4 	.word	0x080066a4
 8005458:	080066ac 	.word	0x080066ac

0800545c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005464:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005468:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005470:	b29a      	uxth	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	b29b      	uxth	r3, r3
 8005476:	43db      	mvns	r3, r3
 8005478:	b29b      	uxth	r3, r3
 800547a:	4013      	ands	r3, r2
 800547c:	b29a      	uxth	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005492:	b084      	sub	sp, #16
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	f107 0014 	add.w	r0, r7, #20
 80054a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	b004      	add	sp, #16
 80054d2:	4770      	bx	lr

080054d4 <__errno>:
 80054d4:	4b01      	ldr	r3, [pc, #4]	; (80054dc <__errno+0x8>)
 80054d6:	6818      	ldr	r0, [r3, #0]
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	20000024 	.word	0x20000024

080054e0 <__libc_init_array>:
 80054e0:	b570      	push	{r4, r5, r6, lr}
 80054e2:	4d0d      	ldr	r5, [pc, #52]	; (8005518 <__libc_init_array+0x38>)
 80054e4:	4c0d      	ldr	r4, [pc, #52]	; (800551c <__libc_init_array+0x3c>)
 80054e6:	1b64      	subs	r4, r4, r5
 80054e8:	10a4      	asrs	r4, r4, #2
 80054ea:	2600      	movs	r6, #0
 80054ec:	42a6      	cmp	r6, r4
 80054ee:	d109      	bne.n	8005504 <__libc_init_array+0x24>
 80054f0:	4d0b      	ldr	r5, [pc, #44]	; (8005520 <__libc_init_array+0x40>)
 80054f2:	4c0c      	ldr	r4, [pc, #48]	; (8005524 <__libc_init_array+0x44>)
 80054f4:	f001 f824 	bl	8006540 <_init>
 80054f8:	1b64      	subs	r4, r4, r5
 80054fa:	10a4      	asrs	r4, r4, #2
 80054fc:	2600      	movs	r6, #0
 80054fe:	42a6      	cmp	r6, r4
 8005500:	d105      	bne.n	800550e <__libc_init_array+0x2e>
 8005502:	bd70      	pop	{r4, r5, r6, pc}
 8005504:	f855 3b04 	ldr.w	r3, [r5], #4
 8005508:	4798      	blx	r3
 800550a:	3601      	adds	r6, #1
 800550c:	e7ee      	b.n	80054ec <__libc_init_array+0xc>
 800550e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005512:	4798      	blx	r3
 8005514:	3601      	adds	r6, #1
 8005516:	e7f2      	b.n	80054fe <__libc_init_array+0x1e>
 8005518:	08006754 	.word	0x08006754
 800551c:	08006754 	.word	0x08006754
 8005520:	08006754 	.word	0x08006754
 8005524:	08006758 	.word	0x08006758

08005528 <memset>:
 8005528:	4402      	add	r2, r0
 800552a:	4603      	mov	r3, r0
 800552c:	4293      	cmp	r3, r2
 800552e:	d100      	bne.n	8005532 <memset+0xa>
 8005530:	4770      	bx	lr
 8005532:	f803 1b01 	strb.w	r1, [r3], #1
 8005536:	e7f9      	b.n	800552c <memset+0x4>

08005538 <iprintf>:
 8005538:	b40f      	push	{r0, r1, r2, r3}
 800553a:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <iprintf+0x2c>)
 800553c:	b513      	push	{r0, r1, r4, lr}
 800553e:	681c      	ldr	r4, [r3, #0]
 8005540:	b124      	cbz	r4, 800554c <iprintf+0x14>
 8005542:	69a3      	ldr	r3, [r4, #24]
 8005544:	b913      	cbnz	r3, 800554c <iprintf+0x14>
 8005546:	4620      	mov	r0, r4
 8005548:	f000 fa5e 	bl	8005a08 <__sinit>
 800554c:	ab05      	add	r3, sp, #20
 800554e:	9a04      	ldr	r2, [sp, #16]
 8005550:	68a1      	ldr	r1, [r4, #8]
 8005552:	9301      	str	r3, [sp, #4]
 8005554:	4620      	mov	r0, r4
 8005556:	f000 fc67 	bl	8005e28 <_vfiprintf_r>
 800555a:	b002      	add	sp, #8
 800555c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005560:	b004      	add	sp, #16
 8005562:	4770      	bx	lr
 8005564:	20000024 	.word	0x20000024

08005568 <_puts_r>:
 8005568:	b570      	push	{r4, r5, r6, lr}
 800556a:	460e      	mov	r6, r1
 800556c:	4605      	mov	r5, r0
 800556e:	b118      	cbz	r0, 8005578 <_puts_r+0x10>
 8005570:	6983      	ldr	r3, [r0, #24]
 8005572:	b90b      	cbnz	r3, 8005578 <_puts_r+0x10>
 8005574:	f000 fa48 	bl	8005a08 <__sinit>
 8005578:	69ab      	ldr	r3, [r5, #24]
 800557a:	68ac      	ldr	r4, [r5, #8]
 800557c:	b913      	cbnz	r3, 8005584 <_puts_r+0x1c>
 800557e:	4628      	mov	r0, r5
 8005580:	f000 fa42 	bl	8005a08 <__sinit>
 8005584:	4b2c      	ldr	r3, [pc, #176]	; (8005638 <_puts_r+0xd0>)
 8005586:	429c      	cmp	r4, r3
 8005588:	d120      	bne.n	80055cc <_puts_r+0x64>
 800558a:	686c      	ldr	r4, [r5, #4]
 800558c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800558e:	07db      	lsls	r3, r3, #31
 8005590:	d405      	bmi.n	800559e <_puts_r+0x36>
 8005592:	89a3      	ldrh	r3, [r4, #12]
 8005594:	0598      	lsls	r0, r3, #22
 8005596:	d402      	bmi.n	800559e <_puts_r+0x36>
 8005598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800559a:	f000 fad3 	bl	8005b44 <__retarget_lock_acquire_recursive>
 800559e:	89a3      	ldrh	r3, [r4, #12]
 80055a0:	0719      	lsls	r1, r3, #28
 80055a2:	d51d      	bpl.n	80055e0 <_puts_r+0x78>
 80055a4:	6923      	ldr	r3, [r4, #16]
 80055a6:	b1db      	cbz	r3, 80055e0 <_puts_r+0x78>
 80055a8:	3e01      	subs	r6, #1
 80055aa:	68a3      	ldr	r3, [r4, #8]
 80055ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80055b0:	3b01      	subs	r3, #1
 80055b2:	60a3      	str	r3, [r4, #8]
 80055b4:	bb39      	cbnz	r1, 8005606 <_puts_r+0x9e>
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	da38      	bge.n	800562c <_puts_r+0xc4>
 80055ba:	4622      	mov	r2, r4
 80055bc:	210a      	movs	r1, #10
 80055be:	4628      	mov	r0, r5
 80055c0:	f000 f848 	bl	8005654 <__swbuf_r>
 80055c4:	3001      	adds	r0, #1
 80055c6:	d011      	beq.n	80055ec <_puts_r+0x84>
 80055c8:	250a      	movs	r5, #10
 80055ca:	e011      	b.n	80055f0 <_puts_r+0x88>
 80055cc:	4b1b      	ldr	r3, [pc, #108]	; (800563c <_puts_r+0xd4>)
 80055ce:	429c      	cmp	r4, r3
 80055d0:	d101      	bne.n	80055d6 <_puts_r+0x6e>
 80055d2:	68ac      	ldr	r4, [r5, #8]
 80055d4:	e7da      	b.n	800558c <_puts_r+0x24>
 80055d6:	4b1a      	ldr	r3, [pc, #104]	; (8005640 <_puts_r+0xd8>)
 80055d8:	429c      	cmp	r4, r3
 80055da:	bf08      	it	eq
 80055dc:	68ec      	ldreq	r4, [r5, #12]
 80055de:	e7d5      	b.n	800558c <_puts_r+0x24>
 80055e0:	4621      	mov	r1, r4
 80055e2:	4628      	mov	r0, r5
 80055e4:	f000 f888 	bl	80056f8 <__swsetup_r>
 80055e8:	2800      	cmp	r0, #0
 80055ea:	d0dd      	beq.n	80055a8 <_puts_r+0x40>
 80055ec:	f04f 35ff 	mov.w	r5, #4294967295
 80055f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055f2:	07da      	lsls	r2, r3, #31
 80055f4:	d405      	bmi.n	8005602 <_puts_r+0x9a>
 80055f6:	89a3      	ldrh	r3, [r4, #12]
 80055f8:	059b      	lsls	r3, r3, #22
 80055fa:	d402      	bmi.n	8005602 <_puts_r+0x9a>
 80055fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055fe:	f000 faa2 	bl	8005b46 <__retarget_lock_release_recursive>
 8005602:	4628      	mov	r0, r5
 8005604:	bd70      	pop	{r4, r5, r6, pc}
 8005606:	2b00      	cmp	r3, #0
 8005608:	da04      	bge.n	8005614 <_puts_r+0xac>
 800560a:	69a2      	ldr	r2, [r4, #24]
 800560c:	429a      	cmp	r2, r3
 800560e:	dc06      	bgt.n	800561e <_puts_r+0xb6>
 8005610:	290a      	cmp	r1, #10
 8005612:	d004      	beq.n	800561e <_puts_r+0xb6>
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	6022      	str	r2, [r4, #0]
 800561a:	7019      	strb	r1, [r3, #0]
 800561c:	e7c5      	b.n	80055aa <_puts_r+0x42>
 800561e:	4622      	mov	r2, r4
 8005620:	4628      	mov	r0, r5
 8005622:	f000 f817 	bl	8005654 <__swbuf_r>
 8005626:	3001      	adds	r0, #1
 8005628:	d1bf      	bne.n	80055aa <_puts_r+0x42>
 800562a:	e7df      	b.n	80055ec <_puts_r+0x84>
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	250a      	movs	r5, #10
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	6022      	str	r2, [r4, #0]
 8005634:	701d      	strb	r5, [r3, #0]
 8005636:	e7db      	b.n	80055f0 <_puts_r+0x88>
 8005638:	080066d8 	.word	0x080066d8
 800563c:	080066f8 	.word	0x080066f8
 8005640:	080066b8 	.word	0x080066b8

08005644 <puts>:
 8005644:	4b02      	ldr	r3, [pc, #8]	; (8005650 <puts+0xc>)
 8005646:	4601      	mov	r1, r0
 8005648:	6818      	ldr	r0, [r3, #0]
 800564a:	f7ff bf8d 	b.w	8005568 <_puts_r>
 800564e:	bf00      	nop
 8005650:	20000024 	.word	0x20000024

08005654 <__swbuf_r>:
 8005654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005656:	460e      	mov	r6, r1
 8005658:	4614      	mov	r4, r2
 800565a:	4605      	mov	r5, r0
 800565c:	b118      	cbz	r0, 8005666 <__swbuf_r+0x12>
 800565e:	6983      	ldr	r3, [r0, #24]
 8005660:	b90b      	cbnz	r3, 8005666 <__swbuf_r+0x12>
 8005662:	f000 f9d1 	bl	8005a08 <__sinit>
 8005666:	4b21      	ldr	r3, [pc, #132]	; (80056ec <__swbuf_r+0x98>)
 8005668:	429c      	cmp	r4, r3
 800566a:	d12b      	bne.n	80056c4 <__swbuf_r+0x70>
 800566c:	686c      	ldr	r4, [r5, #4]
 800566e:	69a3      	ldr	r3, [r4, #24]
 8005670:	60a3      	str	r3, [r4, #8]
 8005672:	89a3      	ldrh	r3, [r4, #12]
 8005674:	071a      	lsls	r2, r3, #28
 8005676:	d52f      	bpl.n	80056d8 <__swbuf_r+0x84>
 8005678:	6923      	ldr	r3, [r4, #16]
 800567a:	b36b      	cbz	r3, 80056d8 <__swbuf_r+0x84>
 800567c:	6923      	ldr	r3, [r4, #16]
 800567e:	6820      	ldr	r0, [r4, #0]
 8005680:	1ac0      	subs	r0, r0, r3
 8005682:	6963      	ldr	r3, [r4, #20]
 8005684:	b2f6      	uxtb	r6, r6
 8005686:	4283      	cmp	r3, r0
 8005688:	4637      	mov	r7, r6
 800568a:	dc04      	bgt.n	8005696 <__swbuf_r+0x42>
 800568c:	4621      	mov	r1, r4
 800568e:	4628      	mov	r0, r5
 8005690:	f000 f926 	bl	80058e0 <_fflush_r>
 8005694:	bb30      	cbnz	r0, 80056e4 <__swbuf_r+0x90>
 8005696:	68a3      	ldr	r3, [r4, #8]
 8005698:	3b01      	subs	r3, #1
 800569a:	60a3      	str	r3, [r4, #8]
 800569c:	6823      	ldr	r3, [r4, #0]
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	6022      	str	r2, [r4, #0]
 80056a2:	701e      	strb	r6, [r3, #0]
 80056a4:	6963      	ldr	r3, [r4, #20]
 80056a6:	3001      	adds	r0, #1
 80056a8:	4283      	cmp	r3, r0
 80056aa:	d004      	beq.n	80056b6 <__swbuf_r+0x62>
 80056ac:	89a3      	ldrh	r3, [r4, #12]
 80056ae:	07db      	lsls	r3, r3, #31
 80056b0:	d506      	bpl.n	80056c0 <__swbuf_r+0x6c>
 80056b2:	2e0a      	cmp	r6, #10
 80056b4:	d104      	bne.n	80056c0 <__swbuf_r+0x6c>
 80056b6:	4621      	mov	r1, r4
 80056b8:	4628      	mov	r0, r5
 80056ba:	f000 f911 	bl	80058e0 <_fflush_r>
 80056be:	b988      	cbnz	r0, 80056e4 <__swbuf_r+0x90>
 80056c0:	4638      	mov	r0, r7
 80056c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056c4:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <__swbuf_r+0x9c>)
 80056c6:	429c      	cmp	r4, r3
 80056c8:	d101      	bne.n	80056ce <__swbuf_r+0x7a>
 80056ca:	68ac      	ldr	r4, [r5, #8]
 80056cc:	e7cf      	b.n	800566e <__swbuf_r+0x1a>
 80056ce:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <__swbuf_r+0xa0>)
 80056d0:	429c      	cmp	r4, r3
 80056d2:	bf08      	it	eq
 80056d4:	68ec      	ldreq	r4, [r5, #12]
 80056d6:	e7ca      	b.n	800566e <__swbuf_r+0x1a>
 80056d8:	4621      	mov	r1, r4
 80056da:	4628      	mov	r0, r5
 80056dc:	f000 f80c 	bl	80056f8 <__swsetup_r>
 80056e0:	2800      	cmp	r0, #0
 80056e2:	d0cb      	beq.n	800567c <__swbuf_r+0x28>
 80056e4:	f04f 37ff 	mov.w	r7, #4294967295
 80056e8:	e7ea      	b.n	80056c0 <__swbuf_r+0x6c>
 80056ea:	bf00      	nop
 80056ec:	080066d8 	.word	0x080066d8
 80056f0:	080066f8 	.word	0x080066f8
 80056f4:	080066b8 	.word	0x080066b8

080056f8 <__swsetup_r>:
 80056f8:	4b32      	ldr	r3, [pc, #200]	; (80057c4 <__swsetup_r+0xcc>)
 80056fa:	b570      	push	{r4, r5, r6, lr}
 80056fc:	681d      	ldr	r5, [r3, #0]
 80056fe:	4606      	mov	r6, r0
 8005700:	460c      	mov	r4, r1
 8005702:	b125      	cbz	r5, 800570e <__swsetup_r+0x16>
 8005704:	69ab      	ldr	r3, [r5, #24]
 8005706:	b913      	cbnz	r3, 800570e <__swsetup_r+0x16>
 8005708:	4628      	mov	r0, r5
 800570a:	f000 f97d 	bl	8005a08 <__sinit>
 800570e:	4b2e      	ldr	r3, [pc, #184]	; (80057c8 <__swsetup_r+0xd0>)
 8005710:	429c      	cmp	r4, r3
 8005712:	d10f      	bne.n	8005734 <__swsetup_r+0x3c>
 8005714:	686c      	ldr	r4, [r5, #4]
 8005716:	89a3      	ldrh	r3, [r4, #12]
 8005718:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800571c:	0719      	lsls	r1, r3, #28
 800571e:	d42c      	bmi.n	800577a <__swsetup_r+0x82>
 8005720:	06dd      	lsls	r5, r3, #27
 8005722:	d411      	bmi.n	8005748 <__swsetup_r+0x50>
 8005724:	2309      	movs	r3, #9
 8005726:	6033      	str	r3, [r6, #0]
 8005728:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800572c:	81a3      	strh	r3, [r4, #12]
 800572e:	f04f 30ff 	mov.w	r0, #4294967295
 8005732:	e03e      	b.n	80057b2 <__swsetup_r+0xba>
 8005734:	4b25      	ldr	r3, [pc, #148]	; (80057cc <__swsetup_r+0xd4>)
 8005736:	429c      	cmp	r4, r3
 8005738:	d101      	bne.n	800573e <__swsetup_r+0x46>
 800573a:	68ac      	ldr	r4, [r5, #8]
 800573c:	e7eb      	b.n	8005716 <__swsetup_r+0x1e>
 800573e:	4b24      	ldr	r3, [pc, #144]	; (80057d0 <__swsetup_r+0xd8>)
 8005740:	429c      	cmp	r4, r3
 8005742:	bf08      	it	eq
 8005744:	68ec      	ldreq	r4, [r5, #12]
 8005746:	e7e6      	b.n	8005716 <__swsetup_r+0x1e>
 8005748:	0758      	lsls	r0, r3, #29
 800574a:	d512      	bpl.n	8005772 <__swsetup_r+0x7a>
 800574c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800574e:	b141      	cbz	r1, 8005762 <__swsetup_r+0x6a>
 8005750:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005754:	4299      	cmp	r1, r3
 8005756:	d002      	beq.n	800575e <__swsetup_r+0x66>
 8005758:	4630      	mov	r0, r6
 800575a:	f000 fa5b 	bl	8005c14 <_free_r>
 800575e:	2300      	movs	r3, #0
 8005760:	6363      	str	r3, [r4, #52]	; 0x34
 8005762:	89a3      	ldrh	r3, [r4, #12]
 8005764:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005768:	81a3      	strh	r3, [r4, #12]
 800576a:	2300      	movs	r3, #0
 800576c:	6063      	str	r3, [r4, #4]
 800576e:	6923      	ldr	r3, [r4, #16]
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	89a3      	ldrh	r3, [r4, #12]
 8005774:	f043 0308 	orr.w	r3, r3, #8
 8005778:	81a3      	strh	r3, [r4, #12]
 800577a:	6923      	ldr	r3, [r4, #16]
 800577c:	b94b      	cbnz	r3, 8005792 <__swsetup_r+0x9a>
 800577e:	89a3      	ldrh	r3, [r4, #12]
 8005780:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005788:	d003      	beq.n	8005792 <__swsetup_r+0x9a>
 800578a:	4621      	mov	r1, r4
 800578c:	4630      	mov	r0, r6
 800578e:	f000 fa01 	bl	8005b94 <__smakebuf_r>
 8005792:	89a0      	ldrh	r0, [r4, #12]
 8005794:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005798:	f010 0301 	ands.w	r3, r0, #1
 800579c:	d00a      	beq.n	80057b4 <__swsetup_r+0xbc>
 800579e:	2300      	movs	r3, #0
 80057a0:	60a3      	str	r3, [r4, #8]
 80057a2:	6963      	ldr	r3, [r4, #20]
 80057a4:	425b      	negs	r3, r3
 80057a6:	61a3      	str	r3, [r4, #24]
 80057a8:	6923      	ldr	r3, [r4, #16]
 80057aa:	b943      	cbnz	r3, 80057be <__swsetup_r+0xc6>
 80057ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057b0:	d1ba      	bne.n	8005728 <__swsetup_r+0x30>
 80057b2:	bd70      	pop	{r4, r5, r6, pc}
 80057b4:	0781      	lsls	r1, r0, #30
 80057b6:	bf58      	it	pl
 80057b8:	6963      	ldrpl	r3, [r4, #20]
 80057ba:	60a3      	str	r3, [r4, #8]
 80057bc:	e7f4      	b.n	80057a8 <__swsetup_r+0xb0>
 80057be:	2000      	movs	r0, #0
 80057c0:	e7f7      	b.n	80057b2 <__swsetup_r+0xba>
 80057c2:	bf00      	nop
 80057c4:	20000024 	.word	0x20000024
 80057c8:	080066d8 	.word	0x080066d8
 80057cc:	080066f8 	.word	0x080066f8
 80057d0:	080066b8 	.word	0x080066b8

080057d4 <__sflush_r>:
 80057d4:	898a      	ldrh	r2, [r1, #12]
 80057d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057da:	4605      	mov	r5, r0
 80057dc:	0710      	lsls	r0, r2, #28
 80057de:	460c      	mov	r4, r1
 80057e0:	d458      	bmi.n	8005894 <__sflush_r+0xc0>
 80057e2:	684b      	ldr	r3, [r1, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	dc05      	bgt.n	80057f4 <__sflush_r+0x20>
 80057e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	dc02      	bgt.n	80057f4 <__sflush_r+0x20>
 80057ee:	2000      	movs	r0, #0
 80057f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057f6:	2e00      	cmp	r6, #0
 80057f8:	d0f9      	beq.n	80057ee <__sflush_r+0x1a>
 80057fa:	2300      	movs	r3, #0
 80057fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005800:	682f      	ldr	r7, [r5, #0]
 8005802:	602b      	str	r3, [r5, #0]
 8005804:	d032      	beq.n	800586c <__sflush_r+0x98>
 8005806:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005808:	89a3      	ldrh	r3, [r4, #12]
 800580a:	075a      	lsls	r2, r3, #29
 800580c:	d505      	bpl.n	800581a <__sflush_r+0x46>
 800580e:	6863      	ldr	r3, [r4, #4]
 8005810:	1ac0      	subs	r0, r0, r3
 8005812:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005814:	b10b      	cbz	r3, 800581a <__sflush_r+0x46>
 8005816:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005818:	1ac0      	subs	r0, r0, r3
 800581a:	2300      	movs	r3, #0
 800581c:	4602      	mov	r2, r0
 800581e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005820:	6a21      	ldr	r1, [r4, #32]
 8005822:	4628      	mov	r0, r5
 8005824:	47b0      	blx	r6
 8005826:	1c43      	adds	r3, r0, #1
 8005828:	89a3      	ldrh	r3, [r4, #12]
 800582a:	d106      	bne.n	800583a <__sflush_r+0x66>
 800582c:	6829      	ldr	r1, [r5, #0]
 800582e:	291d      	cmp	r1, #29
 8005830:	d82c      	bhi.n	800588c <__sflush_r+0xb8>
 8005832:	4a2a      	ldr	r2, [pc, #168]	; (80058dc <__sflush_r+0x108>)
 8005834:	40ca      	lsrs	r2, r1
 8005836:	07d6      	lsls	r6, r2, #31
 8005838:	d528      	bpl.n	800588c <__sflush_r+0xb8>
 800583a:	2200      	movs	r2, #0
 800583c:	6062      	str	r2, [r4, #4]
 800583e:	04d9      	lsls	r1, r3, #19
 8005840:	6922      	ldr	r2, [r4, #16]
 8005842:	6022      	str	r2, [r4, #0]
 8005844:	d504      	bpl.n	8005850 <__sflush_r+0x7c>
 8005846:	1c42      	adds	r2, r0, #1
 8005848:	d101      	bne.n	800584e <__sflush_r+0x7a>
 800584a:	682b      	ldr	r3, [r5, #0]
 800584c:	b903      	cbnz	r3, 8005850 <__sflush_r+0x7c>
 800584e:	6560      	str	r0, [r4, #84]	; 0x54
 8005850:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005852:	602f      	str	r7, [r5, #0]
 8005854:	2900      	cmp	r1, #0
 8005856:	d0ca      	beq.n	80057ee <__sflush_r+0x1a>
 8005858:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800585c:	4299      	cmp	r1, r3
 800585e:	d002      	beq.n	8005866 <__sflush_r+0x92>
 8005860:	4628      	mov	r0, r5
 8005862:	f000 f9d7 	bl	8005c14 <_free_r>
 8005866:	2000      	movs	r0, #0
 8005868:	6360      	str	r0, [r4, #52]	; 0x34
 800586a:	e7c1      	b.n	80057f0 <__sflush_r+0x1c>
 800586c:	6a21      	ldr	r1, [r4, #32]
 800586e:	2301      	movs	r3, #1
 8005870:	4628      	mov	r0, r5
 8005872:	47b0      	blx	r6
 8005874:	1c41      	adds	r1, r0, #1
 8005876:	d1c7      	bne.n	8005808 <__sflush_r+0x34>
 8005878:	682b      	ldr	r3, [r5, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0c4      	beq.n	8005808 <__sflush_r+0x34>
 800587e:	2b1d      	cmp	r3, #29
 8005880:	d001      	beq.n	8005886 <__sflush_r+0xb2>
 8005882:	2b16      	cmp	r3, #22
 8005884:	d101      	bne.n	800588a <__sflush_r+0xb6>
 8005886:	602f      	str	r7, [r5, #0]
 8005888:	e7b1      	b.n	80057ee <__sflush_r+0x1a>
 800588a:	89a3      	ldrh	r3, [r4, #12]
 800588c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005890:	81a3      	strh	r3, [r4, #12]
 8005892:	e7ad      	b.n	80057f0 <__sflush_r+0x1c>
 8005894:	690f      	ldr	r7, [r1, #16]
 8005896:	2f00      	cmp	r7, #0
 8005898:	d0a9      	beq.n	80057ee <__sflush_r+0x1a>
 800589a:	0793      	lsls	r3, r2, #30
 800589c:	680e      	ldr	r6, [r1, #0]
 800589e:	bf08      	it	eq
 80058a0:	694b      	ldreq	r3, [r1, #20]
 80058a2:	600f      	str	r7, [r1, #0]
 80058a4:	bf18      	it	ne
 80058a6:	2300      	movne	r3, #0
 80058a8:	eba6 0807 	sub.w	r8, r6, r7
 80058ac:	608b      	str	r3, [r1, #8]
 80058ae:	f1b8 0f00 	cmp.w	r8, #0
 80058b2:	dd9c      	ble.n	80057ee <__sflush_r+0x1a>
 80058b4:	6a21      	ldr	r1, [r4, #32]
 80058b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058b8:	4643      	mov	r3, r8
 80058ba:	463a      	mov	r2, r7
 80058bc:	4628      	mov	r0, r5
 80058be:	47b0      	blx	r6
 80058c0:	2800      	cmp	r0, #0
 80058c2:	dc06      	bgt.n	80058d2 <__sflush_r+0xfe>
 80058c4:	89a3      	ldrh	r3, [r4, #12]
 80058c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ca:	81a3      	strh	r3, [r4, #12]
 80058cc:	f04f 30ff 	mov.w	r0, #4294967295
 80058d0:	e78e      	b.n	80057f0 <__sflush_r+0x1c>
 80058d2:	4407      	add	r7, r0
 80058d4:	eba8 0800 	sub.w	r8, r8, r0
 80058d8:	e7e9      	b.n	80058ae <__sflush_r+0xda>
 80058da:	bf00      	nop
 80058dc:	20400001 	.word	0x20400001

080058e0 <_fflush_r>:
 80058e0:	b538      	push	{r3, r4, r5, lr}
 80058e2:	690b      	ldr	r3, [r1, #16]
 80058e4:	4605      	mov	r5, r0
 80058e6:	460c      	mov	r4, r1
 80058e8:	b913      	cbnz	r3, 80058f0 <_fflush_r+0x10>
 80058ea:	2500      	movs	r5, #0
 80058ec:	4628      	mov	r0, r5
 80058ee:	bd38      	pop	{r3, r4, r5, pc}
 80058f0:	b118      	cbz	r0, 80058fa <_fflush_r+0x1a>
 80058f2:	6983      	ldr	r3, [r0, #24]
 80058f4:	b90b      	cbnz	r3, 80058fa <_fflush_r+0x1a>
 80058f6:	f000 f887 	bl	8005a08 <__sinit>
 80058fa:	4b14      	ldr	r3, [pc, #80]	; (800594c <_fflush_r+0x6c>)
 80058fc:	429c      	cmp	r4, r3
 80058fe:	d11b      	bne.n	8005938 <_fflush_r+0x58>
 8005900:	686c      	ldr	r4, [r5, #4]
 8005902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0ef      	beq.n	80058ea <_fflush_r+0xa>
 800590a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800590c:	07d0      	lsls	r0, r2, #31
 800590e:	d404      	bmi.n	800591a <_fflush_r+0x3a>
 8005910:	0599      	lsls	r1, r3, #22
 8005912:	d402      	bmi.n	800591a <_fflush_r+0x3a>
 8005914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005916:	f000 f915 	bl	8005b44 <__retarget_lock_acquire_recursive>
 800591a:	4628      	mov	r0, r5
 800591c:	4621      	mov	r1, r4
 800591e:	f7ff ff59 	bl	80057d4 <__sflush_r>
 8005922:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005924:	07da      	lsls	r2, r3, #31
 8005926:	4605      	mov	r5, r0
 8005928:	d4e0      	bmi.n	80058ec <_fflush_r+0xc>
 800592a:	89a3      	ldrh	r3, [r4, #12]
 800592c:	059b      	lsls	r3, r3, #22
 800592e:	d4dd      	bmi.n	80058ec <_fflush_r+0xc>
 8005930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005932:	f000 f908 	bl	8005b46 <__retarget_lock_release_recursive>
 8005936:	e7d9      	b.n	80058ec <_fflush_r+0xc>
 8005938:	4b05      	ldr	r3, [pc, #20]	; (8005950 <_fflush_r+0x70>)
 800593a:	429c      	cmp	r4, r3
 800593c:	d101      	bne.n	8005942 <_fflush_r+0x62>
 800593e:	68ac      	ldr	r4, [r5, #8]
 8005940:	e7df      	b.n	8005902 <_fflush_r+0x22>
 8005942:	4b04      	ldr	r3, [pc, #16]	; (8005954 <_fflush_r+0x74>)
 8005944:	429c      	cmp	r4, r3
 8005946:	bf08      	it	eq
 8005948:	68ec      	ldreq	r4, [r5, #12]
 800594a:	e7da      	b.n	8005902 <_fflush_r+0x22>
 800594c:	080066d8 	.word	0x080066d8
 8005950:	080066f8 	.word	0x080066f8
 8005954:	080066b8 	.word	0x080066b8

08005958 <std>:
 8005958:	2300      	movs	r3, #0
 800595a:	b510      	push	{r4, lr}
 800595c:	4604      	mov	r4, r0
 800595e:	e9c0 3300 	strd	r3, r3, [r0]
 8005962:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005966:	6083      	str	r3, [r0, #8]
 8005968:	8181      	strh	r1, [r0, #12]
 800596a:	6643      	str	r3, [r0, #100]	; 0x64
 800596c:	81c2      	strh	r2, [r0, #14]
 800596e:	6183      	str	r3, [r0, #24]
 8005970:	4619      	mov	r1, r3
 8005972:	2208      	movs	r2, #8
 8005974:	305c      	adds	r0, #92	; 0x5c
 8005976:	f7ff fdd7 	bl	8005528 <memset>
 800597a:	4b05      	ldr	r3, [pc, #20]	; (8005990 <std+0x38>)
 800597c:	6263      	str	r3, [r4, #36]	; 0x24
 800597e:	4b05      	ldr	r3, [pc, #20]	; (8005994 <std+0x3c>)
 8005980:	62a3      	str	r3, [r4, #40]	; 0x28
 8005982:	4b05      	ldr	r3, [pc, #20]	; (8005998 <std+0x40>)
 8005984:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005986:	4b05      	ldr	r3, [pc, #20]	; (800599c <std+0x44>)
 8005988:	6224      	str	r4, [r4, #32]
 800598a:	6323      	str	r3, [r4, #48]	; 0x30
 800598c:	bd10      	pop	{r4, pc}
 800598e:	bf00      	nop
 8005990:	080063d1 	.word	0x080063d1
 8005994:	080063f3 	.word	0x080063f3
 8005998:	0800642b 	.word	0x0800642b
 800599c:	0800644f 	.word	0x0800644f

080059a0 <_cleanup_r>:
 80059a0:	4901      	ldr	r1, [pc, #4]	; (80059a8 <_cleanup_r+0x8>)
 80059a2:	f000 b8af 	b.w	8005b04 <_fwalk_reent>
 80059a6:	bf00      	nop
 80059a8:	080058e1 	.word	0x080058e1

080059ac <__sfmoreglue>:
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	2268      	movs	r2, #104	; 0x68
 80059b0:	1e4d      	subs	r5, r1, #1
 80059b2:	4355      	muls	r5, r2
 80059b4:	460e      	mov	r6, r1
 80059b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059ba:	f000 f997 	bl	8005cec <_malloc_r>
 80059be:	4604      	mov	r4, r0
 80059c0:	b140      	cbz	r0, 80059d4 <__sfmoreglue+0x28>
 80059c2:	2100      	movs	r1, #0
 80059c4:	e9c0 1600 	strd	r1, r6, [r0]
 80059c8:	300c      	adds	r0, #12
 80059ca:	60a0      	str	r0, [r4, #8]
 80059cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059d0:	f7ff fdaa 	bl	8005528 <memset>
 80059d4:	4620      	mov	r0, r4
 80059d6:	bd70      	pop	{r4, r5, r6, pc}

080059d8 <__sfp_lock_acquire>:
 80059d8:	4801      	ldr	r0, [pc, #4]	; (80059e0 <__sfp_lock_acquire+0x8>)
 80059da:	f000 b8b3 	b.w	8005b44 <__retarget_lock_acquire_recursive>
 80059de:	bf00      	nop
 80059e0:	20000665 	.word	0x20000665

080059e4 <__sfp_lock_release>:
 80059e4:	4801      	ldr	r0, [pc, #4]	; (80059ec <__sfp_lock_release+0x8>)
 80059e6:	f000 b8ae 	b.w	8005b46 <__retarget_lock_release_recursive>
 80059ea:	bf00      	nop
 80059ec:	20000665 	.word	0x20000665

080059f0 <__sinit_lock_acquire>:
 80059f0:	4801      	ldr	r0, [pc, #4]	; (80059f8 <__sinit_lock_acquire+0x8>)
 80059f2:	f000 b8a7 	b.w	8005b44 <__retarget_lock_acquire_recursive>
 80059f6:	bf00      	nop
 80059f8:	20000666 	.word	0x20000666

080059fc <__sinit_lock_release>:
 80059fc:	4801      	ldr	r0, [pc, #4]	; (8005a04 <__sinit_lock_release+0x8>)
 80059fe:	f000 b8a2 	b.w	8005b46 <__retarget_lock_release_recursive>
 8005a02:	bf00      	nop
 8005a04:	20000666 	.word	0x20000666

08005a08 <__sinit>:
 8005a08:	b510      	push	{r4, lr}
 8005a0a:	4604      	mov	r4, r0
 8005a0c:	f7ff fff0 	bl	80059f0 <__sinit_lock_acquire>
 8005a10:	69a3      	ldr	r3, [r4, #24]
 8005a12:	b11b      	cbz	r3, 8005a1c <__sinit+0x14>
 8005a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a18:	f7ff bff0 	b.w	80059fc <__sinit_lock_release>
 8005a1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a20:	6523      	str	r3, [r4, #80]	; 0x50
 8005a22:	4b13      	ldr	r3, [pc, #76]	; (8005a70 <__sinit+0x68>)
 8005a24:	4a13      	ldr	r2, [pc, #76]	; (8005a74 <__sinit+0x6c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a2a:	42a3      	cmp	r3, r4
 8005a2c:	bf04      	itt	eq
 8005a2e:	2301      	moveq	r3, #1
 8005a30:	61a3      	streq	r3, [r4, #24]
 8005a32:	4620      	mov	r0, r4
 8005a34:	f000 f820 	bl	8005a78 <__sfp>
 8005a38:	6060      	str	r0, [r4, #4]
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	f000 f81c 	bl	8005a78 <__sfp>
 8005a40:	60a0      	str	r0, [r4, #8]
 8005a42:	4620      	mov	r0, r4
 8005a44:	f000 f818 	bl	8005a78 <__sfp>
 8005a48:	2200      	movs	r2, #0
 8005a4a:	60e0      	str	r0, [r4, #12]
 8005a4c:	2104      	movs	r1, #4
 8005a4e:	6860      	ldr	r0, [r4, #4]
 8005a50:	f7ff ff82 	bl	8005958 <std>
 8005a54:	68a0      	ldr	r0, [r4, #8]
 8005a56:	2201      	movs	r2, #1
 8005a58:	2109      	movs	r1, #9
 8005a5a:	f7ff ff7d 	bl	8005958 <std>
 8005a5e:	68e0      	ldr	r0, [r4, #12]
 8005a60:	2202      	movs	r2, #2
 8005a62:	2112      	movs	r1, #18
 8005a64:	f7ff ff78 	bl	8005958 <std>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	61a3      	str	r3, [r4, #24]
 8005a6c:	e7d2      	b.n	8005a14 <__sinit+0xc>
 8005a6e:	bf00      	nop
 8005a70:	080066b4 	.word	0x080066b4
 8005a74:	080059a1 	.word	0x080059a1

08005a78 <__sfp>:
 8005a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7a:	4607      	mov	r7, r0
 8005a7c:	f7ff ffac 	bl	80059d8 <__sfp_lock_acquire>
 8005a80:	4b1e      	ldr	r3, [pc, #120]	; (8005afc <__sfp+0x84>)
 8005a82:	681e      	ldr	r6, [r3, #0]
 8005a84:	69b3      	ldr	r3, [r6, #24]
 8005a86:	b913      	cbnz	r3, 8005a8e <__sfp+0x16>
 8005a88:	4630      	mov	r0, r6
 8005a8a:	f7ff ffbd 	bl	8005a08 <__sinit>
 8005a8e:	3648      	adds	r6, #72	; 0x48
 8005a90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a94:	3b01      	subs	r3, #1
 8005a96:	d503      	bpl.n	8005aa0 <__sfp+0x28>
 8005a98:	6833      	ldr	r3, [r6, #0]
 8005a9a:	b30b      	cbz	r3, 8005ae0 <__sfp+0x68>
 8005a9c:	6836      	ldr	r6, [r6, #0]
 8005a9e:	e7f7      	b.n	8005a90 <__sfp+0x18>
 8005aa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005aa4:	b9d5      	cbnz	r5, 8005adc <__sfp+0x64>
 8005aa6:	4b16      	ldr	r3, [pc, #88]	; (8005b00 <__sfp+0x88>)
 8005aa8:	60e3      	str	r3, [r4, #12]
 8005aaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005aae:	6665      	str	r5, [r4, #100]	; 0x64
 8005ab0:	f000 f847 	bl	8005b42 <__retarget_lock_init_recursive>
 8005ab4:	f7ff ff96 	bl	80059e4 <__sfp_lock_release>
 8005ab8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005abc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ac0:	6025      	str	r5, [r4, #0]
 8005ac2:	61a5      	str	r5, [r4, #24]
 8005ac4:	2208      	movs	r2, #8
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005acc:	f7ff fd2c 	bl	8005528 <memset>
 8005ad0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ad4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ad8:	4620      	mov	r0, r4
 8005ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005adc:	3468      	adds	r4, #104	; 0x68
 8005ade:	e7d9      	b.n	8005a94 <__sfp+0x1c>
 8005ae0:	2104      	movs	r1, #4
 8005ae2:	4638      	mov	r0, r7
 8005ae4:	f7ff ff62 	bl	80059ac <__sfmoreglue>
 8005ae8:	4604      	mov	r4, r0
 8005aea:	6030      	str	r0, [r6, #0]
 8005aec:	2800      	cmp	r0, #0
 8005aee:	d1d5      	bne.n	8005a9c <__sfp+0x24>
 8005af0:	f7ff ff78 	bl	80059e4 <__sfp_lock_release>
 8005af4:	230c      	movs	r3, #12
 8005af6:	603b      	str	r3, [r7, #0]
 8005af8:	e7ee      	b.n	8005ad8 <__sfp+0x60>
 8005afa:	bf00      	nop
 8005afc:	080066b4 	.word	0x080066b4
 8005b00:	ffff0001 	.word	0xffff0001

08005b04 <_fwalk_reent>:
 8005b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b08:	4606      	mov	r6, r0
 8005b0a:	4688      	mov	r8, r1
 8005b0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b10:	2700      	movs	r7, #0
 8005b12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b16:	f1b9 0901 	subs.w	r9, r9, #1
 8005b1a:	d505      	bpl.n	8005b28 <_fwalk_reent+0x24>
 8005b1c:	6824      	ldr	r4, [r4, #0]
 8005b1e:	2c00      	cmp	r4, #0
 8005b20:	d1f7      	bne.n	8005b12 <_fwalk_reent+0xe>
 8005b22:	4638      	mov	r0, r7
 8005b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b28:	89ab      	ldrh	r3, [r5, #12]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d907      	bls.n	8005b3e <_fwalk_reent+0x3a>
 8005b2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b32:	3301      	adds	r3, #1
 8005b34:	d003      	beq.n	8005b3e <_fwalk_reent+0x3a>
 8005b36:	4629      	mov	r1, r5
 8005b38:	4630      	mov	r0, r6
 8005b3a:	47c0      	blx	r8
 8005b3c:	4307      	orrs	r7, r0
 8005b3e:	3568      	adds	r5, #104	; 0x68
 8005b40:	e7e9      	b.n	8005b16 <_fwalk_reent+0x12>

08005b42 <__retarget_lock_init_recursive>:
 8005b42:	4770      	bx	lr

08005b44 <__retarget_lock_acquire_recursive>:
 8005b44:	4770      	bx	lr

08005b46 <__retarget_lock_release_recursive>:
 8005b46:	4770      	bx	lr

08005b48 <__swhatbuf_r>:
 8005b48:	b570      	push	{r4, r5, r6, lr}
 8005b4a:	460e      	mov	r6, r1
 8005b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b50:	2900      	cmp	r1, #0
 8005b52:	b096      	sub	sp, #88	; 0x58
 8005b54:	4614      	mov	r4, r2
 8005b56:	461d      	mov	r5, r3
 8005b58:	da08      	bge.n	8005b6c <__swhatbuf_r+0x24>
 8005b5a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	602a      	str	r2, [r5, #0]
 8005b62:	061a      	lsls	r2, r3, #24
 8005b64:	d410      	bmi.n	8005b88 <__swhatbuf_r+0x40>
 8005b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b6a:	e00e      	b.n	8005b8a <__swhatbuf_r+0x42>
 8005b6c:	466a      	mov	r2, sp
 8005b6e:	f000 fc95 	bl	800649c <_fstat_r>
 8005b72:	2800      	cmp	r0, #0
 8005b74:	dbf1      	blt.n	8005b5a <__swhatbuf_r+0x12>
 8005b76:	9a01      	ldr	r2, [sp, #4]
 8005b78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b80:	425a      	negs	r2, r3
 8005b82:	415a      	adcs	r2, r3
 8005b84:	602a      	str	r2, [r5, #0]
 8005b86:	e7ee      	b.n	8005b66 <__swhatbuf_r+0x1e>
 8005b88:	2340      	movs	r3, #64	; 0x40
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	6023      	str	r3, [r4, #0]
 8005b8e:	b016      	add	sp, #88	; 0x58
 8005b90:	bd70      	pop	{r4, r5, r6, pc}
	...

08005b94 <__smakebuf_r>:
 8005b94:	898b      	ldrh	r3, [r1, #12]
 8005b96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b98:	079d      	lsls	r5, r3, #30
 8005b9a:	4606      	mov	r6, r0
 8005b9c:	460c      	mov	r4, r1
 8005b9e:	d507      	bpl.n	8005bb0 <__smakebuf_r+0x1c>
 8005ba0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ba4:	6023      	str	r3, [r4, #0]
 8005ba6:	6123      	str	r3, [r4, #16]
 8005ba8:	2301      	movs	r3, #1
 8005baa:	6163      	str	r3, [r4, #20]
 8005bac:	b002      	add	sp, #8
 8005bae:	bd70      	pop	{r4, r5, r6, pc}
 8005bb0:	ab01      	add	r3, sp, #4
 8005bb2:	466a      	mov	r2, sp
 8005bb4:	f7ff ffc8 	bl	8005b48 <__swhatbuf_r>
 8005bb8:	9900      	ldr	r1, [sp, #0]
 8005bba:	4605      	mov	r5, r0
 8005bbc:	4630      	mov	r0, r6
 8005bbe:	f000 f895 	bl	8005cec <_malloc_r>
 8005bc2:	b948      	cbnz	r0, 8005bd8 <__smakebuf_r+0x44>
 8005bc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bc8:	059a      	lsls	r2, r3, #22
 8005bca:	d4ef      	bmi.n	8005bac <__smakebuf_r+0x18>
 8005bcc:	f023 0303 	bic.w	r3, r3, #3
 8005bd0:	f043 0302 	orr.w	r3, r3, #2
 8005bd4:	81a3      	strh	r3, [r4, #12]
 8005bd6:	e7e3      	b.n	8005ba0 <__smakebuf_r+0xc>
 8005bd8:	4b0d      	ldr	r3, [pc, #52]	; (8005c10 <__smakebuf_r+0x7c>)
 8005bda:	62b3      	str	r3, [r6, #40]	; 0x28
 8005bdc:	89a3      	ldrh	r3, [r4, #12]
 8005bde:	6020      	str	r0, [r4, #0]
 8005be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be4:	81a3      	strh	r3, [r4, #12]
 8005be6:	9b00      	ldr	r3, [sp, #0]
 8005be8:	6163      	str	r3, [r4, #20]
 8005bea:	9b01      	ldr	r3, [sp, #4]
 8005bec:	6120      	str	r0, [r4, #16]
 8005bee:	b15b      	cbz	r3, 8005c08 <__smakebuf_r+0x74>
 8005bf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	f000 fc63 	bl	80064c0 <_isatty_r>
 8005bfa:	b128      	cbz	r0, 8005c08 <__smakebuf_r+0x74>
 8005bfc:	89a3      	ldrh	r3, [r4, #12]
 8005bfe:	f023 0303 	bic.w	r3, r3, #3
 8005c02:	f043 0301 	orr.w	r3, r3, #1
 8005c06:	81a3      	strh	r3, [r4, #12]
 8005c08:	89a0      	ldrh	r0, [r4, #12]
 8005c0a:	4305      	orrs	r5, r0
 8005c0c:	81a5      	strh	r5, [r4, #12]
 8005c0e:	e7cd      	b.n	8005bac <__smakebuf_r+0x18>
 8005c10:	080059a1 	.word	0x080059a1

08005c14 <_free_r>:
 8005c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c16:	2900      	cmp	r1, #0
 8005c18:	d044      	beq.n	8005ca4 <_free_r+0x90>
 8005c1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c1e:	9001      	str	r0, [sp, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f1a1 0404 	sub.w	r4, r1, #4
 8005c26:	bfb8      	it	lt
 8005c28:	18e4      	addlt	r4, r4, r3
 8005c2a:	f000 fc6b 	bl	8006504 <__malloc_lock>
 8005c2e:	4a1e      	ldr	r2, [pc, #120]	; (8005ca8 <_free_r+0x94>)
 8005c30:	9801      	ldr	r0, [sp, #4]
 8005c32:	6813      	ldr	r3, [r2, #0]
 8005c34:	b933      	cbnz	r3, 8005c44 <_free_r+0x30>
 8005c36:	6063      	str	r3, [r4, #4]
 8005c38:	6014      	str	r4, [r2, #0]
 8005c3a:	b003      	add	sp, #12
 8005c3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c40:	f000 bc66 	b.w	8006510 <__malloc_unlock>
 8005c44:	42a3      	cmp	r3, r4
 8005c46:	d908      	bls.n	8005c5a <_free_r+0x46>
 8005c48:	6825      	ldr	r5, [r4, #0]
 8005c4a:	1961      	adds	r1, r4, r5
 8005c4c:	428b      	cmp	r3, r1
 8005c4e:	bf01      	itttt	eq
 8005c50:	6819      	ldreq	r1, [r3, #0]
 8005c52:	685b      	ldreq	r3, [r3, #4]
 8005c54:	1949      	addeq	r1, r1, r5
 8005c56:	6021      	streq	r1, [r4, #0]
 8005c58:	e7ed      	b.n	8005c36 <_free_r+0x22>
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	b10b      	cbz	r3, 8005c64 <_free_r+0x50>
 8005c60:	42a3      	cmp	r3, r4
 8005c62:	d9fa      	bls.n	8005c5a <_free_r+0x46>
 8005c64:	6811      	ldr	r1, [r2, #0]
 8005c66:	1855      	adds	r5, r2, r1
 8005c68:	42a5      	cmp	r5, r4
 8005c6a:	d10b      	bne.n	8005c84 <_free_r+0x70>
 8005c6c:	6824      	ldr	r4, [r4, #0]
 8005c6e:	4421      	add	r1, r4
 8005c70:	1854      	adds	r4, r2, r1
 8005c72:	42a3      	cmp	r3, r4
 8005c74:	6011      	str	r1, [r2, #0]
 8005c76:	d1e0      	bne.n	8005c3a <_free_r+0x26>
 8005c78:	681c      	ldr	r4, [r3, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	6053      	str	r3, [r2, #4]
 8005c7e:	4421      	add	r1, r4
 8005c80:	6011      	str	r1, [r2, #0]
 8005c82:	e7da      	b.n	8005c3a <_free_r+0x26>
 8005c84:	d902      	bls.n	8005c8c <_free_r+0x78>
 8005c86:	230c      	movs	r3, #12
 8005c88:	6003      	str	r3, [r0, #0]
 8005c8a:	e7d6      	b.n	8005c3a <_free_r+0x26>
 8005c8c:	6825      	ldr	r5, [r4, #0]
 8005c8e:	1961      	adds	r1, r4, r5
 8005c90:	428b      	cmp	r3, r1
 8005c92:	bf04      	itt	eq
 8005c94:	6819      	ldreq	r1, [r3, #0]
 8005c96:	685b      	ldreq	r3, [r3, #4]
 8005c98:	6063      	str	r3, [r4, #4]
 8005c9a:	bf04      	itt	eq
 8005c9c:	1949      	addeq	r1, r1, r5
 8005c9e:	6021      	streq	r1, [r4, #0]
 8005ca0:	6054      	str	r4, [r2, #4]
 8005ca2:	e7ca      	b.n	8005c3a <_free_r+0x26>
 8005ca4:	b003      	add	sp, #12
 8005ca6:	bd30      	pop	{r4, r5, pc}
 8005ca8:	20000668 	.word	0x20000668

08005cac <sbrk_aligned>:
 8005cac:	b570      	push	{r4, r5, r6, lr}
 8005cae:	4e0e      	ldr	r6, [pc, #56]	; (8005ce8 <sbrk_aligned+0x3c>)
 8005cb0:	460c      	mov	r4, r1
 8005cb2:	6831      	ldr	r1, [r6, #0]
 8005cb4:	4605      	mov	r5, r0
 8005cb6:	b911      	cbnz	r1, 8005cbe <sbrk_aligned+0x12>
 8005cb8:	f000 fb7a 	bl	80063b0 <_sbrk_r>
 8005cbc:	6030      	str	r0, [r6, #0]
 8005cbe:	4621      	mov	r1, r4
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	f000 fb75 	bl	80063b0 <_sbrk_r>
 8005cc6:	1c43      	adds	r3, r0, #1
 8005cc8:	d00a      	beq.n	8005ce0 <sbrk_aligned+0x34>
 8005cca:	1cc4      	adds	r4, r0, #3
 8005ccc:	f024 0403 	bic.w	r4, r4, #3
 8005cd0:	42a0      	cmp	r0, r4
 8005cd2:	d007      	beq.n	8005ce4 <sbrk_aligned+0x38>
 8005cd4:	1a21      	subs	r1, r4, r0
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	f000 fb6a 	bl	80063b0 <_sbrk_r>
 8005cdc:	3001      	adds	r0, #1
 8005cde:	d101      	bne.n	8005ce4 <sbrk_aligned+0x38>
 8005ce0:	f04f 34ff 	mov.w	r4, #4294967295
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	bd70      	pop	{r4, r5, r6, pc}
 8005ce8:	2000066c 	.word	0x2000066c

08005cec <_malloc_r>:
 8005cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf0:	1ccd      	adds	r5, r1, #3
 8005cf2:	f025 0503 	bic.w	r5, r5, #3
 8005cf6:	3508      	adds	r5, #8
 8005cf8:	2d0c      	cmp	r5, #12
 8005cfa:	bf38      	it	cc
 8005cfc:	250c      	movcc	r5, #12
 8005cfe:	2d00      	cmp	r5, #0
 8005d00:	4607      	mov	r7, r0
 8005d02:	db01      	blt.n	8005d08 <_malloc_r+0x1c>
 8005d04:	42a9      	cmp	r1, r5
 8005d06:	d905      	bls.n	8005d14 <_malloc_r+0x28>
 8005d08:	230c      	movs	r3, #12
 8005d0a:	603b      	str	r3, [r7, #0]
 8005d0c:	2600      	movs	r6, #0
 8005d0e:	4630      	mov	r0, r6
 8005d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d14:	4e2e      	ldr	r6, [pc, #184]	; (8005dd0 <_malloc_r+0xe4>)
 8005d16:	f000 fbf5 	bl	8006504 <__malloc_lock>
 8005d1a:	6833      	ldr	r3, [r6, #0]
 8005d1c:	461c      	mov	r4, r3
 8005d1e:	bb34      	cbnz	r4, 8005d6e <_malloc_r+0x82>
 8005d20:	4629      	mov	r1, r5
 8005d22:	4638      	mov	r0, r7
 8005d24:	f7ff ffc2 	bl	8005cac <sbrk_aligned>
 8005d28:	1c43      	adds	r3, r0, #1
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	d14d      	bne.n	8005dca <_malloc_r+0xde>
 8005d2e:	6834      	ldr	r4, [r6, #0]
 8005d30:	4626      	mov	r6, r4
 8005d32:	2e00      	cmp	r6, #0
 8005d34:	d140      	bne.n	8005db8 <_malloc_r+0xcc>
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	4631      	mov	r1, r6
 8005d3a:	4638      	mov	r0, r7
 8005d3c:	eb04 0803 	add.w	r8, r4, r3
 8005d40:	f000 fb36 	bl	80063b0 <_sbrk_r>
 8005d44:	4580      	cmp	r8, r0
 8005d46:	d13a      	bne.n	8005dbe <_malloc_r+0xd2>
 8005d48:	6821      	ldr	r1, [r4, #0]
 8005d4a:	3503      	adds	r5, #3
 8005d4c:	1a6d      	subs	r5, r5, r1
 8005d4e:	f025 0503 	bic.w	r5, r5, #3
 8005d52:	3508      	adds	r5, #8
 8005d54:	2d0c      	cmp	r5, #12
 8005d56:	bf38      	it	cc
 8005d58:	250c      	movcc	r5, #12
 8005d5a:	4629      	mov	r1, r5
 8005d5c:	4638      	mov	r0, r7
 8005d5e:	f7ff ffa5 	bl	8005cac <sbrk_aligned>
 8005d62:	3001      	adds	r0, #1
 8005d64:	d02b      	beq.n	8005dbe <_malloc_r+0xd2>
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	442b      	add	r3, r5
 8005d6a:	6023      	str	r3, [r4, #0]
 8005d6c:	e00e      	b.n	8005d8c <_malloc_r+0xa0>
 8005d6e:	6822      	ldr	r2, [r4, #0]
 8005d70:	1b52      	subs	r2, r2, r5
 8005d72:	d41e      	bmi.n	8005db2 <_malloc_r+0xc6>
 8005d74:	2a0b      	cmp	r2, #11
 8005d76:	d916      	bls.n	8005da6 <_malloc_r+0xba>
 8005d78:	1961      	adds	r1, r4, r5
 8005d7a:	42a3      	cmp	r3, r4
 8005d7c:	6025      	str	r5, [r4, #0]
 8005d7e:	bf18      	it	ne
 8005d80:	6059      	strne	r1, [r3, #4]
 8005d82:	6863      	ldr	r3, [r4, #4]
 8005d84:	bf08      	it	eq
 8005d86:	6031      	streq	r1, [r6, #0]
 8005d88:	5162      	str	r2, [r4, r5]
 8005d8a:	604b      	str	r3, [r1, #4]
 8005d8c:	4638      	mov	r0, r7
 8005d8e:	f104 060b 	add.w	r6, r4, #11
 8005d92:	f000 fbbd 	bl	8006510 <__malloc_unlock>
 8005d96:	f026 0607 	bic.w	r6, r6, #7
 8005d9a:	1d23      	adds	r3, r4, #4
 8005d9c:	1af2      	subs	r2, r6, r3
 8005d9e:	d0b6      	beq.n	8005d0e <_malloc_r+0x22>
 8005da0:	1b9b      	subs	r3, r3, r6
 8005da2:	50a3      	str	r3, [r4, r2]
 8005da4:	e7b3      	b.n	8005d0e <_malloc_r+0x22>
 8005da6:	6862      	ldr	r2, [r4, #4]
 8005da8:	42a3      	cmp	r3, r4
 8005daa:	bf0c      	ite	eq
 8005dac:	6032      	streq	r2, [r6, #0]
 8005dae:	605a      	strne	r2, [r3, #4]
 8005db0:	e7ec      	b.n	8005d8c <_malloc_r+0xa0>
 8005db2:	4623      	mov	r3, r4
 8005db4:	6864      	ldr	r4, [r4, #4]
 8005db6:	e7b2      	b.n	8005d1e <_malloc_r+0x32>
 8005db8:	4634      	mov	r4, r6
 8005dba:	6876      	ldr	r6, [r6, #4]
 8005dbc:	e7b9      	b.n	8005d32 <_malloc_r+0x46>
 8005dbe:	230c      	movs	r3, #12
 8005dc0:	603b      	str	r3, [r7, #0]
 8005dc2:	4638      	mov	r0, r7
 8005dc4:	f000 fba4 	bl	8006510 <__malloc_unlock>
 8005dc8:	e7a1      	b.n	8005d0e <_malloc_r+0x22>
 8005dca:	6025      	str	r5, [r4, #0]
 8005dcc:	e7de      	b.n	8005d8c <_malloc_r+0xa0>
 8005dce:	bf00      	nop
 8005dd0:	20000668 	.word	0x20000668

08005dd4 <__sfputc_r>:
 8005dd4:	6893      	ldr	r3, [r2, #8]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	b410      	push	{r4}
 8005ddc:	6093      	str	r3, [r2, #8]
 8005dde:	da08      	bge.n	8005df2 <__sfputc_r+0x1e>
 8005de0:	6994      	ldr	r4, [r2, #24]
 8005de2:	42a3      	cmp	r3, r4
 8005de4:	db01      	blt.n	8005dea <__sfputc_r+0x16>
 8005de6:	290a      	cmp	r1, #10
 8005de8:	d103      	bne.n	8005df2 <__sfputc_r+0x1e>
 8005dea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dee:	f7ff bc31 	b.w	8005654 <__swbuf_r>
 8005df2:	6813      	ldr	r3, [r2, #0]
 8005df4:	1c58      	adds	r0, r3, #1
 8005df6:	6010      	str	r0, [r2, #0]
 8005df8:	7019      	strb	r1, [r3, #0]
 8005dfa:	4608      	mov	r0, r1
 8005dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <__sfputs_r>:
 8005e02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e04:	4606      	mov	r6, r0
 8005e06:	460f      	mov	r7, r1
 8005e08:	4614      	mov	r4, r2
 8005e0a:	18d5      	adds	r5, r2, r3
 8005e0c:	42ac      	cmp	r4, r5
 8005e0e:	d101      	bne.n	8005e14 <__sfputs_r+0x12>
 8005e10:	2000      	movs	r0, #0
 8005e12:	e007      	b.n	8005e24 <__sfputs_r+0x22>
 8005e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e18:	463a      	mov	r2, r7
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	f7ff ffda 	bl	8005dd4 <__sfputc_r>
 8005e20:	1c43      	adds	r3, r0, #1
 8005e22:	d1f3      	bne.n	8005e0c <__sfputs_r+0xa>
 8005e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e28 <_vfiprintf_r>:
 8005e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e2c:	460d      	mov	r5, r1
 8005e2e:	b09d      	sub	sp, #116	; 0x74
 8005e30:	4614      	mov	r4, r2
 8005e32:	4698      	mov	r8, r3
 8005e34:	4606      	mov	r6, r0
 8005e36:	b118      	cbz	r0, 8005e40 <_vfiprintf_r+0x18>
 8005e38:	6983      	ldr	r3, [r0, #24]
 8005e3a:	b90b      	cbnz	r3, 8005e40 <_vfiprintf_r+0x18>
 8005e3c:	f7ff fde4 	bl	8005a08 <__sinit>
 8005e40:	4b89      	ldr	r3, [pc, #548]	; (8006068 <_vfiprintf_r+0x240>)
 8005e42:	429d      	cmp	r5, r3
 8005e44:	d11b      	bne.n	8005e7e <_vfiprintf_r+0x56>
 8005e46:	6875      	ldr	r5, [r6, #4]
 8005e48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e4a:	07d9      	lsls	r1, r3, #31
 8005e4c:	d405      	bmi.n	8005e5a <_vfiprintf_r+0x32>
 8005e4e:	89ab      	ldrh	r3, [r5, #12]
 8005e50:	059a      	lsls	r2, r3, #22
 8005e52:	d402      	bmi.n	8005e5a <_vfiprintf_r+0x32>
 8005e54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e56:	f7ff fe75 	bl	8005b44 <__retarget_lock_acquire_recursive>
 8005e5a:	89ab      	ldrh	r3, [r5, #12]
 8005e5c:	071b      	lsls	r3, r3, #28
 8005e5e:	d501      	bpl.n	8005e64 <_vfiprintf_r+0x3c>
 8005e60:	692b      	ldr	r3, [r5, #16]
 8005e62:	b9eb      	cbnz	r3, 8005ea0 <_vfiprintf_r+0x78>
 8005e64:	4629      	mov	r1, r5
 8005e66:	4630      	mov	r0, r6
 8005e68:	f7ff fc46 	bl	80056f8 <__swsetup_r>
 8005e6c:	b1c0      	cbz	r0, 8005ea0 <_vfiprintf_r+0x78>
 8005e6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e70:	07dc      	lsls	r4, r3, #31
 8005e72:	d50e      	bpl.n	8005e92 <_vfiprintf_r+0x6a>
 8005e74:	f04f 30ff 	mov.w	r0, #4294967295
 8005e78:	b01d      	add	sp, #116	; 0x74
 8005e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e7e:	4b7b      	ldr	r3, [pc, #492]	; (800606c <_vfiprintf_r+0x244>)
 8005e80:	429d      	cmp	r5, r3
 8005e82:	d101      	bne.n	8005e88 <_vfiprintf_r+0x60>
 8005e84:	68b5      	ldr	r5, [r6, #8]
 8005e86:	e7df      	b.n	8005e48 <_vfiprintf_r+0x20>
 8005e88:	4b79      	ldr	r3, [pc, #484]	; (8006070 <_vfiprintf_r+0x248>)
 8005e8a:	429d      	cmp	r5, r3
 8005e8c:	bf08      	it	eq
 8005e8e:	68f5      	ldreq	r5, [r6, #12]
 8005e90:	e7da      	b.n	8005e48 <_vfiprintf_r+0x20>
 8005e92:	89ab      	ldrh	r3, [r5, #12]
 8005e94:	0598      	lsls	r0, r3, #22
 8005e96:	d4ed      	bmi.n	8005e74 <_vfiprintf_r+0x4c>
 8005e98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e9a:	f7ff fe54 	bl	8005b46 <__retarget_lock_release_recursive>
 8005e9e:	e7e9      	b.n	8005e74 <_vfiprintf_r+0x4c>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ea4:	2320      	movs	r3, #32
 8005ea6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005eaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8005eae:	2330      	movs	r3, #48	; 0x30
 8005eb0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006074 <_vfiprintf_r+0x24c>
 8005eb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005eb8:	f04f 0901 	mov.w	r9, #1
 8005ebc:	4623      	mov	r3, r4
 8005ebe:	469a      	mov	sl, r3
 8005ec0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ec4:	b10a      	cbz	r2, 8005eca <_vfiprintf_r+0xa2>
 8005ec6:	2a25      	cmp	r2, #37	; 0x25
 8005ec8:	d1f9      	bne.n	8005ebe <_vfiprintf_r+0x96>
 8005eca:	ebba 0b04 	subs.w	fp, sl, r4
 8005ece:	d00b      	beq.n	8005ee8 <_vfiprintf_r+0xc0>
 8005ed0:	465b      	mov	r3, fp
 8005ed2:	4622      	mov	r2, r4
 8005ed4:	4629      	mov	r1, r5
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	f7ff ff93 	bl	8005e02 <__sfputs_r>
 8005edc:	3001      	adds	r0, #1
 8005ede:	f000 80aa 	beq.w	8006036 <_vfiprintf_r+0x20e>
 8005ee2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ee4:	445a      	add	r2, fp
 8005ee6:	9209      	str	r2, [sp, #36]	; 0x24
 8005ee8:	f89a 3000 	ldrb.w	r3, [sl]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 80a2 	beq.w	8006036 <_vfiprintf_r+0x20e>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005efc:	f10a 0a01 	add.w	sl, sl, #1
 8005f00:	9304      	str	r3, [sp, #16]
 8005f02:	9307      	str	r3, [sp, #28]
 8005f04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f08:	931a      	str	r3, [sp, #104]	; 0x68
 8005f0a:	4654      	mov	r4, sl
 8005f0c:	2205      	movs	r2, #5
 8005f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f12:	4858      	ldr	r0, [pc, #352]	; (8006074 <_vfiprintf_r+0x24c>)
 8005f14:	f7fa f934 	bl	8000180 <memchr>
 8005f18:	9a04      	ldr	r2, [sp, #16]
 8005f1a:	b9d8      	cbnz	r0, 8005f54 <_vfiprintf_r+0x12c>
 8005f1c:	06d1      	lsls	r1, r2, #27
 8005f1e:	bf44      	itt	mi
 8005f20:	2320      	movmi	r3, #32
 8005f22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f26:	0713      	lsls	r3, r2, #28
 8005f28:	bf44      	itt	mi
 8005f2a:	232b      	movmi	r3, #43	; 0x2b
 8005f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f30:	f89a 3000 	ldrb.w	r3, [sl]
 8005f34:	2b2a      	cmp	r3, #42	; 0x2a
 8005f36:	d015      	beq.n	8005f64 <_vfiprintf_r+0x13c>
 8005f38:	9a07      	ldr	r2, [sp, #28]
 8005f3a:	4654      	mov	r4, sl
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	f04f 0c0a 	mov.w	ip, #10
 8005f42:	4621      	mov	r1, r4
 8005f44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f48:	3b30      	subs	r3, #48	; 0x30
 8005f4a:	2b09      	cmp	r3, #9
 8005f4c:	d94e      	bls.n	8005fec <_vfiprintf_r+0x1c4>
 8005f4e:	b1b0      	cbz	r0, 8005f7e <_vfiprintf_r+0x156>
 8005f50:	9207      	str	r2, [sp, #28]
 8005f52:	e014      	b.n	8005f7e <_vfiprintf_r+0x156>
 8005f54:	eba0 0308 	sub.w	r3, r0, r8
 8005f58:	fa09 f303 	lsl.w	r3, r9, r3
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	9304      	str	r3, [sp, #16]
 8005f60:	46a2      	mov	sl, r4
 8005f62:	e7d2      	b.n	8005f0a <_vfiprintf_r+0xe2>
 8005f64:	9b03      	ldr	r3, [sp, #12]
 8005f66:	1d19      	adds	r1, r3, #4
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	9103      	str	r1, [sp, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	bfbb      	ittet	lt
 8005f70:	425b      	neglt	r3, r3
 8005f72:	f042 0202 	orrlt.w	r2, r2, #2
 8005f76:	9307      	strge	r3, [sp, #28]
 8005f78:	9307      	strlt	r3, [sp, #28]
 8005f7a:	bfb8      	it	lt
 8005f7c:	9204      	strlt	r2, [sp, #16]
 8005f7e:	7823      	ldrb	r3, [r4, #0]
 8005f80:	2b2e      	cmp	r3, #46	; 0x2e
 8005f82:	d10c      	bne.n	8005f9e <_vfiprintf_r+0x176>
 8005f84:	7863      	ldrb	r3, [r4, #1]
 8005f86:	2b2a      	cmp	r3, #42	; 0x2a
 8005f88:	d135      	bne.n	8005ff6 <_vfiprintf_r+0x1ce>
 8005f8a:	9b03      	ldr	r3, [sp, #12]
 8005f8c:	1d1a      	adds	r2, r3, #4
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	9203      	str	r2, [sp, #12]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	bfb8      	it	lt
 8005f96:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f9a:	3402      	adds	r4, #2
 8005f9c:	9305      	str	r3, [sp, #20]
 8005f9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006084 <_vfiprintf_r+0x25c>
 8005fa2:	7821      	ldrb	r1, [r4, #0]
 8005fa4:	2203      	movs	r2, #3
 8005fa6:	4650      	mov	r0, sl
 8005fa8:	f7fa f8ea 	bl	8000180 <memchr>
 8005fac:	b140      	cbz	r0, 8005fc0 <_vfiprintf_r+0x198>
 8005fae:	2340      	movs	r3, #64	; 0x40
 8005fb0:	eba0 000a 	sub.w	r0, r0, sl
 8005fb4:	fa03 f000 	lsl.w	r0, r3, r0
 8005fb8:	9b04      	ldr	r3, [sp, #16]
 8005fba:	4303      	orrs	r3, r0
 8005fbc:	3401      	adds	r4, #1
 8005fbe:	9304      	str	r3, [sp, #16]
 8005fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fc4:	482c      	ldr	r0, [pc, #176]	; (8006078 <_vfiprintf_r+0x250>)
 8005fc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fca:	2206      	movs	r2, #6
 8005fcc:	f7fa f8d8 	bl	8000180 <memchr>
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	d03f      	beq.n	8006054 <_vfiprintf_r+0x22c>
 8005fd4:	4b29      	ldr	r3, [pc, #164]	; (800607c <_vfiprintf_r+0x254>)
 8005fd6:	bb1b      	cbnz	r3, 8006020 <_vfiprintf_r+0x1f8>
 8005fd8:	9b03      	ldr	r3, [sp, #12]
 8005fda:	3307      	adds	r3, #7
 8005fdc:	f023 0307 	bic.w	r3, r3, #7
 8005fe0:	3308      	adds	r3, #8
 8005fe2:	9303      	str	r3, [sp, #12]
 8005fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fe6:	443b      	add	r3, r7
 8005fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8005fea:	e767      	b.n	8005ebc <_vfiprintf_r+0x94>
 8005fec:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	2001      	movs	r0, #1
 8005ff4:	e7a5      	b.n	8005f42 <_vfiprintf_r+0x11a>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	3401      	adds	r4, #1
 8005ffa:	9305      	str	r3, [sp, #20]
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	f04f 0c0a 	mov.w	ip, #10
 8006002:	4620      	mov	r0, r4
 8006004:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006008:	3a30      	subs	r2, #48	; 0x30
 800600a:	2a09      	cmp	r2, #9
 800600c:	d903      	bls.n	8006016 <_vfiprintf_r+0x1ee>
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0c5      	beq.n	8005f9e <_vfiprintf_r+0x176>
 8006012:	9105      	str	r1, [sp, #20]
 8006014:	e7c3      	b.n	8005f9e <_vfiprintf_r+0x176>
 8006016:	fb0c 2101 	mla	r1, ip, r1, r2
 800601a:	4604      	mov	r4, r0
 800601c:	2301      	movs	r3, #1
 800601e:	e7f0      	b.n	8006002 <_vfiprintf_r+0x1da>
 8006020:	ab03      	add	r3, sp, #12
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	462a      	mov	r2, r5
 8006026:	4b16      	ldr	r3, [pc, #88]	; (8006080 <_vfiprintf_r+0x258>)
 8006028:	a904      	add	r1, sp, #16
 800602a:	4630      	mov	r0, r6
 800602c:	f3af 8000 	nop.w
 8006030:	4607      	mov	r7, r0
 8006032:	1c78      	adds	r0, r7, #1
 8006034:	d1d6      	bne.n	8005fe4 <_vfiprintf_r+0x1bc>
 8006036:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006038:	07d9      	lsls	r1, r3, #31
 800603a:	d405      	bmi.n	8006048 <_vfiprintf_r+0x220>
 800603c:	89ab      	ldrh	r3, [r5, #12]
 800603e:	059a      	lsls	r2, r3, #22
 8006040:	d402      	bmi.n	8006048 <_vfiprintf_r+0x220>
 8006042:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006044:	f7ff fd7f 	bl	8005b46 <__retarget_lock_release_recursive>
 8006048:	89ab      	ldrh	r3, [r5, #12]
 800604a:	065b      	lsls	r3, r3, #25
 800604c:	f53f af12 	bmi.w	8005e74 <_vfiprintf_r+0x4c>
 8006050:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006052:	e711      	b.n	8005e78 <_vfiprintf_r+0x50>
 8006054:	ab03      	add	r3, sp, #12
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	462a      	mov	r2, r5
 800605a:	4b09      	ldr	r3, [pc, #36]	; (8006080 <_vfiprintf_r+0x258>)
 800605c:	a904      	add	r1, sp, #16
 800605e:	4630      	mov	r0, r6
 8006060:	f000 f880 	bl	8006164 <_printf_i>
 8006064:	e7e4      	b.n	8006030 <_vfiprintf_r+0x208>
 8006066:	bf00      	nop
 8006068:	080066d8 	.word	0x080066d8
 800606c:	080066f8 	.word	0x080066f8
 8006070:	080066b8 	.word	0x080066b8
 8006074:	08006718 	.word	0x08006718
 8006078:	08006722 	.word	0x08006722
 800607c:	00000000 	.word	0x00000000
 8006080:	08005e03 	.word	0x08005e03
 8006084:	0800671e 	.word	0x0800671e

08006088 <_printf_common>:
 8006088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800608c:	4616      	mov	r6, r2
 800608e:	4699      	mov	r9, r3
 8006090:	688a      	ldr	r2, [r1, #8]
 8006092:	690b      	ldr	r3, [r1, #16]
 8006094:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006098:	4293      	cmp	r3, r2
 800609a:	bfb8      	it	lt
 800609c:	4613      	movlt	r3, r2
 800609e:	6033      	str	r3, [r6, #0]
 80060a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060a4:	4607      	mov	r7, r0
 80060a6:	460c      	mov	r4, r1
 80060a8:	b10a      	cbz	r2, 80060ae <_printf_common+0x26>
 80060aa:	3301      	adds	r3, #1
 80060ac:	6033      	str	r3, [r6, #0]
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	0699      	lsls	r1, r3, #26
 80060b2:	bf42      	ittt	mi
 80060b4:	6833      	ldrmi	r3, [r6, #0]
 80060b6:	3302      	addmi	r3, #2
 80060b8:	6033      	strmi	r3, [r6, #0]
 80060ba:	6825      	ldr	r5, [r4, #0]
 80060bc:	f015 0506 	ands.w	r5, r5, #6
 80060c0:	d106      	bne.n	80060d0 <_printf_common+0x48>
 80060c2:	f104 0a19 	add.w	sl, r4, #25
 80060c6:	68e3      	ldr	r3, [r4, #12]
 80060c8:	6832      	ldr	r2, [r6, #0]
 80060ca:	1a9b      	subs	r3, r3, r2
 80060cc:	42ab      	cmp	r3, r5
 80060ce:	dc26      	bgt.n	800611e <_printf_common+0x96>
 80060d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060d4:	1e13      	subs	r3, r2, #0
 80060d6:	6822      	ldr	r2, [r4, #0]
 80060d8:	bf18      	it	ne
 80060da:	2301      	movne	r3, #1
 80060dc:	0692      	lsls	r2, r2, #26
 80060de:	d42b      	bmi.n	8006138 <_printf_common+0xb0>
 80060e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060e4:	4649      	mov	r1, r9
 80060e6:	4638      	mov	r0, r7
 80060e8:	47c0      	blx	r8
 80060ea:	3001      	adds	r0, #1
 80060ec:	d01e      	beq.n	800612c <_printf_common+0xa4>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	68e5      	ldr	r5, [r4, #12]
 80060f2:	6832      	ldr	r2, [r6, #0]
 80060f4:	f003 0306 	and.w	r3, r3, #6
 80060f8:	2b04      	cmp	r3, #4
 80060fa:	bf08      	it	eq
 80060fc:	1aad      	subeq	r5, r5, r2
 80060fe:	68a3      	ldr	r3, [r4, #8]
 8006100:	6922      	ldr	r2, [r4, #16]
 8006102:	bf0c      	ite	eq
 8006104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006108:	2500      	movne	r5, #0
 800610a:	4293      	cmp	r3, r2
 800610c:	bfc4      	itt	gt
 800610e:	1a9b      	subgt	r3, r3, r2
 8006110:	18ed      	addgt	r5, r5, r3
 8006112:	2600      	movs	r6, #0
 8006114:	341a      	adds	r4, #26
 8006116:	42b5      	cmp	r5, r6
 8006118:	d11a      	bne.n	8006150 <_printf_common+0xc8>
 800611a:	2000      	movs	r0, #0
 800611c:	e008      	b.n	8006130 <_printf_common+0xa8>
 800611e:	2301      	movs	r3, #1
 8006120:	4652      	mov	r2, sl
 8006122:	4649      	mov	r1, r9
 8006124:	4638      	mov	r0, r7
 8006126:	47c0      	blx	r8
 8006128:	3001      	adds	r0, #1
 800612a:	d103      	bne.n	8006134 <_printf_common+0xac>
 800612c:	f04f 30ff 	mov.w	r0, #4294967295
 8006130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006134:	3501      	adds	r5, #1
 8006136:	e7c6      	b.n	80060c6 <_printf_common+0x3e>
 8006138:	18e1      	adds	r1, r4, r3
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	2030      	movs	r0, #48	; 0x30
 800613e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006142:	4422      	add	r2, r4
 8006144:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006148:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800614c:	3302      	adds	r3, #2
 800614e:	e7c7      	b.n	80060e0 <_printf_common+0x58>
 8006150:	2301      	movs	r3, #1
 8006152:	4622      	mov	r2, r4
 8006154:	4649      	mov	r1, r9
 8006156:	4638      	mov	r0, r7
 8006158:	47c0      	blx	r8
 800615a:	3001      	adds	r0, #1
 800615c:	d0e6      	beq.n	800612c <_printf_common+0xa4>
 800615e:	3601      	adds	r6, #1
 8006160:	e7d9      	b.n	8006116 <_printf_common+0x8e>
	...

08006164 <_printf_i>:
 8006164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006168:	7e0f      	ldrb	r7, [r1, #24]
 800616a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800616c:	2f78      	cmp	r7, #120	; 0x78
 800616e:	4691      	mov	r9, r2
 8006170:	4680      	mov	r8, r0
 8006172:	460c      	mov	r4, r1
 8006174:	469a      	mov	sl, r3
 8006176:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800617a:	d807      	bhi.n	800618c <_printf_i+0x28>
 800617c:	2f62      	cmp	r7, #98	; 0x62
 800617e:	d80a      	bhi.n	8006196 <_printf_i+0x32>
 8006180:	2f00      	cmp	r7, #0
 8006182:	f000 80d8 	beq.w	8006336 <_printf_i+0x1d2>
 8006186:	2f58      	cmp	r7, #88	; 0x58
 8006188:	f000 80a3 	beq.w	80062d2 <_printf_i+0x16e>
 800618c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006190:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006194:	e03a      	b.n	800620c <_printf_i+0xa8>
 8006196:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800619a:	2b15      	cmp	r3, #21
 800619c:	d8f6      	bhi.n	800618c <_printf_i+0x28>
 800619e:	a101      	add	r1, pc, #4	; (adr r1, 80061a4 <_printf_i+0x40>)
 80061a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061a4:	080061fd 	.word	0x080061fd
 80061a8:	08006211 	.word	0x08006211
 80061ac:	0800618d 	.word	0x0800618d
 80061b0:	0800618d 	.word	0x0800618d
 80061b4:	0800618d 	.word	0x0800618d
 80061b8:	0800618d 	.word	0x0800618d
 80061bc:	08006211 	.word	0x08006211
 80061c0:	0800618d 	.word	0x0800618d
 80061c4:	0800618d 	.word	0x0800618d
 80061c8:	0800618d 	.word	0x0800618d
 80061cc:	0800618d 	.word	0x0800618d
 80061d0:	0800631d 	.word	0x0800631d
 80061d4:	08006241 	.word	0x08006241
 80061d8:	080062ff 	.word	0x080062ff
 80061dc:	0800618d 	.word	0x0800618d
 80061e0:	0800618d 	.word	0x0800618d
 80061e4:	0800633f 	.word	0x0800633f
 80061e8:	0800618d 	.word	0x0800618d
 80061ec:	08006241 	.word	0x08006241
 80061f0:	0800618d 	.word	0x0800618d
 80061f4:	0800618d 	.word	0x0800618d
 80061f8:	08006307 	.word	0x08006307
 80061fc:	682b      	ldr	r3, [r5, #0]
 80061fe:	1d1a      	adds	r2, r3, #4
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	602a      	str	r2, [r5, #0]
 8006204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006208:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800620c:	2301      	movs	r3, #1
 800620e:	e0a3      	b.n	8006358 <_printf_i+0x1f4>
 8006210:	6820      	ldr	r0, [r4, #0]
 8006212:	6829      	ldr	r1, [r5, #0]
 8006214:	0606      	lsls	r6, r0, #24
 8006216:	f101 0304 	add.w	r3, r1, #4
 800621a:	d50a      	bpl.n	8006232 <_printf_i+0xce>
 800621c:	680e      	ldr	r6, [r1, #0]
 800621e:	602b      	str	r3, [r5, #0]
 8006220:	2e00      	cmp	r6, #0
 8006222:	da03      	bge.n	800622c <_printf_i+0xc8>
 8006224:	232d      	movs	r3, #45	; 0x2d
 8006226:	4276      	negs	r6, r6
 8006228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800622c:	485e      	ldr	r0, [pc, #376]	; (80063a8 <_printf_i+0x244>)
 800622e:	230a      	movs	r3, #10
 8006230:	e019      	b.n	8006266 <_printf_i+0x102>
 8006232:	680e      	ldr	r6, [r1, #0]
 8006234:	602b      	str	r3, [r5, #0]
 8006236:	f010 0f40 	tst.w	r0, #64	; 0x40
 800623a:	bf18      	it	ne
 800623c:	b236      	sxthne	r6, r6
 800623e:	e7ef      	b.n	8006220 <_printf_i+0xbc>
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	6820      	ldr	r0, [r4, #0]
 8006244:	1d19      	adds	r1, r3, #4
 8006246:	6029      	str	r1, [r5, #0]
 8006248:	0601      	lsls	r1, r0, #24
 800624a:	d501      	bpl.n	8006250 <_printf_i+0xec>
 800624c:	681e      	ldr	r6, [r3, #0]
 800624e:	e002      	b.n	8006256 <_printf_i+0xf2>
 8006250:	0646      	lsls	r6, r0, #25
 8006252:	d5fb      	bpl.n	800624c <_printf_i+0xe8>
 8006254:	881e      	ldrh	r6, [r3, #0]
 8006256:	4854      	ldr	r0, [pc, #336]	; (80063a8 <_printf_i+0x244>)
 8006258:	2f6f      	cmp	r7, #111	; 0x6f
 800625a:	bf0c      	ite	eq
 800625c:	2308      	moveq	r3, #8
 800625e:	230a      	movne	r3, #10
 8006260:	2100      	movs	r1, #0
 8006262:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006266:	6865      	ldr	r5, [r4, #4]
 8006268:	60a5      	str	r5, [r4, #8]
 800626a:	2d00      	cmp	r5, #0
 800626c:	bfa2      	ittt	ge
 800626e:	6821      	ldrge	r1, [r4, #0]
 8006270:	f021 0104 	bicge.w	r1, r1, #4
 8006274:	6021      	strge	r1, [r4, #0]
 8006276:	b90e      	cbnz	r6, 800627c <_printf_i+0x118>
 8006278:	2d00      	cmp	r5, #0
 800627a:	d04d      	beq.n	8006318 <_printf_i+0x1b4>
 800627c:	4615      	mov	r5, r2
 800627e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006282:	fb03 6711 	mls	r7, r3, r1, r6
 8006286:	5dc7      	ldrb	r7, [r0, r7]
 8006288:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800628c:	4637      	mov	r7, r6
 800628e:	42bb      	cmp	r3, r7
 8006290:	460e      	mov	r6, r1
 8006292:	d9f4      	bls.n	800627e <_printf_i+0x11a>
 8006294:	2b08      	cmp	r3, #8
 8006296:	d10b      	bne.n	80062b0 <_printf_i+0x14c>
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	07de      	lsls	r6, r3, #31
 800629c:	d508      	bpl.n	80062b0 <_printf_i+0x14c>
 800629e:	6923      	ldr	r3, [r4, #16]
 80062a0:	6861      	ldr	r1, [r4, #4]
 80062a2:	4299      	cmp	r1, r3
 80062a4:	bfde      	ittt	le
 80062a6:	2330      	movle	r3, #48	; 0x30
 80062a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062b0:	1b52      	subs	r2, r2, r5
 80062b2:	6122      	str	r2, [r4, #16]
 80062b4:	f8cd a000 	str.w	sl, [sp]
 80062b8:	464b      	mov	r3, r9
 80062ba:	aa03      	add	r2, sp, #12
 80062bc:	4621      	mov	r1, r4
 80062be:	4640      	mov	r0, r8
 80062c0:	f7ff fee2 	bl	8006088 <_printf_common>
 80062c4:	3001      	adds	r0, #1
 80062c6:	d14c      	bne.n	8006362 <_printf_i+0x1fe>
 80062c8:	f04f 30ff 	mov.w	r0, #4294967295
 80062cc:	b004      	add	sp, #16
 80062ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062d2:	4835      	ldr	r0, [pc, #212]	; (80063a8 <_printf_i+0x244>)
 80062d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062d8:	6829      	ldr	r1, [r5, #0]
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80062e0:	6029      	str	r1, [r5, #0]
 80062e2:	061d      	lsls	r5, r3, #24
 80062e4:	d514      	bpl.n	8006310 <_printf_i+0x1ac>
 80062e6:	07df      	lsls	r7, r3, #31
 80062e8:	bf44      	itt	mi
 80062ea:	f043 0320 	orrmi.w	r3, r3, #32
 80062ee:	6023      	strmi	r3, [r4, #0]
 80062f0:	b91e      	cbnz	r6, 80062fa <_printf_i+0x196>
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	f023 0320 	bic.w	r3, r3, #32
 80062f8:	6023      	str	r3, [r4, #0]
 80062fa:	2310      	movs	r3, #16
 80062fc:	e7b0      	b.n	8006260 <_printf_i+0xfc>
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	f043 0320 	orr.w	r3, r3, #32
 8006304:	6023      	str	r3, [r4, #0]
 8006306:	2378      	movs	r3, #120	; 0x78
 8006308:	4828      	ldr	r0, [pc, #160]	; (80063ac <_printf_i+0x248>)
 800630a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800630e:	e7e3      	b.n	80062d8 <_printf_i+0x174>
 8006310:	0659      	lsls	r1, r3, #25
 8006312:	bf48      	it	mi
 8006314:	b2b6      	uxthmi	r6, r6
 8006316:	e7e6      	b.n	80062e6 <_printf_i+0x182>
 8006318:	4615      	mov	r5, r2
 800631a:	e7bb      	b.n	8006294 <_printf_i+0x130>
 800631c:	682b      	ldr	r3, [r5, #0]
 800631e:	6826      	ldr	r6, [r4, #0]
 8006320:	6961      	ldr	r1, [r4, #20]
 8006322:	1d18      	adds	r0, r3, #4
 8006324:	6028      	str	r0, [r5, #0]
 8006326:	0635      	lsls	r5, r6, #24
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	d501      	bpl.n	8006330 <_printf_i+0x1cc>
 800632c:	6019      	str	r1, [r3, #0]
 800632e:	e002      	b.n	8006336 <_printf_i+0x1d2>
 8006330:	0670      	lsls	r0, r6, #25
 8006332:	d5fb      	bpl.n	800632c <_printf_i+0x1c8>
 8006334:	8019      	strh	r1, [r3, #0]
 8006336:	2300      	movs	r3, #0
 8006338:	6123      	str	r3, [r4, #16]
 800633a:	4615      	mov	r5, r2
 800633c:	e7ba      	b.n	80062b4 <_printf_i+0x150>
 800633e:	682b      	ldr	r3, [r5, #0]
 8006340:	1d1a      	adds	r2, r3, #4
 8006342:	602a      	str	r2, [r5, #0]
 8006344:	681d      	ldr	r5, [r3, #0]
 8006346:	6862      	ldr	r2, [r4, #4]
 8006348:	2100      	movs	r1, #0
 800634a:	4628      	mov	r0, r5
 800634c:	f7f9 ff18 	bl	8000180 <memchr>
 8006350:	b108      	cbz	r0, 8006356 <_printf_i+0x1f2>
 8006352:	1b40      	subs	r0, r0, r5
 8006354:	6060      	str	r0, [r4, #4]
 8006356:	6863      	ldr	r3, [r4, #4]
 8006358:	6123      	str	r3, [r4, #16]
 800635a:	2300      	movs	r3, #0
 800635c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006360:	e7a8      	b.n	80062b4 <_printf_i+0x150>
 8006362:	6923      	ldr	r3, [r4, #16]
 8006364:	462a      	mov	r2, r5
 8006366:	4649      	mov	r1, r9
 8006368:	4640      	mov	r0, r8
 800636a:	47d0      	blx	sl
 800636c:	3001      	adds	r0, #1
 800636e:	d0ab      	beq.n	80062c8 <_printf_i+0x164>
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	079b      	lsls	r3, r3, #30
 8006374:	d413      	bmi.n	800639e <_printf_i+0x23a>
 8006376:	68e0      	ldr	r0, [r4, #12]
 8006378:	9b03      	ldr	r3, [sp, #12]
 800637a:	4298      	cmp	r0, r3
 800637c:	bfb8      	it	lt
 800637e:	4618      	movlt	r0, r3
 8006380:	e7a4      	b.n	80062cc <_printf_i+0x168>
 8006382:	2301      	movs	r3, #1
 8006384:	4632      	mov	r2, r6
 8006386:	4649      	mov	r1, r9
 8006388:	4640      	mov	r0, r8
 800638a:	47d0      	blx	sl
 800638c:	3001      	adds	r0, #1
 800638e:	d09b      	beq.n	80062c8 <_printf_i+0x164>
 8006390:	3501      	adds	r5, #1
 8006392:	68e3      	ldr	r3, [r4, #12]
 8006394:	9903      	ldr	r1, [sp, #12]
 8006396:	1a5b      	subs	r3, r3, r1
 8006398:	42ab      	cmp	r3, r5
 800639a:	dcf2      	bgt.n	8006382 <_printf_i+0x21e>
 800639c:	e7eb      	b.n	8006376 <_printf_i+0x212>
 800639e:	2500      	movs	r5, #0
 80063a0:	f104 0619 	add.w	r6, r4, #25
 80063a4:	e7f5      	b.n	8006392 <_printf_i+0x22e>
 80063a6:	bf00      	nop
 80063a8:	08006729 	.word	0x08006729
 80063ac:	0800673a 	.word	0x0800673a

080063b0 <_sbrk_r>:
 80063b0:	b538      	push	{r3, r4, r5, lr}
 80063b2:	4d06      	ldr	r5, [pc, #24]	; (80063cc <_sbrk_r+0x1c>)
 80063b4:	2300      	movs	r3, #0
 80063b6:	4604      	mov	r4, r0
 80063b8:	4608      	mov	r0, r1
 80063ba:	602b      	str	r3, [r5, #0]
 80063bc:	f7fa fae2 	bl	8000984 <_sbrk>
 80063c0:	1c43      	adds	r3, r0, #1
 80063c2:	d102      	bne.n	80063ca <_sbrk_r+0x1a>
 80063c4:	682b      	ldr	r3, [r5, #0]
 80063c6:	b103      	cbz	r3, 80063ca <_sbrk_r+0x1a>
 80063c8:	6023      	str	r3, [r4, #0]
 80063ca:	bd38      	pop	{r3, r4, r5, pc}
 80063cc:	20000670 	.word	0x20000670

080063d0 <__sread>:
 80063d0:	b510      	push	{r4, lr}
 80063d2:	460c      	mov	r4, r1
 80063d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d8:	f000 f8a0 	bl	800651c <_read_r>
 80063dc:	2800      	cmp	r0, #0
 80063de:	bfab      	itete	ge
 80063e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063e2:	89a3      	ldrhlt	r3, [r4, #12]
 80063e4:	181b      	addge	r3, r3, r0
 80063e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063ea:	bfac      	ite	ge
 80063ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80063ee:	81a3      	strhlt	r3, [r4, #12]
 80063f0:	bd10      	pop	{r4, pc}

080063f2 <__swrite>:
 80063f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f6:	461f      	mov	r7, r3
 80063f8:	898b      	ldrh	r3, [r1, #12]
 80063fa:	05db      	lsls	r3, r3, #23
 80063fc:	4605      	mov	r5, r0
 80063fe:	460c      	mov	r4, r1
 8006400:	4616      	mov	r6, r2
 8006402:	d505      	bpl.n	8006410 <__swrite+0x1e>
 8006404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006408:	2302      	movs	r3, #2
 800640a:	2200      	movs	r2, #0
 800640c:	f000 f868 	bl	80064e0 <_lseek_r>
 8006410:	89a3      	ldrh	r3, [r4, #12]
 8006412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800641a:	81a3      	strh	r3, [r4, #12]
 800641c:	4632      	mov	r2, r6
 800641e:	463b      	mov	r3, r7
 8006420:	4628      	mov	r0, r5
 8006422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006426:	f000 b817 	b.w	8006458 <_write_r>

0800642a <__sseek>:
 800642a:	b510      	push	{r4, lr}
 800642c:	460c      	mov	r4, r1
 800642e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006432:	f000 f855 	bl	80064e0 <_lseek_r>
 8006436:	1c43      	adds	r3, r0, #1
 8006438:	89a3      	ldrh	r3, [r4, #12]
 800643a:	bf15      	itete	ne
 800643c:	6560      	strne	r0, [r4, #84]	; 0x54
 800643e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006442:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006446:	81a3      	strheq	r3, [r4, #12]
 8006448:	bf18      	it	ne
 800644a:	81a3      	strhne	r3, [r4, #12]
 800644c:	bd10      	pop	{r4, pc}

0800644e <__sclose>:
 800644e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006452:	f000 b813 	b.w	800647c <_close_r>
	...

08006458 <_write_r>:
 8006458:	b538      	push	{r3, r4, r5, lr}
 800645a:	4d07      	ldr	r5, [pc, #28]	; (8006478 <_write_r+0x20>)
 800645c:	4604      	mov	r4, r0
 800645e:	4608      	mov	r0, r1
 8006460:	4611      	mov	r1, r2
 8006462:	2200      	movs	r2, #0
 8006464:	602a      	str	r2, [r5, #0]
 8006466:	461a      	mov	r2, r3
 8006468:	f7fa f925 	bl	80006b6 <_write>
 800646c:	1c43      	adds	r3, r0, #1
 800646e:	d102      	bne.n	8006476 <_write_r+0x1e>
 8006470:	682b      	ldr	r3, [r5, #0]
 8006472:	b103      	cbz	r3, 8006476 <_write_r+0x1e>
 8006474:	6023      	str	r3, [r4, #0]
 8006476:	bd38      	pop	{r3, r4, r5, pc}
 8006478:	20000670 	.word	0x20000670

0800647c <_close_r>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	4d06      	ldr	r5, [pc, #24]	; (8006498 <_close_r+0x1c>)
 8006480:	2300      	movs	r3, #0
 8006482:	4604      	mov	r4, r0
 8006484:	4608      	mov	r0, r1
 8006486:	602b      	str	r3, [r5, #0]
 8006488:	f7fa fa47 	bl	800091a <_close>
 800648c:	1c43      	adds	r3, r0, #1
 800648e:	d102      	bne.n	8006496 <_close_r+0x1a>
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	b103      	cbz	r3, 8006496 <_close_r+0x1a>
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	bd38      	pop	{r3, r4, r5, pc}
 8006498:	20000670 	.word	0x20000670

0800649c <_fstat_r>:
 800649c:	b538      	push	{r3, r4, r5, lr}
 800649e:	4d07      	ldr	r5, [pc, #28]	; (80064bc <_fstat_r+0x20>)
 80064a0:	2300      	movs	r3, #0
 80064a2:	4604      	mov	r4, r0
 80064a4:	4608      	mov	r0, r1
 80064a6:	4611      	mov	r1, r2
 80064a8:	602b      	str	r3, [r5, #0]
 80064aa:	f7fa fa42 	bl	8000932 <_fstat>
 80064ae:	1c43      	adds	r3, r0, #1
 80064b0:	d102      	bne.n	80064b8 <_fstat_r+0x1c>
 80064b2:	682b      	ldr	r3, [r5, #0]
 80064b4:	b103      	cbz	r3, 80064b8 <_fstat_r+0x1c>
 80064b6:	6023      	str	r3, [r4, #0]
 80064b8:	bd38      	pop	{r3, r4, r5, pc}
 80064ba:	bf00      	nop
 80064bc:	20000670 	.word	0x20000670

080064c0 <_isatty_r>:
 80064c0:	b538      	push	{r3, r4, r5, lr}
 80064c2:	4d06      	ldr	r5, [pc, #24]	; (80064dc <_isatty_r+0x1c>)
 80064c4:	2300      	movs	r3, #0
 80064c6:	4604      	mov	r4, r0
 80064c8:	4608      	mov	r0, r1
 80064ca:	602b      	str	r3, [r5, #0]
 80064cc:	f7fa fa41 	bl	8000952 <_isatty>
 80064d0:	1c43      	adds	r3, r0, #1
 80064d2:	d102      	bne.n	80064da <_isatty_r+0x1a>
 80064d4:	682b      	ldr	r3, [r5, #0]
 80064d6:	b103      	cbz	r3, 80064da <_isatty_r+0x1a>
 80064d8:	6023      	str	r3, [r4, #0]
 80064da:	bd38      	pop	{r3, r4, r5, pc}
 80064dc:	20000670 	.word	0x20000670

080064e0 <_lseek_r>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	4d07      	ldr	r5, [pc, #28]	; (8006500 <_lseek_r+0x20>)
 80064e4:	4604      	mov	r4, r0
 80064e6:	4608      	mov	r0, r1
 80064e8:	4611      	mov	r1, r2
 80064ea:	2200      	movs	r2, #0
 80064ec:	602a      	str	r2, [r5, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	f7fa fa3a 	bl	8000968 <_lseek>
 80064f4:	1c43      	adds	r3, r0, #1
 80064f6:	d102      	bne.n	80064fe <_lseek_r+0x1e>
 80064f8:	682b      	ldr	r3, [r5, #0]
 80064fa:	b103      	cbz	r3, 80064fe <_lseek_r+0x1e>
 80064fc:	6023      	str	r3, [r4, #0]
 80064fe:	bd38      	pop	{r3, r4, r5, pc}
 8006500:	20000670 	.word	0x20000670

08006504 <__malloc_lock>:
 8006504:	4801      	ldr	r0, [pc, #4]	; (800650c <__malloc_lock+0x8>)
 8006506:	f7ff bb1d 	b.w	8005b44 <__retarget_lock_acquire_recursive>
 800650a:	bf00      	nop
 800650c:	20000664 	.word	0x20000664

08006510 <__malloc_unlock>:
 8006510:	4801      	ldr	r0, [pc, #4]	; (8006518 <__malloc_unlock+0x8>)
 8006512:	f7ff bb18 	b.w	8005b46 <__retarget_lock_release_recursive>
 8006516:	bf00      	nop
 8006518:	20000664 	.word	0x20000664

0800651c <_read_r>:
 800651c:	b538      	push	{r3, r4, r5, lr}
 800651e:	4d07      	ldr	r5, [pc, #28]	; (800653c <_read_r+0x20>)
 8006520:	4604      	mov	r4, r0
 8006522:	4608      	mov	r0, r1
 8006524:	4611      	mov	r1, r2
 8006526:	2200      	movs	r2, #0
 8006528:	602a      	str	r2, [r5, #0]
 800652a:	461a      	mov	r2, r3
 800652c:	f7fa f9d8 	bl	80008e0 <_read>
 8006530:	1c43      	adds	r3, r0, #1
 8006532:	d102      	bne.n	800653a <_read_r+0x1e>
 8006534:	682b      	ldr	r3, [r5, #0]
 8006536:	b103      	cbz	r3, 800653a <_read_r+0x1e>
 8006538:	6023      	str	r3, [r4, #0]
 800653a:	bd38      	pop	{r3, r4, r5, pc}
 800653c:	20000670 	.word	0x20000670

08006540 <_init>:
 8006540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006542:	bf00      	nop
 8006544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006546:	bc08      	pop	{r3}
 8006548:	469e      	mov	lr, r3
 800654a:	4770      	bx	lr

0800654c <_fini>:
 800654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654e:	bf00      	nop
 8006550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006552:	bc08      	pop	{r3}
 8006554:	469e      	mov	lr, r3
 8006556:	4770      	bx	lr
