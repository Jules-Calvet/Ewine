
Test_Wifi_05_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064f8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08006638  08006638  00016638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006838  08006838  00016838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006840  08006840  00016840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006844  08006844  00016844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000008  08006848  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005ec  20000098  080068d8  00020098  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000684  080068d8  00020684  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001724d  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003451  00000000  00000000  00037315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001660  00000000  00000000  0003a768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001508  00000000  00000000  0003bdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000239a2  00000000  00000000  0003d2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015ce3  00000000  00000000  00060c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000da757  00000000  00000000  00076955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001510ac  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000063bc  00000000  00000000  001510fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000098 	.word	0x20000098
 800015c:	00000000 	.word	0x00000000
 8000160:	08006620 	.word	0x08006620

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000009c 	.word	0x2000009c
 800017c:	08006620 	.word	0x08006620

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000530:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4313      	orrs	r3, r2
 800053a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000540:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4013      	ands	r3, r2
 8000546:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000548:	68fb      	ldr	r3, [r7, #12]
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800055a:	2004      	movs	r0, #4
 800055c:	f7ff ffe2 	bl	8000524 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000560:	2001      	movs	r0, #1
 8000562:	f7ff ffdf 	bl	8000524 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2100      	movs	r1, #0
 800056a:	200c      	movs	r0, #12
 800056c:	f000 ffe9 	bl	8001542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000570:	200c      	movs	r0, #12
 8000572:	f001 f800 	bl	8001576 <HAL_NVIC_EnableIRQ>

}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}

0800057a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800057a:	b480      	push	{r7}
 800057c:	b085      	sub	sp, #20
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000588:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4313      	orrs	r3, r2
 8000590:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000596:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4013      	ands	r3, r2
 800059c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800059e:	68fb      	ldr	r3, [r7, #12]
}
 80005a0:	bf00      	nop
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c0:	2004      	movs	r0, #4
 80005c2:	f7ff ffda 	bl	800057a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	2002      	movs	r0, #2
 80005c8:	f7ff ffd7 	bl	800057a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005cc:	2001      	movs	r0, #1
 80005ce:	f7ff ffd4 	bl	800057a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005d2:	2008      	movs	r0, #8
 80005d4:	f7ff ffd1 	bl	800057a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2123      	movs	r1, #35	; 0x23
 80005dc:	4814      	ldr	r0, [pc, #80]	; (8000630 <MX_GPIO_Init+0x84>)
 80005de:	f001 fc95 	bl	8001f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005e2:	2310      	movs	r3, #16
 80005e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	4619      	mov	r1, r3
 80005f2:	4810      	ldr	r0, [pc, #64]	; (8000634 <MX_GPIO_Init+0x88>)
 80005f4:	f001 fb1a 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80005f8:	2323      	movs	r3, #35	; 0x23
 80005fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fc:	2301      	movs	r3, #1
 80005fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4619      	mov	r1, r3
 800060c:	4808      	ldr	r0, [pc, #32]	; (8000630 <MX_GPIO_Init+0x84>)
 800060e:	f001 fb0d 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000612:	2303      	movs	r3, #3
 8000614:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	4619      	mov	r1, r3
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <MX_GPIO_Init+0x8c>)
 8000624:	f001 fb02 	bl	8001c2c <HAL_GPIO_Init>

}
 8000628:	bf00      	nop
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	48000400 	.word	0x48000400
 8000634:	48000800 	.word	0x48000800
 8000638:	48000c00 	.word	0x48000c00

0800063c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000644:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000648:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	2b00      	cmp	r3, #0
 8000652:	d013      	beq.n	800067c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000654:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000658:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800065c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000660:	2b00      	cmp	r3, #0
 8000662:	d00b      	beq.n	800067c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000664:	e000      	b.n	8000668 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000666:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000668:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0f9      	beq.n	8000666 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000672:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800067c:	687b      	ldr	r3, [r7, #4]
}
 800067e:	4618      	mov	r0, r3
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800069a:	f023 0218 	bic.w	r2, r3, #24
 800069e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b086      	sub	sp, #24
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	60f8      	str	r0, [r7, #12]
 80006be:	60b9      	str	r1, [r7, #8]
 80006c0:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
 80006c6:	e009      	b.n	80006dc <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	60ba      	str	r2, [r7, #8]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ffb3 	bl	800063c <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	3301      	adds	r3, #1
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	697a      	ldr	r2, [r7, #20]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	dbf1      	blt.n	80006c8 <_write+0x12>
}
return len;
 80006e4:	687b      	ldr	r3, [r7, #4]
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f4:	f000 fd7c 	bl	80011f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f8:	f000 f814 	bl	8000724 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006fc:	f000 f888 	bl	8000810 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f7ff ff54 	bl	80005ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000704:	f7ff ff27 	bl	8000556 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000708:	f000 fa5c 	bl	8000bc4 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 800070c:	f000 fb84 	bl	8000e18 <MX_USB_PCD_Init>
  MX_LPUART1_UART_Init();
 8000710:	f000 fa0c 	bl	8000b2c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //Wifi_Init();
  printf("StartReception : \n");
 8000714:	4802      	ldr	r0, [pc, #8]	; (8000720 <main+0x30>)
 8000716:	f005 f805 	bl	8005724 <puts>
  StartReception();
 800071a:	f000 fc19 	bl	8000f50 <StartReception>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800071e:	e7fe      	b.n	800071e <main+0x2e>
 8000720:	08006638 	.word	0x08006638

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b09a      	sub	sp, #104	; 0x68
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2248      	movs	r2, #72	; 0x48
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f004 ff68 	bl	8005608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
 8000746:	615a      	str	r2, [r3, #20]
 8000748:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800074a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000758:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800075a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	f023 0303 	bic.w	r3, r3, #3
 8000764:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800076e:	f001 fce9 	bl	8002144 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8000772:	2010      	movs	r0, #16
 8000774:	f7ff ff89 	bl	800068a <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	4b24      	ldr	r3, [pc, #144]	; (800080c <SystemClock_Config+0xe8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000780:	4a22      	ldr	r2, [pc, #136]	; (800080c <SystemClock_Config+0xe8>)
 8000782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b20      	ldr	r3, [pc, #128]	; (800080c <SystemClock_Config+0xe8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000794:	2327      	movs	r3, #39	; 0x27
 8000796:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800079e:	2301      	movs	r3, #1
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007a8:	2301      	movs	r3, #1
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ac:	2340      	movs	r3, #64	; 0x40
 80007ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007b0:	2300      	movs	r3, #0
 80007b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007b4:	2360      	movs	r3, #96	; 0x60
 80007b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 0320 	add.w	r3, r7, #32
 80007c0:	4618      	mov	r0, r3
 80007c2:	f002 f853 	bl	800286c <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80007cc:	f000 f83d 	bl	800084a <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80007d0:	236f      	movs	r3, #111	; 0x6f
 80007d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80007d4:	2302      	movs	r3, #2
 80007d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2101      	movs	r1, #1
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 fbaf 	bl	8002f54 <HAL_RCC_ClockConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80007fc:	f000 f825 	bl	800084a <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000800:	f003 f96a 	bl	8003ad8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000804:	bf00      	nop
 8000806:	3768      	adds	r7, #104	; 0x68
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	58000400 	.word	0x58000400

08000810 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b094      	sub	sp, #80	; 0x50
 8000814:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000816:	463b      	mov	r3, r7
 8000818:	2250      	movs	r2, #80	; 0x50
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f004 fef3 	bl	8005608 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000822:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000826:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000828:	2300      	movs	r3, #0
 800082a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800082c:	2300      	movs	r3, #0
 800082e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	4618      	mov	r0, r3
 8000834:	f002 ffda 	bl	80037ec <HAL_RCCEx_PeriphCLKConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800083e:	f000 f804 	bl	800084a <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000842:	bf00      	nop
 8000844:	3750      	adds	r7, #80	; 0x50
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084e:	b672      	cpsid	i
}
 8000850:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000852:	e7fe      	b.n	8000852 <Error_Handler+0x8>

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <NMI_Handler+0x4>

08000868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <HardFault_Handler+0x4>

0800086e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <MemManage_Handler+0x4>

08000874 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <BusFault_Handler+0x4>

0800087a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <UsageFault_Handler+0x4>

08000880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ae:	f000 fcf9 	bl	80012a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <DMA1_Channel2_IRQHandler+0x10>)
 80008be:	f001 f864 	bl	800198a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200001e0 	.word	0x200001e0

080008cc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <LPUART1_IRQHandler+0x10>)
 80008d2:	f003 fb0f 	bl	8003ef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000b8 	.word	0x200000b8

080008e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	e00a      	b.n	8000908 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008f2:	f3af 8000 	nop.w
 80008f6:	4601      	mov	r1, r0
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	60ba      	str	r2, [r7, #8]
 80008fe:	b2ca      	uxtb	r2, r1
 8000900:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	3301      	adds	r3, #1
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697a      	ldr	r2, [r7, #20]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	429a      	cmp	r2, r3
 800090e:	dbf0      	blt.n	80008f2 <_read+0x12>
  }

  return len;
 8000910:	687b      	ldr	r3, [r7, #4]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <_close>:
  }
  return len;
}

int _close(int file)
{
 800091a:	b480      	push	{r7}
 800091c:	b083      	sub	sp, #12
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000926:	4618      	mov	r0, r3
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000932:	b480      	push	{r7}
 8000934:	b083      	sub	sp, #12
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
 800093a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000942:	605a      	str	r2, [r3, #4]
  return 0;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <_isatty>:

int _isatty(int file)
{
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800095a:	2301      	movs	r3, #1
}
 800095c:	4618      	mov	r0, r3
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	3714      	adds	r7, #20
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
	...

08000984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800098c:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <_sbrk+0x5c>)
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <_sbrk+0x60>)
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <_sbrk+0x64>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <_sbrk+0x68>)
 80009a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d207      	bcs.n	80009c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b4:	f004 fdfe 	bl	80055b4 <__errno>
 80009b8:	4603      	mov	r3, r0
 80009ba:	220c      	movs	r2, #12
 80009bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009be:	f04f 33ff 	mov.w	r3, #4294967295
 80009c2:	e009      	b.n	80009d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ca:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <_sbrk+0x64>)
 80009d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d6:	68fb      	ldr	r3, [r7, #12]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20030000 	.word	0x20030000
 80009e4:	00000400 	.word	0x00000400
 80009e8:	200000b4 	.word	0x200000b4
 80009ec:	20000688 	.word	0x20000688

080009f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <SystemInit+0x98>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fa:	4a23      	ldr	r2, [pc, #140]	; (8000a88 <SystemInit+0x98>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a18:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000a1c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <SystemInit+0x9c>)
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a3a:	f023 0305 	bic.w	r3, r3, #5
 8000a3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a4e:	f023 0301 	bic.w	r3, r3, #1
 8000a52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a5a:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <SystemInit+0xa0>)
 8000a5c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <SystemInit+0xa0>)
 8000a64:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00
 8000a8c:	faf6fefb 	.word	0xfaf6fefb
 8000a90:	22041000 	.word	0x22041000

08000a94 <LL_AHB2_GRP1_EnableClock>:
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000aa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ab0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
}
 8000aba:	bf00      	nop
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b085      	sub	sp, #20
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ad2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ad4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ae2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aea:	68fb      	ldr	r3, [r7, #12]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
}
 8000b1e:	bf00      	nop
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b32:	4a23      	ldr	r2, [pc, #140]	; (8000bc0 <MX_LPUART1_UART_Init+0x94>)
 8000b34:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000b36:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5c:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b62:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b74:	4811      	ldr	r0, [pc, #68]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b76:	f003 f8e6 	bl	8003d46 <HAL_UART_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b80:	f7ff fe63 	bl	800084a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b84:	2100      	movs	r1, #0
 8000b86:	480d      	ldr	r0, [pc, #52]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b88:	f004 fbba 	bl	8005300 <HAL_UARTEx_SetTxFifoThreshold>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b92:	f7ff fe5a 	bl	800084a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b96:	2100      	movs	r1, #0
 8000b98:	4808      	ldr	r0, [pc, #32]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000b9a:	f004 fbef 	bl	800537c <HAL_UARTEx_SetRxFifoThreshold>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ba4:	f7ff fe51 	bl	800084a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000ba8:	4804      	ldr	r0, [pc, #16]	; (8000bbc <MX_LPUART1_UART_Init+0x90>)
 8000baa:	f004 fb70 	bl	800528e <HAL_UARTEx_DisableFifoMode>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bb4:	f7ff fe49 	bl	800084a <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200000b8 	.word	0x200000b8
 8000bc0:	40008000 	.word	0x40008000

08000bc4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bc8:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000bca:	4a24      	ldr	r2, [pc, #144]	; (8000c5c <MX_USART1_UART_Init+0x98>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bce:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000bd6:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bdc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bde:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000be4:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bea:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000bec:	220c      	movs	r2, #12
 8000bee:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf0:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c0e:	4812      	ldr	r0, [pc, #72]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000c10:	f003 f899 	bl	8003d46 <HAL_UART_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000c1a:	f7ff fe16 	bl	800084a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	480d      	ldr	r0, [pc, #52]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000c22:	f004 fb6d 	bl	8005300 <HAL_UARTEx_SetTxFifoThreshold>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000c2c:	f7ff fe0d 	bl	800084a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c30:	2100      	movs	r1, #0
 8000c32:	4809      	ldr	r0, [pc, #36]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000c34:	f004 fba2 	bl	800537c <HAL_UARTEx_SetRxFifoThreshold>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000c3e:	f7ff fe04 	bl	800084a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <MX_USART1_UART_Init+0x94>)
 8000c44:	f004 fb23 	bl	800528e <HAL_UARTEx_DisableFifoMode>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000c4e:	f7ff fdfc 	bl	800084a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000014c 	.word	0x2000014c
 8000c5c:	40013800 	.word	0x40013800

08000c60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b09c      	sub	sp, #112	; 0x70
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	2250      	movs	r2, #80	; 0x50
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f004 fcc1 	bl	8005608 <memset>
  if(uartHandle->Instance==LPUART1)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a44      	ldr	r2, [pc, #272]	; (8000d9c <HAL_UART_MspInit+0x13c>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d156      	bne.n	8000d3e <HAL_UART_MspInit+0xde>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c90:	2302      	movs	r3, #2
 8000c92:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f002 fda5 	bl	80037ec <HAL_RCCEx_PeriphCLKConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ca8:	f7ff fdcf 	bl	800084a <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cac:	2001      	movs	r0, #1
 8000cae:	f7ff ff0a 	bl	8000ac6 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	2004      	movs	r0, #4
 8000cb4:	f7ff feee 	bl	8000a94 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000cc8:	2308      	movs	r3, #8
 8000cca:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ccc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4833      	ldr	r0, [pc, #204]	; (8000da0 <HAL_UART_MspInit+0x140>)
 8000cd4:	f000 ffaa 	bl	8001c2c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8000cd8:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000cda:	4a33      	ldr	r2, [pc, #204]	; (8000da8 <HAL_UART_MspInit+0x148>)
 8000cdc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000cde:	4b31      	ldr	r3, [pc, #196]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000ce0:	2210      	movs	r2, #16
 8000ce2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ce4:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cea:	4b2e      	ldr	r3, [pc, #184]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cf0:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000cf2:	2280      	movs	r2, #128	; 0x80
 8000cf4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cf6:	4b2b      	ldr	r3, [pc, #172]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cfc:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000d02:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000d04:	2220      	movs	r2, #32
 8000d06:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d08:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000d0e:	4825      	ldr	r0, [pc, #148]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000d10:	f000 fc5a 	bl	80015c8 <HAL_DMA_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000d1a:	f7ff fd96 	bl	800084a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a20      	ldr	r2, [pc, #128]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000d22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000d26:	4a1f      	ldr	r2, [pc, #124]	; (8000da4 <HAL_UART_MspInit+0x144>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	2025      	movs	r0, #37	; 0x25
 8000d32:	f000 fc06 	bl	8001542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000d36:	2025      	movs	r0, #37	; 0x25
 8000d38:	f000 fc1d 	bl	8001576 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d3c:	e029      	b.n	8000d92 <HAL_UART_MspInit+0x132>
  else if(uartHandle->Instance==USART1)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a1a      	ldr	r2, [pc, #104]	; (8000dac <HAL_UART_MspInit+0x14c>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d124      	bne.n	8000d92 <HAL_UART_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4618      	mov	r0, r3
 8000d56:	f002 fd49 	bl	80037ec <HAL_RCCEx_PeriphCLKConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <HAL_UART_MspInit+0x104>
      Error_Handler();
 8000d60:	f7ff fd73 	bl	800084a <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d64:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d68:	f7ff fec6 	bl	8000af8 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6c:	2002      	movs	r0, #2
 8000d6e:	f7ff fe91 	bl	8000a94 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d72:	23c0      	movs	r3, #192	; 0xc0
 8000d74:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d82:	2307      	movs	r3, #7
 8000d84:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d86:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4808      	ldr	r0, [pc, #32]	; (8000db0 <HAL_UART_MspInit+0x150>)
 8000d8e:	f000 ff4d 	bl	8001c2c <HAL_GPIO_Init>
}
 8000d92:	bf00      	nop
 8000d94:	3770      	adds	r7, #112	; 0x70
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40008000 	.word	0x40008000
 8000da0:	48000800 	.word	0x48000800
 8000da4:	200001e0 	.word	0x200001e0
 8000da8:	4002001c 	.word	0x4002001c
 8000dac:	40013800 	.word	0x40013800
 8000db0:	48000400 	.word	0x48000400

08000db4 <LL_AHB2_GRP1_EnableClock>:
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
}
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <LL_APB1_GRP1_EnableClock>:
{
 8000de6:	b480      	push	{r7}
 8000de8:	b085      	sub	sp, #20
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000df2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000df4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4013      	ands	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000e1c:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <MX_USB_PCD_Init+0x48>)
 8000e1e:	4a11      	ldr	r2, [pc, #68]	; (8000e64 <MX_USB_PCD_Init+0x4c>)
 8000e20:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_USB_PCD_Init+0x48>)
 8000e24:	2208      	movs	r2, #8
 8000e26:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <MX_USB_PCD_Init+0x48>)
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_USB_PCD_Init+0x48>)
 8000e30:	2202      	movs	r2, #2
 8000e32:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <MX_USB_PCD_Init+0x48>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_USB_PCD_Init+0x48>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000e40:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <MX_USB_PCD_Init+0x48>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_USB_PCD_Init+0x48>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_USB_PCD_Init+0x48>)
 8000e4e:	f001 f875 	bl	8001f3c <HAL_PCD_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000e58:	f7ff fcf7 	bl	800084a <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000240 	.word	0x20000240
 8000e64:	40006800 	.word	0x40006800

08000e68 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b09c      	sub	sp, #112	; 0x70
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	2250      	movs	r2, #80	; 0x50
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f004 fbbd 	bl	8005608 <memset>
  if(pcdHandle->Instance==USB)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a1f      	ldr	r2, [pc, #124]	; (8000f10 <HAL_PCD_MspInit+0xa8>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d136      	bne.n	8000f06 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e9c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000e9e:	2318      	movs	r3, #24
 8000ea0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000ea2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ea6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000ea8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000eac:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000eae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000eb2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000eb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eb8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000eba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ebe:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f002 fc91 	bl	80037ec <HAL_RCCEx_PeriphCLKConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000ed0:	f7ff fcbb 	bl	800084a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f7ff ff6d 	bl	8000db4 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000eda:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ede:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000eec:	230a      	movs	r3, #10
 8000eee:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efa:	f000 fe97 	bl	8001c2c <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000efe:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000f02:	f7ff ff70 	bl	8000de6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000f06:	bf00      	nop
 8000f08:	3770      	adds	r7, #112	; 0x70
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40006800 	.word	0x40006800

08000f14 <PrintInfo>:
  * @param  String String to be sent to user display
  * @param  Size   Size of string
  * @retval None
  */
void PrintInfo(UART_HandleTypeDef *huart, uint8_t *String, uint16_t Size)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	80fb      	strh	r3, [r7, #6]
  if (HAL_OK != HAL_UART_Transmit(huart, String, Size,1000))
 8000f22:	88fa      	ldrh	r2, [r7, #6]
 8000f24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f002 ff5b 	bl	8003de6 <HAL_UART_Transmit>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d002      	beq.n	8000f3c <PrintInfo+0x28>
  {
    Error_Handler();
 8000f36:	f7ff fc88 	bl	800084a <Error_Handler>
  } else { printf("Command AT sent : %s\n",String); }
}
 8000f3a:	e003      	b.n	8000f44 <PrintInfo+0x30>
  } else { printf("Command AT sent : %s\n",String); }
 8000f3c:	68b9      	ldr	r1, [r7, #8]
 8000f3e:	4803      	ldr	r0, [pc, #12]	; (8000f4c <PrintInfo+0x38>)
 8000f40:	f004 fb6a 	bl	8005618 <iprintf>
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	0800664c 	.word	0x0800664c

08000f50 <StartReception>:
/**
  * @brief  This function prints user info on PC com port and initiates RX transfer
  * @retval None
  */
void StartReception(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* Initializes Buffer swap mechanism (used in User callback) :
     - 2 physical buffers aRXBufferA and aRXBufferB (RX_BUFFER_SIZE length)
  */
  pBufferReadyForReception = aRXBufferA;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <StartReception+0x74>)
 8000f56:	4a1c      	ldr	r2, [pc, #112]	; (8000fc8 <StartReception+0x78>)
 8000f58:	601a      	str	r2, [r3, #0]
  pBufferReadyForUser      = aRXBufferB;
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <StartReception+0x7c>)
 8000f5c:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <StartReception+0x80>)
 8000f5e:	601a      	str	r2, [r3, #0]
  uwNbReceivedChars        = 0;
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <StartReception+0x84>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]

  /* Print user info on PC com port */
  //printf("Command AT : %s\n",apConnectAlready);
  PrintInfo(&hlpuart1, apConnectAlready, COUNTOF(apConnectAlready));
 8000f66:	220e      	movs	r2, #14
 8000f68:	491b      	ldr	r1, [pc, #108]	; (8000fd8 <StartReception+0x88>)
 8000f6a:	481c      	ldr	r0, [pc, #112]	; (8000fdc <StartReception+0x8c>)
 8000f6c:	f7ff ffd2 	bl	8000f14 <PrintInfo>
     following events :
     - DMA RX Half Transfer event (HT)
     - DMA RX Transfer Complete event (TC)
     - IDLE event on UART Rx line (indicating a pause is UART reception flow)
  */
  if (HAL_OK != HAL_UARTEx_ReceiveToIdle_DMA(&hlpuart1, aRXBufferUser, RX_BUFFER_SIZE))
 8000f70:	2264      	movs	r2, #100	; 0x64
 8000f72:	491b      	ldr	r1, [pc, #108]	; (8000fe0 <StartReception+0x90>)
 8000f74:	4819      	ldr	r0, [pc, #100]	; (8000fdc <StartReception+0x8c>)
 8000f76:	f004 fa3f 	bl	80053f8 <HAL_UARTEx_ReceiveToIdle_DMA>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d005      	beq.n	8000f8c <StartReception+0x3c>
  {
    Error_Handler();
 8000f80:	f7ff fc63 	bl	800084a <Error_Handler>
    printf("StartReception Failed\n");
 8000f84:	4817      	ldr	r0, [pc, #92]	; (8000fe4 <StartReception+0x94>)
 8000f86:	f004 fbcd 	bl	8005724 <puts>
 8000f8a:	e002      	b.n	8000f92 <StartReception+0x42>
  } else {
	  printf("StartReception OK\n");
 8000f8c:	4816      	ldr	r0, [pc, #88]	; (8000fe8 <StartReception+0x98>)
 8000f8e:	f004 fbc9 	bl	8005724 <puts>

  }
  HAL_Delay(1000);
 8000f92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f96:	f000 f9b1 	bl	80012fc <HAL_Delay>
  HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8000f9a:	2025      	movs	r0, #37	; 0x25
 8000f9c:	f000 faf9 	bl	8001592 <HAL_NVIC_DisableIRQ>
  PrintInfo(&hlpuart1, cwMode, COUNTOF(cwMode));
 8000fa0:	2210      	movs	r2, #16
 8000fa2:	4912      	ldr	r1, [pc, #72]	; (8000fec <StartReception+0x9c>)
 8000fa4:	480d      	ldr	r0, [pc, #52]	; (8000fdc <StartReception+0x8c>)
 8000fa6:	f7ff ffb5 	bl	8000f14 <PrintInfo>
  HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000faa:	2025      	movs	r0, #37	; 0x25
 8000fac:	f000 fae3 	bl	8001576 <HAL_NVIC_EnableIRQ>
  printf("nvic enable\n");
 8000fb0:	480f      	ldr	r0, [pc, #60]	; (8000ff0 <StartReception+0xa0>)
 8000fb2:	f004 fbb7 	bl	8005724 <puts>
      printf("cwmode Failed\n");
    } else {
  	  printf("cwmode OK\n");

    }*/
  HAL_Delay(1000);
 8000fb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fba:	f000 f99f 	bl	80012fc <HAL_Delay>
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000668 	.word	0x20000668
 8000fc8:	20000598 	.word	0x20000598
 8000fcc:	20000664 	.word	0x20000664
 8000fd0:	200005fc 	.word	0x200005fc
 8000fd4:	20000660 	.word	0x20000660
 8000fd8:	2000000c 	.word	0x2000000c
 8000fdc:	200000b8 	.word	0x200000b8
 8000fe0:	20000534 	.word	0x20000534
 8000fe4:	08006664 	.word	0x08006664
 8000fe8:	0800667c 	.word	0x0800667c
 8000fec:	2000001c 	.word	0x2000001c
 8000ff0:	08006690 	.word	0x08006690

08000ff4 <UserDataTreatment>:
  * @param  huart UART handle.
  * @param  pData Pointer on received data buffer to be processed
  * @retval Size  Nb of received characters available in buffer
  */
void UserDataTreatment(UART_HandleTypeDef *huart, uint8_t* pData, uint16_t Size)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	4613      	mov	r3, r2
 8001000:	80fb      	strh	r3, [r7, #6]
   *
   * pData and Size defines the buffer where received data have been copied, in order to be processed.
   * During this processing of already received data, reception is still ongoing.
   *
   */
  uint8_t* pBuff = pData;
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	617b      	str	r3, [r7, #20]
  uint8_t  i;

  printf("Callback : %s\n",pData);
 8001006:	68b9      	ldr	r1, [r7, #8]
 8001008:	4811      	ldr	r0, [pc, #68]	; (8001050 <UserDataTreatment+0x5c>)
 800100a:	f004 fb05 	bl	8005618 <iprintf>

  /* Implementation of loopback is on purpose implemented in direct register access,
     in order to be able to echo received characters as fast as they are received.
     Wait for TC flag to be raised at end of transmit is then removed, only TXE is checked */

  for (i = 0; i < Size; i++)
 800100e:	2300      	movs	r3, #0
 8001010:	74fb      	strb	r3, [r7, #19]
 8001012:	e012      	b.n	800103a <UserDataTreatment+0x46>
  {
    while (!(__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE))) {}
 8001014:	bf00      	nop
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	69db      	ldr	r3, [r3, #28]
 800101c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001020:	2b80      	cmp	r3, #128	; 0x80
 8001022:	d1f8      	bne.n	8001016 <UserDataTreatment+0x22>
    huart->Instance->TDR = *pBuff;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	781a      	ldrb	r2, [r3, #0]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	629a      	str	r2, [r3, #40]	; 0x28
    pBuff++;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3301      	adds	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
  for (i = 0; i < Size; i++)
 8001034:	7cfb      	ldrb	r3, [r7, #19]
 8001036:	3301      	adds	r3, #1
 8001038:	74fb      	strb	r3, [r7, #19]
 800103a:	7cfb      	ldrb	r3, [r7, #19]
 800103c:	b29b      	uxth	r3, r3
 800103e:	88fa      	ldrh	r2, [r7, #6]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8e7      	bhi.n	8001014 <UserDataTreatment+0x20>
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	0800669c 	.word	0x0800669c

08001054 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	807b      	strh	r3, [r7, #2]
  static uint8_t old_pos = 0;
  uint8_t *ptemp;
  uint8_t i;

  /* Check if number of received data in recpetion buffer has changed */
  if (Size != old_pos)
 8001060:	4b41      	ldr	r3, [pc, #260]	; (8001168 <HAL_UARTEx_RxEventCallback+0x114>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b29b      	uxth	r3, r3
 8001066:	887a      	ldrh	r2, [r7, #2]
 8001068:	429a      	cmp	r2, r3
 800106a:	d074      	beq.n	8001156 <HAL_UARTEx_RxEventCallback+0x102>
  {
    /* Check if position of index in reception buffer has simply be increased
       of if end of buffer has been reached */
    if (Size > old_pos)
 800106c:	4b3e      	ldr	r3, [pc, #248]	; (8001168 <HAL_UARTEx_RxEventCallback+0x114>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b29b      	uxth	r3, r3
 8001072:	887a      	ldrh	r2, [r7, #2]
 8001074:	429a      	cmp	r2, r3
 8001076:	d91e      	bls.n	80010b6 <HAL_UARTEx_RxEventCallback+0x62>
    {
      /* Current position is higher than previous one */
      uwNbReceivedChars = Size - old_pos;
 8001078:	887b      	ldrh	r3, [r7, #2]
 800107a:	4a3b      	ldr	r2, [pc, #236]	; (8001168 <HAL_UARTEx_RxEventCallback+0x114>)
 800107c:	7812      	ldrb	r2, [r2, #0]
 800107e:	1a9b      	subs	r3, r3, r2
 8001080:	461a      	mov	r2, r3
 8001082:	4b3a      	ldr	r3, [pc, #232]	; (800116c <HAL_UARTEx_RxEventCallback+0x118>)
 8001084:	601a      	str	r2, [r3, #0]
      /* Copy received data in "User" buffer for evacuation */
      for (i = 0; i < uwNbReceivedChars; i++)
 8001086:	2300      	movs	r3, #0
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	e00e      	b.n	80010aa <HAL_UARTEx_RxEventCallback+0x56>
      {
        pBufferReadyForUser[i] = aRXBufferUser[old_pos + i];
 800108c:	4b36      	ldr	r3, [pc, #216]	; (8001168 <HAL_UARTEx_RxEventCallback+0x114>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	441a      	add	r2, r3
 8001096:	4b36      	ldr	r3, [pc, #216]	; (8001170 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001098:	6819      	ldr	r1, [r3, #0]
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	440b      	add	r3, r1
 800109e:	4935      	ldr	r1, [pc, #212]	; (8001174 <HAL_UARTEx_RxEventCallback+0x120>)
 80010a0:	5c8a      	ldrb	r2, [r1, r2]
 80010a2:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < uwNbReceivedChars; i++)
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	3301      	adds	r3, #1
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	4b2f      	ldr	r3, [pc, #188]	; (800116c <HAL_UARTEx_RxEventCallback+0x118>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d3eb      	bcc.n	800108c <HAL_UARTEx_RxEventCallback+0x38>
 80010b4:	e03c      	b.n	8001130 <HAL_UARTEx_RxEventCallback+0xdc>
    }
    else
    {
      /* Current position is lower than previous one : end of buffer has been reached */
      /* First copy data from current position till end of buffer */
      uwNbReceivedChars = RX_BUFFER_SIZE - old_pos;
 80010b6:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <HAL_UARTEx_RxEventCallback+0x114>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80010be:	461a      	mov	r2, r3
 80010c0:	4b2a      	ldr	r3, [pc, #168]	; (800116c <HAL_UARTEx_RxEventCallback+0x118>)
 80010c2:	601a      	str	r2, [r3, #0]
      /* Copy received data in "User" buffer for evacuation */
      for (i = 0; i < uwNbReceivedChars; i++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	e00e      	b.n	80010e8 <HAL_UARTEx_RxEventCallback+0x94>
      {
        pBufferReadyForUser[i] = aRXBufferUser[old_pos + i];
 80010ca:	4b27      	ldr	r3, [pc, #156]	; (8001168 <HAL_UARTEx_RxEventCallback+0x114>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	441a      	add	r2, r3
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <HAL_UARTEx_RxEventCallback+0x11c>)
 80010d6:	6819      	ldr	r1, [r3, #0]
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	440b      	add	r3, r1
 80010dc:	4925      	ldr	r1, [pc, #148]	; (8001174 <HAL_UARTEx_RxEventCallback+0x120>)
 80010de:	5c8a      	ldrb	r2, [r1, r2]
 80010e0:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < uwNbReceivedChars; i++)
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	3301      	adds	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	7bfa      	ldrb	r2, [r7, #15]
 80010ea:	4b20      	ldr	r3, [pc, #128]	; (800116c <HAL_UARTEx_RxEventCallback+0x118>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d3eb      	bcc.n	80010ca <HAL_UARTEx_RxEventCallback+0x76>
      }
      /* Check and continue with beginning of buffer */
      if (Size > 0)
 80010f2:	887b      	ldrh	r3, [r7, #2]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d01b      	beq.n	8001130 <HAL_UARTEx_RxEventCallback+0xdc>
      {
        for (i = 0; i < Size; i++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	e00d      	b.n	800111a <HAL_UARTEx_RxEventCallback+0xc6>
        {
          pBufferReadyForUser[uwNbReceivedChars + i] = aRXBufferUser[i];
 80010fe:	7bfa      	ldrb	r2, [r7, #15]
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001102:	6819      	ldr	r1, [r3, #0]
 8001104:	7bf8      	ldrb	r0, [r7, #15]
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_UARTEx_RxEventCallback+0x118>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4403      	add	r3, r0
 800110c:	440b      	add	r3, r1
 800110e:	4919      	ldr	r1, [pc, #100]	; (8001174 <HAL_UARTEx_RxEventCallback+0x120>)
 8001110:	5c8a      	ldrb	r2, [r1, r2]
 8001112:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < Size; i++)
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	3301      	adds	r3, #1
 8001118:	73fb      	strb	r3, [r7, #15]
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	b29b      	uxth	r3, r3
 800111e:	887a      	ldrh	r2, [r7, #2]
 8001120:	429a      	cmp	r2, r3
 8001122:	d8ec      	bhi.n	80010fe <HAL_UARTEx_RxEventCallback+0xaa>
        }
        uwNbReceivedChars += Size;
 8001124:	887a      	ldrh	r2, [r7, #2]
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <HAL_UARTEx_RxEventCallback+0x118>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	4a0f      	ldr	r2, [pc, #60]	; (800116c <HAL_UARTEx_RxEventCallback+0x118>)
 800112e:	6013      	str	r3, [r2, #0]
      }
    }
    /* Process received data that has been extracted from Rx User buffer */
    UserDataTreatment(huart, pBufferReadyForUser, uwNbReceivedChars);
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0d      	ldr	r2, [pc, #52]	; (800116c <HAL_UARTEx_RxEventCallback+0x118>)
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	b292      	uxth	r2, r2
 800113a:	4619      	mov	r1, r3
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff59 	bl	8000ff4 <UserDataTreatment>

    /* Swap buffers for next bytes to be processed */
    ptemp = pBufferReadyForUser;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	60bb      	str	r3, [r7, #8]
    pBufferReadyForUser = pBufferReadyForReception;
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <HAL_UARTEx_RxEventCallback+0x124>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a08      	ldr	r2, [pc, #32]	; (8001170 <HAL_UARTEx_RxEventCallback+0x11c>)
 800114e:	6013      	str	r3, [r2, #0]
    pBufferReadyForReception = ptemp;
 8001150:	4a09      	ldr	r2, [pc, #36]	; (8001178 <HAL_UARTEx_RxEventCallback+0x124>)
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	6013      	str	r3, [r2, #0]
  }
  /* Update old_pos as new reference of position in User Rx buffer that
     indicates position to which data have been processed */
  old_pos = Size;
 8001156:	887b      	ldrh	r3, [r7, #2]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b03      	ldr	r3, [pc, #12]	; (8001168 <HAL_UARTEx_RxEventCallback+0x114>)
 800115c:	701a      	strb	r2, [r3, #0]
}
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000066c 	.word	0x2000066c
 800116c:	20000660 	.word	0x20000660
 8001170:	20000664 	.word	0x20000664
 8001174:	20000534 	.word	0x20000534
 8001178:	20000668 	.word	0x20000668

0800117c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800117c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001180:	3304      	adds	r3, #4

08001182 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001182:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001184:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001186:	d3f9      	bcc.n	800117c <CopyDataInit>
  bx lr
 8001188:	4770      	bx	lr

0800118a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800118a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800118c:	3004      	adds	r0, #4

0800118e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800118e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001190:	d3fb      	bcc.n	800118a <FillZerobss>
  bx lr
 8001192:	4770      	bx	lr

08001194 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001194:	480c      	ldr	r0, [pc, #48]	; (80011c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001196:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001198:	f7ff fc2a 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800119c:	480b      	ldr	r0, [pc, #44]	; (80011cc <LoopForever+0x6>)
 800119e:	490c      	ldr	r1, [pc, #48]	; (80011d0 <LoopForever+0xa>)
 80011a0:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <LoopForever+0xe>)
 80011a2:	2300      	movs	r3, #0
 80011a4:	f7ff ffed 	bl	8001182 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80011a8:	480b      	ldr	r0, [pc, #44]	; (80011d8 <LoopForever+0x12>)
 80011aa:	490c      	ldr	r1, [pc, #48]	; (80011dc <LoopForever+0x16>)
 80011ac:	4a0c      	ldr	r2, [pc, #48]	; (80011e0 <LoopForever+0x1a>)
 80011ae:	2300      	movs	r3, #0
 80011b0:	f7ff ffe7 	bl	8001182 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80011b4:	480b      	ldr	r0, [pc, #44]	; (80011e4 <LoopForever+0x1e>)
 80011b6:	490c      	ldr	r1, [pc, #48]	; (80011e8 <LoopForever+0x22>)
 80011b8:	2300      	movs	r3, #0
 80011ba:	f7ff ffe8 	bl	800118e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011be:	f004 f9ff 	bl	80055c0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80011c2:	f7ff fa95 	bl	80006f0 <main>

080011c6 <LoopForever>:

LoopForever:
  b LoopForever
 80011c6:	e7fe      	b.n	80011c6 <LoopForever>
  ldr   r0, =_estack
 80011c8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000098 	.word	0x20000098
 80011d4:	08006848 	.word	0x08006848
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80011d8:	20030000 	.word	0x20030000
 80011dc:	20030000 	.word	0x20030000
 80011e0:	080068d8 	.word	0x080068d8
  INIT_BSS _sbss, _ebss
 80011e4:	20000098 	.word	0x20000098
 80011e8:	20000684 	.word	0x20000684

080011ec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011ec:	e7fe      	b.n	80011ec <ADC1_IRQHandler>
	...

080011f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_Init+0x3c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a0b      	ldr	r2, [pc, #44]	; (800122c <HAL_Init+0x3c>)
 8001200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001204:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001206:	2003      	movs	r0, #3
 8001208:	f000 f990 	bl	800152c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800120c:	2000      	movs	r0, #0
 800120e:	f000 f80f 	bl	8001230 <HAL_InitTick>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d002      	beq.n	800121e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	71fb      	strb	r3, [r7, #7]
 800121c:	e001      	b.n	8001222 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800121e:	f7ff fb19 	bl	8000854 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001222:	79fb      	ldrb	r3, [r7, #7]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	58004000 	.word	0x58004000

08001230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <HAL_InitTick+0x6c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d024      	beq.n	800128e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001244:	f002 f832 	bl	80032ac <HAL_RCC_GetHCLKFreq>
 8001248:	4602      	mov	r2, r0
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <HAL_InitTick+0x6c>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4619      	mov	r1, r3
 8001250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001254:	fbb3 f3f1 	udiv	r3, r3, r1
 8001258:	fbb2 f3f3 	udiv	r3, r2, r3
 800125c:	4618      	mov	r0, r3
 800125e:	f000 f9a6 	bl	80015ae <HAL_SYSTICK_Config>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d10f      	bne.n	8001288 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b0f      	cmp	r3, #15
 800126c:	d809      	bhi.n	8001282 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126e:	2200      	movs	r2, #0
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	f04f 30ff 	mov.w	r0, #4294967295
 8001276:	f000 f964 	bl	8001542 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800127a:	4a09      	ldr	r2, [pc, #36]	; (80012a0 <HAL_InitTick+0x70>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	e007      	b.n	8001292 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	e004      	b.n	8001292 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	e001      	b.n	8001292 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000030 	.word	0x20000030
 80012a0:	2000002c 	.word	0x2000002c

080012a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_IncTick+0x20>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_IncTick+0x24>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <HAL_IncTick+0x24>)
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000030 	.word	0x20000030
 80012c8:	20000670 	.word	0x20000670

080012cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <HAL_GetTick+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000670 	.word	0x20000670

080012e4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <HAL_GetTickPrio+0x14>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	2000002c 	.word	0x2000002c

080012fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff ffe2 	bl	80012cc <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001314:	d005      	beq.n	8001322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_Delay+0x44>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001322:	bf00      	nop
 8001324:	f7ff ffd2 	bl	80012cc <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8f7      	bhi.n	8001324 <HAL_Delay+0x28>
  {
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000030 	.word	0x20000030

08001344 <__NVIC_SetPriorityGrouping>:
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_GetPriorityGrouping>:
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_EnableIRQ>:
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db0b      	blt.n	80013d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	f003 021f 	and.w	r2, r3, #31
 80013c0:	4907      	ldr	r1, [pc, #28]	; (80013e0 <__NVIC_EnableIRQ+0x38>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	2001      	movs	r0, #1
 80013ca:	fa00 f202 	lsl.w	r2, r0, r2
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e100 	.word	0xe000e100

080013e4 <__NVIC_DisableIRQ>:
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	db12      	blt.n	800141c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	f003 021f 	and.w	r2, r3, #31
 80013fc:	490a      	ldr	r1, [pc, #40]	; (8001428 <__NVIC_DisableIRQ+0x44>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	095b      	lsrs	r3, r3, #5
 8001404:	2001      	movs	r0, #1
 8001406:	fa00 f202 	lsl.w	r2, r0, r2
 800140a:	3320      	adds	r3, #32
 800140c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001410:	f3bf 8f4f 	dsb	sy
}
 8001414:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001416:	f3bf 8f6f 	isb	sy
}
 800141a:	bf00      	nop
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000e100 	.word	0xe000e100

0800142c <__NVIC_SetPriority>:
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	2b00      	cmp	r3, #0
 800143e:	db0a      	blt.n	8001456 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	490c      	ldr	r1, [pc, #48]	; (8001478 <__NVIC_SetPriority+0x4c>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	0112      	lsls	r2, r2, #4
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	440b      	add	r3, r1
 8001450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001454:	e00a      	b.n	800146c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4908      	ldr	r1, [pc, #32]	; (800147c <__NVIC_SetPriority+0x50>)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	3b04      	subs	r3, #4
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	440b      	add	r3, r1
 800146a:	761a      	strb	r2, [r3, #24]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <NVIC_EncodePriority>:
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	; 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f1c3 0307 	rsb	r3, r3, #7
 800149a:	2b04      	cmp	r3, #4
 800149c:	bf28      	it	cs
 800149e:	2304      	movcs	r3, #4
 80014a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3304      	adds	r3, #4
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d902      	bls.n	80014b0 <NVIC_EncodePriority+0x30>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3b03      	subs	r3, #3
 80014ae:	e000      	b.n	80014b2 <NVIC_EncodePriority+0x32>
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	401a      	ands	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43d9      	mvns	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	4313      	orrs	r3, r2
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	; 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <SysTick_Config>:
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f8:	d301      	bcc.n	80014fe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00f      	b.n	800151e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <SysTick_Config+0x40>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001506:	210f      	movs	r1, #15
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f7ff ff8e 	bl	800142c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <SysTick_Config+0x40>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <SysTick_Config+0x40>)
 8001518:	2207      	movs	r2, #7
 800151a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	e000e010 	.word	0xe000e010

0800152c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff05 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001550:	f7ff ff1c 	bl	800138c <__NVIC_GetPriorityGrouping>
 8001554:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	68b9      	ldr	r1, [r7, #8]
 800155a:	6978      	ldr	r0, [r7, #20]
 800155c:	f7ff ff90 	bl	8001480 <NVIC_EncodePriority>
 8001560:	4602      	mov	r2, r0
 8001562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff5f 	bl	800142c <__NVIC_SetPriority>
}
 800156e:	bf00      	nop
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff0f 	bl	80013a8 <__NVIC_EnableIRQ>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff1f 	bl	80013e4 <__NVIC_DisableIRQ>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ff96 	bl	80014e8 <SysTick_Config>
 80015bc:	4603      	mov	r3, r0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e08e      	b.n	80016f8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	4b47      	ldr	r3, [pc, #284]	; (8001700 <HAL_DMA_Init+0x138>)
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d80f      	bhi.n	8001606 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b45      	ldr	r3, [pc, #276]	; (8001704 <HAL_DMA_Init+0x13c>)
 80015ee:	4413      	add	r3, r2
 80015f0:	4a45      	ldr	r2, [pc, #276]	; (8001708 <HAL_DMA_Init+0x140>)
 80015f2:	fba2 2303 	umull	r2, r3, r2, r3
 80015f6:	091b      	lsrs	r3, r3, #4
 80015f8:	009a      	lsls	r2, r3, #2
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a42      	ldr	r2, [pc, #264]	; (800170c <HAL_DMA_Init+0x144>)
 8001602:	641a      	str	r2, [r3, #64]	; 0x40
 8001604:	e00e      	b.n	8001624 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	4b40      	ldr	r3, [pc, #256]	; (8001710 <HAL_DMA_Init+0x148>)
 800160e:	4413      	add	r3, r2
 8001610:	4a3d      	ldr	r2, [pc, #244]	; (8001708 <HAL_DMA_Init+0x140>)
 8001612:	fba2 2303 	umull	r2, r3, r2, r3
 8001616:	091b      	lsrs	r3, r3, #4
 8001618:	009a      	lsls	r2, r3, #2
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a3c      	ldr	r2, [pc, #240]	; (8001714 <HAL_DMA_Init+0x14c>)
 8001622:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2202      	movs	r2, #2
 8001628:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800163a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800163e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001648:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001654:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001660:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	4313      	orrs	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 fa74 	bl	8001b64 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001684:	d102      	bne.n	800168c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001694:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001698:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016a2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d010      	beq.n	80016ce <HAL_DMA_Init+0x106>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d80c      	bhi.n	80016ce <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 fa93 	bl	8001be0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	e008      	b.n	80016e0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40020407 	.word	0x40020407
 8001704:	bffdfff8 	.word	0xbffdfff8
 8001708:	cccccccd 	.word	0xcccccccd
 800170c:	40020000 	.word	0x40020000
 8001710:	bffdfbf8 	.word	0xbffdfbf8
 8001714:	40020400 	.word	0x40020400

08001718 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001730:	2b01      	cmp	r3, #1
 8001732:	d101      	bne.n	8001738 <HAL_DMA_Start_IT+0x20>
 8001734:	2302      	movs	r3, #2
 8001736:	e066      	b.n	8001806 <HAL_DMA_Start_IT+0xee>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b01      	cmp	r3, #1
 800174a:	d155      	bne.n	80017f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2202      	movs	r2, #2
 8001750:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2200      	movs	r2, #0
 8001758:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0201 	bic.w	r2, r2, #1
 8001768:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	68b9      	ldr	r1, [r7, #8]
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 f9b9 	bl	8001ae8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	2b00      	cmp	r3, #0
 800177c:	d008      	beq.n	8001790 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 020e 	orr.w	r2, r2, #14
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e00f      	b.n	80017b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0204 	bic.w	r2, r2, #4
 800179e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 020a 	orr.w	r2, r2, #10
 80017ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d007      	beq.n	80017ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d007      	beq.n	80017e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f042 0201 	orr.w	r2, r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	e005      	b.n	8001804 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001800:	2302      	movs	r3, #2
 8001802:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001804:	7dfb      	ldrb	r3, [r7, #23]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e04f      	b.n	80018c0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d008      	beq.n	800183e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2204      	movs	r2, #4
 8001830:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e040      	b.n	80018c0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 020e 	bic.w	r2, r2, #14
 800184c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001858:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800185c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0201 	bic.w	r2, r2, #1
 800186c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f003 021c 	and.w	r2, r3, #28
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	2101      	movs	r1, #1
 800187c:	fa01 f202 	lsl.w	r2, r1, r2
 8001880:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800188a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00c      	beq.n	80018ae <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80018ac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d005      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2204      	movs	r2, #4
 80018e8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	73fb      	strb	r3, [r7, #15]
 80018ee:	e047      	b.n	8001980 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 020e 	bic.w	r2, r2, #14
 80018fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0201 	bic.w	r2, r2, #1
 800190e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800191a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800191e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001924:	f003 021c 	and.w	r2, r3, #28
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	2101      	movs	r1, #1
 800192e:	fa01 f202 	lsl.w	r2, r1, r2
 8001932:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800193c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00c      	beq.n	8001960 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001950:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001954:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800195e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	4798      	blx	r3
    }
  }
  return status;
 8001980:	7bfb      	ldrb	r3, [r7, #15]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b084      	sub	sp, #16
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	f003 031c 	and.w	r3, r3, #28
 80019aa:	2204      	movs	r2, #4
 80019ac:	409a      	lsls	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d026      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x7a>
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d021      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0320 	and.w	r3, r3, #32
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d107      	bne.n	80019de <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0204 	bic.w	r2, r2, #4
 80019dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f003 021c 	and.w	r2, r3, #28
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	2104      	movs	r1, #4
 80019ec:	fa01 f202 	lsl.w	r2, r1, r2
 80019f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d071      	beq.n	8001ade <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a02:	e06c      	b.n	8001ade <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a08:	f003 031c 	and.w	r3, r3, #28
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d02e      	beq.n	8001a76 <HAL_DMA_IRQHandler+0xec>
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d029      	beq.n	8001a76 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0320 	and.w	r3, r3, #32
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10b      	bne.n	8001a48 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 020a 	bic.w	r2, r2, #10
 8001a3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4c:	f003 021c 	and.w	r2, r3, #28
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	2102      	movs	r1, #2
 8001a56:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d038      	beq.n	8001ade <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001a74:	e033      	b.n	8001ade <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	f003 031c 	and.w	r3, r3, #28
 8001a7e:	2208      	movs	r2, #8
 8001a80:	409a      	lsls	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d02a      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x156>
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d025      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 020e 	bic.w	r2, r2, #14
 8001aa2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa8:	f003 021c 	and.w	r2, r3, #28
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d004      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ade:	bf00      	nop
 8001ae0:	bf00      	nop
}
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001afe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d004      	beq.n	8001b12 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b10:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	f003 021c 	and.w	r2, r3, #28
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	2101      	movs	r1, #1
 8001b20:	fa01 f202 	lsl.w	r2, r1, r2
 8001b24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b10      	cmp	r3, #16
 8001b34:	d108      	bne.n	8001b48 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b46:	e007      	b.n	8001b58 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	60da      	str	r2, [r3, #12]
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d80a      	bhi.n	8001b8e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7c:	089b      	lsrs	r3, r3, #2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b84:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6493      	str	r3, [r2, #72]	; 0x48
 8001b8c:	e007      	b.n	8001b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	009a      	lsls	r2, r3, #2
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001b98:	4413      	add	r3, r2
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	3b08      	subs	r3, #8
 8001ba6:	4a0c      	ldr	r2, [pc, #48]	; (8001bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bac:	091b      	lsrs	r3, r3, #4
 8001bae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001bb4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f003 031f 	and.w	r3, r3, #31
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	40020407 	.word	0x40020407
 8001bd4:	4002081c 	.word	0x4002081c
 8001bd8:	cccccccd 	.word	0xcccccccd
 8001bdc:	40020880 	.word	0x40020880

08001be0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001bf6:	4413      	add	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8001c04:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	2201      	movs	r2, #1
 8001c10:	409a      	lsls	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c16:	bf00      	nop
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	1000823f 	.word	0x1000823f
 8001c28:	40020940 	.word	0x40020940

08001c2c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c3a:	e14c      	b.n	8001ed6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	2101      	movs	r1, #1
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	fa01 f303 	lsl.w	r3, r1, r3
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 813e 	beq.w	8001ed0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d005      	beq.n	8001c6c <HAL_GPIO_Init+0x40>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d130      	bne.n	8001cce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	2203      	movs	r2, #3
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	091b      	lsrs	r3, r3, #4
 8001cb8:	f003 0201 	and.w	r2, r3, #1
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	d017      	beq.n	8001d0a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d123      	bne.n	8001d5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	08da      	lsrs	r2, r3, #3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3208      	adds	r2, #8
 8001d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	691a      	ldr	r2, [r3, #16]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	08da      	lsrs	r2, r3, #3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3208      	adds	r2, #8
 8001d58:	6939      	ldr	r1, [r7, #16]
 8001d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	2203      	movs	r2, #3
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 0203 	and.w	r2, r3, #3
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 8098 	beq.w	8001ed0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001da0:	4a54      	ldr	r2, [pc, #336]	; (8001ef4 <HAL_GPIO_Init+0x2c8>)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	089b      	lsrs	r3, r3, #2
 8001da6:	3302      	adds	r3, #2
 8001da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f003 0303 	and.w	r3, r3, #3
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	220f      	movs	r2, #15
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dca:	d019      	beq.n	8001e00 <HAL_GPIO_Init+0x1d4>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a4a      	ldr	r2, [pc, #296]	; (8001ef8 <HAL_GPIO_Init+0x2cc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d013      	beq.n	8001dfc <HAL_GPIO_Init+0x1d0>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a49      	ldr	r2, [pc, #292]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d00d      	beq.n	8001df8 <HAL_GPIO_Init+0x1cc>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a48      	ldr	r2, [pc, #288]	; (8001f00 <HAL_GPIO_Init+0x2d4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d007      	beq.n	8001df4 <HAL_GPIO_Init+0x1c8>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a47      	ldr	r2, [pc, #284]	; (8001f04 <HAL_GPIO_Init+0x2d8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d101      	bne.n	8001df0 <HAL_GPIO_Init+0x1c4>
 8001dec:	2304      	movs	r3, #4
 8001dee:	e008      	b.n	8001e02 <HAL_GPIO_Init+0x1d6>
 8001df0:	2307      	movs	r3, #7
 8001df2:	e006      	b.n	8001e02 <HAL_GPIO_Init+0x1d6>
 8001df4:	2303      	movs	r3, #3
 8001df6:	e004      	b.n	8001e02 <HAL_GPIO_Init+0x1d6>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e002      	b.n	8001e02 <HAL_GPIO_Init+0x1d6>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <HAL_GPIO_Init+0x1d6>
 8001e00:	2300      	movs	r3, #0
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	f002 0203 	and.w	r2, r2, #3
 8001e08:	0092      	lsls	r2, r2, #2
 8001e0a:	4093      	lsls	r3, r2
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e12:	4938      	ldr	r1, [pc, #224]	; (8001ef4 <HAL_GPIO_Init+0x2c8>)
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	089b      	lsrs	r3, r3, #2
 8001e18:	3302      	adds	r3, #2
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e20:	4b39      	ldr	r3, [pc, #228]	; (8001f08 <HAL_GPIO_Init+0x2dc>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e44:	4a30      	ldr	r2, [pc, #192]	; (8001f08 <HAL_GPIO_Init+0x2dc>)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e4a:	4b2f      	ldr	r3, [pc, #188]	; (8001f08 <HAL_GPIO_Init+0x2dc>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e6e:	4a26      	ldr	r2, [pc, #152]	; (8001f08 <HAL_GPIO_Init+0x2dc>)
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e74:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <HAL_GPIO_Init+0x2dc>)
 8001e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e9a:	4a1b      	ldr	r2, [pc, #108]	; (8001f08 <HAL_GPIO_Init+0x2dc>)
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001ea2:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <HAL_GPIO_Init+0x2dc>)
 8001ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ec8:	4a0f      	ldr	r2, [pc, #60]	; (8001f08 <HAL_GPIO_Init+0x2dc>)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f47f aeab 	bne.w	8001c3c <HAL_GPIO_Init+0x10>
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	bf00      	nop
 8001eea:	371c      	adds	r7, #28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	40010000 	.word	0x40010000
 8001ef8:	48000400 	.word	0x48000400
 8001efc:	48000800 	.word	0x48000800
 8001f00:	48000c00 	.word	0x48000c00
 8001f04:	48001000 	.word	0x48001000
 8001f08:	58000800 	.word	0x58000800

08001f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	807b      	strh	r3, [r7, #2]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f1c:	787b      	ldrb	r3, [r7, #1]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f22:	887a      	ldrh	r2, [r7, #2]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f28:	e002      	b.n	8001f30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f2a:	887a      	ldrh	r2, [r7, #2]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f3e:	b08b      	sub	sp, #44	; 0x2c
 8001f40:	af06      	add	r7, sp, #24
 8001f42:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e0cb      	b.n	80020e6 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7fe ff80 	bl	8000e68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f003 fae1 	bl	800553c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	73fb      	strb	r3, [r7, #15]
 8001f7e:	e040      	b.n	8002002 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	1c5a      	adds	r2, r3, #1
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	440b      	add	r3, r1
 8001f90:	3301      	adds	r3, #1
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	440b      	add	r3, r1
 8001fa6:	7bfa      	ldrb	r2, [r7, #15]
 8001fa8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	440b      	add	r3, r1
 8001fba:	3303      	adds	r3, #3
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	440b      	add	r3, r1
 8001fce:	3338      	adds	r3, #56	; 0x38
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	440b      	add	r3, r1
 8001fe2:	333c      	adds	r3, #60	; 0x3c
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3340      	adds	r3, #64	; 0x40
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	3301      	adds	r3, #1
 8002000:	73fb      	strb	r3, [r7, #15]
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	429a      	cmp	r2, r3
 800200a:	d3b9      	bcc.n	8001f80 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800200c:	2300      	movs	r3, #0
 800200e:	73fb      	strb	r3, [r7, #15]
 8002010:	e044      	b.n	800209c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	440b      	add	r3, r1
 8002020:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	440b      	add	r3, r1
 8002036:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800203e:	7bfa      	ldrb	r2, [r7, #15]
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	440b      	add	r3, r1
 800204c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	440b      	add	r3, r1
 8002062:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800206a:	7bfa      	ldrb	r2, [r7, #15]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	440b      	add	r3, r1
 8002078:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	440b      	add	r3, r1
 800208e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002096:	7bfb      	ldrb	r3, [r7, #15]
 8002098:	3301      	adds	r3, #1
 800209a:	73fb      	strb	r3, [r7, #15]
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d3b5      	bcc.n	8002012 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	687e      	ldr	r6, [r7, #4]
 80020ae:	466d      	mov	r5, sp
 80020b0:	f106 0410 	add.w	r4, r6, #16
 80020b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b8:	6823      	ldr	r3, [r4, #0]
 80020ba:	602b      	str	r3, [r5, #0]
 80020bc:	1d33      	adds	r3, r6, #4
 80020be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c0:	6838      	ldr	r0, [r7, #0]
 80020c2:	f003 fa56 	bl	8005572 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d102      	bne.n	80020e4 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f805 	bl	80020ee <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020ee <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b085      	sub	sp, #20
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002112:	b29b      	uxth	r3, r3
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002126:	b29b      	uxth	r3, r3
 8002128:	f043 0302 	orr.w	r3, r3, #2
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a04      	ldr	r2, [pc, #16]	; (8002160 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800214e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002152:	6013      	str	r3, [r2, #0]
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	58000400 	.word	0x58000400

08002164 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002168:	4b04      	ldr	r3, [pc, #16]	; (800217c <HAL_PWREx_GetVoltageRange+0x18>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	58000400 	.word	0x58000400

08002180 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800218e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002192:	d101      	bne.n	8002198 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <LL_RCC_HSE_Enable>:
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80021a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b6:	6013      	str	r3, [r2, #0]
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <LL_RCC_HSE_Disable>:
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80021c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <LL_RCC_HSE_IsReady>:
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80021e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021f2:	d101      	bne.n	80021f8 <LL_RCC_HSE_IsReady+0x18>
 80021f4:	2301      	movs	r3, #1
 80021f6:	e000      	b.n	80021fa <LL_RCC_HSE_IsReady+0x1a>
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <LL_RCC_HSI_Enable>:
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002216:	6013      	str	r3, [r2, #0]
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <LL_RCC_HSI_Disable>:
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002234:	6013      	str	r3, [r2, #0]
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <LL_RCC_HSI_IsReady>:
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002252:	d101      	bne.n	8002258 <LL_RCC_HSI_IsReady+0x18>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <LL_RCC_HSI_IsReady+0x1a>
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800226c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	061b      	lsls	r3, r3, #24
 800227a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800227e:	4313      	orrs	r3, r2
 8002280:	604b      	str	r3, [r1, #4]
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <LL_RCC_HSI48_Enable>:
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002296:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800229a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <LL_RCC_HSI48_Disable>:
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80022b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022c0:	f023 0301 	bic.w	r3, r3, #1
 80022c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <LL_RCC_HSI48_IsReady>:
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80022d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d101      	bne.n	80022ea <LL_RCC_HSI48_IsReady+0x18>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <LL_RCC_HSI48_IsReady+0x1a>
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <LL_RCC_LSE_Enable>:
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80022fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002302:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_RCC_LSE_Disable>:
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800231c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002324:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <LL_RCC_LSE_EnableBypass>:
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800233e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002346:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <LL_RCC_LSE_DisableBypass>:
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002368:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800236c:	f023 0304 	bic.w	r3, r3, #4
 8002370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b02      	cmp	r3, #2
 8002390:	d101      	bne.n	8002396 <LL_RCC_LSE_IsReady+0x18>
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <LL_RCC_LSE_IsReady+0x1a>
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80023a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80023ba:	bf00      	nop
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80023c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80023ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d101      	bne.n	80023fe <LL_RCC_LSI1_IsReady+0x18>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <LL_RCC_LSI1_IsReady+0x1a>
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800240e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002416:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800241a:	f043 0304 	orr.w	r3, r3, #4
 800241e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002422:	bf00      	nop
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002438:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800243c:	f023 0304 	bic.w	r3, r3, #4
 8002440:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b08      	cmp	r3, #8
 8002460:	d101      	bne.n	8002466 <LL_RCC_LSI2_IsReady+0x18>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <LL_RCC_LSI2_IsReady+0x1a>
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800247a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002482:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80024a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	6013      	str	r3, [r2, #0]
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80024c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	6013      	str	r3, [r2, #0]
}
 80024d2:	bf00      	nop
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80024e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d101      	bne.n	80024f2 <LL_RCC_MSI_IsReady+0x16>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <LL_RCC_MSI_IsReady+0x18>
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002510:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800252c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002536:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2bb0      	cmp	r3, #176	; 0xb0
 800253c:	d901      	bls.n	8002542 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800253e:	23b0      	movs	r3, #176	; 0xb0
 8002540:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002542:	687b      	ldr	r3, [r7, #4]
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800256a:	4313      	orrs	r3, r2
 800256c:	604b      	str	r3, [r1, #4]
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f023 0203 	bic.w	r2, r3, #3
 800258c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80025a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 030c 	and.w	r3, r3, #12
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80025c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80025ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800261e:	f023 020f 	bic.w	r2, r3, #15
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800264e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4313      	orrs	r3, r2
 8002656:	608b      	str	r3, [r1, #8]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800266c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002676:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4313      	orrs	r3, r2
 800267e:	608b      	str	r3, [r1, #8]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800269a:	4618      	mov	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80026a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80026c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80026dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80026f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002702:	6013      	str	r3, [r2, #0]
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800271c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002720:	6013      	str	r3, [r2, #0]
}
 8002722:	bf00      	nop
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800273e:	d101      	bne.n	8002744 <LL_RCC_PLL_IsReady+0x18>
 8002740:	2301      	movs	r3, #1
 8002742:	e000      	b.n	8002746 <LL_RCC_PLL_IsReady+0x1a>
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	0a1b      	lsrs	r3, r3, #8
 800275c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800276e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800279e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0303 	and.w	r3, r3, #3
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80027b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c4:	d101      	bne.n	80027ca <LL_RCC_IsActiveFlag_HPRE+0x18>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80027da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027ea:	d101      	bne.n	80027f0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002804:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800280c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002810:	d101      	bne.n	8002816 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002822:	b480      	push	{r7}
 8002824:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002830:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002834:	d101      	bne.n	800283a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002846:	b480      	push	{r7}
 8002848:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800284a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002854:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002858:	d101      	bne.n	800285e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800286c:	b590      	push	{r4, r7, lr}
 800286e:	b08d      	sub	sp, #52	; 0x34
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e363      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 808d 	beq.w	80029a6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800288c:	f7ff fe89 	bl	80025a2 <LL_RCC_GetSysClkSource>
 8002890:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002892:	f7ff ff82 	bl	800279a <LL_RCC_PLL_GetMainSource>
 8002896:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289a:	2b00      	cmp	r3, #0
 800289c:	d005      	beq.n	80028aa <HAL_RCC_OscConfig+0x3e>
 800289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a0:	2b0c      	cmp	r3, #12
 80028a2:	d147      	bne.n	8002934 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80028a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d144      	bne.n	8002934 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e347      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80028ba:	f7ff fe34 	bl	8002526 <LL_RCC_MSI_GetRange>
 80028be:	4603      	mov	r3, r0
 80028c0:	429c      	cmp	r4, r3
 80028c2:	d914      	bls.n	80028ee <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fd2f 	bl	800332c <RCC_SetFlashLatencyFromMSIRange>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e336      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fe0e 	bl	80024fe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff fe32 	bl	8002550 <LL_RCC_MSI_SetCalibTrimming>
 80028ec:	e013      	b.n	8002916 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fe03 	bl	80024fe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fe27 	bl	8002550 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fd10 	bl	800332c <RCC_SetFlashLatencyFromMSIRange>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e317      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002916:	f000 fcc9 	bl	80032ac <HAL_RCC_GetHCLKFreq>
 800291a:	4603      	mov	r3, r0
 800291c:	4aa4      	ldr	r2, [pc, #656]	; (8002bb0 <HAL_RCC_OscConfig+0x344>)
 800291e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002920:	4ba4      	ldr	r3, [pc, #656]	; (8002bb4 <HAL_RCC_OscConfig+0x348>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe fc83 	bl	8001230 <HAL_InitTick>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d039      	beq.n	80029a4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e308      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01e      	beq.n	800297a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800293c:	f7ff fdb0 	bl	80024a0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002940:	f7fe fcc4 	bl	80012cc <HAL_GetTick>
 8002944:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002948:	f7fe fcc0 	bl	80012cc <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e2f5      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800295a:	f7ff fdbf 	bl	80024dc <LL_RCC_MSI_IsReady>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f1      	beq.n	8002948 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fdc8 	bl	80024fe <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fdec 	bl	8002550 <LL_RCC_MSI_SetCalibTrimming>
 8002978:	e015      	b.n	80029a6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800297a:	f7ff fda0 	bl	80024be <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800297e:	f7fe fca5 	bl	80012cc <HAL_GetTick>
 8002982:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002986:	f7fe fca1 	bl	80012cc <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e2d6      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002998:	f7ff fda0 	bl	80024dc <LL_RCC_MSI_IsReady>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f1      	bne.n	8002986 <HAL_RCC_OscConfig+0x11a>
 80029a2:	e000      	b.n	80029a6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80029a4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d047      	beq.n	8002a42 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029b2:	f7ff fdf6 	bl	80025a2 <LL_RCC_GetSysClkSource>
 80029b6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029b8:	f7ff feef 	bl	800279a <LL_RCC_PLL_GetMainSource>
 80029bc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_OscConfig+0x164>
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	2b0c      	cmp	r3, #12
 80029c8:	d108      	bne.n	80029dc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d105      	bne.n	80029dc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d134      	bne.n	8002a42 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e2b4      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e4:	d102      	bne.n	80029ec <HAL_RCC_OscConfig+0x180>
 80029e6:	f7ff fbdd 	bl	80021a4 <LL_RCC_HSE_Enable>
 80029ea:	e001      	b.n	80029f0 <HAL_RCC_OscConfig+0x184>
 80029ec:	f7ff fbe9 	bl	80021c2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d012      	beq.n	8002a1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f8:	f7fe fc68 	bl	80012cc <HAL_GetTick>
 80029fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a00:	f7fe fc64 	bl	80012cc <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b64      	cmp	r3, #100	; 0x64
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e299      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002a12:	f7ff fbe5 	bl	80021e0 <LL_RCC_HSE_IsReady>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f1      	beq.n	8002a00 <HAL_RCC_OscConfig+0x194>
 8002a1c:	e011      	b.n	8002a42 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fc55 	bl	80012cc <HAL_GetTick>
 8002a22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a26:	f7fe fc51 	bl	80012cc <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b64      	cmp	r3, #100	; 0x64
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e286      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002a38:	f7ff fbd2 	bl	80021e0 <LL_RCC_HSE_IsReady>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f1      	bne.n	8002a26 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d04c      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a4e:	f7ff fda8 	bl	80025a2 <LL_RCC_GetSysClkSource>
 8002a52:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a54:	f7ff fea1 	bl	800279a <LL_RCC_PLL_GetMainSource>
 8002a58:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_OscConfig+0x200>
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	2b0c      	cmp	r3, #12
 8002a64:	d10e      	bne.n	8002a84 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d10b      	bne.n	8002a84 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e266      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff fbf1 	bl	8002264 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002a82:	e031      	b.n	8002ae8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d019      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a8c:	f7ff fbba 	bl	8002204 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7fe fc1c 	bl	80012cc <HAL_GetTick>
 8002a94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a98:	f7fe fc18 	bl	80012cc <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e24d      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002aaa:	f7ff fbc9 	bl	8002240 <LL_RCC_HSI_IsReady>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f1      	beq.n	8002a98 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fbd3 	bl	8002264 <LL_RCC_HSI_SetCalibTrimming>
 8002abe:	e013      	b.n	8002ae8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ac0:	f7ff fbaf 	bl	8002222 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7fe fc02 	bl	80012cc <HAL_GetTick>
 8002ac8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002acc:	f7fe fbfe 	bl	80012cc <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e233      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002ade:	f7ff fbaf 	bl	8002240 <LL_RCC_HSI_IsReady>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f1      	bne.n	8002acc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d106      	bne.n	8002b02 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80a3 	beq.w	8002c48 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d076      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d046      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002b16:	f7ff fc66 	bl	80023e6 <LL_RCC_LSI1_IsReady>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d113      	bne.n	8002b48 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002b20:	f7ff fc3f 	bl	80023a2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b24:	f7fe fbd2 	bl	80012cc <HAL_GetTick>
 8002b28:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002b2c:	f7fe fbce 	bl	80012cc <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e203      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002b3e:	f7ff fc52 	bl	80023e6 <LL_RCC_LSI1_IsReady>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f1      	beq.n	8002b2c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002b48:	f7ff fc5f 	bl	800240a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fbbe 	bl	80012cc <HAL_GetTick>
 8002b50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002b54:	f7fe fbba 	bl	80012cc <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e1ef      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002b66:	f7ff fc72 	bl	800244e <LL_RCC_LSI2_IsReady>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0f1      	beq.n	8002b54 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fc7c 	bl	8002472 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002b7a:	f7ff fc23 	bl	80023c4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7e:	f7fe fba5 	bl	80012cc <HAL_GetTick>
 8002b82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002b86:	f7fe fba1 	bl	80012cc <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e1d6      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002b98:	f7ff fc25 	bl	80023e6 <LL_RCC_LSI1_IsReady>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f1      	bne.n	8002b86 <HAL_RCC_OscConfig+0x31a>
 8002ba2:	e051      	b.n	8002c48 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002ba4:	f7ff fbfd 	bl	80023a2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fb90 	bl	80012cc <HAL_GetTick>
 8002bac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002bae:	e00c      	b.n	8002bca <HAL_RCC_OscConfig+0x35e>
 8002bb0:	20000008 	.word	0x20000008
 8002bb4:	2000002c 	.word	0x2000002c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002bb8:	f7fe fb88 	bl	80012cc <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e1bd      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002bca:	f7ff fc0c 	bl	80023e6 <LL_RCC_LSI1_IsReady>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f1      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002bd4:	f7ff fc2a 	bl	800242c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002bda:	f7fe fb77 	bl	80012cc <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e1ac      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002bec:	f7ff fc2f 	bl	800244e <LL_RCC_LSI2_IsReady>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f1      	bne.n	8002bda <HAL_RCC_OscConfig+0x36e>
 8002bf6:	e027      	b.n	8002c48 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002bf8:	f7ff fc18 	bl	800242c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfc:	f7fe fb66 	bl	80012cc <HAL_GetTick>
 8002c00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002c04:	f7fe fb62 	bl	80012cc <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e197      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002c16:	f7ff fc1a 	bl	800244e <LL_RCC_LSI2_IsReady>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f1      	bne.n	8002c04 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002c20:	f7ff fbd0 	bl	80023c4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c24:	f7fe fb52 	bl	80012cc <HAL_GetTick>
 8002c28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002c2c:	f7fe fb4e 	bl	80012cc <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e183      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002c3e:	f7ff fbd2 	bl	80023e6 <LL_RCC_LSI1_IsReady>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f1      	bne.n	8002c2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d05b      	beq.n	8002d0c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c54:	4ba7      	ldr	r3, [pc, #668]	; (8002ef4 <HAL_RCC_OscConfig+0x688>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d114      	bne.n	8002c8a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002c60:	f7ff fa70 	bl	8002144 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c64:	f7fe fb32 	bl	80012cc <HAL_GetTick>
 8002c68:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6c:	f7fe fb2e 	bl	80012cc <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e163      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c7e:	4b9d      	ldr	r3, [pc, #628]	; (8002ef4 <HAL_RCC_OscConfig+0x688>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d102      	bne.n	8002c98 <HAL_RCC_OscConfig+0x42c>
 8002c92:	f7ff fb30 	bl	80022f6 <LL_RCC_LSE_Enable>
 8002c96:	e00c      	b.n	8002cb2 <HAL_RCC_OscConfig+0x446>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b05      	cmp	r3, #5
 8002c9e:	d104      	bne.n	8002caa <HAL_RCC_OscConfig+0x43e>
 8002ca0:	f7ff fb4b 	bl	800233a <LL_RCC_LSE_EnableBypass>
 8002ca4:	f7ff fb27 	bl	80022f6 <LL_RCC_LSE_Enable>
 8002ca8:	e003      	b.n	8002cb2 <HAL_RCC_OscConfig+0x446>
 8002caa:	f7ff fb35 	bl	8002318 <LL_RCC_LSE_Disable>
 8002cae:	f7ff fb55 	bl	800235c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d014      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cba:	f7fe fb07 	bl	80012cc <HAL_GetTick>
 8002cbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002cc0:	e00a      	b.n	8002cd8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc2:	f7fe fb03 	bl	80012cc <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e136      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002cd8:	f7ff fb51 	bl	800237e <LL_RCC_LSE_IsReady>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0ef      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x456>
 8002ce2:	e013      	b.n	8002d0c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce4:	f7fe faf2 	bl	80012cc <HAL_GetTick>
 8002ce8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002cea:	e00a      	b.n	8002d02 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cec:	f7fe faee 	bl	80012cc <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e121      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002d02:	f7ff fb3c 	bl	800237e <LL_RCC_LSE_IsReady>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1ef      	bne.n	8002cec <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d02c      	beq.n	8002d72 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d014      	beq.n	8002d4a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d20:	f7ff fab5 	bl	800228e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d24:	f7fe fad2 	bl	80012cc <HAL_GetTick>
 8002d28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d2c:	f7fe face 	bl	80012cc <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e103      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002d3e:	f7ff fac8 	bl	80022d2 <LL_RCC_HSI48_IsReady>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f1      	beq.n	8002d2c <HAL_RCC_OscConfig+0x4c0>
 8002d48:	e013      	b.n	8002d72 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d4a:	f7ff fab1 	bl	80022b0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fabd 	bl	80012cc <HAL_GetTick>
 8002d52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d56:	f7fe fab9 	bl	80012cc <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e0ee      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002d68:	f7ff fab3 	bl	80022d2 <LL_RCC_HSI48_IsReady>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f1      	bne.n	8002d56 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 80e4 	beq.w	8002f44 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d7c:	f7ff fc11 	bl	80025a2 <LL_RCC_GetSysClkSource>
 8002d80:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	f040 80b4 	bne.w	8002efc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 0203 	and.w	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d123      	bne.n	8002dea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d11c      	bne.n	8002dea <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	0a1b      	lsrs	r3, r3, #8
 8002db4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d114      	bne.n	8002dea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d10d      	bne.n	8002dea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d106      	bne.n	8002dea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d05d      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	2b0c      	cmp	r3, #12
 8002dee:	d058      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e0a1      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e02:	f7ff fc84 	bl	800270e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e06:	f7fe fa61 	bl	80012cc <HAL_GetTick>
 8002e0a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0e:	f7fe fa5d 	bl	80012cc <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e092      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1ef      	bne.n	8002e0e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	4b30      	ldr	r3, [pc, #192]	; (8002ef8 <HAL_RCC_OscConfig+0x68c>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e40:	4311      	orrs	r1, r2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e46:	0212      	lsls	r2, r2, #8
 8002e48:	4311      	orrs	r1, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e4e:	4311      	orrs	r1, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e54:	4311      	orrs	r1, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e64:	f7ff fc44 	bl	80026f0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e78:	f7fe fa28 	bl	80012cc <HAL_GetTick>
 8002e7c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e80:	f7fe fa24 	bl	80012cc <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e059      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0ef      	beq.n	8002e80 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ea0:	e050      	b.n	8002f44 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e04f      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d147      	bne.n	8002f44 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002eb4:	f7ff fc1c 	bl	80026f0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ec8:	f7fe fa00 	bl	80012cc <HAL_GetTick>
 8002ecc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed0:	f7fe f9fc 	bl	80012cc <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e031      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0ef      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x664>
 8002ef0:	e028      	b.n	8002f44 <HAL_RCC_OscConfig+0x6d8>
 8002ef2:	bf00      	nop
 8002ef4:	58000400 	.word	0x58000400
 8002ef8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	2b0c      	cmp	r3, #12
 8002f00:	d01e      	beq.n	8002f40 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f02:	f7ff fc04 	bl	800270e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f06:	f7fe f9e1 	bl	80012cc <HAL_GetTick>
 8002f0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0e:	f7fe f9dd 	bl	80012cc <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e012      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1ef      	bne.n	8002f0e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <HAL_RCC_OscConfig+0x6e4>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	60cb      	str	r3, [r1, #12]
 8002f3e:	e001      	b.n	8002f44 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e000      	b.n	8002f46 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3734      	adds	r7, #52	; 0x34
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd90      	pop	{r4, r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	eefefffc 	.word	0xeefefffc

08002f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e12d      	b.n	80031c4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f68:	4b98      	ldr	r3, [pc, #608]	; (80031cc <HAL_RCC_ClockConfig+0x278>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d91b      	bls.n	8002fae <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b95      	ldr	r3, [pc, #596]	; (80031cc <HAL_RCC_ClockConfig+0x278>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 0207 	bic.w	r2, r3, #7
 8002f7e:	4993      	ldr	r1, [pc, #588]	; (80031cc <HAL_RCC_ClockConfig+0x278>)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f86:	f7fe f9a1 	bl	80012cc <HAL_GetTick>
 8002f8a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f8e:	f7fe f99d 	bl	80012cc <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e111      	b.n	80031c4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa0:	4b8a      	ldr	r3, [pc, #552]	; (80031cc <HAL_RCC_ClockConfig+0x278>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d1ef      	bne.n	8002f8e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d016      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fafb 	bl	80025ba <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002fc4:	f7fe f982 	bl	80012cc <HAL_GetTick>
 8002fc8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002fcc:	f7fe f97e 	bl	80012cc <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e0f2      	b.n	80031c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002fde:	f7ff fbe8 	bl	80027b2 <LL_RCC_IsActiveFlag_HPRE>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f1      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d016      	beq.n	8003022 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff faf2 	bl	80025e2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ffe:	f7fe f965 	bl	80012cc <HAL_GetTick>
 8003002:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003004:	e008      	b.n	8003018 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003006:	f7fe f961 	bl	80012cc <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e0d5      	b.n	80031c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003018:	f7ff fbdd 	bl	80027d6 <LL_RCC_IsActiveFlag_C2HPRE>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f1      	beq.n	8003006 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	d016      	beq.n	800305c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff faeb 	bl	800260e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003038:	f7fe f948 	bl	80012cc <HAL_GetTick>
 800303c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003040:	f7fe f944 	bl	80012cc <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e0b8      	b.n	80031c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003052:	f7ff fbd3 	bl	80027fc <LL_RCC_IsActiveFlag_SHDHPRE>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f1      	beq.n	8003040 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d016      	beq.n	8003096 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff fae5 	bl	800263c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003072:	f7fe f92b 	bl	80012cc <HAL_GetTick>
 8003076:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003078:	e008      	b.n	800308c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800307a:	f7fe f927 	bl	80012cc <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e09b      	b.n	80031c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800308c:	f7ff fbc9 	bl	8002822 <LL_RCC_IsActiveFlag_PPRE1>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f1      	beq.n	800307a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d017      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff fadb 	bl	8002664 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80030ae:	f7fe f90d 	bl	80012cc <HAL_GetTick>
 80030b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80030b6:	f7fe f909 	bl	80012cc <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e07d      	b.n	80031c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80030c8:	f7ff fbbd 	bl	8002846 <LL_RCC_IsActiveFlag_PPRE2>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f1      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d043      	beq.n	8003166 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d106      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80030e6:	f7ff f87b 	bl	80021e0 <LL_RCC_HSE_IsReady>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d11e      	bne.n	800312e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e067      	b.n	80031c4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d106      	bne.n	800310a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80030fc:	f7ff fb16 	bl	800272c <LL_RCC_PLL_IsReady>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d113      	bne.n	800312e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e05c      	b.n	80031c4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003112:	f7ff f9e3 	bl	80024dc <LL_RCC_MSI_IsReady>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d108      	bne.n	800312e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e051      	b.n	80031c4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003120:	f7ff f88e 	bl	8002240 <LL_RCC_HSI_IsReady>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e04a      	b.n	80031c4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff fa21 	bl	800257a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003138:	f7fe f8c8 	bl	80012cc <HAL_GetTick>
 800313c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313e:	e00a      	b.n	8003156 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003140:	f7fe f8c4 	bl	80012cc <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	; 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e036      	b.n	80031c4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003156:	f7ff fa24 	bl	80025a2 <LL_RCC_GetSysClkSource>
 800315a:	4602      	mov	r2, r0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	429a      	cmp	r2, r3
 8003164:	d1ec      	bne.n	8003140 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003166:	4b19      	ldr	r3, [pc, #100]	; (80031cc <HAL_RCC_ClockConfig+0x278>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d21b      	bcs.n	80031ac <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003174:	4b15      	ldr	r3, [pc, #84]	; (80031cc <HAL_RCC_ClockConfig+0x278>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f023 0207 	bic.w	r2, r3, #7
 800317c:	4913      	ldr	r1, [pc, #76]	; (80031cc <HAL_RCC_ClockConfig+0x278>)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	4313      	orrs	r3, r2
 8003182:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003184:	f7fe f8a2 	bl	80012cc <HAL_GetTick>
 8003188:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	e008      	b.n	800319e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800318c:	f7fe f89e 	bl	80012cc <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e012      	b.n	80031c4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800319e:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <HAL_RCC_ClockConfig+0x278>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d1ef      	bne.n	800318c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80031ac:	f000 f87e 	bl	80032ac <HAL_RCC_GetHCLKFreq>
 80031b0:	4603      	mov	r3, r0
 80031b2:	4a07      	ldr	r2, [pc, #28]	; (80031d0 <HAL_RCC_ClockConfig+0x27c>)
 80031b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80031b6:	f7fe f895 	bl	80012e4 <HAL_GetTickPrio>
 80031ba:	4603      	mov	r3, r0
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fe f837 	bl	8001230 <HAL_InitTick>
 80031c2:	4603      	mov	r3, r0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	58004000 	.word	0x58004000
 80031d0:	20000008 	.word	0x20000008

080031d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031da:	f7ff f9e2 	bl	80025a2 <LL_RCC_GetSysClkSource>
 80031de:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10a      	bne.n	80031fc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80031e6:	f7ff f99e 	bl	8002526 <LL_RCC_MSI_GetRange>
 80031ea:	4603      	mov	r3, r0
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	4a2b      	ldr	r2, [pc, #172]	; (80032a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 80031f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	e04b      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d102      	bne.n	8003208 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003202:	4b28      	ldr	r3, [pc, #160]	; (80032a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	e045      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b08      	cmp	r3, #8
 800320c:	d10a      	bne.n	8003224 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800320e:	f7fe ffb7 	bl	8002180 <LL_RCC_HSE_IsEnabledDiv2>
 8003212:	4603      	mov	r3, r0
 8003214:	2b01      	cmp	r3, #1
 8003216:	d102      	bne.n	800321e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003218:	4b22      	ldr	r3, [pc, #136]	; (80032a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	e03a      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800321e:	4b22      	ldr	r3, [pc, #136]	; (80032a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	e037      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003224:	f7ff fab9 	bl	800279a <LL_RCC_PLL_GetMainSource>
 8003228:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d003      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x64>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	2b03      	cmp	r3, #3
 8003234:	d003      	beq.n	800323e <HAL_RCC_GetSysClockFreq+0x6a>
 8003236:	e00d      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003238:	4b1a      	ldr	r3, [pc, #104]	; (80032a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800323a:	60bb      	str	r3, [r7, #8]
        break;
 800323c:	e015      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800323e:	f7fe ff9f 	bl	8002180 <LL_RCC_HSE_IsEnabledDiv2>
 8003242:	4603      	mov	r3, r0
 8003244:	2b01      	cmp	r3, #1
 8003246:	d102      	bne.n	800324e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003248:	4b16      	ldr	r3, [pc, #88]	; (80032a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800324a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800324c:	e00d      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800324e:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003250:	60bb      	str	r3, [r7, #8]
        break;
 8003252:	e00a      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003254:	f7ff f967 	bl	8002526 <LL_RCC_MSI_GetRange>
 8003258:	4603      	mov	r3, r0
 800325a:	091b      	lsrs	r3, r3, #4
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	4a0f      	ldr	r2, [pc, #60]	; (80032a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003266:	60bb      	str	r3, [r7, #8]
        break;
 8003268:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800326a:	f7ff fa71 	bl	8002750 <LL_RCC_PLL_GetN>
 800326e:	4602      	mov	r2, r0
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	fb03 f402 	mul.w	r4, r3, r2
 8003276:	f7ff fa84 	bl	8002782 <LL_RCC_PLL_GetDivider>
 800327a:	4603      	mov	r3, r0
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	3301      	adds	r3, #1
 8003280:	fbb4 f4f3 	udiv	r4, r4, r3
 8003284:	f7ff fa71 	bl	800276a <LL_RCC_PLL_GetR>
 8003288:	4603      	mov	r3, r0
 800328a:	0f5b      	lsrs	r3, r3, #29
 800328c:	3301      	adds	r3, #1
 800328e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003292:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003294:	68fb      	ldr	r3, [r7, #12]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	bd90      	pop	{r4, r7, pc}
 800329e:	bf00      	nop
 80032a0:	08006738 	.word	0x08006738
 80032a4:	00f42400 	.word	0x00f42400
 80032a8:	01e84800 	.word	0x01e84800

080032ac <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032ac:	b598      	push	{r3, r4, r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80032b0:	f7ff ff90 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 80032b4:	4604      	mov	r4, r0
 80032b6:	f7ff f9e9 	bl	800268c <LL_RCC_GetAHBPrescaler>
 80032ba:	4603      	mov	r3, r0
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	4a03      	ldr	r2, [pc, #12]	; (80032d0 <HAL_RCC_GetHCLKFreq+0x24>)
 80032c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd98      	pop	{r3, r4, r7, pc}
 80032d0:	080066d8 	.word	0x080066d8

080032d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d4:	b598      	push	{r3, r4, r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80032d8:	f7ff ffe8 	bl	80032ac <HAL_RCC_GetHCLKFreq>
 80032dc:	4604      	mov	r4, r0
 80032de:	f7ff f9ef 	bl	80026c0 <LL_RCC_GetAPB1Prescaler>
 80032e2:	4603      	mov	r3, r0
 80032e4:	0a1b      	lsrs	r3, r3, #8
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	4a04      	ldr	r2, [pc, #16]	; (80032fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80032ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	bd98      	pop	{r3, r4, r7, pc}
 80032fc:	08006718 	.word	0x08006718

08003300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003300:	b598      	push	{r3, r4, r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003304:	f7ff ffd2 	bl	80032ac <HAL_RCC_GetHCLKFreq>
 8003308:	4604      	mov	r4, r0
 800330a:	f7ff f9e5 	bl	80026d8 <LL_RCC_GetAPB2Prescaler>
 800330e:	4603      	mov	r3, r0
 8003310:	0adb      	lsrs	r3, r3, #11
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	4a04      	ldr	r2, [pc, #16]	; (8003328 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003324:	4618      	mov	r0, r3
 8003326:	bd98      	pop	{r3, r4, r7, pc}
 8003328:	08006718 	.word	0x08006718

0800332c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800332c:	b590      	push	{r4, r7, lr}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2bb0      	cmp	r3, #176	; 0xb0
 8003338:	d903      	bls.n	8003342 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800333a:	4b15      	ldr	r3, [pc, #84]	; (8003390 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	e007      	b.n	8003352 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	4a11      	ldr	r2, [pc, #68]	; (8003390 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800334c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003350:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003352:	f7ff f9a7 	bl	80026a4 <LL_RCC_GetAHB4Prescaler>
 8003356:	4603      	mov	r3, r0
 8003358:	091b      	lsrs	r3, r3, #4
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	4a0d      	ldr	r2, [pc, #52]	; (8003394 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	fbb2 f3f3 	udiv	r3, r2, r3
 800336a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	0c9c      	lsrs	r4, r3, #18
 8003376:	f7fe fef5 	bl	8002164 <HAL_PWREx_GetVoltageRange>
 800337a:	4603      	mov	r3, r0
 800337c:	4619      	mov	r1, r3
 800337e:	4620      	mov	r0, r4
 8003380:	f000 f80c 	bl	800339c <RCC_SetFlashLatency>
 8003384:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	bd90      	pop	{r4, r7, pc}
 800338e:	bf00      	nop
 8003390:	08006738 	.word	0x08006738
 8003394:	080066d8 	.word	0x080066d8
 8003398:	431bde83 	.word	0x431bde83

0800339c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800339c:	b590      	push	{r4, r7, lr}
 800339e:	b093      	sub	sp, #76	; 0x4c
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80033a6:	4b37      	ldr	r3, [pc, #220]	; (8003484 <RCC_SetFlashLatency+0xe8>)
 80033a8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80033ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80033b2:	4a35      	ldr	r2, [pc, #212]	; (8003488 <RCC_SetFlashLatency+0xec>)
 80033b4:	f107 031c 	add.w	r3, r7, #28
 80033b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80033ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80033be:	4b33      	ldr	r3, [pc, #204]	; (800348c <RCC_SetFlashLatency+0xf0>)
 80033c0:	f107 040c 	add.w	r4, r7, #12
 80033c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80033ca:	2300      	movs	r3, #0
 80033cc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d4:	d11a      	bne.n	800340c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80033d6:	2300      	movs	r3, #0
 80033d8:	643b      	str	r3, [r7, #64]	; 0x40
 80033da:	e013      	b.n	8003404 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80033dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	3348      	adds	r3, #72	; 0x48
 80033e2:	443b      	add	r3, r7
 80033e4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d807      	bhi.n	80033fe <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80033ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	3348      	adds	r3, #72	; 0x48
 80033f4:	443b      	add	r3, r7
 80033f6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80033fa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80033fc:	e020      	b.n	8003440 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80033fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003400:	3301      	adds	r3, #1
 8003402:	643b      	str	r3, [r7, #64]	; 0x40
 8003404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003406:	2b03      	cmp	r3, #3
 8003408:	d9e8      	bls.n	80033dc <RCC_SetFlashLatency+0x40>
 800340a:	e019      	b.n	8003440 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800340c:	2300      	movs	r3, #0
 800340e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003410:	e013      	b.n	800343a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	3348      	adds	r3, #72	; 0x48
 8003418:	443b      	add	r3, r7
 800341a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	429a      	cmp	r2, r3
 8003422:	d807      	bhi.n	8003434 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	3348      	adds	r3, #72	; 0x48
 800342a:	443b      	add	r3, r7
 800342c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003430:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003432:	e005      	b.n	8003440 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003436:	3301      	adds	r3, #1
 8003438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800343a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800343c:	2b02      	cmp	r3, #2
 800343e:	d9e8      	bls.n	8003412 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003440:	4b13      	ldr	r3, [pc, #76]	; (8003490 <RCC_SetFlashLatency+0xf4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f023 0207 	bic.w	r2, r3, #7
 8003448:	4911      	ldr	r1, [pc, #68]	; (8003490 <RCC_SetFlashLatency+0xf4>)
 800344a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800344c:	4313      	orrs	r3, r2
 800344e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003450:	f7fd ff3c 	bl	80012cc <HAL_GetTick>
 8003454:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003456:	e008      	b.n	800346a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003458:	f7fd ff38 	bl	80012cc <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e007      	b.n	800347a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800346a:	4b09      	ldr	r3, [pc, #36]	; (8003490 <RCC_SetFlashLatency+0xf4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003474:	429a      	cmp	r2, r3
 8003476:	d1ef      	bne.n	8003458 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	374c      	adds	r7, #76	; 0x4c
 800347e:	46bd      	mov	sp, r7
 8003480:	bd90      	pop	{r4, r7, pc}
 8003482:	bf00      	nop
 8003484:	080066ac 	.word	0x080066ac
 8003488:	080066bc 	.word	0x080066bc
 800348c:	080066c8 	.word	0x080066c8
 8003490:	58004000 	.word	0x58004000

08003494 <LL_RCC_LSE_IsEnabled>:
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <LL_RCC_LSE_IsEnabled+0x18>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <LL_RCC_LSE_IsEnabled+0x1a>
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <LL_RCC_LSE_IsReady>:
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80034bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d101      	bne.n	80034d0 <LL_RCC_LSE_IsReady+0x18>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <LL_RCC_LSE_IsReady+0x1a>
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <LL_RCC_MSI_EnablePLLMode>:
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80034e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034ea:	f043 0304 	orr.w	r3, r3, #4
 80034ee:	6013      	str	r3, [r2, #0]
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <LL_RCC_SetRFWKPClockSource>:
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800350a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800350e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <LL_RCC_SetSMPSClockSource>:
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800352e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	f023 0203 	bic.w	r2, r3, #3
 8003538:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4313      	orrs	r3, r2
 8003540:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <LL_RCC_SetSMPSPrescaler>:
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003560:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4313      	orrs	r3, r2
 8003568:	624b      	str	r3, [r1, #36]	; 0x24
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <LL_RCC_SetUSARTClockSource>:
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800357e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003586:	f023 0203 	bic.w	r2, r3, #3
 800358a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <LL_RCC_SetLPUARTClockSource>:
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80035aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <LL_RCC_SetI2CClockSource>:
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80035d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	091b      	lsrs	r3, r3, #4
 80035e2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80035e6:	43db      	mvns	r3, r3
 80035e8:	401a      	ands	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80035f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <LL_RCC_SetLPTIMClockSource>:
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003614:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	0c1b      	lsrs	r3, r3, #16
 800361c:	041b      	lsls	r3, r3, #16
 800361e:	43db      	mvns	r3, r3
 8003620:	401a      	ands	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	041b      	lsls	r3, r3, #16
 8003626:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <LL_RCC_SetSAIClockSource>:
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003650:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <LL_RCC_SetRNGClockSource>:
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003678:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800367c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <LL_RCC_SetCLK48ClockSource>:
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800369c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <LL_RCC_SetUSBClockSource>:
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff ffe3 	bl	8003694 <LL_RCC_SetCLK48ClockSource>
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <LL_RCC_SetADCClockSource>:
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80036de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <LL_RCC_SetRTCClockSource>:
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800370a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003712:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003716:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <LL_RCC_GetRTCClockSource>:
{
 800372e:	b480      	push	{r7}
 8003730:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800373e:	4618      	mov	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <LL_RCC_ForceBackupDomainReset>:
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800374c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003754:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003760:	bf00      	nop
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <LL_RCC_ReleaseBackupDomainReset>:
{
 800376a:	b480      	push	{r7}
 800376c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800376e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800377a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800377e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003782:	bf00      	nop
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <LL_RCC_PLLSAI1_Enable>:
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800379a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800379e:	6013      	str	r3, [r2, #0]
}
 80037a0:	bf00      	nop
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <LL_RCC_PLLSAI1_Disable>:
{
 80037aa:	b480      	push	{r7}
 80037ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80037ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037bc:	6013      	str	r3, [r2, #0]
}
 80037be:	bf00      	nop
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <LL_RCC_PLLSAI1_IsReady>:
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80037cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037da:	d101      	bne.n	80037e0 <LL_RCC_PLLSAI1_IsReady+0x18>
 80037dc:	2301      	movs	r3, #1
 80037de:	e000      	b.n	80037e2 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80037f4:	2300      	movs	r3, #0
 80037f6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80037f8:	2300      	movs	r3, #0
 80037fa:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	d034      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003810:	d021      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003812:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003816:	d81b      	bhi.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003818:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800381c:	d01d      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800381e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003822:	d815      	bhi.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00b      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003828:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800382c:	d110      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800382e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800383e:	e00d      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3304      	adds	r3, #4
 8003844:	4618      	mov	r0, r3
 8003846:	f000 f94d 	bl	8003ae4 <RCCEx_PLLSAI1_ConfigNP>
 800384a:	4603      	mov	r3, r0
 800384c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800384e:	e005      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	77fb      	strb	r3, [r7, #31]
        break;
 8003854:	e002      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003856:	bf00      	nop
 8003858:	e000      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800385a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800385c:	7ffb      	ldrb	r3, [r7, #31]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d105      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff fee8 	bl	800363c <LL_RCC_SetSAIClockSource>
 800386c:	e001      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800386e:	7ffb      	ldrb	r3, [r7, #31]
 8003870:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800387a:	2b00      	cmp	r3, #0
 800387c:	d046      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800387e:	f7ff ff56 	bl	800372e <LL_RCC_GetRTCClockSource>
 8003882:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	429a      	cmp	r2, r3
 800388c:	d03c      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800388e:	f7fe fc59 	bl	8002144 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d105      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff ff30 	bl	8003702 <LL_RCC_SetRTCClockSource>
 80038a2:	e02e      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80038a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ac:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80038ae:	f7ff ff4b 	bl	8003748 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80038b2:	f7ff ff5a 	bl	800376a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	4313      	orrs	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80038c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80038ce:	f7ff fde1 	bl	8003494 <LL_RCC_LSE_IsEnabled>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d114      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038d8:	f7fd fcf8 	bl	80012cc <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80038de:	e00b      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e0:	f7fd fcf4 	bl	80012cc <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d902      	bls.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	77fb      	strb	r3, [r7, #31]
              break;
 80038f6:	e004      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80038f8:	f7ff fdde 	bl	80034b8 <LL_RCC_LSE_IsReady>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d1ee      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003902:	7ffb      	ldrb	r3, [r7, #31]
 8003904:	77bb      	strb	r3, [r7, #30]
 8003906:	e001      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003908:	7ffb      	ldrb	r3, [r7, #31]
 800390a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d004      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff fe2a 	bl	8003576 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d004      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff fe35 	bl	80035a2 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2b00      	cmp	r3, #0
 8003942:	d004      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff fe5d 	bl	8003608 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b00      	cmp	r3, #0
 8003958:	d004      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff fe52 	bl	8003608 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d004      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff fe2a 	bl	80035ce <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d004      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff fe1f 	bl	80035ce <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d022      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff fe8d 	bl	80036c0 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039ae:	d107      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80039b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039be:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039c8:	d10b      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3304      	adds	r3, #4
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f8e3 	bl	8003b9a <RCCEx_PLLSAI1_ConfigNQ>
 80039d4:	4603      	mov	r3, r0
 80039d6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80039d8:	7ffb      	ldrb	r3, [r7, #31]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80039de:	7ffb      	ldrb	r3, [r7, #31]
 80039e0:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d02b      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f6:	d008      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a00:	d003      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d105      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fe2a 	bl	8003668 <LL_RCC_SetRNGClockSource>
 8003a14:	e00a      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	2000      	movs	r0, #0
 8003a22:	f7ff fe21 	bl	8003668 <LL_RCC_SetRNGClockSource>
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f7ff fe34 	bl	8003694 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003a34:	d107      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a44:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d022      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff fe3d 	bl	80036d6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a64:	d107      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a74:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a7e:	d10b      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3304      	adds	r3, #4
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 f8e3 	bl	8003c50 <RCCEx_PLLSAI1_ConfigNR>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003a8e:	7ffb      	ldrb	r3, [r7, #31]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003a94:	7ffb      	ldrb	r3, [r7, #31]
 8003a96:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d004      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff fd26 	bl	80034fa <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d009      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff fd45 	bl	800354e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff fd2c 	bl	8003526 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003ace:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3720      	adds	r7, #32
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003adc:	f7ff fcfe 	bl	80034dc <LL_RCC_MSI_EnablePLLMode>
}
 8003ae0:	bf00      	nop
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003af0:	f7ff fe5b 	bl	80037aa <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003af4:	f7fd fbea 	bl	80012cc <HAL_GetTick>
 8003af8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003afa:	e009      	b.n	8003b10 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003afc:	f7fd fbe6 	bl	80012cc <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d902      	bls.n	8003b10 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8003b0e:	e004      	b.n	8003b1a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003b10:	f7ff fe5a 	bl	80037c8 <LL_RCC_PLLSAI1_IsReady>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d137      	bne.n	8003b90 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	021b      	lsls	r3, r3, #8
 8003b30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b34:	4313      	orrs	r3, r2
 8003b36:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003b4e:	f7ff fe1d 	bl	800378c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b52:	f7fd fbbb 	bl	80012cc <HAL_GetTick>
 8003b56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003b58:	e009      	b.n	8003b6e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b5a:	f7fd fbb7 	bl	80012cc <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d902      	bls.n	8003b6e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	73fb      	strb	r3, [r7, #15]
        break;
 8003b6c:	e004      	b.n	8003b78 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003b6e:	f7ff fe2b 	bl	80037c8 <LL_RCC_PLLSAI1_IsReady>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d1f0      	bne.n	8003b5a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d108      	bne.n	8003b90 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003ba6:	f7ff fe00 	bl	80037aa <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003baa:	f7fd fb8f 	bl	80012cc <HAL_GetTick>
 8003bae:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003bb0:	e009      	b.n	8003bc6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bb2:	f7fd fb8b 	bl	80012cc <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d902      	bls.n	8003bc6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc4:	e004      	b.n	8003bd0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003bc6:	f7ff fdff 	bl	80037c8 <LL_RCC_PLLSAI1_IsReady>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1f0      	bne.n	8003bb2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d137      	bne.n	8003c46 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	021b      	lsls	r3, r3, #8
 8003be6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bea:	4313      	orrs	r3, r2
 8003bec:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c00:	4313      	orrs	r3, r2
 8003c02:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003c04:	f7ff fdc2 	bl	800378c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c08:	f7fd fb60 	bl	80012cc <HAL_GetTick>
 8003c0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003c0e:	e009      	b.n	8003c24 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c10:	f7fd fb5c 	bl	80012cc <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d902      	bls.n	8003c24 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	73fb      	strb	r3, [r7, #15]
        break;
 8003c22:	e004      	b.n	8003c2e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003c24:	f7ff fdd0 	bl	80037c8 <LL_RCC_PLLSAI1_IsReady>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d1f0      	bne.n	8003c10 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d108      	bne.n	8003c46 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c42:	4313      	orrs	r3, r2
 8003c44:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003c5c:	f7ff fda5 	bl	80037aa <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c60:	f7fd fb34 	bl	80012cc <HAL_GetTick>
 8003c64:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003c66:	e009      	b.n	8003c7c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c68:	f7fd fb30 	bl	80012cc <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d902      	bls.n	8003c7c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	73fb      	strb	r3, [r7, #15]
      break;
 8003c7a:	e004      	b.n	8003c86 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003c7c:	f7ff fda4 	bl	80037c8 <LL_RCC_PLLSAI1_IsReady>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1f0      	bne.n	8003c68 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d137      	bne.n	8003cfc <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003cba:	f7ff fd67 	bl	800378c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cbe:	f7fd fb05 	bl	80012cc <HAL_GetTick>
 8003cc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003cc4:	e009      	b.n	8003cda <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cc6:	f7fd fb01 	bl	80012cc <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d902      	bls.n	8003cda <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	73fb      	strb	r3, [r7, #15]
        break;
 8003cd8:	e004      	b.n	8003ce4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003cda:	f7ff fd75 	bl	80037c8 <LL_RCC_PLLSAI1_IsReady>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d1f0      	bne.n	8003cc6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d108      	bne.n	8003cfc <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <LL_RCC_GetUSARTClockSource>:
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4013      	ands	r3, r2
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <LL_RCC_GetLPUARTClockSource>:
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d32:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4013      	ands	r3, r2
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e042      	b.n	8003dde <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fc ff78 	bl	8000c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2224      	movs	r2, #36	; 0x24
 8003d74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0201 	bic.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 fbff 	bl	800458c <UART_SetConfig>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e022      	b.n	8003dde <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fe1b 	bl	80049dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003db4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dc4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f042 0201 	orr.w	r2, r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fea2 	bl	8004b20 <UART_CheckIdleState>
 8003ddc:	4603      	mov	r3, r0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b08a      	sub	sp, #40	; 0x28
 8003dea:	af02      	add	r7, sp, #8
 8003dec:	60f8      	str	r0, [r7, #12]
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	603b      	str	r3, [r7, #0]
 8003df2:	4613      	mov	r3, r2
 8003df4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d173      	bne.n	8003ee8 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <HAL_UART_Transmit+0x26>
 8003e06:	88fb      	ldrh	r3, [r7, #6]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e06c      	b.n	8003eea <HAL_UART_Transmit+0x104>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2221      	movs	r2, #33	; 0x21
 8003e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e20:	f7fd fa54 	bl	80012cc <HAL_GetTick>
 8003e24:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	88fa      	ldrh	r2, [r7, #6]
 8003e2a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	88fa      	ldrh	r2, [r7, #6]
 8003e32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e3e:	d108      	bne.n	8003e52 <HAL_UART_Transmit+0x6c>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d104      	bne.n	8003e52 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	e003      	b.n	8003e5a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e5a:	e02c      	b.n	8003eb6 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2200      	movs	r2, #0
 8003e64:	2180      	movs	r1, #128	; 0x80
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 fea8 	bl	8004bbc <UART_WaitOnFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e039      	b.n	8003eea <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10b      	bne.n	8003e94 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	3302      	adds	r3, #2
 8003e90:	61bb      	str	r3, [r7, #24]
 8003e92:	e007      	b.n	8003ea4 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	781a      	ldrb	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1cc      	bne.n	8003e5c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2140      	movs	r1, #64	; 0x40
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 fe75 	bl	8004bbc <UART_WaitOnFlagUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e006      	b.n	8003eea <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e000      	b.n	8003eea <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8003ee8:	2302      	movs	r3, #2
  }
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3720      	adds	r7, #32
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b0ba      	sub	sp, #232	; 0xe8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003f1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003f22:	4013      	ands	r3, r2
 8003f24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003f28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d11b      	bne.n	8003f68 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f34:	f003 0320 	and.w	r3, r3, #32
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d015      	beq.n	8003f68 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f40:	f003 0320 	and.w	r3, r3, #32
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d105      	bne.n	8003f54 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d009      	beq.n	8003f68 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 82e3 	beq.w	8004524 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	4798      	blx	r3
      }
      return;
 8003f66:	e2dd      	b.n	8004524 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003f68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 8123 	beq.w	80041b8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003f72:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003f76:	4b8d      	ldr	r3, [pc, #564]	; (80041ac <HAL_UART_IRQHandler+0x2b8>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003f7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003f82:	4b8b      	ldr	r3, [pc, #556]	; (80041b0 <HAL_UART_IRQHandler+0x2bc>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 8116 	beq.w	80041b8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d011      	beq.n	8003fbc <HAL_UART_IRQHandler+0xc8>
 8003f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00b      	beq.n	8003fbc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb2:	f043 0201 	orr.w	r2, r3, #1
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d011      	beq.n	8003fec <HAL_UART_IRQHandler+0xf8>
 8003fc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00b      	beq.n	8003fec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2202      	movs	r2, #2
 8003fda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe2:	f043 0204 	orr.w	r2, r3, #4
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d011      	beq.n	800401c <HAL_UART_IRQHandler+0x128>
 8003ff8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00b      	beq.n	800401c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2204      	movs	r2, #4
 800400a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004012:	f043 0202 	orr.w	r2, r3, #2
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800401c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b00      	cmp	r3, #0
 8004026:	d017      	beq.n	8004058 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800402c:	f003 0320 	and.w	r3, r3, #32
 8004030:	2b00      	cmp	r3, #0
 8004032:	d105      	bne.n	8004040 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004034:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004038:	4b5c      	ldr	r3, [pc, #368]	; (80041ac <HAL_UART_IRQHandler+0x2b8>)
 800403a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00b      	beq.n	8004058 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2208      	movs	r2, #8
 8004046:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404e:	f043 0208 	orr.w	r2, r3, #8
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800405c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004060:	2b00      	cmp	r3, #0
 8004062:	d012      	beq.n	800408a <HAL_UART_IRQHandler+0x196>
 8004064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004068:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00c      	beq.n	800408a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004078:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004080:	f043 0220 	orr.w	r2, r3, #32
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 8249 	beq.w	8004528 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800409a:	f003 0320 	and.w	r3, r3, #32
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d013      	beq.n	80040ca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80040a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d105      	bne.n	80040ba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80040ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d007      	beq.n	80040ca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040de:	2b40      	cmp	r3, #64	; 0x40
 80040e0:	d005      	beq.n	80040ee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d054      	beq.n	8004198 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 ff13 	bl	8004f1a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fe:	2b40      	cmp	r3, #64	; 0x40
 8004100:	d146      	bne.n	8004190 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3308      	adds	r3, #8
 8004108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004110:	e853 3f00 	ldrex	r3, [r3]
 8004114:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004118:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800411c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004120:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3308      	adds	r3, #8
 800412a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800412e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800413a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800413e:	e841 2300 	strex	r3, r2, [r1]
 8004142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1d9      	bne.n	8004102 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004154:	2b00      	cmp	r3, #0
 8004156:	d017      	beq.n	8004188 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800415e:	4a15      	ldr	r2, [pc, #84]	; (80041b4 <HAL_UART_IRQHandler+0x2c0>)
 8004160:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004168:	4618      	mov	r0, r3
 800416a:	f7fd fbaf 	bl	80018cc <HAL_DMA_Abort_IT>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d019      	beq.n	80041a8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800417a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004182:	4610      	mov	r0, r2
 8004184:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004186:	e00f      	b.n	80041a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f9f5 	bl	8004578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800418e:	e00b      	b.n	80041a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f9f1 	bl	8004578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004196:	e007      	b.n	80041a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f9ed 	bl	8004578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80041a6:	e1bf      	b.n	8004528 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a8:	bf00      	nop
    return;
 80041aa:	e1bd      	b.n	8004528 <HAL_UART_IRQHandler+0x634>
 80041ac:	10000001 	.word	0x10000001
 80041b0:	04000120 	.word	0x04000120
 80041b4:	080051d1 	.word	0x080051d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041bc:	2b01      	cmp	r3, #1
 80041be:	f040 8153 	bne.w	8004468 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80041c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 814c 	beq.w	8004468 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80041d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 8145 	beq.w	8004468 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2210      	movs	r2, #16
 80041e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f0:	2b40      	cmp	r3, #64	; 0x40
 80041f2:	f040 80bb 	bne.w	800436c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004204:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 818f 	beq.w	800452c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004214:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004218:	429a      	cmp	r2, r3
 800421a:	f080 8187 	bcs.w	800452c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004224:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0320 	and.w	r3, r3, #32
 8004236:	2b00      	cmp	r3, #0
 8004238:	f040 8087 	bne.w	800434a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004250:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004258:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	461a      	mov	r2, r3
 8004262:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004266:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800426a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004272:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800427e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1da      	bne.n	800423c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3308      	adds	r3, #8
 800428c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004290:	e853 3f00 	ldrex	r3, [r3]
 8004294:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004296:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004298:	f023 0301 	bic.w	r3, r3, #1
 800429c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3308      	adds	r3, #8
 80042a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80042ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80042b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80042bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e1      	bne.n	8004286 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3308      	adds	r3, #8
 80042c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80042d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3308      	adds	r3, #8
 80042e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80042e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e3      	bne.n	80042c2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004310:	e853 3f00 	ldrex	r3, [r3]
 8004314:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004318:	f023 0310 	bic.w	r3, r3, #16
 800431c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800432a:	65bb      	str	r3, [r7, #88]	; 0x58
 800432c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004330:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004332:	e841 2300 	strex	r3, r2, [r1]
 8004336:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1e4      	bne.n	8004308 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004344:	4618      	mov	r0, r3
 8004346:	f7fd fa62 	bl	800180e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2202      	movs	r2, #2
 800434e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800435c:	b29b      	uxth	r3, r3
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	b29b      	uxth	r3, r3
 8004362:	4619      	mov	r1, r3
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7fc fe75 	bl	8001054 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800436a:	e0df      	b.n	800452c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004378:	b29b      	uxth	r3, r3
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 80d1 	beq.w	8004530 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800438e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 80cc 	beq.w	8004530 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043ba:	647b      	str	r3, [r7, #68]	; 0x44
 80043bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043c2:	e841 2300 	strex	r3, r2, [r1]
 80043c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1e4      	bne.n	8004398 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3308      	adds	r3, #8
 80043d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	623b      	str	r3, [r7, #32]
   return(result);
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043e4:	f023 0301 	bic.w	r3, r3, #1
 80043e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3308      	adds	r3, #8
 80043f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80043f6:	633a      	str	r2, [r7, #48]	; 0x30
 80043f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043fe:	e841 2300 	strex	r3, r2, [r1]
 8004402:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e1      	bne.n	80043ce <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2220      	movs	r2, #32
 800440e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	e853 3f00 	ldrex	r3, [r3]
 800442a:	60fb      	str	r3, [r7, #12]
   return(result);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0310 	bic.w	r3, r3, #16
 8004432:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004440:	61fb      	str	r3, [r7, #28]
 8004442:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004444:	69b9      	ldr	r1, [r7, #24]
 8004446:	69fa      	ldr	r2, [r7, #28]
 8004448:	e841 2300 	strex	r3, r2, [r1]
 800444c:	617b      	str	r3, [r7, #20]
   return(result);
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e4      	bne.n	800441e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800445a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800445e:	4619      	mov	r1, r3
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7fc fdf7 	bl	8001054 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004466:	e063      	b.n	8004530 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800446c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00e      	beq.n	8004492 <HAL_UART_IRQHandler+0x59e>
 8004474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004488:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fee1 	bl	8005252 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004490:	e051      	b.n	8004536 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449a:	2b00      	cmp	r3, #0
 800449c:	d014      	beq.n	80044c8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800449e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d105      	bne.n	80044b6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80044aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d008      	beq.n	80044c8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d03a      	beq.n	8004534 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	4798      	blx	r3
    }
    return;
 80044c6:	e035      	b.n	8004534 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80044c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d009      	beq.n	80044e8 <HAL_UART_IRQHandler+0x5f4>
 80044d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 fe8b 	bl	80051fc <UART_EndTransmit_IT>
    return;
 80044e6:	e026      	b.n	8004536 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80044e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d009      	beq.n	8004508 <HAL_UART_IRQHandler+0x614>
 80044f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 feba 	bl	800527a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004506:	e016      	b.n	8004536 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800450c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d010      	beq.n	8004536 <HAL_UART_IRQHandler+0x642>
 8004514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004518:	2b00      	cmp	r3, #0
 800451a:	da0c      	bge.n	8004536 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 fea2 	bl	8005266 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004522:	e008      	b.n	8004536 <HAL_UART_IRQHandler+0x642>
      return;
 8004524:	bf00      	nop
 8004526:	e006      	b.n	8004536 <HAL_UART_IRQHandler+0x642>
    return;
 8004528:	bf00      	nop
 800452a:	e004      	b.n	8004536 <HAL_UART_IRQHandler+0x642>
      return;
 800452c:	bf00      	nop
 800452e:	e002      	b.n	8004536 <HAL_UART_IRQHandler+0x642>
      return;
 8004530:	bf00      	nop
 8004532:	e000      	b.n	8004536 <HAL_UART_IRQHandler+0x642>
    return;
 8004534:	bf00      	nop
  }
}
 8004536:	37e8      	adds	r7, #232	; 0xe8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800458c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004590:	b08c      	sub	sp, #48	; 0x30
 8004592:	af00      	add	r7, sp, #0
 8004594:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	431a      	orrs	r2, r3
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	4baf      	ldr	r3, [pc, #700]	; (8004878 <UART_SetConfig+0x2ec>)
 80045bc:	4013      	ands	r3, r2
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	6812      	ldr	r2, [r2, #0]
 80045c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045c4:	430b      	orrs	r3, r1
 80045c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4aa4      	ldr	r2, [pc, #656]	; (800487c <UART_SetConfig+0x2f0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d004      	beq.n	80045f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045f4:	4313      	orrs	r3, r2
 80045f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004602:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	6812      	ldr	r2, [r2, #0]
 800460a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800460c:	430b      	orrs	r3, r1
 800460e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004616:	f023 010f 	bic.w	r1, r3, #15
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a95      	ldr	r2, [pc, #596]	; (8004880 <UART_SetConfig+0x2f4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d125      	bne.n	800467c <UART_SetConfig+0xf0>
 8004630:	2003      	movs	r0, #3
 8004632:	f7ff fb68 	bl	8003d06 <LL_RCC_GetUSARTClockSource>
 8004636:	4603      	mov	r3, r0
 8004638:	2b03      	cmp	r3, #3
 800463a:	d81b      	bhi.n	8004674 <UART_SetConfig+0xe8>
 800463c:	a201      	add	r2, pc, #4	; (adr r2, 8004644 <UART_SetConfig+0xb8>)
 800463e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004642:	bf00      	nop
 8004644:	08004655 	.word	0x08004655
 8004648:	08004665 	.word	0x08004665
 800464c:	0800465d 	.word	0x0800465d
 8004650:	0800466d 	.word	0x0800466d
 8004654:	2301      	movs	r3, #1
 8004656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800465a:	e042      	b.n	80046e2 <UART_SetConfig+0x156>
 800465c:	2302      	movs	r3, #2
 800465e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004662:	e03e      	b.n	80046e2 <UART_SetConfig+0x156>
 8004664:	2304      	movs	r3, #4
 8004666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800466a:	e03a      	b.n	80046e2 <UART_SetConfig+0x156>
 800466c:	2308      	movs	r3, #8
 800466e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004672:	e036      	b.n	80046e2 <UART_SetConfig+0x156>
 8004674:	2310      	movs	r3, #16
 8004676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800467a:	e032      	b.n	80046e2 <UART_SetConfig+0x156>
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a7e      	ldr	r2, [pc, #504]	; (800487c <UART_SetConfig+0x2f0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d12a      	bne.n	80046dc <UART_SetConfig+0x150>
 8004686:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800468a:	f7ff fb4c 	bl	8003d26 <LL_RCC_GetLPUARTClockSource>
 800468e:	4603      	mov	r3, r0
 8004690:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004694:	d01a      	beq.n	80046cc <UART_SetConfig+0x140>
 8004696:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800469a:	d81b      	bhi.n	80046d4 <UART_SetConfig+0x148>
 800469c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046a0:	d00c      	beq.n	80046bc <UART_SetConfig+0x130>
 80046a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046a6:	d815      	bhi.n	80046d4 <UART_SetConfig+0x148>
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <UART_SetConfig+0x128>
 80046ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b0:	d008      	beq.n	80046c4 <UART_SetConfig+0x138>
 80046b2:	e00f      	b.n	80046d4 <UART_SetConfig+0x148>
 80046b4:	2300      	movs	r3, #0
 80046b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ba:	e012      	b.n	80046e2 <UART_SetConfig+0x156>
 80046bc:	2302      	movs	r3, #2
 80046be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046c2:	e00e      	b.n	80046e2 <UART_SetConfig+0x156>
 80046c4:	2304      	movs	r3, #4
 80046c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ca:	e00a      	b.n	80046e2 <UART_SetConfig+0x156>
 80046cc:	2308      	movs	r3, #8
 80046ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046d2:	e006      	b.n	80046e2 <UART_SetConfig+0x156>
 80046d4:	2310      	movs	r3, #16
 80046d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046da:	e002      	b.n	80046e2 <UART_SetConfig+0x156>
 80046dc:	2310      	movs	r3, #16
 80046de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a65      	ldr	r2, [pc, #404]	; (800487c <UART_SetConfig+0x2f0>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	f040 8097 	bne.w	800481c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d823      	bhi.n	800473e <UART_SetConfig+0x1b2>
 80046f6:	a201      	add	r2, pc, #4	; (adr r2, 80046fc <UART_SetConfig+0x170>)
 80046f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fc:	08004721 	.word	0x08004721
 8004700:	0800473f 	.word	0x0800473f
 8004704:	08004729 	.word	0x08004729
 8004708:	0800473f 	.word	0x0800473f
 800470c:	0800472f 	.word	0x0800472f
 8004710:	0800473f 	.word	0x0800473f
 8004714:	0800473f 	.word	0x0800473f
 8004718:	0800473f 	.word	0x0800473f
 800471c:	08004737 	.word	0x08004737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004720:	f7fe fdd8 	bl	80032d4 <HAL_RCC_GetPCLK1Freq>
 8004724:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004726:	e010      	b.n	800474a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004728:	4b56      	ldr	r3, [pc, #344]	; (8004884 <UART_SetConfig+0x2f8>)
 800472a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800472c:	e00d      	b.n	800474a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800472e:	f7fe fd51 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8004732:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004734:	e009      	b.n	800474a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800473c:	e005      	b.n	800474a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004748:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 812b 	beq.w	80049a8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	4a4c      	ldr	r2, [pc, #304]	; (8004888 <UART_SetConfig+0x2fc>)
 8004758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800475c:	461a      	mov	r2, r3
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	fbb3 f3f2 	udiv	r3, r3, r2
 8004764:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	4613      	mov	r3, r2
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	4413      	add	r3, r2
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	429a      	cmp	r2, r3
 8004774:	d305      	bcc.n	8004782 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	429a      	cmp	r2, r3
 8004780:	d903      	bls.n	800478a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004788:	e10e      	b.n	80049a8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	2200      	movs	r2, #0
 800478e:	60bb      	str	r3, [r7, #8]
 8004790:	60fa      	str	r2, [r7, #12]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	4a3c      	ldr	r2, [pc, #240]	; (8004888 <UART_SetConfig+0x2fc>)
 8004798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800479c:	b29b      	uxth	r3, r3
 800479e:	2200      	movs	r2, #0
 80047a0:	603b      	str	r3, [r7, #0]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047ac:	f7fb fd38 	bl	8000220 <__aeabi_uldivmod>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4610      	mov	r0, r2
 80047b6:	4619      	mov	r1, r3
 80047b8:	f04f 0200 	mov.w	r2, #0
 80047bc:	f04f 0300 	mov.w	r3, #0
 80047c0:	020b      	lsls	r3, r1, #8
 80047c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80047c6:	0202      	lsls	r2, r0, #8
 80047c8:	6979      	ldr	r1, [r7, #20]
 80047ca:	6849      	ldr	r1, [r1, #4]
 80047cc:	0849      	lsrs	r1, r1, #1
 80047ce:	2000      	movs	r0, #0
 80047d0:	460c      	mov	r4, r1
 80047d2:	4605      	mov	r5, r0
 80047d4:	eb12 0804 	adds.w	r8, r2, r4
 80047d8:	eb43 0905 	adc.w	r9, r3, r5
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	469a      	mov	sl, r3
 80047e4:	4693      	mov	fp, r2
 80047e6:	4652      	mov	r2, sl
 80047e8:	465b      	mov	r3, fp
 80047ea:	4640      	mov	r0, r8
 80047ec:	4649      	mov	r1, r9
 80047ee:	f7fb fd17 	bl	8000220 <__aeabi_uldivmod>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4613      	mov	r3, r2
 80047f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004800:	d308      	bcc.n	8004814 <UART_SetConfig+0x288>
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004808:	d204      	bcs.n	8004814 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6a3a      	ldr	r2, [r7, #32]
 8004810:	60da      	str	r2, [r3, #12]
 8004812:	e0c9      	b.n	80049a8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800481a:	e0c5      	b.n	80049a8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004824:	d16d      	bne.n	8004902 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004826:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800482a:	3b01      	subs	r3, #1
 800482c:	2b07      	cmp	r3, #7
 800482e:	d82d      	bhi.n	800488c <UART_SetConfig+0x300>
 8004830:	a201      	add	r2, pc, #4	; (adr r2, 8004838 <UART_SetConfig+0x2ac>)
 8004832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004836:	bf00      	nop
 8004838:	08004859 	.word	0x08004859
 800483c:	08004861 	.word	0x08004861
 8004840:	0800488d 	.word	0x0800488d
 8004844:	08004867 	.word	0x08004867
 8004848:	0800488d 	.word	0x0800488d
 800484c:	0800488d 	.word	0x0800488d
 8004850:	0800488d 	.word	0x0800488d
 8004854:	0800486f 	.word	0x0800486f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004858:	f7fe fd52 	bl	8003300 <HAL_RCC_GetPCLK2Freq>
 800485c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800485e:	e01b      	b.n	8004898 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004860:	4b08      	ldr	r3, [pc, #32]	; (8004884 <UART_SetConfig+0x2f8>)
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004864:	e018      	b.n	8004898 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004866:	f7fe fcb5 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 800486a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800486c:	e014      	b.n	8004898 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800486e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004874:	e010      	b.n	8004898 <UART_SetConfig+0x30c>
 8004876:	bf00      	nop
 8004878:	cfff69f3 	.word	0xcfff69f3
 800487c:	40008000 	.word	0x40008000
 8004880:	40013800 	.word	0x40013800
 8004884:	00f42400 	.word	0x00f42400
 8004888:	08006778 	.word	0x08006778
      default:
        pclk = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004896:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 8084 	beq.w	80049a8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	4a4b      	ldr	r2, [pc, #300]	; (80049d4 <UART_SetConfig+0x448>)
 80048a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048aa:	461a      	mov	r2, r3
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80048b2:	005a      	lsls	r2, r3, #1
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	085b      	lsrs	r3, r3, #1
 80048ba:	441a      	add	r2, r3
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	2b0f      	cmp	r3, #15
 80048ca:	d916      	bls.n	80048fa <UART_SetConfig+0x36e>
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d2:	d212      	bcs.n	80048fa <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	f023 030f 	bic.w	r3, r3, #15
 80048dc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	085b      	lsrs	r3, r3, #1
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	8bfb      	ldrh	r3, [r7, #30]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	8bfa      	ldrh	r2, [r7, #30]
 80048f6:	60da      	str	r2, [r3, #12]
 80048f8:	e056      	b.n	80049a8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004900:	e052      	b.n	80049a8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004902:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004906:	3b01      	subs	r3, #1
 8004908:	2b07      	cmp	r3, #7
 800490a:	d822      	bhi.n	8004952 <UART_SetConfig+0x3c6>
 800490c:	a201      	add	r2, pc, #4	; (adr r2, 8004914 <UART_SetConfig+0x388>)
 800490e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004912:	bf00      	nop
 8004914:	08004935 	.word	0x08004935
 8004918:	0800493d 	.word	0x0800493d
 800491c:	08004953 	.word	0x08004953
 8004920:	08004943 	.word	0x08004943
 8004924:	08004953 	.word	0x08004953
 8004928:	08004953 	.word	0x08004953
 800492c:	08004953 	.word	0x08004953
 8004930:	0800494b 	.word	0x0800494b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004934:	f7fe fce4 	bl	8003300 <HAL_RCC_GetPCLK2Freq>
 8004938:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800493a:	e010      	b.n	800495e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800493c:	4b26      	ldr	r3, [pc, #152]	; (80049d8 <UART_SetConfig+0x44c>)
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004940:	e00d      	b.n	800495e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004942:	f7fe fc47 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8004946:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004948:	e009      	b.n	800495e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800494a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004950:	e005      	b.n	800495e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800495c:	bf00      	nop
    }

    if (pclk != 0U)
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	2b00      	cmp	r3, #0
 8004962:	d021      	beq.n	80049a8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	4a1a      	ldr	r2, [pc, #104]	; (80049d4 <UART_SetConfig+0x448>)
 800496a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800496e:	461a      	mov	r2, r3
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	fbb3 f2f2 	udiv	r2, r3, r2
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	441a      	add	r2, r3
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	fbb2 f3f3 	udiv	r3, r2, r3
 8004986:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	2b0f      	cmp	r3, #15
 800498c:	d909      	bls.n	80049a2 <UART_SetConfig+0x416>
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004994:	d205      	bcs.n	80049a2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	b29a      	uxth	r2, r3
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60da      	str	r2, [r3, #12]
 80049a0:	e002      	b.n	80049a8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2200      	movs	r2, #0
 80049bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2200      	movs	r2, #0
 80049c2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80049c4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3730      	adds	r7, #48	; 0x30
 80049cc:	46bd      	mov	sp, r7
 80049ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049d2:	bf00      	nop
 80049d4:	08006778 	.word	0x08006778
 80049d8:	00f42400 	.word	0x00f42400

080049dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	f003 0310 	and.w	r3, r3, #16
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01a      	beq.n	8004af2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ada:	d10a      	bne.n	8004af2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	605a      	str	r2, [r3, #4]
  }
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b30:	f7fc fbcc 	bl	80012cc <HAL_GetTick>
 8004b34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0308 	and.w	r3, r3, #8
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d10e      	bne.n	8004b62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f832 	bl	8004bbc <UART_WaitOnFlagUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e028      	b.n	8004bb4 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d10e      	bne.n	8004b8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f81c 	bl	8004bbc <UART_WaitOnFlagUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e012      	b.n	8004bb4 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b09c      	sub	sp, #112	; 0x70
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	603b      	str	r3, [r7, #0]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bcc:	e0a9      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd4:	f000 80a5 	beq.w	8004d22 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd8:	f7fc fb78 	bl	80012cc <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d302      	bcc.n	8004bee <UART_WaitOnFlagUntilTimeout+0x32>
 8004be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d140      	bne.n	8004c70 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bfe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c02:	667b      	str	r3, [r7, #100]	; 0x64
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c0e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c10:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c12:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e6      	bne.n	8004bee <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3308      	adds	r3, #8
 8004c26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c2a:	e853 3f00 	ldrex	r3, [r3]
 8004c2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c32:	f023 0301 	bic.w	r3, r3, #1
 8004c36:	663b      	str	r3, [r7, #96]	; 0x60
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3308      	adds	r3, #8
 8004c3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c40:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c42:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c44:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c48:	e841 2300 	strex	r3, r2, [r1]
 8004c4c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1e5      	bne.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e069      	b.n	8004d44 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d051      	beq.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c8c:	d149      	bne.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c96:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca0:	e853 3f00 	ldrex	r3, [r3]
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cb8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cbe:	e841 2300 	strex	r3, r2, [r1]
 8004cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1e6      	bne.n	8004c98 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3308      	adds	r3, #8
 8004cd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	e853 3f00 	ldrex	r3, [r3]
 8004cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f023 0301 	bic.w	r3, r3, #1
 8004ce0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3308      	adds	r3, #8
 8004ce8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004cea:	623a      	str	r2, [r7, #32]
 8004cec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cee:	69f9      	ldr	r1, [r7, #28]
 8004cf0:	6a3a      	ldr	r2, [r7, #32]
 8004cf2:	e841 2300 	strex	r3, r2, [r1]
 8004cf6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1e5      	bne.n	8004cca <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e010      	b.n	8004d44 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	bf0c      	ite	eq
 8004d32:	2301      	moveq	r3, #1
 8004d34:	2300      	movne	r3, #0
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	461a      	mov	r2, r3
 8004d3a:	79fb      	ldrb	r3, [r7, #7]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	f43f af46 	beq.w	8004bce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3770      	adds	r7, #112	; 0x70
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b096      	sub	sp, #88	; 0x58
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	4613      	mov	r3, r2
 8004d58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	88fa      	ldrh	r2, [r7, #6]
 8004d64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2222      	movs	r2, #34	; 0x22
 8004d74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d02d      	beq.n	8004dde <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d88:	4a40      	ldr	r2, [pc, #256]	; (8004e8c <UART_Start_Receive_DMA+0x140>)
 8004d8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d92:	4a3f      	ldr	r2, [pc, #252]	; (8004e90 <UART_Start_Receive_DMA+0x144>)
 8004d94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d9c:	4a3d      	ldr	r2, [pc, #244]	; (8004e94 <UART_Start_Receive_DMA+0x148>)
 8004d9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004da6:	2200      	movs	r2, #0
 8004da8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3324      	adds	r3, #36	; 0x24
 8004db6:	4619      	mov	r1, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	88fb      	ldrh	r3, [r7, #6]
 8004dc0:	f7fc fcaa 	bl	8001718 <HAL_DMA_Start_IT>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d009      	beq.n	8004dde <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2210      	movs	r2, #16
 8004dce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e051      	b.n	8004e82 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d018      	beq.n	8004e18 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dee:	e853 3f00 	ldrex	r3, [r3]
 8004df2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfa:	657b      	str	r3, [r7, #84]	; 0x54
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	461a      	mov	r2, r3
 8004e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e04:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e06:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e0c:	e841 2300 	strex	r3, r2, [r1]
 8004e10:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1e6      	bne.n	8004de6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	3308      	adds	r3, #8
 8004e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e22:	e853 3f00 	ldrex	r3, [r3]
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3308      	adds	r3, #8
 8004e36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e38:	637a      	str	r2, [r7, #52]	; 0x34
 8004e3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e40:	e841 2300 	strex	r3, r2, [r1]
 8004e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1e5      	bne.n	8004e18 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3308      	adds	r3, #8
 8004e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	e853 3f00 	ldrex	r3, [r3]
 8004e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3308      	adds	r3, #8
 8004e6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e6c:	623a      	str	r2, [r7, #32]
 8004e6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	69f9      	ldr	r1, [r7, #28]
 8004e72:	6a3a      	ldr	r2, [r7, #32]
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e5      	bne.n	8004e4c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3758      	adds	r7, #88	; 0x58
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	08004fe7 	.word	0x08004fe7
 8004e90:	08005113 	.word	0x08005113
 8004e94:	08005151 	.word	0x08005151

08004e98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b08f      	sub	sp, #60	; 0x3c
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	e853 3f00 	ldrex	r3, [r3]
 8004eac:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ec0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ec6:	e841 2300 	strex	r3, r2, [r1]
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e6      	bne.n	8004ea0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3308      	adds	r3, #8
 8004ed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3308      	adds	r3, #8
 8004ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ef2:	61ba      	str	r2, [r7, #24]
 8004ef4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef6:	6979      	ldr	r1, [r7, #20]
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	e841 2300 	strex	r3, r2, [r1]
 8004efe:	613b      	str	r3, [r7, #16]
   return(result);
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e5      	bne.n	8004ed2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8004f0e:	bf00      	nop
 8004f10:	373c      	adds	r7, #60	; 0x3c
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b095      	sub	sp, #84	; 0x54
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2a:	e853 3f00 	ldrex	r3, [r3]
 8004f2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f40:	643b      	str	r3, [r7, #64]	; 0x40
 8004f42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f48:	e841 2300 	strex	r3, r2, [r1]
 8004f4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1e6      	bne.n	8004f22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	3308      	adds	r3, #8
 8004f5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	e853 3f00 	ldrex	r3, [r3]
 8004f62:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f6a:	f023 0301 	bic.w	r3, r3, #1
 8004f6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3308      	adds	r3, #8
 8004f76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f80:	e841 2300 	strex	r3, r2, [r1]
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e3      	bne.n	8004f54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d118      	bne.n	8004fc6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	e853 3f00 	ldrex	r3, [r3]
 8004fa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	f023 0310 	bic.w	r3, r3, #16
 8004fa8:	647b      	str	r3, [r7, #68]	; 0x44
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fb2:	61bb      	str	r3, [r7, #24]
 8004fb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	6979      	ldr	r1, [r7, #20]
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	e841 2300 	strex	r3, r2, [r1]
 8004fbe:	613b      	str	r3, [r7, #16]
   return(result);
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1e6      	bne.n	8004f94 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004fda:	bf00      	nop
 8004fdc:	3754      	adds	r7, #84	; 0x54
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b09c      	sub	sp, #112	; 0x70
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0320 	and.w	r3, r3, #32
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d171      	bne.n	80050e6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005004:	2200      	movs	r2, #0
 8005006:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800500a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005012:	e853 3f00 	ldrex	r3, [r3]
 8005016:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800501a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800501e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	461a      	mov	r2, r3
 8005026:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005028:	65bb      	str	r3, [r7, #88]	; 0x58
 800502a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800502e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005030:	e841 2300 	strex	r3, r2, [r1]
 8005034:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1e6      	bne.n	800500a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800503c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	3308      	adds	r3, #8
 8005042:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800504c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504e:	f023 0301 	bic.w	r3, r3, #1
 8005052:	667b      	str	r3, [r7, #100]	; 0x64
 8005054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3308      	adds	r3, #8
 800505a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800505c:	647a      	str	r2, [r7, #68]	; 0x44
 800505e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005064:	e841 2300 	strex	r3, r2, [r1]
 8005068:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800506a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e5      	bne.n	800503c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3308      	adds	r3, #8
 8005076:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	623b      	str	r3, [r7, #32]
   return(result);
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005086:	663b      	str	r3, [r7, #96]	; 0x60
 8005088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3308      	adds	r3, #8
 800508e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005090:	633a      	str	r2, [r7, #48]	; 0x30
 8005092:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e5      	bne.n	8005070 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a6:	2220      	movs	r2, #32
 80050a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d118      	bne.n	80050e6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	e853 3f00 	ldrex	r3, [r3]
 80050c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f023 0310 	bic.w	r3, r3, #16
 80050c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050d2:	61fb      	str	r3, [r7, #28]
 80050d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	69b9      	ldr	r1, [r7, #24]
 80050d8:	69fa      	ldr	r2, [r7, #28]
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	617b      	str	r3, [r7, #20]
   return(result);
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1e6      	bne.n	80050b4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e8:	2200      	movs	r2, #0
 80050ea:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d107      	bne.n	8005104 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80050fa:	4619      	mov	r1, r3
 80050fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80050fe:	f7fb ffa9 	bl	8001054 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005102:	e002      	b.n	800510a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005104:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005106:	f7ff fa23 	bl	8004550 <HAL_UART_RxCpltCallback>
}
 800510a:	bf00      	nop
 800510c:	3770      	adds	r7, #112	; 0x70
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800512a:	2b01      	cmp	r3, #1
 800512c:	d109      	bne.n	8005142 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005134:	085b      	lsrs	r3, r3, #1
 8005136:	b29b      	uxth	r3, r3
 8005138:	4619      	mov	r1, r3
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f7fb ff8a 	bl	8001054 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005140:	e002      	b.n	8005148 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f7ff fa0e 	bl	8004564 <HAL_UART_RxHalfCpltCallback>
}
 8005148:	bf00      	nop
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005164:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800516c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005178:	2b80      	cmp	r3, #128	; 0x80
 800517a:	d109      	bne.n	8005190 <UART_DMAError+0x40>
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	2b21      	cmp	r3, #33	; 0x21
 8005180:	d106      	bne.n	8005190 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2200      	movs	r2, #0
 8005186:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800518a:	6978      	ldr	r0, [r7, #20]
 800518c:	f7ff fe84 	bl	8004e98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519a:	2b40      	cmp	r3, #64	; 0x40
 800519c:	d109      	bne.n	80051b2 <UART_DMAError+0x62>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b22      	cmp	r3, #34	; 0x22
 80051a2:	d106      	bne.n	80051b2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80051ac:	6978      	ldr	r0, [r7, #20]
 80051ae:	f7ff feb4 	bl	8004f1a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b8:	f043 0210 	orr.w	r2, r3, #16
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051c2:	6978      	ldr	r0, [r7, #20]
 80051c4:	f7ff f9d8 	bl	8004578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051c8:	bf00      	nop
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f7ff f9c2 	bl	8004578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051f4:	bf00      	nop
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b088      	sub	sp, #32
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	60bb      	str	r3, [r7, #8]
   return(result);
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005218:	61fb      	str	r3, [r7, #28]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	61bb      	str	r3, [r7, #24]
 8005224:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005226:	6979      	ldr	r1, [r7, #20]
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	e841 2300 	strex	r3, r2, [r1]
 800522e:	613b      	str	r3, [r7, #16]
   return(result);
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1e6      	bne.n	8005204 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2220      	movs	r2, #32
 800523a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff f979 	bl	800453c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800524a:	bf00      	nop
 800524c:	3720      	adds	r7, #32
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800528e:	b480      	push	{r7}
 8005290:	b085      	sub	sp, #20
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800529c:	2b01      	cmp	r3, #1
 800529e:	d101      	bne.n	80052a4 <HAL_UARTEx_DisableFifoMode+0x16>
 80052a0:	2302      	movs	r3, #2
 80052a2:	e027      	b.n	80052f4 <HAL_UARTEx_DisableFifoMode+0x66>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2224      	movs	r2, #36	; 0x24
 80052b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0201 	bic.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80052d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005310:	2b01      	cmp	r3, #1
 8005312:	d101      	bne.n	8005318 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005314:	2302      	movs	r3, #2
 8005316:	e02d      	b.n	8005374 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2224      	movs	r2, #36	; 0x24
 8005324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0201 	bic.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f8a3 	bl	80054a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2220      	movs	r2, #32
 8005366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005390:	2302      	movs	r3, #2
 8005392:	e02d      	b.n	80053f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2224      	movs	r2, #36	; 0x24
 80053a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0201 	bic.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f865 	bl	80054a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08c      	sub	sp, #48	; 0x30
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	4613      	mov	r3, r2
 8005404:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800540c:	2b20      	cmp	r3, #32
 800540e:	d142      	bne.n	8005496 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8005416:	88fb      	ldrh	r3, [r7, #6]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e03b      	b.n	8005498 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2201      	movs	r2, #1
 8005424:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800542c:	88fb      	ldrh	r3, [r7, #6]
 800542e:	461a      	mov	r2, r3
 8005430:	68b9      	ldr	r1, [r7, #8]
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f7ff fc8a 	bl	8004d4c <UART_Start_Receive_DMA>
 8005438:	4603      	mov	r3, r0
 800543a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800543e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005442:	2b00      	cmp	r3, #0
 8005444:	d124      	bne.n	8005490 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800544a:	2b01      	cmp	r3, #1
 800544c:	d11d      	bne.n	800548a <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2210      	movs	r2, #16
 8005454:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	e853 3f00 	ldrex	r3, [r3]
 8005462:	617b      	str	r3, [r7, #20]
   return(result);
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f043 0310 	orr.w	r3, r3, #16
 800546a:	62bb      	str	r3, [r7, #40]	; 0x28
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	461a      	mov	r2, r3
 8005472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005474:	627b      	str	r3, [r7, #36]	; 0x24
 8005476:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	6a39      	ldr	r1, [r7, #32]
 800547a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547c:	e841 2300 	strex	r3, r2, [r1]
 8005480:	61fb      	str	r3, [r7, #28]
   return(result);
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e6      	bne.n	8005456 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8005488:	e002      	b.n	8005490 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005490:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005494:	e000      	b.n	8005498 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005496:	2302      	movs	r3, #2
  }
}
 8005498:	4618      	mov	r0, r3
 800549a:	3730      	adds	r7, #48	; 0x30
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d108      	bne.n	80054c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80054c0:	e031      	b.n	8005526 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80054c2:	2308      	movs	r3, #8
 80054c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80054c6:	2308      	movs	r3, #8
 80054c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	0e5b      	lsrs	r3, r3, #25
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	0f5b      	lsrs	r3, r3, #29
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054ea:	7bbb      	ldrb	r3, [r7, #14]
 80054ec:	7b3a      	ldrb	r2, [r7, #12]
 80054ee:	4911      	ldr	r1, [pc, #68]	; (8005534 <UARTEx_SetNbDataToProcess+0x94>)
 80054f0:	5c8a      	ldrb	r2, [r1, r2]
 80054f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80054f6:	7b3a      	ldrb	r2, [r7, #12]
 80054f8:	490f      	ldr	r1, [pc, #60]	; (8005538 <UARTEx_SetNbDataToProcess+0x98>)
 80054fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005500:	b29a      	uxth	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	7b7a      	ldrb	r2, [r7, #13]
 800550c:	4909      	ldr	r1, [pc, #36]	; (8005534 <UARTEx_SetNbDataToProcess+0x94>)
 800550e:	5c8a      	ldrb	r2, [r1, r2]
 8005510:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005514:	7b7a      	ldrb	r2, [r7, #13]
 8005516:	4908      	ldr	r1, [pc, #32]	; (8005538 <UARTEx_SetNbDataToProcess+0x98>)
 8005518:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800551a:	fb93 f3f2 	sdiv	r3, r3, r2
 800551e:	b29a      	uxth	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	08006790 	.word	0x08006790
 8005538:	08006798 	.word	0x08006798

0800553c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005544:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005548:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005550:	b29a      	uxth	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	b29b      	uxth	r3, r3
 8005556:	43db      	mvns	r3, r3
 8005558:	b29b      	uxth	r3, r3
 800555a:	4013      	ands	r3, r2
 800555c:	b29a      	uxth	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005572:	b084      	sub	sp, #16
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	f107 0014 	add.w	r0, r7, #20
 8005580:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	b004      	add	sp, #16
 80055b2:	4770      	bx	lr

080055b4 <__errno>:
 80055b4:	4b01      	ldr	r3, [pc, #4]	; (80055bc <__errno+0x8>)
 80055b6:	6818      	ldr	r0, [r3, #0]
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	20000034 	.word	0x20000034

080055c0 <__libc_init_array>:
 80055c0:	b570      	push	{r4, r5, r6, lr}
 80055c2:	4d0d      	ldr	r5, [pc, #52]	; (80055f8 <__libc_init_array+0x38>)
 80055c4:	4c0d      	ldr	r4, [pc, #52]	; (80055fc <__libc_init_array+0x3c>)
 80055c6:	1b64      	subs	r4, r4, r5
 80055c8:	10a4      	asrs	r4, r4, #2
 80055ca:	2600      	movs	r6, #0
 80055cc:	42a6      	cmp	r6, r4
 80055ce:	d109      	bne.n	80055e4 <__libc_init_array+0x24>
 80055d0:	4d0b      	ldr	r5, [pc, #44]	; (8005600 <__libc_init_array+0x40>)
 80055d2:	4c0c      	ldr	r4, [pc, #48]	; (8005604 <__libc_init_array+0x44>)
 80055d4:	f001 f824 	bl	8006620 <_init>
 80055d8:	1b64      	subs	r4, r4, r5
 80055da:	10a4      	asrs	r4, r4, #2
 80055dc:	2600      	movs	r6, #0
 80055de:	42a6      	cmp	r6, r4
 80055e0:	d105      	bne.n	80055ee <__libc_init_array+0x2e>
 80055e2:	bd70      	pop	{r4, r5, r6, pc}
 80055e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055e8:	4798      	blx	r3
 80055ea:	3601      	adds	r6, #1
 80055ec:	e7ee      	b.n	80055cc <__libc_init_array+0xc>
 80055ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f2:	4798      	blx	r3
 80055f4:	3601      	adds	r6, #1
 80055f6:	e7f2      	b.n	80055de <__libc_init_array+0x1e>
 80055f8:	08006840 	.word	0x08006840
 80055fc:	08006840 	.word	0x08006840
 8005600:	08006840 	.word	0x08006840
 8005604:	08006844 	.word	0x08006844

08005608 <memset>:
 8005608:	4402      	add	r2, r0
 800560a:	4603      	mov	r3, r0
 800560c:	4293      	cmp	r3, r2
 800560e:	d100      	bne.n	8005612 <memset+0xa>
 8005610:	4770      	bx	lr
 8005612:	f803 1b01 	strb.w	r1, [r3], #1
 8005616:	e7f9      	b.n	800560c <memset+0x4>

08005618 <iprintf>:
 8005618:	b40f      	push	{r0, r1, r2, r3}
 800561a:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <iprintf+0x2c>)
 800561c:	b513      	push	{r0, r1, r4, lr}
 800561e:	681c      	ldr	r4, [r3, #0]
 8005620:	b124      	cbz	r4, 800562c <iprintf+0x14>
 8005622:	69a3      	ldr	r3, [r4, #24]
 8005624:	b913      	cbnz	r3, 800562c <iprintf+0x14>
 8005626:	4620      	mov	r0, r4
 8005628:	f000 fa5e 	bl	8005ae8 <__sinit>
 800562c:	ab05      	add	r3, sp, #20
 800562e:	9a04      	ldr	r2, [sp, #16]
 8005630:	68a1      	ldr	r1, [r4, #8]
 8005632:	9301      	str	r3, [sp, #4]
 8005634:	4620      	mov	r0, r4
 8005636:	f000 fc67 	bl	8005f08 <_vfiprintf_r>
 800563a:	b002      	add	sp, #8
 800563c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005640:	b004      	add	sp, #16
 8005642:	4770      	bx	lr
 8005644:	20000034 	.word	0x20000034

08005648 <_puts_r>:
 8005648:	b570      	push	{r4, r5, r6, lr}
 800564a:	460e      	mov	r6, r1
 800564c:	4605      	mov	r5, r0
 800564e:	b118      	cbz	r0, 8005658 <_puts_r+0x10>
 8005650:	6983      	ldr	r3, [r0, #24]
 8005652:	b90b      	cbnz	r3, 8005658 <_puts_r+0x10>
 8005654:	f000 fa48 	bl	8005ae8 <__sinit>
 8005658:	69ab      	ldr	r3, [r5, #24]
 800565a:	68ac      	ldr	r4, [r5, #8]
 800565c:	b913      	cbnz	r3, 8005664 <_puts_r+0x1c>
 800565e:	4628      	mov	r0, r5
 8005660:	f000 fa42 	bl	8005ae8 <__sinit>
 8005664:	4b2c      	ldr	r3, [pc, #176]	; (8005718 <_puts_r+0xd0>)
 8005666:	429c      	cmp	r4, r3
 8005668:	d120      	bne.n	80056ac <_puts_r+0x64>
 800566a:	686c      	ldr	r4, [r5, #4]
 800566c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800566e:	07db      	lsls	r3, r3, #31
 8005670:	d405      	bmi.n	800567e <_puts_r+0x36>
 8005672:	89a3      	ldrh	r3, [r4, #12]
 8005674:	0598      	lsls	r0, r3, #22
 8005676:	d402      	bmi.n	800567e <_puts_r+0x36>
 8005678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800567a:	f000 fad3 	bl	8005c24 <__retarget_lock_acquire_recursive>
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	0719      	lsls	r1, r3, #28
 8005682:	d51d      	bpl.n	80056c0 <_puts_r+0x78>
 8005684:	6923      	ldr	r3, [r4, #16]
 8005686:	b1db      	cbz	r3, 80056c0 <_puts_r+0x78>
 8005688:	3e01      	subs	r6, #1
 800568a:	68a3      	ldr	r3, [r4, #8]
 800568c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005690:	3b01      	subs	r3, #1
 8005692:	60a3      	str	r3, [r4, #8]
 8005694:	bb39      	cbnz	r1, 80056e6 <_puts_r+0x9e>
 8005696:	2b00      	cmp	r3, #0
 8005698:	da38      	bge.n	800570c <_puts_r+0xc4>
 800569a:	4622      	mov	r2, r4
 800569c:	210a      	movs	r1, #10
 800569e:	4628      	mov	r0, r5
 80056a0:	f000 f848 	bl	8005734 <__swbuf_r>
 80056a4:	3001      	adds	r0, #1
 80056a6:	d011      	beq.n	80056cc <_puts_r+0x84>
 80056a8:	250a      	movs	r5, #10
 80056aa:	e011      	b.n	80056d0 <_puts_r+0x88>
 80056ac:	4b1b      	ldr	r3, [pc, #108]	; (800571c <_puts_r+0xd4>)
 80056ae:	429c      	cmp	r4, r3
 80056b0:	d101      	bne.n	80056b6 <_puts_r+0x6e>
 80056b2:	68ac      	ldr	r4, [r5, #8]
 80056b4:	e7da      	b.n	800566c <_puts_r+0x24>
 80056b6:	4b1a      	ldr	r3, [pc, #104]	; (8005720 <_puts_r+0xd8>)
 80056b8:	429c      	cmp	r4, r3
 80056ba:	bf08      	it	eq
 80056bc:	68ec      	ldreq	r4, [r5, #12]
 80056be:	e7d5      	b.n	800566c <_puts_r+0x24>
 80056c0:	4621      	mov	r1, r4
 80056c2:	4628      	mov	r0, r5
 80056c4:	f000 f888 	bl	80057d8 <__swsetup_r>
 80056c8:	2800      	cmp	r0, #0
 80056ca:	d0dd      	beq.n	8005688 <_puts_r+0x40>
 80056cc:	f04f 35ff 	mov.w	r5, #4294967295
 80056d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056d2:	07da      	lsls	r2, r3, #31
 80056d4:	d405      	bmi.n	80056e2 <_puts_r+0x9a>
 80056d6:	89a3      	ldrh	r3, [r4, #12]
 80056d8:	059b      	lsls	r3, r3, #22
 80056da:	d402      	bmi.n	80056e2 <_puts_r+0x9a>
 80056dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056de:	f000 faa2 	bl	8005c26 <__retarget_lock_release_recursive>
 80056e2:	4628      	mov	r0, r5
 80056e4:	bd70      	pop	{r4, r5, r6, pc}
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	da04      	bge.n	80056f4 <_puts_r+0xac>
 80056ea:	69a2      	ldr	r2, [r4, #24]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	dc06      	bgt.n	80056fe <_puts_r+0xb6>
 80056f0:	290a      	cmp	r1, #10
 80056f2:	d004      	beq.n	80056fe <_puts_r+0xb6>
 80056f4:	6823      	ldr	r3, [r4, #0]
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	6022      	str	r2, [r4, #0]
 80056fa:	7019      	strb	r1, [r3, #0]
 80056fc:	e7c5      	b.n	800568a <_puts_r+0x42>
 80056fe:	4622      	mov	r2, r4
 8005700:	4628      	mov	r0, r5
 8005702:	f000 f817 	bl	8005734 <__swbuf_r>
 8005706:	3001      	adds	r0, #1
 8005708:	d1bf      	bne.n	800568a <_puts_r+0x42>
 800570a:	e7df      	b.n	80056cc <_puts_r+0x84>
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	250a      	movs	r5, #10
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	6022      	str	r2, [r4, #0]
 8005714:	701d      	strb	r5, [r3, #0]
 8005716:	e7db      	b.n	80056d0 <_puts_r+0x88>
 8005718:	080067c4 	.word	0x080067c4
 800571c:	080067e4 	.word	0x080067e4
 8005720:	080067a4 	.word	0x080067a4

08005724 <puts>:
 8005724:	4b02      	ldr	r3, [pc, #8]	; (8005730 <puts+0xc>)
 8005726:	4601      	mov	r1, r0
 8005728:	6818      	ldr	r0, [r3, #0]
 800572a:	f7ff bf8d 	b.w	8005648 <_puts_r>
 800572e:	bf00      	nop
 8005730:	20000034 	.word	0x20000034

08005734 <__swbuf_r>:
 8005734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005736:	460e      	mov	r6, r1
 8005738:	4614      	mov	r4, r2
 800573a:	4605      	mov	r5, r0
 800573c:	b118      	cbz	r0, 8005746 <__swbuf_r+0x12>
 800573e:	6983      	ldr	r3, [r0, #24]
 8005740:	b90b      	cbnz	r3, 8005746 <__swbuf_r+0x12>
 8005742:	f000 f9d1 	bl	8005ae8 <__sinit>
 8005746:	4b21      	ldr	r3, [pc, #132]	; (80057cc <__swbuf_r+0x98>)
 8005748:	429c      	cmp	r4, r3
 800574a:	d12b      	bne.n	80057a4 <__swbuf_r+0x70>
 800574c:	686c      	ldr	r4, [r5, #4]
 800574e:	69a3      	ldr	r3, [r4, #24]
 8005750:	60a3      	str	r3, [r4, #8]
 8005752:	89a3      	ldrh	r3, [r4, #12]
 8005754:	071a      	lsls	r2, r3, #28
 8005756:	d52f      	bpl.n	80057b8 <__swbuf_r+0x84>
 8005758:	6923      	ldr	r3, [r4, #16]
 800575a:	b36b      	cbz	r3, 80057b8 <__swbuf_r+0x84>
 800575c:	6923      	ldr	r3, [r4, #16]
 800575e:	6820      	ldr	r0, [r4, #0]
 8005760:	1ac0      	subs	r0, r0, r3
 8005762:	6963      	ldr	r3, [r4, #20]
 8005764:	b2f6      	uxtb	r6, r6
 8005766:	4283      	cmp	r3, r0
 8005768:	4637      	mov	r7, r6
 800576a:	dc04      	bgt.n	8005776 <__swbuf_r+0x42>
 800576c:	4621      	mov	r1, r4
 800576e:	4628      	mov	r0, r5
 8005770:	f000 f926 	bl	80059c0 <_fflush_r>
 8005774:	bb30      	cbnz	r0, 80057c4 <__swbuf_r+0x90>
 8005776:	68a3      	ldr	r3, [r4, #8]
 8005778:	3b01      	subs	r3, #1
 800577a:	60a3      	str	r3, [r4, #8]
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	6022      	str	r2, [r4, #0]
 8005782:	701e      	strb	r6, [r3, #0]
 8005784:	6963      	ldr	r3, [r4, #20]
 8005786:	3001      	adds	r0, #1
 8005788:	4283      	cmp	r3, r0
 800578a:	d004      	beq.n	8005796 <__swbuf_r+0x62>
 800578c:	89a3      	ldrh	r3, [r4, #12]
 800578e:	07db      	lsls	r3, r3, #31
 8005790:	d506      	bpl.n	80057a0 <__swbuf_r+0x6c>
 8005792:	2e0a      	cmp	r6, #10
 8005794:	d104      	bne.n	80057a0 <__swbuf_r+0x6c>
 8005796:	4621      	mov	r1, r4
 8005798:	4628      	mov	r0, r5
 800579a:	f000 f911 	bl	80059c0 <_fflush_r>
 800579e:	b988      	cbnz	r0, 80057c4 <__swbuf_r+0x90>
 80057a0:	4638      	mov	r0, r7
 80057a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057a4:	4b0a      	ldr	r3, [pc, #40]	; (80057d0 <__swbuf_r+0x9c>)
 80057a6:	429c      	cmp	r4, r3
 80057a8:	d101      	bne.n	80057ae <__swbuf_r+0x7a>
 80057aa:	68ac      	ldr	r4, [r5, #8]
 80057ac:	e7cf      	b.n	800574e <__swbuf_r+0x1a>
 80057ae:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <__swbuf_r+0xa0>)
 80057b0:	429c      	cmp	r4, r3
 80057b2:	bf08      	it	eq
 80057b4:	68ec      	ldreq	r4, [r5, #12]
 80057b6:	e7ca      	b.n	800574e <__swbuf_r+0x1a>
 80057b8:	4621      	mov	r1, r4
 80057ba:	4628      	mov	r0, r5
 80057bc:	f000 f80c 	bl	80057d8 <__swsetup_r>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	d0cb      	beq.n	800575c <__swbuf_r+0x28>
 80057c4:	f04f 37ff 	mov.w	r7, #4294967295
 80057c8:	e7ea      	b.n	80057a0 <__swbuf_r+0x6c>
 80057ca:	bf00      	nop
 80057cc:	080067c4 	.word	0x080067c4
 80057d0:	080067e4 	.word	0x080067e4
 80057d4:	080067a4 	.word	0x080067a4

080057d8 <__swsetup_r>:
 80057d8:	4b32      	ldr	r3, [pc, #200]	; (80058a4 <__swsetup_r+0xcc>)
 80057da:	b570      	push	{r4, r5, r6, lr}
 80057dc:	681d      	ldr	r5, [r3, #0]
 80057de:	4606      	mov	r6, r0
 80057e0:	460c      	mov	r4, r1
 80057e2:	b125      	cbz	r5, 80057ee <__swsetup_r+0x16>
 80057e4:	69ab      	ldr	r3, [r5, #24]
 80057e6:	b913      	cbnz	r3, 80057ee <__swsetup_r+0x16>
 80057e8:	4628      	mov	r0, r5
 80057ea:	f000 f97d 	bl	8005ae8 <__sinit>
 80057ee:	4b2e      	ldr	r3, [pc, #184]	; (80058a8 <__swsetup_r+0xd0>)
 80057f0:	429c      	cmp	r4, r3
 80057f2:	d10f      	bne.n	8005814 <__swsetup_r+0x3c>
 80057f4:	686c      	ldr	r4, [r5, #4]
 80057f6:	89a3      	ldrh	r3, [r4, #12]
 80057f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057fc:	0719      	lsls	r1, r3, #28
 80057fe:	d42c      	bmi.n	800585a <__swsetup_r+0x82>
 8005800:	06dd      	lsls	r5, r3, #27
 8005802:	d411      	bmi.n	8005828 <__swsetup_r+0x50>
 8005804:	2309      	movs	r3, #9
 8005806:	6033      	str	r3, [r6, #0]
 8005808:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800580c:	81a3      	strh	r3, [r4, #12]
 800580e:	f04f 30ff 	mov.w	r0, #4294967295
 8005812:	e03e      	b.n	8005892 <__swsetup_r+0xba>
 8005814:	4b25      	ldr	r3, [pc, #148]	; (80058ac <__swsetup_r+0xd4>)
 8005816:	429c      	cmp	r4, r3
 8005818:	d101      	bne.n	800581e <__swsetup_r+0x46>
 800581a:	68ac      	ldr	r4, [r5, #8]
 800581c:	e7eb      	b.n	80057f6 <__swsetup_r+0x1e>
 800581e:	4b24      	ldr	r3, [pc, #144]	; (80058b0 <__swsetup_r+0xd8>)
 8005820:	429c      	cmp	r4, r3
 8005822:	bf08      	it	eq
 8005824:	68ec      	ldreq	r4, [r5, #12]
 8005826:	e7e6      	b.n	80057f6 <__swsetup_r+0x1e>
 8005828:	0758      	lsls	r0, r3, #29
 800582a:	d512      	bpl.n	8005852 <__swsetup_r+0x7a>
 800582c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800582e:	b141      	cbz	r1, 8005842 <__swsetup_r+0x6a>
 8005830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005834:	4299      	cmp	r1, r3
 8005836:	d002      	beq.n	800583e <__swsetup_r+0x66>
 8005838:	4630      	mov	r0, r6
 800583a:	f000 fa5b 	bl	8005cf4 <_free_r>
 800583e:	2300      	movs	r3, #0
 8005840:	6363      	str	r3, [r4, #52]	; 0x34
 8005842:	89a3      	ldrh	r3, [r4, #12]
 8005844:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005848:	81a3      	strh	r3, [r4, #12]
 800584a:	2300      	movs	r3, #0
 800584c:	6063      	str	r3, [r4, #4]
 800584e:	6923      	ldr	r3, [r4, #16]
 8005850:	6023      	str	r3, [r4, #0]
 8005852:	89a3      	ldrh	r3, [r4, #12]
 8005854:	f043 0308 	orr.w	r3, r3, #8
 8005858:	81a3      	strh	r3, [r4, #12]
 800585a:	6923      	ldr	r3, [r4, #16]
 800585c:	b94b      	cbnz	r3, 8005872 <__swsetup_r+0x9a>
 800585e:	89a3      	ldrh	r3, [r4, #12]
 8005860:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005868:	d003      	beq.n	8005872 <__swsetup_r+0x9a>
 800586a:	4621      	mov	r1, r4
 800586c:	4630      	mov	r0, r6
 800586e:	f000 fa01 	bl	8005c74 <__smakebuf_r>
 8005872:	89a0      	ldrh	r0, [r4, #12]
 8005874:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005878:	f010 0301 	ands.w	r3, r0, #1
 800587c:	d00a      	beq.n	8005894 <__swsetup_r+0xbc>
 800587e:	2300      	movs	r3, #0
 8005880:	60a3      	str	r3, [r4, #8]
 8005882:	6963      	ldr	r3, [r4, #20]
 8005884:	425b      	negs	r3, r3
 8005886:	61a3      	str	r3, [r4, #24]
 8005888:	6923      	ldr	r3, [r4, #16]
 800588a:	b943      	cbnz	r3, 800589e <__swsetup_r+0xc6>
 800588c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005890:	d1ba      	bne.n	8005808 <__swsetup_r+0x30>
 8005892:	bd70      	pop	{r4, r5, r6, pc}
 8005894:	0781      	lsls	r1, r0, #30
 8005896:	bf58      	it	pl
 8005898:	6963      	ldrpl	r3, [r4, #20]
 800589a:	60a3      	str	r3, [r4, #8]
 800589c:	e7f4      	b.n	8005888 <__swsetup_r+0xb0>
 800589e:	2000      	movs	r0, #0
 80058a0:	e7f7      	b.n	8005892 <__swsetup_r+0xba>
 80058a2:	bf00      	nop
 80058a4:	20000034 	.word	0x20000034
 80058a8:	080067c4 	.word	0x080067c4
 80058ac:	080067e4 	.word	0x080067e4
 80058b0:	080067a4 	.word	0x080067a4

080058b4 <__sflush_r>:
 80058b4:	898a      	ldrh	r2, [r1, #12]
 80058b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ba:	4605      	mov	r5, r0
 80058bc:	0710      	lsls	r0, r2, #28
 80058be:	460c      	mov	r4, r1
 80058c0:	d458      	bmi.n	8005974 <__sflush_r+0xc0>
 80058c2:	684b      	ldr	r3, [r1, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	dc05      	bgt.n	80058d4 <__sflush_r+0x20>
 80058c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	dc02      	bgt.n	80058d4 <__sflush_r+0x20>
 80058ce:	2000      	movs	r0, #0
 80058d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058d6:	2e00      	cmp	r6, #0
 80058d8:	d0f9      	beq.n	80058ce <__sflush_r+0x1a>
 80058da:	2300      	movs	r3, #0
 80058dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058e0:	682f      	ldr	r7, [r5, #0]
 80058e2:	602b      	str	r3, [r5, #0]
 80058e4:	d032      	beq.n	800594c <__sflush_r+0x98>
 80058e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058e8:	89a3      	ldrh	r3, [r4, #12]
 80058ea:	075a      	lsls	r2, r3, #29
 80058ec:	d505      	bpl.n	80058fa <__sflush_r+0x46>
 80058ee:	6863      	ldr	r3, [r4, #4]
 80058f0:	1ac0      	subs	r0, r0, r3
 80058f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058f4:	b10b      	cbz	r3, 80058fa <__sflush_r+0x46>
 80058f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058f8:	1ac0      	subs	r0, r0, r3
 80058fa:	2300      	movs	r3, #0
 80058fc:	4602      	mov	r2, r0
 80058fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005900:	6a21      	ldr	r1, [r4, #32]
 8005902:	4628      	mov	r0, r5
 8005904:	47b0      	blx	r6
 8005906:	1c43      	adds	r3, r0, #1
 8005908:	89a3      	ldrh	r3, [r4, #12]
 800590a:	d106      	bne.n	800591a <__sflush_r+0x66>
 800590c:	6829      	ldr	r1, [r5, #0]
 800590e:	291d      	cmp	r1, #29
 8005910:	d82c      	bhi.n	800596c <__sflush_r+0xb8>
 8005912:	4a2a      	ldr	r2, [pc, #168]	; (80059bc <__sflush_r+0x108>)
 8005914:	40ca      	lsrs	r2, r1
 8005916:	07d6      	lsls	r6, r2, #31
 8005918:	d528      	bpl.n	800596c <__sflush_r+0xb8>
 800591a:	2200      	movs	r2, #0
 800591c:	6062      	str	r2, [r4, #4]
 800591e:	04d9      	lsls	r1, r3, #19
 8005920:	6922      	ldr	r2, [r4, #16]
 8005922:	6022      	str	r2, [r4, #0]
 8005924:	d504      	bpl.n	8005930 <__sflush_r+0x7c>
 8005926:	1c42      	adds	r2, r0, #1
 8005928:	d101      	bne.n	800592e <__sflush_r+0x7a>
 800592a:	682b      	ldr	r3, [r5, #0]
 800592c:	b903      	cbnz	r3, 8005930 <__sflush_r+0x7c>
 800592e:	6560      	str	r0, [r4, #84]	; 0x54
 8005930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005932:	602f      	str	r7, [r5, #0]
 8005934:	2900      	cmp	r1, #0
 8005936:	d0ca      	beq.n	80058ce <__sflush_r+0x1a>
 8005938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800593c:	4299      	cmp	r1, r3
 800593e:	d002      	beq.n	8005946 <__sflush_r+0x92>
 8005940:	4628      	mov	r0, r5
 8005942:	f000 f9d7 	bl	8005cf4 <_free_r>
 8005946:	2000      	movs	r0, #0
 8005948:	6360      	str	r0, [r4, #52]	; 0x34
 800594a:	e7c1      	b.n	80058d0 <__sflush_r+0x1c>
 800594c:	6a21      	ldr	r1, [r4, #32]
 800594e:	2301      	movs	r3, #1
 8005950:	4628      	mov	r0, r5
 8005952:	47b0      	blx	r6
 8005954:	1c41      	adds	r1, r0, #1
 8005956:	d1c7      	bne.n	80058e8 <__sflush_r+0x34>
 8005958:	682b      	ldr	r3, [r5, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0c4      	beq.n	80058e8 <__sflush_r+0x34>
 800595e:	2b1d      	cmp	r3, #29
 8005960:	d001      	beq.n	8005966 <__sflush_r+0xb2>
 8005962:	2b16      	cmp	r3, #22
 8005964:	d101      	bne.n	800596a <__sflush_r+0xb6>
 8005966:	602f      	str	r7, [r5, #0]
 8005968:	e7b1      	b.n	80058ce <__sflush_r+0x1a>
 800596a:	89a3      	ldrh	r3, [r4, #12]
 800596c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005970:	81a3      	strh	r3, [r4, #12]
 8005972:	e7ad      	b.n	80058d0 <__sflush_r+0x1c>
 8005974:	690f      	ldr	r7, [r1, #16]
 8005976:	2f00      	cmp	r7, #0
 8005978:	d0a9      	beq.n	80058ce <__sflush_r+0x1a>
 800597a:	0793      	lsls	r3, r2, #30
 800597c:	680e      	ldr	r6, [r1, #0]
 800597e:	bf08      	it	eq
 8005980:	694b      	ldreq	r3, [r1, #20]
 8005982:	600f      	str	r7, [r1, #0]
 8005984:	bf18      	it	ne
 8005986:	2300      	movne	r3, #0
 8005988:	eba6 0807 	sub.w	r8, r6, r7
 800598c:	608b      	str	r3, [r1, #8]
 800598e:	f1b8 0f00 	cmp.w	r8, #0
 8005992:	dd9c      	ble.n	80058ce <__sflush_r+0x1a>
 8005994:	6a21      	ldr	r1, [r4, #32]
 8005996:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005998:	4643      	mov	r3, r8
 800599a:	463a      	mov	r2, r7
 800599c:	4628      	mov	r0, r5
 800599e:	47b0      	blx	r6
 80059a0:	2800      	cmp	r0, #0
 80059a2:	dc06      	bgt.n	80059b2 <__sflush_r+0xfe>
 80059a4:	89a3      	ldrh	r3, [r4, #12]
 80059a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059aa:	81a3      	strh	r3, [r4, #12]
 80059ac:	f04f 30ff 	mov.w	r0, #4294967295
 80059b0:	e78e      	b.n	80058d0 <__sflush_r+0x1c>
 80059b2:	4407      	add	r7, r0
 80059b4:	eba8 0800 	sub.w	r8, r8, r0
 80059b8:	e7e9      	b.n	800598e <__sflush_r+0xda>
 80059ba:	bf00      	nop
 80059bc:	20400001 	.word	0x20400001

080059c0 <_fflush_r>:
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	690b      	ldr	r3, [r1, #16]
 80059c4:	4605      	mov	r5, r0
 80059c6:	460c      	mov	r4, r1
 80059c8:	b913      	cbnz	r3, 80059d0 <_fflush_r+0x10>
 80059ca:	2500      	movs	r5, #0
 80059cc:	4628      	mov	r0, r5
 80059ce:	bd38      	pop	{r3, r4, r5, pc}
 80059d0:	b118      	cbz	r0, 80059da <_fflush_r+0x1a>
 80059d2:	6983      	ldr	r3, [r0, #24]
 80059d4:	b90b      	cbnz	r3, 80059da <_fflush_r+0x1a>
 80059d6:	f000 f887 	bl	8005ae8 <__sinit>
 80059da:	4b14      	ldr	r3, [pc, #80]	; (8005a2c <_fflush_r+0x6c>)
 80059dc:	429c      	cmp	r4, r3
 80059de:	d11b      	bne.n	8005a18 <_fflush_r+0x58>
 80059e0:	686c      	ldr	r4, [r5, #4]
 80059e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0ef      	beq.n	80059ca <_fflush_r+0xa>
 80059ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059ec:	07d0      	lsls	r0, r2, #31
 80059ee:	d404      	bmi.n	80059fa <_fflush_r+0x3a>
 80059f0:	0599      	lsls	r1, r3, #22
 80059f2:	d402      	bmi.n	80059fa <_fflush_r+0x3a>
 80059f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059f6:	f000 f915 	bl	8005c24 <__retarget_lock_acquire_recursive>
 80059fa:	4628      	mov	r0, r5
 80059fc:	4621      	mov	r1, r4
 80059fe:	f7ff ff59 	bl	80058b4 <__sflush_r>
 8005a02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a04:	07da      	lsls	r2, r3, #31
 8005a06:	4605      	mov	r5, r0
 8005a08:	d4e0      	bmi.n	80059cc <_fflush_r+0xc>
 8005a0a:	89a3      	ldrh	r3, [r4, #12]
 8005a0c:	059b      	lsls	r3, r3, #22
 8005a0e:	d4dd      	bmi.n	80059cc <_fflush_r+0xc>
 8005a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a12:	f000 f908 	bl	8005c26 <__retarget_lock_release_recursive>
 8005a16:	e7d9      	b.n	80059cc <_fflush_r+0xc>
 8005a18:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <_fflush_r+0x70>)
 8005a1a:	429c      	cmp	r4, r3
 8005a1c:	d101      	bne.n	8005a22 <_fflush_r+0x62>
 8005a1e:	68ac      	ldr	r4, [r5, #8]
 8005a20:	e7df      	b.n	80059e2 <_fflush_r+0x22>
 8005a22:	4b04      	ldr	r3, [pc, #16]	; (8005a34 <_fflush_r+0x74>)
 8005a24:	429c      	cmp	r4, r3
 8005a26:	bf08      	it	eq
 8005a28:	68ec      	ldreq	r4, [r5, #12]
 8005a2a:	e7da      	b.n	80059e2 <_fflush_r+0x22>
 8005a2c:	080067c4 	.word	0x080067c4
 8005a30:	080067e4 	.word	0x080067e4
 8005a34:	080067a4 	.word	0x080067a4

08005a38 <std>:
 8005a38:	2300      	movs	r3, #0
 8005a3a:	b510      	push	{r4, lr}
 8005a3c:	4604      	mov	r4, r0
 8005a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8005a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a46:	6083      	str	r3, [r0, #8]
 8005a48:	8181      	strh	r1, [r0, #12]
 8005a4a:	6643      	str	r3, [r0, #100]	; 0x64
 8005a4c:	81c2      	strh	r2, [r0, #14]
 8005a4e:	6183      	str	r3, [r0, #24]
 8005a50:	4619      	mov	r1, r3
 8005a52:	2208      	movs	r2, #8
 8005a54:	305c      	adds	r0, #92	; 0x5c
 8005a56:	f7ff fdd7 	bl	8005608 <memset>
 8005a5a:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <std+0x38>)
 8005a5c:	6263      	str	r3, [r4, #36]	; 0x24
 8005a5e:	4b05      	ldr	r3, [pc, #20]	; (8005a74 <std+0x3c>)
 8005a60:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a62:	4b05      	ldr	r3, [pc, #20]	; (8005a78 <std+0x40>)
 8005a64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a66:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <std+0x44>)
 8005a68:	6224      	str	r4, [r4, #32]
 8005a6a:	6323      	str	r3, [r4, #48]	; 0x30
 8005a6c:	bd10      	pop	{r4, pc}
 8005a6e:	bf00      	nop
 8005a70:	080064b1 	.word	0x080064b1
 8005a74:	080064d3 	.word	0x080064d3
 8005a78:	0800650b 	.word	0x0800650b
 8005a7c:	0800652f 	.word	0x0800652f

08005a80 <_cleanup_r>:
 8005a80:	4901      	ldr	r1, [pc, #4]	; (8005a88 <_cleanup_r+0x8>)
 8005a82:	f000 b8af 	b.w	8005be4 <_fwalk_reent>
 8005a86:	bf00      	nop
 8005a88:	080059c1 	.word	0x080059c1

08005a8c <__sfmoreglue>:
 8005a8c:	b570      	push	{r4, r5, r6, lr}
 8005a8e:	2268      	movs	r2, #104	; 0x68
 8005a90:	1e4d      	subs	r5, r1, #1
 8005a92:	4355      	muls	r5, r2
 8005a94:	460e      	mov	r6, r1
 8005a96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a9a:	f000 f997 	bl	8005dcc <_malloc_r>
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	b140      	cbz	r0, 8005ab4 <__sfmoreglue+0x28>
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	e9c0 1600 	strd	r1, r6, [r0]
 8005aa8:	300c      	adds	r0, #12
 8005aaa:	60a0      	str	r0, [r4, #8]
 8005aac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ab0:	f7ff fdaa 	bl	8005608 <memset>
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	bd70      	pop	{r4, r5, r6, pc}

08005ab8 <__sfp_lock_acquire>:
 8005ab8:	4801      	ldr	r0, [pc, #4]	; (8005ac0 <__sfp_lock_acquire+0x8>)
 8005aba:	f000 b8b3 	b.w	8005c24 <__retarget_lock_acquire_recursive>
 8005abe:	bf00      	nop
 8005ac0:	20000675 	.word	0x20000675

08005ac4 <__sfp_lock_release>:
 8005ac4:	4801      	ldr	r0, [pc, #4]	; (8005acc <__sfp_lock_release+0x8>)
 8005ac6:	f000 b8ae 	b.w	8005c26 <__retarget_lock_release_recursive>
 8005aca:	bf00      	nop
 8005acc:	20000675 	.word	0x20000675

08005ad0 <__sinit_lock_acquire>:
 8005ad0:	4801      	ldr	r0, [pc, #4]	; (8005ad8 <__sinit_lock_acquire+0x8>)
 8005ad2:	f000 b8a7 	b.w	8005c24 <__retarget_lock_acquire_recursive>
 8005ad6:	bf00      	nop
 8005ad8:	20000676 	.word	0x20000676

08005adc <__sinit_lock_release>:
 8005adc:	4801      	ldr	r0, [pc, #4]	; (8005ae4 <__sinit_lock_release+0x8>)
 8005ade:	f000 b8a2 	b.w	8005c26 <__retarget_lock_release_recursive>
 8005ae2:	bf00      	nop
 8005ae4:	20000676 	.word	0x20000676

08005ae8 <__sinit>:
 8005ae8:	b510      	push	{r4, lr}
 8005aea:	4604      	mov	r4, r0
 8005aec:	f7ff fff0 	bl	8005ad0 <__sinit_lock_acquire>
 8005af0:	69a3      	ldr	r3, [r4, #24]
 8005af2:	b11b      	cbz	r3, 8005afc <__sinit+0x14>
 8005af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005af8:	f7ff bff0 	b.w	8005adc <__sinit_lock_release>
 8005afc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b00:	6523      	str	r3, [r4, #80]	; 0x50
 8005b02:	4b13      	ldr	r3, [pc, #76]	; (8005b50 <__sinit+0x68>)
 8005b04:	4a13      	ldr	r2, [pc, #76]	; (8005b54 <__sinit+0x6c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	62a2      	str	r2, [r4, #40]	; 0x28
 8005b0a:	42a3      	cmp	r3, r4
 8005b0c:	bf04      	itt	eq
 8005b0e:	2301      	moveq	r3, #1
 8005b10:	61a3      	streq	r3, [r4, #24]
 8005b12:	4620      	mov	r0, r4
 8005b14:	f000 f820 	bl	8005b58 <__sfp>
 8005b18:	6060      	str	r0, [r4, #4]
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	f000 f81c 	bl	8005b58 <__sfp>
 8005b20:	60a0      	str	r0, [r4, #8]
 8005b22:	4620      	mov	r0, r4
 8005b24:	f000 f818 	bl	8005b58 <__sfp>
 8005b28:	2200      	movs	r2, #0
 8005b2a:	60e0      	str	r0, [r4, #12]
 8005b2c:	2104      	movs	r1, #4
 8005b2e:	6860      	ldr	r0, [r4, #4]
 8005b30:	f7ff ff82 	bl	8005a38 <std>
 8005b34:	68a0      	ldr	r0, [r4, #8]
 8005b36:	2201      	movs	r2, #1
 8005b38:	2109      	movs	r1, #9
 8005b3a:	f7ff ff7d 	bl	8005a38 <std>
 8005b3e:	68e0      	ldr	r0, [r4, #12]
 8005b40:	2202      	movs	r2, #2
 8005b42:	2112      	movs	r1, #18
 8005b44:	f7ff ff78 	bl	8005a38 <std>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	61a3      	str	r3, [r4, #24]
 8005b4c:	e7d2      	b.n	8005af4 <__sinit+0xc>
 8005b4e:	bf00      	nop
 8005b50:	080067a0 	.word	0x080067a0
 8005b54:	08005a81 	.word	0x08005a81

08005b58 <__sfp>:
 8005b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5a:	4607      	mov	r7, r0
 8005b5c:	f7ff ffac 	bl	8005ab8 <__sfp_lock_acquire>
 8005b60:	4b1e      	ldr	r3, [pc, #120]	; (8005bdc <__sfp+0x84>)
 8005b62:	681e      	ldr	r6, [r3, #0]
 8005b64:	69b3      	ldr	r3, [r6, #24]
 8005b66:	b913      	cbnz	r3, 8005b6e <__sfp+0x16>
 8005b68:	4630      	mov	r0, r6
 8005b6a:	f7ff ffbd 	bl	8005ae8 <__sinit>
 8005b6e:	3648      	adds	r6, #72	; 0x48
 8005b70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	d503      	bpl.n	8005b80 <__sfp+0x28>
 8005b78:	6833      	ldr	r3, [r6, #0]
 8005b7a:	b30b      	cbz	r3, 8005bc0 <__sfp+0x68>
 8005b7c:	6836      	ldr	r6, [r6, #0]
 8005b7e:	e7f7      	b.n	8005b70 <__sfp+0x18>
 8005b80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b84:	b9d5      	cbnz	r5, 8005bbc <__sfp+0x64>
 8005b86:	4b16      	ldr	r3, [pc, #88]	; (8005be0 <__sfp+0x88>)
 8005b88:	60e3      	str	r3, [r4, #12]
 8005b8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b8e:	6665      	str	r5, [r4, #100]	; 0x64
 8005b90:	f000 f847 	bl	8005c22 <__retarget_lock_init_recursive>
 8005b94:	f7ff ff96 	bl	8005ac4 <__sfp_lock_release>
 8005b98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ba0:	6025      	str	r5, [r4, #0]
 8005ba2:	61a5      	str	r5, [r4, #24]
 8005ba4:	2208      	movs	r2, #8
 8005ba6:	4629      	mov	r1, r5
 8005ba8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005bac:	f7ff fd2c 	bl	8005608 <memset>
 8005bb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005bb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005bb8:	4620      	mov	r0, r4
 8005bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bbc:	3468      	adds	r4, #104	; 0x68
 8005bbe:	e7d9      	b.n	8005b74 <__sfp+0x1c>
 8005bc0:	2104      	movs	r1, #4
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	f7ff ff62 	bl	8005a8c <__sfmoreglue>
 8005bc8:	4604      	mov	r4, r0
 8005bca:	6030      	str	r0, [r6, #0]
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d1d5      	bne.n	8005b7c <__sfp+0x24>
 8005bd0:	f7ff ff78 	bl	8005ac4 <__sfp_lock_release>
 8005bd4:	230c      	movs	r3, #12
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	e7ee      	b.n	8005bb8 <__sfp+0x60>
 8005bda:	bf00      	nop
 8005bdc:	080067a0 	.word	0x080067a0
 8005be0:	ffff0001 	.word	0xffff0001

08005be4 <_fwalk_reent>:
 8005be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005be8:	4606      	mov	r6, r0
 8005bea:	4688      	mov	r8, r1
 8005bec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005bf0:	2700      	movs	r7, #0
 8005bf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bf6:	f1b9 0901 	subs.w	r9, r9, #1
 8005bfa:	d505      	bpl.n	8005c08 <_fwalk_reent+0x24>
 8005bfc:	6824      	ldr	r4, [r4, #0]
 8005bfe:	2c00      	cmp	r4, #0
 8005c00:	d1f7      	bne.n	8005bf2 <_fwalk_reent+0xe>
 8005c02:	4638      	mov	r0, r7
 8005c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c08:	89ab      	ldrh	r3, [r5, #12]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d907      	bls.n	8005c1e <_fwalk_reent+0x3a>
 8005c0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c12:	3301      	adds	r3, #1
 8005c14:	d003      	beq.n	8005c1e <_fwalk_reent+0x3a>
 8005c16:	4629      	mov	r1, r5
 8005c18:	4630      	mov	r0, r6
 8005c1a:	47c0      	blx	r8
 8005c1c:	4307      	orrs	r7, r0
 8005c1e:	3568      	adds	r5, #104	; 0x68
 8005c20:	e7e9      	b.n	8005bf6 <_fwalk_reent+0x12>

08005c22 <__retarget_lock_init_recursive>:
 8005c22:	4770      	bx	lr

08005c24 <__retarget_lock_acquire_recursive>:
 8005c24:	4770      	bx	lr

08005c26 <__retarget_lock_release_recursive>:
 8005c26:	4770      	bx	lr

08005c28 <__swhatbuf_r>:
 8005c28:	b570      	push	{r4, r5, r6, lr}
 8005c2a:	460e      	mov	r6, r1
 8005c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c30:	2900      	cmp	r1, #0
 8005c32:	b096      	sub	sp, #88	; 0x58
 8005c34:	4614      	mov	r4, r2
 8005c36:	461d      	mov	r5, r3
 8005c38:	da08      	bge.n	8005c4c <__swhatbuf_r+0x24>
 8005c3a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	602a      	str	r2, [r5, #0]
 8005c42:	061a      	lsls	r2, r3, #24
 8005c44:	d410      	bmi.n	8005c68 <__swhatbuf_r+0x40>
 8005c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c4a:	e00e      	b.n	8005c6a <__swhatbuf_r+0x42>
 8005c4c:	466a      	mov	r2, sp
 8005c4e:	f000 fc95 	bl	800657c <_fstat_r>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	dbf1      	blt.n	8005c3a <__swhatbuf_r+0x12>
 8005c56:	9a01      	ldr	r2, [sp, #4]
 8005c58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c60:	425a      	negs	r2, r3
 8005c62:	415a      	adcs	r2, r3
 8005c64:	602a      	str	r2, [r5, #0]
 8005c66:	e7ee      	b.n	8005c46 <__swhatbuf_r+0x1e>
 8005c68:	2340      	movs	r3, #64	; 0x40
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	b016      	add	sp, #88	; 0x58
 8005c70:	bd70      	pop	{r4, r5, r6, pc}
	...

08005c74 <__smakebuf_r>:
 8005c74:	898b      	ldrh	r3, [r1, #12]
 8005c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c78:	079d      	lsls	r5, r3, #30
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	460c      	mov	r4, r1
 8005c7e:	d507      	bpl.n	8005c90 <__smakebuf_r+0x1c>
 8005c80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	6123      	str	r3, [r4, #16]
 8005c88:	2301      	movs	r3, #1
 8005c8a:	6163      	str	r3, [r4, #20]
 8005c8c:	b002      	add	sp, #8
 8005c8e:	bd70      	pop	{r4, r5, r6, pc}
 8005c90:	ab01      	add	r3, sp, #4
 8005c92:	466a      	mov	r2, sp
 8005c94:	f7ff ffc8 	bl	8005c28 <__swhatbuf_r>
 8005c98:	9900      	ldr	r1, [sp, #0]
 8005c9a:	4605      	mov	r5, r0
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	f000 f895 	bl	8005dcc <_malloc_r>
 8005ca2:	b948      	cbnz	r0, 8005cb8 <__smakebuf_r+0x44>
 8005ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ca8:	059a      	lsls	r2, r3, #22
 8005caa:	d4ef      	bmi.n	8005c8c <__smakebuf_r+0x18>
 8005cac:	f023 0303 	bic.w	r3, r3, #3
 8005cb0:	f043 0302 	orr.w	r3, r3, #2
 8005cb4:	81a3      	strh	r3, [r4, #12]
 8005cb6:	e7e3      	b.n	8005c80 <__smakebuf_r+0xc>
 8005cb8:	4b0d      	ldr	r3, [pc, #52]	; (8005cf0 <__smakebuf_r+0x7c>)
 8005cba:	62b3      	str	r3, [r6, #40]	; 0x28
 8005cbc:	89a3      	ldrh	r3, [r4, #12]
 8005cbe:	6020      	str	r0, [r4, #0]
 8005cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc4:	81a3      	strh	r3, [r4, #12]
 8005cc6:	9b00      	ldr	r3, [sp, #0]
 8005cc8:	6163      	str	r3, [r4, #20]
 8005cca:	9b01      	ldr	r3, [sp, #4]
 8005ccc:	6120      	str	r0, [r4, #16]
 8005cce:	b15b      	cbz	r3, 8005ce8 <__smakebuf_r+0x74>
 8005cd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cd4:	4630      	mov	r0, r6
 8005cd6:	f000 fc63 	bl	80065a0 <_isatty_r>
 8005cda:	b128      	cbz	r0, 8005ce8 <__smakebuf_r+0x74>
 8005cdc:	89a3      	ldrh	r3, [r4, #12]
 8005cde:	f023 0303 	bic.w	r3, r3, #3
 8005ce2:	f043 0301 	orr.w	r3, r3, #1
 8005ce6:	81a3      	strh	r3, [r4, #12]
 8005ce8:	89a0      	ldrh	r0, [r4, #12]
 8005cea:	4305      	orrs	r5, r0
 8005cec:	81a5      	strh	r5, [r4, #12]
 8005cee:	e7cd      	b.n	8005c8c <__smakebuf_r+0x18>
 8005cf0:	08005a81 	.word	0x08005a81

08005cf4 <_free_r>:
 8005cf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cf6:	2900      	cmp	r1, #0
 8005cf8:	d044      	beq.n	8005d84 <_free_r+0x90>
 8005cfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cfe:	9001      	str	r0, [sp, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f1a1 0404 	sub.w	r4, r1, #4
 8005d06:	bfb8      	it	lt
 8005d08:	18e4      	addlt	r4, r4, r3
 8005d0a:	f000 fc6b 	bl	80065e4 <__malloc_lock>
 8005d0e:	4a1e      	ldr	r2, [pc, #120]	; (8005d88 <_free_r+0x94>)
 8005d10:	9801      	ldr	r0, [sp, #4]
 8005d12:	6813      	ldr	r3, [r2, #0]
 8005d14:	b933      	cbnz	r3, 8005d24 <_free_r+0x30>
 8005d16:	6063      	str	r3, [r4, #4]
 8005d18:	6014      	str	r4, [r2, #0]
 8005d1a:	b003      	add	sp, #12
 8005d1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d20:	f000 bc66 	b.w	80065f0 <__malloc_unlock>
 8005d24:	42a3      	cmp	r3, r4
 8005d26:	d908      	bls.n	8005d3a <_free_r+0x46>
 8005d28:	6825      	ldr	r5, [r4, #0]
 8005d2a:	1961      	adds	r1, r4, r5
 8005d2c:	428b      	cmp	r3, r1
 8005d2e:	bf01      	itttt	eq
 8005d30:	6819      	ldreq	r1, [r3, #0]
 8005d32:	685b      	ldreq	r3, [r3, #4]
 8005d34:	1949      	addeq	r1, r1, r5
 8005d36:	6021      	streq	r1, [r4, #0]
 8005d38:	e7ed      	b.n	8005d16 <_free_r+0x22>
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	b10b      	cbz	r3, 8005d44 <_free_r+0x50>
 8005d40:	42a3      	cmp	r3, r4
 8005d42:	d9fa      	bls.n	8005d3a <_free_r+0x46>
 8005d44:	6811      	ldr	r1, [r2, #0]
 8005d46:	1855      	adds	r5, r2, r1
 8005d48:	42a5      	cmp	r5, r4
 8005d4a:	d10b      	bne.n	8005d64 <_free_r+0x70>
 8005d4c:	6824      	ldr	r4, [r4, #0]
 8005d4e:	4421      	add	r1, r4
 8005d50:	1854      	adds	r4, r2, r1
 8005d52:	42a3      	cmp	r3, r4
 8005d54:	6011      	str	r1, [r2, #0]
 8005d56:	d1e0      	bne.n	8005d1a <_free_r+0x26>
 8005d58:	681c      	ldr	r4, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	6053      	str	r3, [r2, #4]
 8005d5e:	4421      	add	r1, r4
 8005d60:	6011      	str	r1, [r2, #0]
 8005d62:	e7da      	b.n	8005d1a <_free_r+0x26>
 8005d64:	d902      	bls.n	8005d6c <_free_r+0x78>
 8005d66:	230c      	movs	r3, #12
 8005d68:	6003      	str	r3, [r0, #0]
 8005d6a:	e7d6      	b.n	8005d1a <_free_r+0x26>
 8005d6c:	6825      	ldr	r5, [r4, #0]
 8005d6e:	1961      	adds	r1, r4, r5
 8005d70:	428b      	cmp	r3, r1
 8005d72:	bf04      	itt	eq
 8005d74:	6819      	ldreq	r1, [r3, #0]
 8005d76:	685b      	ldreq	r3, [r3, #4]
 8005d78:	6063      	str	r3, [r4, #4]
 8005d7a:	bf04      	itt	eq
 8005d7c:	1949      	addeq	r1, r1, r5
 8005d7e:	6021      	streq	r1, [r4, #0]
 8005d80:	6054      	str	r4, [r2, #4]
 8005d82:	e7ca      	b.n	8005d1a <_free_r+0x26>
 8005d84:	b003      	add	sp, #12
 8005d86:	bd30      	pop	{r4, r5, pc}
 8005d88:	20000678 	.word	0x20000678

08005d8c <sbrk_aligned>:
 8005d8c:	b570      	push	{r4, r5, r6, lr}
 8005d8e:	4e0e      	ldr	r6, [pc, #56]	; (8005dc8 <sbrk_aligned+0x3c>)
 8005d90:	460c      	mov	r4, r1
 8005d92:	6831      	ldr	r1, [r6, #0]
 8005d94:	4605      	mov	r5, r0
 8005d96:	b911      	cbnz	r1, 8005d9e <sbrk_aligned+0x12>
 8005d98:	f000 fb7a 	bl	8006490 <_sbrk_r>
 8005d9c:	6030      	str	r0, [r6, #0]
 8005d9e:	4621      	mov	r1, r4
 8005da0:	4628      	mov	r0, r5
 8005da2:	f000 fb75 	bl	8006490 <_sbrk_r>
 8005da6:	1c43      	adds	r3, r0, #1
 8005da8:	d00a      	beq.n	8005dc0 <sbrk_aligned+0x34>
 8005daa:	1cc4      	adds	r4, r0, #3
 8005dac:	f024 0403 	bic.w	r4, r4, #3
 8005db0:	42a0      	cmp	r0, r4
 8005db2:	d007      	beq.n	8005dc4 <sbrk_aligned+0x38>
 8005db4:	1a21      	subs	r1, r4, r0
 8005db6:	4628      	mov	r0, r5
 8005db8:	f000 fb6a 	bl	8006490 <_sbrk_r>
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	d101      	bne.n	8005dc4 <sbrk_aligned+0x38>
 8005dc0:	f04f 34ff 	mov.w	r4, #4294967295
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	bd70      	pop	{r4, r5, r6, pc}
 8005dc8:	2000067c 	.word	0x2000067c

08005dcc <_malloc_r>:
 8005dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd0:	1ccd      	adds	r5, r1, #3
 8005dd2:	f025 0503 	bic.w	r5, r5, #3
 8005dd6:	3508      	adds	r5, #8
 8005dd8:	2d0c      	cmp	r5, #12
 8005dda:	bf38      	it	cc
 8005ddc:	250c      	movcc	r5, #12
 8005dde:	2d00      	cmp	r5, #0
 8005de0:	4607      	mov	r7, r0
 8005de2:	db01      	blt.n	8005de8 <_malloc_r+0x1c>
 8005de4:	42a9      	cmp	r1, r5
 8005de6:	d905      	bls.n	8005df4 <_malloc_r+0x28>
 8005de8:	230c      	movs	r3, #12
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	2600      	movs	r6, #0
 8005dee:	4630      	mov	r0, r6
 8005df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df4:	4e2e      	ldr	r6, [pc, #184]	; (8005eb0 <_malloc_r+0xe4>)
 8005df6:	f000 fbf5 	bl	80065e4 <__malloc_lock>
 8005dfa:	6833      	ldr	r3, [r6, #0]
 8005dfc:	461c      	mov	r4, r3
 8005dfe:	bb34      	cbnz	r4, 8005e4e <_malloc_r+0x82>
 8005e00:	4629      	mov	r1, r5
 8005e02:	4638      	mov	r0, r7
 8005e04:	f7ff ffc2 	bl	8005d8c <sbrk_aligned>
 8005e08:	1c43      	adds	r3, r0, #1
 8005e0a:	4604      	mov	r4, r0
 8005e0c:	d14d      	bne.n	8005eaa <_malloc_r+0xde>
 8005e0e:	6834      	ldr	r4, [r6, #0]
 8005e10:	4626      	mov	r6, r4
 8005e12:	2e00      	cmp	r6, #0
 8005e14:	d140      	bne.n	8005e98 <_malloc_r+0xcc>
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	4631      	mov	r1, r6
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	eb04 0803 	add.w	r8, r4, r3
 8005e20:	f000 fb36 	bl	8006490 <_sbrk_r>
 8005e24:	4580      	cmp	r8, r0
 8005e26:	d13a      	bne.n	8005e9e <_malloc_r+0xd2>
 8005e28:	6821      	ldr	r1, [r4, #0]
 8005e2a:	3503      	adds	r5, #3
 8005e2c:	1a6d      	subs	r5, r5, r1
 8005e2e:	f025 0503 	bic.w	r5, r5, #3
 8005e32:	3508      	adds	r5, #8
 8005e34:	2d0c      	cmp	r5, #12
 8005e36:	bf38      	it	cc
 8005e38:	250c      	movcc	r5, #12
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	4638      	mov	r0, r7
 8005e3e:	f7ff ffa5 	bl	8005d8c <sbrk_aligned>
 8005e42:	3001      	adds	r0, #1
 8005e44:	d02b      	beq.n	8005e9e <_malloc_r+0xd2>
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	442b      	add	r3, r5
 8005e4a:	6023      	str	r3, [r4, #0]
 8005e4c:	e00e      	b.n	8005e6c <_malloc_r+0xa0>
 8005e4e:	6822      	ldr	r2, [r4, #0]
 8005e50:	1b52      	subs	r2, r2, r5
 8005e52:	d41e      	bmi.n	8005e92 <_malloc_r+0xc6>
 8005e54:	2a0b      	cmp	r2, #11
 8005e56:	d916      	bls.n	8005e86 <_malloc_r+0xba>
 8005e58:	1961      	adds	r1, r4, r5
 8005e5a:	42a3      	cmp	r3, r4
 8005e5c:	6025      	str	r5, [r4, #0]
 8005e5e:	bf18      	it	ne
 8005e60:	6059      	strne	r1, [r3, #4]
 8005e62:	6863      	ldr	r3, [r4, #4]
 8005e64:	bf08      	it	eq
 8005e66:	6031      	streq	r1, [r6, #0]
 8005e68:	5162      	str	r2, [r4, r5]
 8005e6a:	604b      	str	r3, [r1, #4]
 8005e6c:	4638      	mov	r0, r7
 8005e6e:	f104 060b 	add.w	r6, r4, #11
 8005e72:	f000 fbbd 	bl	80065f0 <__malloc_unlock>
 8005e76:	f026 0607 	bic.w	r6, r6, #7
 8005e7a:	1d23      	adds	r3, r4, #4
 8005e7c:	1af2      	subs	r2, r6, r3
 8005e7e:	d0b6      	beq.n	8005dee <_malloc_r+0x22>
 8005e80:	1b9b      	subs	r3, r3, r6
 8005e82:	50a3      	str	r3, [r4, r2]
 8005e84:	e7b3      	b.n	8005dee <_malloc_r+0x22>
 8005e86:	6862      	ldr	r2, [r4, #4]
 8005e88:	42a3      	cmp	r3, r4
 8005e8a:	bf0c      	ite	eq
 8005e8c:	6032      	streq	r2, [r6, #0]
 8005e8e:	605a      	strne	r2, [r3, #4]
 8005e90:	e7ec      	b.n	8005e6c <_malloc_r+0xa0>
 8005e92:	4623      	mov	r3, r4
 8005e94:	6864      	ldr	r4, [r4, #4]
 8005e96:	e7b2      	b.n	8005dfe <_malloc_r+0x32>
 8005e98:	4634      	mov	r4, r6
 8005e9a:	6876      	ldr	r6, [r6, #4]
 8005e9c:	e7b9      	b.n	8005e12 <_malloc_r+0x46>
 8005e9e:	230c      	movs	r3, #12
 8005ea0:	603b      	str	r3, [r7, #0]
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	f000 fba4 	bl	80065f0 <__malloc_unlock>
 8005ea8:	e7a1      	b.n	8005dee <_malloc_r+0x22>
 8005eaa:	6025      	str	r5, [r4, #0]
 8005eac:	e7de      	b.n	8005e6c <_malloc_r+0xa0>
 8005eae:	bf00      	nop
 8005eb0:	20000678 	.word	0x20000678

08005eb4 <__sfputc_r>:
 8005eb4:	6893      	ldr	r3, [r2, #8]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	b410      	push	{r4}
 8005ebc:	6093      	str	r3, [r2, #8]
 8005ebe:	da08      	bge.n	8005ed2 <__sfputc_r+0x1e>
 8005ec0:	6994      	ldr	r4, [r2, #24]
 8005ec2:	42a3      	cmp	r3, r4
 8005ec4:	db01      	blt.n	8005eca <__sfputc_r+0x16>
 8005ec6:	290a      	cmp	r1, #10
 8005ec8:	d103      	bne.n	8005ed2 <__sfputc_r+0x1e>
 8005eca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ece:	f7ff bc31 	b.w	8005734 <__swbuf_r>
 8005ed2:	6813      	ldr	r3, [r2, #0]
 8005ed4:	1c58      	adds	r0, r3, #1
 8005ed6:	6010      	str	r0, [r2, #0]
 8005ed8:	7019      	strb	r1, [r3, #0]
 8005eda:	4608      	mov	r0, r1
 8005edc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <__sfputs_r>:
 8005ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee4:	4606      	mov	r6, r0
 8005ee6:	460f      	mov	r7, r1
 8005ee8:	4614      	mov	r4, r2
 8005eea:	18d5      	adds	r5, r2, r3
 8005eec:	42ac      	cmp	r4, r5
 8005eee:	d101      	bne.n	8005ef4 <__sfputs_r+0x12>
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	e007      	b.n	8005f04 <__sfputs_r+0x22>
 8005ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ef8:	463a      	mov	r2, r7
 8005efa:	4630      	mov	r0, r6
 8005efc:	f7ff ffda 	bl	8005eb4 <__sfputc_r>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d1f3      	bne.n	8005eec <__sfputs_r+0xa>
 8005f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f08 <_vfiprintf_r>:
 8005f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0c:	460d      	mov	r5, r1
 8005f0e:	b09d      	sub	sp, #116	; 0x74
 8005f10:	4614      	mov	r4, r2
 8005f12:	4698      	mov	r8, r3
 8005f14:	4606      	mov	r6, r0
 8005f16:	b118      	cbz	r0, 8005f20 <_vfiprintf_r+0x18>
 8005f18:	6983      	ldr	r3, [r0, #24]
 8005f1a:	b90b      	cbnz	r3, 8005f20 <_vfiprintf_r+0x18>
 8005f1c:	f7ff fde4 	bl	8005ae8 <__sinit>
 8005f20:	4b89      	ldr	r3, [pc, #548]	; (8006148 <_vfiprintf_r+0x240>)
 8005f22:	429d      	cmp	r5, r3
 8005f24:	d11b      	bne.n	8005f5e <_vfiprintf_r+0x56>
 8005f26:	6875      	ldr	r5, [r6, #4]
 8005f28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f2a:	07d9      	lsls	r1, r3, #31
 8005f2c:	d405      	bmi.n	8005f3a <_vfiprintf_r+0x32>
 8005f2e:	89ab      	ldrh	r3, [r5, #12]
 8005f30:	059a      	lsls	r2, r3, #22
 8005f32:	d402      	bmi.n	8005f3a <_vfiprintf_r+0x32>
 8005f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f36:	f7ff fe75 	bl	8005c24 <__retarget_lock_acquire_recursive>
 8005f3a:	89ab      	ldrh	r3, [r5, #12]
 8005f3c:	071b      	lsls	r3, r3, #28
 8005f3e:	d501      	bpl.n	8005f44 <_vfiprintf_r+0x3c>
 8005f40:	692b      	ldr	r3, [r5, #16]
 8005f42:	b9eb      	cbnz	r3, 8005f80 <_vfiprintf_r+0x78>
 8005f44:	4629      	mov	r1, r5
 8005f46:	4630      	mov	r0, r6
 8005f48:	f7ff fc46 	bl	80057d8 <__swsetup_r>
 8005f4c:	b1c0      	cbz	r0, 8005f80 <_vfiprintf_r+0x78>
 8005f4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f50:	07dc      	lsls	r4, r3, #31
 8005f52:	d50e      	bpl.n	8005f72 <_vfiprintf_r+0x6a>
 8005f54:	f04f 30ff 	mov.w	r0, #4294967295
 8005f58:	b01d      	add	sp, #116	; 0x74
 8005f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f5e:	4b7b      	ldr	r3, [pc, #492]	; (800614c <_vfiprintf_r+0x244>)
 8005f60:	429d      	cmp	r5, r3
 8005f62:	d101      	bne.n	8005f68 <_vfiprintf_r+0x60>
 8005f64:	68b5      	ldr	r5, [r6, #8]
 8005f66:	e7df      	b.n	8005f28 <_vfiprintf_r+0x20>
 8005f68:	4b79      	ldr	r3, [pc, #484]	; (8006150 <_vfiprintf_r+0x248>)
 8005f6a:	429d      	cmp	r5, r3
 8005f6c:	bf08      	it	eq
 8005f6e:	68f5      	ldreq	r5, [r6, #12]
 8005f70:	e7da      	b.n	8005f28 <_vfiprintf_r+0x20>
 8005f72:	89ab      	ldrh	r3, [r5, #12]
 8005f74:	0598      	lsls	r0, r3, #22
 8005f76:	d4ed      	bmi.n	8005f54 <_vfiprintf_r+0x4c>
 8005f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f7a:	f7ff fe54 	bl	8005c26 <__retarget_lock_release_recursive>
 8005f7e:	e7e9      	b.n	8005f54 <_vfiprintf_r+0x4c>
 8005f80:	2300      	movs	r3, #0
 8005f82:	9309      	str	r3, [sp, #36]	; 0x24
 8005f84:	2320      	movs	r3, #32
 8005f86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f8e:	2330      	movs	r3, #48	; 0x30
 8005f90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006154 <_vfiprintf_r+0x24c>
 8005f94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f98:	f04f 0901 	mov.w	r9, #1
 8005f9c:	4623      	mov	r3, r4
 8005f9e:	469a      	mov	sl, r3
 8005fa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fa4:	b10a      	cbz	r2, 8005faa <_vfiprintf_r+0xa2>
 8005fa6:	2a25      	cmp	r2, #37	; 0x25
 8005fa8:	d1f9      	bne.n	8005f9e <_vfiprintf_r+0x96>
 8005faa:	ebba 0b04 	subs.w	fp, sl, r4
 8005fae:	d00b      	beq.n	8005fc8 <_vfiprintf_r+0xc0>
 8005fb0:	465b      	mov	r3, fp
 8005fb2:	4622      	mov	r2, r4
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	f7ff ff93 	bl	8005ee2 <__sfputs_r>
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	f000 80aa 	beq.w	8006116 <_vfiprintf_r+0x20e>
 8005fc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fc4:	445a      	add	r2, fp
 8005fc6:	9209      	str	r2, [sp, #36]	; 0x24
 8005fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 80a2 	beq.w	8006116 <_vfiprintf_r+0x20e>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fdc:	f10a 0a01 	add.w	sl, sl, #1
 8005fe0:	9304      	str	r3, [sp, #16]
 8005fe2:	9307      	str	r3, [sp, #28]
 8005fe4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fe8:	931a      	str	r3, [sp, #104]	; 0x68
 8005fea:	4654      	mov	r4, sl
 8005fec:	2205      	movs	r2, #5
 8005fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ff2:	4858      	ldr	r0, [pc, #352]	; (8006154 <_vfiprintf_r+0x24c>)
 8005ff4:	f7fa f8c4 	bl	8000180 <memchr>
 8005ff8:	9a04      	ldr	r2, [sp, #16]
 8005ffa:	b9d8      	cbnz	r0, 8006034 <_vfiprintf_r+0x12c>
 8005ffc:	06d1      	lsls	r1, r2, #27
 8005ffe:	bf44      	itt	mi
 8006000:	2320      	movmi	r3, #32
 8006002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006006:	0713      	lsls	r3, r2, #28
 8006008:	bf44      	itt	mi
 800600a:	232b      	movmi	r3, #43	; 0x2b
 800600c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006010:	f89a 3000 	ldrb.w	r3, [sl]
 8006014:	2b2a      	cmp	r3, #42	; 0x2a
 8006016:	d015      	beq.n	8006044 <_vfiprintf_r+0x13c>
 8006018:	9a07      	ldr	r2, [sp, #28]
 800601a:	4654      	mov	r4, sl
 800601c:	2000      	movs	r0, #0
 800601e:	f04f 0c0a 	mov.w	ip, #10
 8006022:	4621      	mov	r1, r4
 8006024:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006028:	3b30      	subs	r3, #48	; 0x30
 800602a:	2b09      	cmp	r3, #9
 800602c:	d94e      	bls.n	80060cc <_vfiprintf_r+0x1c4>
 800602e:	b1b0      	cbz	r0, 800605e <_vfiprintf_r+0x156>
 8006030:	9207      	str	r2, [sp, #28]
 8006032:	e014      	b.n	800605e <_vfiprintf_r+0x156>
 8006034:	eba0 0308 	sub.w	r3, r0, r8
 8006038:	fa09 f303 	lsl.w	r3, r9, r3
 800603c:	4313      	orrs	r3, r2
 800603e:	9304      	str	r3, [sp, #16]
 8006040:	46a2      	mov	sl, r4
 8006042:	e7d2      	b.n	8005fea <_vfiprintf_r+0xe2>
 8006044:	9b03      	ldr	r3, [sp, #12]
 8006046:	1d19      	adds	r1, r3, #4
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	9103      	str	r1, [sp, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	bfbb      	ittet	lt
 8006050:	425b      	neglt	r3, r3
 8006052:	f042 0202 	orrlt.w	r2, r2, #2
 8006056:	9307      	strge	r3, [sp, #28]
 8006058:	9307      	strlt	r3, [sp, #28]
 800605a:	bfb8      	it	lt
 800605c:	9204      	strlt	r2, [sp, #16]
 800605e:	7823      	ldrb	r3, [r4, #0]
 8006060:	2b2e      	cmp	r3, #46	; 0x2e
 8006062:	d10c      	bne.n	800607e <_vfiprintf_r+0x176>
 8006064:	7863      	ldrb	r3, [r4, #1]
 8006066:	2b2a      	cmp	r3, #42	; 0x2a
 8006068:	d135      	bne.n	80060d6 <_vfiprintf_r+0x1ce>
 800606a:	9b03      	ldr	r3, [sp, #12]
 800606c:	1d1a      	adds	r2, r3, #4
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	9203      	str	r2, [sp, #12]
 8006072:	2b00      	cmp	r3, #0
 8006074:	bfb8      	it	lt
 8006076:	f04f 33ff 	movlt.w	r3, #4294967295
 800607a:	3402      	adds	r4, #2
 800607c:	9305      	str	r3, [sp, #20]
 800607e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006164 <_vfiprintf_r+0x25c>
 8006082:	7821      	ldrb	r1, [r4, #0]
 8006084:	2203      	movs	r2, #3
 8006086:	4650      	mov	r0, sl
 8006088:	f7fa f87a 	bl	8000180 <memchr>
 800608c:	b140      	cbz	r0, 80060a0 <_vfiprintf_r+0x198>
 800608e:	2340      	movs	r3, #64	; 0x40
 8006090:	eba0 000a 	sub.w	r0, r0, sl
 8006094:	fa03 f000 	lsl.w	r0, r3, r0
 8006098:	9b04      	ldr	r3, [sp, #16]
 800609a:	4303      	orrs	r3, r0
 800609c:	3401      	adds	r4, #1
 800609e:	9304      	str	r3, [sp, #16]
 80060a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060a4:	482c      	ldr	r0, [pc, #176]	; (8006158 <_vfiprintf_r+0x250>)
 80060a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060aa:	2206      	movs	r2, #6
 80060ac:	f7fa f868 	bl	8000180 <memchr>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d03f      	beq.n	8006134 <_vfiprintf_r+0x22c>
 80060b4:	4b29      	ldr	r3, [pc, #164]	; (800615c <_vfiprintf_r+0x254>)
 80060b6:	bb1b      	cbnz	r3, 8006100 <_vfiprintf_r+0x1f8>
 80060b8:	9b03      	ldr	r3, [sp, #12]
 80060ba:	3307      	adds	r3, #7
 80060bc:	f023 0307 	bic.w	r3, r3, #7
 80060c0:	3308      	adds	r3, #8
 80060c2:	9303      	str	r3, [sp, #12]
 80060c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060c6:	443b      	add	r3, r7
 80060c8:	9309      	str	r3, [sp, #36]	; 0x24
 80060ca:	e767      	b.n	8005f9c <_vfiprintf_r+0x94>
 80060cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80060d0:	460c      	mov	r4, r1
 80060d2:	2001      	movs	r0, #1
 80060d4:	e7a5      	b.n	8006022 <_vfiprintf_r+0x11a>
 80060d6:	2300      	movs	r3, #0
 80060d8:	3401      	adds	r4, #1
 80060da:	9305      	str	r3, [sp, #20]
 80060dc:	4619      	mov	r1, r3
 80060de:	f04f 0c0a 	mov.w	ip, #10
 80060e2:	4620      	mov	r0, r4
 80060e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060e8:	3a30      	subs	r2, #48	; 0x30
 80060ea:	2a09      	cmp	r2, #9
 80060ec:	d903      	bls.n	80060f6 <_vfiprintf_r+0x1ee>
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d0c5      	beq.n	800607e <_vfiprintf_r+0x176>
 80060f2:	9105      	str	r1, [sp, #20]
 80060f4:	e7c3      	b.n	800607e <_vfiprintf_r+0x176>
 80060f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80060fa:	4604      	mov	r4, r0
 80060fc:	2301      	movs	r3, #1
 80060fe:	e7f0      	b.n	80060e2 <_vfiprintf_r+0x1da>
 8006100:	ab03      	add	r3, sp, #12
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	462a      	mov	r2, r5
 8006106:	4b16      	ldr	r3, [pc, #88]	; (8006160 <_vfiprintf_r+0x258>)
 8006108:	a904      	add	r1, sp, #16
 800610a:	4630      	mov	r0, r6
 800610c:	f3af 8000 	nop.w
 8006110:	4607      	mov	r7, r0
 8006112:	1c78      	adds	r0, r7, #1
 8006114:	d1d6      	bne.n	80060c4 <_vfiprintf_r+0x1bc>
 8006116:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006118:	07d9      	lsls	r1, r3, #31
 800611a:	d405      	bmi.n	8006128 <_vfiprintf_r+0x220>
 800611c:	89ab      	ldrh	r3, [r5, #12]
 800611e:	059a      	lsls	r2, r3, #22
 8006120:	d402      	bmi.n	8006128 <_vfiprintf_r+0x220>
 8006122:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006124:	f7ff fd7f 	bl	8005c26 <__retarget_lock_release_recursive>
 8006128:	89ab      	ldrh	r3, [r5, #12]
 800612a:	065b      	lsls	r3, r3, #25
 800612c:	f53f af12 	bmi.w	8005f54 <_vfiprintf_r+0x4c>
 8006130:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006132:	e711      	b.n	8005f58 <_vfiprintf_r+0x50>
 8006134:	ab03      	add	r3, sp, #12
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	462a      	mov	r2, r5
 800613a:	4b09      	ldr	r3, [pc, #36]	; (8006160 <_vfiprintf_r+0x258>)
 800613c:	a904      	add	r1, sp, #16
 800613e:	4630      	mov	r0, r6
 8006140:	f000 f880 	bl	8006244 <_printf_i>
 8006144:	e7e4      	b.n	8006110 <_vfiprintf_r+0x208>
 8006146:	bf00      	nop
 8006148:	080067c4 	.word	0x080067c4
 800614c:	080067e4 	.word	0x080067e4
 8006150:	080067a4 	.word	0x080067a4
 8006154:	08006804 	.word	0x08006804
 8006158:	0800680e 	.word	0x0800680e
 800615c:	00000000 	.word	0x00000000
 8006160:	08005ee3 	.word	0x08005ee3
 8006164:	0800680a 	.word	0x0800680a

08006168 <_printf_common>:
 8006168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800616c:	4616      	mov	r6, r2
 800616e:	4699      	mov	r9, r3
 8006170:	688a      	ldr	r2, [r1, #8]
 8006172:	690b      	ldr	r3, [r1, #16]
 8006174:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006178:	4293      	cmp	r3, r2
 800617a:	bfb8      	it	lt
 800617c:	4613      	movlt	r3, r2
 800617e:	6033      	str	r3, [r6, #0]
 8006180:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006184:	4607      	mov	r7, r0
 8006186:	460c      	mov	r4, r1
 8006188:	b10a      	cbz	r2, 800618e <_printf_common+0x26>
 800618a:	3301      	adds	r3, #1
 800618c:	6033      	str	r3, [r6, #0]
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	0699      	lsls	r1, r3, #26
 8006192:	bf42      	ittt	mi
 8006194:	6833      	ldrmi	r3, [r6, #0]
 8006196:	3302      	addmi	r3, #2
 8006198:	6033      	strmi	r3, [r6, #0]
 800619a:	6825      	ldr	r5, [r4, #0]
 800619c:	f015 0506 	ands.w	r5, r5, #6
 80061a0:	d106      	bne.n	80061b0 <_printf_common+0x48>
 80061a2:	f104 0a19 	add.w	sl, r4, #25
 80061a6:	68e3      	ldr	r3, [r4, #12]
 80061a8:	6832      	ldr	r2, [r6, #0]
 80061aa:	1a9b      	subs	r3, r3, r2
 80061ac:	42ab      	cmp	r3, r5
 80061ae:	dc26      	bgt.n	80061fe <_printf_common+0x96>
 80061b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061b4:	1e13      	subs	r3, r2, #0
 80061b6:	6822      	ldr	r2, [r4, #0]
 80061b8:	bf18      	it	ne
 80061ba:	2301      	movne	r3, #1
 80061bc:	0692      	lsls	r2, r2, #26
 80061be:	d42b      	bmi.n	8006218 <_printf_common+0xb0>
 80061c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061c4:	4649      	mov	r1, r9
 80061c6:	4638      	mov	r0, r7
 80061c8:	47c0      	blx	r8
 80061ca:	3001      	adds	r0, #1
 80061cc:	d01e      	beq.n	800620c <_printf_common+0xa4>
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	68e5      	ldr	r5, [r4, #12]
 80061d2:	6832      	ldr	r2, [r6, #0]
 80061d4:	f003 0306 	and.w	r3, r3, #6
 80061d8:	2b04      	cmp	r3, #4
 80061da:	bf08      	it	eq
 80061dc:	1aad      	subeq	r5, r5, r2
 80061de:	68a3      	ldr	r3, [r4, #8]
 80061e0:	6922      	ldr	r2, [r4, #16]
 80061e2:	bf0c      	ite	eq
 80061e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061e8:	2500      	movne	r5, #0
 80061ea:	4293      	cmp	r3, r2
 80061ec:	bfc4      	itt	gt
 80061ee:	1a9b      	subgt	r3, r3, r2
 80061f0:	18ed      	addgt	r5, r5, r3
 80061f2:	2600      	movs	r6, #0
 80061f4:	341a      	adds	r4, #26
 80061f6:	42b5      	cmp	r5, r6
 80061f8:	d11a      	bne.n	8006230 <_printf_common+0xc8>
 80061fa:	2000      	movs	r0, #0
 80061fc:	e008      	b.n	8006210 <_printf_common+0xa8>
 80061fe:	2301      	movs	r3, #1
 8006200:	4652      	mov	r2, sl
 8006202:	4649      	mov	r1, r9
 8006204:	4638      	mov	r0, r7
 8006206:	47c0      	blx	r8
 8006208:	3001      	adds	r0, #1
 800620a:	d103      	bne.n	8006214 <_printf_common+0xac>
 800620c:	f04f 30ff 	mov.w	r0, #4294967295
 8006210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006214:	3501      	adds	r5, #1
 8006216:	e7c6      	b.n	80061a6 <_printf_common+0x3e>
 8006218:	18e1      	adds	r1, r4, r3
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	2030      	movs	r0, #48	; 0x30
 800621e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006222:	4422      	add	r2, r4
 8006224:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006228:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800622c:	3302      	adds	r3, #2
 800622e:	e7c7      	b.n	80061c0 <_printf_common+0x58>
 8006230:	2301      	movs	r3, #1
 8006232:	4622      	mov	r2, r4
 8006234:	4649      	mov	r1, r9
 8006236:	4638      	mov	r0, r7
 8006238:	47c0      	blx	r8
 800623a:	3001      	adds	r0, #1
 800623c:	d0e6      	beq.n	800620c <_printf_common+0xa4>
 800623e:	3601      	adds	r6, #1
 8006240:	e7d9      	b.n	80061f6 <_printf_common+0x8e>
	...

08006244 <_printf_i>:
 8006244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006248:	7e0f      	ldrb	r7, [r1, #24]
 800624a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800624c:	2f78      	cmp	r7, #120	; 0x78
 800624e:	4691      	mov	r9, r2
 8006250:	4680      	mov	r8, r0
 8006252:	460c      	mov	r4, r1
 8006254:	469a      	mov	sl, r3
 8006256:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800625a:	d807      	bhi.n	800626c <_printf_i+0x28>
 800625c:	2f62      	cmp	r7, #98	; 0x62
 800625e:	d80a      	bhi.n	8006276 <_printf_i+0x32>
 8006260:	2f00      	cmp	r7, #0
 8006262:	f000 80d8 	beq.w	8006416 <_printf_i+0x1d2>
 8006266:	2f58      	cmp	r7, #88	; 0x58
 8006268:	f000 80a3 	beq.w	80063b2 <_printf_i+0x16e>
 800626c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006270:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006274:	e03a      	b.n	80062ec <_printf_i+0xa8>
 8006276:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800627a:	2b15      	cmp	r3, #21
 800627c:	d8f6      	bhi.n	800626c <_printf_i+0x28>
 800627e:	a101      	add	r1, pc, #4	; (adr r1, 8006284 <_printf_i+0x40>)
 8006280:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006284:	080062dd 	.word	0x080062dd
 8006288:	080062f1 	.word	0x080062f1
 800628c:	0800626d 	.word	0x0800626d
 8006290:	0800626d 	.word	0x0800626d
 8006294:	0800626d 	.word	0x0800626d
 8006298:	0800626d 	.word	0x0800626d
 800629c:	080062f1 	.word	0x080062f1
 80062a0:	0800626d 	.word	0x0800626d
 80062a4:	0800626d 	.word	0x0800626d
 80062a8:	0800626d 	.word	0x0800626d
 80062ac:	0800626d 	.word	0x0800626d
 80062b0:	080063fd 	.word	0x080063fd
 80062b4:	08006321 	.word	0x08006321
 80062b8:	080063df 	.word	0x080063df
 80062bc:	0800626d 	.word	0x0800626d
 80062c0:	0800626d 	.word	0x0800626d
 80062c4:	0800641f 	.word	0x0800641f
 80062c8:	0800626d 	.word	0x0800626d
 80062cc:	08006321 	.word	0x08006321
 80062d0:	0800626d 	.word	0x0800626d
 80062d4:	0800626d 	.word	0x0800626d
 80062d8:	080063e7 	.word	0x080063e7
 80062dc:	682b      	ldr	r3, [r5, #0]
 80062de:	1d1a      	adds	r2, r3, #4
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	602a      	str	r2, [r5, #0]
 80062e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062ec:	2301      	movs	r3, #1
 80062ee:	e0a3      	b.n	8006438 <_printf_i+0x1f4>
 80062f0:	6820      	ldr	r0, [r4, #0]
 80062f2:	6829      	ldr	r1, [r5, #0]
 80062f4:	0606      	lsls	r6, r0, #24
 80062f6:	f101 0304 	add.w	r3, r1, #4
 80062fa:	d50a      	bpl.n	8006312 <_printf_i+0xce>
 80062fc:	680e      	ldr	r6, [r1, #0]
 80062fe:	602b      	str	r3, [r5, #0]
 8006300:	2e00      	cmp	r6, #0
 8006302:	da03      	bge.n	800630c <_printf_i+0xc8>
 8006304:	232d      	movs	r3, #45	; 0x2d
 8006306:	4276      	negs	r6, r6
 8006308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800630c:	485e      	ldr	r0, [pc, #376]	; (8006488 <_printf_i+0x244>)
 800630e:	230a      	movs	r3, #10
 8006310:	e019      	b.n	8006346 <_printf_i+0x102>
 8006312:	680e      	ldr	r6, [r1, #0]
 8006314:	602b      	str	r3, [r5, #0]
 8006316:	f010 0f40 	tst.w	r0, #64	; 0x40
 800631a:	bf18      	it	ne
 800631c:	b236      	sxthne	r6, r6
 800631e:	e7ef      	b.n	8006300 <_printf_i+0xbc>
 8006320:	682b      	ldr	r3, [r5, #0]
 8006322:	6820      	ldr	r0, [r4, #0]
 8006324:	1d19      	adds	r1, r3, #4
 8006326:	6029      	str	r1, [r5, #0]
 8006328:	0601      	lsls	r1, r0, #24
 800632a:	d501      	bpl.n	8006330 <_printf_i+0xec>
 800632c:	681e      	ldr	r6, [r3, #0]
 800632e:	e002      	b.n	8006336 <_printf_i+0xf2>
 8006330:	0646      	lsls	r6, r0, #25
 8006332:	d5fb      	bpl.n	800632c <_printf_i+0xe8>
 8006334:	881e      	ldrh	r6, [r3, #0]
 8006336:	4854      	ldr	r0, [pc, #336]	; (8006488 <_printf_i+0x244>)
 8006338:	2f6f      	cmp	r7, #111	; 0x6f
 800633a:	bf0c      	ite	eq
 800633c:	2308      	moveq	r3, #8
 800633e:	230a      	movne	r3, #10
 8006340:	2100      	movs	r1, #0
 8006342:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006346:	6865      	ldr	r5, [r4, #4]
 8006348:	60a5      	str	r5, [r4, #8]
 800634a:	2d00      	cmp	r5, #0
 800634c:	bfa2      	ittt	ge
 800634e:	6821      	ldrge	r1, [r4, #0]
 8006350:	f021 0104 	bicge.w	r1, r1, #4
 8006354:	6021      	strge	r1, [r4, #0]
 8006356:	b90e      	cbnz	r6, 800635c <_printf_i+0x118>
 8006358:	2d00      	cmp	r5, #0
 800635a:	d04d      	beq.n	80063f8 <_printf_i+0x1b4>
 800635c:	4615      	mov	r5, r2
 800635e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006362:	fb03 6711 	mls	r7, r3, r1, r6
 8006366:	5dc7      	ldrb	r7, [r0, r7]
 8006368:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800636c:	4637      	mov	r7, r6
 800636e:	42bb      	cmp	r3, r7
 8006370:	460e      	mov	r6, r1
 8006372:	d9f4      	bls.n	800635e <_printf_i+0x11a>
 8006374:	2b08      	cmp	r3, #8
 8006376:	d10b      	bne.n	8006390 <_printf_i+0x14c>
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	07de      	lsls	r6, r3, #31
 800637c:	d508      	bpl.n	8006390 <_printf_i+0x14c>
 800637e:	6923      	ldr	r3, [r4, #16]
 8006380:	6861      	ldr	r1, [r4, #4]
 8006382:	4299      	cmp	r1, r3
 8006384:	bfde      	ittt	le
 8006386:	2330      	movle	r3, #48	; 0x30
 8006388:	f805 3c01 	strble.w	r3, [r5, #-1]
 800638c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006390:	1b52      	subs	r2, r2, r5
 8006392:	6122      	str	r2, [r4, #16]
 8006394:	f8cd a000 	str.w	sl, [sp]
 8006398:	464b      	mov	r3, r9
 800639a:	aa03      	add	r2, sp, #12
 800639c:	4621      	mov	r1, r4
 800639e:	4640      	mov	r0, r8
 80063a0:	f7ff fee2 	bl	8006168 <_printf_common>
 80063a4:	3001      	adds	r0, #1
 80063a6:	d14c      	bne.n	8006442 <_printf_i+0x1fe>
 80063a8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ac:	b004      	add	sp, #16
 80063ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b2:	4835      	ldr	r0, [pc, #212]	; (8006488 <_printf_i+0x244>)
 80063b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80063b8:	6829      	ldr	r1, [r5, #0]
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80063c0:	6029      	str	r1, [r5, #0]
 80063c2:	061d      	lsls	r5, r3, #24
 80063c4:	d514      	bpl.n	80063f0 <_printf_i+0x1ac>
 80063c6:	07df      	lsls	r7, r3, #31
 80063c8:	bf44      	itt	mi
 80063ca:	f043 0320 	orrmi.w	r3, r3, #32
 80063ce:	6023      	strmi	r3, [r4, #0]
 80063d0:	b91e      	cbnz	r6, 80063da <_printf_i+0x196>
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	f023 0320 	bic.w	r3, r3, #32
 80063d8:	6023      	str	r3, [r4, #0]
 80063da:	2310      	movs	r3, #16
 80063dc:	e7b0      	b.n	8006340 <_printf_i+0xfc>
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	f043 0320 	orr.w	r3, r3, #32
 80063e4:	6023      	str	r3, [r4, #0]
 80063e6:	2378      	movs	r3, #120	; 0x78
 80063e8:	4828      	ldr	r0, [pc, #160]	; (800648c <_printf_i+0x248>)
 80063ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063ee:	e7e3      	b.n	80063b8 <_printf_i+0x174>
 80063f0:	0659      	lsls	r1, r3, #25
 80063f2:	bf48      	it	mi
 80063f4:	b2b6      	uxthmi	r6, r6
 80063f6:	e7e6      	b.n	80063c6 <_printf_i+0x182>
 80063f8:	4615      	mov	r5, r2
 80063fa:	e7bb      	b.n	8006374 <_printf_i+0x130>
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	6826      	ldr	r6, [r4, #0]
 8006400:	6961      	ldr	r1, [r4, #20]
 8006402:	1d18      	adds	r0, r3, #4
 8006404:	6028      	str	r0, [r5, #0]
 8006406:	0635      	lsls	r5, r6, #24
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	d501      	bpl.n	8006410 <_printf_i+0x1cc>
 800640c:	6019      	str	r1, [r3, #0]
 800640e:	e002      	b.n	8006416 <_printf_i+0x1d2>
 8006410:	0670      	lsls	r0, r6, #25
 8006412:	d5fb      	bpl.n	800640c <_printf_i+0x1c8>
 8006414:	8019      	strh	r1, [r3, #0]
 8006416:	2300      	movs	r3, #0
 8006418:	6123      	str	r3, [r4, #16]
 800641a:	4615      	mov	r5, r2
 800641c:	e7ba      	b.n	8006394 <_printf_i+0x150>
 800641e:	682b      	ldr	r3, [r5, #0]
 8006420:	1d1a      	adds	r2, r3, #4
 8006422:	602a      	str	r2, [r5, #0]
 8006424:	681d      	ldr	r5, [r3, #0]
 8006426:	6862      	ldr	r2, [r4, #4]
 8006428:	2100      	movs	r1, #0
 800642a:	4628      	mov	r0, r5
 800642c:	f7f9 fea8 	bl	8000180 <memchr>
 8006430:	b108      	cbz	r0, 8006436 <_printf_i+0x1f2>
 8006432:	1b40      	subs	r0, r0, r5
 8006434:	6060      	str	r0, [r4, #4]
 8006436:	6863      	ldr	r3, [r4, #4]
 8006438:	6123      	str	r3, [r4, #16]
 800643a:	2300      	movs	r3, #0
 800643c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006440:	e7a8      	b.n	8006394 <_printf_i+0x150>
 8006442:	6923      	ldr	r3, [r4, #16]
 8006444:	462a      	mov	r2, r5
 8006446:	4649      	mov	r1, r9
 8006448:	4640      	mov	r0, r8
 800644a:	47d0      	blx	sl
 800644c:	3001      	adds	r0, #1
 800644e:	d0ab      	beq.n	80063a8 <_printf_i+0x164>
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	079b      	lsls	r3, r3, #30
 8006454:	d413      	bmi.n	800647e <_printf_i+0x23a>
 8006456:	68e0      	ldr	r0, [r4, #12]
 8006458:	9b03      	ldr	r3, [sp, #12]
 800645a:	4298      	cmp	r0, r3
 800645c:	bfb8      	it	lt
 800645e:	4618      	movlt	r0, r3
 8006460:	e7a4      	b.n	80063ac <_printf_i+0x168>
 8006462:	2301      	movs	r3, #1
 8006464:	4632      	mov	r2, r6
 8006466:	4649      	mov	r1, r9
 8006468:	4640      	mov	r0, r8
 800646a:	47d0      	blx	sl
 800646c:	3001      	adds	r0, #1
 800646e:	d09b      	beq.n	80063a8 <_printf_i+0x164>
 8006470:	3501      	adds	r5, #1
 8006472:	68e3      	ldr	r3, [r4, #12]
 8006474:	9903      	ldr	r1, [sp, #12]
 8006476:	1a5b      	subs	r3, r3, r1
 8006478:	42ab      	cmp	r3, r5
 800647a:	dcf2      	bgt.n	8006462 <_printf_i+0x21e>
 800647c:	e7eb      	b.n	8006456 <_printf_i+0x212>
 800647e:	2500      	movs	r5, #0
 8006480:	f104 0619 	add.w	r6, r4, #25
 8006484:	e7f5      	b.n	8006472 <_printf_i+0x22e>
 8006486:	bf00      	nop
 8006488:	08006815 	.word	0x08006815
 800648c:	08006826 	.word	0x08006826

08006490 <_sbrk_r>:
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	4d06      	ldr	r5, [pc, #24]	; (80064ac <_sbrk_r+0x1c>)
 8006494:	2300      	movs	r3, #0
 8006496:	4604      	mov	r4, r0
 8006498:	4608      	mov	r0, r1
 800649a:	602b      	str	r3, [r5, #0]
 800649c:	f7fa fa72 	bl	8000984 <_sbrk>
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	d102      	bne.n	80064aa <_sbrk_r+0x1a>
 80064a4:	682b      	ldr	r3, [r5, #0]
 80064a6:	b103      	cbz	r3, 80064aa <_sbrk_r+0x1a>
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
 80064ac:	20000680 	.word	0x20000680

080064b0 <__sread>:
 80064b0:	b510      	push	{r4, lr}
 80064b2:	460c      	mov	r4, r1
 80064b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b8:	f000 f8a0 	bl	80065fc <_read_r>
 80064bc:	2800      	cmp	r0, #0
 80064be:	bfab      	itete	ge
 80064c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80064c2:	89a3      	ldrhlt	r3, [r4, #12]
 80064c4:	181b      	addge	r3, r3, r0
 80064c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80064ca:	bfac      	ite	ge
 80064cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80064ce:	81a3      	strhlt	r3, [r4, #12]
 80064d0:	bd10      	pop	{r4, pc}

080064d2 <__swrite>:
 80064d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d6:	461f      	mov	r7, r3
 80064d8:	898b      	ldrh	r3, [r1, #12]
 80064da:	05db      	lsls	r3, r3, #23
 80064dc:	4605      	mov	r5, r0
 80064de:	460c      	mov	r4, r1
 80064e0:	4616      	mov	r6, r2
 80064e2:	d505      	bpl.n	80064f0 <__swrite+0x1e>
 80064e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064e8:	2302      	movs	r3, #2
 80064ea:	2200      	movs	r2, #0
 80064ec:	f000 f868 	bl	80065c0 <_lseek_r>
 80064f0:	89a3      	ldrh	r3, [r4, #12]
 80064f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064fa:	81a3      	strh	r3, [r4, #12]
 80064fc:	4632      	mov	r2, r6
 80064fe:	463b      	mov	r3, r7
 8006500:	4628      	mov	r0, r5
 8006502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006506:	f000 b817 	b.w	8006538 <_write_r>

0800650a <__sseek>:
 800650a:	b510      	push	{r4, lr}
 800650c:	460c      	mov	r4, r1
 800650e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006512:	f000 f855 	bl	80065c0 <_lseek_r>
 8006516:	1c43      	adds	r3, r0, #1
 8006518:	89a3      	ldrh	r3, [r4, #12]
 800651a:	bf15      	itete	ne
 800651c:	6560      	strne	r0, [r4, #84]	; 0x54
 800651e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006522:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006526:	81a3      	strheq	r3, [r4, #12]
 8006528:	bf18      	it	ne
 800652a:	81a3      	strhne	r3, [r4, #12]
 800652c:	bd10      	pop	{r4, pc}

0800652e <__sclose>:
 800652e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006532:	f000 b813 	b.w	800655c <_close_r>
	...

08006538 <_write_r>:
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	4d07      	ldr	r5, [pc, #28]	; (8006558 <_write_r+0x20>)
 800653c:	4604      	mov	r4, r0
 800653e:	4608      	mov	r0, r1
 8006540:	4611      	mov	r1, r2
 8006542:	2200      	movs	r2, #0
 8006544:	602a      	str	r2, [r5, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	f7fa f8b5 	bl	80006b6 <_write>
 800654c:	1c43      	adds	r3, r0, #1
 800654e:	d102      	bne.n	8006556 <_write_r+0x1e>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	b103      	cbz	r3, 8006556 <_write_r+0x1e>
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	bd38      	pop	{r3, r4, r5, pc}
 8006558:	20000680 	.word	0x20000680

0800655c <_close_r>:
 800655c:	b538      	push	{r3, r4, r5, lr}
 800655e:	4d06      	ldr	r5, [pc, #24]	; (8006578 <_close_r+0x1c>)
 8006560:	2300      	movs	r3, #0
 8006562:	4604      	mov	r4, r0
 8006564:	4608      	mov	r0, r1
 8006566:	602b      	str	r3, [r5, #0]
 8006568:	f7fa f9d7 	bl	800091a <_close>
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	d102      	bne.n	8006576 <_close_r+0x1a>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	b103      	cbz	r3, 8006576 <_close_r+0x1a>
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	20000680 	.word	0x20000680

0800657c <_fstat_r>:
 800657c:	b538      	push	{r3, r4, r5, lr}
 800657e:	4d07      	ldr	r5, [pc, #28]	; (800659c <_fstat_r+0x20>)
 8006580:	2300      	movs	r3, #0
 8006582:	4604      	mov	r4, r0
 8006584:	4608      	mov	r0, r1
 8006586:	4611      	mov	r1, r2
 8006588:	602b      	str	r3, [r5, #0]
 800658a:	f7fa f9d2 	bl	8000932 <_fstat>
 800658e:	1c43      	adds	r3, r0, #1
 8006590:	d102      	bne.n	8006598 <_fstat_r+0x1c>
 8006592:	682b      	ldr	r3, [r5, #0]
 8006594:	b103      	cbz	r3, 8006598 <_fstat_r+0x1c>
 8006596:	6023      	str	r3, [r4, #0]
 8006598:	bd38      	pop	{r3, r4, r5, pc}
 800659a:	bf00      	nop
 800659c:	20000680 	.word	0x20000680

080065a0 <_isatty_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	4d06      	ldr	r5, [pc, #24]	; (80065bc <_isatty_r+0x1c>)
 80065a4:	2300      	movs	r3, #0
 80065a6:	4604      	mov	r4, r0
 80065a8:	4608      	mov	r0, r1
 80065aa:	602b      	str	r3, [r5, #0]
 80065ac:	f7fa f9d1 	bl	8000952 <_isatty>
 80065b0:	1c43      	adds	r3, r0, #1
 80065b2:	d102      	bne.n	80065ba <_isatty_r+0x1a>
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	b103      	cbz	r3, 80065ba <_isatty_r+0x1a>
 80065b8:	6023      	str	r3, [r4, #0]
 80065ba:	bd38      	pop	{r3, r4, r5, pc}
 80065bc:	20000680 	.word	0x20000680

080065c0 <_lseek_r>:
 80065c0:	b538      	push	{r3, r4, r5, lr}
 80065c2:	4d07      	ldr	r5, [pc, #28]	; (80065e0 <_lseek_r+0x20>)
 80065c4:	4604      	mov	r4, r0
 80065c6:	4608      	mov	r0, r1
 80065c8:	4611      	mov	r1, r2
 80065ca:	2200      	movs	r2, #0
 80065cc:	602a      	str	r2, [r5, #0]
 80065ce:	461a      	mov	r2, r3
 80065d0:	f7fa f9ca 	bl	8000968 <_lseek>
 80065d4:	1c43      	adds	r3, r0, #1
 80065d6:	d102      	bne.n	80065de <_lseek_r+0x1e>
 80065d8:	682b      	ldr	r3, [r5, #0]
 80065da:	b103      	cbz	r3, 80065de <_lseek_r+0x1e>
 80065dc:	6023      	str	r3, [r4, #0]
 80065de:	bd38      	pop	{r3, r4, r5, pc}
 80065e0:	20000680 	.word	0x20000680

080065e4 <__malloc_lock>:
 80065e4:	4801      	ldr	r0, [pc, #4]	; (80065ec <__malloc_lock+0x8>)
 80065e6:	f7ff bb1d 	b.w	8005c24 <__retarget_lock_acquire_recursive>
 80065ea:	bf00      	nop
 80065ec:	20000674 	.word	0x20000674

080065f0 <__malloc_unlock>:
 80065f0:	4801      	ldr	r0, [pc, #4]	; (80065f8 <__malloc_unlock+0x8>)
 80065f2:	f7ff bb18 	b.w	8005c26 <__retarget_lock_release_recursive>
 80065f6:	bf00      	nop
 80065f8:	20000674 	.word	0x20000674

080065fc <_read_r>:
 80065fc:	b538      	push	{r3, r4, r5, lr}
 80065fe:	4d07      	ldr	r5, [pc, #28]	; (800661c <_read_r+0x20>)
 8006600:	4604      	mov	r4, r0
 8006602:	4608      	mov	r0, r1
 8006604:	4611      	mov	r1, r2
 8006606:	2200      	movs	r2, #0
 8006608:	602a      	str	r2, [r5, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	f7fa f968 	bl	80008e0 <_read>
 8006610:	1c43      	adds	r3, r0, #1
 8006612:	d102      	bne.n	800661a <_read_r+0x1e>
 8006614:	682b      	ldr	r3, [r5, #0]
 8006616:	b103      	cbz	r3, 800661a <_read_r+0x1e>
 8006618:	6023      	str	r3, [r4, #0]
 800661a:	bd38      	pop	{r3, r4, r5, pc}
 800661c:	20000680 	.word	0x20000680

08006620 <_init>:
 8006620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006622:	bf00      	nop
 8006624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006626:	bc08      	pop	{r3}
 8006628:	469e      	mov	lr, r3
 800662a:	4770      	bx	lr

0800662c <_fini>:
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	bf00      	nop
 8006630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006632:	bc08      	pop	{r3}
 8006634:	469e      	mov	lr, r3
 8006636:	4770      	bx	lr
