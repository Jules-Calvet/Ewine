
Test_Wifi_05_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b80  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08006cc0  08006cc0  00016cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006f70  08006f70  00016f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006f78  08006f78  00016f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006f7c  08006f7c  00016f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000e0  20000008  08006f80  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000688  200000e8  08007060  000200e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000770  08007060  00020770  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000173b9  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000348f  00000000  00000000  000374d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001668  00000000  00000000  0003a960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001510  00000000  00000000  0003bfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000239d6  00000000  00000000  0003d4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015da5  00000000  00000000  00060eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000da7f1  00000000  00000000  00076c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00151444  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006608  00000000  00000000  00151494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000e8 	.word	0x200000e8
 800015c:	00000000 	.word	0x00000000
 8000160:	08006ca8 	.word	0x08006ca8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000ec 	.word	0x200000ec
 800017c:	08006ca8 	.word	0x08006ca8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000540:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4313      	orrs	r3, r2
 800054a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800054c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000550:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4013      	ands	r3, r2
 8000556:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000558:	68fb      	ldr	r3, [r7, #12]
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800056a:	2004      	movs	r0, #4
 800056c:	f7ff ffe2 	bl	8000534 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000570:	2001      	movs	r0, #1
 8000572:	f7ff ffdf 	bl	8000534 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	2100      	movs	r1, #0
 800057a:	200c      	movs	r0, #12
 800057c:	f001 f91b 	bl	80017b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000580:	200c      	movs	r0, #12
 8000582:	f001 f932 	bl	80017ea <HAL_NVIC_EnableIRQ>

}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}

0800058a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800058a:	b480      	push	{r7}
 800058c:	b085      	sub	sp, #20
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000596:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000598:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4313      	orrs	r3, r2
 80005a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d0:	2004      	movs	r0, #4
 80005d2:	f7ff ffda 	bl	800058a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	2002      	movs	r0, #2
 80005d8:	f7ff ffd7 	bl	800058a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005dc:	2001      	movs	r0, #1
 80005de:	f7ff ffd4 	bl	800058a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e2:	2008      	movs	r0, #8
 80005e4:	f7ff ffd1 	bl	800058a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2123      	movs	r1, #35	; 0x23
 80005ec:	4814      	ldr	r0, [pc, #80]	; (8000640 <MX_GPIO_Init+0x84>)
 80005ee:	f001 fdc7 	bl	8002180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005f2:	2310      	movs	r3, #16
 80005f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	4619      	mov	r1, r3
 8000602:	4810      	ldr	r0, [pc, #64]	; (8000644 <MX_GPIO_Init+0x88>)
 8000604:	f001 fc4c 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000608:	2323      	movs	r3, #35	; 0x23
 800060a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060c:	2301      	movs	r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	4808      	ldr	r0, [pc, #32]	; (8000640 <MX_GPIO_Init+0x84>)
 800061e:	f001 fc3f 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000622:	2303      	movs	r3, #3
 8000624:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000626:	2300      	movs	r3, #0
 8000628:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	4619      	mov	r1, r3
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_GPIO_Init+0x8c>)
 8000634:	f001 fc34 	bl	8001ea0 <HAL_GPIO_Init>

}
 8000638:	bf00      	nop
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	48000400 	.word	0x48000400
 8000644:	48000800 	.word	0x48000800
 8000648:	48000c00 	.word	0x48000c00

0800064c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000654:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000658:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	2b00      	cmp	r3, #0
 8000662:	d013      	beq.n	800068c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000664:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000668:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800066c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000670:	2b00      	cmp	r3, #0
 8000672:	d00b      	beq.n	800068c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000674:	e000      	b.n	8000678 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000676:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000678:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0f9      	beq.n	8000676 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000682:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800068c:	687b      	ldr	r3, [r7, #4]
}
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800069a:	b480      	push	{r7}
 800069c:	b083      	sub	sp, #12
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80006a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006aa:	f023 0218 	bic.w	r2, r3, #24
 80006ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4313      	orrs	r3, r2
 80006b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b086      	sub	sp, #24
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	60f8      	str	r0, [r7, #12]
 80006ce:	60b9      	str	r1, [r7, #8]
 80006d0:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	e009      	b.n	80006ec <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	1c5a      	adds	r2, r3, #1
 80006dc:	60ba      	str	r2, [r7, #8]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ffb3 	bl	800064c <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	3301      	adds	r3, #1
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	697a      	ldr	r2, [r7, #20]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	dbf1      	blt.n	80006d8 <_write+0x12>
}
return len;
 80006f4:	687b      	ldr	r3, [r7, #4]
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3718      	adds	r7, #24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000702:	f000 feaf 	bl	8001464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000706:	f000 f80f 	bl	8000728 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800070a:	f000 f883 	bl	8000814 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070e:	f7ff ff55 	bl	80005bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000712:	f7ff ff28 	bl	8000566 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000716:	f000 fa57 	bl	8000bc8 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 800071a:	f000 fb7f 	bl	8000e1c <MX_USB_PCD_Init>
  MX_LPUART1_UART_Init();
 800071e:	f000 fa07 	bl	8000b30 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Wifi_Init();
 8000722:	f000 fd45 	bl	80011b0 <Wifi_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000726:	e7fe      	b.n	8000726 <main+0x28>

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b09a      	sub	sp, #104	; 0x68
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0320 	add.w	r3, r7, #32
 8000732:	2248      	movs	r2, #72	; 0x48
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f005 f8a0 	bl	800587c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
 800074a:	615a      	str	r2, [r3, #20]
 800074c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800074e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800075c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800075e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	f023 0303 	bic.w	r3, r3, #3
 8000768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000772:	f001 fe21 	bl	80023b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8000776:	2010      	movs	r0, #16
 8000778:	f7ff ff8f 	bl	800069a <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077c:	4b24      	ldr	r3, [pc, #144]	; (8000810 <SystemClock_Config+0xe8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000784:	4a22      	ldr	r2, [pc, #136]	; (8000810 <SystemClock_Config+0xe8>)
 8000786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b20      	ldr	r3, [pc, #128]	; (8000810 <SystemClock_Config+0xe8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000798:	2327      	movs	r3, #39	; 0x27
 800079a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800079c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007a2:	2301      	movs	r3, #1
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b0:	2340      	movs	r3, #64	; 0x40
 80007b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007b4:	2300      	movs	r3, #0
 80007b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007b8:	2360      	movs	r3, #96	; 0x60
 80007ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007bc:	2300      	movs	r3, #0
 80007be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c0:	f107 0320 	add.w	r3, r7, #32
 80007c4:	4618      	mov	r0, r3
 80007c6:	f002 f98b 	bl	8002ae0 <HAL_RCC_OscConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80007d0:	f000 f83d 	bl	800084e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80007d4:	236f      	movs	r3, #111	; 0x6f
 80007d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80007d8:	2302      	movs	r3, #2
 80007da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2101      	movs	r1, #1
 80007f4:	4618      	mov	r0, r3
 80007f6:	f002 fce7 	bl	80031c8 <HAL_RCC_ClockConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000800:	f000 f825 	bl	800084e <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000804:	f003 faa2 	bl	8003d4c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000808:	bf00      	nop
 800080a:	3768      	adds	r7, #104	; 0x68
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	58000400 	.word	0x58000400

08000814 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	; 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800081a:	463b      	mov	r3, r7
 800081c:	2250      	movs	r2, #80	; 0x50
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f005 f82b 	bl	800587c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000826:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800082a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800082c:	2300      	movs	r3, #0
 800082e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000830:	2300      	movs	r3, #0
 8000832:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000834:	463b      	mov	r3, r7
 8000836:	4618      	mov	r0, r3
 8000838:	f003 f912 	bl	8003a60 <HAL_RCCEx_PeriphCLKConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000842:	f000 f804 	bl	800084e <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000846:	bf00      	nop
 8000848:	3750      	adds	r7, #80	; 0x50
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000852:	b672      	cpsid	i
}
 8000854:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000856:	e7fe      	b.n	8000856 <Error_Handler+0x8>

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800086a:	e7fe      	b.n	800086a <NMI_Handler+0x4>

0800086c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <HardFault_Handler+0x4>

08000872 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <MemManage_Handler+0x4>

08000878 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <BusFault_Handler+0x4>

0800087e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <UsageFault_Handler+0x4>

08000884 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b2:	f000 fe31 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80008c0:	4802      	ldr	r0, [pc, #8]	; (80008cc <DMA1_Channel2_IRQHandler+0x10>)
 80008c2:	f001 f99c 	bl	8001bfe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000230 	.word	0x20000230

080008d0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80008d4:	4802      	ldr	r0, [pc, #8]	; (80008e0 <LPUART1_IRQHandler+0x10>)
 80008d6:	f003 fc47 	bl	8004168 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000108 	.word	0x20000108

080008e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	e00a      	b.n	800090c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008f6:	f3af 8000 	nop.w
 80008fa:	4601      	mov	r1, r0
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	1c5a      	adds	r2, r3, #1
 8000900:	60ba      	str	r2, [r7, #8]
 8000902:	b2ca      	uxtb	r2, r1
 8000904:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	3301      	adds	r3, #1
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	429a      	cmp	r2, r3
 8000912:	dbf0      	blt.n	80008f6 <_read+0x12>
  }

  return len;
 8000914:	687b      	ldr	r3, [r7, #4]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <_close>:
  }
  return len;
}

int _close(int file)
{
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
}
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000946:	605a      	str	r2, [r3, #4]
  return 0;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <_isatty>:

int _isatty(int file)
{
 8000956:	b480      	push	{r7}
 8000958:	b083      	sub	sp, #12
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800095e:	2301      	movs	r3, #1
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
	...

08000988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000990:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <_sbrk+0x5c>)
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <_sbrk+0x60>)
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <_sbrk+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d102      	bne.n	80009aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <_sbrk+0x64>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <_sbrk+0x68>)
 80009a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d207      	bcs.n	80009c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b8:	f004 ff36 	bl	8005828 <__errno>
 80009bc:	4603      	mov	r3, r0
 80009be:	220c      	movs	r2, #12
 80009c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
 80009c6:	e009      	b.n	80009dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <_sbrk+0x64>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	4a05      	ldr	r2, [pc, #20]	; (80009ec <_sbrk+0x64>)
 80009d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009da:	68fb      	ldr	r3, [r7, #12]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20030000 	.word	0x20030000
 80009e8:	00000400 	.word	0x00000400
 80009ec:	20000104 	.word	0x20000104
 80009f0:	20000770 	.word	0x20000770

080009f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80009f8:	4b24      	ldr	r3, [pc, #144]	; (8000a8c <SystemInit+0x98>)
 80009fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fe:	4a23      	ldr	r2, [pc, #140]	; (8000a8c <SystemInit+0x98>)
 8000a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a1c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000a20:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <SystemInit+0x9c>)
 8000a2e:	4013      	ands	r3, r2
 8000a30:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a3e:	f023 0305 	bic.w	r3, r3, #5
 8000a42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a52:	f023 0301 	bic.w	r3, r3, #1
 8000a56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a5e:	4a0d      	ldr	r2, [pc, #52]	; (8000a94 <SystemInit+0xa0>)
 8000a60:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a66:	4a0b      	ldr	r2, [pc, #44]	; (8000a94 <SystemInit+0xa0>)
 8000a68:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a78:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00
 8000a90:	faf6fefb 	.word	0xfaf6fefb
 8000a94:	22041000 	.word	0x22041000

08000a98 <LL_AHB2_GRP1_EnableClock>:
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000aa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ab4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000abc:	68fb      	ldr	r3, [r7, #12]
}
 8000abe:	bf00      	nop
 8000ac0:	3714      	adds	r7, #20
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b085      	sub	sp, #20
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ad6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ad8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ae6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4013      	ands	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b20:	68fb      	ldr	r3, [r7, #12]
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b34:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <MX_LPUART1_UART_Init+0x90>)
 8000b36:	4a23      	ldr	r2, [pc, #140]	; (8000bc4 <MX_LPUART1_UART_Init+0x94>)
 8000b38:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000b3a:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <MX_LPUART1_UART_Init+0x90>)
 8000b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b40:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b42:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <MX_LPUART1_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b48:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <MX_LPUART1_UART_Init+0x90>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <MX_LPUART1_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b54:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <MX_LPUART1_UART_Init+0x90>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5a:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <MX_LPUART1_UART_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b60:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <MX_LPUART1_UART_Init+0x90>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b66:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <MX_LPUART1_UART_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_LPUART1_UART_Init+0x90>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_LPUART1_UART_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b78:	4811      	ldr	r0, [pc, #68]	; (8000bc0 <MX_LPUART1_UART_Init+0x90>)
 8000b7a:	f003 fa1e 	bl	8003fba <HAL_UART_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b84:	f7ff fe63 	bl	800084e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b88:	2100      	movs	r1, #0
 8000b8a:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <MX_LPUART1_UART_Init+0x90>)
 8000b8c:	f004 fcf2 	bl	8005574 <HAL_UARTEx_SetTxFifoThreshold>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b96:	f7ff fe5a 	bl	800084e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4808      	ldr	r0, [pc, #32]	; (8000bc0 <MX_LPUART1_UART_Init+0x90>)
 8000b9e:	f004 fd27 	bl	80055f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ba8:	f7ff fe51 	bl	800084e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000bac:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <MX_LPUART1_UART_Init+0x90>)
 8000bae:	f004 fca8 	bl	8005502 <HAL_UARTEx_DisableFifoMode>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bb8:	f7ff fe49 	bl	800084e <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000108 	.word	0x20000108
 8000bc4:	40008000 	.word	0x40008000

08000bc8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bcc:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000bce:	4a24      	ldr	r2, [pc, #144]	; (8000c60 <MX_USART1_UART_Init+0x98>)
 8000bd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bd2:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000bd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000bda:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000be0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000be2:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000be8:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bee:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000bf0:	220c      	movs	r2, #12
 8000bf2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf4:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c12:	4812      	ldr	r0, [pc, #72]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000c14:	f003 f9d1 	bl	8003fba <HAL_UART_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000c1e:	f7ff fe16 	bl	800084e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c22:	2100      	movs	r1, #0
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000c26:	f004 fca5 	bl	8005574 <HAL_UARTEx_SetTxFifoThreshold>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000c30:	f7ff fe0d 	bl	800084e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c34:	2100      	movs	r1, #0
 8000c36:	4809      	ldr	r0, [pc, #36]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000c38:	f004 fcda 	bl	80055f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000c42:	f7ff fe04 	bl	800084e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000c48:	f004 fc5b 	bl	8005502 <HAL_UARTEx_DisableFifoMode>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000c52:	f7ff fdfc 	bl	800084e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000019c 	.word	0x2000019c
 8000c60:	40013800 	.word	0x40013800

08000c64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b09c      	sub	sp, #112	; 0x70
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	2250      	movs	r2, #80	; 0x50
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f004 fdf9 	bl	800587c <memset>
  if(uartHandle->Instance==LPUART1)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a44      	ldr	r2, [pc, #272]	; (8000da0 <HAL_UART_MspInit+0x13c>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d156      	bne.n	8000d42 <HAL_UART_MspInit+0xde>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c94:	2302      	movs	r3, #2
 8000c96:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f002 fedd 	bl	8003a60 <HAL_RCCEx_PeriphCLKConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cac:	f7ff fdcf 	bl	800084e <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f7ff ff0a 	bl	8000aca <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb6:	2004      	movs	r0, #4
 8000cb8:	f7ff feee 	bl	8000a98 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ccc:	2308      	movs	r3, #8
 8000cce:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4833      	ldr	r0, [pc, #204]	; (8000da4 <HAL_UART_MspInit+0x140>)
 8000cd8:	f001 f8e2 	bl	8001ea0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8000cdc:	4b32      	ldr	r3, [pc, #200]	; (8000da8 <HAL_UART_MspInit+0x144>)
 8000cde:	4a33      	ldr	r2, [pc, #204]	; (8000dac <HAL_UART_MspInit+0x148>)
 8000ce0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000ce2:	4b31      	ldr	r3, [pc, #196]	; (8000da8 <HAL_UART_MspInit+0x144>)
 8000ce4:	2210      	movs	r2, #16
 8000ce6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ce8:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <HAL_UART_MspInit+0x144>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cee:	4b2e      	ldr	r3, [pc, #184]	; (8000da8 <HAL_UART_MspInit+0x144>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cf4:	4b2c      	ldr	r3, [pc, #176]	; (8000da8 <HAL_UART_MspInit+0x144>)
 8000cf6:	2280      	movs	r2, #128	; 0x80
 8000cf8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cfa:	4b2b      	ldr	r3, [pc, #172]	; (8000da8 <HAL_UART_MspInit+0x144>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d00:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <HAL_UART_MspInit+0x144>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000d06:	4b28      	ldr	r3, [pc, #160]	; (8000da8 <HAL_UART_MspInit+0x144>)
 8000d08:	2220      	movs	r2, #32
 8000d0a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d0c:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <HAL_UART_MspInit+0x144>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000d12:	4825      	ldr	r0, [pc, #148]	; (8000da8 <HAL_UART_MspInit+0x144>)
 8000d14:	f000 fd92 	bl	800183c <HAL_DMA_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000d1e:	f7ff fd96 	bl	800084e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a20      	ldr	r2, [pc, #128]	; (8000da8 <HAL_UART_MspInit+0x144>)
 8000d26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000d2a:	4a1f      	ldr	r2, [pc, #124]	; (8000da8 <HAL_UART_MspInit+0x144>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	2025      	movs	r0, #37	; 0x25
 8000d36:	f000 fd3e 	bl	80017b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000d3a:	2025      	movs	r0, #37	; 0x25
 8000d3c:	f000 fd55 	bl	80017ea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d40:	e029      	b.n	8000d96 <HAL_UART_MspInit+0x132>
  else if(uartHandle->Instance==USART1)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a1a      	ldr	r2, [pc, #104]	; (8000db0 <HAL_UART_MspInit+0x14c>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d124      	bne.n	8000d96 <HAL_UART_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f002 fe81 	bl	8003a60 <HAL_RCCEx_PeriphCLKConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_UART_MspInit+0x104>
      Error_Handler();
 8000d64:	f7ff fd73 	bl	800084e <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d68:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d6c:	f7ff fec6 	bl	8000afc <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d70:	2002      	movs	r0, #2
 8000d72:	f7ff fe91 	bl	8000a98 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d76:	23c0      	movs	r3, #192	; 0xc0
 8000d78:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d86:	2307      	movs	r3, #7
 8000d88:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4808      	ldr	r0, [pc, #32]	; (8000db4 <HAL_UART_MspInit+0x150>)
 8000d92:	f001 f885 	bl	8001ea0 <HAL_GPIO_Init>
}
 8000d96:	bf00      	nop
 8000d98:	3770      	adds	r7, #112	; 0x70
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40008000 	.word	0x40008000
 8000da4:	48000800 	.word	0x48000800
 8000da8:	20000230 	.word	0x20000230
 8000dac:	4002001c 	.word	0x4002001c
 8000db0:	40013800 	.word	0x40013800
 8000db4:	48000400 	.word	0x48000400

08000db8 <LL_AHB2_GRP1_EnableClock>:
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
}
 8000dde:	bf00      	nop
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <LL_APB1_GRP1_EnableClock>:
{
 8000dea:	b480      	push	{r7}
 8000dec:	b085      	sub	sp, #20
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000df6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000df8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e06:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000e20:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <MX_USB_PCD_Init+0x48>)
 8000e22:	4a11      	ldr	r2, [pc, #68]	; (8000e68 <MX_USB_PCD_Init+0x4c>)
 8000e24:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <MX_USB_PCD_Init+0x48>)
 8000e28:	2208      	movs	r2, #8
 8000e2a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <MX_USB_PCD_Init+0x48>)
 8000e2e:	2202      	movs	r2, #2
 8000e30:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_USB_PCD_Init+0x48>)
 8000e34:	2202      	movs	r2, #2
 8000e36:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <MX_USB_PCD_Init+0x48>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_USB_PCD_Init+0x48>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <MX_USB_PCD_Init+0x48>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_USB_PCD_Init+0x48>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <MX_USB_PCD_Init+0x48>)
 8000e52:	f001 f9ad 	bl	80021b0 <HAL_PCD_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000e5c:	f7ff fcf7 	bl	800084e <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000290 	.word	0x20000290
 8000e68:	40006800 	.word	0x40006800

08000e6c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b09c      	sub	sp, #112	; 0x70
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	2250      	movs	r2, #80	; 0x50
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f004 fcf5 	bl	800587c <memset>
  if(pcdHandle->Instance==USB)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a1f      	ldr	r2, [pc, #124]	; (8000f14 <HAL_PCD_MspInit+0xa8>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d136      	bne.n	8000f0a <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000ea2:	2318      	movs	r3, #24
 8000ea4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000ea6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eaa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000eac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000eb0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000eb2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000eb6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000eb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ebc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000ebe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ec2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f002 fdc9 	bl	8003a60 <HAL_RCCEx_PeriphCLKConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000ed4:	f7ff fcbb 	bl	800084e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f7ff ff6d 	bl	8000db8 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ede:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000ef0:	230a      	movs	r3, #10
 8000ef2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efe:	f000 ffcf 	bl	8001ea0 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000f02:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000f06:	f7ff ff70 	bl	8000dea <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	3770      	adds	r7, #112	; 0x70
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40006800 	.word	0x40006800

08000f18 <PrintInfo>:
  * @param  String String to be sent to user display
  * @param  Size   Size of string
  * @retval None
  */
bool PrintInfo(UART_HandleTypeDef *huart, uint8_t *String, uint16_t Size)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	4613      	mov	r3, r2
 8000f24:	80fb      	strh	r3, [r7, #6]
  if (HAL_OK != HAL_UART_Transmit(huart, String, Size,1000))
 8000f26:	88fa      	ldrh	r2, [r7, #6]
 8000f28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	68f8      	ldr	r0, [r7, #12]
 8000f30:	f003 f893 	bl	800405a <HAL_UART_Transmit>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <PrintInfo+0x2a>
  {
      Error_Handler();
 8000f3a:	f7ff fc88 	bl	800084e <Error_Handler>
      return false;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e004      	b.n	8000f4c <PrintInfo+0x34>
  } else {
	  printf(" Command AT : %s\n",String);
 8000f42:	68b9      	ldr	r1, [r7, #8]
 8000f44:	4803      	ldr	r0, [pc, #12]	; (8000f54 <PrintInfo+0x3c>)
 8000f46:	f004 fca1 	bl	800588c <iprintf>
	  return true;
 8000f4a:	2301      	movs	r3, #1
  }
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	08006cc0 	.word	0x08006cc0

08000f58 <addAtCommand>:

bool addAtCommand(UART_HandleTypeDef *huart, uint8_t *String, uint16_t Size){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	4613      	mov	r3, r2
 8000f64:	80fb      	strh	r3, [r7, #6]
	printf("###################################################\n");
 8000f66:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <addAtCommand+0x60>)
 8000f68:	f004 fd16 	bl	8005998 <puts>
	HAL_Delay(500);
 8000f6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f70:	f000 fafe 	bl	8001570 <HAL_Delay>
	HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8000f74:	2025      	movs	r0, #37	; 0x25
 8000f76:	f000 fc46 	bl	8001806 <HAL_NVIC_DisableIRQ>
	if (PrintInfo(huart, String, Size) == true ){
 8000f7a:	88fb      	ldrh	r3, [r7, #6]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	68b9      	ldr	r1, [r7, #8]
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f7ff ffc9 	bl	8000f18 <PrintInfo>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d008      	beq.n	8000f9e <addAtCommand+0x46>
		HAL_Delay(300);
 8000f8c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f90:	f000 faee 	bl	8001570 <HAL_Delay>
		HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000f94:	2025      	movs	r0, #37	; 0x25
 8000f96:	f000 fc28 	bl	80017ea <HAL_NVIC_EnableIRQ>
		return true;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e007      	b.n	8000fae <addAtCommand+0x56>
	} else {
		HAL_Delay(300);
 8000f9e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000fa2:	f000 fae5 	bl	8001570 <HAL_Delay>
		HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000fa6:	2025      	movs	r0, #37	; 0x25
 8000fa8:	f000 fc1f 	bl	80017ea <HAL_NVIC_EnableIRQ>
		return false;
 8000fac:	2300      	movs	r3, #0
	}
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	08006cd4 	.word	0x08006cd4

08000fbc <StartReception>:
/**
  * @brief  This function prints user info on PC com port and initiates RX transfer
  * @retval None
  */
void StartReception(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* Initializes Buffer swap mechanism (used in User callback) :
     - 2 physical buffers aRXBufferA and aRXBufferB (RX_BUFFER_SIZE length)
  */
  pBufferReadyForReception = aRXBufferA;
 8000fc0:	4b10      	ldr	r3, [pc, #64]	; (8001004 <StartReception+0x48>)
 8000fc2:	4a11      	ldr	r2, [pc, #68]	; (8001008 <StartReception+0x4c>)
 8000fc4:	601a      	str	r2, [r3, #0]
  pBufferReadyForUser      = aRXBufferB;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <StartReception+0x50>)
 8000fc8:	4a11      	ldr	r2, [pc, #68]	; (8001010 <StartReception+0x54>)
 8000fca:	601a      	str	r2, [r3, #0]
  uwNbReceivedChars        = 0;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <StartReception+0x58>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]

  /* Print user info on PC com port */
  //printf("Command AT : %s\n",apConnectAlready);
  PrintInfo(&hlpuart1, at, COUNTOF(at));
 8000fd2:	2207      	movs	r2, #7
 8000fd4:	4910      	ldr	r1, [pc, #64]	; (8001018 <StartReception+0x5c>)
 8000fd6:	4811      	ldr	r0, [pc, #68]	; (800101c <StartReception+0x60>)
 8000fd8:	f7ff ff9e 	bl	8000f18 <PrintInfo>
     - DMA RX Transfer Complete event (TC)
     - IDLE event on UART Rx line (indicating a pause is UART reception flow)
  */
  //HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 2);
  //HAL_NVIC_EnableIRQ(LPUART1_IRQn);
  if (HAL_OK != HAL_UARTEx_ReceiveToIdle_DMA(&hlpuart1, aRXBufferUser, RX_BUFFER_SIZE))
 8000fdc:	2296      	movs	r2, #150	; 0x96
 8000fde:	4910      	ldr	r1, [pc, #64]	; (8001020 <StartReception+0x64>)
 8000fe0:	480e      	ldr	r0, [pc, #56]	; (800101c <StartReception+0x60>)
 8000fe2:	f004 fb43 	bl	800566c <HAL_UARTEx_ReceiveToIdle_DMA>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d005      	beq.n	8000ff8 <StartReception+0x3c>
  {
    Error_Handler();
 8000fec:	f7ff fc2f 	bl	800084e <Error_Handler>
    printf("StartReception Failed\n");
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <StartReception+0x68>)
 8000ff2:	f004 fcd1 	bl	8005998 <puts>
  } else {
	  printf("StartReception OK\n");
  }
}
 8000ff6:	e002      	b.n	8000ffe <StartReception+0x42>
	  printf("StartReception OK\n");
 8000ff8:	480b      	ldr	r0, [pc, #44]	; (8001028 <StartReception+0x6c>)
 8000ffa:	f004 fccd 	bl	8005998 <puts>
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000754 	.word	0x20000754
 8001008:	2000061c 	.word	0x2000061c
 800100c:	20000750 	.word	0x20000750
 8001010:	200006b4 	.word	0x200006b4
 8001014:	2000074c 	.word	0x2000074c
 8001018:	2000000c 	.word	0x2000000c
 800101c:	20000108 	.word	0x20000108
 8001020:	20000584 	.word	0x20000584
 8001024:	08006d08 	.word	0x08006d08
 8001028:	08006d20 	.word	0x08006d20

0800102c <Wifi_Send_Data>:

bool Wifi_Send_Data(char data[]){
 800102c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001030:	b08d      	sub	sp, #52	; 0x34
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	466b      	mov	r3, sp
 8001038:	60bb      	str	r3, [r7, #8]
	// start a TCP transmission
	addAtCommand(&hlpuart1, cipStart, COUNTOF(cipStart));
 800103a:	2228      	movs	r2, #40	; 0x28
 800103c:	4956      	ldr	r1, [pc, #344]	; (8001198 <Wifi_Send_Data+0x16c>)
 800103e:	4857      	ldr	r0, [pc, #348]	; (800119c <Wifi_Send_Data+0x170>)
 8001040:	f7ff ff8a 	bl	8000f58 <addAtCommand>

	// Init send data
	char dataLength[strlen(SendDataSize) + strlen(strlen(data)) + 3];
 8001044:	4856      	ldr	r0, [pc, #344]	; (80011a0 <Wifi_Send_Data+0x174>)
 8001046:	f7ff f89b 	bl	8000180 <strlen>
 800104a:	4606      	mov	r6, r0
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f7ff f897 	bl	8000180 <strlen>
 8001052:	4603      	mov	r3, r0
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff f893 	bl	8000180 <strlen>
 800105a:	4603      	mov	r3, r0
 800105c:	4433      	add	r3, r6
 800105e:	1cde      	adds	r6, r3, #3
 8001060:	4633      	mov	r3, r6
 8001062:	3b01      	subs	r3, #1
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001066:	2300      	movs	r3, #0
 8001068:	603e      	str	r6, [r7, #0]
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	00cb      	lsls	r3, r1, #3
 8001078:	6839      	ldr	r1, [r7, #0]
 800107a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800107e:	6839      	ldr	r1, [r7, #0]
 8001080:	00ca      	lsls	r2, r1, #3
 8001082:	2300      	movs	r3, #0
 8001084:	46b2      	mov	sl, r6
 8001086:	469b      	mov	fp, r3
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001094:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001098:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800109c:	1df3      	adds	r3, r6, #7
 800109e:	08db      	lsrs	r3, r3, #3
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	ebad 0d03 	sub.w	sp, sp, r3
 80010a6:	466b      	mov	r3, sp
 80010a8:	3300      	adds	r3, #0
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
	strcpy(dataLength, SendDataSize);
 80010ac:	493c      	ldr	r1, [pc, #240]	; (80011a0 <Wifi_Send_Data+0x174>)
 80010ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010b0:	f004 fca9 	bl	8005a06 <strcpy>
	char dataLen[10];
	sprintf(dataLen, "%d", (int)strlen(data));
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f7ff f863 	bl	8000180 <strlen>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4938      	ldr	r1, [pc, #224]	; (80011a4 <Wifi_Send_Data+0x178>)
 80010c4:	4618      	mov	r0, r3
 80010c6:	f004 fc6f 	bl	80059a8 <siprintf>
	strcat(dataLength, dataLen);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010d2:	f004 fc89 	bl	80059e8 <strcat>
	char returnLigne[3];
	strcpy(returnLigne, "\r\n");
 80010d6:	4a34      	ldr	r2, [pc, #208]	; (80011a8 <Wifi_Send_Data+0x17c>)
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	6812      	ldr	r2, [r2, #0]
 80010de:	4611      	mov	r1, r2
 80010e0:	8019      	strh	r1, [r3, #0]
 80010e2:	3302      	adds	r3, #2
 80010e4:	0c12      	lsrs	r2, r2, #16
 80010e6:	701a      	strb	r2, [r3, #0]
	strcat(dataLength, returnLigne);
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4619      	mov	r1, r3
 80010ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010f0:	f004 fc7a 	bl	80059e8 <strcat>
	addAtCommand(&hlpuart1, dataLength, COUNTOF(dataLength));
 80010f4:	b2b3      	uxth	r3, r6
 80010f6:	461a      	mov	r2, r3
 80010f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010fa:	4828      	ldr	r0, [pc, #160]	; (800119c <Wifi_Send_Data+0x170>)
 80010fc:	f7ff ff2c 	bl	8000f58 <addAtCommand>

	// Send actuel data
	char dataToSend[strlen(data) + 3]; // +3 pour les caractères "\r\n" et "\0"
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f7ff f83d 	bl	8000180 <strlen>
 8001106:	4603      	mov	r3, r0
 8001108:	1cde      	adds	r6, r3, #3
 800110a:	4633      	mov	r3, r6
 800110c:	3b01      	subs	r3, #1
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
 8001110:	2300      	movs	r3, #0
 8001112:	46b0      	mov	r8, r6
 8001114:	4699      	mov	r9, r3
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	f04f 0300 	mov.w	r3, #0
 800111e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001122:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001126:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800112a:	2300      	movs	r3, #0
 800112c:	4634      	mov	r4, r6
 800112e:	461d      	mov	r5, r3
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	00eb      	lsls	r3, r5, #3
 800113a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800113e:	00e2      	lsls	r2, r4, #3
 8001140:	1df3      	adds	r3, r6, #7
 8001142:	08db      	lsrs	r3, r3, #3
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	ebad 0d03 	sub.w	sp, sp, r3
 800114a:	466b      	mov	r3, sp
 800114c:	3300      	adds	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
	strcpy(dataToSend, "\r\n");
 8001150:	6a3b      	ldr	r3, [r7, #32]
 8001152:	4a15      	ldr	r2, [pc, #84]	; (80011a8 <Wifi_Send_Data+0x17c>)
 8001154:	8811      	ldrh	r1, [r2, #0]
 8001156:	7892      	ldrb	r2, [r2, #2]
 8001158:	8019      	strh	r1, [r3, #0]
 800115a:	709a      	strb	r2, [r3, #2]
	strcat(dataToSend, data);
 800115c:	68f9      	ldr	r1, [r7, #12]
 800115e:	6a38      	ldr	r0, [r7, #32]
 8001160:	f004 fc42 	bl	80059e8 <strcat>
	strcat(dataToSend,returnLigne);
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	4619      	mov	r1, r3
 800116a:	6a38      	ldr	r0, [r7, #32]
 800116c:	f004 fc3c 	bl	80059e8 <strcat>
	addAtCommand(&hlpuart1, dataToSend, COUNTOF(dataToSend));
 8001170:	b2b3      	uxth	r3, r6
 8001172:	461a      	mov	r2, r3
 8001174:	6a39      	ldr	r1, [r7, #32]
 8001176:	4809      	ldr	r0, [pc, #36]	; (800119c <Wifi_Send_Data+0x170>)
 8001178:	f7ff feee 	bl	8000f58 <addAtCommand>

	// close a TCP transmission
	addAtCommand(&hlpuart1, cipClose, COUNTOF(cipClose));
 800117c:	2210      	movs	r2, #16
 800117e:	490b      	ldr	r1, [pc, #44]	; (80011ac <Wifi_Send_Data+0x180>)
 8001180:	4806      	ldr	r0, [pc, #24]	; (800119c <Wifi_Send_Data+0x170>)
 8001182:	f7ff fee9 	bl	8000f58 <addAtCommand>
	return true;
 8001186:	2301      	movs	r3, #1
 8001188:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3734      	adds	r7, #52	; 0x34
 8001190:	46bd      	mov	sp, r7
 8001192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001196:	bf00      	nop
 8001198:	20000034 	.word	0x20000034
 800119c:	20000108 	.word	0x20000108
 80011a0:	2000006c 	.word	0x2000006c
 80011a4:	08006d34 	.word	0x08006d34
 80011a8:	08006d38 	.word	0x08006d38
 80011ac:	2000005c 	.word	0x2000005c

080011b0 <Wifi_Init>:

bool Wifi_Init(void){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	// start wifi reception
	StartReception();
 80011b4:	f7ff ff02 	bl	8000fbc <StartReception>
	// check if the wifi is already connected
	addAtCommand(&hlpuart1, apConnectAlready, COUNTOF(apConnectAlready));
 80011b8:	220e      	movs	r2, #14
 80011ba:	4907      	ldr	r1, [pc, #28]	; (80011d8 <Wifi_Init+0x28>)
 80011bc:	4807      	ldr	r0, [pc, #28]	; (80011dc <Wifi_Init+0x2c>)
 80011be:	f7ff fecb 	bl	8000f58 <addAtCommand>
	// set wifi mode to TCP transmission
    addAtCommand(&hlpuart1, cwMode, COUNTOF(cwMode));
 80011c2:	2210      	movs	r2, #16
 80011c4:	4906      	ldr	r1, [pc, #24]	; (80011e0 <Wifi_Init+0x30>)
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <Wifi_Init+0x2c>)
 80011c8:	f7ff fec6 	bl	8000f58 <addAtCommand>
    // send a Test message through wifi TCP transmission
    Wifi_Send_Data("Test");
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <Wifi_Init+0x34>)
 80011ce:	f7ff ff2d 	bl	800102c <Wifi_Send_Data>

    //return true;
}
 80011d2:	bf00      	nop
 80011d4:	4618      	mov	r0, r3
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000014 	.word	0x20000014
 80011dc:	20000108 	.word	0x20000108
 80011e0:	20000024 	.word	0x20000024
 80011e4:	08006d3c 	.word	0x08006d3c

080011e8 <UserDataTreatment>:
  * @param  huart UART handle.
  * @param  pData Pointer on received data buffer to be processed
  * @retval Size  Nb of received characters available in buffer
  */
void UserDataTreatment(UART_HandleTypeDef *huart, uint8_t* pData, uint16_t Size)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	4613      	mov	r3, r2
 80011f4:	80fb      	strh	r3, [r7, #6]
   *
   * pData and Size defines the buffer where received data have been copied, in order to be processed.
   * During this processing of already received data, reception is still ongoing.
   *
   */
  uint8_t* pBuff = pData;
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	617b      	str	r3, [r7, #20]
  uint8_t  i;

  //debug callback
  printf("Callback : %s\n",pData);
 80011fa:	68b9      	ldr	r1, [r7, #8]
 80011fc:	4829      	ldr	r0, [pc, #164]	; (80012a4 <UserDataTreatment+0xbc>)
 80011fe:	f004 fb45 	bl	800588c <iprintf>

  if(strstr((char*)pData, "FAIL") == NULL){
 8001202:	4929      	ldr	r1, [pc, #164]	; (80012a8 <UserDataTreatment+0xc0>)
 8001204:	68b8      	ldr	r0, [r7, #8]
 8001206:	f004 fc06 	bl	8005a16 <strstr>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d125      	bne.n	800125c <UserDataTreatment+0x74>
	  printf("Wifi Connect Successful !\n");
 8001210:	4826      	ldr	r0, [pc, #152]	; (80012ac <UserDataTreatment+0xc4>)
 8001212:	f004 fbc1 	bl	8005998 <puts>
	  //if(strstr((char*)pData, "WIFI CONNECTE") != NULL && strstr((char*)pData, "OK") != NULL)printf("Wifi Connect Successful !\n");
	  if(strstr((char*)pData, "+CWJAP:Res") != NULL && strstr((char*)pData, "OK") != NULL)printf("Wifi already Connected !\n");
 8001216:	4926      	ldr	r1, [pc, #152]	; (80012b0 <UserDataTreatment+0xc8>)
 8001218:	68b8      	ldr	r0, [r7, #8]
 800121a:	f004 fbfc 	bl	8005a16 <strstr>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d009      	beq.n	8001238 <UserDataTreatment+0x50>
 8001224:	4923      	ldr	r1, [pc, #140]	; (80012b4 <UserDataTreatment+0xcc>)
 8001226:	68b8      	ldr	r0, [r7, #8]
 8001228:	f004 fbf5 	bl	8005a16 <strstr>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d002      	beq.n	8001238 <UserDataTreatment+0x50>
 8001232:	4821      	ldr	r0, [pc, #132]	; (80012b8 <UserDataTreatment+0xd0>)
 8001234:	f004 fbb0 	bl	8005998 <puts>
	  if(strstr((char*)pData, "+CWMODE=1") != NULL && strstr((char*)pData, "OK") != NULL)printf("Wifi Mode TCP Connection OK !\n");
 8001238:	4920      	ldr	r1, [pc, #128]	; (80012bc <UserDataTreatment+0xd4>)
 800123a:	68b8      	ldr	r0, [r7, #8]
 800123c:	f004 fbeb 	bl	8005a16 <strstr>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00e      	beq.n	8001264 <UserDataTreatment+0x7c>
 8001246:	491b      	ldr	r1, [pc, #108]	; (80012b4 <UserDataTreatment+0xcc>)
 8001248:	68b8      	ldr	r0, [r7, #8]
 800124a:	f004 fbe4 	bl	8005a16 <strstr>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d007      	beq.n	8001264 <UserDataTreatment+0x7c>
 8001254:	481a      	ldr	r0, [pc, #104]	; (80012c0 <UserDataTreatment+0xd8>)
 8001256:	f004 fb9f 	bl	8005998 <puts>
 800125a:	e003      	b.n	8001264 <UserDataTreatment+0x7c>
  }else printf("Command %s Failed\n",pData);
 800125c:	68b9      	ldr	r1, [r7, #8]
 800125e:	4819      	ldr	r0, [pc, #100]	; (80012c4 <UserDataTreatment+0xdc>)
 8001260:	f004 fb14 	bl	800588c <iprintf>

  /* Implementation of loopback is on purpose implemented in direct register access,
     in order to be able to echo received characters as fast as they are received.
     Wait for TC flag to be raised at end of transmit is then removed, only TXE is checked */

  for (i = 0; i < Size; i++)
 8001264:	2300      	movs	r3, #0
 8001266:	74fb      	strb	r3, [r7, #19]
 8001268:	e012      	b.n	8001290 <UserDataTreatment+0xa8>
  {
    while (!(__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE))) {}
 800126a:	bf00      	nop
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001276:	2b80      	cmp	r3, #128	; 0x80
 8001278:	d1f8      	bne.n	800126c <UserDataTreatment+0x84>
    huart->Instance->TDR = *pBuff;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	781a      	ldrb	r2, [r3, #0]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	629a      	str	r2, [r3, #40]	; 0x28
    pBuff++;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	3301      	adds	r3, #1
 8001288:	617b      	str	r3, [r7, #20]
  for (i = 0; i < Size; i++)
 800128a:	7cfb      	ldrb	r3, [r7, #19]
 800128c:	3301      	adds	r3, #1
 800128e:	74fb      	strb	r3, [r7, #19]
 8001290:	7cfb      	ldrb	r3, [r7, #19]
 8001292:	b29b      	uxth	r3, r3
 8001294:	88fa      	ldrh	r2, [r7, #6]
 8001296:	429a      	cmp	r2, r3
 8001298:	d8e7      	bhi.n	800126a <UserDataTreatment+0x82>
  }
}
 800129a:	bf00      	nop
 800129c:	bf00      	nop
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	08006d44 	.word	0x08006d44
 80012a8:	08006d54 	.word	0x08006d54
 80012ac:	08006d5c 	.word	0x08006d5c
 80012b0:	08006d78 	.word	0x08006d78
 80012b4:	08006d84 	.word	0x08006d84
 80012b8:	08006d88 	.word	0x08006d88
 80012bc:	08006da4 	.word	0x08006da4
 80012c0:	08006db0 	.word	0x08006db0
 80012c4:	08006dd0 	.word	0x08006dd0

080012c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
  static uint8_t old_pos = 0;
  uint8_t *ptemp;
  uint8_t i;

  /* Check if number of received data in recpetion buffer has changed */
  if (Size != old_pos)
 80012d4:	4b41      	ldr	r3, [pc, #260]	; (80013dc <HAL_UARTEx_RxEventCallback+0x114>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b29b      	uxth	r3, r3
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d074      	beq.n	80013ca <HAL_UARTEx_RxEventCallback+0x102>
  {
    /* Check if position of index in reception buffer has simply be increased
       of if end of buffer has been reached */
    if (Size > old_pos)
 80012e0:	4b3e      	ldr	r3, [pc, #248]	; (80013dc <HAL_UARTEx_RxEventCallback+0x114>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d91e      	bls.n	800132a <HAL_UARTEx_RxEventCallback+0x62>
    {
      /* Current position is higher than previous one */
      uwNbReceivedChars = Size - old_pos;
 80012ec:	887b      	ldrh	r3, [r7, #2]
 80012ee:	4a3b      	ldr	r2, [pc, #236]	; (80013dc <HAL_UARTEx_RxEventCallback+0x114>)
 80012f0:	7812      	ldrb	r2, [r2, #0]
 80012f2:	1a9b      	subs	r3, r3, r2
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b3a      	ldr	r3, [pc, #232]	; (80013e0 <HAL_UARTEx_RxEventCallback+0x118>)
 80012f8:	601a      	str	r2, [r3, #0]
      /* Copy received data in "User" buffer for evacuation */
      for (i = 0; i < uwNbReceivedChars; i++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	73fb      	strb	r3, [r7, #15]
 80012fe:	e00e      	b.n	800131e <HAL_UARTEx_RxEventCallback+0x56>
      {
        pBufferReadyForUser[i] = aRXBufferUser[old_pos + i];
 8001300:	4b36      	ldr	r3, [pc, #216]	; (80013dc <HAL_UARTEx_RxEventCallback+0x114>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	441a      	add	r2, r3
 800130a:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <HAL_UARTEx_RxEventCallback+0x11c>)
 800130c:	6819      	ldr	r1, [r3, #0]
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	440b      	add	r3, r1
 8001312:	4935      	ldr	r1, [pc, #212]	; (80013e8 <HAL_UARTEx_RxEventCallback+0x120>)
 8001314:	5c8a      	ldrb	r2, [r1, r2]
 8001316:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < uwNbReceivedChars; i++)
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	3301      	adds	r3, #1
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	7bfa      	ldrb	r2, [r7, #15]
 8001320:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <HAL_UARTEx_RxEventCallback+0x118>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	d3eb      	bcc.n	8001300 <HAL_UARTEx_RxEventCallback+0x38>
 8001328:	e03c      	b.n	80013a4 <HAL_UARTEx_RxEventCallback+0xdc>
    }
    else
    {
      /* Current position is lower than previous one : end of buffer has been reached */
      /* First copy data from current position till end of buffer */
      uwNbReceivedChars = RX_BUFFER_SIZE - old_pos;
 800132a:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <HAL_UARTEx_RxEventCallback+0x114>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8001332:	461a      	mov	r2, r3
 8001334:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <HAL_UARTEx_RxEventCallback+0x118>)
 8001336:	601a      	str	r2, [r3, #0]
      /* Copy received data in "User" buffer for evacuation */
      for (i = 0; i < uwNbReceivedChars; i++)
 8001338:	2300      	movs	r3, #0
 800133a:	73fb      	strb	r3, [r7, #15]
 800133c:	e00e      	b.n	800135c <HAL_UARTEx_RxEventCallback+0x94>
      {
        pBufferReadyForUser[i] = aRXBufferUser[old_pos + i];
 800133e:	4b27      	ldr	r3, [pc, #156]	; (80013dc <HAL_UARTEx_RxEventCallback+0x114>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	441a      	add	r2, r3
 8001348:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <HAL_UARTEx_RxEventCallback+0x11c>)
 800134a:	6819      	ldr	r1, [r3, #0]
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	440b      	add	r3, r1
 8001350:	4925      	ldr	r1, [pc, #148]	; (80013e8 <HAL_UARTEx_RxEventCallback+0x120>)
 8001352:	5c8a      	ldrb	r2, [r1, r2]
 8001354:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < uwNbReceivedChars; i++)
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	3301      	adds	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
 800135c:	7bfa      	ldrb	r2, [r7, #15]
 800135e:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <HAL_UARTEx_RxEventCallback+0x118>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	d3eb      	bcc.n	800133e <HAL_UARTEx_RxEventCallback+0x76>
      }
      /* Check and continue with beginning of buffer */
      if (Size > 0)
 8001366:	887b      	ldrh	r3, [r7, #2]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d01b      	beq.n	80013a4 <HAL_UARTEx_RxEventCallback+0xdc>
      {
        for (i = 0; i < Size; i++)
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	e00d      	b.n	800138e <HAL_UARTEx_RxEventCallback+0xc6>
        {
          pBufferReadyForUser[uwNbReceivedChars + i] = aRXBufferUser[i];
 8001372:	7bfa      	ldrb	r2, [r7, #15]
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001376:	6819      	ldr	r1, [r3, #0]
 8001378:	7bf8      	ldrb	r0, [r7, #15]
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_UARTEx_RxEventCallback+0x118>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4403      	add	r3, r0
 8001380:	440b      	add	r3, r1
 8001382:	4919      	ldr	r1, [pc, #100]	; (80013e8 <HAL_UARTEx_RxEventCallback+0x120>)
 8001384:	5c8a      	ldrb	r2, [r1, r2]
 8001386:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < Size; i++)
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	3301      	adds	r3, #1
 800138c:	73fb      	strb	r3, [r7, #15]
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	b29b      	uxth	r3, r3
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	429a      	cmp	r2, r3
 8001396:	d8ec      	bhi.n	8001372 <HAL_UARTEx_RxEventCallback+0xaa>
        }
        uwNbReceivedChars += Size;
 8001398:	887a      	ldrh	r2, [r7, #2]
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_UARTEx_RxEventCallback+0x118>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	4a0f      	ldr	r2, [pc, #60]	; (80013e0 <HAL_UARTEx_RxEventCallback+0x118>)
 80013a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* Process received data that has been extracted from Rx User buffer */
    UserDataTreatment(huart, pBufferReadyForUser, uwNbReceivedChars);
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <HAL_UARTEx_RxEventCallback+0x11c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <HAL_UARTEx_RxEventCallback+0x118>)
 80013aa:	6812      	ldr	r2, [r2, #0]
 80013ac:	b292      	uxth	r2, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff19 	bl	80011e8 <UserDataTreatment>

    /* Swap buffers for next bytes to be processed */
    ptemp = pBufferReadyForUser;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <HAL_UARTEx_RxEventCallback+0x11c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	60bb      	str	r3, [r7, #8]
    pBufferReadyForUser = pBufferReadyForReception;
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_UARTEx_RxEventCallback+0x124>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a08      	ldr	r2, [pc, #32]	; (80013e4 <HAL_UARTEx_RxEventCallback+0x11c>)
 80013c2:	6013      	str	r3, [r2, #0]
    pBufferReadyForReception = ptemp;
 80013c4:	4a09      	ldr	r2, [pc, #36]	; (80013ec <HAL_UARTEx_RxEventCallback+0x124>)
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	6013      	str	r3, [r2, #0]
  }
  /* Update old_pos as new reference of position in User Rx buffer that
     indicates position to which data have been processed */
  old_pos = Size;
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4b03      	ldr	r3, [pc, #12]	; (80013dc <HAL_UARTEx_RxEventCallback+0x114>)
 80013d0:	701a      	strb	r2, [r3, #0]
}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000758 	.word	0x20000758
 80013e0:	2000074c 	.word	0x2000074c
 80013e4:	20000750 	.word	0x20000750
 80013e8:	20000584 	.word	0x20000584
 80013ec:	20000754 	.word	0x20000754

080013f0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80013f0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f4:	3304      	adds	r3, #4

080013f6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80013fa:	d3f9      	bcc.n	80013f0 <CopyDataInit>
  bx lr
 80013fc:	4770      	bx	lr

080013fe <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80013fe:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001400:	3004      	adds	r0, #4

08001402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001402:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001404:	d3fb      	bcc.n	80013fe <FillZerobss>
  bx lr
 8001406:	4770      	bx	lr

08001408 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800140a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800140c:	f7ff faf2 	bl	80009f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001410:	480b      	ldr	r0, [pc, #44]	; (8001440 <LoopForever+0x6>)
 8001412:	490c      	ldr	r1, [pc, #48]	; (8001444 <LoopForever+0xa>)
 8001414:	4a0c      	ldr	r2, [pc, #48]	; (8001448 <LoopForever+0xe>)
 8001416:	2300      	movs	r3, #0
 8001418:	f7ff ffed 	bl	80013f6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800141c:	480b      	ldr	r0, [pc, #44]	; (800144c <LoopForever+0x12>)
 800141e:	490c      	ldr	r1, [pc, #48]	; (8001450 <LoopForever+0x16>)
 8001420:	4a0c      	ldr	r2, [pc, #48]	; (8001454 <LoopForever+0x1a>)
 8001422:	2300      	movs	r3, #0
 8001424:	f7ff ffe7 	bl	80013f6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001428:	480b      	ldr	r0, [pc, #44]	; (8001458 <LoopForever+0x1e>)
 800142a:	490c      	ldr	r1, [pc, #48]	; (800145c <LoopForever+0x22>)
 800142c:	2300      	movs	r3, #0
 800142e:	f7ff ffe8 	bl	8001402 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001432:	f004 f9ff 	bl	8005834 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001436:	f7ff f962 	bl	80006fe <main>

0800143a <LoopForever>:

LoopForever:
  b LoopForever
 800143a:	e7fe      	b.n	800143a <LoopForever>
  ldr   r0, =_estack
 800143c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001440:	20000008 	.word	0x20000008
 8001444:	200000e8 	.word	0x200000e8
 8001448:	08006f80 	.word	0x08006f80
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800144c:	20030000 	.word	0x20030000
 8001450:	20030000 	.word	0x20030000
 8001454:	08007060 	.word	0x08007060
  INIT_BSS _sbss, _ebss
 8001458:	200000e8 	.word	0x200000e8
 800145c:	20000770 	.word	0x20000770

08001460 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <ADC1_IRQHandler>
	...

08001464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <HAL_Init+0x3c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <HAL_Init+0x3c>)
 8001474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001478:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147a:	2003      	movs	r0, #3
 800147c:	f000 f990 	bl	80017a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001480:	2000      	movs	r0, #0
 8001482:	f000 f80f 	bl	80014a4 <HAL_InitTick>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	71fb      	strb	r3, [r7, #7]
 8001490:	e001      	b.n	8001496 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001492:	f7ff f9e1 	bl	8000858 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001496:	79fb      	ldrb	r3, [r7, #7]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	58004000 	.word	0x58004000

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80014b0:	4b17      	ldr	r3, [pc, #92]	; (8001510 <HAL_InitTick+0x6c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d024      	beq.n	8001502 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014b8:	f002 f832 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 80014bc:	4602      	mov	r2, r0
 80014be:	4b14      	ldr	r3, [pc, #80]	; (8001510 <HAL_InitTick+0x6c>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	4619      	mov	r1, r3
 80014c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80014cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 f9a6 	bl	8001822 <HAL_SYSTICK_Config>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10f      	bne.n	80014fc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b0f      	cmp	r3, #15
 80014e0:	d809      	bhi.n	80014f6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e2:	2200      	movs	r2, #0
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	f04f 30ff 	mov.w	r0, #4294967295
 80014ea:	f000 f964 	bl	80017b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014ee:	4a09      	ldr	r2, [pc, #36]	; (8001514 <HAL_InitTick+0x70>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	e007      	b.n	8001506 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	73fb      	strb	r3, [r7, #15]
 80014fa:	e004      	b.n	8001506 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	73fb      	strb	r3, [r7, #15]
 8001500:	e001      	b.n	8001506 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001506:	7bfb      	ldrb	r3, [r7, #15]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000080 	.word	0x20000080
 8001514:	2000007c 	.word	0x2000007c

08001518 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_IncTick+0x20>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_IncTick+0x24>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4413      	add	r3, r2
 8001528:	4a04      	ldr	r2, [pc, #16]	; (800153c <HAL_IncTick+0x24>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000080 	.word	0x20000080
 800153c:	2000075c 	.word	0x2000075c

08001540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return uwTick;
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <HAL_GetTick+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	2000075c 	.word	0x2000075c

08001558 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <HAL_GetTickPrio+0x14>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	2000007c 	.word	0x2000007c

08001570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001578:	f7ff ffe2 	bl	8001540 <HAL_GetTick>
 800157c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001588:	d005      	beq.n	8001596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_Delay+0x44>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4413      	add	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001596:	bf00      	nop
 8001598:	f7ff ffd2 	bl	8001540 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d8f7      	bhi.n	8001598 <HAL_Delay+0x28>
  {
  }
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000080 	.word	0x20000080

080015b8 <__NVIC_SetPriorityGrouping>:
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d4:	4013      	ands	r3, r2
 80015d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ea:	4a04      	ldr	r2, [pc, #16]	; (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	60d3      	str	r3, [r2, #12]
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_GetPriorityGrouping>:
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <__NVIC_GetPriorityGrouping+0x18>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	f003 0307 	and.w	r3, r3, #7
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_EnableIRQ>:
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	2b00      	cmp	r3, #0
 800162c:	db0b      	blt.n	8001646 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	f003 021f 	and.w	r2, r3, #31
 8001634:	4907      	ldr	r1, [pc, #28]	; (8001654 <__NVIC_EnableIRQ+0x38>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	2001      	movs	r0, #1
 800163e:	fa00 f202 	lsl.w	r2, r0, r2
 8001642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000e100 	.word	0xe000e100

08001658 <__NVIC_DisableIRQ>:
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	2b00      	cmp	r3, #0
 8001668:	db12      	blt.n	8001690 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	f003 021f 	and.w	r2, r3, #31
 8001670:	490a      	ldr	r1, [pc, #40]	; (800169c <__NVIC_DisableIRQ+0x44>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	095b      	lsrs	r3, r3, #5
 8001678:	2001      	movs	r0, #1
 800167a:	fa00 f202 	lsl.w	r2, r0, r2
 800167e:	3320      	adds	r3, #32
 8001680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001684:	f3bf 8f4f 	dsb	sy
}
 8001688:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800168a:	f3bf 8f6f 	isb	sy
}
 800168e:	bf00      	nop
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000e100 	.word	0xe000e100

080016a0 <__NVIC_SetPriority>:
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	db0a      	blt.n	80016ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	490c      	ldr	r1, [pc, #48]	; (80016ec <__NVIC_SetPriority+0x4c>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	0112      	lsls	r2, r2, #4
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	440b      	add	r3, r1
 80016c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016c8:	e00a      	b.n	80016e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4908      	ldr	r1, [pc, #32]	; (80016f0 <__NVIC_SetPriority+0x50>)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	3b04      	subs	r3, #4
 80016d8:	0112      	lsls	r2, r2, #4
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	440b      	add	r3, r1
 80016de:	761a      	strb	r2, [r3, #24]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000e100 	.word	0xe000e100
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <NVIC_EncodePriority>:
{
 80016f4:	b480      	push	{r7}
 80016f6:	b089      	sub	sp, #36	; 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f1c3 0307 	rsb	r3, r3, #7
 800170e:	2b04      	cmp	r3, #4
 8001710:	bf28      	it	cs
 8001712:	2304      	movcs	r3, #4
 8001714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3304      	adds	r3, #4
 800171a:	2b06      	cmp	r3, #6
 800171c:	d902      	bls.n	8001724 <NVIC_EncodePriority+0x30>
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3b03      	subs	r3, #3
 8001722:	e000      	b.n	8001726 <NVIC_EncodePriority+0x32>
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	f04f 32ff 	mov.w	r2, #4294967295
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	401a      	ands	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800173c:	f04f 31ff 	mov.w	r1, #4294967295
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	43d9      	mvns	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	4313      	orrs	r3, r2
}
 800174e:	4618      	mov	r0, r3
 8001750:	3724      	adds	r7, #36	; 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <SysTick_Config>:
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800176c:	d301      	bcc.n	8001772 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800176e:	2301      	movs	r3, #1
 8001770:	e00f      	b.n	8001792 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <SysTick_Config+0x40>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177a:	210f      	movs	r1, #15
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f7ff ff8e 	bl	80016a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <SysTick_Config+0x40>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <SysTick_Config+0x40>)
 800178c:	2207      	movs	r2, #7
 800178e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	e000e010 	.word	0xe000e010

080017a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff05 	bl	80015b8 <__NVIC_SetPriorityGrouping>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017c4:	f7ff ff1c 	bl	8001600 <__NVIC_GetPriorityGrouping>
 80017c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	6978      	ldr	r0, [r7, #20]
 80017d0:	f7ff ff90 	bl	80016f4 <NVIC_EncodePriority>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff5f 	bl	80016a0 <__NVIC_SetPriority>
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff0f 	bl	800161c <__NVIC_EnableIRQ>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff1f 	bl	8001658 <__NVIC_DisableIRQ>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ff96 	bl	800175c <SysTick_Config>
 8001830:	4603      	mov	r3, r0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e08e      	b.n	800196c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	4b47      	ldr	r3, [pc, #284]	; (8001974 <HAL_DMA_Init+0x138>)
 8001856:	429a      	cmp	r2, r3
 8001858:	d80f      	bhi.n	800187a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	4b45      	ldr	r3, [pc, #276]	; (8001978 <HAL_DMA_Init+0x13c>)
 8001862:	4413      	add	r3, r2
 8001864:	4a45      	ldr	r2, [pc, #276]	; (800197c <HAL_DMA_Init+0x140>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	091b      	lsrs	r3, r3, #4
 800186c:	009a      	lsls	r2, r3, #2
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a42      	ldr	r2, [pc, #264]	; (8001980 <HAL_DMA_Init+0x144>)
 8001876:	641a      	str	r2, [r3, #64]	; 0x40
 8001878:	e00e      	b.n	8001898 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	4b40      	ldr	r3, [pc, #256]	; (8001984 <HAL_DMA_Init+0x148>)
 8001882:	4413      	add	r3, r2
 8001884:	4a3d      	ldr	r2, [pc, #244]	; (800197c <HAL_DMA_Init+0x140>)
 8001886:	fba2 2303 	umull	r2, r3, r2, r3
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	009a      	lsls	r2, r3, #2
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a3c      	ldr	r2, [pc, #240]	; (8001988 <HAL_DMA_Init+0x14c>)
 8001896:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2202      	movs	r2, #2
 800189c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80018ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	4313      	orrs	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 fa74 	bl	8001dd8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018f8:	d102      	bne.n	8001900 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001908:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800190c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001916:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d010      	beq.n	8001942 <HAL_DMA_Init+0x106>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b04      	cmp	r3, #4
 8001926:	d80c      	bhi.n	8001942 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 fa93 	bl	8001e54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	e008      	b.n	8001954 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40020407 	.word	0x40020407
 8001978:	bffdfff8 	.word	0xbffdfff8
 800197c:	cccccccd 	.word	0xcccccccd
 8001980:	40020000 	.word	0x40020000
 8001984:	bffdfbf8 	.word	0xbffdfbf8
 8001988:	40020400 	.word	0x40020400

0800198c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <HAL_DMA_Start_IT+0x20>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e066      	b.n	8001a7a <HAL_DMA_Start_IT+0xee>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d155      	bne.n	8001a6c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2202      	movs	r2, #2
 80019c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0201 	bic.w	r2, r2, #1
 80019dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	68b9      	ldr	r1, [r7, #8]
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 f9b9 	bl	8001d5c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d008      	beq.n	8001a04 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 020e 	orr.w	r2, r2, #14
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	e00f      	b.n	8001a24 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0204 	bic.w	r2, r2, #4
 8001a12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 020a 	orr.w	r2, r2, #10
 8001a22:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d007      	beq.n	8001a42 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a40:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d007      	beq.n	8001a5a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a58:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f042 0201 	orr.w	r2, r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	e005      	b.n	8001a78 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a74:	2302      	movs	r3, #2
 8001a76:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e04f      	b.n	8001b34 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d008      	beq.n	8001ab2 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e040      	b.n	8001b34 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 020e 	bic.w	r2, r2, #14
 8001ac0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001acc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ad0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0201 	bic.w	r2, r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	f003 021c 	and.w	r2, r3, #28
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	2101      	movs	r1, #1
 8001af0:	fa01 f202 	lsl.w	r2, r1, r2
 8001af4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001afe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00c      	beq.n	8001b22 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b16:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b20:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d005      	beq.n	8001b64 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2204      	movs	r2, #4
 8001b5c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	73fb      	strb	r3, [r7, #15]
 8001b62:	e047      	b.n	8001bf4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 020e 	bic.w	r2, r2, #14
 8001b72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0201 	bic.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b98:	f003 021c 	and.w	r2, r3, #28
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bb0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00c      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bc8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001bd2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	4798      	blx	r3
    }
  }
  return status;
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b084      	sub	sp, #16
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	f003 031c 	and.w	r3, r3, #28
 8001c1e:	2204      	movs	r2, #4
 8001c20:	409a      	lsls	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4013      	ands	r3, r2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d026      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x7a>
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d021      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0320 	and.w	r3, r3, #32
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d107      	bne.n	8001c52 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0204 	bic.w	r2, r2, #4
 8001c50:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	f003 021c 	and.w	r2, r3, #28
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	2104      	movs	r1, #4
 8001c60:	fa01 f202 	lsl.w	r2, r1, r2
 8001c64:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d071      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001c76:	e06c      	b.n	8001d52 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7c:	f003 031c 	and.w	r3, r3, #28
 8001c80:	2202      	movs	r2, #2
 8001c82:	409a      	lsls	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d02e      	beq.n	8001cea <HAL_DMA_IRQHandler+0xec>
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d029      	beq.n	8001cea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0320 	and.w	r3, r3, #32
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10b      	bne.n	8001cbc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 020a 	bic.w	r2, r2, #10
 8001cb2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc0:	f003 021c 	and.w	r2, r3, #28
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	2102      	movs	r1, #2
 8001cca:	fa01 f202 	lsl.w	r2, r1, r2
 8001cce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d038      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001ce8:	e033      	b.n	8001d52 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	f003 031c 	and.w	r3, r3, #28
 8001cf2:	2208      	movs	r2, #8
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d02a      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x156>
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d025      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 020e 	bic.w	r2, r2, #14
 8001d16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1c:	f003 021c 	and.w	r2, r3, #28
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	2101      	movs	r1, #1
 8001d26:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d004      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d52:	bf00      	nop
 8001d54:	bf00      	nop
}
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
 8001d68:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d72:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d004      	beq.n	8001d86 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d84:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	f003 021c 	and.w	r2, r3, #28
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	2101      	movs	r1, #1
 8001d94:	fa01 f202 	lsl.w	r2, r1, r2
 8001d98:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b10      	cmp	r3, #16
 8001da8:	d108      	bne.n	8001dbc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001dba:	e007      	b.n	8001dcc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	60da      	str	r2, [r3, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d80a      	bhi.n	8001e02 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df0:	089b      	lsrs	r3, r3, #2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001df8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6493      	str	r3, [r2, #72]	; 0x48
 8001e00:	e007      	b.n	8001e12 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	089b      	lsrs	r3, r3, #2
 8001e08:	009a      	lsls	r2, r3, #2
 8001e0a:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001e0c:	4413      	add	r3, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	3b08      	subs	r3, #8
 8001e1a:	4a0c      	ldr	r2, [pc, #48]	; (8001e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001e28:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	2201      	movs	r2, #1
 8001e32:	409a      	lsls	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	40020407 	.word	0x40020407
 8001e48:	4002081c 	.word	0x4002081c
 8001e4c:	cccccccd 	.word	0xcccccccd
 8001e50:	40020880 	.word	0x40020880

08001e54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e64:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	461a      	mov	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8001e78:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	2201      	movs	r2, #1
 8001e84:	409a      	lsls	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001e8a:	bf00      	nop
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	1000823f 	.word	0x1000823f
 8001e9c:	40020940 	.word	0x40020940

08001ea0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eae:	e14c      	b.n	800214a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 813e 	beq.w	8002144 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d005      	beq.n	8001ee0 <HAL_GPIO_Init+0x40>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d130      	bne.n	8001f42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f16:	2201      	movs	r2, #1
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	f003 0201 	and.w	r2, r3, #1
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d017      	beq.n	8001f7e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d123      	bne.n	8001fd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	08da      	lsrs	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3208      	adds	r2, #8
 8001f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	08da      	lsrs	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3208      	adds	r2, #8
 8001fcc:	6939      	ldr	r1, [r7, #16]
 8001fce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	2203      	movs	r2, #3
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0203 	and.w	r2, r3, #3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8098 	beq.w	8002144 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002014:	4a54      	ldr	r2, [pc, #336]	; (8002168 <HAL_GPIO_Init+0x2c8>)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	3302      	adds	r3, #2
 800201c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	220f      	movs	r2, #15
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800203e:	d019      	beq.n	8002074 <HAL_GPIO_Init+0x1d4>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a4a      	ldr	r2, [pc, #296]	; (800216c <HAL_GPIO_Init+0x2cc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d013      	beq.n	8002070 <HAL_GPIO_Init+0x1d0>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a49      	ldr	r2, [pc, #292]	; (8002170 <HAL_GPIO_Init+0x2d0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00d      	beq.n	800206c <HAL_GPIO_Init+0x1cc>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a48      	ldr	r2, [pc, #288]	; (8002174 <HAL_GPIO_Init+0x2d4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d007      	beq.n	8002068 <HAL_GPIO_Init+0x1c8>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a47      	ldr	r2, [pc, #284]	; (8002178 <HAL_GPIO_Init+0x2d8>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d101      	bne.n	8002064 <HAL_GPIO_Init+0x1c4>
 8002060:	2304      	movs	r3, #4
 8002062:	e008      	b.n	8002076 <HAL_GPIO_Init+0x1d6>
 8002064:	2307      	movs	r3, #7
 8002066:	e006      	b.n	8002076 <HAL_GPIO_Init+0x1d6>
 8002068:	2303      	movs	r3, #3
 800206a:	e004      	b.n	8002076 <HAL_GPIO_Init+0x1d6>
 800206c:	2302      	movs	r3, #2
 800206e:	e002      	b.n	8002076 <HAL_GPIO_Init+0x1d6>
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <HAL_GPIO_Init+0x1d6>
 8002074:	2300      	movs	r3, #0
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	f002 0203 	and.w	r2, r2, #3
 800207c:	0092      	lsls	r2, r2, #2
 800207e:	4093      	lsls	r3, r2
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002086:	4938      	ldr	r1, [pc, #224]	; (8002168 <HAL_GPIO_Init+0x2c8>)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	3302      	adds	r3, #2
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002094:	4b39      	ldr	r3, [pc, #228]	; (800217c <HAL_GPIO_Init+0x2dc>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	43db      	mvns	r3, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020b8:	4a30      	ldr	r2, [pc, #192]	; (800217c <HAL_GPIO_Init+0x2dc>)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020be:	4b2f      	ldr	r3, [pc, #188]	; (800217c <HAL_GPIO_Init+0x2dc>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4013      	ands	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020e2:	4a26      	ldr	r2, [pc, #152]	; (800217c <HAL_GPIO_Init+0x2dc>)
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020e8:	4b24      	ldr	r3, [pc, #144]	; (800217c <HAL_GPIO_Init+0x2dc>)
 80020ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800210e:	4a1b      	ldr	r2, [pc, #108]	; (800217c <HAL_GPIO_Init+0x2dc>)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <HAL_GPIO_Init+0x2dc>)
 8002118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800211c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	43db      	mvns	r3, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4013      	ands	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4313      	orrs	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800213c:	4a0f      	ldr	r2, [pc, #60]	; (800217c <HAL_GPIO_Init+0x2dc>)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	3301      	adds	r3, #1
 8002148:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	fa22 f303 	lsr.w	r3, r2, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	f47f aeab 	bne.w	8001eb0 <HAL_GPIO_Init+0x10>
  }
}
 800215a:	bf00      	nop
 800215c:	bf00      	nop
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	40010000 	.word	0x40010000
 800216c:	48000400 	.word	0x48000400
 8002170:	48000800 	.word	0x48000800
 8002174:	48000c00 	.word	0x48000c00
 8002178:	48001000 	.word	0x48001000
 800217c:	58000800 	.word	0x58000800

08002180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	807b      	strh	r3, [r7, #2]
 800218c:	4613      	mov	r3, r2
 800218e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002190:	787b      	ldrb	r3, [r7, #1]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002196:	887a      	ldrh	r2, [r7, #2]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800219c:	e002      	b.n	80021a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b2:	b08b      	sub	sp, #44	; 0x2c
 80021b4:	af06      	add	r7, sp, #24
 80021b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0cb      	b.n	800235a <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d106      	bne.n	80021dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7fe fe48 	bl	8000e6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2203      	movs	r2, #3
 80021e0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f003 fae1 	bl	80057b0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ee:	2300      	movs	r3, #0
 80021f0:	73fb      	strb	r3, [r7, #15]
 80021f2:	e040      	b.n	8002276 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	440b      	add	r3, r1
 8002204:	3301      	adds	r3, #1
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	440b      	add	r3, r1
 800221a:	7bfa      	ldrb	r2, [r7, #15]
 800221c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	440b      	add	r3, r1
 800222e:	3303      	adds	r3, #3
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002234:	7bfa      	ldrb	r2, [r7, #15]
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	440b      	add	r3, r1
 8002242:	3338      	adds	r3, #56	; 0x38
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	440b      	add	r3, r1
 8002256:	333c      	adds	r3, #60	; 0x3c
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800225c:	7bfa      	ldrb	r2, [r7, #15]
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	440b      	add	r3, r1
 800226a:	3340      	adds	r3, #64	; 0x40
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	3301      	adds	r3, #1
 8002274:	73fb      	strb	r3, [r7, #15]
 8002276:	7bfa      	ldrb	r2, [r7, #15]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	d3b9      	bcc.n	80021f4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]
 8002284:	e044      	b.n	8002310 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002286:	7bfa      	ldrb	r2, [r7, #15]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	440b      	add	r3, r1
 8002294:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800229c:	7bfa      	ldrb	r2, [r7, #15]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	440b      	add	r3, r1
 80022aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022b2:	7bfa      	ldrb	r2, [r7, #15]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	440b      	add	r3, r1
 80022c0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80022c4:	2200      	movs	r2, #0
 80022c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022c8:	7bfa      	ldrb	r2, [r7, #15]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	440b      	add	r3, r1
 80022d6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022de:	7bfa      	ldrb	r2, [r7, #15]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	440b      	add	r3, r1
 80022ec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022f4:	7bfa      	ldrb	r2, [r7, #15]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	440b      	add	r3, r1
 8002302:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	3301      	adds	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	429a      	cmp	r2, r3
 8002318:	d3b5      	bcc.n	8002286 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	687e      	ldr	r6, [r7, #4]
 8002322:	466d      	mov	r5, sp
 8002324:	f106 0410 	add.w	r4, r6, #16
 8002328:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800232a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800232c:	6823      	ldr	r3, [r4, #0]
 800232e:	602b      	str	r3, [r5, #0]
 8002330:	1d33      	adds	r3, r6, #4
 8002332:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002334:	6838      	ldr	r0, [r7, #0]
 8002336:	f003 fa56 	bl	80057e6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d102      	bne.n	8002358 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f805 	bl	8002362 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002362 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002362:	b480      	push	{r7}
 8002364:	b085      	sub	sp, #20
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002386:	b29b      	uxth	r3, r3
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800239a:	b29b      	uxth	r3, r3
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c6:	6013      	str	r3, [r2, #0]
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	58000400 	.word	0x58000400

080023d8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	58000400 	.word	0x58000400

080023f4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80023f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002406:	d101      	bne.n	800240c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_RCC_HSE_Enable>:
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800241c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242a:	6013      	str	r3, [r2, #0]
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <LL_RCC_HSE_Disable>:
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800243a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002448:	6013      	str	r3, [r2, #0]
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_RCC_HSE_IsReady>:
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002466:	d101      	bne.n	800246c <LL_RCC_HSE_IsReady+0x18>
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <LL_RCC_HSE_IsReady+0x1a>
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <LL_RCC_HSI_Enable>:
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800247c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248a:	6013      	str	r3, [r2, #0]
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <LL_RCC_HSI_Disable>:
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800249a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024a8:	6013      	str	r3, [r2, #0]
}
 80024aa:	bf00      	nop
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_RCC_HSI_IsReady>:
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80024b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c6:	d101      	bne.n	80024cc <LL_RCC_HSI_IsReady+0x18>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <LL_RCC_HSI_IsReady+0x1a>
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80024e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	061b      	lsls	r3, r3, #24
 80024ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024f2:	4313      	orrs	r3, r2
 80024f4:	604b      	str	r3, [r1, #4]
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <LL_RCC_HSI48_Enable>:
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800250e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <LL_RCC_HSI48_Disable>:
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <LL_RCC_HSI48_IsReady>:
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800254a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b02      	cmp	r3, #2
 8002558:	d101      	bne.n	800255e <LL_RCC_HSI48_IsReady+0x18>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <LL_RCC_HSI48_IsReady+0x1a>
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <LL_RCC_LSE_Enable>:
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800256e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <LL_RCC_LSE_Disable>:
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800259c:	f023 0301 	bic.w	r3, r3, #1
 80025a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <LL_RCC_LSE_EnableBypass>:
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80025b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025be:	f043 0304 	orr.w	r3, r3, #4
 80025c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_RCC_LSE_DisableBypass>:
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80025d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025e0:	f023 0304 	bic.w	r3, r3, #4
 80025e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80025f2:	b480      	push	{r7}
 80025f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80025f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b02      	cmp	r3, #2
 8002604:	d101      	bne.n	800260a <LL_RCC_LSE_IsReady+0x18>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <LL_RCC_LSE_IsReady+0x1a>
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800261a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002622:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800262e:	bf00      	nop
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800263c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002644:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800265e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b02      	cmp	r3, #2
 800266c:	d101      	bne.n	8002672 <LL_RCC_LSI1_IsReady+0x18>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <LL_RCC_LSI1_IsReady+0x1a>
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800268a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800268e:	f043 0304 	orr.w	r3, r3, #4
 8002692:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002696:	bf00      	nop
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80026a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026b0:	f023 0304 	bic.w	r3, r3, #4
 80026b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80026c2:	b480      	push	{r7}
 80026c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80026c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d101      	bne.n	80026da <LL_RCC_LSI2_IsReady+0x18>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <LL_RCC_LSI2_IsReady+0x1a>
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80026ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6013      	str	r3, [r2, #0]
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	6013      	str	r3, [r2, #0]
}
 8002746:	bf00      	nop
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b02      	cmp	r3, #2
 8002760:	d101      	bne.n	8002766 <LL_RCC_MSI_IsReady+0x16>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <LL_RCC_MSI_IsReady+0x18>
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800277a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002784:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80027a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027aa:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2bb0      	cmp	r3, #176	; 0xb0
 80027b0:	d901      	bls.n	80027b6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80027b2:	23b0      	movs	r3, #176	; 0xb0
 80027b4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80027b6:	687b      	ldr	r3, [r7, #4]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80027cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	021b      	lsls	r3, r3, #8
 80027da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027de:	4313      	orrs	r3, r2
 80027e0:	604b      	str	r3, [r1, #4]
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80027f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f023 0203 	bic.w	r2, r3, #3
 8002800:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4313      	orrs	r3, r2
 8002808:	608b      	str	r3, [r1, #8]
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800281a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 030c 	and.w	r3, r3, #12
}
 8002824:	4618      	mov	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002840:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4313      	orrs	r3, r2
 8002848:	608b      	str	r3, [r1, #8]
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800285e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002862:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002866:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800286a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800288a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002892:	f023 020f 	bic.w	r2, r3, #15
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80028b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	608b      	str	r3, [r1, #8]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80028e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	608b      	str	r3, [r1, #8]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800290e:	4618      	mov	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800291c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002920:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800292a:	4618      	mov	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002942:	4618      	mov	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800295a:	4618      	mov	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002976:	6013      	str	r3, [r2, #0]
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002990:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002994:	6013      	str	r3, [r2, #0]
}
 8002996:	bf00      	nop
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80029a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029b2:	d101      	bne.n	80029b8 <LL_RCC_PLL_IsReady+0x18>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <LL_RCC_PLL_IsReady+0x1a>
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80029c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	0a1b      	lsrs	r3, r3, #8
 80029d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80029e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80029f6:	b480      	push	{r7}
 80029f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80029fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0303 	and.w	r3, r3, #3
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a38:	d101      	bne.n	8002a3e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a52:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a5e:	d101      	bne.n	8002a64 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a78:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a84:	d101      	bne.n	8002a8a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002aa8:	d101      	bne.n	8002aae <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002acc:	d101      	bne.n	8002ad2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b08d      	sub	sp, #52	; 0x34
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e363      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 808d 	beq.w	8002c1a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b00:	f7ff fe89 	bl	8002816 <LL_RCC_GetSysClkSource>
 8002b04:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b06:	f7ff ff82 	bl	8002a0e <LL_RCC_PLL_GetMainSource>
 8002b0a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <HAL_RCC_OscConfig+0x3e>
 8002b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b14:	2b0c      	cmp	r3, #12
 8002b16:	d147      	bne.n	8002ba8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d144      	bne.n	8002ba8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e347      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002b2e:	f7ff fe34 	bl	800279a <LL_RCC_MSI_GetRange>
 8002b32:	4603      	mov	r3, r0
 8002b34:	429c      	cmp	r4, r3
 8002b36:	d914      	bls.n	8002b62 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 fd2f 	bl	80035a0 <RCC_SetFlashLatencyFromMSIRange>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e336      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fe0e 	bl	8002772 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fe32 	bl	80027c4 <LL_RCC_MSI_SetCalibTrimming>
 8002b60:	e013      	b.n	8002b8a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fe03 	bl	8002772 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fe27 	bl	80027c4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fd10 	bl	80035a0 <RCC_SetFlashLatencyFromMSIRange>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e317      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b8a:	f000 fcc9 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	4aa4      	ldr	r2, [pc, #656]	; (8002e24 <HAL_RCC_OscConfig+0x344>)
 8002b92:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b94:	4ba4      	ldr	r3, [pc, #656]	; (8002e28 <HAL_RCC_OscConfig+0x348>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fe fc83 	bl	80014a4 <HAL_InitTick>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d039      	beq.n	8002c18 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e308      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d01e      	beq.n	8002bee <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bb0:	f7ff fdb0 	bl	8002714 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fcc4 	bl	8001540 <HAL_GetTick>
 8002bb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bbc:	f7fe fcc0 	bl	8001540 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e2f5      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002bce:	f7ff fdbf 	bl	8002750 <LL_RCC_MSI_IsReady>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f1      	beq.n	8002bbc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fdc8 	bl	8002772 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fdec 	bl	80027c4 <LL_RCC_MSI_SetCalibTrimming>
 8002bec:	e015      	b.n	8002c1a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bee:	f7ff fda0 	bl	8002732 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bf2:	f7fe fca5 	bl	8001540 <HAL_GetTick>
 8002bf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bfa:	f7fe fca1 	bl	8001540 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e2d6      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002c0c:	f7ff fda0 	bl	8002750 <LL_RCC_MSI_IsReady>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f1      	bne.n	8002bfa <HAL_RCC_OscConfig+0x11a>
 8002c16:	e000      	b.n	8002c1a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002c18:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d047      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c26:	f7ff fdf6 	bl	8002816 <LL_RCC_GetSysClkSource>
 8002c2a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c2c:	f7ff feef 	bl	8002a0e <LL_RCC_PLL_GetMainSource>
 8002c30:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_OscConfig+0x164>
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	2b0c      	cmp	r3, #12
 8002c3c:	d108      	bne.n	8002c50 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d105      	bne.n	8002c50 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d134      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e2b4      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c58:	d102      	bne.n	8002c60 <HAL_RCC_OscConfig+0x180>
 8002c5a:	f7ff fbdd 	bl	8002418 <LL_RCC_HSE_Enable>
 8002c5e:	e001      	b.n	8002c64 <HAL_RCC_OscConfig+0x184>
 8002c60:	f7ff fbe9 	bl	8002436 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d012      	beq.n	8002c92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6c:	f7fe fc68 	bl	8001540 <HAL_GetTick>
 8002c70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c74:	f7fe fc64 	bl	8001540 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b64      	cmp	r3, #100	; 0x64
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e299      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002c86:	f7ff fbe5 	bl	8002454 <LL_RCC_HSE_IsReady>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f1      	beq.n	8002c74 <HAL_RCC_OscConfig+0x194>
 8002c90:	e011      	b.n	8002cb6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c92:	f7fe fc55 	bl	8001540 <HAL_GetTick>
 8002c96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c9a:	f7fe fc51 	bl	8001540 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b64      	cmp	r3, #100	; 0x64
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e286      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002cac:	f7ff fbd2 	bl	8002454 <LL_RCC_HSE_IsReady>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f1      	bne.n	8002c9a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d04c      	beq.n	8002d5c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cc2:	f7ff fda8 	bl	8002816 <LL_RCC_GetSysClkSource>
 8002cc6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cc8:	f7ff fea1 	bl	8002a0e <LL_RCC_PLL_GetMainSource>
 8002ccc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d005      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x200>
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b0c      	cmp	r3, #12
 8002cd8:	d10e      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d10b      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e266      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fbf1 	bl	80024d8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002cf6:	e031      	b.n	8002d5c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d019      	beq.n	8002d34 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d00:	f7ff fbba 	bl	8002478 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fe fc1c 	bl	8001540 <HAL_GetTick>
 8002d08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d0c:	f7fe fc18 	bl	8001540 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e24d      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002d1e:	f7ff fbc9 	bl	80024b4 <LL_RCC_HSI_IsReady>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f1      	beq.n	8002d0c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fbd3 	bl	80024d8 <LL_RCC_HSI_SetCalibTrimming>
 8002d32:	e013      	b.n	8002d5c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d34:	f7ff fbaf 	bl	8002496 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7fe fc02 	bl	8001540 <HAL_GetTick>
 8002d3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d40:	f7fe fbfe 	bl	8001540 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e233      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002d52:	f7ff fbaf 	bl	80024b4 <LL_RCC_HSI_IsReady>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1f1      	bne.n	8002d40 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d106      	bne.n	8002d76 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 80a3 	beq.w	8002ebc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d076      	beq.n	8002e6c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d046      	beq.n	8002e18 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002d8a:	f7ff fc66 	bl	800265a <LL_RCC_LSI1_IsReady>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d113      	bne.n	8002dbc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002d94:	f7ff fc3f 	bl	8002616 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d98:	f7fe fbd2 	bl	8001540 <HAL_GetTick>
 8002d9c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002da0:	f7fe fbce 	bl	8001540 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e203      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002db2:	f7ff fc52 	bl	800265a <LL_RCC_LSI1_IsReady>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f1      	beq.n	8002da0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002dbc:	f7ff fc5f 	bl	800267e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fbbe 	bl	8001540 <HAL_GetTick>
 8002dc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002dc8:	f7fe fbba 	bl	8001540 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e1ef      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002dda:	f7ff fc72 	bl	80026c2 <LL_RCC_LSI2_IsReady>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0f1      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff fc7c 	bl	80026e6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002dee:	f7ff fc23 	bl	8002638 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df2:	f7fe fba5 	bl	8001540 <HAL_GetTick>
 8002df6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002dfa:	f7fe fba1 	bl	8001540 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e1d6      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002e0c:	f7ff fc25 	bl	800265a <LL_RCC_LSI1_IsReady>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f1      	bne.n	8002dfa <HAL_RCC_OscConfig+0x31a>
 8002e16:	e051      	b.n	8002ebc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002e18:	f7ff fbfd 	bl	8002616 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7fe fb90 	bl	8001540 <HAL_GetTick>
 8002e20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002e22:	e00c      	b.n	8002e3e <HAL_RCC_OscConfig+0x35e>
 8002e24:	20000008 	.word	0x20000008
 8002e28:	2000007c 	.word	0x2000007c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002e2c:	f7fe fb88 	bl	8001540 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e1bd      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002e3e:	f7ff fc0c 	bl	800265a <LL_RCC_LSI1_IsReady>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f1      	beq.n	8002e2c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002e48:	f7ff fc2a 	bl	80026a0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002e4e:	f7fe fb77 	bl	8001540 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e1ac      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002e60:	f7ff fc2f 	bl	80026c2 <LL_RCC_LSI2_IsReady>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f1      	bne.n	8002e4e <HAL_RCC_OscConfig+0x36e>
 8002e6a:	e027      	b.n	8002ebc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002e6c:	f7ff fc18 	bl	80026a0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e70:	f7fe fb66 	bl	8001540 <HAL_GetTick>
 8002e74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002e78:	f7fe fb62 	bl	8001540 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e197      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002e8a:	f7ff fc1a 	bl	80026c2 <LL_RCC_LSI2_IsReady>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f1      	bne.n	8002e78 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002e94:	f7ff fbd0 	bl	8002638 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e98:	f7fe fb52 	bl	8001540 <HAL_GetTick>
 8002e9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002ea0:	f7fe fb4e 	bl	8001540 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e183      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002eb2:	f7ff fbd2 	bl	800265a <LL_RCC_LSI1_IsReady>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1f1      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d05b      	beq.n	8002f80 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec8:	4ba7      	ldr	r3, [pc, #668]	; (8003168 <HAL_RCC_OscConfig+0x688>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d114      	bne.n	8002efe <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002ed4:	f7ff fa70 	bl	80023b8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed8:	f7fe fb32 	bl	8001540 <HAL_GetTick>
 8002edc:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee0:	f7fe fb2e 	bl	8001540 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e163      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ef2:	4b9d      	ldr	r3, [pc, #628]	; (8003168 <HAL_RCC_OscConfig+0x688>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d102      	bne.n	8002f0c <HAL_RCC_OscConfig+0x42c>
 8002f06:	f7ff fb30 	bl	800256a <LL_RCC_LSE_Enable>
 8002f0a:	e00c      	b.n	8002f26 <HAL_RCC_OscConfig+0x446>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b05      	cmp	r3, #5
 8002f12:	d104      	bne.n	8002f1e <HAL_RCC_OscConfig+0x43e>
 8002f14:	f7ff fb4b 	bl	80025ae <LL_RCC_LSE_EnableBypass>
 8002f18:	f7ff fb27 	bl	800256a <LL_RCC_LSE_Enable>
 8002f1c:	e003      	b.n	8002f26 <HAL_RCC_OscConfig+0x446>
 8002f1e:	f7ff fb35 	bl	800258c <LL_RCC_LSE_Disable>
 8002f22:	f7ff fb55 	bl	80025d0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d014      	beq.n	8002f58 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2e:	f7fe fb07 	bl	8001540 <HAL_GetTick>
 8002f32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f36:	f7fe fb03 	bl	8001540 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e136      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002f4c:	f7ff fb51 	bl	80025f2 <LL_RCC_LSE_IsReady>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0ef      	beq.n	8002f36 <HAL_RCC_OscConfig+0x456>
 8002f56:	e013      	b.n	8002f80 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f58:	f7fe faf2 	bl	8001540 <HAL_GetTick>
 8002f5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f60:	f7fe faee 	bl	8001540 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e121      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002f76:	f7ff fb3c 	bl	80025f2 <LL_RCC_LSE_IsReady>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1ef      	bne.n	8002f60 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d02c      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d014      	beq.n	8002fbe <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f94:	f7ff fab5 	bl	8002502 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f98:	f7fe fad2 	bl	8001540 <HAL_GetTick>
 8002f9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fa0:	f7fe face 	bl	8001540 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e103      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002fb2:	f7ff fac8 	bl	8002546 <LL_RCC_HSI48_IsReady>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f1      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x4c0>
 8002fbc:	e013      	b.n	8002fe6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fbe:	f7ff fab1 	bl	8002524 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc2:	f7fe fabd 	bl	8001540 <HAL_GetTick>
 8002fc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fca:	f7fe fab9 	bl	8001540 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e0ee      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002fdc:	f7ff fab3 	bl	8002546 <LL_RCC_HSI48_IsReady>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f1      	bne.n	8002fca <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 80e4 	beq.w	80031b8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ff0:	f7ff fc11 	bl	8002816 <LL_RCC_GetSysClkSource>
 8002ff4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	2b02      	cmp	r3, #2
 8003004:	f040 80b4 	bne.w	8003170 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 0203 	and.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	429a      	cmp	r2, r3
 8003014:	d123      	bne.n	800305e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003020:	429a      	cmp	r2, r3
 8003022:	d11c      	bne.n	800305e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003030:	429a      	cmp	r2, r3
 8003032:	d114      	bne.n	800305e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800303e:	429a      	cmp	r2, r3
 8003040:	d10d      	bne.n	800305e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d106      	bne.n	800305e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800305a:	429a      	cmp	r2, r3
 800305c:	d05d      	beq.n	800311a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2b0c      	cmp	r3, #12
 8003062:	d058      	beq.n	8003116 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e0a1      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003076:	f7ff fc84 	bl	8002982 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800307a:	f7fe fa61 	bl	8001540 <HAL_GetTick>
 800307e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003082:	f7fe fa5d 	bl	8001540 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e092      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1ef      	bne.n	8003082 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	4b30      	ldr	r3, [pc, #192]	; (800316c <HAL_RCC_OscConfig+0x68c>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030b4:	4311      	orrs	r1, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030ba:	0212      	lsls	r2, r2, #8
 80030bc:	4311      	orrs	r1, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030c2:	4311      	orrs	r1, r2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030c8:	4311      	orrs	r1, r2
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030ce:	430a      	orrs	r2, r1
 80030d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030d8:	f7ff fc44 	bl	8002964 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030ec:	f7fe fa28 	bl	8001540 <HAL_GetTick>
 80030f0:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f4:	f7fe fa24 	bl	8001540 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e059      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0ef      	beq.n	80030f4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003114:	e050      	b.n	80031b8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e04f      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800311a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d147      	bne.n	80031b8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003128:	f7ff fc1c 	bl	8002964 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800312c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800313c:	f7fe fa00 	bl	8001540 <HAL_GetTick>
 8003140:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003144:	f7fe f9fc 	bl	8001540 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e031      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ef      	beq.n	8003144 <HAL_RCC_OscConfig+0x664>
 8003164:	e028      	b.n	80031b8 <HAL_RCC_OscConfig+0x6d8>
 8003166:	bf00      	nop
 8003168:	58000400 	.word	0x58000400
 800316c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	2b0c      	cmp	r3, #12
 8003174:	d01e      	beq.n	80031b4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003176:	f7ff fc04 	bl	8002982 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317a:	f7fe f9e1 	bl	8001540 <HAL_GetTick>
 800317e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003182:	f7fe f9dd 	bl	8001540 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e012      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1ef      	bne.n	8003182 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80031a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_RCC_OscConfig+0x6e4>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	60cb      	str	r3, [r1, #12]
 80031b2:	e001      	b.n	80031b8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3734      	adds	r7, #52	; 0x34
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd90      	pop	{r4, r7, pc}
 80031c2:	bf00      	nop
 80031c4:	eefefffc 	.word	0xeefefffc

080031c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e12d      	b.n	8003438 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031dc:	4b98      	ldr	r3, [pc, #608]	; (8003440 <HAL_RCC_ClockConfig+0x278>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d91b      	bls.n	8003222 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b95      	ldr	r3, [pc, #596]	; (8003440 <HAL_RCC_ClockConfig+0x278>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 0207 	bic.w	r2, r3, #7
 80031f2:	4993      	ldr	r1, [pc, #588]	; (8003440 <HAL_RCC_ClockConfig+0x278>)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031fa:	f7fe f9a1 	bl	8001540 <HAL_GetTick>
 80031fe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003200:	e008      	b.n	8003214 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003202:	f7fe f99d 	bl	8001540 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e111      	b.n	8003438 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003214:	4b8a      	ldr	r3, [pc, #552]	; (8003440 <HAL_RCC_ClockConfig+0x278>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d1ef      	bne.n	8003202 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d016      	beq.n	800325c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff fafb 	bl	800282e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003238:	f7fe f982 	bl	8001540 <HAL_GetTick>
 800323c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800323e:	e008      	b.n	8003252 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003240:	f7fe f97e 	bl	8001540 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e0f2      	b.n	8003438 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003252:	f7ff fbe8 	bl	8002a26 <LL_RCC_IsActiveFlag_HPRE>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f1      	beq.n	8003240 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b00      	cmp	r3, #0
 8003266:	d016      	beq.n	8003296 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff faf2 	bl	8002856 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003272:	f7fe f965 	bl	8001540 <HAL_GetTick>
 8003276:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003278:	e008      	b.n	800328c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800327a:	f7fe f961 	bl	8001540 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e0d5      	b.n	8003438 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800328c:	f7ff fbdd 	bl	8002a4a <LL_RCC_IsActiveFlag_C2HPRE>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f1      	beq.n	800327a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d016      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff faeb 	bl	8002882 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80032ac:	f7fe f948 	bl	8001540 <HAL_GetTick>
 80032b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80032b4:	f7fe f944 	bl	8001540 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e0b8      	b.n	8003438 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80032c6:	f7ff fbd3 	bl	8002a70 <LL_RCC_IsActiveFlag_SHDHPRE>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f1      	beq.n	80032b4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d016      	beq.n	800330a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fae5 	bl	80028b0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80032e6:	f7fe f92b 	bl	8001540 <HAL_GetTick>
 80032ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80032ee:	f7fe f927 	bl	8001540 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e09b      	b.n	8003438 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003300:	f7ff fbc9 	bl	8002a96 <LL_RCC_IsActiveFlag_PPRE1>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f1      	beq.n	80032ee <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d017      	beq.n	8003346 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fadb 	bl	80028d8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003322:	f7fe f90d 	bl	8001540 <HAL_GetTick>
 8003326:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003328:	e008      	b.n	800333c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800332a:	f7fe f909 	bl	8001540 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e07d      	b.n	8003438 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800333c:	f7ff fbbd 	bl	8002aba <LL_RCC_IsActiveFlag_PPRE2>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f1      	beq.n	800332a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d043      	beq.n	80033da <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d106      	bne.n	8003368 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800335a:	f7ff f87b 	bl	8002454 <LL_RCC_HSE_IsReady>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d11e      	bne.n	80033a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e067      	b.n	8003438 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b03      	cmp	r3, #3
 800336e:	d106      	bne.n	800337e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003370:	f7ff fb16 	bl	80029a0 <LL_RCC_PLL_IsReady>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d113      	bne.n	80033a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e05c      	b.n	8003438 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003386:	f7ff f9e3 	bl	8002750 <LL_RCC_MSI_IsReady>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d108      	bne.n	80033a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e051      	b.n	8003438 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003394:	f7ff f88e 	bl	80024b4 <LL_RCC_HSI_IsReady>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e04a      	b.n	8003438 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fa21 	bl	80027ee <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ac:	f7fe f8c8 	bl	8001540 <HAL_GetTick>
 80033b0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b2:	e00a      	b.n	80033ca <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b4:	f7fe f8c4 	bl	8001540 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e036      	b.n	8003438 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ca:	f7ff fa24 	bl	8002816 <LL_RCC_GetSysClkSource>
 80033ce:	4602      	mov	r2, r0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d1ec      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033da:	4b19      	ldr	r3, [pc, #100]	; (8003440 <HAL_RCC_ClockConfig+0x278>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d21b      	bcs.n	8003420 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e8:	4b15      	ldr	r3, [pc, #84]	; (8003440 <HAL_RCC_ClockConfig+0x278>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f023 0207 	bic.w	r2, r3, #7
 80033f0:	4913      	ldr	r1, [pc, #76]	; (8003440 <HAL_RCC_ClockConfig+0x278>)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f8:	f7fe f8a2 	bl	8001540 <HAL_GetTick>
 80033fc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003400:	f7fe f89e 	bl	8001540 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e012      	b.n	8003438 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003412:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_RCC_ClockConfig+0x278>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d1ef      	bne.n	8003400 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003420:	f000 f87e 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 8003424:	4603      	mov	r3, r0
 8003426:	4a07      	ldr	r2, [pc, #28]	; (8003444 <HAL_RCC_ClockConfig+0x27c>)
 8003428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800342a:	f7fe f895 	bl	8001558 <HAL_GetTickPrio>
 800342e:	4603      	mov	r3, r0
 8003430:	4618      	mov	r0, r3
 8003432:	f7fe f837 	bl	80014a4 <HAL_InitTick>
 8003436:	4603      	mov	r3, r0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	58004000 	.word	0x58004000
 8003444:	20000008 	.word	0x20000008

08003448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800344e:	f7ff f9e2 	bl	8002816 <LL_RCC_GetSysClkSource>
 8003452:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10a      	bne.n	8003470 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800345a:	f7ff f99e 	bl	800279a <LL_RCC_MSI_GetRange>
 800345e:	4603      	mov	r3, r0
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	4a2b      	ldr	r2, [pc, #172]	; (8003514 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	e04b      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b04      	cmp	r3, #4
 8003474:	d102      	bne.n	800347c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003476:	4b28      	ldr	r3, [pc, #160]	; (8003518 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	e045      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b08      	cmp	r3, #8
 8003480:	d10a      	bne.n	8003498 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003482:	f7fe ffb7 	bl	80023f4 <LL_RCC_HSE_IsEnabledDiv2>
 8003486:	4603      	mov	r3, r0
 8003488:	2b01      	cmp	r3, #1
 800348a:	d102      	bne.n	8003492 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800348c:	4b22      	ldr	r3, [pc, #136]	; (8003518 <HAL_RCC_GetSysClockFreq+0xd0>)
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	e03a      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003492:	4b22      	ldr	r3, [pc, #136]	; (800351c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	e037      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003498:	f7ff fab9 	bl	8002a0e <LL_RCC_PLL_GetMainSource>
 800349c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d003      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0x64>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d003      	beq.n	80034b2 <HAL_RCC_GetSysClockFreq+0x6a>
 80034aa:	e00d      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80034ac:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <HAL_RCC_GetSysClockFreq+0xd0>)
 80034ae:	60bb      	str	r3, [r7, #8]
        break;
 80034b0:	e015      	b.n	80034de <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80034b2:	f7fe ff9f 	bl	80023f4 <LL_RCC_HSE_IsEnabledDiv2>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d102      	bne.n	80034c2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80034bc:	4b16      	ldr	r3, [pc, #88]	; (8003518 <HAL_RCC_GetSysClockFreq+0xd0>)
 80034be:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80034c0:	e00d      	b.n	80034de <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80034c2:	4b16      	ldr	r3, [pc, #88]	; (800351c <HAL_RCC_GetSysClockFreq+0xd4>)
 80034c4:	60bb      	str	r3, [r7, #8]
        break;
 80034c6:	e00a      	b.n	80034de <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80034c8:	f7ff f967 	bl	800279a <LL_RCC_MSI_GetRange>
 80034cc:	4603      	mov	r3, r0
 80034ce:	091b      	lsrs	r3, r3, #4
 80034d0:	f003 030f 	and.w	r3, r3, #15
 80034d4:	4a0f      	ldr	r2, [pc, #60]	; (8003514 <HAL_RCC_GetSysClockFreq+0xcc>)
 80034d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034da:	60bb      	str	r3, [r7, #8]
        break;
 80034dc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80034de:	f7ff fa71 	bl	80029c4 <LL_RCC_PLL_GetN>
 80034e2:	4602      	mov	r2, r0
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	fb03 f402 	mul.w	r4, r3, r2
 80034ea:	f7ff fa84 	bl	80029f6 <LL_RCC_PLL_GetDivider>
 80034ee:	4603      	mov	r3, r0
 80034f0:	091b      	lsrs	r3, r3, #4
 80034f2:	3301      	adds	r3, #1
 80034f4:	fbb4 f4f3 	udiv	r4, r4, r3
 80034f8:	f7ff fa71 	bl	80029de <LL_RCC_PLL_GetR>
 80034fc:	4603      	mov	r3, r0
 80034fe:	0f5b      	lsrs	r3, r3, #29
 8003500:	3301      	adds	r3, #1
 8003502:	fbb4 f3f3 	udiv	r3, r4, r3
 8003506:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003508:	68fb      	ldr	r3, [r7, #12]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	bd90      	pop	{r4, r7, pc}
 8003512:	bf00      	nop
 8003514:	08006e70 	.word	0x08006e70
 8003518:	00f42400 	.word	0x00f42400
 800351c:	01e84800 	.word	0x01e84800

08003520 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003520:	b598      	push	{r3, r4, r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003524:	f7ff ff90 	bl	8003448 <HAL_RCC_GetSysClockFreq>
 8003528:	4604      	mov	r4, r0
 800352a:	f7ff f9e9 	bl	8002900 <LL_RCC_GetAHBPrescaler>
 800352e:	4603      	mov	r3, r0
 8003530:	091b      	lsrs	r3, r3, #4
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	4a03      	ldr	r2, [pc, #12]	; (8003544 <HAL_RCC_GetHCLKFreq+0x24>)
 8003538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003540:	4618      	mov	r0, r3
 8003542:	bd98      	pop	{r3, r4, r7, pc}
 8003544:	08006e10 	.word	0x08006e10

08003548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003548:	b598      	push	{r3, r4, r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800354c:	f7ff ffe8 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 8003550:	4604      	mov	r4, r0
 8003552:	f7ff f9ef 	bl	8002934 <LL_RCC_GetAPB1Prescaler>
 8003556:	4603      	mov	r3, r0
 8003558:	0a1b      	lsrs	r3, r3, #8
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	4a04      	ldr	r2, [pc, #16]	; (8003570 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003564:	f003 031f 	and.w	r3, r3, #31
 8003568:	fa24 f303 	lsr.w	r3, r4, r3
}
 800356c:	4618      	mov	r0, r3
 800356e:	bd98      	pop	{r3, r4, r7, pc}
 8003570:	08006e50 	.word	0x08006e50

08003574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003574:	b598      	push	{r3, r4, r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003578:	f7ff ffd2 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 800357c:	4604      	mov	r4, r0
 800357e:	f7ff f9e5 	bl	800294c <LL_RCC_GetAPB2Prescaler>
 8003582:	4603      	mov	r3, r0
 8003584:	0adb      	lsrs	r3, r3, #11
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	4a04      	ldr	r2, [pc, #16]	; (800359c <HAL_RCC_GetPCLK2Freq+0x28>)
 800358c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003598:	4618      	mov	r0, r3
 800359a:	bd98      	pop	{r3, r4, r7, pc}
 800359c:	08006e50 	.word	0x08006e50

080035a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2bb0      	cmp	r3, #176	; 0xb0
 80035ac:	d903      	bls.n	80035b6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	e007      	b.n	80035c6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	4a11      	ldr	r2, [pc, #68]	; (8003604 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80035c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80035c6:	f7ff f9a7 	bl	8002918 <LL_RCC_GetAHB4Prescaler>
 80035ca:	4603      	mov	r3, r0
 80035cc:	091b      	lsrs	r3, r3, #4
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	4a0d      	ldr	r2, [pc, #52]	; (8003608 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80035d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	fbb2 f3f3 	udiv	r3, r2, r3
 80035de:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4a0a      	ldr	r2, [pc, #40]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80035e4:	fba2 2303 	umull	r2, r3, r2, r3
 80035e8:	0c9c      	lsrs	r4, r3, #18
 80035ea:	f7fe fef5 	bl	80023d8 <HAL_PWREx_GetVoltageRange>
 80035ee:	4603      	mov	r3, r0
 80035f0:	4619      	mov	r1, r3
 80035f2:	4620      	mov	r0, r4
 80035f4:	f000 f80c 	bl	8003610 <RCC_SetFlashLatency>
 80035f8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd90      	pop	{r4, r7, pc}
 8003602:	bf00      	nop
 8003604:	08006e70 	.word	0x08006e70
 8003608:	08006e10 	.word	0x08006e10
 800360c:	431bde83 	.word	0x431bde83

08003610 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003610:	b590      	push	{r4, r7, lr}
 8003612:	b093      	sub	sp, #76	; 0x4c
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800361a:	4b37      	ldr	r3, [pc, #220]	; (80036f8 <RCC_SetFlashLatency+0xe8>)
 800361c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003620:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003622:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003626:	4a35      	ldr	r2, [pc, #212]	; (80036fc <RCC_SetFlashLatency+0xec>)
 8003628:	f107 031c 	add.w	r3, r7, #28
 800362c:	ca07      	ldmia	r2, {r0, r1, r2}
 800362e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003632:	4b33      	ldr	r3, [pc, #204]	; (8003700 <RCC_SetFlashLatency+0xf0>)
 8003634:	f107 040c 	add.w	r4, r7, #12
 8003638:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800363a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800363e:	2300      	movs	r3, #0
 8003640:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003648:	d11a      	bne.n	8003680 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800364a:	2300      	movs	r3, #0
 800364c:	643b      	str	r3, [r7, #64]	; 0x40
 800364e:	e013      	b.n	8003678 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	3348      	adds	r3, #72	; 0x48
 8003656:	443b      	add	r3, r7
 8003658:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	429a      	cmp	r2, r3
 8003660:	d807      	bhi.n	8003672 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	3348      	adds	r3, #72	; 0x48
 8003668:	443b      	add	r3, r7
 800366a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800366e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003670:	e020      	b.n	80036b4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003674:	3301      	adds	r3, #1
 8003676:	643b      	str	r3, [r7, #64]	; 0x40
 8003678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800367a:	2b03      	cmp	r3, #3
 800367c:	d9e8      	bls.n	8003650 <RCC_SetFlashLatency+0x40>
 800367e:	e019      	b.n	80036b4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003680:	2300      	movs	r3, #0
 8003682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003684:	e013      	b.n	80036ae <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	3348      	adds	r3, #72	; 0x48
 800368c:	443b      	add	r3, r7
 800368e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	429a      	cmp	r2, r3
 8003696:	d807      	bhi.n	80036a8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	3348      	adds	r3, #72	; 0x48
 800369e:	443b      	add	r3, r7
 80036a0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80036a4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80036a6:	e005      	b.n	80036b4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80036a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036aa:	3301      	adds	r3, #1
 80036ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d9e8      	bls.n	8003686 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80036b4:	4b13      	ldr	r3, [pc, #76]	; (8003704 <RCC_SetFlashLatency+0xf4>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f023 0207 	bic.w	r2, r3, #7
 80036bc:	4911      	ldr	r1, [pc, #68]	; (8003704 <RCC_SetFlashLatency+0xf4>)
 80036be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c0:	4313      	orrs	r3, r2
 80036c2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80036c4:	f7fd ff3c 	bl	8001540 <HAL_GetTick>
 80036c8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80036ca:	e008      	b.n	80036de <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80036cc:	f7fd ff38 	bl	8001540 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e007      	b.n	80036ee <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <RCC_SetFlashLatency+0xf4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d1ef      	bne.n	80036cc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	374c      	adds	r7, #76	; 0x4c
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd90      	pop	{r4, r7, pc}
 80036f6:	bf00      	nop
 80036f8:	08006de4 	.word	0x08006de4
 80036fc:	08006df4 	.word	0x08006df4
 8003700:	08006e00 	.word	0x08006e00
 8003704:	58004000 	.word	0x58004000

08003708 <LL_RCC_LSE_IsEnabled>:
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800370c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <LL_RCC_LSE_IsEnabled+0x18>
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <LL_RCC_LSE_IsEnabled+0x1a>
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <LL_RCC_LSE_IsReady>:
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b02      	cmp	r3, #2
 800373e:	d101      	bne.n	8003744 <LL_RCC_LSE_IsReady+0x18>
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <LL_RCC_LSE_IsReady+0x1a>
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <LL_RCC_MSI_EnablePLLMode>:
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800375e:	f043 0304 	orr.w	r3, r3, #4
 8003762:	6013      	str	r3, [r2, #0]
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <LL_RCC_SetRFWKPClockSource>:
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800377a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800377e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003782:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <LL_RCC_SetSMPSClockSource>:
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80037a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	f023 0203 	bic.w	r2, r3, #3
 80037ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <LL_RCC_SetSMPSPrescaler>:
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80037ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4313      	orrs	r3, r2
 80037dc:	624b      	str	r3, [r1, #36]	; 0x24
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <LL_RCC_SetUSARTClockSource>:
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80037f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fa:	f023 0203 	bic.w	r2, r3, #3
 80037fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4313      	orrs	r3, r2
 8003806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <LL_RCC_SetLPUARTClockSource>:
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800381e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003826:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800382a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <LL_RCC_SetI2CClockSource>:
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800384a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800384e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	091b      	lsrs	r3, r3, #4
 8003856:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800385a:	43db      	mvns	r3, r3
 800385c:	401a      	ands	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003866:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <LL_RCC_SetLPTIMClockSource>:
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003888:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	0c1b      	lsrs	r3, r3, #16
 8003890:	041b      	lsls	r3, r3, #16
 8003892:	43db      	mvns	r3, r3
 8003894:	401a      	ands	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	041b      	lsls	r3, r3, #16
 800389a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <LL_RCC_SetSAIClockSource>:
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80038b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <LL_RCC_SetRNGClockSource>:
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80038e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ec:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80038f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <LL_RCC_SetCLK48ClockSource>:
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003918:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800391c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <LL_RCC_SetUSBClockSource>:
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff ffe3 	bl	8003908 <LL_RCC_SetCLK48ClockSource>
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <LL_RCC_SetADCClockSource>:
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800395e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <LL_RCC_SetRTCClockSource>:
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800397e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003986:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800398a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <LL_RCC_GetRTCClockSource>:
{
 80039a2:	b480      	push	{r7}
 80039a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80039a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <LL_RCC_ForceBackupDomainReset>:
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80039c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80039d4:	bf00      	nop
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <LL_RCC_ReleaseBackupDomainReset>:
{
 80039de:	b480      	push	{r7}
 80039e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80039e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80039f6:	bf00      	nop
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <LL_RCC_PLLSAI1_Enable>:
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a12:	6013      	str	r3, [r2, #0]
}
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <LL_RCC_PLLSAI1_Disable>:
{
 8003a1e:	b480      	push	{r7}
 8003a20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a30:	6013      	str	r3, [r2, #0]
}
 8003a32:	bf00      	nop
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <LL_RCC_PLLSAI1_IsReady>:
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a4e:	d101      	bne.n	8003a54 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003a50:	2301      	movs	r3, #1
 8003a52:	e000      	b.n	8003a56 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003a68:	2300      	movs	r3, #0
 8003a6a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d034      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a84:	d021      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003a86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a8a:	d81b      	bhi.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a90:	d01d      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003a92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a96:	d815      	bhi.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00b      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003a9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aa0:	d110      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ab2:	e00d      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 f94d 	bl	8003d58 <RCCEx_PLLSAI1_ConfigNP>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ac2:	e005      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	77fb      	strb	r3, [r7, #31]
        break;
 8003ac8:	e002      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003aca:	bf00      	nop
 8003acc:	e000      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003ace:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ad0:	7ffb      	ldrb	r3, [r7, #31]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d105      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff fee8 	bl	80038b0 <LL_RCC_SetSAIClockSource>
 8003ae0:	e001      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae2:	7ffb      	ldrb	r3, [r7, #31]
 8003ae4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d046      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003af2:	f7ff ff56 	bl	80039a2 <LL_RCC_GetRTCClockSource>
 8003af6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d03c      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003b02:	f7fe fc59 	bl	80023b8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d105      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff ff30 	bl	8003976 <LL_RCC_SetRTCClockSource>
 8003b16:	e02e      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b20:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003b22:	f7ff ff4b 	bl	80039bc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003b26:	f7ff ff5a 	bl	80039de <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003b38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003b42:	f7ff fde1 	bl	8003708 <LL_RCC_LSE_IsEnabled>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d114      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b4c:	f7fd fcf8 	bl	8001540 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003b52:	e00b      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b54:	f7fd fcf4 	bl	8001540 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d902      	bls.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	77fb      	strb	r3, [r7, #31]
              break;
 8003b6a:	e004      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003b6c:	f7ff fdde 	bl	800372c <LL_RCC_LSE_IsReady>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d1ee      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003b76:	7ffb      	ldrb	r3, [r7, #31]
 8003b78:	77bb      	strb	r3, [r7, #30]
 8003b7a:	e001      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7c:	7ffb      	ldrb	r3, [r7, #31]
 8003b7e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d004      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff fe2a 	bl	80037ea <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d004      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff fe35 	bl	8003816 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d004      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff fe5d 	bl	800387c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d004      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff fe52 	bl	800387c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d004      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff fe2a 	bl	8003842 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d004      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fe1f 	bl	8003842 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d022      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff fe8d 	bl	8003934 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c22:	d107      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c32:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c3c:	d10b      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3304      	adds	r3, #4
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 f8e3 	bl	8003e0e <RCCEx_PLLSAI1_ConfigNQ>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003c4c:	7ffb      	ldrb	r3, [r7, #31]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003c52:	7ffb      	ldrb	r3, [r7, #31]
 8003c54:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d02b      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6a:	d008      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c74:	d003      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d105      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff fe2a 	bl	80038dc <LL_RCC_SetRNGClockSource>
 8003c88:	e00a      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	2000      	movs	r0, #0
 8003c96:	f7ff fe21 	bl	80038dc <LL_RCC_SetRNGClockSource>
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f7ff fe34 	bl	8003908 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003ca8:	d107      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cb8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d022      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff fe3d 	bl	800394a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cd8:	d107      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cf2:	d10b      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 f8e3 	bl	8003ec4 <RCCEx_PLLSAI1_ConfigNR>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003d02:	7ffb      	ldrb	r3, [r7, #31]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003d08:	7ffb      	ldrb	r3, [r7, #31]
 8003d0a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d004      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff fd26 	bl	800376e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d009      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff fd45 	bl	80037c2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff fd2c 	bl	800379a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003d42:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3720      	adds	r7, #32
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003d50:	f7ff fcfe 	bl	8003750 <LL_RCC_MSI_EnablePLLMode>
}
 8003d54:	bf00      	nop
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003d64:	f7ff fe5b 	bl	8003a1e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003d68:	f7fd fbea 	bl	8001540 <HAL_GetTick>
 8003d6c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003d6e:	e009      	b.n	8003d84 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d70:	f7fd fbe6 	bl	8001540 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d902      	bls.n	8003d84 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	73fb      	strb	r3, [r7, #15]
      break;
 8003d82:	e004      	b.n	8003d8e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003d84:	f7ff fe5a 	bl	8003a3c <LL_RCC_PLLSAI1_IsReady>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d137      	bne.n	8003e04 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	021b      	lsls	r3, r3, #8
 8003da4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003da8:	4313      	orrs	r3, r2
 8003daa:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003dc2:	f7ff fe1d 	bl	8003a00 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dc6:	f7fd fbbb 	bl	8001540 <HAL_GetTick>
 8003dca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003dcc:	e009      	b.n	8003de2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dce:	f7fd fbb7 	bl	8001540 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d902      	bls.n	8003de2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	73fb      	strb	r3, [r7, #15]
        break;
 8003de0:	e004      	b.n	8003dec <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003de2:	f7ff fe2b 	bl	8003a3c <LL_RCC_PLLSAI1_IsReady>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d1f0      	bne.n	8003dce <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d108      	bne.n	8003e04 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e00:	4313      	orrs	r3, r2
 8003e02:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003e1a:	f7ff fe00 	bl	8003a1e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e1e:	f7fd fb8f 	bl	8001540 <HAL_GetTick>
 8003e22:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003e24:	e009      	b.n	8003e3a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e26:	f7fd fb8b 	bl	8001540 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d902      	bls.n	8003e3a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	73fb      	strb	r3, [r7, #15]
      break;
 8003e38:	e004      	b.n	8003e44 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003e3a:	f7ff fdff 	bl	8003a3c <LL_RCC_PLLSAI1_IsReady>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1f0      	bne.n	8003e26 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d137      	bne.n	8003eba <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	021b      	lsls	r3, r3, #8
 8003e5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e74:	4313      	orrs	r3, r2
 8003e76:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003e78:	f7ff fdc2 	bl	8003a00 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e7c:	f7fd fb60 	bl	8001540 <HAL_GetTick>
 8003e80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003e82:	e009      	b.n	8003e98 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e84:	f7fd fb5c 	bl	8001540 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d902      	bls.n	8003e98 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	73fb      	strb	r3, [r7, #15]
        break;
 8003e96:	e004      	b.n	8003ea2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003e98:	f7ff fdd0 	bl	8003a3c <LL_RCC_PLLSAI1_IsReady>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d1f0      	bne.n	8003e84 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d108      	bne.n	8003eba <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003ed0:	f7ff fda5 	bl	8003a1e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003ed4:	f7fd fb34 	bl	8001540 <HAL_GetTick>
 8003ed8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003eda:	e009      	b.n	8003ef0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003edc:	f7fd fb30 	bl	8001540 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d902      	bls.n	8003ef0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	73fb      	strb	r3, [r7, #15]
      break;
 8003eee:	e004      	b.n	8003efa <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003ef0:	f7ff fda4 	bl	8003a3c <LL_RCC_PLLSAI1_IsReady>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d137      	bne.n	8003f70 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	021b      	lsls	r3, r3, #8
 8003f10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f14:	4313      	orrs	r3, r2
 8003f16:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003f2e:	f7ff fd67 	bl	8003a00 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f32:	f7fd fb05 	bl	8001540 <HAL_GetTick>
 8003f36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003f38:	e009      	b.n	8003f4e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f3a:	f7fd fb01 	bl	8001540 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d902      	bls.n	8003f4e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	73fb      	strb	r3, [r7, #15]
        break;
 8003f4c:	e004      	b.n	8003f58 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003f4e:	f7ff fd75 	bl	8003a3c <LL_RCC_PLLSAI1_IsReady>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d1f0      	bne.n	8003f3a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d108      	bne.n	8003f70 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <LL_RCC_GetUSARTClockSource>:
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4013      	ands	r3, r2
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <LL_RCC_GetLPUARTClockSource>:
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4013      	ands	r3, r2
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e042      	b.n	8004052 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fc fe40 	bl	8000c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2224      	movs	r2, #36	; 0x24
 8003fe8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0201 	bic.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 fbff 	bl	8004800 <UART_SetConfig>
 8004002:	4603      	mov	r3, r0
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e022      	b.n	8004052 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 fe1b 	bl	8004c50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004028:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004038:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0201 	orr.w	r2, r2, #1
 8004048:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fea2 	bl	8004d94 <UART_CheckIdleState>
 8004050:	4603      	mov	r3, r0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b08a      	sub	sp, #40	; 0x28
 800405e:	af02      	add	r7, sp, #8
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	603b      	str	r3, [r7, #0]
 8004066:	4613      	mov	r3, r2
 8004068:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004070:	2b20      	cmp	r3, #32
 8004072:	d173      	bne.n	800415c <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <HAL_UART_Transmit+0x26>
 800407a:	88fb      	ldrh	r3, [r7, #6]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e06c      	b.n	800415e <HAL_UART_Transmit+0x104>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2221      	movs	r2, #33	; 0x21
 8004090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004094:	f7fd fa54 	bl	8001540 <HAL_GetTick>
 8004098:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	88fa      	ldrh	r2, [r7, #6]
 800409e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	88fa      	ldrh	r2, [r7, #6]
 80040a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b2:	d108      	bne.n	80040c6 <HAL_UART_Transmit+0x6c>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d104      	bne.n	80040c6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040bc:	2300      	movs	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	61bb      	str	r3, [r7, #24]
 80040c4:	e003      	b.n	80040ce <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040ce:	e02c      	b.n	800412a <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2200      	movs	r2, #0
 80040d8:	2180      	movs	r1, #128	; 0x80
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 fea8 	bl	8004e30 <UART_WaitOnFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e039      	b.n	800415e <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10b      	bne.n	8004108 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	461a      	mov	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	3302      	adds	r3, #2
 8004104:	61bb      	str	r3, [r7, #24]
 8004106:	e007      	b.n	8004118 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	781a      	ldrb	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	3301      	adds	r3, #1
 8004116:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1cc      	bne.n	80040d0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2200      	movs	r2, #0
 800413e:	2140      	movs	r1, #64	; 0x40
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 fe75 	bl	8004e30 <UART_WaitOnFlagUntilTimeout>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e006      	b.n	800415e <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	e000      	b.n	800415e <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800415c:	2302      	movs	r3, #2
  }
}
 800415e:	4618      	mov	r0, r3
 8004160:	3720      	adds	r7, #32
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b0ba      	sub	sp, #232	; 0xe8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800418e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004192:	f640 030f 	movw	r3, #2063	; 0x80f
 8004196:	4013      	ands	r3, r2
 8004198:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800419c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d11b      	bne.n	80041dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80041a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d015      	beq.n	80041dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80041b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d105      	bne.n	80041c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80041bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d009      	beq.n	80041dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 82e3 	beq.w	8004798 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	4798      	blx	r3
      }
      return;
 80041da:	e2dd      	b.n	8004798 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80041dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 8123 	beq.w	800442c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80041e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80041ea:	4b8d      	ldr	r3, [pc, #564]	; (8004420 <HAL_UART_IRQHandler+0x2b8>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80041f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80041f6:	4b8b      	ldr	r3, [pc, #556]	; (8004424 <HAL_UART_IRQHandler+0x2bc>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 8116 	beq.w	800442c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d011      	beq.n	8004230 <HAL_UART_IRQHandler+0xc8>
 800420c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00b      	beq.n	8004230 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2201      	movs	r2, #1
 800421e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004226:	f043 0201 	orr.w	r2, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d011      	beq.n	8004260 <HAL_UART_IRQHandler+0xf8>
 800423c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00b      	beq.n	8004260 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2202      	movs	r2, #2
 800424e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004256:	f043 0204 	orr.w	r2, r3, #4
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d011      	beq.n	8004290 <HAL_UART_IRQHandler+0x128>
 800426c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00b      	beq.n	8004290 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2204      	movs	r2, #4
 800427e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004286:	f043 0202 	orr.w	r2, r3, #2
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b00      	cmp	r3, #0
 800429a:	d017      	beq.n	80042cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800429c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d105      	bne.n	80042b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80042a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80042ac:	4b5c      	ldr	r3, [pc, #368]	; (8004420 <HAL_UART_IRQHandler+0x2b8>)
 80042ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00b      	beq.n	80042cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2208      	movs	r2, #8
 80042ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c2:	f043 0208 	orr.w	r2, r3, #8
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d012      	beq.n	80042fe <HAL_UART_IRQHandler+0x196>
 80042d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00c      	beq.n	80042fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f4:	f043 0220 	orr.w	r2, r3, #32
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 8249 	beq.w	800479c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800430a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b00      	cmp	r3, #0
 8004314:	d013      	beq.n	800433e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b00      	cmp	r3, #0
 8004320:	d105      	bne.n	800432e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004344:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004352:	2b40      	cmp	r3, #64	; 0x40
 8004354:	d005      	beq.n	8004362 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800435a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800435e:	2b00      	cmp	r3, #0
 8004360:	d054      	beq.n	800440c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 ff13 	bl	800518e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004372:	2b40      	cmp	r3, #64	; 0x40
 8004374:	d146      	bne.n	8004404 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3308      	adds	r3, #8
 800437c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004384:	e853 3f00 	ldrex	r3, [r3]
 8004388:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800438c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004394:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3308      	adds	r3, #8
 800439e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1d9      	bne.n	8004376 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d017      	beq.n	80043fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043d2:	4a15      	ldr	r2, [pc, #84]	; (8004428 <HAL_UART_IRQHandler+0x2c0>)
 80043d4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fd fbaf 	bl	8001b40 <HAL_DMA_Abort_IT>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d019      	beq.n	800441c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80043f6:	4610      	mov	r0, r2
 80043f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043fa:	e00f      	b.n	800441c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f9f5 	bl	80047ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004402:	e00b      	b.n	800441c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f9f1 	bl	80047ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800440a:	e007      	b.n	800441c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f9ed 	bl	80047ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800441a:	e1bf      	b.n	800479c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800441c:	bf00      	nop
    return;
 800441e:	e1bd      	b.n	800479c <HAL_UART_IRQHandler+0x634>
 8004420:	10000001 	.word	0x10000001
 8004424:	04000120 	.word	0x04000120
 8004428:	08005445 	.word	0x08005445

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004430:	2b01      	cmp	r3, #1
 8004432:	f040 8153 	bne.w	80046dc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800443a:	f003 0310 	and.w	r3, r3, #16
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 814c 	beq.w	80046dc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 8145 	beq.w	80046dc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2210      	movs	r2, #16
 8004458:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004464:	2b40      	cmp	r3, #64	; 0x40
 8004466:	f040 80bb 	bne.w	80045e0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004478:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 818f 	beq.w	80047a0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004488:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800448c:	429a      	cmp	r2, r3
 800448e:	f080 8187 	bcs.w	80047a0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004498:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f040 8087 	bne.w	80045be <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044bc:	e853 3f00 	ldrex	r3, [r3]
 80044c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1da      	bne.n	80044b0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3308      	adds	r3, #8
 8004500:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800450a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3308      	adds	r3, #8
 800451a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800451e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004522:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004526:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800452a:	e841 2300 	strex	r3, r2, [r1]
 800452e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1e1      	bne.n	80044fa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3308      	adds	r3, #8
 800453c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004540:	e853 3f00 	ldrex	r3, [r3]
 8004544:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800454c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3308      	adds	r3, #8
 8004556:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800455a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800455c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004560:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e3      	bne.n	8004536 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2220      	movs	r2, #32
 8004572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004584:	e853 3f00 	ldrex	r3, [r3]
 8004588:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800458a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800458c:	f023 0310 	bic.w	r3, r3, #16
 8004590:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	461a      	mov	r2, r3
 800459a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800459e:	65bb      	str	r3, [r7, #88]	; 0x58
 80045a0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045a6:	e841 2300 	strex	r3, r2, [r1]
 80045aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1e4      	bne.n	800457c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fd fa62 	bl	8001a82 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2202      	movs	r2, #2
 80045c2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	4619      	mov	r1, r3
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7fc fe75 	bl	80012c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045de:	e0df      	b.n	80047a0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 80d1 	beq.w	80047a4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004602:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 80cc 	beq.w	80047a4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800461a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004620:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800462e:	647b      	str	r3, [r7, #68]	; 0x44
 8004630:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800463c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e4      	bne.n	800460c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3308      	adds	r3, #8
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	e853 3f00 	ldrex	r3, [r3]
 8004650:	623b      	str	r3, [r7, #32]
   return(result);
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004658:	f023 0301 	bic.w	r3, r3, #1
 800465c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3308      	adds	r3, #8
 8004666:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800466a:	633a      	str	r2, [r7, #48]	; 0x30
 800466c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e1      	bne.n	8004642 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2220      	movs	r2, #32
 8004682:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	e853 3f00 	ldrex	r3, [r3]
 800469e:	60fb      	str	r3, [r7, #12]
   return(result);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0310 	bic.w	r3, r3, #16
 80046a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046b4:	61fb      	str	r3, [r7, #28]
 80046b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	69b9      	ldr	r1, [r7, #24]
 80046ba:	69fa      	ldr	r2, [r7, #28]
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	617b      	str	r3, [r7, #20]
   return(result);
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e4      	bne.n	8004692 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046d2:	4619      	mov	r1, r3
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7fc fdf7 	bl	80012c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046da:	e063      	b.n	80047a4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00e      	beq.n	8004706 <HAL_UART_IRQHandler+0x59e>
 80046e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d008      	beq.n	8004706 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 fee1 	bl	80054c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004704:	e051      	b.n	80047aa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470e:	2b00      	cmp	r3, #0
 8004710:	d014      	beq.n	800473c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471a:	2b00      	cmp	r3, #0
 800471c:	d105      	bne.n	800472a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800471e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004722:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d008      	beq.n	800473c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800472e:	2b00      	cmp	r3, #0
 8004730:	d03a      	beq.n	80047a8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	4798      	blx	r3
    }
    return;
 800473a:	e035      	b.n	80047a8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800473c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004744:	2b00      	cmp	r3, #0
 8004746:	d009      	beq.n	800475c <HAL_UART_IRQHandler+0x5f4>
 8004748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 fe8b 	bl	8005470 <UART_EndTransmit_IT>
    return;
 800475a:	e026      	b.n	80047aa <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800475c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004760:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d009      	beq.n	800477c <HAL_UART_IRQHandler+0x614>
 8004768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800476c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 feba 	bl	80054ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800477a:	e016      	b.n	80047aa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800477c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004780:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d010      	beq.n	80047aa <HAL_UART_IRQHandler+0x642>
 8004788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800478c:	2b00      	cmp	r3, #0
 800478e:	da0c      	bge.n	80047aa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fea2 	bl	80054da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004796:	e008      	b.n	80047aa <HAL_UART_IRQHandler+0x642>
      return;
 8004798:	bf00      	nop
 800479a:	e006      	b.n	80047aa <HAL_UART_IRQHandler+0x642>
    return;
 800479c:	bf00      	nop
 800479e:	e004      	b.n	80047aa <HAL_UART_IRQHandler+0x642>
      return;
 80047a0:	bf00      	nop
 80047a2:	e002      	b.n	80047aa <HAL_UART_IRQHandler+0x642>
      return;
 80047a4:	bf00      	nop
 80047a6:	e000      	b.n	80047aa <HAL_UART_IRQHandler+0x642>
    return;
 80047a8:	bf00      	nop
  }
}
 80047aa:	37e8      	adds	r7, #232	; 0xe8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004804:	b08c      	sub	sp, #48	; 0x30
 8004806:	af00      	add	r7, sp, #0
 8004808:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	431a      	orrs	r2, r3
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	431a      	orrs	r2, r3
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	69db      	ldr	r3, [r3, #28]
 8004824:	4313      	orrs	r3, r2
 8004826:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	4baf      	ldr	r3, [pc, #700]	; (8004aec <UART_SetConfig+0x2ec>)
 8004830:	4013      	ands	r3, r2
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	6812      	ldr	r2, [r2, #0]
 8004836:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004838:	430b      	orrs	r3, r1
 800483a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4aa4      	ldr	r2, [pc, #656]	; (8004af0 <UART_SetConfig+0x2f0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d004      	beq.n	800486c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004868:	4313      	orrs	r3, r2
 800486a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004876:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	6812      	ldr	r2, [r2, #0]
 800487e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004880:	430b      	orrs	r3, r1
 8004882:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488a:	f023 010f 	bic.w	r1, r3, #15
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a95      	ldr	r2, [pc, #596]	; (8004af4 <UART_SetConfig+0x2f4>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d125      	bne.n	80048f0 <UART_SetConfig+0xf0>
 80048a4:	2003      	movs	r0, #3
 80048a6:	f7ff fb68 	bl	8003f7a <LL_RCC_GetUSARTClockSource>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d81b      	bhi.n	80048e8 <UART_SetConfig+0xe8>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <UART_SetConfig+0xb8>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	080048c9 	.word	0x080048c9
 80048bc:	080048d9 	.word	0x080048d9
 80048c0:	080048d1 	.word	0x080048d1
 80048c4:	080048e1 	.word	0x080048e1
 80048c8:	2301      	movs	r3, #1
 80048ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ce:	e042      	b.n	8004956 <UART_SetConfig+0x156>
 80048d0:	2302      	movs	r3, #2
 80048d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048d6:	e03e      	b.n	8004956 <UART_SetConfig+0x156>
 80048d8:	2304      	movs	r3, #4
 80048da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048de:	e03a      	b.n	8004956 <UART_SetConfig+0x156>
 80048e0:	2308      	movs	r3, #8
 80048e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048e6:	e036      	b.n	8004956 <UART_SetConfig+0x156>
 80048e8:	2310      	movs	r3, #16
 80048ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ee:	e032      	b.n	8004956 <UART_SetConfig+0x156>
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a7e      	ldr	r2, [pc, #504]	; (8004af0 <UART_SetConfig+0x2f0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d12a      	bne.n	8004950 <UART_SetConfig+0x150>
 80048fa:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80048fe:	f7ff fb4c 	bl	8003f9a <LL_RCC_GetLPUARTClockSource>
 8004902:	4603      	mov	r3, r0
 8004904:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004908:	d01a      	beq.n	8004940 <UART_SetConfig+0x140>
 800490a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800490e:	d81b      	bhi.n	8004948 <UART_SetConfig+0x148>
 8004910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004914:	d00c      	beq.n	8004930 <UART_SetConfig+0x130>
 8004916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800491a:	d815      	bhi.n	8004948 <UART_SetConfig+0x148>
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <UART_SetConfig+0x128>
 8004920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004924:	d008      	beq.n	8004938 <UART_SetConfig+0x138>
 8004926:	e00f      	b.n	8004948 <UART_SetConfig+0x148>
 8004928:	2300      	movs	r3, #0
 800492a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800492e:	e012      	b.n	8004956 <UART_SetConfig+0x156>
 8004930:	2302      	movs	r3, #2
 8004932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004936:	e00e      	b.n	8004956 <UART_SetConfig+0x156>
 8004938:	2304      	movs	r3, #4
 800493a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800493e:	e00a      	b.n	8004956 <UART_SetConfig+0x156>
 8004940:	2308      	movs	r3, #8
 8004942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004946:	e006      	b.n	8004956 <UART_SetConfig+0x156>
 8004948:	2310      	movs	r3, #16
 800494a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800494e:	e002      	b.n	8004956 <UART_SetConfig+0x156>
 8004950:	2310      	movs	r3, #16
 8004952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a65      	ldr	r2, [pc, #404]	; (8004af0 <UART_SetConfig+0x2f0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	f040 8097 	bne.w	8004a90 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004962:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004966:	2b08      	cmp	r3, #8
 8004968:	d823      	bhi.n	80049b2 <UART_SetConfig+0x1b2>
 800496a:	a201      	add	r2, pc, #4	; (adr r2, 8004970 <UART_SetConfig+0x170>)
 800496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004970:	08004995 	.word	0x08004995
 8004974:	080049b3 	.word	0x080049b3
 8004978:	0800499d 	.word	0x0800499d
 800497c:	080049b3 	.word	0x080049b3
 8004980:	080049a3 	.word	0x080049a3
 8004984:	080049b3 	.word	0x080049b3
 8004988:	080049b3 	.word	0x080049b3
 800498c:	080049b3 	.word	0x080049b3
 8004990:	080049ab 	.word	0x080049ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004994:	f7fe fdd8 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 8004998:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800499a:	e010      	b.n	80049be <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800499c:	4b56      	ldr	r3, [pc, #344]	; (8004af8 <UART_SetConfig+0x2f8>)
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049a0:	e00d      	b.n	80049be <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049a2:	f7fe fd51 	bl	8003448 <HAL_RCC_GetSysClockFreq>
 80049a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049a8:	e009      	b.n	80049be <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049b0:	e005      	b.n	80049be <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80049bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 812b 	beq.w	8004c1c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	4a4c      	ldr	r2, [pc, #304]	; (8004afc <UART_SetConfig+0x2fc>)
 80049cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049d0:	461a      	mov	r2, r3
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	4413      	add	r3, r2
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d305      	bcc.n	80049f6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d903      	bls.n	80049fe <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80049fc:	e10e      	b.n	8004c1c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	2200      	movs	r2, #0
 8004a02:	60bb      	str	r3, [r7, #8]
 8004a04:	60fa      	str	r2, [r7, #12]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	4a3c      	ldr	r2, [pc, #240]	; (8004afc <UART_SetConfig+0x2fc>)
 8004a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	2200      	movs	r2, #0
 8004a14:	603b      	str	r3, [r7, #0]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a20:	f7fb fc06 	bl	8000230 <__aeabi_uldivmod>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4610      	mov	r0, r2
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	f04f 0200 	mov.w	r2, #0
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	020b      	lsls	r3, r1, #8
 8004a36:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a3a:	0202      	lsls	r2, r0, #8
 8004a3c:	6979      	ldr	r1, [r7, #20]
 8004a3e:	6849      	ldr	r1, [r1, #4]
 8004a40:	0849      	lsrs	r1, r1, #1
 8004a42:	2000      	movs	r0, #0
 8004a44:	460c      	mov	r4, r1
 8004a46:	4605      	mov	r5, r0
 8004a48:	eb12 0804 	adds.w	r8, r2, r4
 8004a4c:	eb43 0905 	adc.w	r9, r3, r5
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	469a      	mov	sl, r3
 8004a58:	4693      	mov	fp, r2
 8004a5a:	4652      	mov	r2, sl
 8004a5c:	465b      	mov	r3, fp
 8004a5e:	4640      	mov	r0, r8
 8004a60:	4649      	mov	r1, r9
 8004a62:	f7fb fbe5 	bl	8000230 <__aeabi_uldivmod>
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a74:	d308      	bcc.n	8004a88 <UART_SetConfig+0x288>
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a7c:	d204      	bcs.n	8004a88 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6a3a      	ldr	r2, [r7, #32]
 8004a84:	60da      	str	r2, [r3, #12]
 8004a86:	e0c9      	b.n	8004c1c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a8e:	e0c5      	b.n	8004c1c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a98:	d16d      	bne.n	8004b76 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004a9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	2b07      	cmp	r3, #7
 8004aa2:	d82d      	bhi.n	8004b00 <UART_SetConfig+0x300>
 8004aa4:	a201      	add	r2, pc, #4	; (adr r2, 8004aac <UART_SetConfig+0x2ac>)
 8004aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aaa:	bf00      	nop
 8004aac:	08004acd 	.word	0x08004acd
 8004ab0:	08004ad5 	.word	0x08004ad5
 8004ab4:	08004b01 	.word	0x08004b01
 8004ab8:	08004adb 	.word	0x08004adb
 8004abc:	08004b01 	.word	0x08004b01
 8004ac0:	08004b01 	.word	0x08004b01
 8004ac4:	08004b01 	.word	0x08004b01
 8004ac8:	08004ae3 	.word	0x08004ae3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004acc:	f7fe fd52 	bl	8003574 <HAL_RCC_GetPCLK2Freq>
 8004ad0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ad2:	e01b      	b.n	8004b0c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ad4:	4b08      	ldr	r3, [pc, #32]	; (8004af8 <UART_SetConfig+0x2f8>)
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ad8:	e018      	b.n	8004b0c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ada:	f7fe fcb5 	bl	8003448 <HAL_RCC_GetSysClockFreq>
 8004ade:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ae0:	e014      	b.n	8004b0c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ae6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ae8:	e010      	b.n	8004b0c <UART_SetConfig+0x30c>
 8004aea:	bf00      	nop
 8004aec:	cfff69f3 	.word	0xcfff69f3
 8004af0:	40008000 	.word	0x40008000
 8004af4:	40013800 	.word	0x40013800
 8004af8:	00f42400 	.word	0x00f42400
 8004afc:	08006eb0 	.word	0x08006eb0
      default:
        pclk = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 8084 	beq.w	8004c1c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	4a4b      	ldr	r2, [pc, #300]	; (8004c48 <UART_SetConfig+0x448>)
 8004b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b26:	005a      	lsls	r2, r3, #1
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	085b      	lsrs	r3, r3, #1
 8004b2e:	441a      	add	r2, r3
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b38:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	2b0f      	cmp	r3, #15
 8004b3e:	d916      	bls.n	8004b6e <UART_SetConfig+0x36e>
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b46:	d212      	bcs.n	8004b6e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	f023 030f 	bic.w	r3, r3, #15
 8004b50:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	085b      	lsrs	r3, r3, #1
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	8bfb      	ldrh	r3, [r7, #30]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	8bfa      	ldrh	r2, [r7, #30]
 8004b6a:	60da      	str	r2, [r3, #12]
 8004b6c:	e056      	b.n	8004c1c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b74:	e052      	b.n	8004c1c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	2b07      	cmp	r3, #7
 8004b7e:	d822      	bhi.n	8004bc6 <UART_SetConfig+0x3c6>
 8004b80:	a201      	add	r2, pc, #4	; (adr r2, 8004b88 <UART_SetConfig+0x388>)
 8004b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b86:	bf00      	nop
 8004b88:	08004ba9 	.word	0x08004ba9
 8004b8c:	08004bb1 	.word	0x08004bb1
 8004b90:	08004bc7 	.word	0x08004bc7
 8004b94:	08004bb7 	.word	0x08004bb7
 8004b98:	08004bc7 	.word	0x08004bc7
 8004b9c:	08004bc7 	.word	0x08004bc7
 8004ba0:	08004bc7 	.word	0x08004bc7
 8004ba4:	08004bbf 	.word	0x08004bbf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ba8:	f7fe fce4 	bl	8003574 <HAL_RCC_GetPCLK2Freq>
 8004bac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bae:	e010      	b.n	8004bd2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb0:	4b26      	ldr	r3, [pc, #152]	; (8004c4c <UART_SetConfig+0x44c>)
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bb4:	e00d      	b.n	8004bd2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb6:	f7fe fc47 	bl	8003448 <HAL_RCC_GetSysClockFreq>
 8004bba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bbc:	e009      	b.n	8004bd2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bc4:	e005      	b.n	8004bd2 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004bd0:	bf00      	nop
    }

    if (pclk != 0U)
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d021      	beq.n	8004c1c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	4a1a      	ldr	r2, [pc, #104]	; (8004c48 <UART_SetConfig+0x448>)
 8004bde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004be2:	461a      	mov	r2, r3
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	085b      	lsrs	r3, r3, #1
 8004bf0:	441a      	add	r2, r3
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	2b0f      	cmp	r3, #15
 8004c00:	d909      	bls.n	8004c16 <UART_SetConfig+0x416>
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c08:	d205      	bcs.n	8004c16 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	60da      	str	r2, [r3, #12]
 8004c14:	e002      	b.n	8004c1c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2200      	movs	r2, #0
 8004c36:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004c38:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3730      	adds	r7, #48	; 0x30
 8004c40:	46bd      	mov	sp, r7
 8004c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c46:	bf00      	nop
 8004c48:	08006eb0 	.word	0x08006eb0
 8004c4c:	00f42400 	.word	0x00f42400

08004c50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce4:	f003 0310 	and.w	r3, r3, #16
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00a      	beq.n	8004d02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01a      	beq.n	8004d66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d4e:	d10a      	bne.n	8004d66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	605a      	str	r2, [r3, #4]
  }
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af02      	add	r7, sp, #8
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004da4:	f7fc fbcc 	bl	8001540 <HAL_GetTick>
 8004da8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d10e      	bne.n	8004dd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004db8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f832 	bl	8004e30 <UART_WaitOnFlagUntilTimeout>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e028      	b.n	8004e28 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d10e      	bne.n	8004e02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f81c 	bl	8004e30 <UART_WaitOnFlagUntilTimeout>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e012      	b.n	8004e28 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b09c      	sub	sp, #112	; 0x70
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e40:	e0a9      	b.n	8004f96 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e48:	f000 80a5 	beq.w	8004f96 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e4c:	f7fc fb78 	bl	8001540 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d302      	bcc.n	8004e62 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d140      	bne.n	8004ee4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e6a:	e853 3f00 	ldrex	r3, [r3]
 8004e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e76:	667b      	str	r3, [r7, #100]	; 0x64
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e82:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e88:	e841 2300 	strex	r3, r2, [r1]
 8004e8c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1e6      	bne.n	8004e62 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3308      	adds	r3, #8
 8004e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea6:	f023 0301 	bic.w	r3, r3, #1
 8004eaa:	663b      	str	r3, [r7, #96]	; 0x60
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3308      	adds	r3, #8
 8004eb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004eb4:	64ba      	str	r2, [r7, #72]	; 0x48
 8004eb6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004eba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ebc:	e841 2300 	strex	r3, r2, [r1]
 8004ec0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e5      	bne.n	8004e94 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e069      	b.n	8004fb8 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0304 	and.w	r3, r3, #4
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d051      	beq.n	8004f96 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f00:	d149      	bne.n	8004f96 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f0a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f2c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e6      	bne.n	8004f0c <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3308      	adds	r3, #8
 8004f44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	e853 3f00 	ldrex	r3, [r3]
 8004f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3308      	adds	r3, #8
 8004f5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f5e:	623a      	str	r2, [r7, #32]
 8004f60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f62:	69f9      	ldr	r1, [r7, #28]
 8004f64:	6a3a      	ldr	r2, [r7, #32]
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1e5      	bne.n	8004f3e <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e010      	b.n	8004fb8 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	bf0c      	ite	eq
 8004fa6:	2301      	moveq	r3, #1
 8004fa8:	2300      	movne	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	f43f af46 	beq.w	8004e42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3770      	adds	r7, #112	; 0x70
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b096      	sub	sp, #88	; 0x58
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	88fa      	ldrh	r2, [r7, #6]
 8004fd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2222      	movs	r2, #34	; 0x22
 8004fe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d02d      	beq.n	8005052 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ffc:	4a40      	ldr	r2, [pc, #256]	; (8005100 <UART_Start_Receive_DMA+0x140>)
 8004ffe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005006:	4a3f      	ldr	r2, [pc, #252]	; (8005104 <UART_Start_Receive_DMA+0x144>)
 8005008:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005010:	4a3d      	ldr	r2, [pc, #244]	; (8005108 <UART_Start_Receive_DMA+0x148>)
 8005012:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800501a:	2200      	movs	r2, #0
 800501c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3324      	adds	r3, #36	; 0x24
 800502a:	4619      	mov	r1, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005030:	461a      	mov	r2, r3
 8005032:	88fb      	ldrh	r3, [r7, #6]
 8005034:	f7fc fcaa 	bl	800198c <HAL_DMA_Start_IT>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d009      	beq.n	8005052 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2210      	movs	r2, #16
 8005042:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2220      	movs	r2, #32
 800504a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e051      	b.n	80050f6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d018      	beq.n	800508c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005062:	e853 3f00 	ldrex	r3, [r3]
 8005066:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800506e:	657b      	str	r3, [r7, #84]	; 0x54
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	461a      	mov	r2, r3
 8005076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005078:	64bb      	str	r3, [r7, #72]	; 0x48
 800507a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800507e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005080:	e841 2300 	strex	r3, r2, [r1]
 8005084:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1e6      	bne.n	800505a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3308      	adds	r3, #8
 8005092:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005096:	e853 3f00 	ldrex	r3, [r3]
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	f043 0301 	orr.w	r3, r3, #1
 80050a2:	653b      	str	r3, [r7, #80]	; 0x50
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3308      	adds	r3, #8
 80050aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80050ac:	637a      	str	r2, [r7, #52]	; 0x34
 80050ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050b4:	e841 2300 	strex	r3, r2, [r1]
 80050b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1e5      	bne.n	800508c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3308      	adds	r3, #8
 80050c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	613b      	str	r3, [r7, #16]
   return(result);
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3308      	adds	r3, #8
 80050de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050e0:	623a      	str	r2, [r7, #32]
 80050e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	69f9      	ldr	r1, [r7, #28]
 80050e6:	6a3a      	ldr	r2, [r7, #32]
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e5      	bne.n	80050c0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3758      	adds	r7, #88	; 0x58
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	0800525b 	.word	0x0800525b
 8005104:	08005387 	.word	0x08005387
 8005108:	080053c5 	.word	0x080053c5

0800510c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800510c:	b480      	push	{r7}
 800510e:	b08f      	sub	sp, #60	; 0x3c
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	e853 3f00 	ldrex	r3, [r3]
 8005120:	61fb      	str	r3, [r7, #28]
   return(result);
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005128:	637b      	str	r3, [r7, #52]	; 0x34
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005134:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005136:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800513a:	e841 2300 	strex	r3, r2, [r1]
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1e6      	bne.n	8005114 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3308      	adds	r3, #8
 800514c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	60bb      	str	r3, [r7, #8]
   return(result);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800515c:	633b      	str	r3, [r7, #48]	; 0x30
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3308      	adds	r3, #8
 8005164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005166:	61ba      	str	r2, [r7, #24]
 8005168:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	6979      	ldr	r1, [r7, #20]
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	613b      	str	r3, [r7, #16]
   return(result);
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e5      	bne.n	8005146 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2220      	movs	r2, #32
 800517e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8005182:	bf00      	nop
 8005184:	373c      	adds	r7, #60	; 0x3c
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800518e:	b480      	push	{r7}
 8005190:	b095      	sub	sp, #84	; 0x54
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519e:	e853 3f00 	ldrex	r3, [r3]
 80051a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	461a      	mov	r2, r3
 80051b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b4:	643b      	str	r3, [r7, #64]	; 0x40
 80051b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051bc:	e841 2300 	strex	r3, r2, [r1]
 80051c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1e6      	bne.n	8005196 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3308      	adds	r3, #8
 80051ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	e853 3f00 	ldrex	r3, [r3]
 80051d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051de:	f023 0301 	bic.w	r3, r3, #1
 80051e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3308      	adds	r3, #8
 80051ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051f4:	e841 2300 	strex	r3, r2, [r1]
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1e3      	bne.n	80051c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005204:	2b01      	cmp	r3, #1
 8005206:	d118      	bne.n	800523a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	60bb      	str	r3, [r7, #8]
   return(result);
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	f023 0310 	bic.w	r3, r3, #16
 800521c:	647b      	str	r3, [r7, #68]	; 0x44
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	461a      	mov	r2, r3
 8005224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005226:	61bb      	str	r3, [r7, #24]
 8005228:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	6979      	ldr	r1, [r7, #20]
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	613b      	str	r3, [r7, #16]
   return(result);
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e6      	bne.n	8005208 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2220      	movs	r2, #32
 800523e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800524e:	bf00      	nop
 8005250:	3754      	adds	r7, #84	; 0x54
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b09c      	sub	sp, #112	; 0x70
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005266:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0320 	and.w	r3, r3, #32
 8005272:	2b00      	cmp	r3, #0
 8005274:	d171      	bne.n	800535a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005278:	2200      	movs	r2, #0
 800527a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800527e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005286:	e853 3f00 	ldrex	r3, [r3]
 800528a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800528c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800528e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005292:	66bb      	str	r3, [r7, #104]	; 0x68
 8005294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	461a      	mov	r2, r3
 800529a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800529c:	65bb      	str	r3, [r7, #88]	; 0x58
 800529e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052a4:	e841 2300 	strex	r3, r2, [r1]
 80052a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1e6      	bne.n	800527e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3308      	adds	r3, #8
 80052b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	e853 3f00 	ldrex	r3, [r3]
 80052be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c2:	f023 0301 	bic.w	r3, r3, #1
 80052c6:	667b      	str	r3, [r7, #100]	; 0x64
 80052c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3308      	adds	r3, #8
 80052ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80052d0:	647a      	str	r2, [r7, #68]	; 0x44
 80052d2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052d8:	e841 2300 	strex	r3, r2, [r1]
 80052dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1e5      	bne.n	80052b0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3308      	adds	r3, #8
 80052ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	e853 3f00 	ldrex	r3, [r3]
 80052f2:	623b      	str	r3, [r7, #32]
   return(result);
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052fa:	663b      	str	r3, [r7, #96]	; 0x60
 80052fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3308      	adds	r3, #8
 8005302:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005304:	633a      	str	r2, [r7, #48]	; 0x30
 8005306:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005308:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800530a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e5      	bne.n	80052e4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531a:	2220      	movs	r2, #32
 800531c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005324:	2b01      	cmp	r3, #1
 8005326:	d118      	bne.n	800535a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	60fb      	str	r3, [r7, #12]
   return(result);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f023 0310 	bic.w	r3, r3, #16
 800533c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800533e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005346:	61fb      	str	r3, [r7, #28]
 8005348:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534a:	69b9      	ldr	r1, [r7, #24]
 800534c:	69fa      	ldr	r2, [r7, #28]
 800534e:	e841 2300 	strex	r3, r2, [r1]
 8005352:	617b      	str	r3, [r7, #20]
   return(result);
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1e6      	bne.n	8005328 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800535a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800535c:	2200      	movs	r2, #0
 800535e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005364:	2b01      	cmp	r3, #1
 8005366:	d107      	bne.n	8005378 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800536a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800536e:	4619      	mov	r1, r3
 8005370:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005372:	f7fb ffa9 	bl	80012c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005376:	e002      	b.n	800537e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005378:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800537a:	f7ff fa23 	bl	80047c4 <HAL_UART_RxCpltCallback>
}
 800537e:	bf00      	nop
 8005380:	3770      	adds	r7, #112	; 0x70
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005392:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2201      	movs	r2, #1
 8005398:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d109      	bne.n	80053b6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80053a8:	085b      	lsrs	r3, r3, #1
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	4619      	mov	r1, r3
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f7fb ff8a 	bl	80012c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053b4:	e002      	b.n	80053bc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f7ff fa0e 	bl	80047d8 <HAL_UART_RxHalfCpltCallback>
}
 80053bc:	bf00      	nop
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053e0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ec:	2b80      	cmp	r3, #128	; 0x80
 80053ee:	d109      	bne.n	8005404 <UART_DMAError+0x40>
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	2b21      	cmp	r3, #33	; 0x21
 80053f4:	d106      	bne.n	8005404 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80053fe:	6978      	ldr	r0, [r7, #20]
 8005400:	f7ff fe84 	bl	800510c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540e:	2b40      	cmp	r3, #64	; 0x40
 8005410:	d109      	bne.n	8005426 <UART_DMAError+0x62>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b22      	cmp	r3, #34	; 0x22
 8005416:	d106      	bne.n	8005426 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	2200      	movs	r2, #0
 800541c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005420:	6978      	ldr	r0, [r7, #20]
 8005422:	f7ff feb4 	bl	800518e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542c:	f043 0210 	orr.w	r2, r3, #16
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005436:	6978      	ldr	r0, [r7, #20]
 8005438:	f7ff f9d8 	bl	80047ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800543c:	bf00      	nop
 800543e:	3718      	adds	r7, #24
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005450:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f7ff f9c2 	bl	80047ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005468:	bf00      	nop
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	60bb      	str	r3, [r7, #8]
   return(result);
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800548c:	61fb      	str	r3, [r7, #28]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	61bb      	str	r3, [r7, #24]
 8005498:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549a:	6979      	ldr	r1, [r7, #20]
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	e841 2300 	strex	r3, r2, [r1]
 80054a2:	613b      	str	r3, [r7, #16]
   return(result);
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1e6      	bne.n	8005478 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7ff f979 	bl	80047b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054be:	bf00      	nop
 80054c0:	3720      	adds	r7, #32
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005502:	b480      	push	{r7}
 8005504:	b085      	sub	sp, #20
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_UARTEx_DisableFifoMode+0x16>
 8005514:	2302      	movs	r3, #2
 8005516:	e027      	b.n	8005568 <HAL_UARTEx_DisableFifoMode+0x66>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2224      	movs	r2, #36	; 0x24
 8005524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0201 	bic.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005546:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2220      	movs	r2, #32
 800555a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005584:	2b01      	cmp	r3, #1
 8005586:	d101      	bne.n	800558c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005588:	2302      	movs	r3, #2
 800558a:	e02d      	b.n	80055e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2224      	movs	r2, #36	; 0x24
 8005598:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0201 	bic.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f8a3 	bl	8005714 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2220      	movs	r2, #32
 80055da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005600:	2b01      	cmp	r3, #1
 8005602:	d101      	bne.n	8005608 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005604:	2302      	movs	r3, #2
 8005606:	e02d      	b.n	8005664 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2224      	movs	r2, #36	; 0x24
 8005614:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0201 	bic.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f865 	bl	8005714 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2220      	movs	r2, #32
 8005656:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b08c      	sub	sp, #48	; 0x30
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	4613      	mov	r3, r2
 8005678:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005680:	2b20      	cmp	r3, #32
 8005682:	d142      	bne.n	800570a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d002      	beq.n	8005690 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800568a:	88fb      	ldrh	r3, [r7, #6]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e03b      	b.n	800570c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2201      	movs	r2, #1
 8005698:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80056a0:	88fb      	ldrh	r3, [r7, #6]
 80056a2:	461a      	mov	r2, r3
 80056a4:	68b9      	ldr	r1, [r7, #8]
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f7ff fc8a 	bl	8004fc0 <UART_Start_Receive_DMA>
 80056ac:	4603      	mov	r3, r0
 80056ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80056b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d124      	bne.n	8005704 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d11d      	bne.n	80056fe <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2210      	movs	r2, #16
 80056c8:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	617b      	str	r3, [r7, #20]
   return(result);
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f043 0310 	orr.w	r3, r3, #16
 80056de:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ea:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ec:	6a39      	ldr	r1, [r7, #32]
 80056ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f0:	e841 2300 	strex	r3, r2, [r1]
 80056f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e6      	bne.n	80056ca <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80056fc:	e002      	b.n	8005704 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005704:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005708:	e000      	b.n	800570c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800570a:	2302      	movs	r3, #2
  }
}
 800570c:	4618      	mov	r0, r3
 800570e:	3730      	adds	r7, #48	; 0x30
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005720:	2b00      	cmp	r3, #0
 8005722:	d108      	bne.n	8005736 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005734:	e031      	b.n	800579a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005736:	2308      	movs	r3, #8
 8005738:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800573a:	2308      	movs	r3, #8
 800573c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	0e5b      	lsrs	r3, r3, #25
 8005746:	b2db      	uxtb	r3, r3
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	0f5b      	lsrs	r3, r3, #29
 8005756:	b2db      	uxtb	r3, r3
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800575e:	7bbb      	ldrb	r3, [r7, #14]
 8005760:	7b3a      	ldrb	r2, [r7, #12]
 8005762:	4911      	ldr	r1, [pc, #68]	; (80057a8 <UARTEx_SetNbDataToProcess+0x94>)
 8005764:	5c8a      	ldrb	r2, [r1, r2]
 8005766:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800576a:	7b3a      	ldrb	r2, [r7, #12]
 800576c:	490f      	ldr	r1, [pc, #60]	; (80057ac <UARTEx_SetNbDataToProcess+0x98>)
 800576e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005770:	fb93 f3f2 	sdiv	r3, r3, r2
 8005774:	b29a      	uxth	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	7b7a      	ldrb	r2, [r7, #13]
 8005780:	4909      	ldr	r1, [pc, #36]	; (80057a8 <UARTEx_SetNbDataToProcess+0x94>)
 8005782:	5c8a      	ldrb	r2, [r1, r2]
 8005784:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005788:	7b7a      	ldrb	r2, [r7, #13]
 800578a:	4908      	ldr	r1, [pc, #32]	; (80057ac <UARTEx_SetNbDataToProcess+0x98>)
 800578c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800578e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005792:	b29a      	uxth	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800579a:	bf00      	nop
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	08006ec8 	.word	0x08006ec8
 80057ac:	08006ed0 	.word	0x08006ed0

080057b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057b8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80057bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	43db      	mvns	r3, r3
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	4013      	ands	r3, r2
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057e6:	b084      	sub	sp, #16
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	f107 0014 	add.w	r0, r7, #20
 80057f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	b004      	add	sp, #16
 8005826:	4770      	bx	lr

08005828 <__errno>:
 8005828:	4b01      	ldr	r3, [pc, #4]	; (8005830 <__errno+0x8>)
 800582a:	6818      	ldr	r0, [r3, #0]
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	20000084 	.word	0x20000084

08005834 <__libc_init_array>:
 8005834:	b570      	push	{r4, r5, r6, lr}
 8005836:	4d0d      	ldr	r5, [pc, #52]	; (800586c <__libc_init_array+0x38>)
 8005838:	4c0d      	ldr	r4, [pc, #52]	; (8005870 <__libc_init_array+0x3c>)
 800583a:	1b64      	subs	r4, r4, r5
 800583c:	10a4      	asrs	r4, r4, #2
 800583e:	2600      	movs	r6, #0
 8005840:	42a6      	cmp	r6, r4
 8005842:	d109      	bne.n	8005858 <__libc_init_array+0x24>
 8005844:	4d0b      	ldr	r5, [pc, #44]	; (8005874 <__libc_init_array+0x40>)
 8005846:	4c0c      	ldr	r4, [pc, #48]	; (8005878 <__libc_init_array+0x44>)
 8005848:	f001 fa2e 	bl	8006ca8 <_init>
 800584c:	1b64      	subs	r4, r4, r5
 800584e:	10a4      	asrs	r4, r4, #2
 8005850:	2600      	movs	r6, #0
 8005852:	42a6      	cmp	r6, r4
 8005854:	d105      	bne.n	8005862 <__libc_init_array+0x2e>
 8005856:	bd70      	pop	{r4, r5, r6, pc}
 8005858:	f855 3b04 	ldr.w	r3, [r5], #4
 800585c:	4798      	blx	r3
 800585e:	3601      	adds	r6, #1
 8005860:	e7ee      	b.n	8005840 <__libc_init_array+0xc>
 8005862:	f855 3b04 	ldr.w	r3, [r5], #4
 8005866:	4798      	blx	r3
 8005868:	3601      	adds	r6, #1
 800586a:	e7f2      	b.n	8005852 <__libc_init_array+0x1e>
 800586c:	08006f78 	.word	0x08006f78
 8005870:	08006f78 	.word	0x08006f78
 8005874:	08006f78 	.word	0x08006f78
 8005878:	08006f7c 	.word	0x08006f7c

0800587c <memset>:
 800587c:	4402      	add	r2, r0
 800587e:	4603      	mov	r3, r0
 8005880:	4293      	cmp	r3, r2
 8005882:	d100      	bne.n	8005886 <memset+0xa>
 8005884:	4770      	bx	lr
 8005886:	f803 1b01 	strb.w	r1, [r3], #1
 800588a:	e7f9      	b.n	8005880 <memset+0x4>

0800588c <iprintf>:
 800588c:	b40f      	push	{r0, r1, r2, r3}
 800588e:	4b0a      	ldr	r3, [pc, #40]	; (80058b8 <iprintf+0x2c>)
 8005890:	b513      	push	{r0, r1, r4, lr}
 8005892:	681c      	ldr	r4, [r3, #0]
 8005894:	b124      	cbz	r4, 80058a0 <iprintf+0x14>
 8005896:	69a3      	ldr	r3, [r4, #24]
 8005898:	b913      	cbnz	r3, 80058a0 <iprintf+0x14>
 800589a:	4620      	mov	r0, r4
 800589c:	f000 faac 	bl	8005df8 <__sinit>
 80058a0:	ab05      	add	r3, sp, #20
 80058a2:	9a04      	ldr	r2, [sp, #16]
 80058a4:	68a1      	ldr	r1, [r4, #8]
 80058a6:	9301      	str	r3, [sp, #4]
 80058a8:	4620      	mov	r0, r4
 80058aa:	f000 fe11 	bl	80064d0 <_vfiprintf_r>
 80058ae:	b002      	add	sp, #8
 80058b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058b4:	b004      	add	sp, #16
 80058b6:	4770      	bx	lr
 80058b8:	20000084 	.word	0x20000084

080058bc <_puts_r>:
 80058bc:	b570      	push	{r4, r5, r6, lr}
 80058be:	460e      	mov	r6, r1
 80058c0:	4605      	mov	r5, r0
 80058c2:	b118      	cbz	r0, 80058cc <_puts_r+0x10>
 80058c4:	6983      	ldr	r3, [r0, #24]
 80058c6:	b90b      	cbnz	r3, 80058cc <_puts_r+0x10>
 80058c8:	f000 fa96 	bl	8005df8 <__sinit>
 80058cc:	69ab      	ldr	r3, [r5, #24]
 80058ce:	68ac      	ldr	r4, [r5, #8]
 80058d0:	b913      	cbnz	r3, 80058d8 <_puts_r+0x1c>
 80058d2:	4628      	mov	r0, r5
 80058d4:	f000 fa90 	bl	8005df8 <__sinit>
 80058d8:	4b2c      	ldr	r3, [pc, #176]	; (800598c <_puts_r+0xd0>)
 80058da:	429c      	cmp	r4, r3
 80058dc:	d120      	bne.n	8005920 <_puts_r+0x64>
 80058de:	686c      	ldr	r4, [r5, #4]
 80058e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058e2:	07db      	lsls	r3, r3, #31
 80058e4:	d405      	bmi.n	80058f2 <_puts_r+0x36>
 80058e6:	89a3      	ldrh	r3, [r4, #12]
 80058e8:	0598      	lsls	r0, r3, #22
 80058ea:	d402      	bmi.n	80058f2 <_puts_r+0x36>
 80058ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058ee:	f000 fb21 	bl	8005f34 <__retarget_lock_acquire_recursive>
 80058f2:	89a3      	ldrh	r3, [r4, #12]
 80058f4:	0719      	lsls	r1, r3, #28
 80058f6:	d51d      	bpl.n	8005934 <_puts_r+0x78>
 80058f8:	6923      	ldr	r3, [r4, #16]
 80058fa:	b1db      	cbz	r3, 8005934 <_puts_r+0x78>
 80058fc:	3e01      	subs	r6, #1
 80058fe:	68a3      	ldr	r3, [r4, #8]
 8005900:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005904:	3b01      	subs	r3, #1
 8005906:	60a3      	str	r3, [r4, #8]
 8005908:	bb39      	cbnz	r1, 800595a <_puts_r+0x9e>
 800590a:	2b00      	cmp	r3, #0
 800590c:	da38      	bge.n	8005980 <_puts_r+0xc4>
 800590e:	4622      	mov	r2, r4
 8005910:	210a      	movs	r1, #10
 8005912:	4628      	mov	r0, r5
 8005914:	f000 f896 	bl	8005a44 <__swbuf_r>
 8005918:	3001      	adds	r0, #1
 800591a:	d011      	beq.n	8005940 <_puts_r+0x84>
 800591c:	250a      	movs	r5, #10
 800591e:	e011      	b.n	8005944 <_puts_r+0x88>
 8005920:	4b1b      	ldr	r3, [pc, #108]	; (8005990 <_puts_r+0xd4>)
 8005922:	429c      	cmp	r4, r3
 8005924:	d101      	bne.n	800592a <_puts_r+0x6e>
 8005926:	68ac      	ldr	r4, [r5, #8]
 8005928:	e7da      	b.n	80058e0 <_puts_r+0x24>
 800592a:	4b1a      	ldr	r3, [pc, #104]	; (8005994 <_puts_r+0xd8>)
 800592c:	429c      	cmp	r4, r3
 800592e:	bf08      	it	eq
 8005930:	68ec      	ldreq	r4, [r5, #12]
 8005932:	e7d5      	b.n	80058e0 <_puts_r+0x24>
 8005934:	4621      	mov	r1, r4
 8005936:	4628      	mov	r0, r5
 8005938:	f000 f8d6 	bl	8005ae8 <__swsetup_r>
 800593c:	2800      	cmp	r0, #0
 800593e:	d0dd      	beq.n	80058fc <_puts_r+0x40>
 8005940:	f04f 35ff 	mov.w	r5, #4294967295
 8005944:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005946:	07da      	lsls	r2, r3, #31
 8005948:	d405      	bmi.n	8005956 <_puts_r+0x9a>
 800594a:	89a3      	ldrh	r3, [r4, #12]
 800594c:	059b      	lsls	r3, r3, #22
 800594e:	d402      	bmi.n	8005956 <_puts_r+0x9a>
 8005950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005952:	f000 faf0 	bl	8005f36 <__retarget_lock_release_recursive>
 8005956:	4628      	mov	r0, r5
 8005958:	bd70      	pop	{r4, r5, r6, pc}
 800595a:	2b00      	cmp	r3, #0
 800595c:	da04      	bge.n	8005968 <_puts_r+0xac>
 800595e:	69a2      	ldr	r2, [r4, #24]
 8005960:	429a      	cmp	r2, r3
 8005962:	dc06      	bgt.n	8005972 <_puts_r+0xb6>
 8005964:	290a      	cmp	r1, #10
 8005966:	d004      	beq.n	8005972 <_puts_r+0xb6>
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	6022      	str	r2, [r4, #0]
 800596e:	7019      	strb	r1, [r3, #0]
 8005970:	e7c5      	b.n	80058fe <_puts_r+0x42>
 8005972:	4622      	mov	r2, r4
 8005974:	4628      	mov	r0, r5
 8005976:	f000 f865 	bl	8005a44 <__swbuf_r>
 800597a:	3001      	adds	r0, #1
 800597c:	d1bf      	bne.n	80058fe <_puts_r+0x42>
 800597e:	e7df      	b.n	8005940 <_puts_r+0x84>
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	250a      	movs	r5, #10
 8005984:	1c5a      	adds	r2, r3, #1
 8005986:	6022      	str	r2, [r4, #0]
 8005988:	701d      	strb	r5, [r3, #0]
 800598a:	e7db      	b.n	8005944 <_puts_r+0x88>
 800598c:	08006efc 	.word	0x08006efc
 8005990:	08006f1c 	.word	0x08006f1c
 8005994:	08006edc 	.word	0x08006edc

08005998 <puts>:
 8005998:	4b02      	ldr	r3, [pc, #8]	; (80059a4 <puts+0xc>)
 800599a:	4601      	mov	r1, r0
 800599c:	6818      	ldr	r0, [r3, #0]
 800599e:	f7ff bf8d 	b.w	80058bc <_puts_r>
 80059a2:	bf00      	nop
 80059a4:	20000084 	.word	0x20000084

080059a8 <siprintf>:
 80059a8:	b40e      	push	{r1, r2, r3}
 80059aa:	b500      	push	{lr}
 80059ac:	b09c      	sub	sp, #112	; 0x70
 80059ae:	ab1d      	add	r3, sp, #116	; 0x74
 80059b0:	9002      	str	r0, [sp, #8]
 80059b2:	9006      	str	r0, [sp, #24]
 80059b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80059b8:	4809      	ldr	r0, [pc, #36]	; (80059e0 <siprintf+0x38>)
 80059ba:	9107      	str	r1, [sp, #28]
 80059bc:	9104      	str	r1, [sp, #16]
 80059be:	4909      	ldr	r1, [pc, #36]	; (80059e4 <siprintf+0x3c>)
 80059c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80059c4:	9105      	str	r1, [sp, #20]
 80059c6:	6800      	ldr	r0, [r0, #0]
 80059c8:	9301      	str	r3, [sp, #4]
 80059ca:	a902      	add	r1, sp, #8
 80059cc:	f000 fc56 	bl	800627c <_svfiprintf_r>
 80059d0:	9b02      	ldr	r3, [sp, #8]
 80059d2:	2200      	movs	r2, #0
 80059d4:	701a      	strb	r2, [r3, #0]
 80059d6:	b01c      	add	sp, #112	; 0x70
 80059d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80059dc:	b003      	add	sp, #12
 80059de:	4770      	bx	lr
 80059e0:	20000084 	.word	0x20000084
 80059e4:	ffff0208 	.word	0xffff0208

080059e8 <strcat>:
 80059e8:	b510      	push	{r4, lr}
 80059ea:	4602      	mov	r2, r0
 80059ec:	7814      	ldrb	r4, [r2, #0]
 80059ee:	4613      	mov	r3, r2
 80059f0:	3201      	adds	r2, #1
 80059f2:	2c00      	cmp	r4, #0
 80059f4:	d1fa      	bne.n	80059ec <strcat+0x4>
 80059f6:	3b01      	subs	r3, #1
 80059f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a00:	2a00      	cmp	r2, #0
 8005a02:	d1f9      	bne.n	80059f8 <strcat+0x10>
 8005a04:	bd10      	pop	{r4, pc}

08005a06 <strcpy>:
 8005a06:	4603      	mov	r3, r0
 8005a08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a0c:	f803 2b01 	strb.w	r2, [r3], #1
 8005a10:	2a00      	cmp	r2, #0
 8005a12:	d1f9      	bne.n	8005a08 <strcpy+0x2>
 8005a14:	4770      	bx	lr

08005a16 <strstr>:
 8005a16:	780a      	ldrb	r2, [r1, #0]
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	b96a      	cbnz	r2, 8005a38 <strstr+0x22>
 8005a1c:	bd70      	pop	{r4, r5, r6, pc}
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d109      	bne.n	8005a36 <strstr+0x20>
 8005a22:	460c      	mov	r4, r1
 8005a24:	4605      	mov	r5, r0
 8005a26:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0f6      	beq.n	8005a1c <strstr+0x6>
 8005a2e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005a32:	429e      	cmp	r6, r3
 8005a34:	d0f7      	beq.n	8005a26 <strstr+0x10>
 8005a36:	3001      	adds	r0, #1
 8005a38:	7803      	ldrb	r3, [r0, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1ef      	bne.n	8005a1e <strstr+0x8>
 8005a3e:	4618      	mov	r0, r3
 8005a40:	e7ec      	b.n	8005a1c <strstr+0x6>
	...

08005a44 <__swbuf_r>:
 8005a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a46:	460e      	mov	r6, r1
 8005a48:	4614      	mov	r4, r2
 8005a4a:	4605      	mov	r5, r0
 8005a4c:	b118      	cbz	r0, 8005a56 <__swbuf_r+0x12>
 8005a4e:	6983      	ldr	r3, [r0, #24]
 8005a50:	b90b      	cbnz	r3, 8005a56 <__swbuf_r+0x12>
 8005a52:	f000 f9d1 	bl	8005df8 <__sinit>
 8005a56:	4b21      	ldr	r3, [pc, #132]	; (8005adc <__swbuf_r+0x98>)
 8005a58:	429c      	cmp	r4, r3
 8005a5a:	d12b      	bne.n	8005ab4 <__swbuf_r+0x70>
 8005a5c:	686c      	ldr	r4, [r5, #4]
 8005a5e:	69a3      	ldr	r3, [r4, #24]
 8005a60:	60a3      	str	r3, [r4, #8]
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	071a      	lsls	r2, r3, #28
 8005a66:	d52f      	bpl.n	8005ac8 <__swbuf_r+0x84>
 8005a68:	6923      	ldr	r3, [r4, #16]
 8005a6a:	b36b      	cbz	r3, 8005ac8 <__swbuf_r+0x84>
 8005a6c:	6923      	ldr	r3, [r4, #16]
 8005a6e:	6820      	ldr	r0, [r4, #0]
 8005a70:	1ac0      	subs	r0, r0, r3
 8005a72:	6963      	ldr	r3, [r4, #20]
 8005a74:	b2f6      	uxtb	r6, r6
 8005a76:	4283      	cmp	r3, r0
 8005a78:	4637      	mov	r7, r6
 8005a7a:	dc04      	bgt.n	8005a86 <__swbuf_r+0x42>
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	4628      	mov	r0, r5
 8005a80:	f000 f926 	bl	8005cd0 <_fflush_r>
 8005a84:	bb30      	cbnz	r0, 8005ad4 <__swbuf_r+0x90>
 8005a86:	68a3      	ldr	r3, [r4, #8]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	60a3      	str	r3, [r4, #8]
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	6022      	str	r2, [r4, #0]
 8005a92:	701e      	strb	r6, [r3, #0]
 8005a94:	6963      	ldr	r3, [r4, #20]
 8005a96:	3001      	adds	r0, #1
 8005a98:	4283      	cmp	r3, r0
 8005a9a:	d004      	beq.n	8005aa6 <__swbuf_r+0x62>
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	07db      	lsls	r3, r3, #31
 8005aa0:	d506      	bpl.n	8005ab0 <__swbuf_r+0x6c>
 8005aa2:	2e0a      	cmp	r6, #10
 8005aa4:	d104      	bne.n	8005ab0 <__swbuf_r+0x6c>
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	f000 f911 	bl	8005cd0 <_fflush_r>
 8005aae:	b988      	cbnz	r0, 8005ad4 <__swbuf_r+0x90>
 8005ab0:	4638      	mov	r0, r7
 8005ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ab4:	4b0a      	ldr	r3, [pc, #40]	; (8005ae0 <__swbuf_r+0x9c>)
 8005ab6:	429c      	cmp	r4, r3
 8005ab8:	d101      	bne.n	8005abe <__swbuf_r+0x7a>
 8005aba:	68ac      	ldr	r4, [r5, #8]
 8005abc:	e7cf      	b.n	8005a5e <__swbuf_r+0x1a>
 8005abe:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <__swbuf_r+0xa0>)
 8005ac0:	429c      	cmp	r4, r3
 8005ac2:	bf08      	it	eq
 8005ac4:	68ec      	ldreq	r4, [r5, #12]
 8005ac6:	e7ca      	b.n	8005a5e <__swbuf_r+0x1a>
 8005ac8:	4621      	mov	r1, r4
 8005aca:	4628      	mov	r0, r5
 8005acc:	f000 f80c 	bl	8005ae8 <__swsetup_r>
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	d0cb      	beq.n	8005a6c <__swbuf_r+0x28>
 8005ad4:	f04f 37ff 	mov.w	r7, #4294967295
 8005ad8:	e7ea      	b.n	8005ab0 <__swbuf_r+0x6c>
 8005ada:	bf00      	nop
 8005adc:	08006efc 	.word	0x08006efc
 8005ae0:	08006f1c 	.word	0x08006f1c
 8005ae4:	08006edc 	.word	0x08006edc

08005ae8 <__swsetup_r>:
 8005ae8:	4b32      	ldr	r3, [pc, #200]	; (8005bb4 <__swsetup_r+0xcc>)
 8005aea:	b570      	push	{r4, r5, r6, lr}
 8005aec:	681d      	ldr	r5, [r3, #0]
 8005aee:	4606      	mov	r6, r0
 8005af0:	460c      	mov	r4, r1
 8005af2:	b125      	cbz	r5, 8005afe <__swsetup_r+0x16>
 8005af4:	69ab      	ldr	r3, [r5, #24]
 8005af6:	b913      	cbnz	r3, 8005afe <__swsetup_r+0x16>
 8005af8:	4628      	mov	r0, r5
 8005afa:	f000 f97d 	bl	8005df8 <__sinit>
 8005afe:	4b2e      	ldr	r3, [pc, #184]	; (8005bb8 <__swsetup_r+0xd0>)
 8005b00:	429c      	cmp	r4, r3
 8005b02:	d10f      	bne.n	8005b24 <__swsetup_r+0x3c>
 8005b04:	686c      	ldr	r4, [r5, #4]
 8005b06:	89a3      	ldrh	r3, [r4, #12]
 8005b08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b0c:	0719      	lsls	r1, r3, #28
 8005b0e:	d42c      	bmi.n	8005b6a <__swsetup_r+0x82>
 8005b10:	06dd      	lsls	r5, r3, #27
 8005b12:	d411      	bmi.n	8005b38 <__swsetup_r+0x50>
 8005b14:	2309      	movs	r3, #9
 8005b16:	6033      	str	r3, [r6, #0]
 8005b18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b1c:	81a3      	strh	r3, [r4, #12]
 8005b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b22:	e03e      	b.n	8005ba2 <__swsetup_r+0xba>
 8005b24:	4b25      	ldr	r3, [pc, #148]	; (8005bbc <__swsetup_r+0xd4>)
 8005b26:	429c      	cmp	r4, r3
 8005b28:	d101      	bne.n	8005b2e <__swsetup_r+0x46>
 8005b2a:	68ac      	ldr	r4, [r5, #8]
 8005b2c:	e7eb      	b.n	8005b06 <__swsetup_r+0x1e>
 8005b2e:	4b24      	ldr	r3, [pc, #144]	; (8005bc0 <__swsetup_r+0xd8>)
 8005b30:	429c      	cmp	r4, r3
 8005b32:	bf08      	it	eq
 8005b34:	68ec      	ldreq	r4, [r5, #12]
 8005b36:	e7e6      	b.n	8005b06 <__swsetup_r+0x1e>
 8005b38:	0758      	lsls	r0, r3, #29
 8005b3a:	d512      	bpl.n	8005b62 <__swsetup_r+0x7a>
 8005b3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b3e:	b141      	cbz	r1, 8005b52 <__swsetup_r+0x6a>
 8005b40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b44:	4299      	cmp	r1, r3
 8005b46:	d002      	beq.n	8005b4e <__swsetup_r+0x66>
 8005b48:	4630      	mov	r0, r6
 8005b4a:	f000 fa5b 	bl	8006004 <_free_r>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	6363      	str	r3, [r4, #52]	; 0x34
 8005b52:	89a3      	ldrh	r3, [r4, #12]
 8005b54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b58:	81a3      	strh	r3, [r4, #12]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	6063      	str	r3, [r4, #4]
 8005b5e:	6923      	ldr	r3, [r4, #16]
 8005b60:	6023      	str	r3, [r4, #0]
 8005b62:	89a3      	ldrh	r3, [r4, #12]
 8005b64:	f043 0308 	orr.w	r3, r3, #8
 8005b68:	81a3      	strh	r3, [r4, #12]
 8005b6a:	6923      	ldr	r3, [r4, #16]
 8005b6c:	b94b      	cbnz	r3, 8005b82 <__swsetup_r+0x9a>
 8005b6e:	89a3      	ldrh	r3, [r4, #12]
 8005b70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b78:	d003      	beq.n	8005b82 <__swsetup_r+0x9a>
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	f000 fa01 	bl	8005f84 <__smakebuf_r>
 8005b82:	89a0      	ldrh	r0, [r4, #12]
 8005b84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b88:	f010 0301 	ands.w	r3, r0, #1
 8005b8c:	d00a      	beq.n	8005ba4 <__swsetup_r+0xbc>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60a3      	str	r3, [r4, #8]
 8005b92:	6963      	ldr	r3, [r4, #20]
 8005b94:	425b      	negs	r3, r3
 8005b96:	61a3      	str	r3, [r4, #24]
 8005b98:	6923      	ldr	r3, [r4, #16]
 8005b9a:	b943      	cbnz	r3, 8005bae <__swsetup_r+0xc6>
 8005b9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ba0:	d1ba      	bne.n	8005b18 <__swsetup_r+0x30>
 8005ba2:	bd70      	pop	{r4, r5, r6, pc}
 8005ba4:	0781      	lsls	r1, r0, #30
 8005ba6:	bf58      	it	pl
 8005ba8:	6963      	ldrpl	r3, [r4, #20]
 8005baa:	60a3      	str	r3, [r4, #8]
 8005bac:	e7f4      	b.n	8005b98 <__swsetup_r+0xb0>
 8005bae:	2000      	movs	r0, #0
 8005bb0:	e7f7      	b.n	8005ba2 <__swsetup_r+0xba>
 8005bb2:	bf00      	nop
 8005bb4:	20000084 	.word	0x20000084
 8005bb8:	08006efc 	.word	0x08006efc
 8005bbc:	08006f1c 	.word	0x08006f1c
 8005bc0:	08006edc 	.word	0x08006edc

08005bc4 <__sflush_r>:
 8005bc4:	898a      	ldrh	r2, [r1, #12]
 8005bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bca:	4605      	mov	r5, r0
 8005bcc:	0710      	lsls	r0, r2, #28
 8005bce:	460c      	mov	r4, r1
 8005bd0:	d458      	bmi.n	8005c84 <__sflush_r+0xc0>
 8005bd2:	684b      	ldr	r3, [r1, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	dc05      	bgt.n	8005be4 <__sflush_r+0x20>
 8005bd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	dc02      	bgt.n	8005be4 <__sflush_r+0x20>
 8005bde:	2000      	movs	r0, #0
 8005be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005be4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005be6:	2e00      	cmp	r6, #0
 8005be8:	d0f9      	beq.n	8005bde <__sflush_r+0x1a>
 8005bea:	2300      	movs	r3, #0
 8005bec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005bf0:	682f      	ldr	r7, [r5, #0]
 8005bf2:	602b      	str	r3, [r5, #0]
 8005bf4:	d032      	beq.n	8005c5c <__sflush_r+0x98>
 8005bf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bf8:	89a3      	ldrh	r3, [r4, #12]
 8005bfa:	075a      	lsls	r2, r3, #29
 8005bfc:	d505      	bpl.n	8005c0a <__sflush_r+0x46>
 8005bfe:	6863      	ldr	r3, [r4, #4]
 8005c00:	1ac0      	subs	r0, r0, r3
 8005c02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c04:	b10b      	cbz	r3, 8005c0a <__sflush_r+0x46>
 8005c06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c08:	1ac0      	subs	r0, r0, r3
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c10:	6a21      	ldr	r1, [r4, #32]
 8005c12:	4628      	mov	r0, r5
 8005c14:	47b0      	blx	r6
 8005c16:	1c43      	adds	r3, r0, #1
 8005c18:	89a3      	ldrh	r3, [r4, #12]
 8005c1a:	d106      	bne.n	8005c2a <__sflush_r+0x66>
 8005c1c:	6829      	ldr	r1, [r5, #0]
 8005c1e:	291d      	cmp	r1, #29
 8005c20:	d82c      	bhi.n	8005c7c <__sflush_r+0xb8>
 8005c22:	4a2a      	ldr	r2, [pc, #168]	; (8005ccc <__sflush_r+0x108>)
 8005c24:	40ca      	lsrs	r2, r1
 8005c26:	07d6      	lsls	r6, r2, #31
 8005c28:	d528      	bpl.n	8005c7c <__sflush_r+0xb8>
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	6062      	str	r2, [r4, #4]
 8005c2e:	04d9      	lsls	r1, r3, #19
 8005c30:	6922      	ldr	r2, [r4, #16]
 8005c32:	6022      	str	r2, [r4, #0]
 8005c34:	d504      	bpl.n	8005c40 <__sflush_r+0x7c>
 8005c36:	1c42      	adds	r2, r0, #1
 8005c38:	d101      	bne.n	8005c3e <__sflush_r+0x7a>
 8005c3a:	682b      	ldr	r3, [r5, #0]
 8005c3c:	b903      	cbnz	r3, 8005c40 <__sflush_r+0x7c>
 8005c3e:	6560      	str	r0, [r4, #84]	; 0x54
 8005c40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c42:	602f      	str	r7, [r5, #0]
 8005c44:	2900      	cmp	r1, #0
 8005c46:	d0ca      	beq.n	8005bde <__sflush_r+0x1a>
 8005c48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c4c:	4299      	cmp	r1, r3
 8005c4e:	d002      	beq.n	8005c56 <__sflush_r+0x92>
 8005c50:	4628      	mov	r0, r5
 8005c52:	f000 f9d7 	bl	8006004 <_free_r>
 8005c56:	2000      	movs	r0, #0
 8005c58:	6360      	str	r0, [r4, #52]	; 0x34
 8005c5a:	e7c1      	b.n	8005be0 <__sflush_r+0x1c>
 8005c5c:	6a21      	ldr	r1, [r4, #32]
 8005c5e:	2301      	movs	r3, #1
 8005c60:	4628      	mov	r0, r5
 8005c62:	47b0      	blx	r6
 8005c64:	1c41      	adds	r1, r0, #1
 8005c66:	d1c7      	bne.n	8005bf8 <__sflush_r+0x34>
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0c4      	beq.n	8005bf8 <__sflush_r+0x34>
 8005c6e:	2b1d      	cmp	r3, #29
 8005c70:	d001      	beq.n	8005c76 <__sflush_r+0xb2>
 8005c72:	2b16      	cmp	r3, #22
 8005c74:	d101      	bne.n	8005c7a <__sflush_r+0xb6>
 8005c76:	602f      	str	r7, [r5, #0]
 8005c78:	e7b1      	b.n	8005bde <__sflush_r+0x1a>
 8005c7a:	89a3      	ldrh	r3, [r4, #12]
 8005c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c80:	81a3      	strh	r3, [r4, #12]
 8005c82:	e7ad      	b.n	8005be0 <__sflush_r+0x1c>
 8005c84:	690f      	ldr	r7, [r1, #16]
 8005c86:	2f00      	cmp	r7, #0
 8005c88:	d0a9      	beq.n	8005bde <__sflush_r+0x1a>
 8005c8a:	0793      	lsls	r3, r2, #30
 8005c8c:	680e      	ldr	r6, [r1, #0]
 8005c8e:	bf08      	it	eq
 8005c90:	694b      	ldreq	r3, [r1, #20]
 8005c92:	600f      	str	r7, [r1, #0]
 8005c94:	bf18      	it	ne
 8005c96:	2300      	movne	r3, #0
 8005c98:	eba6 0807 	sub.w	r8, r6, r7
 8005c9c:	608b      	str	r3, [r1, #8]
 8005c9e:	f1b8 0f00 	cmp.w	r8, #0
 8005ca2:	dd9c      	ble.n	8005bde <__sflush_r+0x1a>
 8005ca4:	6a21      	ldr	r1, [r4, #32]
 8005ca6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ca8:	4643      	mov	r3, r8
 8005caa:	463a      	mov	r2, r7
 8005cac:	4628      	mov	r0, r5
 8005cae:	47b0      	blx	r6
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	dc06      	bgt.n	8005cc2 <__sflush_r+0xfe>
 8005cb4:	89a3      	ldrh	r3, [r4, #12]
 8005cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cba:	81a3      	strh	r3, [r4, #12]
 8005cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc0:	e78e      	b.n	8005be0 <__sflush_r+0x1c>
 8005cc2:	4407      	add	r7, r0
 8005cc4:	eba8 0800 	sub.w	r8, r8, r0
 8005cc8:	e7e9      	b.n	8005c9e <__sflush_r+0xda>
 8005cca:	bf00      	nop
 8005ccc:	20400001 	.word	0x20400001

08005cd0 <_fflush_r>:
 8005cd0:	b538      	push	{r3, r4, r5, lr}
 8005cd2:	690b      	ldr	r3, [r1, #16]
 8005cd4:	4605      	mov	r5, r0
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	b913      	cbnz	r3, 8005ce0 <_fflush_r+0x10>
 8005cda:	2500      	movs	r5, #0
 8005cdc:	4628      	mov	r0, r5
 8005cde:	bd38      	pop	{r3, r4, r5, pc}
 8005ce0:	b118      	cbz	r0, 8005cea <_fflush_r+0x1a>
 8005ce2:	6983      	ldr	r3, [r0, #24]
 8005ce4:	b90b      	cbnz	r3, 8005cea <_fflush_r+0x1a>
 8005ce6:	f000 f887 	bl	8005df8 <__sinit>
 8005cea:	4b14      	ldr	r3, [pc, #80]	; (8005d3c <_fflush_r+0x6c>)
 8005cec:	429c      	cmp	r4, r3
 8005cee:	d11b      	bne.n	8005d28 <_fflush_r+0x58>
 8005cf0:	686c      	ldr	r4, [r5, #4]
 8005cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0ef      	beq.n	8005cda <_fflush_r+0xa>
 8005cfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005cfc:	07d0      	lsls	r0, r2, #31
 8005cfe:	d404      	bmi.n	8005d0a <_fflush_r+0x3a>
 8005d00:	0599      	lsls	r1, r3, #22
 8005d02:	d402      	bmi.n	8005d0a <_fflush_r+0x3a>
 8005d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d06:	f000 f915 	bl	8005f34 <__retarget_lock_acquire_recursive>
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	4621      	mov	r1, r4
 8005d0e:	f7ff ff59 	bl	8005bc4 <__sflush_r>
 8005d12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d14:	07da      	lsls	r2, r3, #31
 8005d16:	4605      	mov	r5, r0
 8005d18:	d4e0      	bmi.n	8005cdc <_fflush_r+0xc>
 8005d1a:	89a3      	ldrh	r3, [r4, #12]
 8005d1c:	059b      	lsls	r3, r3, #22
 8005d1e:	d4dd      	bmi.n	8005cdc <_fflush_r+0xc>
 8005d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d22:	f000 f908 	bl	8005f36 <__retarget_lock_release_recursive>
 8005d26:	e7d9      	b.n	8005cdc <_fflush_r+0xc>
 8005d28:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <_fflush_r+0x70>)
 8005d2a:	429c      	cmp	r4, r3
 8005d2c:	d101      	bne.n	8005d32 <_fflush_r+0x62>
 8005d2e:	68ac      	ldr	r4, [r5, #8]
 8005d30:	e7df      	b.n	8005cf2 <_fflush_r+0x22>
 8005d32:	4b04      	ldr	r3, [pc, #16]	; (8005d44 <_fflush_r+0x74>)
 8005d34:	429c      	cmp	r4, r3
 8005d36:	bf08      	it	eq
 8005d38:	68ec      	ldreq	r4, [r5, #12]
 8005d3a:	e7da      	b.n	8005cf2 <_fflush_r+0x22>
 8005d3c:	08006efc 	.word	0x08006efc
 8005d40:	08006f1c 	.word	0x08006f1c
 8005d44:	08006edc 	.word	0x08006edc

08005d48 <std>:
 8005d48:	2300      	movs	r3, #0
 8005d4a:	b510      	push	{r4, lr}
 8005d4c:	4604      	mov	r4, r0
 8005d4e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d56:	6083      	str	r3, [r0, #8]
 8005d58:	8181      	strh	r1, [r0, #12]
 8005d5a:	6643      	str	r3, [r0, #100]	; 0x64
 8005d5c:	81c2      	strh	r2, [r0, #14]
 8005d5e:	6183      	str	r3, [r0, #24]
 8005d60:	4619      	mov	r1, r3
 8005d62:	2208      	movs	r2, #8
 8005d64:	305c      	adds	r0, #92	; 0x5c
 8005d66:	f7ff fd89 	bl	800587c <memset>
 8005d6a:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <std+0x38>)
 8005d6c:	6263      	str	r3, [r4, #36]	; 0x24
 8005d6e:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <std+0x3c>)
 8005d70:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d72:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <std+0x40>)
 8005d74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d76:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <std+0x44>)
 8005d78:	6224      	str	r4, [r4, #32]
 8005d7a:	6323      	str	r3, [r4, #48]	; 0x30
 8005d7c:	bd10      	pop	{r4, pc}
 8005d7e:	bf00      	nop
 8005d80:	08006a79 	.word	0x08006a79
 8005d84:	08006a9b 	.word	0x08006a9b
 8005d88:	08006ad3 	.word	0x08006ad3
 8005d8c:	08006af7 	.word	0x08006af7

08005d90 <_cleanup_r>:
 8005d90:	4901      	ldr	r1, [pc, #4]	; (8005d98 <_cleanup_r+0x8>)
 8005d92:	f000 b8af 	b.w	8005ef4 <_fwalk_reent>
 8005d96:	bf00      	nop
 8005d98:	08005cd1 	.word	0x08005cd1

08005d9c <__sfmoreglue>:
 8005d9c:	b570      	push	{r4, r5, r6, lr}
 8005d9e:	2268      	movs	r2, #104	; 0x68
 8005da0:	1e4d      	subs	r5, r1, #1
 8005da2:	4355      	muls	r5, r2
 8005da4:	460e      	mov	r6, r1
 8005da6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005daa:	f000 f997 	bl	80060dc <_malloc_r>
 8005dae:	4604      	mov	r4, r0
 8005db0:	b140      	cbz	r0, 8005dc4 <__sfmoreglue+0x28>
 8005db2:	2100      	movs	r1, #0
 8005db4:	e9c0 1600 	strd	r1, r6, [r0]
 8005db8:	300c      	adds	r0, #12
 8005dba:	60a0      	str	r0, [r4, #8]
 8005dbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005dc0:	f7ff fd5c 	bl	800587c <memset>
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	bd70      	pop	{r4, r5, r6, pc}

08005dc8 <__sfp_lock_acquire>:
 8005dc8:	4801      	ldr	r0, [pc, #4]	; (8005dd0 <__sfp_lock_acquire+0x8>)
 8005dca:	f000 b8b3 	b.w	8005f34 <__retarget_lock_acquire_recursive>
 8005dce:	bf00      	nop
 8005dd0:	20000761 	.word	0x20000761

08005dd4 <__sfp_lock_release>:
 8005dd4:	4801      	ldr	r0, [pc, #4]	; (8005ddc <__sfp_lock_release+0x8>)
 8005dd6:	f000 b8ae 	b.w	8005f36 <__retarget_lock_release_recursive>
 8005dda:	bf00      	nop
 8005ddc:	20000761 	.word	0x20000761

08005de0 <__sinit_lock_acquire>:
 8005de0:	4801      	ldr	r0, [pc, #4]	; (8005de8 <__sinit_lock_acquire+0x8>)
 8005de2:	f000 b8a7 	b.w	8005f34 <__retarget_lock_acquire_recursive>
 8005de6:	bf00      	nop
 8005de8:	20000762 	.word	0x20000762

08005dec <__sinit_lock_release>:
 8005dec:	4801      	ldr	r0, [pc, #4]	; (8005df4 <__sinit_lock_release+0x8>)
 8005dee:	f000 b8a2 	b.w	8005f36 <__retarget_lock_release_recursive>
 8005df2:	bf00      	nop
 8005df4:	20000762 	.word	0x20000762

08005df8 <__sinit>:
 8005df8:	b510      	push	{r4, lr}
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	f7ff fff0 	bl	8005de0 <__sinit_lock_acquire>
 8005e00:	69a3      	ldr	r3, [r4, #24]
 8005e02:	b11b      	cbz	r3, 8005e0c <__sinit+0x14>
 8005e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e08:	f7ff bff0 	b.w	8005dec <__sinit_lock_release>
 8005e0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e10:	6523      	str	r3, [r4, #80]	; 0x50
 8005e12:	4b13      	ldr	r3, [pc, #76]	; (8005e60 <__sinit+0x68>)
 8005e14:	4a13      	ldr	r2, [pc, #76]	; (8005e64 <__sinit+0x6c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e1a:	42a3      	cmp	r3, r4
 8005e1c:	bf04      	itt	eq
 8005e1e:	2301      	moveq	r3, #1
 8005e20:	61a3      	streq	r3, [r4, #24]
 8005e22:	4620      	mov	r0, r4
 8005e24:	f000 f820 	bl	8005e68 <__sfp>
 8005e28:	6060      	str	r0, [r4, #4]
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f000 f81c 	bl	8005e68 <__sfp>
 8005e30:	60a0      	str	r0, [r4, #8]
 8005e32:	4620      	mov	r0, r4
 8005e34:	f000 f818 	bl	8005e68 <__sfp>
 8005e38:	2200      	movs	r2, #0
 8005e3a:	60e0      	str	r0, [r4, #12]
 8005e3c:	2104      	movs	r1, #4
 8005e3e:	6860      	ldr	r0, [r4, #4]
 8005e40:	f7ff ff82 	bl	8005d48 <std>
 8005e44:	68a0      	ldr	r0, [r4, #8]
 8005e46:	2201      	movs	r2, #1
 8005e48:	2109      	movs	r1, #9
 8005e4a:	f7ff ff7d 	bl	8005d48 <std>
 8005e4e:	68e0      	ldr	r0, [r4, #12]
 8005e50:	2202      	movs	r2, #2
 8005e52:	2112      	movs	r1, #18
 8005e54:	f7ff ff78 	bl	8005d48 <std>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	61a3      	str	r3, [r4, #24]
 8005e5c:	e7d2      	b.n	8005e04 <__sinit+0xc>
 8005e5e:	bf00      	nop
 8005e60:	08006ed8 	.word	0x08006ed8
 8005e64:	08005d91 	.word	0x08005d91

08005e68 <__sfp>:
 8005e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6a:	4607      	mov	r7, r0
 8005e6c:	f7ff ffac 	bl	8005dc8 <__sfp_lock_acquire>
 8005e70:	4b1e      	ldr	r3, [pc, #120]	; (8005eec <__sfp+0x84>)
 8005e72:	681e      	ldr	r6, [r3, #0]
 8005e74:	69b3      	ldr	r3, [r6, #24]
 8005e76:	b913      	cbnz	r3, 8005e7e <__sfp+0x16>
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f7ff ffbd 	bl	8005df8 <__sinit>
 8005e7e:	3648      	adds	r6, #72	; 0x48
 8005e80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e84:	3b01      	subs	r3, #1
 8005e86:	d503      	bpl.n	8005e90 <__sfp+0x28>
 8005e88:	6833      	ldr	r3, [r6, #0]
 8005e8a:	b30b      	cbz	r3, 8005ed0 <__sfp+0x68>
 8005e8c:	6836      	ldr	r6, [r6, #0]
 8005e8e:	e7f7      	b.n	8005e80 <__sfp+0x18>
 8005e90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e94:	b9d5      	cbnz	r5, 8005ecc <__sfp+0x64>
 8005e96:	4b16      	ldr	r3, [pc, #88]	; (8005ef0 <__sfp+0x88>)
 8005e98:	60e3      	str	r3, [r4, #12]
 8005e9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e9e:	6665      	str	r5, [r4, #100]	; 0x64
 8005ea0:	f000 f847 	bl	8005f32 <__retarget_lock_init_recursive>
 8005ea4:	f7ff ff96 	bl	8005dd4 <__sfp_lock_release>
 8005ea8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005eac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005eb0:	6025      	str	r5, [r4, #0]
 8005eb2:	61a5      	str	r5, [r4, #24]
 8005eb4:	2208      	movs	r2, #8
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ebc:	f7ff fcde 	bl	800587c <memset>
 8005ec0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ec4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ec8:	4620      	mov	r0, r4
 8005eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ecc:	3468      	adds	r4, #104	; 0x68
 8005ece:	e7d9      	b.n	8005e84 <__sfp+0x1c>
 8005ed0:	2104      	movs	r1, #4
 8005ed2:	4638      	mov	r0, r7
 8005ed4:	f7ff ff62 	bl	8005d9c <__sfmoreglue>
 8005ed8:	4604      	mov	r4, r0
 8005eda:	6030      	str	r0, [r6, #0]
 8005edc:	2800      	cmp	r0, #0
 8005ede:	d1d5      	bne.n	8005e8c <__sfp+0x24>
 8005ee0:	f7ff ff78 	bl	8005dd4 <__sfp_lock_release>
 8005ee4:	230c      	movs	r3, #12
 8005ee6:	603b      	str	r3, [r7, #0]
 8005ee8:	e7ee      	b.n	8005ec8 <__sfp+0x60>
 8005eea:	bf00      	nop
 8005eec:	08006ed8 	.word	0x08006ed8
 8005ef0:	ffff0001 	.word	0xffff0001

08005ef4 <_fwalk_reent>:
 8005ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ef8:	4606      	mov	r6, r0
 8005efa:	4688      	mov	r8, r1
 8005efc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f00:	2700      	movs	r7, #0
 8005f02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f06:	f1b9 0901 	subs.w	r9, r9, #1
 8005f0a:	d505      	bpl.n	8005f18 <_fwalk_reent+0x24>
 8005f0c:	6824      	ldr	r4, [r4, #0]
 8005f0e:	2c00      	cmp	r4, #0
 8005f10:	d1f7      	bne.n	8005f02 <_fwalk_reent+0xe>
 8005f12:	4638      	mov	r0, r7
 8005f14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f18:	89ab      	ldrh	r3, [r5, #12]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d907      	bls.n	8005f2e <_fwalk_reent+0x3a>
 8005f1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f22:	3301      	adds	r3, #1
 8005f24:	d003      	beq.n	8005f2e <_fwalk_reent+0x3a>
 8005f26:	4629      	mov	r1, r5
 8005f28:	4630      	mov	r0, r6
 8005f2a:	47c0      	blx	r8
 8005f2c:	4307      	orrs	r7, r0
 8005f2e:	3568      	adds	r5, #104	; 0x68
 8005f30:	e7e9      	b.n	8005f06 <_fwalk_reent+0x12>

08005f32 <__retarget_lock_init_recursive>:
 8005f32:	4770      	bx	lr

08005f34 <__retarget_lock_acquire_recursive>:
 8005f34:	4770      	bx	lr

08005f36 <__retarget_lock_release_recursive>:
 8005f36:	4770      	bx	lr

08005f38 <__swhatbuf_r>:
 8005f38:	b570      	push	{r4, r5, r6, lr}
 8005f3a:	460e      	mov	r6, r1
 8005f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f40:	2900      	cmp	r1, #0
 8005f42:	b096      	sub	sp, #88	; 0x58
 8005f44:	4614      	mov	r4, r2
 8005f46:	461d      	mov	r5, r3
 8005f48:	da08      	bge.n	8005f5c <__swhatbuf_r+0x24>
 8005f4a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	602a      	str	r2, [r5, #0]
 8005f52:	061a      	lsls	r2, r3, #24
 8005f54:	d410      	bmi.n	8005f78 <__swhatbuf_r+0x40>
 8005f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f5a:	e00e      	b.n	8005f7a <__swhatbuf_r+0x42>
 8005f5c:	466a      	mov	r2, sp
 8005f5e:	f000 fdf1 	bl	8006b44 <_fstat_r>
 8005f62:	2800      	cmp	r0, #0
 8005f64:	dbf1      	blt.n	8005f4a <__swhatbuf_r+0x12>
 8005f66:	9a01      	ldr	r2, [sp, #4]
 8005f68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f70:	425a      	negs	r2, r3
 8005f72:	415a      	adcs	r2, r3
 8005f74:	602a      	str	r2, [r5, #0]
 8005f76:	e7ee      	b.n	8005f56 <__swhatbuf_r+0x1e>
 8005f78:	2340      	movs	r3, #64	; 0x40
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	b016      	add	sp, #88	; 0x58
 8005f80:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f84 <__smakebuf_r>:
 8005f84:	898b      	ldrh	r3, [r1, #12]
 8005f86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f88:	079d      	lsls	r5, r3, #30
 8005f8a:	4606      	mov	r6, r0
 8005f8c:	460c      	mov	r4, r1
 8005f8e:	d507      	bpl.n	8005fa0 <__smakebuf_r+0x1c>
 8005f90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	6123      	str	r3, [r4, #16]
 8005f98:	2301      	movs	r3, #1
 8005f9a:	6163      	str	r3, [r4, #20]
 8005f9c:	b002      	add	sp, #8
 8005f9e:	bd70      	pop	{r4, r5, r6, pc}
 8005fa0:	ab01      	add	r3, sp, #4
 8005fa2:	466a      	mov	r2, sp
 8005fa4:	f7ff ffc8 	bl	8005f38 <__swhatbuf_r>
 8005fa8:	9900      	ldr	r1, [sp, #0]
 8005faa:	4605      	mov	r5, r0
 8005fac:	4630      	mov	r0, r6
 8005fae:	f000 f895 	bl	80060dc <_malloc_r>
 8005fb2:	b948      	cbnz	r0, 8005fc8 <__smakebuf_r+0x44>
 8005fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fb8:	059a      	lsls	r2, r3, #22
 8005fba:	d4ef      	bmi.n	8005f9c <__smakebuf_r+0x18>
 8005fbc:	f023 0303 	bic.w	r3, r3, #3
 8005fc0:	f043 0302 	orr.w	r3, r3, #2
 8005fc4:	81a3      	strh	r3, [r4, #12]
 8005fc6:	e7e3      	b.n	8005f90 <__smakebuf_r+0xc>
 8005fc8:	4b0d      	ldr	r3, [pc, #52]	; (8006000 <__smakebuf_r+0x7c>)
 8005fca:	62b3      	str	r3, [r6, #40]	; 0x28
 8005fcc:	89a3      	ldrh	r3, [r4, #12]
 8005fce:	6020      	str	r0, [r4, #0]
 8005fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd4:	81a3      	strh	r3, [r4, #12]
 8005fd6:	9b00      	ldr	r3, [sp, #0]
 8005fd8:	6163      	str	r3, [r4, #20]
 8005fda:	9b01      	ldr	r3, [sp, #4]
 8005fdc:	6120      	str	r0, [r4, #16]
 8005fde:	b15b      	cbz	r3, 8005ff8 <__smakebuf_r+0x74>
 8005fe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	f000 fdbf 	bl	8006b68 <_isatty_r>
 8005fea:	b128      	cbz	r0, 8005ff8 <__smakebuf_r+0x74>
 8005fec:	89a3      	ldrh	r3, [r4, #12]
 8005fee:	f023 0303 	bic.w	r3, r3, #3
 8005ff2:	f043 0301 	orr.w	r3, r3, #1
 8005ff6:	81a3      	strh	r3, [r4, #12]
 8005ff8:	89a0      	ldrh	r0, [r4, #12]
 8005ffa:	4305      	orrs	r5, r0
 8005ffc:	81a5      	strh	r5, [r4, #12]
 8005ffe:	e7cd      	b.n	8005f9c <__smakebuf_r+0x18>
 8006000:	08005d91 	.word	0x08005d91

08006004 <_free_r>:
 8006004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006006:	2900      	cmp	r1, #0
 8006008:	d044      	beq.n	8006094 <_free_r+0x90>
 800600a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800600e:	9001      	str	r0, [sp, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	f1a1 0404 	sub.w	r4, r1, #4
 8006016:	bfb8      	it	lt
 8006018:	18e4      	addlt	r4, r4, r3
 800601a:	f000 fdef 	bl	8006bfc <__malloc_lock>
 800601e:	4a1e      	ldr	r2, [pc, #120]	; (8006098 <_free_r+0x94>)
 8006020:	9801      	ldr	r0, [sp, #4]
 8006022:	6813      	ldr	r3, [r2, #0]
 8006024:	b933      	cbnz	r3, 8006034 <_free_r+0x30>
 8006026:	6063      	str	r3, [r4, #4]
 8006028:	6014      	str	r4, [r2, #0]
 800602a:	b003      	add	sp, #12
 800602c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006030:	f000 bdea 	b.w	8006c08 <__malloc_unlock>
 8006034:	42a3      	cmp	r3, r4
 8006036:	d908      	bls.n	800604a <_free_r+0x46>
 8006038:	6825      	ldr	r5, [r4, #0]
 800603a:	1961      	adds	r1, r4, r5
 800603c:	428b      	cmp	r3, r1
 800603e:	bf01      	itttt	eq
 8006040:	6819      	ldreq	r1, [r3, #0]
 8006042:	685b      	ldreq	r3, [r3, #4]
 8006044:	1949      	addeq	r1, r1, r5
 8006046:	6021      	streq	r1, [r4, #0]
 8006048:	e7ed      	b.n	8006026 <_free_r+0x22>
 800604a:	461a      	mov	r2, r3
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	b10b      	cbz	r3, 8006054 <_free_r+0x50>
 8006050:	42a3      	cmp	r3, r4
 8006052:	d9fa      	bls.n	800604a <_free_r+0x46>
 8006054:	6811      	ldr	r1, [r2, #0]
 8006056:	1855      	adds	r5, r2, r1
 8006058:	42a5      	cmp	r5, r4
 800605a:	d10b      	bne.n	8006074 <_free_r+0x70>
 800605c:	6824      	ldr	r4, [r4, #0]
 800605e:	4421      	add	r1, r4
 8006060:	1854      	adds	r4, r2, r1
 8006062:	42a3      	cmp	r3, r4
 8006064:	6011      	str	r1, [r2, #0]
 8006066:	d1e0      	bne.n	800602a <_free_r+0x26>
 8006068:	681c      	ldr	r4, [r3, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	6053      	str	r3, [r2, #4]
 800606e:	4421      	add	r1, r4
 8006070:	6011      	str	r1, [r2, #0]
 8006072:	e7da      	b.n	800602a <_free_r+0x26>
 8006074:	d902      	bls.n	800607c <_free_r+0x78>
 8006076:	230c      	movs	r3, #12
 8006078:	6003      	str	r3, [r0, #0]
 800607a:	e7d6      	b.n	800602a <_free_r+0x26>
 800607c:	6825      	ldr	r5, [r4, #0]
 800607e:	1961      	adds	r1, r4, r5
 8006080:	428b      	cmp	r3, r1
 8006082:	bf04      	itt	eq
 8006084:	6819      	ldreq	r1, [r3, #0]
 8006086:	685b      	ldreq	r3, [r3, #4]
 8006088:	6063      	str	r3, [r4, #4]
 800608a:	bf04      	itt	eq
 800608c:	1949      	addeq	r1, r1, r5
 800608e:	6021      	streq	r1, [r4, #0]
 8006090:	6054      	str	r4, [r2, #4]
 8006092:	e7ca      	b.n	800602a <_free_r+0x26>
 8006094:	b003      	add	sp, #12
 8006096:	bd30      	pop	{r4, r5, pc}
 8006098:	20000764 	.word	0x20000764

0800609c <sbrk_aligned>:
 800609c:	b570      	push	{r4, r5, r6, lr}
 800609e:	4e0e      	ldr	r6, [pc, #56]	; (80060d8 <sbrk_aligned+0x3c>)
 80060a0:	460c      	mov	r4, r1
 80060a2:	6831      	ldr	r1, [r6, #0]
 80060a4:	4605      	mov	r5, r0
 80060a6:	b911      	cbnz	r1, 80060ae <sbrk_aligned+0x12>
 80060a8:	f000 fcd6 	bl	8006a58 <_sbrk_r>
 80060ac:	6030      	str	r0, [r6, #0]
 80060ae:	4621      	mov	r1, r4
 80060b0:	4628      	mov	r0, r5
 80060b2:	f000 fcd1 	bl	8006a58 <_sbrk_r>
 80060b6:	1c43      	adds	r3, r0, #1
 80060b8:	d00a      	beq.n	80060d0 <sbrk_aligned+0x34>
 80060ba:	1cc4      	adds	r4, r0, #3
 80060bc:	f024 0403 	bic.w	r4, r4, #3
 80060c0:	42a0      	cmp	r0, r4
 80060c2:	d007      	beq.n	80060d4 <sbrk_aligned+0x38>
 80060c4:	1a21      	subs	r1, r4, r0
 80060c6:	4628      	mov	r0, r5
 80060c8:	f000 fcc6 	bl	8006a58 <_sbrk_r>
 80060cc:	3001      	adds	r0, #1
 80060ce:	d101      	bne.n	80060d4 <sbrk_aligned+0x38>
 80060d0:	f04f 34ff 	mov.w	r4, #4294967295
 80060d4:	4620      	mov	r0, r4
 80060d6:	bd70      	pop	{r4, r5, r6, pc}
 80060d8:	20000768 	.word	0x20000768

080060dc <_malloc_r>:
 80060dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060e0:	1ccd      	adds	r5, r1, #3
 80060e2:	f025 0503 	bic.w	r5, r5, #3
 80060e6:	3508      	adds	r5, #8
 80060e8:	2d0c      	cmp	r5, #12
 80060ea:	bf38      	it	cc
 80060ec:	250c      	movcc	r5, #12
 80060ee:	2d00      	cmp	r5, #0
 80060f0:	4607      	mov	r7, r0
 80060f2:	db01      	blt.n	80060f8 <_malloc_r+0x1c>
 80060f4:	42a9      	cmp	r1, r5
 80060f6:	d905      	bls.n	8006104 <_malloc_r+0x28>
 80060f8:	230c      	movs	r3, #12
 80060fa:	603b      	str	r3, [r7, #0]
 80060fc:	2600      	movs	r6, #0
 80060fe:	4630      	mov	r0, r6
 8006100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006104:	4e2e      	ldr	r6, [pc, #184]	; (80061c0 <_malloc_r+0xe4>)
 8006106:	f000 fd79 	bl	8006bfc <__malloc_lock>
 800610a:	6833      	ldr	r3, [r6, #0]
 800610c:	461c      	mov	r4, r3
 800610e:	bb34      	cbnz	r4, 800615e <_malloc_r+0x82>
 8006110:	4629      	mov	r1, r5
 8006112:	4638      	mov	r0, r7
 8006114:	f7ff ffc2 	bl	800609c <sbrk_aligned>
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	4604      	mov	r4, r0
 800611c:	d14d      	bne.n	80061ba <_malloc_r+0xde>
 800611e:	6834      	ldr	r4, [r6, #0]
 8006120:	4626      	mov	r6, r4
 8006122:	2e00      	cmp	r6, #0
 8006124:	d140      	bne.n	80061a8 <_malloc_r+0xcc>
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	4631      	mov	r1, r6
 800612a:	4638      	mov	r0, r7
 800612c:	eb04 0803 	add.w	r8, r4, r3
 8006130:	f000 fc92 	bl	8006a58 <_sbrk_r>
 8006134:	4580      	cmp	r8, r0
 8006136:	d13a      	bne.n	80061ae <_malloc_r+0xd2>
 8006138:	6821      	ldr	r1, [r4, #0]
 800613a:	3503      	adds	r5, #3
 800613c:	1a6d      	subs	r5, r5, r1
 800613e:	f025 0503 	bic.w	r5, r5, #3
 8006142:	3508      	adds	r5, #8
 8006144:	2d0c      	cmp	r5, #12
 8006146:	bf38      	it	cc
 8006148:	250c      	movcc	r5, #12
 800614a:	4629      	mov	r1, r5
 800614c:	4638      	mov	r0, r7
 800614e:	f7ff ffa5 	bl	800609c <sbrk_aligned>
 8006152:	3001      	adds	r0, #1
 8006154:	d02b      	beq.n	80061ae <_malloc_r+0xd2>
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	442b      	add	r3, r5
 800615a:	6023      	str	r3, [r4, #0]
 800615c:	e00e      	b.n	800617c <_malloc_r+0xa0>
 800615e:	6822      	ldr	r2, [r4, #0]
 8006160:	1b52      	subs	r2, r2, r5
 8006162:	d41e      	bmi.n	80061a2 <_malloc_r+0xc6>
 8006164:	2a0b      	cmp	r2, #11
 8006166:	d916      	bls.n	8006196 <_malloc_r+0xba>
 8006168:	1961      	adds	r1, r4, r5
 800616a:	42a3      	cmp	r3, r4
 800616c:	6025      	str	r5, [r4, #0]
 800616e:	bf18      	it	ne
 8006170:	6059      	strne	r1, [r3, #4]
 8006172:	6863      	ldr	r3, [r4, #4]
 8006174:	bf08      	it	eq
 8006176:	6031      	streq	r1, [r6, #0]
 8006178:	5162      	str	r2, [r4, r5]
 800617a:	604b      	str	r3, [r1, #4]
 800617c:	4638      	mov	r0, r7
 800617e:	f104 060b 	add.w	r6, r4, #11
 8006182:	f000 fd41 	bl	8006c08 <__malloc_unlock>
 8006186:	f026 0607 	bic.w	r6, r6, #7
 800618a:	1d23      	adds	r3, r4, #4
 800618c:	1af2      	subs	r2, r6, r3
 800618e:	d0b6      	beq.n	80060fe <_malloc_r+0x22>
 8006190:	1b9b      	subs	r3, r3, r6
 8006192:	50a3      	str	r3, [r4, r2]
 8006194:	e7b3      	b.n	80060fe <_malloc_r+0x22>
 8006196:	6862      	ldr	r2, [r4, #4]
 8006198:	42a3      	cmp	r3, r4
 800619a:	bf0c      	ite	eq
 800619c:	6032      	streq	r2, [r6, #0]
 800619e:	605a      	strne	r2, [r3, #4]
 80061a0:	e7ec      	b.n	800617c <_malloc_r+0xa0>
 80061a2:	4623      	mov	r3, r4
 80061a4:	6864      	ldr	r4, [r4, #4]
 80061a6:	e7b2      	b.n	800610e <_malloc_r+0x32>
 80061a8:	4634      	mov	r4, r6
 80061aa:	6876      	ldr	r6, [r6, #4]
 80061ac:	e7b9      	b.n	8006122 <_malloc_r+0x46>
 80061ae:	230c      	movs	r3, #12
 80061b0:	603b      	str	r3, [r7, #0]
 80061b2:	4638      	mov	r0, r7
 80061b4:	f000 fd28 	bl	8006c08 <__malloc_unlock>
 80061b8:	e7a1      	b.n	80060fe <_malloc_r+0x22>
 80061ba:	6025      	str	r5, [r4, #0]
 80061bc:	e7de      	b.n	800617c <_malloc_r+0xa0>
 80061be:	bf00      	nop
 80061c0:	20000764 	.word	0x20000764

080061c4 <__ssputs_r>:
 80061c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c8:	688e      	ldr	r6, [r1, #8]
 80061ca:	429e      	cmp	r6, r3
 80061cc:	4682      	mov	sl, r0
 80061ce:	460c      	mov	r4, r1
 80061d0:	4690      	mov	r8, r2
 80061d2:	461f      	mov	r7, r3
 80061d4:	d838      	bhi.n	8006248 <__ssputs_r+0x84>
 80061d6:	898a      	ldrh	r2, [r1, #12]
 80061d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061dc:	d032      	beq.n	8006244 <__ssputs_r+0x80>
 80061de:	6825      	ldr	r5, [r4, #0]
 80061e0:	6909      	ldr	r1, [r1, #16]
 80061e2:	eba5 0901 	sub.w	r9, r5, r1
 80061e6:	6965      	ldr	r5, [r4, #20]
 80061e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061f0:	3301      	adds	r3, #1
 80061f2:	444b      	add	r3, r9
 80061f4:	106d      	asrs	r5, r5, #1
 80061f6:	429d      	cmp	r5, r3
 80061f8:	bf38      	it	cc
 80061fa:	461d      	movcc	r5, r3
 80061fc:	0553      	lsls	r3, r2, #21
 80061fe:	d531      	bpl.n	8006264 <__ssputs_r+0xa0>
 8006200:	4629      	mov	r1, r5
 8006202:	f7ff ff6b 	bl	80060dc <_malloc_r>
 8006206:	4606      	mov	r6, r0
 8006208:	b950      	cbnz	r0, 8006220 <__ssputs_r+0x5c>
 800620a:	230c      	movs	r3, #12
 800620c:	f8ca 3000 	str.w	r3, [sl]
 8006210:	89a3      	ldrh	r3, [r4, #12]
 8006212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006216:	81a3      	strh	r3, [r4, #12]
 8006218:	f04f 30ff 	mov.w	r0, #4294967295
 800621c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006220:	6921      	ldr	r1, [r4, #16]
 8006222:	464a      	mov	r2, r9
 8006224:	f000 fcc2 	bl	8006bac <memcpy>
 8006228:	89a3      	ldrh	r3, [r4, #12]
 800622a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800622e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006232:	81a3      	strh	r3, [r4, #12]
 8006234:	6126      	str	r6, [r4, #16]
 8006236:	6165      	str	r5, [r4, #20]
 8006238:	444e      	add	r6, r9
 800623a:	eba5 0509 	sub.w	r5, r5, r9
 800623e:	6026      	str	r6, [r4, #0]
 8006240:	60a5      	str	r5, [r4, #8]
 8006242:	463e      	mov	r6, r7
 8006244:	42be      	cmp	r6, r7
 8006246:	d900      	bls.n	800624a <__ssputs_r+0x86>
 8006248:	463e      	mov	r6, r7
 800624a:	6820      	ldr	r0, [r4, #0]
 800624c:	4632      	mov	r2, r6
 800624e:	4641      	mov	r1, r8
 8006250:	f000 fcba 	bl	8006bc8 <memmove>
 8006254:	68a3      	ldr	r3, [r4, #8]
 8006256:	1b9b      	subs	r3, r3, r6
 8006258:	60a3      	str	r3, [r4, #8]
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	4433      	add	r3, r6
 800625e:	6023      	str	r3, [r4, #0]
 8006260:	2000      	movs	r0, #0
 8006262:	e7db      	b.n	800621c <__ssputs_r+0x58>
 8006264:	462a      	mov	r2, r5
 8006266:	f000 fcd5 	bl	8006c14 <_realloc_r>
 800626a:	4606      	mov	r6, r0
 800626c:	2800      	cmp	r0, #0
 800626e:	d1e1      	bne.n	8006234 <__ssputs_r+0x70>
 8006270:	6921      	ldr	r1, [r4, #16]
 8006272:	4650      	mov	r0, sl
 8006274:	f7ff fec6 	bl	8006004 <_free_r>
 8006278:	e7c7      	b.n	800620a <__ssputs_r+0x46>
	...

0800627c <_svfiprintf_r>:
 800627c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006280:	4698      	mov	r8, r3
 8006282:	898b      	ldrh	r3, [r1, #12]
 8006284:	061b      	lsls	r3, r3, #24
 8006286:	b09d      	sub	sp, #116	; 0x74
 8006288:	4607      	mov	r7, r0
 800628a:	460d      	mov	r5, r1
 800628c:	4614      	mov	r4, r2
 800628e:	d50e      	bpl.n	80062ae <_svfiprintf_r+0x32>
 8006290:	690b      	ldr	r3, [r1, #16]
 8006292:	b963      	cbnz	r3, 80062ae <_svfiprintf_r+0x32>
 8006294:	2140      	movs	r1, #64	; 0x40
 8006296:	f7ff ff21 	bl	80060dc <_malloc_r>
 800629a:	6028      	str	r0, [r5, #0]
 800629c:	6128      	str	r0, [r5, #16]
 800629e:	b920      	cbnz	r0, 80062aa <_svfiprintf_r+0x2e>
 80062a0:	230c      	movs	r3, #12
 80062a2:	603b      	str	r3, [r7, #0]
 80062a4:	f04f 30ff 	mov.w	r0, #4294967295
 80062a8:	e0d1      	b.n	800644e <_svfiprintf_r+0x1d2>
 80062aa:	2340      	movs	r3, #64	; 0x40
 80062ac:	616b      	str	r3, [r5, #20]
 80062ae:	2300      	movs	r3, #0
 80062b0:	9309      	str	r3, [sp, #36]	; 0x24
 80062b2:	2320      	movs	r3, #32
 80062b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80062bc:	2330      	movs	r3, #48	; 0x30
 80062be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006468 <_svfiprintf_r+0x1ec>
 80062c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062c6:	f04f 0901 	mov.w	r9, #1
 80062ca:	4623      	mov	r3, r4
 80062cc:	469a      	mov	sl, r3
 80062ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062d2:	b10a      	cbz	r2, 80062d8 <_svfiprintf_r+0x5c>
 80062d4:	2a25      	cmp	r2, #37	; 0x25
 80062d6:	d1f9      	bne.n	80062cc <_svfiprintf_r+0x50>
 80062d8:	ebba 0b04 	subs.w	fp, sl, r4
 80062dc:	d00b      	beq.n	80062f6 <_svfiprintf_r+0x7a>
 80062de:	465b      	mov	r3, fp
 80062e0:	4622      	mov	r2, r4
 80062e2:	4629      	mov	r1, r5
 80062e4:	4638      	mov	r0, r7
 80062e6:	f7ff ff6d 	bl	80061c4 <__ssputs_r>
 80062ea:	3001      	adds	r0, #1
 80062ec:	f000 80aa 	beq.w	8006444 <_svfiprintf_r+0x1c8>
 80062f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062f2:	445a      	add	r2, fp
 80062f4:	9209      	str	r2, [sp, #36]	; 0x24
 80062f6:	f89a 3000 	ldrb.w	r3, [sl]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 80a2 	beq.w	8006444 <_svfiprintf_r+0x1c8>
 8006300:	2300      	movs	r3, #0
 8006302:	f04f 32ff 	mov.w	r2, #4294967295
 8006306:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800630a:	f10a 0a01 	add.w	sl, sl, #1
 800630e:	9304      	str	r3, [sp, #16]
 8006310:	9307      	str	r3, [sp, #28]
 8006312:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006316:	931a      	str	r3, [sp, #104]	; 0x68
 8006318:	4654      	mov	r4, sl
 800631a:	2205      	movs	r2, #5
 800631c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006320:	4851      	ldr	r0, [pc, #324]	; (8006468 <_svfiprintf_r+0x1ec>)
 8006322:	f7f9 ff35 	bl	8000190 <memchr>
 8006326:	9a04      	ldr	r2, [sp, #16]
 8006328:	b9d8      	cbnz	r0, 8006362 <_svfiprintf_r+0xe6>
 800632a:	06d0      	lsls	r0, r2, #27
 800632c:	bf44      	itt	mi
 800632e:	2320      	movmi	r3, #32
 8006330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006334:	0711      	lsls	r1, r2, #28
 8006336:	bf44      	itt	mi
 8006338:	232b      	movmi	r3, #43	; 0x2b
 800633a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800633e:	f89a 3000 	ldrb.w	r3, [sl]
 8006342:	2b2a      	cmp	r3, #42	; 0x2a
 8006344:	d015      	beq.n	8006372 <_svfiprintf_r+0xf6>
 8006346:	9a07      	ldr	r2, [sp, #28]
 8006348:	4654      	mov	r4, sl
 800634a:	2000      	movs	r0, #0
 800634c:	f04f 0c0a 	mov.w	ip, #10
 8006350:	4621      	mov	r1, r4
 8006352:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006356:	3b30      	subs	r3, #48	; 0x30
 8006358:	2b09      	cmp	r3, #9
 800635a:	d94e      	bls.n	80063fa <_svfiprintf_r+0x17e>
 800635c:	b1b0      	cbz	r0, 800638c <_svfiprintf_r+0x110>
 800635e:	9207      	str	r2, [sp, #28]
 8006360:	e014      	b.n	800638c <_svfiprintf_r+0x110>
 8006362:	eba0 0308 	sub.w	r3, r0, r8
 8006366:	fa09 f303 	lsl.w	r3, r9, r3
 800636a:	4313      	orrs	r3, r2
 800636c:	9304      	str	r3, [sp, #16]
 800636e:	46a2      	mov	sl, r4
 8006370:	e7d2      	b.n	8006318 <_svfiprintf_r+0x9c>
 8006372:	9b03      	ldr	r3, [sp, #12]
 8006374:	1d19      	adds	r1, r3, #4
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	9103      	str	r1, [sp, #12]
 800637a:	2b00      	cmp	r3, #0
 800637c:	bfbb      	ittet	lt
 800637e:	425b      	neglt	r3, r3
 8006380:	f042 0202 	orrlt.w	r2, r2, #2
 8006384:	9307      	strge	r3, [sp, #28]
 8006386:	9307      	strlt	r3, [sp, #28]
 8006388:	bfb8      	it	lt
 800638a:	9204      	strlt	r2, [sp, #16]
 800638c:	7823      	ldrb	r3, [r4, #0]
 800638e:	2b2e      	cmp	r3, #46	; 0x2e
 8006390:	d10c      	bne.n	80063ac <_svfiprintf_r+0x130>
 8006392:	7863      	ldrb	r3, [r4, #1]
 8006394:	2b2a      	cmp	r3, #42	; 0x2a
 8006396:	d135      	bne.n	8006404 <_svfiprintf_r+0x188>
 8006398:	9b03      	ldr	r3, [sp, #12]
 800639a:	1d1a      	adds	r2, r3, #4
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	9203      	str	r2, [sp, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	bfb8      	it	lt
 80063a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80063a8:	3402      	adds	r4, #2
 80063aa:	9305      	str	r3, [sp, #20]
 80063ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006478 <_svfiprintf_r+0x1fc>
 80063b0:	7821      	ldrb	r1, [r4, #0]
 80063b2:	2203      	movs	r2, #3
 80063b4:	4650      	mov	r0, sl
 80063b6:	f7f9 feeb 	bl	8000190 <memchr>
 80063ba:	b140      	cbz	r0, 80063ce <_svfiprintf_r+0x152>
 80063bc:	2340      	movs	r3, #64	; 0x40
 80063be:	eba0 000a 	sub.w	r0, r0, sl
 80063c2:	fa03 f000 	lsl.w	r0, r3, r0
 80063c6:	9b04      	ldr	r3, [sp, #16]
 80063c8:	4303      	orrs	r3, r0
 80063ca:	3401      	adds	r4, #1
 80063cc:	9304      	str	r3, [sp, #16]
 80063ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d2:	4826      	ldr	r0, [pc, #152]	; (800646c <_svfiprintf_r+0x1f0>)
 80063d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063d8:	2206      	movs	r2, #6
 80063da:	f7f9 fed9 	bl	8000190 <memchr>
 80063de:	2800      	cmp	r0, #0
 80063e0:	d038      	beq.n	8006454 <_svfiprintf_r+0x1d8>
 80063e2:	4b23      	ldr	r3, [pc, #140]	; (8006470 <_svfiprintf_r+0x1f4>)
 80063e4:	bb1b      	cbnz	r3, 800642e <_svfiprintf_r+0x1b2>
 80063e6:	9b03      	ldr	r3, [sp, #12]
 80063e8:	3307      	adds	r3, #7
 80063ea:	f023 0307 	bic.w	r3, r3, #7
 80063ee:	3308      	adds	r3, #8
 80063f0:	9303      	str	r3, [sp, #12]
 80063f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f4:	4433      	add	r3, r6
 80063f6:	9309      	str	r3, [sp, #36]	; 0x24
 80063f8:	e767      	b.n	80062ca <_svfiprintf_r+0x4e>
 80063fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80063fe:	460c      	mov	r4, r1
 8006400:	2001      	movs	r0, #1
 8006402:	e7a5      	b.n	8006350 <_svfiprintf_r+0xd4>
 8006404:	2300      	movs	r3, #0
 8006406:	3401      	adds	r4, #1
 8006408:	9305      	str	r3, [sp, #20]
 800640a:	4619      	mov	r1, r3
 800640c:	f04f 0c0a 	mov.w	ip, #10
 8006410:	4620      	mov	r0, r4
 8006412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006416:	3a30      	subs	r2, #48	; 0x30
 8006418:	2a09      	cmp	r2, #9
 800641a:	d903      	bls.n	8006424 <_svfiprintf_r+0x1a8>
 800641c:	2b00      	cmp	r3, #0
 800641e:	d0c5      	beq.n	80063ac <_svfiprintf_r+0x130>
 8006420:	9105      	str	r1, [sp, #20]
 8006422:	e7c3      	b.n	80063ac <_svfiprintf_r+0x130>
 8006424:	fb0c 2101 	mla	r1, ip, r1, r2
 8006428:	4604      	mov	r4, r0
 800642a:	2301      	movs	r3, #1
 800642c:	e7f0      	b.n	8006410 <_svfiprintf_r+0x194>
 800642e:	ab03      	add	r3, sp, #12
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	462a      	mov	r2, r5
 8006434:	4b0f      	ldr	r3, [pc, #60]	; (8006474 <_svfiprintf_r+0x1f8>)
 8006436:	a904      	add	r1, sp, #16
 8006438:	4638      	mov	r0, r7
 800643a:	f3af 8000 	nop.w
 800643e:	1c42      	adds	r2, r0, #1
 8006440:	4606      	mov	r6, r0
 8006442:	d1d6      	bne.n	80063f2 <_svfiprintf_r+0x176>
 8006444:	89ab      	ldrh	r3, [r5, #12]
 8006446:	065b      	lsls	r3, r3, #25
 8006448:	f53f af2c 	bmi.w	80062a4 <_svfiprintf_r+0x28>
 800644c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800644e:	b01d      	add	sp, #116	; 0x74
 8006450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006454:	ab03      	add	r3, sp, #12
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	462a      	mov	r2, r5
 800645a:	4b06      	ldr	r3, [pc, #24]	; (8006474 <_svfiprintf_r+0x1f8>)
 800645c:	a904      	add	r1, sp, #16
 800645e:	4638      	mov	r0, r7
 8006460:	f000 f9d4 	bl	800680c <_printf_i>
 8006464:	e7eb      	b.n	800643e <_svfiprintf_r+0x1c2>
 8006466:	bf00      	nop
 8006468:	08006f3c 	.word	0x08006f3c
 800646c:	08006f46 	.word	0x08006f46
 8006470:	00000000 	.word	0x00000000
 8006474:	080061c5 	.word	0x080061c5
 8006478:	08006f42 	.word	0x08006f42

0800647c <__sfputc_r>:
 800647c:	6893      	ldr	r3, [r2, #8]
 800647e:	3b01      	subs	r3, #1
 8006480:	2b00      	cmp	r3, #0
 8006482:	b410      	push	{r4}
 8006484:	6093      	str	r3, [r2, #8]
 8006486:	da08      	bge.n	800649a <__sfputc_r+0x1e>
 8006488:	6994      	ldr	r4, [r2, #24]
 800648a:	42a3      	cmp	r3, r4
 800648c:	db01      	blt.n	8006492 <__sfputc_r+0x16>
 800648e:	290a      	cmp	r1, #10
 8006490:	d103      	bne.n	800649a <__sfputc_r+0x1e>
 8006492:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006496:	f7ff bad5 	b.w	8005a44 <__swbuf_r>
 800649a:	6813      	ldr	r3, [r2, #0]
 800649c:	1c58      	adds	r0, r3, #1
 800649e:	6010      	str	r0, [r2, #0]
 80064a0:	7019      	strb	r1, [r3, #0]
 80064a2:	4608      	mov	r0, r1
 80064a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <__sfputs_r>:
 80064aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ac:	4606      	mov	r6, r0
 80064ae:	460f      	mov	r7, r1
 80064b0:	4614      	mov	r4, r2
 80064b2:	18d5      	adds	r5, r2, r3
 80064b4:	42ac      	cmp	r4, r5
 80064b6:	d101      	bne.n	80064bc <__sfputs_r+0x12>
 80064b8:	2000      	movs	r0, #0
 80064ba:	e007      	b.n	80064cc <__sfputs_r+0x22>
 80064bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c0:	463a      	mov	r2, r7
 80064c2:	4630      	mov	r0, r6
 80064c4:	f7ff ffda 	bl	800647c <__sfputc_r>
 80064c8:	1c43      	adds	r3, r0, #1
 80064ca:	d1f3      	bne.n	80064b4 <__sfputs_r+0xa>
 80064cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064d0 <_vfiprintf_r>:
 80064d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d4:	460d      	mov	r5, r1
 80064d6:	b09d      	sub	sp, #116	; 0x74
 80064d8:	4614      	mov	r4, r2
 80064da:	4698      	mov	r8, r3
 80064dc:	4606      	mov	r6, r0
 80064de:	b118      	cbz	r0, 80064e8 <_vfiprintf_r+0x18>
 80064e0:	6983      	ldr	r3, [r0, #24]
 80064e2:	b90b      	cbnz	r3, 80064e8 <_vfiprintf_r+0x18>
 80064e4:	f7ff fc88 	bl	8005df8 <__sinit>
 80064e8:	4b89      	ldr	r3, [pc, #548]	; (8006710 <_vfiprintf_r+0x240>)
 80064ea:	429d      	cmp	r5, r3
 80064ec:	d11b      	bne.n	8006526 <_vfiprintf_r+0x56>
 80064ee:	6875      	ldr	r5, [r6, #4]
 80064f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064f2:	07d9      	lsls	r1, r3, #31
 80064f4:	d405      	bmi.n	8006502 <_vfiprintf_r+0x32>
 80064f6:	89ab      	ldrh	r3, [r5, #12]
 80064f8:	059a      	lsls	r2, r3, #22
 80064fa:	d402      	bmi.n	8006502 <_vfiprintf_r+0x32>
 80064fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064fe:	f7ff fd19 	bl	8005f34 <__retarget_lock_acquire_recursive>
 8006502:	89ab      	ldrh	r3, [r5, #12]
 8006504:	071b      	lsls	r3, r3, #28
 8006506:	d501      	bpl.n	800650c <_vfiprintf_r+0x3c>
 8006508:	692b      	ldr	r3, [r5, #16]
 800650a:	b9eb      	cbnz	r3, 8006548 <_vfiprintf_r+0x78>
 800650c:	4629      	mov	r1, r5
 800650e:	4630      	mov	r0, r6
 8006510:	f7ff faea 	bl	8005ae8 <__swsetup_r>
 8006514:	b1c0      	cbz	r0, 8006548 <_vfiprintf_r+0x78>
 8006516:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006518:	07dc      	lsls	r4, r3, #31
 800651a:	d50e      	bpl.n	800653a <_vfiprintf_r+0x6a>
 800651c:	f04f 30ff 	mov.w	r0, #4294967295
 8006520:	b01d      	add	sp, #116	; 0x74
 8006522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006526:	4b7b      	ldr	r3, [pc, #492]	; (8006714 <_vfiprintf_r+0x244>)
 8006528:	429d      	cmp	r5, r3
 800652a:	d101      	bne.n	8006530 <_vfiprintf_r+0x60>
 800652c:	68b5      	ldr	r5, [r6, #8]
 800652e:	e7df      	b.n	80064f0 <_vfiprintf_r+0x20>
 8006530:	4b79      	ldr	r3, [pc, #484]	; (8006718 <_vfiprintf_r+0x248>)
 8006532:	429d      	cmp	r5, r3
 8006534:	bf08      	it	eq
 8006536:	68f5      	ldreq	r5, [r6, #12]
 8006538:	e7da      	b.n	80064f0 <_vfiprintf_r+0x20>
 800653a:	89ab      	ldrh	r3, [r5, #12]
 800653c:	0598      	lsls	r0, r3, #22
 800653e:	d4ed      	bmi.n	800651c <_vfiprintf_r+0x4c>
 8006540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006542:	f7ff fcf8 	bl	8005f36 <__retarget_lock_release_recursive>
 8006546:	e7e9      	b.n	800651c <_vfiprintf_r+0x4c>
 8006548:	2300      	movs	r3, #0
 800654a:	9309      	str	r3, [sp, #36]	; 0x24
 800654c:	2320      	movs	r3, #32
 800654e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006552:	f8cd 800c 	str.w	r8, [sp, #12]
 8006556:	2330      	movs	r3, #48	; 0x30
 8006558:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800671c <_vfiprintf_r+0x24c>
 800655c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006560:	f04f 0901 	mov.w	r9, #1
 8006564:	4623      	mov	r3, r4
 8006566:	469a      	mov	sl, r3
 8006568:	f813 2b01 	ldrb.w	r2, [r3], #1
 800656c:	b10a      	cbz	r2, 8006572 <_vfiprintf_r+0xa2>
 800656e:	2a25      	cmp	r2, #37	; 0x25
 8006570:	d1f9      	bne.n	8006566 <_vfiprintf_r+0x96>
 8006572:	ebba 0b04 	subs.w	fp, sl, r4
 8006576:	d00b      	beq.n	8006590 <_vfiprintf_r+0xc0>
 8006578:	465b      	mov	r3, fp
 800657a:	4622      	mov	r2, r4
 800657c:	4629      	mov	r1, r5
 800657e:	4630      	mov	r0, r6
 8006580:	f7ff ff93 	bl	80064aa <__sfputs_r>
 8006584:	3001      	adds	r0, #1
 8006586:	f000 80aa 	beq.w	80066de <_vfiprintf_r+0x20e>
 800658a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800658c:	445a      	add	r2, fp
 800658e:	9209      	str	r2, [sp, #36]	; 0x24
 8006590:	f89a 3000 	ldrb.w	r3, [sl]
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 80a2 	beq.w	80066de <_vfiprintf_r+0x20e>
 800659a:	2300      	movs	r3, #0
 800659c:	f04f 32ff 	mov.w	r2, #4294967295
 80065a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065a4:	f10a 0a01 	add.w	sl, sl, #1
 80065a8:	9304      	str	r3, [sp, #16]
 80065aa:	9307      	str	r3, [sp, #28]
 80065ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065b0:	931a      	str	r3, [sp, #104]	; 0x68
 80065b2:	4654      	mov	r4, sl
 80065b4:	2205      	movs	r2, #5
 80065b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ba:	4858      	ldr	r0, [pc, #352]	; (800671c <_vfiprintf_r+0x24c>)
 80065bc:	f7f9 fde8 	bl	8000190 <memchr>
 80065c0:	9a04      	ldr	r2, [sp, #16]
 80065c2:	b9d8      	cbnz	r0, 80065fc <_vfiprintf_r+0x12c>
 80065c4:	06d1      	lsls	r1, r2, #27
 80065c6:	bf44      	itt	mi
 80065c8:	2320      	movmi	r3, #32
 80065ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065ce:	0713      	lsls	r3, r2, #28
 80065d0:	bf44      	itt	mi
 80065d2:	232b      	movmi	r3, #43	; 0x2b
 80065d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065d8:	f89a 3000 	ldrb.w	r3, [sl]
 80065dc:	2b2a      	cmp	r3, #42	; 0x2a
 80065de:	d015      	beq.n	800660c <_vfiprintf_r+0x13c>
 80065e0:	9a07      	ldr	r2, [sp, #28]
 80065e2:	4654      	mov	r4, sl
 80065e4:	2000      	movs	r0, #0
 80065e6:	f04f 0c0a 	mov.w	ip, #10
 80065ea:	4621      	mov	r1, r4
 80065ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065f0:	3b30      	subs	r3, #48	; 0x30
 80065f2:	2b09      	cmp	r3, #9
 80065f4:	d94e      	bls.n	8006694 <_vfiprintf_r+0x1c4>
 80065f6:	b1b0      	cbz	r0, 8006626 <_vfiprintf_r+0x156>
 80065f8:	9207      	str	r2, [sp, #28]
 80065fa:	e014      	b.n	8006626 <_vfiprintf_r+0x156>
 80065fc:	eba0 0308 	sub.w	r3, r0, r8
 8006600:	fa09 f303 	lsl.w	r3, r9, r3
 8006604:	4313      	orrs	r3, r2
 8006606:	9304      	str	r3, [sp, #16]
 8006608:	46a2      	mov	sl, r4
 800660a:	e7d2      	b.n	80065b2 <_vfiprintf_r+0xe2>
 800660c:	9b03      	ldr	r3, [sp, #12]
 800660e:	1d19      	adds	r1, r3, #4
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	9103      	str	r1, [sp, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	bfbb      	ittet	lt
 8006618:	425b      	neglt	r3, r3
 800661a:	f042 0202 	orrlt.w	r2, r2, #2
 800661e:	9307      	strge	r3, [sp, #28]
 8006620:	9307      	strlt	r3, [sp, #28]
 8006622:	bfb8      	it	lt
 8006624:	9204      	strlt	r2, [sp, #16]
 8006626:	7823      	ldrb	r3, [r4, #0]
 8006628:	2b2e      	cmp	r3, #46	; 0x2e
 800662a:	d10c      	bne.n	8006646 <_vfiprintf_r+0x176>
 800662c:	7863      	ldrb	r3, [r4, #1]
 800662e:	2b2a      	cmp	r3, #42	; 0x2a
 8006630:	d135      	bne.n	800669e <_vfiprintf_r+0x1ce>
 8006632:	9b03      	ldr	r3, [sp, #12]
 8006634:	1d1a      	adds	r2, r3, #4
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	9203      	str	r2, [sp, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	bfb8      	it	lt
 800663e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006642:	3402      	adds	r4, #2
 8006644:	9305      	str	r3, [sp, #20]
 8006646:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800672c <_vfiprintf_r+0x25c>
 800664a:	7821      	ldrb	r1, [r4, #0]
 800664c:	2203      	movs	r2, #3
 800664e:	4650      	mov	r0, sl
 8006650:	f7f9 fd9e 	bl	8000190 <memchr>
 8006654:	b140      	cbz	r0, 8006668 <_vfiprintf_r+0x198>
 8006656:	2340      	movs	r3, #64	; 0x40
 8006658:	eba0 000a 	sub.w	r0, r0, sl
 800665c:	fa03 f000 	lsl.w	r0, r3, r0
 8006660:	9b04      	ldr	r3, [sp, #16]
 8006662:	4303      	orrs	r3, r0
 8006664:	3401      	adds	r4, #1
 8006666:	9304      	str	r3, [sp, #16]
 8006668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800666c:	482c      	ldr	r0, [pc, #176]	; (8006720 <_vfiprintf_r+0x250>)
 800666e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006672:	2206      	movs	r2, #6
 8006674:	f7f9 fd8c 	bl	8000190 <memchr>
 8006678:	2800      	cmp	r0, #0
 800667a:	d03f      	beq.n	80066fc <_vfiprintf_r+0x22c>
 800667c:	4b29      	ldr	r3, [pc, #164]	; (8006724 <_vfiprintf_r+0x254>)
 800667e:	bb1b      	cbnz	r3, 80066c8 <_vfiprintf_r+0x1f8>
 8006680:	9b03      	ldr	r3, [sp, #12]
 8006682:	3307      	adds	r3, #7
 8006684:	f023 0307 	bic.w	r3, r3, #7
 8006688:	3308      	adds	r3, #8
 800668a:	9303      	str	r3, [sp, #12]
 800668c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800668e:	443b      	add	r3, r7
 8006690:	9309      	str	r3, [sp, #36]	; 0x24
 8006692:	e767      	b.n	8006564 <_vfiprintf_r+0x94>
 8006694:	fb0c 3202 	mla	r2, ip, r2, r3
 8006698:	460c      	mov	r4, r1
 800669a:	2001      	movs	r0, #1
 800669c:	e7a5      	b.n	80065ea <_vfiprintf_r+0x11a>
 800669e:	2300      	movs	r3, #0
 80066a0:	3401      	adds	r4, #1
 80066a2:	9305      	str	r3, [sp, #20]
 80066a4:	4619      	mov	r1, r3
 80066a6:	f04f 0c0a 	mov.w	ip, #10
 80066aa:	4620      	mov	r0, r4
 80066ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066b0:	3a30      	subs	r2, #48	; 0x30
 80066b2:	2a09      	cmp	r2, #9
 80066b4:	d903      	bls.n	80066be <_vfiprintf_r+0x1ee>
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d0c5      	beq.n	8006646 <_vfiprintf_r+0x176>
 80066ba:	9105      	str	r1, [sp, #20]
 80066bc:	e7c3      	b.n	8006646 <_vfiprintf_r+0x176>
 80066be:	fb0c 2101 	mla	r1, ip, r1, r2
 80066c2:	4604      	mov	r4, r0
 80066c4:	2301      	movs	r3, #1
 80066c6:	e7f0      	b.n	80066aa <_vfiprintf_r+0x1da>
 80066c8:	ab03      	add	r3, sp, #12
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	462a      	mov	r2, r5
 80066ce:	4b16      	ldr	r3, [pc, #88]	; (8006728 <_vfiprintf_r+0x258>)
 80066d0:	a904      	add	r1, sp, #16
 80066d2:	4630      	mov	r0, r6
 80066d4:	f3af 8000 	nop.w
 80066d8:	4607      	mov	r7, r0
 80066da:	1c78      	adds	r0, r7, #1
 80066dc:	d1d6      	bne.n	800668c <_vfiprintf_r+0x1bc>
 80066de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066e0:	07d9      	lsls	r1, r3, #31
 80066e2:	d405      	bmi.n	80066f0 <_vfiprintf_r+0x220>
 80066e4:	89ab      	ldrh	r3, [r5, #12]
 80066e6:	059a      	lsls	r2, r3, #22
 80066e8:	d402      	bmi.n	80066f0 <_vfiprintf_r+0x220>
 80066ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066ec:	f7ff fc23 	bl	8005f36 <__retarget_lock_release_recursive>
 80066f0:	89ab      	ldrh	r3, [r5, #12]
 80066f2:	065b      	lsls	r3, r3, #25
 80066f4:	f53f af12 	bmi.w	800651c <_vfiprintf_r+0x4c>
 80066f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066fa:	e711      	b.n	8006520 <_vfiprintf_r+0x50>
 80066fc:	ab03      	add	r3, sp, #12
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	462a      	mov	r2, r5
 8006702:	4b09      	ldr	r3, [pc, #36]	; (8006728 <_vfiprintf_r+0x258>)
 8006704:	a904      	add	r1, sp, #16
 8006706:	4630      	mov	r0, r6
 8006708:	f000 f880 	bl	800680c <_printf_i>
 800670c:	e7e4      	b.n	80066d8 <_vfiprintf_r+0x208>
 800670e:	bf00      	nop
 8006710:	08006efc 	.word	0x08006efc
 8006714:	08006f1c 	.word	0x08006f1c
 8006718:	08006edc 	.word	0x08006edc
 800671c:	08006f3c 	.word	0x08006f3c
 8006720:	08006f46 	.word	0x08006f46
 8006724:	00000000 	.word	0x00000000
 8006728:	080064ab 	.word	0x080064ab
 800672c:	08006f42 	.word	0x08006f42

08006730 <_printf_common>:
 8006730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006734:	4616      	mov	r6, r2
 8006736:	4699      	mov	r9, r3
 8006738:	688a      	ldr	r2, [r1, #8]
 800673a:	690b      	ldr	r3, [r1, #16]
 800673c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006740:	4293      	cmp	r3, r2
 8006742:	bfb8      	it	lt
 8006744:	4613      	movlt	r3, r2
 8006746:	6033      	str	r3, [r6, #0]
 8006748:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800674c:	4607      	mov	r7, r0
 800674e:	460c      	mov	r4, r1
 8006750:	b10a      	cbz	r2, 8006756 <_printf_common+0x26>
 8006752:	3301      	adds	r3, #1
 8006754:	6033      	str	r3, [r6, #0]
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	0699      	lsls	r1, r3, #26
 800675a:	bf42      	ittt	mi
 800675c:	6833      	ldrmi	r3, [r6, #0]
 800675e:	3302      	addmi	r3, #2
 8006760:	6033      	strmi	r3, [r6, #0]
 8006762:	6825      	ldr	r5, [r4, #0]
 8006764:	f015 0506 	ands.w	r5, r5, #6
 8006768:	d106      	bne.n	8006778 <_printf_common+0x48>
 800676a:	f104 0a19 	add.w	sl, r4, #25
 800676e:	68e3      	ldr	r3, [r4, #12]
 8006770:	6832      	ldr	r2, [r6, #0]
 8006772:	1a9b      	subs	r3, r3, r2
 8006774:	42ab      	cmp	r3, r5
 8006776:	dc26      	bgt.n	80067c6 <_printf_common+0x96>
 8006778:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800677c:	1e13      	subs	r3, r2, #0
 800677e:	6822      	ldr	r2, [r4, #0]
 8006780:	bf18      	it	ne
 8006782:	2301      	movne	r3, #1
 8006784:	0692      	lsls	r2, r2, #26
 8006786:	d42b      	bmi.n	80067e0 <_printf_common+0xb0>
 8006788:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800678c:	4649      	mov	r1, r9
 800678e:	4638      	mov	r0, r7
 8006790:	47c0      	blx	r8
 8006792:	3001      	adds	r0, #1
 8006794:	d01e      	beq.n	80067d4 <_printf_common+0xa4>
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	68e5      	ldr	r5, [r4, #12]
 800679a:	6832      	ldr	r2, [r6, #0]
 800679c:	f003 0306 	and.w	r3, r3, #6
 80067a0:	2b04      	cmp	r3, #4
 80067a2:	bf08      	it	eq
 80067a4:	1aad      	subeq	r5, r5, r2
 80067a6:	68a3      	ldr	r3, [r4, #8]
 80067a8:	6922      	ldr	r2, [r4, #16]
 80067aa:	bf0c      	ite	eq
 80067ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067b0:	2500      	movne	r5, #0
 80067b2:	4293      	cmp	r3, r2
 80067b4:	bfc4      	itt	gt
 80067b6:	1a9b      	subgt	r3, r3, r2
 80067b8:	18ed      	addgt	r5, r5, r3
 80067ba:	2600      	movs	r6, #0
 80067bc:	341a      	adds	r4, #26
 80067be:	42b5      	cmp	r5, r6
 80067c0:	d11a      	bne.n	80067f8 <_printf_common+0xc8>
 80067c2:	2000      	movs	r0, #0
 80067c4:	e008      	b.n	80067d8 <_printf_common+0xa8>
 80067c6:	2301      	movs	r3, #1
 80067c8:	4652      	mov	r2, sl
 80067ca:	4649      	mov	r1, r9
 80067cc:	4638      	mov	r0, r7
 80067ce:	47c0      	blx	r8
 80067d0:	3001      	adds	r0, #1
 80067d2:	d103      	bne.n	80067dc <_printf_common+0xac>
 80067d4:	f04f 30ff 	mov.w	r0, #4294967295
 80067d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067dc:	3501      	adds	r5, #1
 80067de:	e7c6      	b.n	800676e <_printf_common+0x3e>
 80067e0:	18e1      	adds	r1, r4, r3
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	2030      	movs	r0, #48	; 0x30
 80067e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067ea:	4422      	add	r2, r4
 80067ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067f4:	3302      	adds	r3, #2
 80067f6:	e7c7      	b.n	8006788 <_printf_common+0x58>
 80067f8:	2301      	movs	r3, #1
 80067fa:	4622      	mov	r2, r4
 80067fc:	4649      	mov	r1, r9
 80067fe:	4638      	mov	r0, r7
 8006800:	47c0      	blx	r8
 8006802:	3001      	adds	r0, #1
 8006804:	d0e6      	beq.n	80067d4 <_printf_common+0xa4>
 8006806:	3601      	adds	r6, #1
 8006808:	e7d9      	b.n	80067be <_printf_common+0x8e>
	...

0800680c <_printf_i>:
 800680c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006810:	7e0f      	ldrb	r7, [r1, #24]
 8006812:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006814:	2f78      	cmp	r7, #120	; 0x78
 8006816:	4691      	mov	r9, r2
 8006818:	4680      	mov	r8, r0
 800681a:	460c      	mov	r4, r1
 800681c:	469a      	mov	sl, r3
 800681e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006822:	d807      	bhi.n	8006834 <_printf_i+0x28>
 8006824:	2f62      	cmp	r7, #98	; 0x62
 8006826:	d80a      	bhi.n	800683e <_printf_i+0x32>
 8006828:	2f00      	cmp	r7, #0
 800682a:	f000 80d8 	beq.w	80069de <_printf_i+0x1d2>
 800682e:	2f58      	cmp	r7, #88	; 0x58
 8006830:	f000 80a3 	beq.w	800697a <_printf_i+0x16e>
 8006834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006838:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800683c:	e03a      	b.n	80068b4 <_printf_i+0xa8>
 800683e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006842:	2b15      	cmp	r3, #21
 8006844:	d8f6      	bhi.n	8006834 <_printf_i+0x28>
 8006846:	a101      	add	r1, pc, #4	; (adr r1, 800684c <_printf_i+0x40>)
 8006848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800684c:	080068a5 	.word	0x080068a5
 8006850:	080068b9 	.word	0x080068b9
 8006854:	08006835 	.word	0x08006835
 8006858:	08006835 	.word	0x08006835
 800685c:	08006835 	.word	0x08006835
 8006860:	08006835 	.word	0x08006835
 8006864:	080068b9 	.word	0x080068b9
 8006868:	08006835 	.word	0x08006835
 800686c:	08006835 	.word	0x08006835
 8006870:	08006835 	.word	0x08006835
 8006874:	08006835 	.word	0x08006835
 8006878:	080069c5 	.word	0x080069c5
 800687c:	080068e9 	.word	0x080068e9
 8006880:	080069a7 	.word	0x080069a7
 8006884:	08006835 	.word	0x08006835
 8006888:	08006835 	.word	0x08006835
 800688c:	080069e7 	.word	0x080069e7
 8006890:	08006835 	.word	0x08006835
 8006894:	080068e9 	.word	0x080068e9
 8006898:	08006835 	.word	0x08006835
 800689c:	08006835 	.word	0x08006835
 80068a0:	080069af 	.word	0x080069af
 80068a4:	682b      	ldr	r3, [r5, #0]
 80068a6:	1d1a      	adds	r2, r3, #4
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	602a      	str	r2, [r5, #0]
 80068ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068b4:	2301      	movs	r3, #1
 80068b6:	e0a3      	b.n	8006a00 <_printf_i+0x1f4>
 80068b8:	6820      	ldr	r0, [r4, #0]
 80068ba:	6829      	ldr	r1, [r5, #0]
 80068bc:	0606      	lsls	r6, r0, #24
 80068be:	f101 0304 	add.w	r3, r1, #4
 80068c2:	d50a      	bpl.n	80068da <_printf_i+0xce>
 80068c4:	680e      	ldr	r6, [r1, #0]
 80068c6:	602b      	str	r3, [r5, #0]
 80068c8:	2e00      	cmp	r6, #0
 80068ca:	da03      	bge.n	80068d4 <_printf_i+0xc8>
 80068cc:	232d      	movs	r3, #45	; 0x2d
 80068ce:	4276      	negs	r6, r6
 80068d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068d4:	485e      	ldr	r0, [pc, #376]	; (8006a50 <_printf_i+0x244>)
 80068d6:	230a      	movs	r3, #10
 80068d8:	e019      	b.n	800690e <_printf_i+0x102>
 80068da:	680e      	ldr	r6, [r1, #0]
 80068dc:	602b      	str	r3, [r5, #0]
 80068de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068e2:	bf18      	it	ne
 80068e4:	b236      	sxthne	r6, r6
 80068e6:	e7ef      	b.n	80068c8 <_printf_i+0xbc>
 80068e8:	682b      	ldr	r3, [r5, #0]
 80068ea:	6820      	ldr	r0, [r4, #0]
 80068ec:	1d19      	adds	r1, r3, #4
 80068ee:	6029      	str	r1, [r5, #0]
 80068f0:	0601      	lsls	r1, r0, #24
 80068f2:	d501      	bpl.n	80068f8 <_printf_i+0xec>
 80068f4:	681e      	ldr	r6, [r3, #0]
 80068f6:	e002      	b.n	80068fe <_printf_i+0xf2>
 80068f8:	0646      	lsls	r6, r0, #25
 80068fa:	d5fb      	bpl.n	80068f4 <_printf_i+0xe8>
 80068fc:	881e      	ldrh	r6, [r3, #0]
 80068fe:	4854      	ldr	r0, [pc, #336]	; (8006a50 <_printf_i+0x244>)
 8006900:	2f6f      	cmp	r7, #111	; 0x6f
 8006902:	bf0c      	ite	eq
 8006904:	2308      	moveq	r3, #8
 8006906:	230a      	movne	r3, #10
 8006908:	2100      	movs	r1, #0
 800690a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800690e:	6865      	ldr	r5, [r4, #4]
 8006910:	60a5      	str	r5, [r4, #8]
 8006912:	2d00      	cmp	r5, #0
 8006914:	bfa2      	ittt	ge
 8006916:	6821      	ldrge	r1, [r4, #0]
 8006918:	f021 0104 	bicge.w	r1, r1, #4
 800691c:	6021      	strge	r1, [r4, #0]
 800691e:	b90e      	cbnz	r6, 8006924 <_printf_i+0x118>
 8006920:	2d00      	cmp	r5, #0
 8006922:	d04d      	beq.n	80069c0 <_printf_i+0x1b4>
 8006924:	4615      	mov	r5, r2
 8006926:	fbb6 f1f3 	udiv	r1, r6, r3
 800692a:	fb03 6711 	mls	r7, r3, r1, r6
 800692e:	5dc7      	ldrb	r7, [r0, r7]
 8006930:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006934:	4637      	mov	r7, r6
 8006936:	42bb      	cmp	r3, r7
 8006938:	460e      	mov	r6, r1
 800693a:	d9f4      	bls.n	8006926 <_printf_i+0x11a>
 800693c:	2b08      	cmp	r3, #8
 800693e:	d10b      	bne.n	8006958 <_printf_i+0x14c>
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	07de      	lsls	r6, r3, #31
 8006944:	d508      	bpl.n	8006958 <_printf_i+0x14c>
 8006946:	6923      	ldr	r3, [r4, #16]
 8006948:	6861      	ldr	r1, [r4, #4]
 800694a:	4299      	cmp	r1, r3
 800694c:	bfde      	ittt	le
 800694e:	2330      	movle	r3, #48	; 0x30
 8006950:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006954:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006958:	1b52      	subs	r2, r2, r5
 800695a:	6122      	str	r2, [r4, #16]
 800695c:	f8cd a000 	str.w	sl, [sp]
 8006960:	464b      	mov	r3, r9
 8006962:	aa03      	add	r2, sp, #12
 8006964:	4621      	mov	r1, r4
 8006966:	4640      	mov	r0, r8
 8006968:	f7ff fee2 	bl	8006730 <_printf_common>
 800696c:	3001      	adds	r0, #1
 800696e:	d14c      	bne.n	8006a0a <_printf_i+0x1fe>
 8006970:	f04f 30ff 	mov.w	r0, #4294967295
 8006974:	b004      	add	sp, #16
 8006976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800697a:	4835      	ldr	r0, [pc, #212]	; (8006a50 <_printf_i+0x244>)
 800697c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006980:	6829      	ldr	r1, [r5, #0]
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	f851 6b04 	ldr.w	r6, [r1], #4
 8006988:	6029      	str	r1, [r5, #0]
 800698a:	061d      	lsls	r5, r3, #24
 800698c:	d514      	bpl.n	80069b8 <_printf_i+0x1ac>
 800698e:	07df      	lsls	r7, r3, #31
 8006990:	bf44      	itt	mi
 8006992:	f043 0320 	orrmi.w	r3, r3, #32
 8006996:	6023      	strmi	r3, [r4, #0]
 8006998:	b91e      	cbnz	r6, 80069a2 <_printf_i+0x196>
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	f023 0320 	bic.w	r3, r3, #32
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	2310      	movs	r3, #16
 80069a4:	e7b0      	b.n	8006908 <_printf_i+0xfc>
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	f043 0320 	orr.w	r3, r3, #32
 80069ac:	6023      	str	r3, [r4, #0]
 80069ae:	2378      	movs	r3, #120	; 0x78
 80069b0:	4828      	ldr	r0, [pc, #160]	; (8006a54 <_printf_i+0x248>)
 80069b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069b6:	e7e3      	b.n	8006980 <_printf_i+0x174>
 80069b8:	0659      	lsls	r1, r3, #25
 80069ba:	bf48      	it	mi
 80069bc:	b2b6      	uxthmi	r6, r6
 80069be:	e7e6      	b.n	800698e <_printf_i+0x182>
 80069c0:	4615      	mov	r5, r2
 80069c2:	e7bb      	b.n	800693c <_printf_i+0x130>
 80069c4:	682b      	ldr	r3, [r5, #0]
 80069c6:	6826      	ldr	r6, [r4, #0]
 80069c8:	6961      	ldr	r1, [r4, #20]
 80069ca:	1d18      	adds	r0, r3, #4
 80069cc:	6028      	str	r0, [r5, #0]
 80069ce:	0635      	lsls	r5, r6, #24
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	d501      	bpl.n	80069d8 <_printf_i+0x1cc>
 80069d4:	6019      	str	r1, [r3, #0]
 80069d6:	e002      	b.n	80069de <_printf_i+0x1d2>
 80069d8:	0670      	lsls	r0, r6, #25
 80069da:	d5fb      	bpl.n	80069d4 <_printf_i+0x1c8>
 80069dc:	8019      	strh	r1, [r3, #0]
 80069de:	2300      	movs	r3, #0
 80069e0:	6123      	str	r3, [r4, #16]
 80069e2:	4615      	mov	r5, r2
 80069e4:	e7ba      	b.n	800695c <_printf_i+0x150>
 80069e6:	682b      	ldr	r3, [r5, #0]
 80069e8:	1d1a      	adds	r2, r3, #4
 80069ea:	602a      	str	r2, [r5, #0]
 80069ec:	681d      	ldr	r5, [r3, #0]
 80069ee:	6862      	ldr	r2, [r4, #4]
 80069f0:	2100      	movs	r1, #0
 80069f2:	4628      	mov	r0, r5
 80069f4:	f7f9 fbcc 	bl	8000190 <memchr>
 80069f8:	b108      	cbz	r0, 80069fe <_printf_i+0x1f2>
 80069fa:	1b40      	subs	r0, r0, r5
 80069fc:	6060      	str	r0, [r4, #4]
 80069fe:	6863      	ldr	r3, [r4, #4]
 8006a00:	6123      	str	r3, [r4, #16]
 8006a02:	2300      	movs	r3, #0
 8006a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a08:	e7a8      	b.n	800695c <_printf_i+0x150>
 8006a0a:	6923      	ldr	r3, [r4, #16]
 8006a0c:	462a      	mov	r2, r5
 8006a0e:	4649      	mov	r1, r9
 8006a10:	4640      	mov	r0, r8
 8006a12:	47d0      	blx	sl
 8006a14:	3001      	adds	r0, #1
 8006a16:	d0ab      	beq.n	8006970 <_printf_i+0x164>
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	079b      	lsls	r3, r3, #30
 8006a1c:	d413      	bmi.n	8006a46 <_printf_i+0x23a>
 8006a1e:	68e0      	ldr	r0, [r4, #12]
 8006a20:	9b03      	ldr	r3, [sp, #12]
 8006a22:	4298      	cmp	r0, r3
 8006a24:	bfb8      	it	lt
 8006a26:	4618      	movlt	r0, r3
 8006a28:	e7a4      	b.n	8006974 <_printf_i+0x168>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	4632      	mov	r2, r6
 8006a2e:	4649      	mov	r1, r9
 8006a30:	4640      	mov	r0, r8
 8006a32:	47d0      	blx	sl
 8006a34:	3001      	adds	r0, #1
 8006a36:	d09b      	beq.n	8006970 <_printf_i+0x164>
 8006a38:	3501      	adds	r5, #1
 8006a3a:	68e3      	ldr	r3, [r4, #12]
 8006a3c:	9903      	ldr	r1, [sp, #12]
 8006a3e:	1a5b      	subs	r3, r3, r1
 8006a40:	42ab      	cmp	r3, r5
 8006a42:	dcf2      	bgt.n	8006a2a <_printf_i+0x21e>
 8006a44:	e7eb      	b.n	8006a1e <_printf_i+0x212>
 8006a46:	2500      	movs	r5, #0
 8006a48:	f104 0619 	add.w	r6, r4, #25
 8006a4c:	e7f5      	b.n	8006a3a <_printf_i+0x22e>
 8006a4e:	bf00      	nop
 8006a50:	08006f4d 	.word	0x08006f4d
 8006a54:	08006f5e 	.word	0x08006f5e

08006a58 <_sbrk_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	4d06      	ldr	r5, [pc, #24]	; (8006a74 <_sbrk_r+0x1c>)
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	4604      	mov	r4, r0
 8006a60:	4608      	mov	r0, r1
 8006a62:	602b      	str	r3, [r5, #0]
 8006a64:	f7f9 ff90 	bl	8000988 <_sbrk>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	d102      	bne.n	8006a72 <_sbrk_r+0x1a>
 8006a6c:	682b      	ldr	r3, [r5, #0]
 8006a6e:	b103      	cbz	r3, 8006a72 <_sbrk_r+0x1a>
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
 8006a74:	2000076c 	.word	0x2000076c

08006a78 <__sread>:
 8006a78:	b510      	push	{r4, lr}
 8006a7a:	460c      	mov	r4, r1
 8006a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a80:	f000 f8f8 	bl	8006c74 <_read_r>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	bfab      	itete	ge
 8006a88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8006a8c:	181b      	addge	r3, r3, r0
 8006a8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a92:	bfac      	ite	ge
 8006a94:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a96:	81a3      	strhlt	r3, [r4, #12]
 8006a98:	bd10      	pop	{r4, pc}

08006a9a <__swrite>:
 8006a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9e:	461f      	mov	r7, r3
 8006aa0:	898b      	ldrh	r3, [r1, #12]
 8006aa2:	05db      	lsls	r3, r3, #23
 8006aa4:	4605      	mov	r5, r0
 8006aa6:	460c      	mov	r4, r1
 8006aa8:	4616      	mov	r6, r2
 8006aaa:	d505      	bpl.n	8006ab8 <__swrite+0x1e>
 8006aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f000 f868 	bl	8006b88 <_lseek_r>
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ac2:	81a3      	strh	r3, [r4, #12]
 8006ac4:	4632      	mov	r2, r6
 8006ac6:	463b      	mov	r3, r7
 8006ac8:	4628      	mov	r0, r5
 8006aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ace:	f000 b817 	b.w	8006b00 <_write_r>

08006ad2 <__sseek>:
 8006ad2:	b510      	push	{r4, lr}
 8006ad4:	460c      	mov	r4, r1
 8006ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ada:	f000 f855 	bl	8006b88 <_lseek_r>
 8006ade:	1c43      	adds	r3, r0, #1
 8006ae0:	89a3      	ldrh	r3, [r4, #12]
 8006ae2:	bf15      	itete	ne
 8006ae4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006aea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006aee:	81a3      	strheq	r3, [r4, #12]
 8006af0:	bf18      	it	ne
 8006af2:	81a3      	strhne	r3, [r4, #12]
 8006af4:	bd10      	pop	{r4, pc}

08006af6 <__sclose>:
 8006af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006afa:	f000 b813 	b.w	8006b24 <_close_r>
	...

08006b00 <_write_r>:
 8006b00:	b538      	push	{r3, r4, r5, lr}
 8006b02:	4d07      	ldr	r5, [pc, #28]	; (8006b20 <_write_r+0x20>)
 8006b04:	4604      	mov	r4, r0
 8006b06:	4608      	mov	r0, r1
 8006b08:	4611      	mov	r1, r2
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	602a      	str	r2, [r5, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f7f9 fdd9 	bl	80006c6 <_write>
 8006b14:	1c43      	adds	r3, r0, #1
 8006b16:	d102      	bne.n	8006b1e <_write_r+0x1e>
 8006b18:	682b      	ldr	r3, [r5, #0]
 8006b1a:	b103      	cbz	r3, 8006b1e <_write_r+0x1e>
 8006b1c:	6023      	str	r3, [r4, #0]
 8006b1e:	bd38      	pop	{r3, r4, r5, pc}
 8006b20:	2000076c 	.word	0x2000076c

08006b24 <_close_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	4d06      	ldr	r5, [pc, #24]	; (8006b40 <_close_r+0x1c>)
 8006b28:	2300      	movs	r3, #0
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	602b      	str	r3, [r5, #0]
 8006b30:	f7f9 fef5 	bl	800091e <_close>
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	d102      	bne.n	8006b3e <_close_r+0x1a>
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	b103      	cbz	r3, 8006b3e <_close_r+0x1a>
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	2000076c 	.word	0x2000076c

08006b44 <_fstat_r>:
 8006b44:	b538      	push	{r3, r4, r5, lr}
 8006b46:	4d07      	ldr	r5, [pc, #28]	; (8006b64 <_fstat_r+0x20>)
 8006b48:	2300      	movs	r3, #0
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	4608      	mov	r0, r1
 8006b4e:	4611      	mov	r1, r2
 8006b50:	602b      	str	r3, [r5, #0]
 8006b52:	f7f9 fef0 	bl	8000936 <_fstat>
 8006b56:	1c43      	adds	r3, r0, #1
 8006b58:	d102      	bne.n	8006b60 <_fstat_r+0x1c>
 8006b5a:	682b      	ldr	r3, [r5, #0]
 8006b5c:	b103      	cbz	r3, 8006b60 <_fstat_r+0x1c>
 8006b5e:	6023      	str	r3, [r4, #0]
 8006b60:	bd38      	pop	{r3, r4, r5, pc}
 8006b62:	bf00      	nop
 8006b64:	2000076c 	.word	0x2000076c

08006b68 <_isatty_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	4d06      	ldr	r5, [pc, #24]	; (8006b84 <_isatty_r+0x1c>)
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	4604      	mov	r4, r0
 8006b70:	4608      	mov	r0, r1
 8006b72:	602b      	str	r3, [r5, #0]
 8006b74:	f7f9 feef 	bl	8000956 <_isatty>
 8006b78:	1c43      	adds	r3, r0, #1
 8006b7a:	d102      	bne.n	8006b82 <_isatty_r+0x1a>
 8006b7c:	682b      	ldr	r3, [r5, #0]
 8006b7e:	b103      	cbz	r3, 8006b82 <_isatty_r+0x1a>
 8006b80:	6023      	str	r3, [r4, #0]
 8006b82:	bd38      	pop	{r3, r4, r5, pc}
 8006b84:	2000076c 	.word	0x2000076c

08006b88 <_lseek_r>:
 8006b88:	b538      	push	{r3, r4, r5, lr}
 8006b8a:	4d07      	ldr	r5, [pc, #28]	; (8006ba8 <_lseek_r+0x20>)
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	4608      	mov	r0, r1
 8006b90:	4611      	mov	r1, r2
 8006b92:	2200      	movs	r2, #0
 8006b94:	602a      	str	r2, [r5, #0]
 8006b96:	461a      	mov	r2, r3
 8006b98:	f7f9 fee8 	bl	800096c <_lseek>
 8006b9c:	1c43      	adds	r3, r0, #1
 8006b9e:	d102      	bne.n	8006ba6 <_lseek_r+0x1e>
 8006ba0:	682b      	ldr	r3, [r5, #0]
 8006ba2:	b103      	cbz	r3, 8006ba6 <_lseek_r+0x1e>
 8006ba4:	6023      	str	r3, [r4, #0]
 8006ba6:	bd38      	pop	{r3, r4, r5, pc}
 8006ba8:	2000076c 	.word	0x2000076c

08006bac <memcpy>:
 8006bac:	440a      	add	r2, r1
 8006bae:	4291      	cmp	r1, r2
 8006bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bb4:	d100      	bne.n	8006bb8 <memcpy+0xc>
 8006bb6:	4770      	bx	lr
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bc2:	4291      	cmp	r1, r2
 8006bc4:	d1f9      	bne.n	8006bba <memcpy+0xe>
 8006bc6:	bd10      	pop	{r4, pc}

08006bc8 <memmove>:
 8006bc8:	4288      	cmp	r0, r1
 8006bca:	b510      	push	{r4, lr}
 8006bcc:	eb01 0402 	add.w	r4, r1, r2
 8006bd0:	d902      	bls.n	8006bd8 <memmove+0x10>
 8006bd2:	4284      	cmp	r4, r0
 8006bd4:	4623      	mov	r3, r4
 8006bd6:	d807      	bhi.n	8006be8 <memmove+0x20>
 8006bd8:	1e43      	subs	r3, r0, #1
 8006bda:	42a1      	cmp	r1, r4
 8006bdc:	d008      	beq.n	8006bf0 <memmove+0x28>
 8006bde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006be2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006be6:	e7f8      	b.n	8006bda <memmove+0x12>
 8006be8:	4402      	add	r2, r0
 8006bea:	4601      	mov	r1, r0
 8006bec:	428a      	cmp	r2, r1
 8006bee:	d100      	bne.n	8006bf2 <memmove+0x2a>
 8006bf0:	bd10      	pop	{r4, pc}
 8006bf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bfa:	e7f7      	b.n	8006bec <memmove+0x24>

08006bfc <__malloc_lock>:
 8006bfc:	4801      	ldr	r0, [pc, #4]	; (8006c04 <__malloc_lock+0x8>)
 8006bfe:	f7ff b999 	b.w	8005f34 <__retarget_lock_acquire_recursive>
 8006c02:	bf00      	nop
 8006c04:	20000760 	.word	0x20000760

08006c08 <__malloc_unlock>:
 8006c08:	4801      	ldr	r0, [pc, #4]	; (8006c10 <__malloc_unlock+0x8>)
 8006c0a:	f7ff b994 	b.w	8005f36 <__retarget_lock_release_recursive>
 8006c0e:	bf00      	nop
 8006c10:	20000760 	.word	0x20000760

08006c14 <_realloc_r>:
 8006c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c18:	4680      	mov	r8, r0
 8006c1a:	4614      	mov	r4, r2
 8006c1c:	460e      	mov	r6, r1
 8006c1e:	b921      	cbnz	r1, 8006c2a <_realloc_r+0x16>
 8006c20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c24:	4611      	mov	r1, r2
 8006c26:	f7ff ba59 	b.w	80060dc <_malloc_r>
 8006c2a:	b92a      	cbnz	r2, 8006c38 <_realloc_r+0x24>
 8006c2c:	f7ff f9ea 	bl	8006004 <_free_r>
 8006c30:	4625      	mov	r5, r4
 8006c32:	4628      	mov	r0, r5
 8006c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c38:	f000 f82e 	bl	8006c98 <_malloc_usable_size_r>
 8006c3c:	4284      	cmp	r4, r0
 8006c3e:	4607      	mov	r7, r0
 8006c40:	d802      	bhi.n	8006c48 <_realloc_r+0x34>
 8006c42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c46:	d812      	bhi.n	8006c6e <_realloc_r+0x5a>
 8006c48:	4621      	mov	r1, r4
 8006c4a:	4640      	mov	r0, r8
 8006c4c:	f7ff fa46 	bl	80060dc <_malloc_r>
 8006c50:	4605      	mov	r5, r0
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d0ed      	beq.n	8006c32 <_realloc_r+0x1e>
 8006c56:	42bc      	cmp	r4, r7
 8006c58:	4622      	mov	r2, r4
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	bf28      	it	cs
 8006c5e:	463a      	movcs	r2, r7
 8006c60:	f7ff ffa4 	bl	8006bac <memcpy>
 8006c64:	4631      	mov	r1, r6
 8006c66:	4640      	mov	r0, r8
 8006c68:	f7ff f9cc 	bl	8006004 <_free_r>
 8006c6c:	e7e1      	b.n	8006c32 <_realloc_r+0x1e>
 8006c6e:	4635      	mov	r5, r6
 8006c70:	e7df      	b.n	8006c32 <_realloc_r+0x1e>
	...

08006c74 <_read_r>:
 8006c74:	b538      	push	{r3, r4, r5, lr}
 8006c76:	4d07      	ldr	r5, [pc, #28]	; (8006c94 <_read_r+0x20>)
 8006c78:	4604      	mov	r4, r0
 8006c7a:	4608      	mov	r0, r1
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	2200      	movs	r2, #0
 8006c80:	602a      	str	r2, [r5, #0]
 8006c82:	461a      	mov	r2, r3
 8006c84:	f7f9 fe2e 	bl	80008e4 <_read>
 8006c88:	1c43      	adds	r3, r0, #1
 8006c8a:	d102      	bne.n	8006c92 <_read_r+0x1e>
 8006c8c:	682b      	ldr	r3, [r5, #0]
 8006c8e:	b103      	cbz	r3, 8006c92 <_read_r+0x1e>
 8006c90:	6023      	str	r3, [r4, #0]
 8006c92:	bd38      	pop	{r3, r4, r5, pc}
 8006c94:	2000076c 	.word	0x2000076c

08006c98 <_malloc_usable_size_r>:
 8006c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c9c:	1f18      	subs	r0, r3, #4
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	bfbc      	itt	lt
 8006ca2:	580b      	ldrlt	r3, [r1, r0]
 8006ca4:	18c0      	addlt	r0, r0, r3
 8006ca6:	4770      	bx	lr

08006ca8 <_init>:
 8006ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006caa:	bf00      	nop
 8006cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cae:	bc08      	pop	{r3}
 8006cb0:	469e      	mov	lr, r3
 8006cb2:	4770      	bx	lr

08006cb4 <_fini>:
 8006cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb6:	bf00      	nop
 8006cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cba:	bc08      	pop	{r3}
 8006cbc:	469e      	mov	lr, r3
 8006cbe:	4770      	bx	lr
