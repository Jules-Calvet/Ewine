
Wifi_Ewine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d32c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000110c  0800d470  0800d470  0001d470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e57c  0800e57c  0001e57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e584  0800e584  0001e584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e588  0800e588  0001e588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  20000008  0800e58c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000150c  200001f8  0800e77c  000201f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001704  0800e77c  00021704  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fe5f  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003eb8  00000000  00000000  00040087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001fb8  00000000  00000000  00043f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001e48  00000000  00000000  00045ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00025710  00000000  00000000  00047d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e6cf  00000000  00000000  0006d450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e7e61  00000000  00000000  0008bb1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00173980  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009b00  00000000  00000000  001739d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f8 	.word	0x200001f8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d454 	.word	0x0800d454

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001fc 	.word	0x200001fc
 800017c:	0800d454 	.word	0x0800d454

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b9aa 	b.w	8000f04 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f83c 	bl	8000c34 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2lz>:
 8000bc8:	b538      	push	{r3, r4, r5, lr}
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2300      	movs	r3, #0
 8000bce:	4604      	mov	r4, r0
 8000bd0:	460d      	mov	r5, r1
 8000bd2:	f7ff ff5b 	bl	8000a8c <__aeabi_dcmplt>
 8000bd6:	b928      	cbnz	r0, 8000be4 <__aeabi_d2lz+0x1c>
 8000bd8:	4620      	mov	r0, r4
 8000bda:	4629      	mov	r1, r5
 8000bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000be0:	f000 b80a 	b.w	8000bf8 <__aeabi_d2ulz>
 8000be4:	4620      	mov	r0, r4
 8000be6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000bea:	f000 f805 	bl	8000bf8 <__aeabi_d2ulz>
 8000bee:	4240      	negs	r0, r0
 8000bf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf4:	bd38      	pop	{r3, r4, r5, pc}
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2ulz>:
 8000bf8:	b5d0      	push	{r4, r6, r7, lr}
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <__aeabi_d2ulz+0x34>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4606      	mov	r6, r0
 8000c00:	460f      	mov	r7, r1
 8000c02:	f7ff fcd1 	bl	80005a8 <__aeabi_dmul>
 8000c06:	f7ff ffa7 	bl	8000b58 <__aeabi_d2uiz>
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	f7ff fc52 	bl	80004b4 <__aeabi_ui2d>
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <__aeabi_d2ulz+0x38>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	f7ff fcc8 	bl	80005a8 <__aeabi_dmul>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	4639      	mov	r1, r7
 8000c20:	f7ff fb0a 	bl	8000238 <__aeabi_dsub>
 8000c24:	f7ff ff98 	bl	8000b58 <__aeabi_d2uiz>
 8000c28:	4621      	mov	r1, r4
 8000c2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c2c:	3df00000 	.word	0x3df00000
 8000c30:	41f00000 	.word	0x41f00000

08000c34 <__udivmoddi4>:
 8000c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c38:	9d08      	ldr	r5, [sp, #32]
 8000c3a:	4604      	mov	r4, r0
 8000c3c:	468e      	mov	lr, r1
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d14d      	bne.n	8000cde <__udivmoddi4+0xaa>
 8000c42:	428a      	cmp	r2, r1
 8000c44:	4694      	mov	ip, r2
 8000c46:	d969      	bls.n	8000d1c <__udivmoddi4+0xe8>
 8000c48:	fab2 f282 	clz	r2, r2
 8000c4c:	b152      	cbz	r2, 8000c64 <__udivmoddi4+0x30>
 8000c4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c52:	f1c2 0120 	rsb	r1, r2, #32
 8000c56:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000c62:	4094      	lsls	r4, r2
 8000c64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c68:	0c21      	lsrs	r1, r4, #16
 8000c6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000c6e:	fa1f f78c 	uxth.w	r7, ip
 8000c72:	fb08 e316 	mls	r3, r8, r6, lr
 8000c76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c7a:	fb06 f107 	mul.w	r1, r6, r7
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x64>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8a:	f080 811f 	bcs.w	8000ecc <__udivmoddi4+0x298>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 811c 	bls.w	8000ecc <__udivmoddi4+0x298>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	4463      	add	r3, ip
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 f707 	mul.w	r7, r0, r7
 8000cac:	42a7      	cmp	r7, r4
 8000cae:	d90a      	bls.n	8000cc6 <__udivmoddi4+0x92>
 8000cb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb8:	f080 810a 	bcs.w	8000ed0 <__udivmoddi4+0x29c>
 8000cbc:	42a7      	cmp	r7, r4
 8000cbe:	f240 8107 	bls.w	8000ed0 <__udivmoddi4+0x29c>
 8000cc2:	4464      	add	r4, ip
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cca:	1be4      	subs	r4, r4, r7
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa4>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0xc2>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	f000 80ef 	beq.w	8000ec6 <__udivmoddi4+0x292>
 8000ce8:	2600      	movs	r6, #0
 8000cea:	e9c5 0100 	strd	r0, r1, [r5]
 8000cee:	4630      	mov	r0, r6
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f683 	clz	r6, r3
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d14a      	bne.n	8000d94 <__udivmoddi4+0x160>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xd4>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80f9 	bhi.w	8000efa <__udivmoddi4+0x2c6>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	469e      	mov	lr, r3
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	d0e0      	beq.n	8000cd8 <__udivmoddi4+0xa4>
 8000d16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d1a:	e7dd      	b.n	8000cd8 <__udivmoddi4+0xa4>
 8000d1c:	b902      	cbnz	r2, 8000d20 <__udivmoddi4+0xec>
 8000d1e:	deff      	udf	#255	; 0xff
 8000d20:	fab2 f282 	clz	r2, r2
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	f040 8092 	bne.w	8000e4e <__udivmoddi4+0x21a>
 8000d2a:	eba1 010c 	sub.w	r1, r1, ip
 8000d2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d32:	fa1f fe8c 	uxth.w	lr, ip
 8000d36:	2601      	movs	r6, #1
 8000d38:	0c20      	lsrs	r0, r4, #16
 8000d3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000d42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d46:	fb0e f003 	mul.w	r0, lr, r3
 8000d4a:	4288      	cmp	r0, r1
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x12c>
 8000d4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000d52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x12a>
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	f200 80cb 	bhi.w	8000ef4 <__udivmoddi4+0x2c0>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	1a09      	subs	r1, r1, r0
 8000d62:	b2a4      	uxth	r4, r4
 8000d64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d68:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d70:	fb0e fe00 	mul.w	lr, lr, r0
 8000d74:	45a6      	cmp	lr, r4
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x156>
 8000d78:	eb1c 0404 	adds.w	r4, ip, r4
 8000d7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d80:	d202      	bcs.n	8000d88 <__udivmoddi4+0x154>
 8000d82:	45a6      	cmp	lr, r4
 8000d84:	f200 80bb 	bhi.w	8000efe <__udivmoddi4+0x2ca>
 8000d88:	4608      	mov	r0, r1
 8000d8a:	eba4 040e 	sub.w	r4, r4, lr
 8000d8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x9a>
 8000d94:	f1c6 0720 	rsb	r7, r6, #32
 8000d98:	40b3      	lsls	r3, r6
 8000d9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da2:	fa20 f407 	lsr.w	r4, r0, r7
 8000da6:	fa01 f306 	lsl.w	r3, r1, r6
 8000daa:	431c      	orrs	r4, r3
 8000dac:	40f9      	lsrs	r1, r7
 8000dae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db2:	fa00 f306 	lsl.w	r3, r0, r6
 8000db6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dba:	0c20      	lsrs	r0, r4, #16
 8000dbc:	fa1f fe8c 	uxth.w	lr, ip
 8000dc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000dc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd2:	d90b      	bls.n	8000dec <__udivmoddi4+0x1b8>
 8000dd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ddc:	f080 8088 	bcs.w	8000ef0 <__udivmoddi4+0x2bc>
 8000de0:	4288      	cmp	r0, r1
 8000de2:	f240 8085 	bls.w	8000ef0 <__udivmoddi4+0x2bc>
 8000de6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dea:	4461      	add	r1, ip
 8000dec:	1a09      	subs	r1, r1, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000df4:	fb09 1110 	mls	r1, r9, r0, r1
 8000df8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e00:	458e      	cmp	lr, r1
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x1e2>
 8000e04:	eb1c 0101 	adds.w	r1, ip, r1
 8000e08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e0c:	d26c      	bcs.n	8000ee8 <__udivmoddi4+0x2b4>
 8000e0e:	458e      	cmp	lr, r1
 8000e10:	d96a      	bls.n	8000ee8 <__udivmoddi4+0x2b4>
 8000e12:	3802      	subs	r0, #2
 8000e14:	4461      	add	r1, ip
 8000e16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000e1e:	eba1 010e 	sub.w	r1, r1, lr
 8000e22:	42a1      	cmp	r1, r4
 8000e24:	46c8      	mov	r8, r9
 8000e26:	46a6      	mov	lr, r4
 8000e28:	d356      	bcc.n	8000ed8 <__udivmoddi4+0x2a4>
 8000e2a:	d053      	beq.n	8000ed4 <__udivmoddi4+0x2a0>
 8000e2c:	b15d      	cbz	r5, 8000e46 <__udivmoddi4+0x212>
 8000e2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000e32:	eb61 010e 	sbc.w	r1, r1, lr
 8000e36:	fa01 f707 	lsl.w	r7, r1, r7
 8000e3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000e3e:	40f1      	lsrs	r1, r6
 8000e40:	431f      	orrs	r7, r3
 8000e42:	e9c5 7100 	strd	r7, r1, [r5]
 8000e46:	2600      	movs	r6, #0
 8000e48:	4631      	mov	r1, r6
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	f1c2 0320 	rsb	r3, r2, #32
 8000e52:	40d8      	lsrs	r0, r3
 8000e54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e58:	fa21 f303 	lsr.w	r3, r1, r3
 8000e5c:	4091      	lsls	r1, r2
 8000e5e:	4301      	orrs	r1, r0
 8000e60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e64:	fa1f fe8c 	uxth.w	lr, ip
 8000e68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000e70:	0c0b      	lsrs	r3, r1, #16
 8000e72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e76:	fb00 f60e 	mul.w	r6, r0, lr
 8000e7a:	429e      	cmp	r6, r3
 8000e7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x260>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8a:	d22f      	bcs.n	8000eec <__udivmoddi4+0x2b8>
 8000e8c:	429e      	cmp	r6, r3
 8000e8e:	d92d      	bls.n	8000eec <__udivmoddi4+0x2b8>
 8000e90:	3802      	subs	r0, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	1b9b      	subs	r3, r3, r6
 8000e96:	b289      	uxth	r1, r1
 8000e98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x28a>
 8000eac:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb4:	d216      	bcs.n	8000ee4 <__udivmoddi4+0x2b0>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d914      	bls.n	8000ee4 <__udivmoddi4+0x2b0>
 8000eba:	3e02      	subs	r6, #2
 8000ebc:	4461      	add	r1, ip
 8000ebe:	1ac9      	subs	r1, r1, r3
 8000ec0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec4:	e738      	b.n	8000d38 <__udivmoddi4+0x104>
 8000ec6:	462e      	mov	r6, r5
 8000ec8:	4628      	mov	r0, r5
 8000eca:	e705      	b.n	8000cd8 <__udivmoddi4+0xa4>
 8000ecc:	4606      	mov	r6, r0
 8000ece:	e6e3      	b.n	8000c98 <__udivmoddi4+0x64>
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	e6f8      	b.n	8000cc6 <__udivmoddi4+0x92>
 8000ed4:	454b      	cmp	r3, r9
 8000ed6:	d2a9      	bcs.n	8000e2c <__udivmoddi4+0x1f8>
 8000ed8:	ebb9 0802 	subs.w	r8, r9, r2
 8000edc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee0:	3801      	subs	r0, #1
 8000ee2:	e7a3      	b.n	8000e2c <__udivmoddi4+0x1f8>
 8000ee4:	4646      	mov	r6, r8
 8000ee6:	e7ea      	b.n	8000ebe <__udivmoddi4+0x28a>
 8000ee8:	4620      	mov	r0, r4
 8000eea:	e794      	b.n	8000e16 <__udivmoddi4+0x1e2>
 8000eec:	4640      	mov	r0, r8
 8000eee:	e7d1      	b.n	8000e94 <__udivmoddi4+0x260>
 8000ef0:	46d0      	mov	r8, sl
 8000ef2:	e77b      	b.n	8000dec <__udivmoddi4+0x1b8>
 8000ef4:	3b02      	subs	r3, #2
 8000ef6:	4461      	add	r1, ip
 8000ef8:	e732      	b.n	8000d60 <__udivmoddi4+0x12c>
 8000efa:	4630      	mov	r0, r6
 8000efc:	e709      	b.n	8000d12 <__udivmoddi4+0xde>
 8000efe:	4464      	add	r4, ip
 8000f00:	3802      	subs	r0, #2
 8000f02:	e742      	b.n	8000d8a <__udivmoddi4+0x156>

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
}
 8000f2e:	bf00      	nop
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f3e:	2004      	movs	r0, #4
 8000f40:	f7ff ffe2 	bl	8000f08 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f44:	2001      	movs	r0, #1
 8000f46:	f7ff ffdf 	bl	8000f08 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	200b      	movs	r0, #11
 8000f50:	f004 f955 	bl	80051fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f54:	200b      	movs	r0, #11
 8000f56:	f004 f96c 	bl	8005232 <HAL_NVIC_EnableIRQ>

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b085      	sub	sp, #20
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f82:	68fb      	ldr	r3, [r7, #12]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa4:	2004      	movs	r0, #4
 8000fa6:	f7ff ffda 	bl	8000f5e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	2001      	movs	r0, #1
 8000fac:	f7ff ffd7 	bl	8000f5e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb0:	2002      	movs	r0, #2
 8000fb2:	f7ff ffd4 	bl	8000f5e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb6:	2008      	movs	r0, #8
 8000fb8:	f7ff ffd1 	bl	8000f5e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ESP32_RST_Pin|Motor_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2148      	movs	r1, #72	; 0x48
 8000fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc4:	f004 fe0a 	bl	8005bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2123      	movs	r1, #35	; 0x23
 8000fcc:	482a      	ldr	r0, [pc, #168]	; (8001078 <MX_GPIO_Init+0xe8>)
 8000fce:	f004 fe05 	bl	8005bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ESP32_RST_Pin|Motor_Pin;
 8000fd2:	2348      	movs	r3, #72	; 0x48
 8000fd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fea:	f004 fc6f 	bl	80058cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fee:	2310      	movs	r3, #16
 8000ff0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ff6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	4619      	mov	r1, r3
 8001000:	481e      	ldr	r0, [pc, #120]	; (800107c <MX_GPIO_Init+0xec>)
 8001002:	f004 fc63 	bl	80058cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001006:	2323      	movs	r3, #35	; 0x23
 8001008:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100a:	2301      	movs	r3, #1
 800100c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	4619      	mov	r1, r3
 800101a:	4817      	ldr	r0, [pc, #92]	; (8001078 <MX_GPIO_Init+0xe8>)
 800101c:	f004 fc56 	bl	80058cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B2_Pin;
 8001020:	2301      	movs	r3, #1
 8001022:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001024:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001028:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800102a:	2301      	movs	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	4619      	mov	r1, r3
 8001032:	4813      	ldr	r0, [pc, #76]	; (8001080 <MX_GPIO_Init+0xf0>)
 8001034:	f004 fc4a 	bl	80058cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 8001038:	2302      	movs	r3, #2
 800103a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001040:	2301      	movs	r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	4619      	mov	r1, r3
 8001048:	480d      	ldr	r0, [pc, #52]	; (8001080 <MX_GPIO_Init+0xf0>)
 800104a:	f004 fc3f 	bl	80058cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	2006      	movs	r0, #6
 8001054:	f004 f8d3 	bl	80051fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001058:	2006      	movs	r0, #6
 800105a:	f004 f8ea 	bl	8005232 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	200a      	movs	r0, #10
 8001064:	f004 f8cb 	bl	80051fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001068:	200a      	movs	r0, #10
 800106a:	f004 f8e2 	bl	8005232 <HAL_NVIC_EnableIRQ>

}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	48000400 	.word	0x48000400
 800107c:	48000800 	.word	0x48000800
 8001080:	48000c00 	.word	0x48000c00

08001084 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800108c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001090:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	2b00      	cmp	r3, #0
 800109a:	d013      	beq.n	80010c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800109c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80010a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00b      	beq.n	80010c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010ac:	e000      	b.n	80010b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80010ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80010b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0f9      	beq.n	80010ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80010ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80010c4:	687b      	ldr	r3, [r7, #4]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80010da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010e2:	f023 0218 	bic.w	r2, r3, #24
 80010e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <init_done>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init_done()
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
	for(int i=0; i<3; i++)
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	e017      	b.n	800113c <init_done+0x3c>
	{
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800110c:	2120      	movs	r1, #32
 800110e:	4816      	ldr	r0, [pc, #88]	; (8001168 <init_done+0x68>)
 8001110:	f004 fd7c 	bl	8005c0c <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8001114:	20c8      	movs	r0, #200	; 0xc8
 8001116:	f003 ff73 	bl	8005000 <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800111a:	2101      	movs	r1, #1
 800111c:	4812      	ldr	r0, [pc, #72]	; (8001168 <init_done+0x68>)
 800111e:	f004 fd75 	bl	8005c0c <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8001122:	20c8      	movs	r0, #200	; 0xc8
 8001124:	f003 ff6c 	bl	8005000 <HAL_Delay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001128:	2102      	movs	r1, #2
 800112a:	480f      	ldr	r0, [pc, #60]	; (8001168 <init_done+0x68>)
 800112c:	f004 fd6e 	bl	8005c0c <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8001130:	20c8      	movs	r0, #200	; 0xc8
 8001132:	f003 ff65 	bl	8005000 <HAL_Delay>
	for(int i=0; i<3; i++)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3301      	adds	r3, #1
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b02      	cmp	r3, #2
 8001140:	dde4      	ble.n	800110c <init_done+0xc>
	}
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2120      	movs	r1, #32
 8001146:	4808      	ldr	r0, [pc, #32]	; (8001168 <init_done+0x68>)
 8001148:	f004 fd48 	bl	8005bdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	2101      	movs	r1, #1
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <init_done+0x68>)
 8001152:	f004 fd43 	bl	8005bdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	2102      	movs	r1, #2
 800115a:	4803      	ldr	r0, [pc, #12]	; (8001168 <init_done+0x68>)
 800115c:	f004 fd3e 	bl	8005bdc <HAL_GPIO_WritePin>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	48000400 	.word	0x48000400

0800116c <formate_json_button>:

static char* formate_json_button(int value)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	JSON_Value *val = json_value_init_object();
 8001174:	f002 fffa 	bl	800416c <json_value_init_object>
 8001178:	6178      	str	r0, [r7, #20]
	if(val == NULL)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <formate_json_button+0x18>
		return NULL;
 8001180:	2300      	movs	r3, #0
 8001182:	e020      	b.n	80011c6 <formate_json_button+0x5a>

	JSON_Object *obj = json_value_get_object(val);
 8001184:	6978      	ldr	r0, [r7, #20]
 8001186:	f002 ff39 	bl	8003ffc <json_value_get_object>
 800118a:	6138      	str	r0, [r7, #16]
	if(obj == NULL)
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <formate_json_button+0x2a>
		return NULL;
 8001192:	2300      	movs	r3, #0
 8001194:	e017      	b.n	80011c6 <formate_json_button+0x5a>

	if(json_object_set_number(obj, "id", value) != JSONSuccess)
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff f99c 	bl	80004d4 <__aeabi_i2d>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	ec43 2b10 	vmov	d0, r2, r3
 80011a4:	490a      	ldr	r1, [pc, #40]	; (80011d0 <formate_json_button+0x64>)
 80011a6:	6938      	ldr	r0, [r7, #16]
 80011a8:	f003 fa08 	bl	80045bc <json_object_set_number>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <formate_json_button+0x4a>
		return NULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e007      	b.n	80011c6 <formate_json_button+0x5a>

	char* serialized_string = json_serialize_to_string(val);
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	f003 f904 	bl	80043c4 <json_serialize_to_string>
 80011bc:	60f8      	str	r0, [r7, #12]

	json_value_free(val);
 80011be:	6978      	ldr	r0, [r7, #20]
 80011c0:	f002 ffa6 	bl	8004110 <json_value_free>

	return serialized_string;
 80011c4:	68fb      	ldr	r3, [r7, #12]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	0800d470 	.word	0x0800d470

080011d4 <formate_json_temp>:

static char* formate_json_temp(int value)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	JSON_Value *val = json_value_init_object();
 80011dc:	f002 ffc6 	bl	800416c <json_value_init_object>
 80011e0:	6178      	str	r0, [r7, #20]
	if(val == NULL)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <formate_json_temp+0x18>
		return NULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	e020      	b.n	800122e <formate_json_temp+0x5a>

	JSON_Object *obj = json_value_get_object(val);
 80011ec:	6978      	ldr	r0, [r7, #20]
 80011ee:	f002 ff05 	bl	8003ffc <json_value_get_object>
 80011f2:	6138      	str	r0, [r7, #16]
	if(obj == NULL)
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <formate_json_temp+0x2a>
		return NULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e017      	b.n	800122e <formate_json_temp+0x5a>

	if(json_object_set_number(obj, "value", value) != JSONSuccess)
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff f968 	bl	80004d4 <__aeabi_i2d>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	ec43 2b10 	vmov	d0, r2, r3
 800120c:	490a      	ldr	r1, [pc, #40]	; (8001238 <formate_json_temp+0x64>)
 800120e:	6938      	ldr	r0, [r7, #16]
 8001210:	f003 f9d4 	bl	80045bc <json_object_set_number>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <formate_json_temp+0x4a>
		return NULL;
 800121a:	2300      	movs	r3, #0
 800121c:	e007      	b.n	800122e <formate_json_temp+0x5a>

	char* serialized_string = json_serialize_to_string(val);
 800121e:	6978      	ldr	r0, [r7, #20]
 8001220:	f003 f8d0 	bl	80043c4 <json_serialize_to_string>
 8001224:	60f8      	str	r0, [r7, #12]

	json_value_free(val);
 8001226:	6978      	ldr	r0, [r7, #20]
 8001228:	f002 ff72 	bl	8004110 <json_value_free>

	return serialized_string;
 800122c:	68fb      	ldr	r3, [r7, #12]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	0800d474 	.word	0x0800d474

0800123c <check_subscription>:

static int check_subscription()
{
 800123c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001240:	b091      	sub	sp, #68	; 0x44
 8001242:	af00      	add	r7, sp, #0
	if (UART_ESP32_RecvEndFlag == 1) {
 8001244:	4b5f      	ldr	r3, [pc, #380]	; (80013c4 <check_subscription+0x188>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b01      	cmp	r3, #1
 800124c:	f040 80b3 	bne.w	80013b6 <check_subscription+0x17a>
		char pattern[24];
		memset(pattern, 0, sizeof(pattern));
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2218      	movs	r2, #24
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f009 f9ee 	bl	800a638 <memset>
		//sprintf((char*) pattern, "+MQTTSUBRECV:0,\"isen%s/led\",", CARD_NUMBER);
		sprintf((char*) pattern, "+MQTTSUBRECV:0,\"%s/", MQTT_CLIENTID);
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	4a5a      	ldr	r2, [pc, #360]	; (80013c8 <check_subscription+0x18c>)
 8001260:	495a      	ldr	r1, [pc, #360]	; (80013cc <check_subscription+0x190>)
 8001262:	4618      	mov	r0, r3
 8001264:	f009 fb6e 	bl	800a944 <siprintf>
		uint16_t data_size = 0, off = sizeof(pattern)-1; // \0 not needed
 8001268:	2300      	movs	r3, #0
 800126a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800126c:	2317      	movs	r3, #23
 800126e:	873b      	strh	r3, [r7, #56]	; 0x38
		if (strstr((const char*) UART_ESP32_RxBUF, pattern) != NULL) {
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	4619      	mov	r1, r3
 8001274:	4856      	ldr	r0, [pc, #344]	; (80013d0 <check_subscription+0x194>)
 8001276:	f009 fbe9 	bl	800aa4c <strstr>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 8094 	beq.w	80013aa <check_subscription+0x16e>
			printf("APP: Match succeed\r\n");
 8001282:	4854      	ldr	r0, [pc, #336]	; (80013d4 <check_subscription+0x198>)
 8001284:	f009 fb46 	bl	800a914 <puts>
			int topic_id = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	63fb      	str	r3, [r7, #60]	; 0x3c
			// nul mais ok
			if(UART_ESP32_RxBUF[off] == 'l')
 800128c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800128e:	4a50      	ldr	r2, [pc, #320]	; (80013d0 <check_subscription+0x194>)
 8001290:	5cd3      	ldrb	r3, [r2, r3]
 8001292:	2b6c      	cmp	r3, #108	; 0x6c
 8001294:	d105      	bne.n	80012a2 <check_subscription+0x66>
			{
				topic_id = 1;
 8001296:	2301      	movs	r3, #1
 8001298:	63fb      	str	r3, [r7, #60]	; 0x3c
				off+= 5;
 800129a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800129c:	3305      	adds	r3, #5
 800129e:	873b      	strh	r3, [r7, #56]	; 0x38
 80012a0:	e004      	b.n	80012ac <check_subscription+0x70>
			}
			else
			{
				topic_id = 2;
 80012a2:	2302      	movs	r3, #2
 80012a4:	63fb      	str	r3, [r7, #60]	; 0x3c
				off+= 9;
 80012a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80012a8:	3309      	adds	r3, #9
 80012aa:	873b      	strh	r3, [r7, #56]	; 0x38
			}
			if(topic_id == 1)
 80012ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d158      	bne.n	8001364 <check_subscription+0x128>
			{
 80012b2:	466b      	mov	r3, sp
 80012b4:	461e      	mov	r6, r3
				uint8_t data[data_size];
 80012b6:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 80012b8:	460b      	mov	r3, r1
 80012ba:	3b01      	subs	r3, #1
 80012bc:	637b      	str	r3, [r7, #52]	; 0x34
 80012be:	b28b      	uxth	r3, r1
 80012c0:	2200      	movs	r2, #0
 80012c2:	4698      	mov	r8, r3
 80012c4:	4691      	mov	r9, r2
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	f04f 0300 	mov.w	r3, #0
 80012ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012da:	b28b      	uxth	r3, r1
 80012dc:	2200      	movs	r2, #0
 80012de:	461c      	mov	r4, r3
 80012e0:	4615      	mov	r5, r2
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	f04f 0300 	mov.w	r3, #0
 80012ea:	00eb      	lsls	r3, r5, #3
 80012ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012f0:	00e2      	lsls	r2, r4, #3
 80012f2:	460b      	mov	r3, r1
 80012f4:	3307      	adds	r3, #7
 80012f6:	08db      	lsrs	r3, r3, #3
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	ebad 0d03 	sub.w	sp, sp, r3
 80012fe:	466b      	mov	r3, sp
 8001300:	3300      	adds	r3, #0
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
				JSON_Value *val = json_parse_string(data);
 8001304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001306:	f002 fd7b 	bl	8003e00 <json_parse_string>
 800130a:	62f8      	str	r0, [r7, #44]	; 0x2c
				JSON_Object *obj = json_value_get_object(val);
 800130c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800130e:	f002 fe75 	bl	8003ffc <json_value_get_object>
 8001312:	62b8      	str	r0, [r7, #40]	; 0x28
				int motor_state = json_object_get_number (obj, "state");
 8001314:	4930      	ldr	r1, [pc, #192]	; (80013d8 <check_subscription+0x19c>)
 8001316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001318:	f002 fdb1 	bl	8003e7e <json_object_get_number>
 800131c:	ec53 2b10 	vmov	r2, r3, d0
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff fbf0 	bl	8000b08 <__aeabi_d2iz>
 8001328:	4603      	mov	r3, r0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
				if(motor_state == 0){
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	2b00      	cmp	r3, #0
 8001330:	d108      	bne.n	8001344 <check_subscription+0x108>
					HAL_GPIO_WritePin(Motor_GPIO_Port, Motor_Pin, RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	2140      	movs	r1, #64	; 0x40
 8001336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133a:	f004 fc4f 	bl	8005bdc <HAL_GPIO_WritePin>
					printf("Motor OFF\n");
 800133e:	4827      	ldr	r0, [pc, #156]	; (80013dc <check_subscription+0x1a0>)
 8001340:	f009 fae8 	bl	800a914 <puts>
				}
				if(motor_state == 1){
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	2b01      	cmp	r3, #1
 8001348:	d108      	bne.n	800135c <check_subscription+0x120>
					HAL_GPIO_WritePin(Motor_GPIO_Port, Motor_Pin, SET);
 800134a:	2201      	movs	r2, #1
 800134c:	2140      	movs	r1, #64	; 0x40
 800134e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001352:	f004 fc43 	bl	8005bdc <HAL_GPIO_WritePin>
					printf("Motor ON\n");
 8001356:	4822      	ldr	r0, [pc, #136]	; (80013e0 <check_subscription+0x1a4>)
 8001358:	f009 fadc 	bl	800a914 <puts>
				}
				json_free_serialized_string(data);
 800135c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800135e:	f003 f863 	bl	8004428 <json_free_serialized_string>
 8001362:	46b5      	mov	sp, r6
			}
			if(topic_id == 2)
 8001364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001366:	2b02      	cmp	r3, #2
 8001368:	d119      	bne.n	800139e <check_subscription+0x162>
			{
				// PUB ADC temperature
				uint16_t temp = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	847b      	strh	r3, [r7, #34]	; 0x22
				//acq_internal_temp(&temp);
				char *data = formate_json_temp((int)temp);
 800136e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff2f 	bl	80011d4 <formate_json_temp>
 8001376:	61f8      	str	r0, [r7, #28]
				if(esp8266_Publish_Temp_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_TEMP_MQTT)
 8001378:	69f8      	ldr	r0, [r7, #28]
 800137a:	f7fe ff01 	bl	8000180 <strlen>
 800137e:	4603      	mov	r3, r0
 8001380:	b29b      	uxth	r3, r3
 8001382:	4619      	mov	r1, r3
 8001384:	69f8      	ldr	r0, [r7, #28]
 8001386:	f008 fe19 	bl	8009fbc <esp8266_Publish_Temp_BrokerMQTT>
 800138a:	4603      	mov	r3, r0
 800138c:	2b0b      	cmp	r3, #11
 800138e:	d002      	beq.n	8001396 <check_subscription+0x15a>
					printf("APP: TEMP esp8266_Publish_BrokerMQTT() failed\n");
 8001390:	4814      	ldr	r0, [pc, #80]	; (80013e4 <check_subscription+0x1a8>)
 8001392:	f009 fabf 	bl	800a914 <puts>
				json_free_serialized_string(data);
 8001396:	69f8      	ldr	r0, [r7, #28]
 8001398:	f003 f846 	bl	8004428 <json_free_serialized_string>
 800139c:	e003      	b.n	80013a6 <check_subscription+0x16a>
			}
			else
				printf("topic_id unknown %d\n",topic_id);
 800139e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80013a0:	4811      	ldr	r0, [pc, #68]	; (80013e8 <check_subscription+0x1ac>)
 80013a2:	f009 fa31 	bl	800a808 <iprintf>

			return 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e006      	b.n	80013b8 <check_subscription+0x17c>
		}
		else
		{
			printf("APP: Match failed\r\n");
 80013aa:	4810      	ldr	r0, [pc, #64]	; (80013ec <check_subscription+0x1b0>)
 80013ac:	f009 fab2 	bl	800a914 <puts>
			return -1;
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
 80013b4:	e000      	b.n	80013b8 <check_subscription+0x17c>
		}
	}
	else
	{
		return 1;
 80013b6:	2301      	movs	r3, #1
	}
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3744      	adds	r7, #68	; 0x44
 80013bc:	46bd      	mov	sp, r7
 80013be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013c2:	bf00      	nop
 80013c4:	200016f1 	.word	0x200016f1
 80013c8:	0800d47c 	.word	0x0800d47c
 80013cc:	0800d484 	.word	0x0800d484
 80013d0:	20000ef0 	.word	0x20000ef0
 80013d4:	0800d498 	.word	0x0800d498
 80013d8:	0800d4ac 	.word	0x0800d4ac
 80013dc:	0800d4b4 	.word	0x0800d4b4
 80013e0:	0800d4c0 	.word	0x0800d4c0
 80013e4:	0800d4cc 	.word	0x0800d4cc
 80013e8:	0800d4fc 	.word	0x0800d4fc
 80013ec:	0800d514 	.word	0x0800d514

080013f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f6:	f003 fd7d 	bl	8004ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013fa:	f000 f8cb 	bl	8001594 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80013fe:	f000 f93f 	bl	8001680 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001402:	f7ff fdc5 	bl	8000f90 <MX_GPIO_Init>
  MX_DMA_Init();
 8001406:	f7ff fd98 	bl	8000f3a <MX_DMA_Init>
  MX_USART1_UART_Init();
 800140a:	f003 fb91 	bl	8004b30 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 800140e:	f003 fcb9 	bl	8004d84 <MX_USB_PCD_Init>
  MX_LPUART1_UART_Init();
 8001412:	f003 fb31 	bl	8004a78 <MX_LPUART1_UART_Init>
  MX_TIM17_Init();
 8001416:	f003 faa7 	bl	8004968 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

 if (esp8266_SetupIP() != _SUCCEED) {
 800141a:	f008 f99f 	bl	800975c <esp8266_SetupIP>
 800141e:	4603      	mov	r3, r0
 8001420:	2b01      	cmp	r3, #1
 8001422:	d00a      	beq.n	800143a <main+0x4a>
  	  printf("esp8266_SetupIP failed - RESTART and configure WIFI source\n");
 8001424:	484e      	ldr	r0, [pc, #312]	; (8001560 <main+0x170>)
 8001426:	f009 fa75 	bl	800a914 <puts>
  	  while(1)
  	  {
  		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800142a:	2102      	movs	r1, #2
 800142c:	484d      	ldr	r0, [pc, #308]	; (8001564 <main+0x174>)
 800142e:	f004 fbed 	bl	8005c0c <HAL_GPIO_TogglePin>
  		  HAL_Delay(200);
 8001432:	20c8      	movs	r0, #200	; 0xc8
 8001434:	f003 fde4 	bl	8005000 <HAL_Delay>
  		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001438:	e7f7      	b.n	800142a <main+0x3a>
  	  }
    }

    if(esp8266_SetupConnect_BrokerMQTT() != _SUCCEED_MQTT)
 800143a:	f008 fc51 	bl	8009ce0 <esp8266_SetupConnect_BrokerMQTT>
 800143e:	4603      	mov	r3, r0
 8001440:	2b01      	cmp	r3, #1
 8001442:	d00a      	beq.n	800145a <main+0x6a>
    {
  	  printf("esp8266_SetupConnect_BrokerMQTT failed - RESTART and configure MQTT\n");
 8001444:	4848      	ldr	r0, [pc, #288]	; (8001568 <main+0x178>)
 8001446:	f009 fa65 	bl	800a914 <puts>
  	  while(1)
  	  {
  		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800144a:	2102      	movs	r1, #2
 800144c:	4845      	ldr	r0, [pc, #276]	; (8001564 <main+0x174>)
 800144e:	f004 fbdd 	bl	8005c0c <HAL_GPIO_TogglePin>
  		  HAL_Delay(200);
 8001452:	20c8      	movs	r0, #200	; 0xc8
 8001454:	f003 fdd4 	bl	8005000 <HAL_Delay>
  		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001458:	e7f7      	b.n	800144a <main+0x5a>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  init_done();
 800145a:	f7ff fe51 	bl	8001100 <init_done>
	 	  //click button to start
	 	  printf("Waiting to start...\n");
 800145e:	4843      	ldr	r0, [pc, #268]	; (800156c <main+0x17c>)
 8001460:	f009 fa58 	bl	800a914 <puts>
	 	  while(HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin) != GPIO_PIN_RESET)
 8001464:	e006      	b.n	8001474 <main+0x84>
	 	  {
	 		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001466:	2120      	movs	r1, #32
 8001468:	483e      	ldr	r0, [pc, #248]	; (8001564 <main+0x174>)
 800146a:	f004 fbcf 	bl	8005c0c <HAL_GPIO_TogglePin>
	 		  HAL_Delay(100);
 800146e:	2064      	movs	r0, #100	; 0x64
 8001470:	f003 fdc6 	bl	8005000 <HAL_Delay>
	 	  while(HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin) != GPIO_PIN_RESET)
 8001474:	2102      	movs	r1, #2
 8001476:	483e      	ldr	r0, [pc, #248]	; (8001570 <main+0x180>)
 8001478:	f004 fb98 	bl	8005bac <HAL_GPIO_ReadPin>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f1      	bne.n	8001466 <main+0x76>
	 	  }
	 	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	2120      	movs	r1, #32
 8001486:	4837      	ldr	r0, [pc, #220]	; (8001564 <main+0x174>)
 8001488:	f004 fba8 	bl	8005bdc <HAL_GPIO_WritePin>

	 	  printf("App started...\n");
 800148c:	4839      	ldr	r0, [pc, #228]	; (8001574 <main+0x184>)
 800148e:	f009 fa41 	bl	800a914 <puts>

	 	  // app part
	 	  while(1)
	 	  {
	 		  if(get_mqtt_state() < _SUBSCRIBED_TEMP_MQTT)
 8001492:	f008 fe43 	bl	800a11c <get_mqtt_state>
 8001496:	4603      	mov	r3, r0
 8001498:	2b07      	cmp	r3, #7
 800149a:	d807      	bhi.n	80014ac <main+0xbc>
	 		  {
	 			  if(esp8266_Subscribe_Temp_BrokerMQTT() != _SUBSCRIBED_TEMP_MQTT)
 800149c:	f008 fc8a 	bl	8009db4 <esp8266_Subscribe_Temp_BrokerMQTT>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d002      	beq.n	80014ac <main+0xbc>
	 		  		printf("APP: esp8266_Subscribe_Temp_BrokerMQTT() failed\n");
 80014a6:	4834      	ldr	r0, [pc, #208]	; (8001578 <main+0x188>)
 80014a8:	f009 fa34 	bl	800a914 <puts>
	 		  }
	 		 if(get_mqtt_state() < _SUBSCRIBED_TOF_MQTT)
 80014ac:	f008 fe36 	bl	800a11c <get_mqtt_state>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d807      	bhi.n	80014c6 <main+0xd6>
			  {
				  if(esp8266_Subscribe_ToF_BrokerMQTT() != _SUBSCRIBED_TOF_MQTT)
 80014b6:	f008 fcd1 	bl	8009e5c <esp8266_Subscribe_ToF_BrokerMQTT>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b09      	cmp	r3, #9
 80014be:	d002      	beq.n	80014c6 <main+0xd6>
					printf("APP: esp8266_Subscribe_ToF_BrokerMQTT() failed\n");
 80014c0:	482e      	ldr	r0, [pc, #184]	; (800157c <main+0x18c>)
 80014c2:	f009 fa27 	bl	800a914 <puts>
			  }
	 		if(get_mqtt_state() < _SUBSCRIBED_MOTOR_MQTT)
 80014c6:	f008 fe29 	bl	800a11c <get_mqtt_state>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b0c      	cmp	r3, #12
 80014ce:	d807      	bhi.n	80014e0 <main+0xf0>
			  {
				  if(esp8266_Subscribe_Motor_BrokerMQTT() != _SUBSCRIBED_MOTOR_MQTT)
 80014d0:	f008 fdd0 	bl	800a074 <esp8266_Subscribe_Motor_BrokerMQTT>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b0d      	cmp	r3, #13
 80014d8:	d002      	beq.n	80014e0 <main+0xf0>
					printf("APP: esp8266_Subscribe_Motor_BrokerMQTT() failed\n");
 80014da:	4829      	ldr	r0, [pc, #164]	; (8001580 <main+0x190>)
 80014dc:	f009 fa1a 	bl	800a914 <puts>
			  }

	 		  switch(button_pushed)
 80014e0:	4b28      	ldr	r3, [pc, #160]	; (8001584 <main+0x194>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d002      	beq.n	80014ee <main+0xfe>
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d017      	beq.n	800151c <main+0x12c>
 80014ec:	e02a      	b.n	8001544 <main+0x154>
	 		  {
	 		  case B1:
	 		  {
	 			  char *data = formate_json_button(1);
 80014ee:	2001      	movs	r0, #1
 80014f0:	f7ff fe3c 	bl	800116c <formate_json_button>
 80014f4:	60b8      	str	r0, [r7, #8]
	 			  if(esp8266_Publish_Button_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_BUTTON_MQTT)
 80014f6:	68b8      	ldr	r0, [r7, #8]
 80014f8:	f7fe fe42 	bl	8000180 <strlen>
 80014fc:	4603      	mov	r3, r0
 80014fe:	b29b      	uxth	r3, r3
 8001500:	4619      	mov	r1, r3
 8001502:	68b8      	ldr	r0, [r7, #8]
 8001504:	f008 fcfe 	bl	8009f04 <esp8266_Publish_Button_BrokerMQTT>
 8001508:	4603      	mov	r3, r0
 800150a:	2b0a      	cmp	r3, #10
 800150c:	d002      	beq.n	8001514 <main+0x124>
	 				printf("APP: B1 esp8266_Publish_Button_BrokerMQTT() failed\n");
 800150e:	481e      	ldr	r0, [pc, #120]	; (8001588 <main+0x198>)
 8001510:	f009 fa00 	bl	800a914 <puts>
	 			  json_free_serialized_string(data);
 8001514:	68b8      	ldr	r0, [r7, #8]
 8001516:	f002 ff87 	bl	8004428 <json_free_serialized_string>
	 		  }
	 			  break;
 800151a:	e013      	b.n	8001544 <main+0x154>
	 		  case B2:
	 		  {
	 			  char *data = formate_json_button(2);
 800151c:	2002      	movs	r0, #2
 800151e:	f7ff fe25 	bl	800116c <formate_json_button>
 8001522:	60f8      	str	r0, [r7, #12]
	 			  if(esp8266_Publish_Button_BrokerMQTT((uint8_t*)data,strlen(data)) != _PUBLISH_BUTTON_MQTT)
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f7fe fe2b 	bl	8000180 <strlen>
 800152a:	4603      	mov	r3, r0
 800152c:	b29b      	uxth	r3, r3
 800152e:	4619      	mov	r1, r3
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f008 fce7 	bl	8009f04 <esp8266_Publish_Button_BrokerMQTT>
 8001536:	4603      	mov	r3, r0
 8001538:	2b0a      	cmp	r3, #10
 800153a:	d002      	beq.n	8001542 <main+0x152>
	 				printf("APP: B2 esp8266_Publish_Button_BrokerMQTT() failed\n");
 800153c:	4813      	ldr	r0, [pc, #76]	; (800158c <main+0x19c>)
 800153e:	f009 f9e9 	bl	800a914 <puts>
	 		  }
	 			  break;
 8001542:	bf00      	nop
	 		  }
	 		  button_pushed = NONE;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <main+0x194>)
 8001546:	2200      	movs	r2, #0
 8001548:	801a      	strh	r2, [r3, #0]

	 		  int sub_status = check_subscription();
 800154a:	f7ff fe77 	bl	800123c <check_subscription>
 800154e:	6078      	str	r0, [r7, #4]
	 		  if(sub_status == 0)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d19d      	bne.n	8001492 <main+0xa2>
	 			  printf("APP: check_subscription() SUB MQTT RCV\n");
 8001556:	480e      	ldr	r0, [pc, #56]	; (8001590 <main+0x1a0>)
 8001558:	f009 f9dc 	bl	800a914 <puts>
	 	  {
 800155c:	e799      	b.n	8001492 <main+0xa2>
 800155e:	bf00      	nop
 8001560:	0800d528 	.word	0x0800d528
 8001564:	48000400 	.word	0x48000400
 8001568:	0800d564 	.word	0x0800d564
 800156c:	0800d5a8 	.word	0x0800d5a8
 8001570:	48000c00 	.word	0x48000c00
 8001574:	0800d5bc 	.word	0x0800d5bc
 8001578:	0800d5cc 	.word	0x0800d5cc
 800157c:	0800d5fc 	.word	0x0800d5fc
 8001580:	0800d62c 	.word	0x0800d62c
 8001584:	20000214 	.word	0x20000214
 8001588:	0800d660 	.word	0x0800d660
 800158c:	0800d694 	.word	0x0800d694
 8001590:	0800d6c8 	.word	0x0800d6c8

08001594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b09a      	sub	sp, #104	; 0x68
 8001598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159a:	f107 0320 	add.w	r3, r7, #32
 800159e:	2248      	movs	r2, #72	; 0x48
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f009 f848 	bl	800a638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	615a      	str	r2, [r3, #20]
 80015b8:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80015ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015c8:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80015ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	f023 0303 	bic.w	r3, r3, #3
 80015d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015de:	f004 fc4b 	bl	8005e78 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f7ff fd75 	bl	80010d2 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e8:	4b24      	ldr	r3, [pc, #144]	; (800167c <SystemClock_Config+0xe8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015f0:	4a22      	ldr	r2, [pc, #136]	; (800167c <SystemClock_Config+0xe8>)
 80015f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b20      	ldr	r3, [pc, #128]	; (800167c <SystemClock_Config+0xe8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001600:	603b      	str	r3, [r7, #0]
 8001602:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001604:	2327      	movs	r3, #39	; 0x27
 8001606:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800160e:	2301      	movs	r3, #1
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001618:	2301      	movs	r3, #1
 800161a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800161c:	2340      	movs	r3, #64	; 0x40
 800161e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001620:	2300      	movs	r3, #0
 8001622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001624:	2360      	movs	r3, #96	; 0x60
 8001626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001628:	2300      	movs	r3, #0
 800162a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162c:	f107 0320 	add.w	r3, r7, #32
 8001630:	4618      	mov	r0, r3
 8001632:	f004 ffb5 	bl	80065a0 <HAL_RCC_OscConfig>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800163c:	f000 f882 	bl	8001744 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001640:	236f      	movs	r3, #111	; 0x6f
 8001642:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001644:	2302      	movs	r3, #2
 8001646:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2101      	movs	r1, #1
 8001660:	4618      	mov	r0, r3
 8001662:	f005 fb11 	bl	8006c88 <HAL_RCC_ClockConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800166c:	f000 f86a 	bl	8001744 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001670:	f006 f8cc 	bl	800780c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001674:	bf00      	nop
 8001676:	3768      	adds	r7, #104	; 0x68
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	58000400 	.word	0x58000400

08001680 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b094      	sub	sp, #80	; 0x50
 8001684:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001686:	463b      	mov	r3, r7
 8001688:	2250      	movs	r2, #80	; 0x50
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f008 ffd3 	bl	800a638 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001692:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001696:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001698:	2300      	movs	r3, #0
 800169a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800169c:	2300      	movs	r3, #0
 800169e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016a0:	463b      	mov	r3, r7
 80016a2:	4618      	mov	r0, r3
 80016a4:	f005 ff3c 	bl	8007520 <HAL_RCCEx_PeriphCLKConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80016ae:	f000 f849 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80016b2:	bf00      	nop
 80016b4:	3750      	adds	r7, #80	; 0x50
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	printf("CALLBACK LPUART\n");
 80016c4:	4803      	ldr	r0, [pc, #12]	; (80016d4 <HAL_UART_RxCpltCallback+0x18>)
 80016c6:	f009 f925 	bl	800a914 <puts>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	0800d6f0 	.word	0x0800d6f0

080016d8 <_write>:

int _write(int file, char *ptr, int len)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	e009      	b.n	80016fe <_write+0x26>
	{
	//__io_putchar(*ptr++);
	ITM_SendChar(*ptr++);
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	60ba      	str	r2, [r7, #8]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fcc6 	bl	8001084 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	429a      	cmp	r2, r3
 8001704:	dbf1      	blt.n	80016ea <_write+0x12>
	}
	return len;
 8001706:	687b      	ldr	r3, [r7, #4]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d005      	beq.n	800172c <HAL_GPIO_EXTI_Callback+0x1c>
 8001720:	2b10      	cmp	r3, #16
 8001722:	d107      	bne.n	8001734 <HAL_GPIO_EXTI_Callback+0x24>
	{
	case B1_Pin:
		button_pushed = B1;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_GPIO_EXTI_Callback+0x30>)
 8001726:	2201      	movs	r2, #1
 8001728:	801a      	strh	r2, [r3, #0]
		break;
 800172a:	e003      	b.n	8001734 <HAL_GPIO_EXTI_Callback+0x24>
	case B2_Pin:
		button_pushed = B2;
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <HAL_GPIO_EXTI_Callback+0x30>)
 800172e:	2202      	movs	r2, #2
 8001730:	801a      	strh	r2, [r3, #0]
		break;
 8001732:	bf00      	nop
	}
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	20000214 	.word	0x20000214

08001744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001748:	b672      	cpsid	i
}
 800174a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800174c:	e7fe      	b.n	800174c <Error_Handler+0x8>
	...

08001750 <serialize_int>:

static char *parson_float_format = NULL;

// +BCH
int serialize_int(double num, char *buf)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	ed87 0b02 	vstr	d0, [r7, #8]
 800175a:	6078      	str	r0, [r7, #4]
	if(buf == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <serialize_int+0x18>
		return -1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	e00a      	b.n	800177e <serialize_int+0x2e>

	return sprintf(buf,"%d",(int)num);
 8001768:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800176c:	f7ff f9cc 	bl	8000b08 <__aeabi_d2iz>
 8001770:	4603      	mov	r3, r0
 8001772:	461a      	mov	r2, r3
 8001774:	4904      	ldr	r1, [pc, #16]	; (8001788 <serialize_int+0x38>)
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f009 f8e4 	bl	800a944 <siprintf>
 800177c:	4603      	mov	r3, r0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	0800d700 	.word	0x0800d700

0800178c <parson_strndup>:
        escaped = PARSON_FALSE;
        string++;
    }
}

static char * parson_strndup(const char *string, size_t n) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
    /* We expect the caller has validated that 'n' fits within the input buffer. */
    char *output_string = (char*)parson_malloc(n + 1);
 8001796:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <parson_strndup+0x40>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	3201      	adds	r2, #1
 800179e:	4610      	mov	r0, r2
 80017a0:	4798      	blx	r3
 80017a2:	60f8      	str	r0, [r7, #12]
    if (!output_string) {
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <parson_strndup+0x22>
        return NULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	e00a      	b.n	80017c4 <parson_strndup+0x38>
    }
    output_string[n] = '\0';
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	4413      	add	r3, r2
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
    memcpy(output_string, string, n);
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f008 ff13 	bl	800a5e8 <memcpy>
    return output_string;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000008 	.word	0x20000008

080017d0 <parson_strdup>:

static char * parson_strdup(const char *string) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
    return parson_strndup(string, strlen(string));
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7fe fcd1 	bl	8000180 <strlen>
 80017de:	4603      	mov	r3, r0
 80017e0:	4619      	mov	r1, r3
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff ffd2 	bl	800178c <parson_strndup>
 80017e8:	4603      	mov	r3, r0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <hex_char_to_int>:

static int hex_char_to_int(char c) {
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	2b2f      	cmp	r3, #47	; 0x2f
 8001800:	d905      	bls.n	800180e <hex_char_to_int+0x1c>
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2b39      	cmp	r3, #57	; 0x39
 8001806:	d802      	bhi.n	800180e <hex_char_to_int+0x1c>
        return c - '0';
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	3b30      	subs	r3, #48	; 0x30
 800180c:	e013      	b.n	8001836 <hex_char_to_int+0x44>
    } else if (c >= 'a' && c <= 'f') {
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	2b60      	cmp	r3, #96	; 0x60
 8001812:	d905      	bls.n	8001820 <hex_char_to_int+0x2e>
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	2b66      	cmp	r3, #102	; 0x66
 8001818:	d802      	bhi.n	8001820 <hex_char_to_int+0x2e>
        return c - 'a' + 10;
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	3b57      	subs	r3, #87	; 0x57
 800181e:	e00a      	b.n	8001836 <hex_char_to_int+0x44>
    } else if (c >= 'A' && c <= 'F') {
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	2b40      	cmp	r3, #64	; 0x40
 8001824:	d905      	bls.n	8001832 <hex_char_to_int+0x40>
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	2b46      	cmp	r3, #70	; 0x46
 800182a:	d802      	bhi.n	8001832 <hex_char_to_int+0x40>
        return c - 'A' + 10;
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	3b37      	subs	r3, #55	; 0x37
 8001830:	e001      	b.n	8001836 <hex_char_to_int+0x44>
    }
    return -1;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <parse_utf16_hex>:

static JSON_Status parse_utf16_hex(const char *s, unsigned int *result) {
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
    int x1, x2, x3, x4;
    if (s[0] == '\0' || s[1] == '\0' || s[2] == '\0' || s[3] == '\0') {
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00e      	beq.n	8001872 <parse_utf16_hex+0x30>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3301      	adds	r3, #1
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d009      	beq.n	8001872 <parse_utf16_hex+0x30>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3302      	adds	r3, #2
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d004      	beq.n	8001872 <parse_utf16_hex+0x30>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3303      	adds	r3, #3
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d102      	bne.n	8001878 <parse_utf16_hex+0x36>
        return JSONFailure;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	e03b      	b.n	80018f0 <parse_utf16_hex+0xae>
    }
    x1 = hex_char_to_int(s[0]);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ffb8 	bl	80017f2 <hex_char_to_int>
 8001882:	6178      	str	r0, [r7, #20]
    x2 = hex_char_to_int(s[1]);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3301      	adds	r3, #1
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ffb1 	bl	80017f2 <hex_char_to_int>
 8001890:	6138      	str	r0, [r7, #16]
    x3 = hex_char_to_int(s[2]);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3302      	adds	r3, #2
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ffaa 	bl	80017f2 <hex_char_to_int>
 800189e:	60f8      	str	r0, [r7, #12]
    x4 = hex_char_to_int(s[3]);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3303      	adds	r3, #3
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff ffa3 	bl	80017f2 <hex_char_to_int>
 80018ac:	60b8      	str	r0, [r7, #8]
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b4:	d00b      	beq.n	80018ce <parse_utf16_hex+0x8c>
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018bc:	d007      	beq.n	80018ce <parse_utf16_hex+0x8c>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c4:	d003      	beq.n	80018ce <parse_utf16_hex+0x8c>
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018cc:	d102      	bne.n	80018d4 <parse_utf16_hex+0x92>
        return JSONFailure;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	e00d      	b.n	80018f0 <parse_utf16_hex+0xae>
    }
    *result = (unsigned int)((x1 << 12) | (x2 << 8) | (x3 << 4) | x4);
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	031a      	lsls	r2, r3, #12
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	431a      	orrs	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	431a      	orrs	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	461a      	mov	r2, r3
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <is_decimal>:
        string += len;
    }
    return PARSON_TRUE;
}

static parson_bool_t is_decimal(const char *string, size_t length) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
    if (length > 1 && string[0] == '0' && string[1] != '.') {
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d90a      	bls.n	800191e <is_decimal+0x26>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b30      	cmp	r3, #48	; 0x30
 800190e:	d106      	bne.n	800191e <is_decimal+0x26>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3301      	adds	r3, #1
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b2e      	cmp	r3, #46	; 0x2e
 8001918:	d001      	beq.n	800191e <is_decimal+0x26>
        return PARSON_FALSE;
 800191a:	2300      	movs	r3, #0
 800191c:	e024      	b.n	8001968 <is_decimal+0x70>
    }
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.') {
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d91b      	bls.n	800195c <is_decimal+0x64>
 8001924:	2202      	movs	r2, #2
 8001926:	4912      	ldr	r1, [pc, #72]	; (8001970 <is_decimal+0x78>)
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f009 f87b 	bl	800aa24 <strncmp>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d113      	bne.n	800195c <is_decimal+0x64>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3302      	adds	r3, #2
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b2e      	cmp	r3, #46	; 0x2e
 800193c:	d00e      	beq.n	800195c <is_decimal+0x64>
        return PARSON_FALSE;
 800193e:	2300      	movs	r3, #0
 8001940:	e012      	b.n	8001968 <is_decimal+0x70>
    }
    while (length--) {
        if (strchr("xX", string[length])) {
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	4413      	add	r3, r2
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	4619      	mov	r1, r3
 800194c:	4809      	ldr	r0, [pc, #36]	; (8001974 <is_decimal+0x7c>)
 800194e:	f009 f85c 	bl	800aa0a <strchr>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <is_decimal+0x64>
            return PARSON_FALSE;
 8001958:	2300      	movs	r3, #0
 800195a:	e005      	b.n	8001968 <is_decimal+0x70>
    while (length--) {
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	1e5a      	subs	r2, r3, #1
 8001960:	603a      	str	r2, [r7, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1ed      	bne.n	8001942 <is_decimal+0x4a>
        }
    }
    return PARSON_TRUE;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	0800d708 	.word	0x0800d708
 8001974:	0800d70c 	.word	0x0800d70c

08001978 <hash_string>:

static unsigned long hash_string(const char *string, size_t n) {
 8001978:	b480      	push	{r7}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
#ifdef PARSON_FORCE_HASH_COLLISIONS
    (void)string;
    (void)n;
    return 0;
#else
    unsigned long hash = 5381;
 8001982:	f241 5305 	movw	r3, #5381	; 0x1505
 8001986:	617b      	str	r3, [r7, #20]
    unsigned char c;
    size_t i = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	613b      	str	r3, [r7, #16]
    for (i = 0; i < n; i++) {
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	e011      	b.n	80019b6 <hash_string+0x3e>
        c = string[i];
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4413      	add	r3, r2
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	73fb      	strb	r3, [r7, #15]
        if (c == '\0') {
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00e      	beq.n	80019c0 <hash_string+0x48>
            break;
        }
        hash = ((hash << 5) + hash) + c; /* hash * 33 + c */
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	015a      	lsls	r2, r3, #5
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	441a      	add	r2, r3
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	4413      	add	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]
    for (i = 0; i < n; i++) {
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	3301      	adds	r3, #1
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d3e9      	bcc.n	8001992 <hash_string+0x1a>
 80019be:	e000      	b.n	80019c2 <hash_string+0x4a>
            break;
 80019c0:	bf00      	nop
    }
    return hash;
 80019c2:	697b      	ldr	r3, [r7, #20]
#endif
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	371c      	adds	r7, #28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <json_object_make>:

/* JSON Object */
static JSON_Object * json_object_make(JSON_Value *wrapping_value) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
    JSON_Status res = JSONFailure;
 80019d8:	f04f 33ff 	mov.w	r3, #4294967295
 80019dc:	60fb      	str	r3, [r7, #12]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <json_object_make+0x50>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2024      	movs	r0, #36	; 0x24
 80019e4:	4798      	blx	r3
 80019e6:	60b8      	str	r0, [r7, #8]
    if (new_obj == NULL) {
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <json_object_make+0x22>
        return NULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	e011      	b.n	8001a16 <json_object_make+0x46>
    }
    new_obj->wrapping_value = wrapping_value;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	601a      	str	r2, [r3, #0]
    res = json_object_init(new_obj, 0);
 80019f8:	2100      	movs	r1, #0
 80019fa:	68b8      	ldr	r0, [r7, #8]
 80019fc:	f000 f814 	bl	8001a28 <json_object_init>
 8001a00:	60f8      	str	r0, [r7, #12]
    if (res != JSONSuccess) {
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <json_object_make+0x44>
        parson_free(new_obj);
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <json_object_make+0x54>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68b8      	ldr	r0, [r7, #8]
 8001a0e:	4798      	blx	r3
        return NULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	e000      	b.n	8001a16 <json_object_make+0x46>
    }
    return new_obj;
 8001a14:	68bb      	ldr	r3, [r7, #8]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000008 	.word	0x20000008
 8001a24:	2000000c 	.word	0x2000000c

08001a28 <json_object_init>:

static JSON_Status json_object_init(JSON_Object *object, size_t capacity) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
    unsigned int i = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]

    object->cells = NULL;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	605a      	str	r2, [r3, #4]
    object->names = NULL;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
    object->values = NULL;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
    object->cell_ixs = NULL;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	615a      	str	r2, [r3, #20]
    object->hashes = NULL;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]

    object->count = 0;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
    object->cell_capacity = capacity;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	621a      	str	r2, [r3, #32]
    object->item_capacity = (unsigned int)(capacity * 0.7f);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	ee07 3a90 	vmov	s15, r3
 8001a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a6a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001b88 <json_object_init+0x160>
 8001a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a76:	ee17 2a90 	vmov	r2, s15
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	61da      	str	r2, [r3, #28]

    if (capacity == 0) {
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <json_object_init+0x60>
        return JSONSuccess;
 8001a84:	2300      	movs	r3, #0
 8001a86:	e07b      	b.n	8001b80 <json_object_init+0x158>
    }

    object->cells = (size_t*)parson_malloc(object->cell_capacity * sizeof(*object->cells));
 8001a88:	4b40      	ldr	r3, [pc, #256]	; (8001b8c <json_object_init+0x164>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6a12      	ldr	r2, [r2, #32]
 8001a90:	0092      	lsls	r2, r2, #2
 8001a92:	4610      	mov	r0, r2
 8001a94:	4798      	blx	r3
 8001a96:	4602      	mov	r2, r0
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	605a      	str	r2, [r3, #4]
    object->names = (char**)parson_malloc(object->item_capacity * sizeof(*object->names));
 8001a9c:	4b3b      	ldr	r3, [pc, #236]	; (8001b8c <json_object_init+0x164>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	69d2      	ldr	r2, [r2, #28]
 8001aa4:	0092      	lsls	r2, r2, #2
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4798      	blx	r3
 8001aaa:	4602      	mov	r2, r0
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	60da      	str	r2, [r3, #12]
    object->values = (JSON_Value**)parson_malloc(object->item_capacity * sizeof(*object->values));
 8001ab0:	4b36      	ldr	r3, [pc, #216]	; (8001b8c <json_object_init+0x164>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	69d2      	ldr	r2, [r2, #28]
 8001ab8:	0092      	lsls	r2, r2, #2
 8001aba:	4610      	mov	r0, r2
 8001abc:	4798      	blx	r3
 8001abe:	4602      	mov	r2, r0
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	611a      	str	r2, [r3, #16]
    object->cell_ixs = (size_t*)parson_malloc(object->item_capacity * sizeof(*object->cell_ixs));
 8001ac4:	4b31      	ldr	r3, [pc, #196]	; (8001b8c <json_object_init+0x164>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	69d2      	ldr	r2, [r2, #28]
 8001acc:	0092      	lsls	r2, r2, #2
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4798      	blx	r3
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	615a      	str	r2, [r3, #20]
    object->hashes = (unsigned long*)parson_malloc(object->item_capacity * sizeof(*object->hashes));
 8001ad8:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <json_object_init+0x164>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	69d2      	ldr	r2, [r2, #28]
 8001ae0:	0092      	lsls	r2, r2, #2
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4798      	blx	r3
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	609a      	str	r2, [r3, #8]
    if (object->cells == NULL
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d024      	beq.n	8001b3e <json_object_init+0x116>
        || object->names == NULL
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d020      	beq.n	8001b3e <json_object_init+0x116>
        || object->values == NULL
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d01c      	beq.n	8001b3e <json_object_init+0x116>
        || object->cell_ixs == NULL
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d018      	beq.n	8001b3e <json_object_init+0x116>
        || object->hashes == NULL) {
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d014      	beq.n	8001b3e <json_object_init+0x116>
        goto error;
    }
    for (i = 0; i < object->cell_capacity; i++) {
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	e00a      	b.n	8001b30 <json_object_init+0x108>
        object->cells[i] = OBJECT_INVALID_IX;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	f04f 32ff 	mov.w	r2, #4294967295
 8001b28:	601a      	str	r2, [r3, #0]
    for (i = 0; i < object->cell_capacity; i++) {
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d3ef      	bcc.n	8001b1a <json_object_init+0xf2>
    }
    return JSONSuccess;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e020      	b.n	8001b80 <json_object_init+0x158>
        goto error;
 8001b3e:	bf00      	nop
error:
    parson_free(object->cells);
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <json_object_init+0x168>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6852      	ldr	r2, [r2, #4]
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4798      	blx	r3
    parson_free(object->names);
 8001b4c:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <json_object_init+0x168>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	68d2      	ldr	r2, [r2, #12]
 8001b54:	4610      	mov	r0, r2
 8001b56:	4798      	blx	r3
    parson_free(object->values);
 8001b58:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <json_object_init+0x168>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6912      	ldr	r2, [r2, #16]
 8001b60:	4610      	mov	r0, r2
 8001b62:	4798      	blx	r3
    parson_free(object->cell_ixs);
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <json_object_init+0x168>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6952      	ldr	r2, [r2, #20]
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4798      	blx	r3
    parson_free(object->hashes);
 8001b70:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <json_object_init+0x168>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6892      	ldr	r2, [r2, #8]
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4798      	blx	r3
    return JSONFailure;
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	3f333333 	.word	0x3f333333
 8001b8c:	20000008 	.word	0x20000008
 8001b90:	2000000c 	.word	0x2000000c

08001b94 <json_object_deinit>:

static void json_object_deinit(JSON_Object *object, parson_bool_t free_keys, parson_bool_t free_values) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
    unsigned int i = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
    for (i = 0; i < object->count; i++) {
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	e01b      	b.n	8001be2 <json_object_deinit+0x4e>
        if (free_keys) {
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d009      	beq.n	8001bc4 <json_object_deinit+0x30>
            parson_free(object->names[i]);
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <json_object_deinit+0xcc>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	68d1      	ldr	r1, [r2, #12]
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	440a      	add	r2, r1
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4798      	blx	r3
        }
        if (free_values) {
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d008      	beq.n	8001bdc <json_object_deinit+0x48>
            json_value_free(object->values[i]);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f002 fa9a 	bl	8004110 <json_value_free>
    for (i = 0; i < object->count; i++) {
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	3301      	adds	r3, #1
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d3de      	bcc.n	8001baa <json_object_deinit+0x16>
        }
    }

    object->count = 0;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	619a      	str	r2, [r3, #24]
    object->item_capacity = 0;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	61da      	str	r2, [r3, #28]
    object->cell_capacity = 0;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	621a      	str	r2, [r3, #32]

    parson_free(object->cells);
 8001bfe:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <json_object_deinit+0xcc>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	6852      	ldr	r2, [r2, #4]
 8001c06:	4610      	mov	r0, r2
 8001c08:	4798      	blx	r3
    parson_free(object->names);
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <json_object_deinit+0xcc>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	68d2      	ldr	r2, [r2, #12]
 8001c12:	4610      	mov	r0, r2
 8001c14:	4798      	blx	r3
    parson_free(object->values);
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <json_object_deinit+0xcc>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	6912      	ldr	r2, [r2, #16]
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4798      	blx	r3
    parson_free(object->cell_ixs);
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <json_object_deinit+0xcc>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	6952      	ldr	r2, [r2, #20]
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4798      	blx	r3
    parson_free(object->hashes);
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <json_object_deinit+0xcc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	6892      	ldr	r2, [r2, #8]
 8001c36:	4610      	mov	r0, r2
 8001c38:	4798      	blx	r3

    object->cells = NULL;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	605a      	str	r2, [r3, #4]
    object->names = NULL;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	60da      	str	r2, [r3, #12]
    object->values = NULL;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]
    object->cell_ixs = NULL;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	615a      	str	r2, [r3, #20]
    object->hashes = NULL;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
}
 8001c58:	bf00      	nop
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	2000000c 	.word	0x2000000c

08001c64 <json_object_grow_and_rehash>:

static JSON_Status json_object_grow_and_rehash(JSON_Object *object) {
 8001c64:	b5b0      	push	{r4, r5, r7, lr}
 8001c66:	b092      	sub	sp, #72	; 0x48
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
    JSON_Value *wrapping_value = NULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	643b      	str	r3, [r7, #64]	; 0x40
    JSON_Object new_object;
    char *key = NULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	63fb      	str	r3, [r7, #60]	; 0x3c
    JSON_Value *value = NULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	63bb      	str	r3, [r7, #56]	; 0x38
    unsigned int i = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	647b      	str	r3, [r7, #68]	; 0x44
    size_t new_capacity = MAX(object->cell_capacity * 2, STARTING_CAPACITY);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2b10      	cmp	r3, #16
 8001c84:	bf38      	it	cc
 8001c86:	2310      	movcc	r3, #16
 8001c88:	637b      	str	r3, [r7, #52]	; 0x34
    JSON_Status res = json_object_init(&new_object, new_capacity);
 8001c8a:	f107 030c 	add.w	r3, r7, #12
 8001c8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fec9 	bl	8001a28 <json_object_init>
 8001c96:	6338      	str	r0, [r7, #48]	; 0x30
    if (res != JSONSuccess) {
 8001c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <json_object_grow_and_rehash+0x40>
        return JSONFailure;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca2:	e046      	b.n	8001d32 <json_object_grow_and_rehash+0xce>
    }

    wrapping_value = json_object_get_wrapping_value(object);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f002 f949 	bl	8003f3c <json_object_get_wrapping_value>
 8001caa:	6438      	str	r0, [r7, #64]	; 0x40
    new_object.wrapping_value = wrapping_value;
 8001cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cae:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < object->count; i++) {
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	647b      	str	r3, [r7, #68]	; 0x44
 8001cb4:	e028      	b.n	8001d08 <json_object_grow_and_rehash+0xa4>
        key = object->names[i];
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        value = object->values[i];
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	63bb      	str	r3, [r7, #56]	; 0x38
        res = json_object_add(&new_object, key, value);
 8001cd2:	f107 030c 	add.w	r3, r7, #12
 8001cd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 f897 	bl	8001e0e <json_object_add>
 8001ce0:	6338      	str	r0, [r7, #48]	; 0x30
        if (res != JSONSuccess) {
 8001ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d009      	beq.n	8001cfc <json_object_grow_and_rehash+0x98>
            json_object_deinit(&new_object, PARSON_FALSE, PARSON_FALSE);
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	2200      	movs	r2, #0
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff4f 	bl	8001b94 <json_object_deinit>
            return JSONFailure;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfa:	e01a      	b.n	8001d32 <json_object_grow_and_rehash+0xce>
        }
        value->parent = wrapping_value;
 8001cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d00:	601a      	str	r2, [r3, #0]
    for (i = 0; i < object->count; i++) {
 8001d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d04:	3301      	adds	r3, #1
 8001d06:	647b      	str	r3, [r7, #68]	; 0x44
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d3d1      	bcc.n	8001cb6 <json_object_grow_and_rehash+0x52>
    }
    json_object_deinit(object, PARSON_FALSE, PARSON_FALSE);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ff3c 	bl	8001b94 <json_object_deinit>
    *object = new_object;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	461d      	mov	r5, r3
 8001d20:	f107 040c 	add.w	r4, r7, #12
 8001d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2c:	6823      	ldr	r3, [r4, #0]
 8001d2e:	602b      	str	r3, [r5, #0]
    return JSONSuccess;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3748      	adds	r7, #72	; 0x48
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bdb0      	pop	{r4, r5, r7, pc}

08001d3a <json_object_get_cell_ix>:

static size_t json_object_get_cell_ix(const JSON_Object *object, const char *key, size_t key_len, unsigned long hash, parson_bool_t *out_found) {
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b08c      	sub	sp, #48	; 0x30
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	603b      	str	r3, [r7, #0]
    size_t cell_ix = hash & (object->cell_capacity - 1);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	4013      	ands	r3, r2
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t cell = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
    size_t ix = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	623b      	str	r3, [r7, #32]
    unsigned int i = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    unsigned long hash_to_check = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
    const char *key_to_check = NULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61bb      	str	r3, [r7, #24]
    size_t key_to_check_len = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]

    *out_found = PARSON_FALSE;
 8001d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]

    for (i = 0; i < object->cell_capacity; i++) {
 8001d72:	2300      	movs	r3, #0
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d76:	e03f      	b.n	8001df8 <json_object_get_cell_ix+0xbe>
        ix = (cell_ix + i) & (object->cell_capacity - 1);
 8001d78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7c:	441a      	add	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	4013      	ands	r3, r2
 8001d86:	623b      	str	r3, [r7, #32]
        cell = object->cells[ix];
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
        if (cell == OBJECT_INVALID_IX) {
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9c:	d101      	bne.n	8001da2 <json_object_get_cell_ix+0x68>
            return ix;
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	e031      	b.n	8001e06 <json_object_get_cell_ix+0xcc>
        }
        hash_to_check = object->hashes[cell];
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	61fb      	str	r3, [r7, #28]
        if (hash != hash_to_check) {
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d11b      	bne.n	8001df0 <json_object_get_cell_ix+0xb6>
            continue;
        }
        key_to_check = object->names[cell];
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	61bb      	str	r3, [r7, #24]
        key_to_check_len = strlen(key_to_check);
 8001dc6:	69b8      	ldr	r0, [r7, #24]
 8001dc8:	f7fe f9da 	bl	8000180 <strlen>
 8001dcc:	6178      	str	r0, [r7, #20]
        if (key_to_check_len == key_len && strncmp(key, key_to_check, key_len) == 0) {
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d10d      	bne.n	8001df2 <json_object_get_cell_ix+0xb8>
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	69b9      	ldr	r1, [r7, #24]
 8001dda:	68b8      	ldr	r0, [r7, #8]
 8001ddc:	f008 fe22 	bl	800aa24 <strncmp>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d105      	bne.n	8001df2 <json_object_get_cell_ix+0xb8>
            *out_found = PARSON_TRUE;
 8001de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001de8:	2201      	movs	r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
            return ix;
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	e00a      	b.n	8001e06 <json_object_get_cell_ix+0xcc>
            continue;
 8001df0:	bf00      	nop
    for (i = 0; i < object->cell_capacity; i++) {
 8001df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df4:	3301      	adds	r3, #1
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d3ba      	bcc.n	8001d78 <json_object_get_cell_ix+0x3e>
        }
    }
    return OBJECT_INVALID_IX;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3730      	adds	r7, #48	; 0x30
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <json_object_add>:

static JSON_Status json_object_add(JSON_Object *object, char *name, JSON_Value *value) {
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b08a      	sub	sp, #40	; 0x28
 8001e12:	af02      	add	r7, sp, #8
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
    parson_bool_t found = PARSON_FALSE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
    size_t cell_ix = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
    JSON_Status res = JSONFailure;
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2a:	617b      	str	r3, [r7, #20]

    if (!object || !name || !value) {
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <json_object_add+0x30>
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <json_object_add+0x30>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d102      	bne.n	8001e44 <json_object_add+0x36>
        return JSONFailure;
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e42:	e06e      	b.n	8001f22 <json_object_add+0x114>
    }

    hash = hash_string(name, strlen(name));
 8001e44:	68b8      	ldr	r0, [r7, #8]
 8001e46:	f7fe f99b 	bl	8000180 <strlen>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	68b8      	ldr	r0, [r7, #8]
 8001e50:	f7ff fd92 	bl	8001978 <hash_string>
 8001e54:	61b8      	str	r0, [r7, #24]
    found = PARSON_FALSE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
    cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 8001e5a:	68b8      	ldr	r0, [r7, #8]
 8001e5c:	f7fe f990 	bl	8000180 <strlen>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f107 0310 	add.w	r3, r7, #16
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	68b9      	ldr	r1, [r7, #8]
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f7ff ff64 	bl	8001d3a <json_object_get_cell_ix>
 8001e72:	61f8      	str	r0, [r7, #28]
    if (found) {
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <json_object_add+0x72>
        return JSONFailure;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	e050      	b.n	8001f22 <json_object_add+0x114>
    }

    if (object->count >= object->item_capacity) {
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	699a      	ldr	r2, [r3, #24]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d316      	bcc.n	8001eba <json_object_add+0xac>
        res = json_object_grow_and_rehash(object);
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f7ff fee9 	bl	8001c64 <json_object_grow_and_rehash>
 8001e92:	6178      	str	r0, [r7, #20]
        if (res != JSONSuccess) {
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d002      	beq.n	8001ea0 <json_object_add+0x92>
            return JSONFailure;
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9e:	e040      	b.n	8001f22 <json_object_add+0x114>
        }
        cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 8001ea0:	68b8      	ldr	r0, [r7, #8]
 8001ea2:	f7fe f96d 	bl	8000180 <strlen>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	f107 0310 	add.w	r3, r7, #16
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f7ff ff41 	bl	8001d3a <json_object_get_cell_ix>
 8001eb8:	61f8      	str	r0, [r7, #28]
    }

    object->names[object->count] = name;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	601a      	str	r2, [r3, #0]
    object->cells[cell_ix] = object->count;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	6992      	ldr	r2, [r2, #24]
 8001ed8:	601a      	str	r2, [r3, #0]
    object->values[object->count] = value;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	691a      	ldr	r2, [r3, #16]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	601a      	str	r2, [r3, #0]
    object->cell_ixs[object->count] = cell_ix;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	695a      	ldr	r2, [r3, #20]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	601a      	str	r2, [r3, #0]
    object->hashes[object->count] = hash;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	601a      	str	r2, [r3, #0]
    object->count++;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	619a      	str	r2, [r3, #24]
    value->parent = json_object_get_wrapping_value(object);
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f002 f811 	bl	8003f3c <json_object_get_wrapping_value>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	601a      	str	r2, [r3, #0]

    return JSONSuccess;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3720      	adds	r7, #32
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <json_object_getn_value>:

static JSON_Value * json_object_getn_value(const JSON_Object *object, const char *name, size_t name_len) {
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b08a      	sub	sp, #40	; 0x28
 8001f2e:	af02      	add	r7, sp, #8
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
    parson_bool_t found = PARSON_FALSE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
    size_t cell_ix = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
    size_t item_ix = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
    if (!object || !name) {
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <json_object_getn_value+0x28>
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <json_object_getn_value+0x2c>
        return NULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e022      	b.n	8001f9c <json_object_getn_value+0x72>
    }
    hash = hash_string(name, name_len);
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	68b8      	ldr	r0, [r7, #8]
 8001f5a:	f7ff fd0d 	bl	8001978 <hash_string>
 8001f5e:	61f8      	str	r0, [r7, #28]
    found = PARSON_FALSE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	613b      	str	r3, [r7, #16]
    cell_ix = json_object_get_cell_ix(object, name, name_len, hash, &found);
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	68b9      	ldr	r1, [r7, #8]
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f7ff fee2 	bl	8001d3a <json_object_get_cell_ix>
 8001f76:	61b8      	str	r0, [r7, #24]
    if (!found) {
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <json_object_getn_value+0x58>
        return NULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e00c      	b.n	8001f9c <json_object_getn_value+0x72>
    }
    item_ix = object->cells[cell_ix];
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	617b      	str	r3, [r7, #20]
    return object->values[item_ix];
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	681b      	ldr	r3, [r3, #0]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3720      	adds	r7, #32
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <json_object_free>:
    }
    temp_object = json_value_get_object(temp_value);
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
}

static void json_object_free(JSON_Object *object) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
    json_object_deinit(object, PARSON_TRUE, PARSON_TRUE);
 8001fac:	2201      	movs	r2, #1
 8001fae:	2101      	movs	r1, #1
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff fdef 	bl	8001b94 <json_object_deinit>
    parson_free(object);
 8001fb6:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <json_object_free+0x24>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	4798      	blx	r3
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	2000000c 	.word	0x2000000c

08001fcc <json_array_make>:

/* JSON Array */
static JSON_Array * json_array_make(JSON_Value *wrapping_value) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
    JSON_Array *new_array = (JSON_Array*)parson_malloc(sizeof(JSON_Array));
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	; (800200c <json_array_make+0x40>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2010      	movs	r0, #16
 8001fda:	4798      	blx	r3
 8001fdc:	60f8      	str	r0, [r7, #12]
    if (new_array == NULL) {
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <json_array_make+0x1c>
        return NULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e00c      	b.n	8002002 <json_array_make+0x36>
    }
    new_array->wrapping_value = wrapping_value;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	601a      	str	r2, [r3, #0]
    new_array->items = (JSON_Value**)NULL;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	605a      	str	r2, [r3, #4]
    new_array->capacity = 0;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
    new_array->count = 0;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
    return new_array;
 8002000:	68fb      	ldr	r3, [r7, #12]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000008 	.word	0x20000008

08002010 <json_array_add>:

static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
    if (array->count >= array->capacity) {
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	429a      	cmp	r2, r3
 8002024:	d310      	bcc.n	8002048 <json_array_add+0x38>
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	2b10      	cmp	r3, #16
 800202e:	bf38      	it	cc
 8002030:	2310      	movcc	r3, #16
 8002032:	60fb      	str	r3, [r7, #12]
        if (json_array_resize(array, new_capacity) != JSONSuccess) {
 8002034:	68f9      	ldr	r1, [r7, #12]
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f81e 	bl	8002078 <json_array_resize>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d002      	beq.n	8002048 <json_array_add+0x38>
            return JSONFailure;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
 8002046:	e013      	b.n	8002070 <json_array_add+0x60>
        }
    }
    value->parent = json_array_get_wrapping_value(array);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f001 ffb4 	bl	8003fb6 <json_array_get_wrapping_value>
 800204e:	4602      	mov	r2, r0
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	601a      	str	r2, [r3, #0]
    array->items[array->count] = value;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	601a      	str	r2, [r3, #0]
    array->count++;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	609a      	str	r2, [r3, #8]
    return JSONSuccess;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <json_array_resize>:

static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
    JSON_Value **new_items = NULL;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
    if (new_capacity == 0) {
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d102      	bne.n	8002092 <json_array_resize+0x1a>
        return JSONFailure;
 800208c:	f04f 33ff 	mov.w	r3, #4294967295
 8002090:	e02a      	b.n	80020e8 <json_array_resize+0x70>
    }
    new_items = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 8002092:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <json_array_resize+0x78>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	0092      	lsls	r2, r2, #2
 800209a:	4610      	mov	r0, r2
 800209c:	4798      	blx	r3
 800209e:	60f8      	str	r0, [r7, #12]
    if (new_items == NULL) {
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d102      	bne.n	80020ac <json_array_resize+0x34>
        return JSONFailure;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
 80020aa:	e01d      	b.n	80020e8 <json_array_resize+0x70>
    }
    if (array->items != NULL && array->count > 0) {
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00c      	beq.n	80020ce <json_array_resize+0x56>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d008      	beq.n	80020ce <json_array_resize+0x56>
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6859      	ldr	r1, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	461a      	mov	r2, r3
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f008 fa8d 	bl	800a5e8 <memcpy>
    }
    parson_free(array->items);
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <json_array_resize+0x7c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6852      	ldr	r2, [r2, #4]
 80020d6:	4610      	mov	r0, r2
 80020d8:	4798      	blx	r3
    array->items = new_items;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	605a      	str	r2, [r3, #4]
    array->capacity = new_capacity;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000008 	.word	0x20000008
 80020f4:	2000000c 	.word	0x2000000c

080020f8 <json_array_free>:

static void json_array_free(JSON_Array *array) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < array->count; i++) {
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	e00b      	b.n	800211e <json_array_free+0x26>
        json_value_free(array->items[i]);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f001 fffc 	bl	8004110 <json_value_free>
    for (i = 0; i < array->count; i++) {
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	3301      	adds	r3, #1
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	429a      	cmp	r2, r3
 8002126:	d3ee      	bcc.n	8002106 <json_array_free+0xe>
    }
    parson_free(array->items);
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <json_array_free+0x4c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6852      	ldr	r2, [r2, #4]
 8002130:	4610      	mov	r0, r2
 8002132:	4798      	blx	r3
    parson_free(array);
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <json_array_free+0x4c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	4798      	blx	r3
}
 800213c:	bf00      	nop
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	2000000c 	.word	0x2000000c

08002148 <json_value_init_string_no_copy>:

/* JSON Value */
static JSON_Value * json_value_init_string_no_copy(char *string, size_t length) {
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8002152:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <json_value_init_string_no_copy+0x40>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2010      	movs	r0, #16
 8002158:	4798      	blx	r3
 800215a:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <json_value_init_string_no_copy+0x1e>
        return NULL;
 8002162:	2300      	movs	r3, #0
 8002164:	e00c      	b.n	8002180 <json_value_init_string_no_copy+0x38>
    }
    new_value->parent = NULL;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
    new_value->type = JSONString;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2202      	movs	r2, #2
 8002170:	605a      	str	r2, [r3, #4]
    new_value->value.string.chars = string;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	609a      	str	r2, [r3, #8]
    new_value->value.string.length = length;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	60da      	str	r2, [r3, #12]
    return new_value;
 800217e:	68fb      	ldr	r3, [r7, #12]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000008 	.word	0x20000008

0800218c <skip_quotes>:

/* Parser */
static JSON_Status skip_quotes(const char **string) {
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
    if (**string != '\"') {
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b22      	cmp	r3, #34	; 0x22
 800219c:	d002      	beq.n	80021a4 <skip_quotes+0x18>
        return JSONFailure;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
 80021a2:	e02f      	b.n	8002204 <skip_quotes+0x78>
    }
    SKIP_CHAR(string);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 80021ae:	e01e      	b.n	80021ee <skip_quotes+0x62>
        if (**string == '\0') {
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d102      	bne.n	80021c0 <skip_quotes+0x34>
            return JSONFailure;
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295
 80021be:	e021      	b.n	8002204 <skip_quotes+0x78>
        } else if (**string == '\\') {
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b5c      	cmp	r3, #92	; 0x5c
 80021c8:	d10c      	bne.n	80021e4 <skip_quotes+0x58>
            SKIP_CHAR(string);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	601a      	str	r2, [r3, #0]
            if (**string == '\0') {
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d102      	bne.n	80021e4 <skip_quotes+0x58>
                return JSONFailure;
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
 80021e2:	e00f      	b.n	8002204 <skip_quotes+0x78>
            }
        }
        SKIP_CHAR(string);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b22      	cmp	r3, #34	; 0x22
 80021f6:	d1db      	bne.n	80021b0 <skip_quotes+0x24>
    }
    SKIP_CHAR(string);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <parse_utf16>:

static JSON_Status parse_utf16(const char **unprocessed, char **processed) {
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
    unsigned int cp, lead, trail;
    char *processed_ptr = *processed;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	61fb      	str	r3, [r7, #28]
    const char *unprocessed_ptr = *unprocessed;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	61bb      	str	r3, [r7, #24]
    JSON_Status status = JSONFailure;
 8002226:	f04f 33ff 	mov.w	r3, #4294967295
 800222a:	617b      	str	r3, [r7, #20]
    unprocessed_ptr++; /* skips u */
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	3301      	adds	r3, #1
 8002230:	61bb      	str	r3, [r7, #24]
    status = parse_utf16_hex(unprocessed_ptr, &cp);
 8002232:	f107 030c 	add.w	r3, r7, #12
 8002236:	4619      	mov	r1, r3
 8002238:	69b8      	ldr	r0, [r7, #24]
 800223a:	f7ff fb02 	bl	8001842 <parse_utf16_hex>
 800223e:	6178      	str	r0, [r7, #20]
    if (status != JSONSuccess) {
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <parse_utf16+0x3c>
        return JSONFailure;
 8002246:	f04f 33ff 	mov.w	r3, #4294967295
 800224a:	e0ce      	b.n	80023ea <parse_utf16+0x1da>
    }
    if (cp < 0x80) {
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b7f      	cmp	r3, #127	; 0x7f
 8002250:	d804      	bhi.n	800225c <parse_utf16+0x4c>
        processed_ptr[0] = (char)cp; /* 0xxxxxxx */
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	b2da      	uxtb	r2, r3
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	701a      	strb	r2, [r3, #0]
 800225a:	e0bc      	b.n	80023d6 <parse_utf16+0x1c6>
    } else if (cp < 0x800) {
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002262:	d219      	bcs.n	8002298 <parse_utf16+0x88>
        processed_ptr[0] = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	099b      	lsrs	r3, r3, #6
 8002268:	b2db      	uxtb	r3, r3
 800226a:	f003 031f 	and.w	r3, r3, #31
 800226e:	b2db      	uxtb	r3, r3
 8002270:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002274:	b2da      	uxtb	r2, r3
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp)      & 0x3F) | 0x80; /* 10xxxxxx */
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002282:	b2da      	uxtb	r2, r3
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	3301      	adds	r3, #1
 8002288:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	701a      	strb	r2, [r3, #0]
        processed_ptr += 1;
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	3301      	adds	r3, #1
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	e09e      	b.n	80023d6 <parse_utf16+0x1c6>
    } else if (cp < 0xD800 || cp > 0xDFFF) {
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800229e:	d303      	bcc.n	80022a8 <parse_utf16+0x98>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80022a6:	d325      	bcc.n	80022f4 <parse_utf16+0xe4>
        processed_ptr[0] = ((cp >> 12) & 0x0F) | 0xE0; /* 1110xxxx */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	0b1b      	lsrs	r3, r3, #12
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	f063 031f 	orn	r3, r3, #31
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	099b      	lsrs	r3, r3, #6
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3301      	adds	r3, #1
 80022ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = ((cp)       & 0x3F) | 0x80; /* 10xxxxxx */
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	3302      	adds	r3, #2
 80022e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	701a      	strb	r2, [r3, #0]
        processed_ptr += 2;
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	3302      	adds	r3, #2
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	e070      	b.n	80023d6 <parse_utf16+0x1c6>
    } else if (cp >= 0xD800 && cp <= 0xDBFF) { /* lead surrogate (0xD800..0xDBFF) */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80022fa:	d369      	bcc.n	80023d0 <parse_utf16+0x1c0>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8002302:	d265      	bcs.n	80023d0 <parse_utf16+0x1c0>
        lead = cp;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	613b      	str	r3, [r7, #16]
        unprocessed_ptr += 4; /* should always be within the buffer, otherwise previous sscanf would fail */
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	3304      	adds	r3, #4
 800230c:	61bb      	str	r3, [r7, #24]
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u') {
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	61ba      	str	r2, [r7, #24]
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b5c      	cmp	r3, #92	; 0x5c
 8002318:	d105      	bne.n	8002326 <parse_utf16+0x116>
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	61ba      	str	r2, [r7, #24]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b75      	cmp	r3, #117	; 0x75
 8002324:	d002      	beq.n	800232c <parse_utf16+0x11c>
            return JSONFailure;
 8002326:	f04f 33ff 	mov.w	r3, #4294967295
 800232a:	e05e      	b.n	80023ea <parse_utf16+0x1da>
        }
        status = parse_utf16_hex(unprocessed_ptr, &trail);
 800232c:	f107 0308 	add.w	r3, r7, #8
 8002330:	4619      	mov	r1, r3
 8002332:	69b8      	ldr	r0, [r7, #24]
 8002334:	f7ff fa85 	bl	8001842 <parse_utf16_hex>
 8002338:	6178      	str	r0, [r7, #20]
        if (status != JSONSuccess || trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d107      	bne.n	8002350 <parse_utf16+0x140>
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8002346:	d303      	bcc.n	8002350 <parse_utf16+0x140>
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800234e:	d302      	bcc.n	8002356 <parse_utf16+0x146>
            return JSONFailure;
 8002350:	f04f 33ff 	mov.w	r3, #4294967295
 8002354:	e049      	b.n	80023ea <parse_utf16+0x1da>
        }
        cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF)) + 0x010000;
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	029a      	lsls	r2, r3, #10
 800235a:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <parse_utf16+0x1e4>)
 800235c:	4013      	ands	r3, r2
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002364:	4313      	orrs	r3, r2
 8002366:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800236a:	60fb      	str	r3, [r7, #12]
        processed_ptr[0] = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	0c9b      	lsrs	r3, r3, #18
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f063 030f 	orn	r3, r3, #15
 800237c:	b2da      	uxtb	r2, r3
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = (((cp >> 12) & 0x3F) | 0x80); /* 10xxxxxx */
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	0b1b      	lsrs	r3, r3, #12
 8002386:	b2db      	uxtb	r3, r3
 8002388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800238c:	b2da      	uxtb	r2, r3
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3301      	adds	r3, #1
 8002392:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	099b      	lsrs	r3, r3, #6
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3302      	adds	r3, #2
 80023aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]
        processed_ptr[3] = (((cp)       & 0x3F) | 0x80); /* 10xxxxxx */
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	3303      	adds	r3, #3
 80023c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	701a      	strb	r2, [r3, #0]
        processed_ptr += 3;
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	3303      	adds	r3, #3
 80023cc:	61fb      	str	r3, [r7, #28]
 80023ce:	e002      	b.n	80023d6 <parse_utf16+0x1c6>
    } else { /* trail surrogate before lead surrogate */
        return JSONFailure;
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295
 80023d4:	e009      	b.n	80023ea <parse_utf16+0x1da>
    }
    unprocessed_ptr += 3;
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	3303      	adds	r3, #3
 80023da:	61bb      	str	r3, [r7, #24]
    *processed = processed_ptr;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	69fa      	ldr	r2, [r7, #28]
 80023e0:	601a      	str	r2, [r3, #0]
    *unprocessed = unprocessed_ptr;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3720      	adds	r7, #32
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	000ffc00 	.word	0x000ffc00

080023f8 <process_string>:


/* Copies and processes passed string up to supplied length.
Example: "\u006Corem ipsum" -> lorem ipsum */
static char* process_string(const char *input, size_t input_len, size_t *output_len) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	; 0x28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
    const char *input_ptr = input;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	617b      	str	r3, [r7, #20]
    size_t initial_size = (input_len + 1) * sizeof(char);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	3301      	adds	r3, #1
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
    size_t final_size = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	623b      	str	r3, [r7, #32]
    char *output = NULL, *output_ptr = NULL, *resized_output = NULL;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	2300      	movs	r3, #0
 800241c:	61bb      	str	r3, [r7, #24]
    output = (char*)parson_malloc(initial_size);
 800241e:	4b69      	ldr	r3, [pc, #420]	; (80025c4 <process_string+0x1cc>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002424:	4798      	blx	r3
 8002426:	61f8      	str	r0, [r7, #28]
    if (output == NULL) {
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 80b9 	beq.w	80025a2 <process_string+0x1aa>
        goto error;
    }
    output_ptr = output;
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	613b      	str	r3, [r7, #16]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < input_len) {
 8002434:	e08a      	b.n	800254c <process_string+0x154>
        if (*input_ptr == '\\') {
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b5c      	cmp	r3, #92	; 0x5c
 800243c:	d176      	bne.n	800252c <process_string+0x134>
            input_ptr++;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	3301      	adds	r3, #1
 8002442:	617b      	str	r3, [r7, #20]
            switch (*input_ptr) {
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b75      	cmp	r3, #117	; 0x75
 800244a:	f300 80ac 	bgt.w	80025a6 <process_string+0x1ae>
 800244e:	2b5c      	cmp	r3, #92	; 0x5c
 8002450:	da04      	bge.n	800245c <process_string+0x64>
 8002452:	2b22      	cmp	r3, #34	; 0x22
 8002454:	d03e      	beq.n	80024d4 <process_string+0xdc>
 8002456:	2b2f      	cmp	r3, #47	; 0x2f
 8002458:	d044      	beq.n	80024e4 <process_string+0xec>
                    if (parse_utf16(&input_ptr, &output_ptr) != JSONSuccess) {
                        goto error;
                    }
                    break;
                default:
                    goto error;
 800245a:	e0a4      	b.n	80025a6 <process_string+0x1ae>
            switch (*input_ptr) {
 800245c:	3b5c      	subs	r3, #92	; 0x5c
 800245e:	2b19      	cmp	r3, #25
 8002460:	f200 80a1 	bhi.w	80025a6 <process_string+0x1ae>
 8002464:	a201      	add	r2, pc, #4	; (adr r2, 800246c <process_string+0x74>)
 8002466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246a:	bf00      	nop
 800246c:	080024dd 	.word	0x080024dd
 8002470:	080025a7 	.word	0x080025a7
 8002474:	080025a7 	.word	0x080025a7
 8002478:	080025a7 	.word	0x080025a7
 800247c:	080025a7 	.word	0x080025a7
 8002480:	080025a7 	.word	0x080025a7
 8002484:	080024ed 	.word	0x080024ed
 8002488:	080025a7 	.word	0x080025a7
 800248c:	080025a7 	.word	0x080025a7
 8002490:	080025a7 	.word	0x080025a7
 8002494:	080024f5 	.word	0x080024f5
 8002498:	080025a7 	.word	0x080025a7
 800249c:	080025a7 	.word	0x080025a7
 80024a0:	080025a7 	.word	0x080025a7
 80024a4:	080025a7 	.word	0x080025a7
 80024a8:	080025a7 	.word	0x080025a7
 80024ac:	080025a7 	.word	0x080025a7
 80024b0:	080025a7 	.word	0x080025a7
 80024b4:	080024fd 	.word	0x080024fd
 80024b8:	080025a7 	.word	0x080025a7
 80024bc:	080025a7 	.word	0x080025a7
 80024c0:	080025a7 	.word	0x080025a7
 80024c4:	08002505 	.word	0x08002505
 80024c8:	080025a7 	.word	0x080025a7
 80024cc:	0800250d 	.word	0x0800250d
 80024d0:	08002515 	.word	0x08002515
                case '\"': *output_ptr = '\"'; break;
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	2222      	movs	r2, #34	; 0x22
 80024d8:	701a      	strb	r2, [r3, #0]
 80024da:	e031      	b.n	8002540 <process_string+0x148>
                case '\\': *output_ptr = '\\'; break;
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	225c      	movs	r2, #92	; 0x5c
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	e02d      	b.n	8002540 <process_string+0x148>
                case '/':  *output_ptr = '/';  break;
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	222f      	movs	r2, #47	; 0x2f
 80024e8:	701a      	strb	r2, [r3, #0]
 80024ea:	e029      	b.n	8002540 <process_string+0x148>
                case 'b':  *output_ptr = '\b'; break;
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	2208      	movs	r2, #8
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	e025      	b.n	8002540 <process_string+0x148>
                case 'f':  *output_ptr = '\f'; break;
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	220c      	movs	r2, #12
 80024f8:	701a      	strb	r2, [r3, #0]
 80024fa:	e021      	b.n	8002540 <process_string+0x148>
                case 'n':  *output_ptr = '\n'; break;
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	220a      	movs	r2, #10
 8002500:	701a      	strb	r2, [r3, #0]
 8002502:	e01d      	b.n	8002540 <process_string+0x148>
                case 'r':  *output_ptr = '\r'; break;
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	220d      	movs	r2, #13
 8002508:	701a      	strb	r2, [r3, #0]
 800250a:	e019      	b.n	8002540 <process_string+0x148>
                case 't':  *output_ptr = '\t'; break;
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	2209      	movs	r2, #9
 8002510:	701a      	strb	r2, [r3, #0]
 8002512:	e015      	b.n	8002540 <process_string+0x148>
                    if (parse_utf16(&input_ptr, &output_ptr) != JSONSuccess) {
 8002514:	f107 0210 	add.w	r2, r7, #16
 8002518:	f107 0314 	add.w	r3, r7, #20
 800251c:	4611      	mov	r1, r2
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fe76 	bl	8002210 <parse_utf16>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d009      	beq.n	800253e <process_string+0x146>
                        goto error;
 800252a:	e041      	b.n	80025b0 <process_string+0x1b8>
            }
        } else if ((unsigned char)*input_ptr < 0x20) {
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b1f      	cmp	r3, #31
 8002532:	d93a      	bls.n	80025aa <process_string+0x1b2>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
        } else {
            *output_ptr = *input_ptr;
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	7812      	ldrb	r2, [r2, #0]
 800253a:	701a      	strb	r2, [r3, #0]
 800253c:	e000      	b.n	8002540 <process_string+0x148>
                    break;
 800253e:	bf00      	nop
        }
        output_ptr++;
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	3301      	adds	r3, #1
 8002544:	613b      	str	r3, [r7, #16]
        input_ptr++;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	3301      	adds	r3, #1
 800254a:	617b      	str	r3, [r7, #20]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < input_len) {
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d007      	beq.n	8002564 <process_string+0x16c>
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	461a      	mov	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4293      	cmp	r3, r2
 8002560:	f63f af69 	bhi.w	8002436 <process_string+0x3e>
    }
    *output_ptr = '\0';
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
    /* resize to new length */
    final_size = (size_t)(output_ptr-output) + 1;
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	3301      	adds	r3, #1
 8002572:	623b      	str	r3, [r7, #32]
    /* todo: don't resize if final_size == initial_size */
    resized_output = (char*)parson_malloc(final_size);
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <process_string+0x1cc>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6a38      	ldr	r0, [r7, #32]
 800257a:	4798      	blx	r3
 800257c:	61b8      	str	r0, [r7, #24]
    if (resized_output == NULL) {
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d014      	beq.n	80025ae <process_string+0x1b6>
        goto error;
    }
    memcpy(resized_output, output, final_size);
 8002584:	6a3a      	ldr	r2, [r7, #32]
 8002586:	69f9      	ldr	r1, [r7, #28]
 8002588:	69b8      	ldr	r0, [r7, #24]
 800258a:	f008 f82d 	bl	800a5e8 <memcpy>
    *output_len = final_size - 1;
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	1e5a      	subs	r2, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	601a      	str	r2, [r3, #0]
    parson_free(output);
 8002596:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <process_string+0x1d0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	69f8      	ldr	r0, [r7, #28]
 800259c:	4798      	blx	r3
    return resized_output;
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	e00b      	b.n	80025ba <process_string+0x1c2>
        goto error;
 80025a2:	bf00      	nop
 80025a4:	e004      	b.n	80025b0 <process_string+0x1b8>
                    goto error;
 80025a6:	bf00      	nop
 80025a8:	e002      	b.n	80025b0 <process_string+0x1b8>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
 80025aa:	bf00      	nop
 80025ac:	e000      	b.n	80025b0 <process_string+0x1b8>
        goto error;
 80025ae:	bf00      	nop
error:
    parson_free(output);
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <process_string+0x1d0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	69f8      	ldr	r0, [r7, #28]
 80025b6:	4798      	blx	r3
    return NULL;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3728      	adds	r7, #40	; 0x28
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000008 	.word	0x20000008
 80025c8:	2000000c 	.word	0x2000000c

080025cc <get_quoted_string>:

/* Return processed contents of a string between quotes and
   skips passed argument to a matching quote. */
static char * get_quoted_string(const char **string, size_t *output_string_len) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
    const char *string_start = *string;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	617b      	str	r3, [r7, #20]
    size_t input_string_len = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	613b      	str	r3, [r7, #16]
    JSON_Status status = skip_quotes(string);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff fdd3 	bl	800218c <skip_quotes>
 80025e6:	60f8      	str	r0, [r7, #12]
    if (status != JSONSuccess) {
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <get_quoted_string+0x26>
        return NULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	e00d      	b.n	800260e <get_quoted_string+0x42>
    }
    input_string_len = *string - string_start - 2; /* length without quotes */
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	3b02      	subs	r3, #2
 80025fc:	613b      	str	r3, [r7, #16]
    return process_string(string_start + 1, input_string_len, output_string_len);
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	3301      	adds	r3, #1
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	6939      	ldr	r1, [r7, #16]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fef6 	bl	80023f8 <process_string>
 800260c:	4603      	mov	r3, r0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <parse_value>:

static JSON_Value * parse_value(const char **string, size_t nesting) {
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
    if (nesting > MAX_NESTING) {
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002628:	d906      	bls.n	8002638 <parse_value+0x20>
        return NULL;
 800262a:	2300      	movs	r3, #0
 800262c:	e08d      	b.n	800274a <parse_value+0x132>
    }
    SKIP_WHITESPACES(string);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	3301      	adds	r3, #1
 8002640:	4a44      	ldr	r2, [pc, #272]	; (8002754 <parse_value+0x13c>)
 8002642:	4413      	add	r3, r2
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1ef      	bne.n	800262e <parse_value+0x16>
    switch (**string) {
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b7b      	cmp	r3, #123	; 0x7b
 8002656:	dc77      	bgt.n	8002748 <parse_value+0x130>
 8002658:	2b5b      	cmp	r3, #91	; 0x5b
 800265a:	da08      	bge.n	800266e <parse_value+0x56>
 800265c:	2b39      	cmp	r3, #57	; 0x39
 800265e:	dc73      	bgt.n	8002748 <parse_value+0x130>
 8002660:	2b30      	cmp	r3, #48	; 0x30
 8002662:	da67      	bge.n	8002734 <parse_value+0x11c>
 8002664:	2b22      	cmp	r3, #34	; 0x22
 8002666:	d05b      	beq.n	8002720 <parse_value+0x108>
 8002668:	2b2d      	cmp	r3, #45	; 0x2d
 800266a:	d063      	beq.n	8002734 <parse_value+0x11c>
 800266c:	e06c      	b.n	8002748 <parse_value+0x130>
 800266e:	3b5b      	subs	r3, #91	; 0x5b
 8002670:	2b20      	cmp	r3, #32
 8002672:	d869      	bhi.n	8002748 <parse_value+0x130>
 8002674:	a201      	add	r2, pc, #4	; (adr r2, 800267c <parse_value+0x64>)
 8002676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267a:	bf00      	nop
 800267c:	08002711 	.word	0x08002711
 8002680:	08002749 	.word	0x08002749
 8002684:	08002749 	.word	0x08002749
 8002688:	08002749 	.word	0x08002749
 800268c:	08002749 	.word	0x08002749
 8002690:	08002749 	.word	0x08002749
 8002694:	08002749 	.word	0x08002749
 8002698:	08002749 	.word	0x08002749
 800269c:	08002749 	.word	0x08002749
 80026a0:	08002749 	.word	0x08002749
 80026a4:	08002749 	.word	0x08002749
 80026a8:	0800272b 	.word	0x0800272b
 80026ac:	08002749 	.word	0x08002749
 80026b0:	08002749 	.word	0x08002749
 80026b4:	08002749 	.word	0x08002749
 80026b8:	08002749 	.word	0x08002749
 80026bc:	08002749 	.word	0x08002749
 80026c0:	08002749 	.word	0x08002749
 80026c4:	08002749 	.word	0x08002749
 80026c8:	0800273f 	.word	0x0800273f
 80026cc:	08002749 	.word	0x08002749
 80026d0:	08002749 	.word	0x08002749
 80026d4:	08002749 	.word	0x08002749
 80026d8:	08002749 	.word	0x08002749
 80026dc:	08002749 	.word	0x08002749
 80026e0:	0800272b 	.word	0x0800272b
 80026e4:	08002749 	.word	0x08002749
 80026e8:	08002749 	.word	0x08002749
 80026ec:	08002749 	.word	0x08002749
 80026f0:	08002749 	.word	0x08002749
 80026f4:	08002749 	.word	0x08002749
 80026f8:	08002749 	.word	0x08002749
 80026fc:	08002701 	.word	0x08002701
        case '{':
            return parse_object_value(string, nesting + 1);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	3301      	adds	r3, #1
 8002704:	4619      	mov	r1, r3
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f826 	bl	8002758 <parse_object_value>
 800270c:	4603      	mov	r3, r0
 800270e:	e01c      	b.n	800274a <parse_value+0x132>
        case '[':
            return parse_array_value(string, nesting + 1);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	3301      	adds	r3, #1
 8002714:	4619      	mov	r1, r3
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f934 	bl	8002984 <parse_array_value>
 800271c:	4603      	mov	r3, r0
 800271e:	e014      	b.n	800274a <parse_value+0x132>
        case '\"':
            return parse_string_value(string);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f9f9 	bl	8002b18 <parse_string_value>
 8002726:	4603      	mov	r3, r0
 8002728:	e00f      	b.n	800274a <parse_value+0x132>
        case 'f': case 't':
            return parse_boolean_value(string);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fa1e 	bl	8002b6c <parse_boolean_value>
 8002730:	4603      	mov	r3, r0
 8002732:	e00a      	b.n	800274a <parse_value+0x132>
        case '-':
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9':
            return parse_number_value(string);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 fa55 	bl	8002be4 <parse_number_value>
 800273a:	4603      	mov	r3, r0
 800273c:	e005      	b.n	800274a <parse_value+0x132>
        case 'n':
            return parse_null_value(string);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 faae 	bl	8002ca0 <parse_null_value>
 8002744:	4603      	mov	r3, r0
 8002746:	e000      	b.n	800274a <parse_value+0x132>
        default:
            return NULL;
 8002748:	2300      	movs	r3, #0
    }
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	0800e14c 	.word	0x0800e14c

08002758 <parse_object_value>:

static JSON_Value * parse_object_value(const char **string, size_t nesting) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
    JSON_Status status = JSONFailure;
 8002762:	f04f 33ff 	mov.w	r3, #4294967295
 8002766:	61fb      	str	r3, [r7, #28]
    JSON_Value *output_value = NULL, *new_value = NULL;
 8002768:	2300      	movs	r3, #0
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
    JSON_Object *output_object = NULL;
 8002770:	2300      	movs	r3, #0
 8002772:	613b      	str	r3, [r7, #16]
    char *new_key = NULL;
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]

    output_value = json_value_init_object();
 8002778:	f001 fcf8 	bl	800416c <json_value_init_object>
 800277c:	61b8      	str	r0, [r7, #24]
    if (output_value == NULL) {
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <parse_object_value+0x30>
        return NULL;
 8002784:	2300      	movs	r3, #0
 8002786:	e0f5      	b.n	8002974 <parse_object_value+0x21c>
    }
    if (**string != '{') {
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b7b      	cmp	r3, #123	; 0x7b
 8002790:	d004      	beq.n	800279c <parse_object_value+0x44>
        json_value_free(output_value);
 8002792:	69b8      	ldr	r0, [r7, #24]
 8002794:	f001 fcbc 	bl	8004110 <json_value_free>
        return NULL;
 8002798:	2300      	movs	r3, #0
 800279a:	e0eb      	b.n	8002974 <parse_object_value+0x21c>
    }
    output_object = json_value_get_object(output_value);
 800279c:	69b8      	ldr	r0, [r7, #24]
 800279e:	f001 fc2d 	bl	8003ffc <json_value_get_object>
 80027a2:	6138      	str	r0, [r7, #16]
    SKIP_CHAR(string);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 80027ae:	e004      	b.n	80027ba <parse_object_value+0x62>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	3301      	adds	r3, #1
 80027c2:	4a6e      	ldr	r2, [pc, #440]	; (800297c <parse_object_value+0x224>)
 80027c4:	4413      	add	r3, r2
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1ef      	bne.n	80027b0 <parse_object_value+0x58>
    if (**string == '}') { /* empty object */
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b7d      	cmp	r3, #125	; 0x7d
 80027d8:	f040 80a1 	bne.w	800291e <parse_object_value+0x1c6>
        SKIP_CHAR(string);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	601a      	str	r2, [r3, #0]
        return output_value;
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	e0c4      	b.n	8002974 <parse_object_value+0x21c>
    }
    while (**string != '\0') {
        size_t key_len = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]
        new_key = get_quoted_string(string, &key_len);
 80027ee:	f107 0308 	add.w	r3, r7, #8
 80027f2:	4619      	mov	r1, r3
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff fee9 	bl	80025cc <get_quoted_string>
 80027fa:	60f8      	str	r0, [r7, #12]
        /* We do not support key names with embedded \0 chars */
        if (!new_key) {
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d104      	bne.n	800280c <parse_object_value+0xb4>
            json_value_free(output_value);
 8002802:	69b8      	ldr	r0, [r7, #24]
 8002804:	f001 fc84 	bl	8004110 <json_value_free>
            return NULL;
 8002808:	2300      	movs	r3, #0
 800280a:	e0b3      	b.n	8002974 <parse_object_value+0x21c>
        }
        if (key_len != strlen(new_key)) {
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f7fd fcb7 	bl	8000180 <strlen>
 8002812:	4602      	mov	r2, r0
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	429a      	cmp	r2, r3
 8002818:	d00d      	beq.n	8002836 <parse_object_value+0xde>
            parson_free(new_key);
 800281a:	4b59      	ldr	r3, [pc, #356]	; (8002980 <parse_object_value+0x228>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	4798      	blx	r3
            json_value_free(output_value);
 8002822:	69b8      	ldr	r0, [r7, #24]
 8002824:	f001 fc74 	bl	8004110 <json_value_free>
            return NULL;
 8002828:	2300      	movs	r3, #0
 800282a:	e0a3      	b.n	8002974 <parse_object_value+0x21c>
        }
        SKIP_WHITESPACES(string);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	3301      	adds	r3, #1
 800283e:	4a4f      	ldr	r2, [pc, #316]	; (800297c <parse_object_value+0x224>)
 8002840:	4413      	add	r3, r2
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1ef      	bne.n	800282c <parse_object_value+0xd4>
        if (**string != ':') {
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b3a      	cmp	r3, #58	; 0x3a
 8002854:	d008      	beq.n	8002868 <parse_object_value+0x110>
            parson_free(new_key);
 8002856:	4b4a      	ldr	r3, [pc, #296]	; (8002980 <parse_object_value+0x228>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	4798      	blx	r3
            json_value_free(output_value);
 800285e:	69b8      	ldr	r0, [r7, #24]
 8002860:	f001 fc56 	bl	8004110 <json_value_free>
            return NULL;
 8002864:	2300      	movs	r3, #0
 8002866:	e085      	b.n	8002974 <parse_object_value+0x21c>
        }
        SKIP_CHAR(string);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	601a      	str	r2, [r3, #0]
        new_value = parse_value(string, nesting);
 8002872:	6839      	ldr	r1, [r7, #0]
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff fecf 	bl	8002618 <parse_value>
 800287a:	6178      	str	r0, [r7, #20]
        if (new_value == NULL) {
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d108      	bne.n	8002894 <parse_object_value+0x13c>
            parson_free(new_key);
 8002882:	4b3f      	ldr	r3, [pc, #252]	; (8002980 <parse_object_value+0x228>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	4798      	blx	r3
            json_value_free(output_value);
 800288a:	69b8      	ldr	r0, [r7, #24]
 800288c:	f001 fc40 	bl	8004110 <json_value_free>
            return NULL;
 8002890:	2300      	movs	r3, #0
 8002892:	e06f      	b.n	8002974 <parse_object_value+0x21c>
        }
        status = json_object_add(output_object, new_key, new_value);
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	68f9      	ldr	r1, [r7, #12]
 8002898:	6938      	ldr	r0, [r7, #16]
 800289a:	f7ff fab8 	bl	8001e0e <json_object_add>
 800289e:	61f8      	str	r0, [r7, #28]
        if (status != JSONSuccess) {
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d010      	beq.n	80028c8 <parse_object_value+0x170>
            parson_free(new_key);
 80028a6:	4b36      	ldr	r3, [pc, #216]	; (8002980 <parse_object_value+0x228>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	4798      	blx	r3
            json_value_free(new_value);
 80028ae:	6978      	ldr	r0, [r7, #20]
 80028b0:	f001 fc2e 	bl	8004110 <json_value_free>
            json_value_free(output_value);
 80028b4:	69b8      	ldr	r0, [r7, #24]
 80028b6:	f001 fc2b 	bl	8004110 <json_value_free>
            return NULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	e05a      	b.n	8002974 <parse_object_value+0x21c>
        }
        SKIP_WHITESPACES(string);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	3301      	adds	r3, #1
 80028d0:	4a2a      	ldr	r2, [pc, #168]	; (800297c <parse_object_value+0x224>)
 80028d2:	4413      	add	r3, r2
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1ef      	bne.n	80028be <parse_object_value+0x166>
        if (**string != ',') {
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b2c      	cmp	r3, #44	; 0x2c
 80028e6:	d121      	bne.n	800292c <parse_object_value+0x1d4>
            break;
        }
        SKIP_CHAR(string);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 80028f2:	e004      	b.n	80028fe <parse_object_value+0x1a6>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	3301      	adds	r3, #1
 8002906:	4a1d      	ldr	r2, [pc, #116]	; (800297c <parse_object_value+0x224>)
 8002908:	4413      	add	r3, r2
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1ef      	bne.n	80028f4 <parse_object_value+0x19c>
        if (**string == '}') {
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b7d      	cmp	r3, #125	; 0x7d
 800291c:	d008      	beq.n	8002930 <parse_object_value+0x1d8>
    while (**string != '\0') {
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	f47f af60 	bne.w	80027ea <parse_object_value+0x92>
 800292a:	e008      	b.n	800293e <parse_object_value+0x1e6>
            break;
 800292c:	bf00      	nop
 800292e:	e006      	b.n	800293e <parse_object_value+0x1e6>
            break;
 8002930:	bf00      	nop
        }
    }
    SKIP_WHITESPACES(string);
 8002932:	e004      	b.n	800293e <parse_object_value+0x1e6>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	4a0d      	ldr	r2, [pc, #52]	; (800297c <parse_object_value+0x224>)
 8002948:	4413      	add	r3, r2
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1ef      	bne.n	8002934 <parse_object_value+0x1dc>
    if (**string != '}') {
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b7d      	cmp	r3, #125	; 0x7d
 800295c:	d004      	beq.n	8002968 <parse_object_value+0x210>
        json_value_free(output_value);
 800295e:	69b8      	ldr	r0, [r7, #24]
 8002960:	f001 fbd6 	bl	8004110 <json_value_free>
        return NULL;
 8002964:	2300      	movs	r3, #0
 8002966:	e005      	b.n	8002974 <parse_object_value+0x21c>
    }
    SKIP_CHAR(string);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	601a      	str	r2, [r3, #0]
    return output_value;
 8002972:	69bb      	ldr	r3, [r7, #24]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3720      	adds	r7, #32
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	0800e14c 	.word	0x0800e14c
 8002980:	2000000c 	.word	0x2000000c

08002984 <parse_array_value>:

static JSON_Value * parse_array_value(const char **string, size_t nesting) {
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = NULL, *new_array_value = NULL;
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
    JSON_Array *output_array = NULL;
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
    output_value = json_value_init_array();
 800299a:	f001 fc13 	bl	80041c4 <json_value_init_array>
 800299e:	6178      	str	r0, [r7, #20]
    if (output_value == NULL) {
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <parse_array_value+0x26>
        return NULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	e0b0      	b.n	8002b0c <parse_array_value+0x188>
    }
    if (**string != '[') {
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b5b      	cmp	r3, #91	; 0x5b
 80029b2:	d004      	beq.n	80029be <parse_array_value+0x3a>
        json_value_free(output_value);
 80029b4:	6978      	ldr	r0, [r7, #20]
 80029b6:	f001 fbab 	bl	8004110 <json_value_free>
        return NULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	e0a6      	b.n	8002b0c <parse_array_value+0x188>
    }
    output_array = json_value_get_array(output_value);
 80029be:	6978      	ldr	r0, [r7, #20]
 80029c0:	f001 fb2e 	bl	8004020 <json_value_get_array>
 80029c4:	60f8      	str	r0, [r7, #12]
    SKIP_CHAR(string);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 80029d0:	e004      	b.n	80029dc <parse_array_value+0x58>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	3301      	adds	r3, #1
 80029e4:	4a4b      	ldr	r2, [pc, #300]	; (8002b14 <parse_array_value+0x190>)
 80029e6:	4413      	add	r3, r2
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1ef      	bne.n	80029d2 <parse_array_value+0x4e>
    if (**string == ']') { /* empty array */
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b5d      	cmp	r3, #93	; 0x5d
 80029fa:	d152      	bne.n	8002aa2 <parse_array_value+0x11e>
        SKIP_CHAR(string);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	601a      	str	r2, [r3, #0]
        return output_value;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	e080      	b.n	8002b0c <parse_array_value+0x188>
    }
    while (**string != '\0') {
        new_array_value = parse_value(string, nesting);
 8002a0a:	6839      	ldr	r1, [r7, #0]
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff fe03 	bl	8002618 <parse_value>
 8002a12:	6138      	str	r0, [r7, #16]
        if (new_array_value == NULL) {
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d104      	bne.n	8002a24 <parse_array_value+0xa0>
            json_value_free(output_value);
 8002a1a:	6978      	ldr	r0, [r7, #20]
 8002a1c:	f001 fb78 	bl	8004110 <json_value_free>
            return NULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	e073      	b.n	8002b0c <parse_array_value+0x188>
        }
        if (json_array_add(output_array, new_array_value) != JSONSuccess) {
 8002a24:	6939      	ldr	r1, [r7, #16]
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f7ff faf2 	bl	8002010 <json_array_add>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00c      	beq.n	8002a4c <parse_array_value+0xc8>
            json_value_free(new_array_value);
 8002a32:	6938      	ldr	r0, [r7, #16]
 8002a34:	f001 fb6c 	bl	8004110 <json_value_free>
            json_value_free(output_value);
 8002a38:	6978      	ldr	r0, [r7, #20]
 8002a3a:	f001 fb69 	bl	8004110 <json_value_free>
            return NULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	e064      	b.n	8002b0c <parse_array_value+0x188>
        }
        SKIP_WHITESPACES(string);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	3301      	adds	r3, #1
 8002a54:	4a2f      	ldr	r2, [pc, #188]	; (8002b14 <parse_array_value+0x190>)
 8002a56:	4413      	add	r3, r2
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1ef      	bne.n	8002a42 <parse_array_value+0xbe>
        if (**string != ',') {
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b2c      	cmp	r3, #44	; 0x2c
 8002a6a:	d120      	bne.n	8002aae <parse_array_value+0x12a>
            break;
        }
        SKIP_CHAR(string);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 8002a76:	e004      	b.n	8002a82 <parse_array_value+0xfe>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	4a22      	ldr	r2, [pc, #136]	; (8002b14 <parse_array_value+0x190>)
 8002a8c:	4413      	add	r3, r2
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1ef      	bne.n	8002a78 <parse_array_value+0xf4>
        if (**string == ']') {
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b5d      	cmp	r3, #93	; 0x5d
 8002aa0:	d007      	beq.n	8002ab2 <parse_array_value+0x12e>
    while (**string != '\0') {
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1ae      	bne.n	8002a0a <parse_array_value+0x86>
 8002aac:	e008      	b.n	8002ac0 <parse_array_value+0x13c>
            break;
 8002aae:	bf00      	nop
 8002ab0:	e006      	b.n	8002ac0 <parse_array_value+0x13c>
            break;
 8002ab2:	bf00      	nop
        }
    }
    SKIP_WHITESPACES(string);
 8002ab4:	e004      	b.n	8002ac0 <parse_array_value+0x13c>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	4a12      	ldr	r2, [pc, #72]	; (8002b14 <parse_array_value+0x190>)
 8002aca:	4413      	add	r3, r2
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1ef      	bne.n	8002ab6 <parse_array_value+0x132>
    if (**string != ']' || /* Trim array after parsing is over */
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b5d      	cmp	r3, #93	; 0x5d
 8002ade:	d10a      	bne.n	8002af6 <parse_array_value+0x172>
        json_array_resize(output_array, json_array_get_count(output_array)) != JSONSuccess) {
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f001 fa57 	bl	8003f94 <json_array_get_count>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	4619      	mov	r1, r3
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f7ff fac4 	bl	8002078 <json_array_resize>
 8002af0:	4603      	mov	r3, r0
    if (**string != ']' || /* Trim array after parsing is over */
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d004      	beq.n	8002b00 <parse_array_value+0x17c>
            json_value_free(output_value);
 8002af6:	6978      	ldr	r0, [r7, #20]
 8002af8:	f001 fb0a 	bl	8004110 <json_value_free>
            return NULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e005      	b.n	8002b0c <parse_array_value+0x188>
    }
    SKIP_CHAR(string);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	601a      	str	r2, [r3, #0]
    return output_value;
 8002b0a:	697b      	ldr	r3, [r7, #20]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	0800e14c 	.word	0x0800e14c

08002b18 <parse_string_value>:

static JSON_Value * parse_string_value(const char **string) {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
    JSON_Value *value = NULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
    size_t new_string_len = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]
    char *new_string = get_quoted_string(string, &new_string_len);
 8002b28:	f107 030c 	add.w	r3, r7, #12
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff fd4c 	bl	80025cc <get_quoted_string>
 8002b34:	6138      	str	r0, [r7, #16]
    if (new_string == NULL) {
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <parse_string_value+0x28>
        return NULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	e00f      	b.n	8002b60 <parse_string_value+0x48>
    }
    value = json_value_init_string_no_copy(new_string, new_string_len);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4619      	mov	r1, r3
 8002b44:	6938      	ldr	r0, [r7, #16]
 8002b46:	f7ff faff 	bl	8002148 <json_value_init_string_no_copy>
 8002b4a:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d105      	bne.n	8002b5e <parse_string_value+0x46>
        parson_free(new_string);
 8002b52:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <parse_string_value+0x50>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6938      	ldr	r0, [r7, #16]
 8002b58:	4798      	blx	r3
        return NULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	e000      	b.n	8002b60 <parse_string_value+0x48>
    }
    return value;
 8002b5e:	697b      	ldr	r3, [r7, #20]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	2000000c 	.word	0x2000000c

08002b6c <parse_boolean_value>:

static JSON_Value * parse_boolean_value(const char **string) {
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
    size_t true_token_size = SIZEOF_TOKEN("true");
 8002b74:	2304      	movs	r3, #4
 8002b76:	60fb      	str	r3, [r7, #12]
    size_t false_token_size = SIZEOF_TOKEN("false");
 8002b78:	2305      	movs	r3, #5
 8002b7a:	60bb      	str	r3, [r7, #8]
    if (strncmp("true", *string, true_token_size) == 0) {
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4619      	mov	r1, r3
 8002b84:	4815      	ldr	r0, [pc, #84]	; (8002bdc <parse_boolean_value+0x70>)
 8002b86:	f007 ff4d 	bl	800aa24 <strncmp>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10a      	bne.n	8002ba6 <parse_boolean_value+0x3a>
        *string += true_token_size;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	441a      	add	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(1);
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	f001 fb8f 	bl	80042c0 <json_value_init_boolean>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	e015      	b.n	8002bd2 <parse_boolean_value+0x66>
    } else if (strncmp("false", *string, false_token_size) == 0) {
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	4619      	mov	r1, r3
 8002bae:	480c      	ldr	r0, [pc, #48]	; (8002be0 <parse_boolean_value+0x74>)
 8002bb0:	f007 ff38 	bl	800aa24 <strncmp>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10a      	bne.n	8002bd0 <parse_boolean_value+0x64>
        *string += false_token_size;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	441a      	add	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(0);
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	f001 fb7a 	bl	80042c0 <json_value_init_boolean>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	e000      	b.n	8002bd2 <parse_boolean_value+0x66>
    }
    return NULL;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	0800d710 	.word	0x0800d710
 8002be0:	0800d718 	.word	0x0800d718

08002be4 <parse_number_value>:

static JSON_Value * parse_number_value(const char **string) {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
    char *end;
    double number = 0;
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    errno = 0;
 8002bf8:	f007 fa9c 	bl	800a134 <__errno>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
    number = strtod(*string, &end);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f107 020c 	add.w	r2, r7, #12
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f008 fd55 	bl	800b6bc <strtod>
 8002c12:	ed87 0b04 	vstr	d0, [r7, #16]
    if (errno == ERANGE && (number <= -HUGE_VAL || number >= HUGE_VAL)) {
 8002c16:	f007 fa8d 	bl	800a134 <__errno>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b22      	cmp	r3, #34	; 0x22
 8002c20:	d116      	bne.n	8002c50 <parse_number_value+0x6c>
 8002c22:	f04f 32ff 	mov.w	r2, #4294967295
 8002c26:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002c2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c2e:	f7fd ff2d 	bl	8000a8c <__aeabi_dcmplt>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d109      	bne.n	8002c4c <parse_number_value+0x68>
 8002c38:	f04f 32ff 	mov.w	r2, #4294967295
 8002c3c:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <parse_number_value+0xb8>)
 8002c3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c42:	f7fd ff41 	bl	8000ac8 <__aeabi_dcmpgt>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <parse_number_value+0x6c>
        return NULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	e021      	b.n	8002c94 <parse_number_value+0xb0>
    }
    if ((errno && errno != ERANGE) || !is_decimal(*string, end - *string)) {
 8002c50:	f007 fa70 	bl	800a134 <__errno>
 8002c54:	4603      	mov	r3, r0
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <parse_number_value+0x84>
 8002c5c:	f007 fa6a 	bl	800a134 <__errno>
 8002c60:	4603      	mov	r3, r0
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b22      	cmp	r3, #34	; 0x22
 8002c66:	d10b      	bne.n	8002c80 <parse_number_value+0x9c>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	4619      	mov	r1, r3
 8002c76:	f7fe fe3f 	bl	80018f8 <is_decimal>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <parse_number_value+0xa0>
        return NULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	e007      	b.n	8002c94 <parse_number_value+0xb0>
    }
    *string = end;
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	601a      	str	r2, [r3, #0]
    return json_value_init_number(number);
 8002c8a:	ed97 0b04 	vldr	d0, [r7, #16]
 8002c8e:	f001 fac5 	bl	800421c <json_value_init_number>
 8002c92:	4603      	mov	r3, r0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	7fefffff 	.word	0x7fefffff

08002ca0 <parse_null_value>:

static JSON_Value * parse_null_value(const char **string) {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
    size_t token_size = SIZEOF_TOKEN("null");
 8002ca8:	2304      	movs	r3, #4
 8002caa:	60fb      	str	r3, [r7, #12]
    if (strncmp("null", *string, token_size) == 0) {
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	480a      	ldr	r0, [pc, #40]	; (8002ce0 <parse_null_value+0x40>)
 8002cb6:	f007 feb5 	bl	800aa24 <strncmp>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d109      	bne.n	8002cd4 <parse_null_value+0x34>
        *string += token_size;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	441a      	add	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	601a      	str	r2, [r3, #0]
        return json_value_init_null();
 8002ccc:	f001 fb1c 	bl	8004308 <json_value_init_null>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	e000      	b.n	8002cd6 <parse_null_value+0x36>
    }
    return NULL;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	0800d720 	.word	0x0800d720

08002ce4 <json_serialize_to_buffer_r>:
                                    APPEND_STRING(PARSON_INDENT_STR);\
                                }\
                            } while (0)

static int json_serialize_to_buffer_r(const JSON_Value *value, char *buf, int level, parson_bool_t is_pretty, char *num_buf)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b098      	sub	sp, #96	; 0x60
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	603b      	str	r3, [r7, #0]
    const char *key = NULL, *string = NULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	637b      	str	r3, [r7, #52]	; 0x34
    JSON_Value *temp_value = NULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	633b      	str	r3, [r7, #48]	; 0x30
    JSON_Array *array = NULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    JSON_Object *object = NULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t i = 0, count = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	657b      	str	r3, [r7, #84]	; 0x54
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
    double num = 0.0;
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int written = -1, written_total = 0;
 8002d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1e:	653b      	str	r3, [r7, #80]	; 0x50
 8002d20:	2300      	movs	r3, #0
 8002d22:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t len = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]

    switch (json_value_get_type(value)) {
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f001 f955 	bl	8003fd8 <json_value_get_type>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	3301      	adds	r3, #1
 8002d32:	2b07      	cmp	r3, #7
 8002d34:	f200 8355 	bhi.w	80033e2 <json_serialize_to_buffer_r+0x6fe>
 8002d38:	a201      	add	r2, pc, #4	; (adr r2, 8002d40 <json_serialize_to_buffer_r+0x5c>)
 8002d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3e:	bf00      	nop
 8002d40:	080033dd 	.word	0x080033dd
 8002d44:	080033e3 	.word	0x080033e3
 8002d48:	080033a9 	.word	0x080033a9
 8002d4c:	0800326f 	.word	0x0800326f
 8002d50:	0800332f 	.word	0x0800332f
 8002d54:	08002f8d 	.word	0x08002f8d
 8002d58:	08002d61 	.word	0x08002d61
 8002d5c:	080032bd 	.word	0x080032bd
        case JSONArray:
            array = json_value_get_array(value);
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f001 f95d 	bl	8004020 <json_value_get_array>
 8002d66:	62f8      	str	r0, [r7, #44]	; 0x2c
            count = json_array_get_count(array);
 8002d68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d6a:	f001 f913 	bl	8003f94 <json_array_get_count>
 8002d6e:	6278      	str	r0, [r7, #36]	; 0x24
            APPEND_STRING("[");
 8002d70:	2301      	movs	r3, #1
 8002d72:	653b      	str	r3, [r7, #80]	; 0x50
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00e      	beq.n	8002d98 <json_serialize_to_buffer_r+0xb4>
 8002d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	497e      	ldr	r1, [pc, #504]	; (8002f78 <json_serialize_to_buffer_r+0x294>)
 8002d80:	68b8      	ldr	r0, [r7, #8]
 8002d82:	f007 fc31 	bl	800a5e8 <memcpy>
 8002d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	701a      	strb	r2, [r3, #0]
 8002d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	4413      	add	r3, r2
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d9c:	4413      	add	r3, r2
 8002d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (count > 0 && is_pretty) {
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d01a      	beq.n	8002ddc <json_serialize_to_buffer_r+0xf8>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d017      	beq.n	8002ddc <json_serialize_to_buffer_r+0xf8>
                APPEND_STRING("\n");
 8002dac:	2301      	movs	r3, #1
 8002dae:	653b      	str	r3, [r7, #80]	; 0x50
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00e      	beq.n	8002dd4 <json_serialize_to_buffer_r+0xf0>
 8002db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db8:	461a      	mov	r2, r3
 8002dba:	4970      	ldr	r1, [pc, #448]	; (8002f7c <json_serialize_to_buffer_r+0x298>)
 8002dbc:	68b8      	ldr	r0, [r7, #8]
 8002dbe:	f007 fc13 	bl	800a5e8 <memcpy>
 8002dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
 8002dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd8:	4413      	add	r3, r2
 8002dda:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            for (i = 0; i < count; i++) {
 8002ddc:	2300      	movs	r3, #0
 8002dde:	657b      	str	r3, [r7, #84]	; 0x54
 8002de0:	e081      	b.n	8002ee6 <json_serialize_to_buffer_r+0x202>
                if (is_pretty) {
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d023      	beq.n	8002e30 <json_serialize_to_buffer_r+0x14c>
                    APPEND_INDENT(level+1);
 8002de8:	2300      	movs	r3, #0
 8002dea:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dec:	2300      	movs	r3, #0
 8002dee:	64bb      	str	r3, [r7, #72]	; 0x48
 8002df0:	e01a      	b.n	8002e28 <json_serialize_to_buffer_r+0x144>
 8002df2:	2304      	movs	r3, #4
 8002df4:	653b      	str	r3, [r7, #80]	; 0x50
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00e      	beq.n	8002e1a <json_serialize_to_buffer_r+0x136>
 8002dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dfe:	461a      	mov	r2, r3
 8002e00:	495f      	ldr	r1, [pc, #380]	; (8002f80 <json_serialize_to_buffer_r+0x29c>)
 8002e02:	68b8      	ldr	r0, [r7, #8]
 8002e04:	f007 fbf0 	bl	800a5e8 <memcpy>
 8002e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	2200      	movs	r2, #0
 8002e10:	701a      	strb	r2, [r3, #0]
 8002e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	4413      	add	r3, r2
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e1e:	4413      	add	r3, r2
 8002e20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e24:	3301      	adds	r3, #1
 8002e26:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	dae0      	bge.n	8002df2 <json_serialize_to_buffer_r+0x10e>
                }
                temp_value = json_array_get_value(array, i);
 8002e30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e34:	f001 f893 	bl	8003f5e <json_array_get_value>
 8002e38:	6338      	str	r0, [r7, #48]	; 0x30
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e48:	f7ff ff4c 	bl	8002ce4 <json_serialize_to_buffer_r>
 8002e4c:	6538      	str	r0, [r7, #80]	; 0x50
                if (written < 0) {
 8002e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	da02      	bge.n	8002e5a <json_serialize_to_buffer_r+0x176>
                    return -1;
 8002e54:	f04f 33ff 	mov.w	r3, #4294967295
 8002e58:	e2c5      	b.n	80033e6 <json_serialize_to_buffer_r+0x702>
                }
                if (buf != NULL) {
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <json_serialize_to_buffer_r+0x184>
                    buf += written;
 8002e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	4413      	add	r3, r2
 8002e66:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 8002e68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e6c:	4413      	add	r3, r2
 8002e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (i < (count - 1)) {
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	3b01      	subs	r3, #1
 8002e74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d217      	bcs.n	8002eaa <json_serialize_to_buffer_r+0x1c6>
                    APPEND_STRING(",");
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	653b      	str	r3, [r7, #80]	; 0x50
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00e      	beq.n	8002ea2 <json_serialize_to_buffer_r+0x1be>
 8002e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e86:	461a      	mov	r2, r3
 8002e88:	493e      	ldr	r1, [pc, #248]	; (8002f84 <json_serialize_to_buffer_r+0x2a0>)
 8002e8a:	68b8      	ldr	r0, [r7, #8]
 8002e8c:	f007 fbac 	bl	800a5e8 <memcpy>
 8002e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	4413      	add	r3, r2
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
 8002e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea6:	4413      	add	r3, r2
 8002ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                if (is_pretty) {
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d017      	beq.n	8002ee0 <json_serialize_to_buffer_r+0x1fc>
                    APPEND_STRING("\n");
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00e      	beq.n	8002ed8 <json_serialize_to_buffer_r+0x1f4>
 8002eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	492f      	ldr	r1, [pc, #188]	; (8002f7c <json_serialize_to_buffer_r+0x298>)
 8002ec0:	68b8      	ldr	r0, [r7, #8]
 8002ec2:	f007 fb91 	bl	800a5e8 <memcpy>
 8002ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	4413      	add	r3, r2
 8002ecc:	2200      	movs	r2, #0
 8002ece:	701a      	strb	r2, [r3, #0]
 8002ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002edc:	4413      	add	r3, r2
 8002ede:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (i = 0; i < count; i++) {
 8002ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	657b      	str	r3, [r7, #84]	; 0x54
 8002ee6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	429a      	cmp	r2, r3
 8002eec:	f4ff af79 	bcc.w	8002de2 <json_serialize_to_buffer_r+0xfe>
                }
            }
            if (count > 0 && is_pretty) {
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d026      	beq.n	8002f44 <json_serialize_to_buffer_r+0x260>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d023      	beq.n	8002f44 <json_serialize_to_buffer_r+0x260>
                APPEND_INDENT(level);
 8002efc:	2300      	movs	r3, #0
 8002efe:	647b      	str	r3, [r7, #68]	; 0x44
 8002f00:	2300      	movs	r3, #0
 8002f02:	647b      	str	r3, [r7, #68]	; 0x44
 8002f04:	e01a      	b.n	8002f3c <json_serialize_to_buffer_r+0x258>
 8002f06:	2304      	movs	r3, #4
 8002f08:	653b      	str	r3, [r7, #80]	; 0x50
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00e      	beq.n	8002f2e <json_serialize_to_buffer_r+0x24a>
 8002f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f12:	461a      	mov	r2, r3
 8002f14:	491a      	ldr	r1, [pc, #104]	; (8002f80 <json_serialize_to_buffer_r+0x29c>)
 8002f16:	68b8      	ldr	r0, [r7, #8]
 8002f18:	f007 fb66 	bl	800a5e8 <memcpy>
 8002f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	4413      	add	r3, r2
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
 8002f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f32:	4413      	add	r3, r2
 8002f34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f38:	3301      	adds	r3, #1
 8002f3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	dbe0      	blt.n	8002f06 <json_serialize_to_buffer_r+0x222>
            }
            APPEND_STRING("]");
 8002f44:	2301      	movs	r3, #1
 8002f46:	653b      	str	r3, [r7, #80]	; 0x50
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00e      	beq.n	8002f6c <json_serialize_to_buffer_r+0x288>
 8002f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f50:	461a      	mov	r2, r3
 8002f52:	490d      	ldr	r1, [pc, #52]	; (8002f88 <json_serialize_to_buffer_r+0x2a4>)
 8002f54:	68b8      	ldr	r0, [r7, #8]
 8002f56:	f007 fb47 	bl	800a5e8 <memcpy>
 8002f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	4413      	add	r3, r2
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]
 8002f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	4413      	add	r3, r2
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f70:	4413      	add	r3, r2
 8002f72:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 8002f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f76:	e236      	b.n	80033e6 <json_serialize_to_buffer_r+0x702>
 8002f78:	0800d728 	.word	0x0800d728
 8002f7c:	0800d72c 	.word	0x0800d72c
 8002f80:	0800d730 	.word	0x0800d730
 8002f84:	0800d738 	.word	0x0800d738
 8002f88:	0800d73c 	.word	0x0800d73c
        case JSONObject:
            object = json_value_get_object(value);
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f001 f835 	bl	8003ffc <json_value_get_object>
 8002f92:	62b8      	str	r0, [r7, #40]	; 0x28
            count  = json_object_get_count(object);
 8002f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f96:	f000 ff8a 	bl	8003eae <json_object_get_count>
 8002f9a:	6278      	str	r0, [r7, #36]	; 0x24
            APPEND_STRING("{");
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	653b      	str	r3, [r7, #80]	; 0x50
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00e      	beq.n	8002fc4 <json_serialize_to_buffer_r+0x2e0>
 8002fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa8:	461a      	mov	r2, r3
 8002faa:	498e      	ldr	r1, [pc, #568]	; (80031e4 <json_serialize_to_buffer_r+0x500>)
 8002fac:	68b8      	ldr	r0, [r7, #8]
 8002fae:	f007 fb1b 	bl	800a5e8 <memcpy>
 8002fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
 8002fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fc8:	4413      	add	r3, r2
 8002fca:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (count > 0 && is_pretty) {
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d01a      	beq.n	8003008 <json_serialize_to_buffer_r+0x324>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d017      	beq.n	8003008 <json_serialize_to_buffer_r+0x324>
                APPEND_STRING("\n");
 8002fd8:	2301      	movs	r3, #1
 8002fda:	653b      	str	r3, [r7, #80]	; 0x50
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00e      	beq.n	8003000 <json_serialize_to_buffer_r+0x31c>
 8002fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4980      	ldr	r1, [pc, #512]	; (80031e8 <json_serialize_to_buffer_r+0x504>)
 8002fe8:	68b8      	ldr	r0, [r7, #8]
 8002fea:	f007 fafd 	bl	800a5e8 <memcpy>
 8002fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
 8002ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003004:	4413      	add	r3, r2
 8003006:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            for (i = 0; i < count; i++) {
 8003008:	2300      	movs	r3, #0
 800300a:	657b      	str	r3, [r7, #84]	; 0x54
 800300c:	e0da      	b.n	80031c4 <json_serialize_to_buffer_r+0x4e0>
                key = json_object_get_name(object, i);
 800300e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003012:	f000 ff5d 	bl	8003ed0 <json_object_get_name>
 8003016:	63b8      	str	r0, [r7, #56]	; 0x38
                if (key == NULL) {
 8003018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301a:	2b00      	cmp	r3, #0
 800301c:	d102      	bne.n	8003024 <json_serialize_to_buffer_r+0x340>
                    return -1;
 800301e:	f04f 33ff 	mov.w	r3, #4294967295
 8003022:	e1e0      	b.n	80033e6 <json_serialize_to_buffer_r+0x702>
                }
                if (is_pretty) {
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d023      	beq.n	8003072 <json_serialize_to_buffer_r+0x38e>
                    APPEND_INDENT(level+1);
 800302a:	2300      	movs	r3, #0
 800302c:	643b      	str	r3, [r7, #64]	; 0x40
 800302e:	2300      	movs	r3, #0
 8003030:	643b      	str	r3, [r7, #64]	; 0x40
 8003032:	e01a      	b.n	800306a <json_serialize_to_buffer_r+0x386>
 8003034:	2304      	movs	r3, #4
 8003036:	653b      	str	r3, [r7, #80]	; 0x50
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00e      	beq.n	800305c <json_serialize_to_buffer_r+0x378>
 800303e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003040:	461a      	mov	r2, r3
 8003042:	496a      	ldr	r1, [pc, #424]	; (80031ec <json_serialize_to_buffer_r+0x508>)
 8003044:	68b8      	ldr	r0, [r7, #8]
 8003046:	f007 facf 	bl	800a5e8 <memcpy>
 800304a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	4413      	add	r3, r2
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]
 8003054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	4413      	add	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800305e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003060:	4413      	add	r3, r2
 8003062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003066:	3301      	adds	r3, #1
 8003068:	643b      	str	r3, [r7, #64]	; 0x40
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800306e:	429a      	cmp	r2, r3
 8003070:	dae0      	bge.n	8003034 <json_serialize_to_buffer_r+0x350>
                }
                /* We do not support key names with embedded \0 chars */
                written = json_serialize_string(key, strlen(key), buf);
 8003072:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003074:	f7fd f884 	bl	8000180 <strlen>
 8003078:	4603      	mov	r3, r0
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	4619      	mov	r1, r3
 800307e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003080:	f000 f9c6 	bl	8003410 <json_serialize_string>
 8003084:	6538      	str	r0, [r7, #80]	; 0x50
                if (written < 0) {
 8003086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003088:	2b00      	cmp	r3, #0
 800308a:	da02      	bge.n	8003092 <json_serialize_to_buffer_r+0x3ae>
                    return -1;
 800308c:	f04f 33ff 	mov.w	r3, #4294967295
 8003090:	e1a9      	b.n	80033e6 <json_serialize_to_buffer_r+0x702>
                }
                if (buf != NULL) {
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <json_serialize_to_buffer_r+0x3bc>
                    buf += written;
 8003098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	4413      	add	r3, r2
 800309e:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 80030a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a4:	4413      	add	r3, r2
 80030a6:	64fb      	str	r3, [r7, #76]	; 0x4c
                APPEND_STRING(":");
 80030a8:	2301      	movs	r3, #1
 80030aa:	653b      	str	r3, [r7, #80]	; 0x50
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00e      	beq.n	80030d0 <json_serialize_to_buffer_r+0x3ec>
 80030b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030b4:	461a      	mov	r2, r3
 80030b6:	494e      	ldr	r1, [pc, #312]	; (80031f0 <json_serialize_to_buffer_r+0x50c>)
 80030b8:	68b8      	ldr	r0, [r7, #8]
 80030ba:	f007 fa95 	bl	800a5e8 <memcpy>
 80030be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	4413      	add	r3, r2
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
 80030c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	4413      	add	r3, r2
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030d4:	4413      	add	r3, r2
 80030d6:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (is_pretty) {
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d017      	beq.n	800310e <json_serialize_to_buffer_r+0x42a>
                    APPEND_STRING(" ");
 80030de:	2301      	movs	r3, #1
 80030e0:	653b      	str	r3, [r7, #80]	; 0x50
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00e      	beq.n	8003106 <json_serialize_to_buffer_r+0x422>
 80030e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ea:	461a      	mov	r2, r3
 80030ec:	4941      	ldr	r1, [pc, #260]	; (80031f4 <json_serialize_to_buffer_r+0x510>)
 80030ee:	68b8      	ldr	r0, [r7, #8]
 80030f0:	f007 fa7a 	bl	800a5e8 <memcpy>
 80030f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	4413      	add	r3, r2
 80030fa:	2200      	movs	r2, #0
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	4413      	add	r3, r2
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800310a:	4413      	add	r3, r2
 800310c:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                temp_value = json_object_get_value_at(object, i);
 800310e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003112:	f000 fef8 	bl	8003f06 <json_object_get_value_at>
 8003116:	6338      	str	r0, [r7, #48]	; 0x30
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68b9      	ldr	r1, [r7, #8]
 8003124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003126:	f7ff fddd 	bl	8002ce4 <json_serialize_to_buffer_r>
 800312a:	6538      	str	r0, [r7, #80]	; 0x50
                if (written < 0) {
 800312c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800312e:	2b00      	cmp	r3, #0
 8003130:	da02      	bge.n	8003138 <json_serialize_to_buffer_r+0x454>
                    return -1;
 8003132:	f04f 33ff 	mov.w	r3, #4294967295
 8003136:	e156      	b.n	80033e6 <json_serialize_to_buffer_r+0x702>
                }
                if (buf != NULL) {
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <json_serialize_to_buffer_r+0x462>
                    buf += written;
 800313e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	4413      	add	r3, r2
 8003144:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 8003146:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800314a:	4413      	add	r3, r2
 800314c:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (i < (count - 1)) {
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	3b01      	subs	r3, #1
 8003152:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003154:	429a      	cmp	r2, r3
 8003156:	d217      	bcs.n	8003188 <json_serialize_to_buffer_r+0x4a4>
                    APPEND_STRING(",");
 8003158:	2301      	movs	r3, #1
 800315a:	653b      	str	r3, [r7, #80]	; 0x50
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00e      	beq.n	8003180 <json_serialize_to_buffer_r+0x49c>
 8003162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003164:	461a      	mov	r2, r3
 8003166:	4924      	ldr	r1, [pc, #144]	; (80031f8 <json_serialize_to_buffer_r+0x514>)
 8003168:	68b8      	ldr	r0, [r7, #8]
 800316a:	f007 fa3d 	bl	800a5e8 <memcpy>
 800316e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	4413      	add	r3, r2
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
 8003178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	4413      	add	r3, r2
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003184:	4413      	add	r3, r2
 8003186:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                if (is_pretty) {
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d017      	beq.n	80031be <json_serialize_to_buffer_r+0x4da>
                    APPEND_STRING("\n");
 800318e:	2301      	movs	r3, #1
 8003190:	653b      	str	r3, [r7, #80]	; 0x50
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00e      	beq.n	80031b6 <json_serialize_to_buffer_r+0x4d2>
 8003198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800319a:	461a      	mov	r2, r3
 800319c:	4912      	ldr	r1, [pc, #72]	; (80031e8 <json_serialize_to_buffer_r+0x504>)
 800319e:	68b8      	ldr	r0, [r7, #8]
 80031a0:	f007 fa22 	bl	800a5e8 <memcpy>
 80031a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	4413      	add	r3, r2
 80031aa:	2200      	movs	r2, #0
 80031ac:	701a      	strb	r2, [r3, #0]
 80031ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	4413      	add	r3, r2
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ba:	4413      	add	r3, r2
 80031bc:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (i = 0; i < count; i++) {
 80031be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031c0:	3301      	adds	r3, #1
 80031c2:	657b      	str	r3, [r7, #84]	; 0x54
 80031c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	429a      	cmp	r2, r3
 80031ca:	f4ff af20 	bcc.w	800300e <json_serialize_to_buffer_r+0x32a>
                }
            }
            if (count > 0 && is_pretty) {
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d032      	beq.n	800323a <json_serialize_to_buffer_r+0x556>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d02f      	beq.n	800323a <json_serialize_to_buffer_r+0x556>
                APPEND_INDENT(level);
 80031da:	2300      	movs	r3, #0
 80031dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031de:	2300      	movs	r3, #0
 80031e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031e2:	e026      	b.n	8003232 <json_serialize_to_buffer_r+0x54e>
 80031e4:	0800d740 	.word	0x0800d740
 80031e8:	0800d72c 	.word	0x0800d72c
 80031ec:	0800d730 	.word	0x0800d730
 80031f0:	0800d744 	.word	0x0800d744
 80031f4:	0800d748 	.word	0x0800d748
 80031f8:	0800d738 	.word	0x0800d738
 80031fc:	2304      	movs	r3, #4
 80031fe:	653b      	str	r3, [r7, #80]	; 0x50
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00e      	beq.n	8003224 <json_serialize_to_buffer_r+0x540>
 8003206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003208:	461a      	mov	r2, r3
 800320a:	4979      	ldr	r1, [pc, #484]	; (80033f0 <json_serialize_to_buffer_r+0x70c>)
 800320c:	68b8      	ldr	r0, [r7, #8]
 800320e:	f007 f9eb 	bl	800a5e8 <memcpy>
 8003212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	4413      	add	r3, r2
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]
 800321c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	4413      	add	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
 8003224:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003228:	4413      	add	r3, r2
 800322a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800322c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800322e:	3301      	adds	r3, #1
 8003230:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003232:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	429a      	cmp	r2, r3
 8003238:	dbe0      	blt.n	80031fc <json_serialize_to_buffer_r+0x518>
            }
            APPEND_STRING("}");
 800323a:	2301      	movs	r3, #1
 800323c:	653b      	str	r3, [r7, #80]	; 0x50
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00e      	beq.n	8003262 <json_serialize_to_buffer_r+0x57e>
 8003244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003246:	461a      	mov	r2, r3
 8003248:	496a      	ldr	r1, [pc, #424]	; (80033f4 <json_serialize_to_buffer_r+0x710>)
 800324a:	68b8      	ldr	r0, [r7, #8]
 800324c:	f007 f9cc 	bl	800a5e8 <memcpy>
 8003250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	4413      	add	r3, r2
 8003256:	2200      	movs	r2, #0
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	4413      	add	r3, r2
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003266:	4413      	add	r3, r2
 8003268:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 800326a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800326c:	e0bb      	b.n	80033e6 <json_serialize_to_buffer_r+0x702>
        case JSONString:
            string = json_value_get_string(value);
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 fefa 	bl	8004068 <json_value_get_string>
 8003274:	6378      	str	r0, [r7, #52]	; 0x34
            if (string == NULL) {
 8003276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003278:	2b00      	cmp	r3, #0
 800327a:	d102      	bne.n	8003282 <json_serialize_to_buffer_r+0x59e>
                return -1;
 800327c:	f04f 33ff 	mov.w	r3, #4294967295
 8003280:	e0b1      	b.n	80033e6 <json_serialize_to_buffer_r+0x702>
            }
            len = json_value_get_string_len(value);
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 ff03 	bl	800408e <json_value_get_string_len>
 8003288:	6178      	str	r0, [r7, #20]
            written = json_serialize_string(string, len, buf);
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	6979      	ldr	r1, [r7, #20]
 800328e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003290:	f000 f8be 	bl	8003410 <json_serialize_string>
 8003294:	6538      	str	r0, [r7, #80]	; 0x50
            if (written < 0) {
 8003296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003298:	2b00      	cmp	r3, #0
 800329a:	da02      	bge.n	80032a2 <json_serialize_to_buffer_r+0x5be>
                return -1;
 800329c:	f04f 33ff 	mov.w	r3, #4294967295
 80032a0:	e0a1      	b.n	80033e6 <json_serialize_to_buffer_r+0x702>
            }
            if (buf != NULL) {
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <json_serialize_to_buffer_r+0x5cc>
                buf += written;
 80032a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	4413      	add	r3, r2
 80032ae:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 80032b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032b4:	4413      	add	r3, r2
 80032b6:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 80032b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ba:	e094      	b.n	80033e6 <json_serialize_to_buffer_r+0x702>
        case JSONBoolean:
            if (json_value_get_boolean(value)) {
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 ff14 	bl	80040ea <json_value_get_boolean>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d018      	beq.n	80032fa <json_serialize_to_buffer_r+0x616>
                APPEND_STRING("true");
 80032c8:	2304      	movs	r3, #4
 80032ca:	653b      	str	r3, [r7, #80]	; 0x50
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00e      	beq.n	80032f0 <json_serialize_to_buffer_r+0x60c>
 80032d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d4:	461a      	mov	r2, r3
 80032d6:	4948      	ldr	r1, [pc, #288]	; (80033f8 <json_serialize_to_buffer_r+0x714>)
 80032d8:	68b8      	ldr	r0, [r7, #8]
 80032da:	f007 f985 	bl	800a5e8 <memcpy>
 80032de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	4413      	add	r3, r2
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
 80032e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	4413      	add	r3, r2
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032f4:	4413      	add	r3, r2
 80032f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032f8:	e017      	b.n	800332a <json_serialize_to_buffer_r+0x646>
            } else {
                APPEND_STRING("false");
 80032fa:	2305      	movs	r3, #5
 80032fc:	653b      	str	r3, [r7, #80]	; 0x50
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00e      	beq.n	8003322 <json_serialize_to_buffer_r+0x63e>
 8003304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003306:	461a      	mov	r2, r3
 8003308:	493c      	ldr	r1, [pc, #240]	; (80033fc <json_serialize_to_buffer_r+0x718>)
 800330a:	68b8      	ldr	r0, [r7, #8]
 800330c:	f007 f96c 	bl	800a5e8 <memcpy>
 8003310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	4413      	add	r3, r2
 8003316:	2200      	movs	r2, #0
 8003318:	701a      	strb	r2, [r3, #0]
 800331a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	4413      	add	r3, r2
 8003320:	60bb      	str	r3, [r7, #8]
 8003322:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003326:	4413      	add	r3, r2
 8003328:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            return written_total;
 800332a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800332c:	e05b      	b.n	80033e6 <json_serialize_to_buffer_r+0x702>
        case JSONNumber:
            num = json_value_get_number(value);
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 fec0 	bl	80040b4 <json_value_get_number>
 8003334:	ed87 0b06 	vstr	d0, [r7, #24]
            if (buf != NULL) {
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <json_serialize_to_buffer_r+0x65e>
                num_buf = buf;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	663b      	str	r3, [r7, #96]	; 0x60
            }
            if (parson_number_serialization_function) {
 8003342:	4b2f      	ldr	r3, [pc, #188]	; (8003400 <json_serialize_to_buffer_r+0x71c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d007      	beq.n	800335a <json_serialize_to_buffer_r+0x676>
                written = parson_number_serialization_function(num, num_buf);
 800334a:	4b2d      	ldr	r3, [pc, #180]	; (8003400 <json_serialize_to_buffer_r+0x71c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003350:	ed97 0b06 	vldr	d0, [r7, #24]
 8003354:	4798      	blx	r3
 8003356:	6538      	str	r0, [r7, #80]	; 0x50
 8003358:	e013      	b.n	8003382 <json_serialize_to_buffer_r+0x69e>
            } else if (parson_float_format) {
 800335a:	4b2a      	ldr	r3, [pc, #168]	; (8003404 <json_serialize_to_buffer_r+0x720>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d008      	beq.n	8003374 <json_serialize_to_buffer_r+0x690>
                written = sprintf(num_buf, parson_float_format, num);
 8003362:	4b28      	ldr	r3, [pc, #160]	; (8003404 <json_serialize_to_buffer_r+0x720>)
 8003364:	6819      	ldr	r1, [r3, #0]
 8003366:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800336a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800336c:	f007 faea 	bl	800a944 <siprintf>
 8003370:	6538      	str	r0, [r7, #80]	; 0x50
 8003372:	e006      	b.n	8003382 <json_serialize_to_buffer_r+0x69e>
            } else {
                written = sprintf(num_buf, PARSON_DEFAULT_FLOAT_FORMAT, num);
 8003374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003378:	4923      	ldr	r1, [pc, #140]	; (8003408 <json_serialize_to_buffer_r+0x724>)
 800337a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800337c:	f007 fae2 	bl	800a944 <siprintf>
 8003380:	6538      	str	r0, [r7, #80]	; 0x50
            }
            if (written < 0) {
 8003382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003384:	2b00      	cmp	r3, #0
 8003386:	da02      	bge.n	800338e <json_serialize_to_buffer_r+0x6aa>
                return -1;
 8003388:	f04f 33ff 	mov.w	r3, #4294967295
 800338c:	e02b      	b.n	80033e6 <json_serialize_to_buffer_r+0x702>
            }
            if (buf != NULL) {
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <json_serialize_to_buffer_r+0x6b8>
                buf += written;
 8003394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	4413      	add	r3, r2
 800339a:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 800339c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800339e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033a0:	4413      	add	r3, r2
 80033a2:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 80033a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a6:	e01e      	b.n	80033e6 <json_serialize_to_buffer_r+0x702>
        case JSONNull:
            APPEND_STRING("null");
 80033a8:	2304      	movs	r3, #4
 80033aa:	653b      	str	r3, [r7, #80]	; 0x50
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00e      	beq.n	80033d0 <json_serialize_to_buffer_r+0x6ec>
 80033b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033b4:	461a      	mov	r2, r3
 80033b6:	4915      	ldr	r1, [pc, #84]	; (800340c <json_serialize_to_buffer_r+0x728>)
 80033b8:	68b8      	ldr	r0, [r7, #8]
 80033ba:	f007 f915 	bl	800a5e8 <memcpy>
 80033be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	4413      	add	r3, r2
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]
 80033c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	4413      	add	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033d4:	4413      	add	r3, r2
 80033d6:	64fb      	str	r3, [r7, #76]	; 0x4c
            return written_total;
 80033d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033da:	e004      	b.n	80033e6 <json_serialize_to_buffer_r+0x702>
        case JSONError:
            return -1;
 80033dc:	f04f 33ff 	mov.w	r3, #4294967295
 80033e0:	e001      	b.n	80033e6 <json_serialize_to_buffer_r+0x702>
        default:
            return -1;
 80033e2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3758      	adds	r7, #88	; 0x58
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	0800d730 	.word	0x0800d730
 80033f4:	0800d74c 	.word	0x0800d74c
 80033f8:	0800d710 	.word	0x0800d710
 80033fc:	0800d718 	.word	0x0800d718
 8003400:	20000014 	.word	0x20000014
 8003404:	20000218 	.word	0x20000218
 8003408:	0800d750 	.word	0x0800d750
 800340c:	0800d720 	.word	0x0800d720

08003410 <json_serialize_string>:

static int json_serialize_string(const char *string, size_t len, char *buf) {
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 800341c:	2300      	movs	r3, #0
 800341e:	61fb      	str	r3, [r7, #28]
    char c = '\0';
 8003420:	2300      	movs	r3, #0
 8003422:	75fb      	strb	r3, [r7, #23]
    int written = -1, written_total = 0;
 8003424:	f04f 33ff 	mov.w	r3, #4294967295
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	2300      	movs	r3, #0
 800342c:	61bb      	str	r3, [r7, #24]
    // +BCH
    //APPEND_STRING("\"");
    APPEND_STRING("\\\"");
 800342e:	2302      	movs	r3, #2
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00e      	beq.n	8003456 <json_serialize_string+0x46>
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	461a      	mov	r2, r3
 800343c:	49b8      	ldr	r1, [pc, #736]	; (8003720 <json_serialize_string+0x310>)
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f007 f8d2 	bl	800a5e8 <memcpy>
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	4413      	add	r3, r2
 800344a:	2200      	movs	r2, #0
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	4413      	add	r3, r2
 8003454:	607b      	str	r3, [r7, #4]
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	4413      	add	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < len; i++) {
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
 8003462:	f000 bc9b 	b.w	8003d9c <json_serialize_string+0x98c>
        c = string[i];
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	4413      	add	r3, r2
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	75fb      	strb	r3, [r7, #23]
        switch (c) {
 8003470:	7dfb      	ldrb	r3, [r7, #23]
 8003472:	2b5c      	cmp	r3, #92	; 0x5c
 8003474:	f200 8482 	bhi.w	8003d7c <json_serialize_string+0x96c>
 8003478:	a201      	add	r2, pc, #4	; (adr r2, 8003480 <json_serialize_string+0x70>)
 800347a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347e:	bf00      	nop
 8003480:	0800376b 	.word	0x0800376b
 8003484:	0800379d 	.word	0x0800379d
 8003488:	080037cf 	.word	0x080037cf
 800348c:	08003801 	.word	0x08003801
 8003490:	08003833 	.word	0x08003833
 8003494:	08003865 	.word	0x08003865
 8003498:	08003897 	.word	0x08003897
 800349c:	080038c9 	.word	0x080038c9
 80034a0:	08003659 	.word	0x08003659
 80034a4:	08003739 	.word	0x08003739
 80034a8:	080036bd 	.word	0x080036bd
 80034ac:	080038fb 	.word	0x080038fb
 80034b0:	0800368b 	.word	0x0800368b
 80034b4:	080036ef 	.word	0x080036ef
 80034b8:	0800392d 	.word	0x0800392d
 80034bc:	0800395f 	.word	0x0800395f
 80034c0:	080039c1 	.word	0x080039c1
 80034c4:	080039f3 	.word	0x080039f3
 80034c8:	08003a25 	.word	0x08003a25
 80034cc:	08003a57 	.word	0x08003a57
 80034d0:	08003a89 	.word	0x08003a89
 80034d4:	08003abb 	.word	0x08003abb
 80034d8:	08003aed 	.word	0x08003aed
 80034dc:	08003b1f 	.word	0x08003b1f
 80034e0:	08003b51 	.word	0x08003b51
 80034e4:	08003b83 	.word	0x08003b83
 80034e8:	08003bb5 	.word	0x08003bb5
 80034ec:	08003be7 	.word	0x08003be7
 80034f0:	08003c49 	.word	0x08003c49
 80034f4:	08003c7b 	.word	0x08003c7b
 80034f8:	08003cad 	.word	0x08003cad
 80034fc:	08003cdf 	.word	0x08003cdf
 8003500:	08003d7d 	.word	0x08003d7d
 8003504:	08003d7d 	.word	0x08003d7d
 8003508:	080035f5 	.word	0x080035f5
 800350c:	08003d7d 	.word	0x08003d7d
 8003510:	08003d7d 	.word	0x08003d7d
 8003514:	08003d7d 	.word	0x08003d7d
 8003518:	08003d7d 	.word	0x08003d7d
 800351c:	08003d7d 	.word	0x08003d7d
 8003520:	08003d7d 	.word	0x08003d7d
 8003524:	08003d7d 	.word	0x08003d7d
 8003528:	08003d7d 	.word	0x08003d7d
 800352c:	08003d7d 	.word	0x08003d7d
 8003530:	08003d7d 	.word	0x08003d7d
 8003534:	08003d7d 	.word	0x08003d7d
 8003538:	08003d7d 	.word	0x08003d7d
 800353c:	08003d11 	.word	0x08003d11
 8003540:	08003d7d 	.word	0x08003d7d
 8003544:	08003d7d 	.word	0x08003d7d
 8003548:	08003d7d 	.word	0x08003d7d
 800354c:	08003d7d 	.word	0x08003d7d
 8003550:	08003d7d 	.word	0x08003d7d
 8003554:	08003d7d 	.word	0x08003d7d
 8003558:	08003d7d 	.word	0x08003d7d
 800355c:	08003d7d 	.word	0x08003d7d
 8003560:	08003d7d 	.word	0x08003d7d
 8003564:	08003d7d 	.word	0x08003d7d
 8003568:	08003d7d 	.word	0x08003d7d
 800356c:	08003d7d 	.word	0x08003d7d
 8003570:	08003d7d 	.word	0x08003d7d
 8003574:	08003d7d 	.word	0x08003d7d
 8003578:	08003d7d 	.word	0x08003d7d
 800357c:	08003d7d 	.word	0x08003d7d
 8003580:	08003d7d 	.word	0x08003d7d
 8003584:	08003d7d 	.word	0x08003d7d
 8003588:	08003d7d 	.word	0x08003d7d
 800358c:	08003d7d 	.word	0x08003d7d
 8003590:	08003d7d 	.word	0x08003d7d
 8003594:	08003d7d 	.word	0x08003d7d
 8003598:	08003d7d 	.word	0x08003d7d
 800359c:	08003d7d 	.word	0x08003d7d
 80035a0:	08003d7d 	.word	0x08003d7d
 80035a4:	08003d7d 	.word	0x08003d7d
 80035a8:	08003d7d 	.word	0x08003d7d
 80035ac:	08003d7d 	.word	0x08003d7d
 80035b0:	08003d7d 	.word	0x08003d7d
 80035b4:	08003d7d 	.word	0x08003d7d
 80035b8:	08003d7d 	.word	0x08003d7d
 80035bc:	08003d7d 	.word	0x08003d7d
 80035c0:	08003d7d 	.word	0x08003d7d
 80035c4:	08003d7d 	.word	0x08003d7d
 80035c8:	08003d7d 	.word	0x08003d7d
 80035cc:	08003d7d 	.word	0x08003d7d
 80035d0:	08003d7d 	.word	0x08003d7d
 80035d4:	08003d7d 	.word	0x08003d7d
 80035d8:	08003d7d 	.word	0x08003d7d
 80035dc:	08003d7d 	.word	0x08003d7d
 80035e0:	08003d7d 	.word	0x08003d7d
 80035e4:	08003d7d 	.word	0x08003d7d
 80035e8:	08003d7d 	.word	0x08003d7d
 80035ec:	08003d7d 	.word	0x08003d7d
 80035f0:	08003627 	.word	0x08003627
        	case '\"': APPEND_STRING("\\\""); break;
 80035f4:	2302      	movs	r3, #2
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00e      	beq.n	800361c <json_serialize_string+0x20c>
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	461a      	mov	r2, r3
 8003602:	4947      	ldr	r1, [pc, #284]	; (8003720 <json_serialize_string+0x310>)
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f006 ffef 	bl	800a5e8 <memcpy>
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	4413      	add	r3, r2
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	607b      	str	r3, [r7, #4]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4413      	add	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
 8003624:	e3b7      	b.n	8003d96 <json_serialize_string+0x986>
            case '\\': APPEND_STRING("\\\\"); break;
 8003626:	2302      	movs	r3, #2
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00e      	beq.n	800364e <json_serialize_string+0x23e>
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	461a      	mov	r2, r3
 8003634:	493b      	ldr	r1, [pc, #236]	; (8003724 <json_serialize_string+0x314>)
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f006 ffd6 	bl	800a5e8 <memcpy>
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	4413      	add	r3, r2
 8003642:	2200      	movs	r2, #0
 8003644:	701a      	strb	r2, [r3, #0]
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	4413      	add	r3, r2
 800364c:	607b      	str	r3, [r7, #4]
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4413      	add	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
 8003656:	e39e      	b.n	8003d96 <json_serialize_string+0x986>
            case '\b': APPEND_STRING("\\b"); break;
 8003658:	2302      	movs	r3, #2
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00e      	beq.n	8003680 <json_serialize_string+0x270>
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	461a      	mov	r2, r3
 8003666:	4930      	ldr	r1, [pc, #192]	; (8003728 <json_serialize_string+0x318>)
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f006 ffbd 	bl	800a5e8 <memcpy>
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	4413      	add	r3, r2
 8003674:	2200      	movs	r2, #0
 8003676:	701a      	strb	r2, [r3, #0]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	4413      	add	r3, r2
 800367e:	607b      	str	r3, [r7, #4]
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4413      	add	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
 8003688:	e385      	b.n	8003d96 <json_serialize_string+0x986>
            case '\f': APPEND_STRING("\\f"); break;
 800368a:	2302      	movs	r3, #2
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00e      	beq.n	80036b2 <json_serialize_string+0x2a2>
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	461a      	mov	r2, r3
 8003698:	4924      	ldr	r1, [pc, #144]	; (800372c <json_serialize_string+0x31c>)
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f006 ffa4 	bl	800a5e8 <memcpy>
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	4413      	add	r3, r2
 80036a6:	2200      	movs	r2, #0
 80036a8:	701a      	strb	r2, [r3, #0]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	4413      	add	r3, r2
 80036b0:	607b      	str	r3, [r7, #4]
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4413      	add	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
 80036ba:	e36c      	b.n	8003d96 <json_serialize_string+0x986>
            case '\n': APPEND_STRING("\\n"); break;
 80036bc:	2302      	movs	r3, #2
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00e      	beq.n	80036e4 <json_serialize_string+0x2d4>
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	461a      	mov	r2, r3
 80036ca:	4919      	ldr	r1, [pc, #100]	; (8003730 <json_serialize_string+0x320>)
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f006 ff8b 	bl	800a5e8 <memcpy>
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	4413      	add	r3, r2
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	607b      	str	r3, [r7, #4]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	4413      	add	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
 80036ec:	e353      	b.n	8003d96 <json_serialize_string+0x986>
            case '\r': APPEND_STRING("\\r"); break;
 80036ee:	2302      	movs	r3, #2
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00e      	beq.n	8003716 <json_serialize_string+0x306>
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	461a      	mov	r2, r3
 80036fc:	490d      	ldr	r1, [pc, #52]	; (8003734 <json_serialize_string+0x324>)
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f006 ff72 	bl	800a5e8 <memcpy>
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	4413      	add	r3, r2
 800370a:	2200      	movs	r2, #0
 800370c:	701a      	strb	r2, [r3, #0]
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	4413      	add	r3, r2
 8003714:	607b      	str	r3, [r7, #4]
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4413      	add	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	e33a      	b.n	8003d96 <json_serialize_string+0x986>
 8003720:	0800d758 	.word	0x0800d758
 8003724:	0800d75c 	.word	0x0800d75c
 8003728:	0800d760 	.word	0x0800d760
 800372c:	0800d764 	.word	0x0800d764
 8003730:	0800d768 	.word	0x0800d768
 8003734:	0800d76c 	.word	0x0800d76c
            case '\t': APPEND_STRING("\\t"); break;
 8003738:	2302      	movs	r3, #2
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00e      	beq.n	8003760 <json_serialize_string+0x350>
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	461a      	mov	r2, r3
 8003746:	4992      	ldr	r1, [pc, #584]	; (8003990 <json_serialize_string+0x580>)
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f006 ff4d 	bl	800a5e8 <memcpy>
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	4413      	add	r3, r2
 8003754:	2200      	movs	r2, #0
 8003756:	701a      	strb	r2, [r3, #0]
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	4413      	add	r3, r2
 800375e:	607b      	str	r3, [r7, #4]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4413      	add	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
 8003768:	e315      	b.n	8003d96 <json_serialize_string+0x986>
            case '\x00': APPEND_STRING("\\u0000"); break;
 800376a:	2306      	movs	r3, #6
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00e      	beq.n	8003792 <json_serialize_string+0x382>
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	461a      	mov	r2, r3
 8003778:	4986      	ldr	r1, [pc, #536]	; (8003994 <json_serialize_string+0x584>)
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f006 ff34 	bl	800a5e8 <memcpy>
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	4413      	add	r3, r2
 8003786:	2200      	movs	r2, #0
 8003788:	701a      	strb	r2, [r3, #0]
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	4413      	add	r3, r2
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4413      	add	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	e2fc      	b.n	8003d96 <json_serialize_string+0x986>
            case '\x01': APPEND_STRING("\\u0001"); break;
 800379c:	2306      	movs	r3, #6
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00e      	beq.n	80037c4 <json_serialize_string+0x3b4>
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	461a      	mov	r2, r3
 80037aa:	497b      	ldr	r1, [pc, #492]	; (8003998 <json_serialize_string+0x588>)
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f006 ff1b 	bl	800a5e8 <memcpy>
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	4413      	add	r3, r2
 80037b8:	2200      	movs	r2, #0
 80037ba:	701a      	strb	r2, [r3, #0]
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	4413      	add	r3, r2
 80037c2:	607b      	str	r3, [r7, #4]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4413      	add	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
 80037cc:	e2e3      	b.n	8003d96 <json_serialize_string+0x986>
            case '\x02': APPEND_STRING("\\u0002"); break;
 80037ce:	2306      	movs	r3, #6
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00e      	beq.n	80037f6 <json_serialize_string+0x3e6>
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	461a      	mov	r2, r3
 80037dc:	496f      	ldr	r1, [pc, #444]	; (800399c <json_serialize_string+0x58c>)
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f006 ff02 	bl	800a5e8 <memcpy>
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	4413      	add	r3, r2
 80037ea:	2200      	movs	r2, #0
 80037ec:	701a      	strb	r2, [r3, #0]
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	4413      	add	r3, r2
 80037f4:	607b      	str	r3, [r7, #4]
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	e2ca      	b.n	8003d96 <json_serialize_string+0x986>
            case '\x03': APPEND_STRING("\\u0003"); break;
 8003800:	2306      	movs	r3, #6
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00e      	beq.n	8003828 <json_serialize_string+0x418>
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	461a      	mov	r2, r3
 800380e:	4964      	ldr	r1, [pc, #400]	; (80039a0 <json_serialize_string+0x590>)
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f006 fee9 	bl	800a5e8 <memcpy>
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	4413      	add	r3, r2
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	4413      	add	r3, r2
 8003826:	607b      	str	r3, [r7, #4]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4413      	add	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
 8003830:	e2b1      	b.n	8003d96 <json_serialize_string+0x986>
            case '\x04': APPEND_STRING("\\u0004"); break;
 8003832:	2306      	movs	r3, #6
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00e      	beq.n	800385a <json_serialize_string+0x44a>
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	461a      	mov	r2, r3
 8003840:	4958      	ldr	r1, [pc, #352]	; (80039a4 <json_serialize_string+0x594>)
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f006 fed0 	bl	800a5e8 <memcpy>
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	4413      	add	r3, r2
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	4413      	add	r3, r2
 8003858:	607b      	str	r3, [r7, #4]
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	4413      	add	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
 8003862:	e298      	b.n	8003d96 <json_serialize_string+0x986>
            case '\x05': APPEND_STRING("\\u0005"); break;
 8003864:	2306      	movs	r3, #6
 8003866:	613b      	str	r3, [r7, #16]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00e      	beq.n	800388c <json_serialize_string+0x47c>
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	461a      	mov	r2, r3
 8003872:	494d      	ldr	r1, [pc, #308]	; (80039a8 <json_serialize_string+0x598>)
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f006 feb7 	bl	800a5e8 <memcpy>
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	4413      	add	r3, r2
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	4413      	add	r3, r2
 800388a:	607b      	str	r3, [r7, #4]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4413      	add	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
 8003894:	e27f      	b.n	8003d96 <json_serialize_string+0x986>
            case '\x06': APPEND_STRING("\\u0006"); break;
 8003896:	2306      	movs	r3, #6
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00e      	beq.n	80038be <json_serialize_string+0x4ae>
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	461a      	mov	r2, r3
 80038a4:	4941      	ldr	r1, [pc, #260]	; (80039ac <json_serialize_string+0x59c>)
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f006 fe9e 	bl	800a5e8 <memcpy>
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	4413      	add	r3, r2
 80038b2:	2200      	movs	r2, #0
 80038b4:	701a      	strb	r2, [r3, #0]
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	4413      	add	r3, r2
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4413      	add	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	e266      	b.n	8003d96 <json_serialize_string+0x986>
            case '\x07': APPEND_STRING("\\u0007"); break;
 80038c8:	2306      	movs	r3, #6
 80038ca:	613b      	str	r3, [r7, #16]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00e      	beq.n	80038f0 <json_serialize_string+0x4e0>
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	461a      	mov	r2, r3
 80038d6:	4936      	ldr	r1, [pc, #216]	; (80039b0 <json_serialize_string+0x5a0>)
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f006 fe85 	bl	800a5e8 <memcpy>
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	4413      	add	r3, r2
 80038e4:	2200      	movs	r2, #0
 80038e6:	701a      	strb	r2, [r3, #0]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	4413      	add	r3, r2
 80038ee:	607b      	str	r3, [r7, #4]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4413      	add	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
 80038f8:	e24d      	b.n	8003d96 <json_serialize_string+0x986>
            /* '\x08' duplicate: '\b' */
            /* '\x09' duplicate: '\t' */
            /* '\x0a' duplicate: '\n' */
            case '\x0b': APPEND_STRING("\\u000b"); break;
 80038fa:	2306      	movs	r3, #6
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00e      	beq.n	8003922 <json_serialize_string+0x512>
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	461a      	mov	r2, r3
 8003908:	492a      	ldr	r1, [pc, #168]	; (80039b4 <json_serialize_string+0x5a4>)
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f006 fe6c 	bl	800a5e8 <memcpy>
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	4413      	add	r3, r2
 8003916:	2200      	movs	r2, #0
 8003918:	701a      	strb	r2, [r3, #0]
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	4413      	add	r3, r2
 8003920:	607b      	str	r3, [r7, #4]
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4413      	add	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
 800392a:	e234      	b.n	8003d96 <json_serialize_string+0x986>
            /* '\x0c' duplicate: '\f' */
            /* '\x0d' duplicate: '\r' */
            case '\x0e': APPEND_STRING("\\u000e"); break;
 800392c:	2306      	movs	r3, #6
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00e      	beq.n	8003954 <json_serialize_string+0x544>
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	461a      	mov	r2, r3
 800393a:	491f      	ldr	r1, [pc, #124]	; (80039b8 <json_serialize_string+0x5a8>)
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f006 fe53 	bl	800a5e8 <memcpy>
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	4413      	add	r3, r2
 8003948:	2200      	movs	r2, #0
 800394a:	701a      	strb	r2, [r3, #0]
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	4413      	add	r3, r2
 8003952:	607b      	str	r3, [r7, #4]
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4413      	add	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
 800395c:	e21b      	b.n	8003d96 <json_serialize_string+0x986>
            case '\x0f': APPEND_STRING("\\u000f"); break;
 800395e:	2306      	movs	r3, #6
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00e      	beq.n	8003986 <json_serialize_string+0x576>
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	461a      	mov	r2, r3
 800396c:	4913      	ldr	r1, [pc, #76]	; (80039bc <json_serialize_string+0x5ac>)
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f006 fe3a 	bl	800a5e8 <memcpy>
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	4413      	add	r3, r2
 800397a:	2200      	movs	r2, #0
 800397c:	701a      	strb	r2, [r3, #0]
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	4413      	add	r3, r2
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4413      	add	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
 800398e:	e202      	b.n	8003d96 <json_serialize_string+0x986>
 8003990:	0800d770 	.word	0x0800d770
 8003994:	0800d774 	.word	0x0800d774
 8003998:	0800d77c 	.word	0x0800d77c
 800399c:	0800d784 	.word	0x0800d784
 80039a0:	0800d78c 	.word	0x0800d78c
 80039a4:	0800d794 	.word	0x0800d794
 80039a8:	0800d79c 	.word	0x0800d79c
 80039ac:	0800d7a4 	.word	0x0800d7a4
 80039b0:	0800d7ac 	.word	0x0800d7ac
 80039b4:	0800d7b4 	.word	0x0800d7b4
 80039b8:	0800d7bc 	.word	0x0800d7bc
 80039bc:	0800d7c4 	.word	0x0800d7c4
            case '\x10': APPEND_STRING("\\u0010"); break;
 80039c0:	2306      	movs	r3, #6
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00e      	beq.n	80039e8 <json_serialize_string+0x5d8>
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	461a      	mov	r2, r3
 80039ce:	4992      	ldr	r1, [pc, #584]	; (8003c18 <json_serialize_string+0x808>)
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f006 fe09 	bl	800a5e8 <memcpy>
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	4413      	add	r3, r2
 80039dc:	2200      	movs	r2, #0
 80039de:	701a      	strb	r2, [r3, #0]
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	4413      	add	r3, r2
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	4413      	add	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
 80039f0:	e1d1      	b.n	8003d96 <json_serialize_string+0x986>
            case '\x11': APPEND_STRING("\\u0011"); break;
 80039f2:	2306      	movs	r3, #6
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00e      	beq.n	8003a1a <json_serialize_string+0x60a>
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	461a      	mov	r2, r3
 8003a00:	4986      	ldr	r1, [pc, #536]	; (8003c1c <json_serialize_string+0x80c>)
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f006 fdf0 	bl	800a5e8 <memcpy>
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	2200      	movs	r2, #0
 8003a10:	701a      	strb	r2, [r3, #0]
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	4413      	add	r3, r2
 8003a18:	607b      	str	r3, [r7, #4]
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4413      	add	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	e1b8      	b.n	8003d96 <json_serialize_string+0x986>
            case '\x12': APPEND_STRING("\\u0012"); break;
 8003a24:	2306      	movs	r3, #6
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00e      	beq.n	8003a4c <json_serialize_string+0x63c>
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	461a      	mov	r2, r3
 8003a32:	497b      	ldr	r1, [pc, #492]	; (8003c20 <json_serialize_string+0x810>)
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f006 fdd7 	bl	800a5e8 <memcpy>
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	4413      	add	r3, r2
 8003a40:	2200      	movs	r2, #0
 8003a42:	701a      	strb	r2, [r3, #0]
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	4413      	add	r3, r2
 8003a4a:	607b      	str	r3, [r7, #4]
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	4413      	add	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	e19f      	b.n	8003d96 <json_serialize_string+0x986>
            case '\x13': APPEND_STRING("\\u0013"); break;
 8003a56:	2306      	movs	r3, #6
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00e      	beq.n	8003a7e <json_serialize_string+0x66e>
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	461a      	mov	r2, r3
 8003a64:	496f      	ldr	r1, [pc, #444]	; (8003c24 <json_serialize_string+0x814>)
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f006 fdbe 	bl	800a5e8 <memcpy>
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	4413      	add	r3, r2
 8003a72:	2200      	movs	r2, #0
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	607b      	str	r3, [r7, #4]
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4413      	add	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	e186      	b.n	8003d96 <json_serialize_string+0x986>
            case '\x14': APPEND_STRING("\\u0014"); break;
 8003a88:	2306      	movs	r3, #6
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00e      	beq.n	8003ab0 <json_serialize_string+0x6a0>
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	461a      	mov	r2, r3
 8003a96:	4964      	ldr	r1, [pc, #400]	; (8003c28 <json_serialize_string+0x818>)
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f006 fda5 	bl	800a5e8 <memcpy>
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	701a      	strb	r2, [r3, #0]
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	607b      	str	r3, [r7, #4]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
 8003ab8:	e16d      	b.n	8003d96 <json_serialize_string+0x986>
            case '\x15': APPEND_STRING("\\u0015"); break;
 8003aba:	2306      	movs	r3, #6
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00e      	beq.n	8003ae2 <json_serialize_string+0x6d2>
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	4958      	ldr	r1, [pc, #352]	; (8003c2c <json_serialize_string+0x81c>)
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f006 fd8c 	bl	800a5e8 <memcpy>
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	4413      	add	r3, r2
 8003ae0:	607b      	str	r3, [r7, #4]
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	e154      	b.n	8003d96 <json_serialize_string+0x986>
            case '\x16': APPEND_STRING("\\u0016"); break;
 8003aec:	2306      	movs	r3, #6
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00e      	beq.n	8003b14 <json_serialize_string+0x704>
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	461a      	mov	r2, r3
 8003afa:	494d      	ldr	r1, [pc, #308]	; (8003c30 <json_serialize_string+0x820>)
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f006 fd73 	bl	800a5e8 <memcpy>
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	4413      	add	r3, r2
 8003b08:	2200      	movs	r2, #0
 8003b0a:	701a      	strb	r2, [r3, #0]
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	4413      	add	r3, r2
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4413      	add	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
 8003b1c:	e13b      	b.n	8003d96 <json_serialize_string+0x986>
            case '\x17': APPEND_STRING("\\u0017"); break;
 8003b1e:	2306      	movs	r3, #6
 8003b20:	613b      	str	r3, [r7, #16]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00e      	beq.n	8003b46 <json_serialize_string+0x736>
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	4941      	ldr	r1, [pc, #260]	; (8003c34 <json_serialize_string+0x824>)
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f006 fd5a 	bl	800a5e8 <memcpy>
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4413      	add	r3, r2
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	701a      	strb	r2, [r3, #0]
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	4413      	add	r3, r2
 8003b44:	607b      	str	r3, [r7, #4]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	e122      	b.n	8003d96 <json_serialize_string+0x986>
            case '\x18': APPEND_STRING("\\u0018"); break;
 8003b50:	2306      	movs	r3, #6
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00e      	beq.n	8003b78 <json_serialize_string+0x768>
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	4936      	ldr	r1, [pc, #216]	; (8003c38 <json_serialize_string+0x828>)
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f006 fd41 	bl	800a5e8 <memcpy>
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	4413      	add	r3, r2
 8003b76:	607b      	str	r3, [r7, #4]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
 8003b80:	e109      	b.n	8003d96 <json_serialize_string+0x986>
            case '\x19': APPEND_STRING("\\u0019"); break;
 8003b82:	2306      	movs	r3, #6
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00e      	beq.n	8003baa <json_serialize_string+0x79a>
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	492a      	ldr	r1, [pc, #168]	; (8003c3c <json_serialize_string+0x82c>)
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f006 fd28 	bl	800a5e8 <memcpy>
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	701a      	strb	r2, [r3, #0]
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	607b      	str	r3, [r7, #4]
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	4413      	add	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
 8003bb2:	e0f0      	b.n	8003d96 <json_serialize_string+0x986>
            case '\x1a': APPEND_STRING("\\u001a"); break;
 8003bb4:	2306      	movs	r3, #6
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00e      	beq.n	8003bdc <json_serialize_string+0x7cc>
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	491f      	ldr	r1, [pc, #124]	; (8003c40 <json_serialize_string+0x830>)
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f006 fd0f 	bl	800a5e8 <memcpy>
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	4413      	add	r3, r2
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	701a      	strb	r2, [r3, #0]
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	607b      	str	r3, [r7, #4]
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4413      	add	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
 8003be4:	e0d7      	b.n	8003d96 <json_serialize_string+0x986>
            case '\x1b': APPEND_STRING("\\u001b"); break;
 8003be6:	2306      	movs	r3, #6
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00e      	beq.n	8003c0e <json_serialize_string+0x7fe>
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4913      	ldr	r1, [pc, #76]	; (8003c44 <json_serialize_string+0x834>)
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f006 fcf6 	bl	800a5e8 <memcpy>
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	4413      	add	r3, r2
 8003c02:	2200      	movs	r2, #0
 8003c04:	701a      	strb	r2, [r3, #0]
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	607b      	str	r3, [r7, #4]
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	4413      	add	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	e0be      	b.n	8003d96 <json_serialize_string+0x986>
 8003c18:	0800d7cc 	.word	0x0800d7cc
 8003c1c:	0800d7d4 	.word	0x0800d7d4
 8003c20:	0800d7dc 	.word	0x0800d7dc
 8003c24:	0800d7e4 	.word	0x0800d7e4
 8003c28:	0800d7ec 	.word	0x0800d7ec
 8003c2c:	0800d7f4 	.word	0x0800d7f4
 8003c30:	0800d7fc 	.word	0x0800d7fc
 8003c34:	0800d804 	.word	0x0800d804
 8003c38:	0800d80c 	.word	0x0800d80c
 8003c3c:	0800d814 	.word	0x0800d814
 8003c40:	0800d81c 	.word	0x0800d81c
 8003c44:	0800d824 	.word	0x0800d824
            case '\x1c': APPEND_STRING("\\u001c"); break;
 8003c48:	2306      	movs	r3, #6
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00e      	beq.n	8003c70 <json_serialize_string+0x860>
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	461a      	mov	r2, r3
 8003c56:	4962      	ldr	r1, [pc, #392]	; (8003de0 <json_serialize_string+0x9d0>)
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f006 fcc5 	bl	800a5e8 <memcpy>
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	4413      	add	r3, r2
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	607b      	str	r3, [r7, #4]
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	4413      	add	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
 8003c78:	e08d      	b.n	8003d96 <json_serialize_string+0x986>
            case '\x1d': APPEND_STRING("\\u001d"); break;
 8003c7a:	2306      	movs	r3, #6
 8003c7c:	613b      	str	r3, [r7, #16]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00e      	beq.n	8003ca2 <json_serialize_string+0x892>
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	461a      	mov	r2, r3
 8003c88:	4956      	ldr	r1, [pc, #344]	; (8003de4 <json_serialize_string+0x9d4>)
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f006 fcac 	bl	800a5e8 <memcpy>
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	2200      	movs	r2, #0
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	607b      	str	r3, [r7, #4]
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	e074      	b.n	8003d96 <json_serialize_string+0x986>
            case '\x1e': APPEND_STRING("\\u001e"); break;
 8003cac:	2306      	movs	r3, #6
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00e      	beq.n	8003cd4 <json_serialize_string+0x8c4>
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	494b      	ldr	r1, [pc, #300]	; (8003de8 <json_serialize_string+0x9d8>)
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f006 fc93 	bl	800a5e8 <memcpy>
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	2200      	movs	r2, #0
 8003cca:	701a      	strb	r2, [r3, #0]
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	607b      	str	r3, [r7, #4]
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	4413      	add	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
 8003cdc:	e05b      	b.n	8003d96 <json_serialize_string+0x986>
            case '\x1f': APPEND_STRING("\\u001f"); break;
 8003cde:	2306      	movs	r3, #6
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00e      	beq.n	8003d06 <json_serialize_string+0x8f6>
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	461a      	mov	r2, r3
 8003cec:	493f      	ldr	r1, [pc, #252]	; (8003dec <json_serialize_string+0x9dc>)
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f006 fc7a 	bl	800a5e8 <memcpy>
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	4413      	add	r3, r2
 8003d04:	607b      	str	r3, [r7, #4]
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
 8003d0e:	e042      	b.n	8003d96 <json_serialize_string+0x986>
            case '/':
                if (parson_escape_slashes) {
 8003d10:	4b37      	ldr	r3, [pc, #220]	; (8003df0 <json_serialize_string+0x9e0>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d018      	beq.n	8003d4a <json_serialize_string+0x93a>
                    APPEND_STRING("\\/");  /* to make json embeddable in xml\/html */
 8003d18:	2302      	movs	r3, #2
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00e      	beq.n	8003d40 <json_serialize_string+0x930>
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	461a      	mov	r2, r3
 8003d26:	4933      	ldr	r1, [pc, #204]	; (8003df4 <json_serialize_string+0x9e4>)
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f006 fc5d 	bl	800a5e8 <memcpy>
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	4413      	add	r3, r2
 8003d34:	2200      	movs	r2, #0
 8003d36:	701a      	strb	r2, [r3, #0]
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	607b      	str	r3, [r7, #4]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4413      	add	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
                } else {
                    APPEND_STRING("/");
                }
                break;
 8003d48:	e025      	b.n	8003d96 <json_serialize_string+0x986>
                    APPEND_STRING("/");
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00e      	beq.n	8003d72 <json_serialize_string+0x962>
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	461a      	mov	r2, r3
 8003d58:	4927      	ldr	r1, [pc, #156]	; (8003df8 <json_serialize_string+0x9e8>)
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f006 fc44 	bl	800a5e8 <memcpy>
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	4413      	add	r3, r2
 8003d66:	2200      	movs	r2, #0
 8003d68:	701a      	strb	r2, [r3, #0]
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	4413      	add	r3, r2
 8003d70:	607b      	str	r3, [r7, #4]
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	4413      	add	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
                break;
 8003d7a:	e00c      	b.n	8003d96 <json_serialize_string+0x986>
            default:
                if (buf != NULL) {
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d005      	beq.n	8003d8e <json_serialize_string+0x97e>
                    buf[0] = c;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	7dfa      	ldrb	r2, [r7, #23]
 8003d86:	701a      	strb	r2, [r3, #0]
                    buf += 1;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	607b      	str	r3, [r7, #4]
                }
                written_total += 1;
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	3301      	adds	r3, #1
 8003d92:	61bb      	str	r3, [r7, #24]
                break;
 8003d94:	bf00      	nop
    for (i = 0; i < len; i++) {
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	61fb      	str	r3, [r7, #28]
 8003d9c:	69fa      	ldr	r2, [r7, #28]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	f4ff ab60 	bcc.w	8003466 <json_serialize_string+0x56>
        }
    }
    // +BCH
	//APPEND_STRING("\"");
	APPEND_STRING("\\\"");
 8003da6:	2302      	movs	r3, #2
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00e      	beq.n	8003dce <json_serialize_string+0x9be>
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	461a      	mov	r2, r3
 8003db4:	4911      	ldr	r1, [pc, #68]	; (8003dfc <json_serialize_string+0x9ec>)
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f006 fc16 	bl	800a5e8 <memcpy>
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	4413      	add	r3, r2
 8003dcc:	607b      	str	r3, [r7, #4]
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
    return written_total;
 8003dd6:	69bb      	ldr	r3, [r7, #24]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3720      	adds	r7, #32
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	0800d82c 	.word	0x0800d82c
 8003de4:	0800d834 	.word	0x0800d834
 8003de8:	0800d83c 	.word	0x0800d83c
 8003dec:	0800d844 	.word	0x0800d844
 8003df0:	20000010 	.word	0x20000010
 8003df4:	0800d84c 	.word	0x0800d84c
 8003df8:	0800d850 	.word	0x0800d850
 8003dfc:	0800d758 	.word	0x0800d758

08003e00 <json_parse_string>:
    output_value = json_parse_string_with_comments(file_contents);
    parson_free(file_contents);
    return output_value;
}

JSON_Value * json_parse_string(const char *string) {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
    if (string == NULL) {
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <json_parse_string+0x12>
        return NULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e016      	b.n	8003e40 <json_parse_string+0x40>
    }
    if (string[0] == '\xEF' && string[1] == '\xBB' && string[2] == '\xBF') {
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2bef      	cmp	r3, #239	; 0xef
 8003e18:	d10c      	bne.n	8003e34 <json_parse_string+0x34>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2bbb      	cmp	r3, #187	; 0xbb
 8003e22:	d107      	bne.n	8003e34 <json_parse_string+0x34>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3302      	adds	r3, #2
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2bbf      	cmp	r3, #191	; 0xbf
 8003e2c:	d102      	bne.n	8003e34 <json_parse_string+0x34>
        string = string + 3; /* Support for UTF-8 BOM */
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3303      	adds	r3, #3
 8003e32:	607b      	str	r3, [r7, #4]
    }
    return parse_value((const char**)&string, 0);
 8003e34:	1d3b      	adds	r3, r7, #4
 8003e36:	2100      	movs	r1, #0
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fe fbed 	bl	8002618 <parse_value>
 8003e3e:	4603      	mov	r3, r0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <json_object_get_value>:
    return result;
}

/* JSON Object API */

JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
    if (object == NULL || name == NULL) {
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <json_object_get_value+0x16>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <json_object_get_value+0x1a>
        return NULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e009      	b.n	8003e76 <json_object_get_value+0x2e>
    }
    return json_object_getn_value(object, name, strlen(name));
 8003e62:	6838      	ldr	r0, [r7, #0]
 8003e64:	f7fc f98c 	bl	8000180 <strlen>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	6839      	ldr	r1, [r7, #0]
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7fe f85b 	bl	8001f2a <json_object_getn_value>
 8003e74:	4603      	mov	r3, r0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <json_object_get_number>:

size_t json_object_get_string_len(const JSON_Object *object, const char *name) {
    return json_value_get_string_len(json_object_get_value(object, name));
}

double json_object_get_number(const JSON_Object *object, const char *name) {
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	6039      	str	r1, [r7, #0]
    return json_value_get_number(json_object_get_value(object, name));
 8003e88:	6839      	ldr	r1, [r7, #0]
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff ffdc 	bl	8003e48 <json_object_get_value>
 8003e90:	4603      	mov	r3, r0
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 f90e 	bl	80040b4 <json_value_get_number>
 8003e98:	eeb0 7a40 	vmov.f32	s14, s0
 8003e9c:	eef0 7a60 	vmov.f32	s15, s1
}
 8003ea0:	eeb0 0a47 	vmov.f32	s0, s14
 8003ea4:	eef0 0a67 	vmov.f32	s1, s15
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <json_object_get_count>:

int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_dotget_value(object, name));
}

size_t json_object_get_count(const JSON_Object *object) {
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
    return object ? object->count : 0;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <json_object_get_count+0x14>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	e000      	b.n	8003ec4 <json_object_get_count+0x16>
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <json_object_get_name>:

const char * json_object_get_name(const JSON_Object *object, size_t index) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d006      	beq.n	8003eee <json_object_get_name+0x1e>
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff ffe4 	bl	8003eae <json_object_get_count>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d301      	bcc.n	8003ef2 <json_object_get_name+0x22>
        return NULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e005      	b.n	8003efe <json_object_get_name+0x2e>
    }
    return object->names[index];
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	681b      	ldr	r3, [r3, #0]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <json_object_get_value_at>:

JSON_Value * json_object_get_value_at(const JSON_Object *object, size_t index) {
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d006      	beq.n	8003f24 <json_object_get_value_at+0x1e>
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff ffc9 	bl	8003eae <json_object_get_count>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d301      	bcc.n	8003f28 <json_object_get_value_at+0x22>
        return NULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	e005      	b.n	8003f34 <json_object_get_value_at+0x2e>
    }
    return object->values[index];
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	681b      	ldr	r3, [r3, #0]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <json_object_get_wrapping_value>:

JSON_Value *json_object_get_wrapping_value(const JSON_Object *object) {
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
    if (!object) {
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <json_object_get_wrapping_value+0x12>
        return NULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e001      	b.n	8003f52 <json_object_get_wrapping_value+0x16>
    }
    return object->wrapping_value;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <json_array_get_value>:
    JSON_Value *val = json_object_dotget_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

/* JSON Array API */
JSON_Value * json_array_get_value(const JSON_Array *array, size_t index) {
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b082      	sub	sp, #8
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	6039      	str	r1, [r7, #0]
    if (array == NULL || index >= json_array_get_count(array)) {
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d006      	beq.n	8003f7c <json_array_get_value+0x1e>
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f810 	bl	8003f94 <json_array_get_count>
 8003f74:	4602      	mov	r2, r0
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d301      	bcc.n	8003f80 <json_array_get_value+0x22>
        return NULL;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	e005      	b.n	8003f8c <json_array_get_value+0x2e>
    }
    return array->items[index];
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	681b      	ldr	r3, [r3, #0]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <json_array_get_count>:

int json_array_get_boolean(const JSON_Array *array, size_t index) {
    return json_value_get_boolean(json_array_get_value(array, index));
}

size_t json_array_get_count(const JSON_Array *array) {
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
    return array ? array->count : 0;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <json_array_get_count+0x14>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	e000      	b.n	8003faa <json_array_get_count+0x16>
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <json_array_get_wrapping_value>:

JSON_Value * json_array_get_wrapping_value(const JSON_Array *array) {
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
    if (!array) {
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <json_array_get_wrapping_value+0x12>
        return NULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	e001      	b.n	8003fcc <json_array_get_wrapping_value+0x16>
    }
    return array->wrapping_value;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <json_value_get_type>:

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
    return value ? value->type : JSONError;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <json_value_get_type+0x14>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	e001      	b.n	8003ff0 <json_value_get_type+0x18>
 8003fec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <json_value_get_object>:

JSON_Object * json_value_get_object(const JSON_Value *value) {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff ffe7 	bl	8003fd8 <json_value_get_type>
 800400a:	4603      	mov	r3, r0
 800400c:	2b04      	cmp	r3, #4
 800400e:	d102      	bne.n	8004016 <json_value_get_object+0x1a>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	e000      	b.n	8004018 <json_value_get_object+0x1c>
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <json_value_get_array>:

JSON_Array * json_value_get_array(const JSON_Value *value) {
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff ffd5 	bl	8003fd8 <json_value_get_type>
 800402e:	4603      	mov	r3, r0
 8004030:	2b05      	cmp	r3, #5
 8004032:	d102      	bne.n	800403a <json_value_get_array+0x1a>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	e000      	b.n	800403c <json_value_get_array+0x1c>
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <json_value_get_string_desc>:

static const JSON_String * json_value_get_string_desc(const JSON_Value *value) {
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONString ? &value->value.string : NULL;
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff ffc3 	bl	8003fd8 <json_value_get_type>
 8004052:	4603      	mov	r3, r0
 8004054:	2b02      	cmp	r3, #2
 8004056:	d102      	bne.n	800405e <json_value_get_string_desc+0x1a>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3308      	adds	r3, #8
 800405c:	e000      	b.n	8004060 <json_value_get_string_desc+0x1c>
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <json_value_get_string>:

const char * json_value_get_string(const JSON_Value *value) {
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
    const JSON_String *str = json_value_get_string_desc(value);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff ffe7 	bl	8004044 <json_value_get_string_desc>
 8004076:	60f8      	str	r0, [r7, #12]
    return str ? str->chars : NULL;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <json_value_get_string+0x1c>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	e000      	b.n	8004086 <json_value_get_string+0x1e>
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <json_value_get_string_len>:

size_t json_value_get_string_len(const JSON_Value *value) {
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
    const JSON_String *str = json_value_get_string_desc(value);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff ffd4 	bl	8004044 <json_value_get_string_desc>
 800409c:	60f8      	str	r0, [r7, #12]
    return str ? str->length : 0;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <json_value_get_string_len+0x1c>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	e000      	b.n	80040ac <json_value_get_string_len+0x1e>
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <json_value_get_number>:

double json_value_get_number(const JSON_Value *value) {
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff ff8b 	bl	8003fd8 <json_value_get_type>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b03      	cmp	r3, #3
 80040c6:	d103      	bne.n	80040d0 <json_value_get_number+0x1c>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80040ce:	e003      	b.n	80040d8 <json_value_get_number+0x24>
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	ec43 2b17 	vmov	d7, r2, r3
}
 80040dc:	eeb0 0a47 	vmov.f32	s0, s14
 80040e0:	eef0 0a67 	vmov.f32	s1, s15
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <json_value_get_boolean>:

int json_value_get_boolean(const JSON_Value *value) {
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b082      	sub	sp, #8
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7ff ff70 	bl	8003fd8 <json_value_get_type>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b06      	cmp	r3, #6
 80040fc:	d102      	bne.n	8004104 <json_value_get_boolean+0x1a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	e001      	b.n	8004108 <json_value_get_boolean+0x1e>
 8004104:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <json_value_free>:

JSON_Value * json_value_get_parent (const JSON_Value *value) {
    return value ? value->parent : NULL;
}

void json_value_free(JSON_Value *value) {
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
    switch (json_value_get_type(value)) {
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff ff5d 	bl	8003fd8 <json_value_get_type>
 800411e:	4603      	mov	r3, r0
 8004120:	2b05      	cmp	r3, #5
 8004122:	d012      	beq.n	800414a <json_value_free+0x3a>
 8004124:	2b05      	cmp	r3, #5
 8004126:	dc16      	bgt.n	8004156 <json_value_free+0x46>
 8004128:	2b02      	cmp	r3, #2
 800412a:	d007      	beq.n	800413c <json_value_free+0x2c>
 800412c:	2b04      	cmp	r3, #4
 800412e:	d112      	bne.n	8004156 <json_value_free+0x46>
        case JSONObject:
            json_object_free(value->value.object);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4618      	mov	r0, r3
 8004136:	f7fd ff35 	bl	8001fa4 <json_object_free>
            break;
 800413a:	e00d      	b.n	8004158 <json_value_free+0x48>
        case JSONString:
            parson_free(value->value.string.chars);
 800413c:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <json_value_free+0x58>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6892      	ldr	r2, [r2, #8]
 8004144:	4610      	mov	r0, r2
 8004146:	4798      	blx	r3
            break;
 8004148:	e006      	b.n	8004158 <json_value_free+0x48>
        case JSONArray:
            json_array_free(value->value.array);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	4618      	mov	r0, r3
 8004150:	f7fd ffd2 	bl	80020f8 <json_array_free>
            break;
 8004154:	e000      	b.n	8004158 <json_value_free+0x48>
        default:
            break;
 8004156:	bf00      	nop
    }
    parson_free(value);
 8004158:	4b03      	ldr	r3, [pc, #12]	; (8004168 <json_value_free+0x58>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	4798      	blx	r3
}
 8004160:	bf00      	nop
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	2000000c 	.word	0x2000000c

0800416c <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8004172:	4b12      	ldr	r3, [pc, #72]	; (80041bc <json_value_init_object+0x50>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2010      	movs	r0, #16
 8004178:	4798      	blx	r3
 800417a:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <json_value_init_object+0x1a>
        return NULL;
 8004182:	2300      	movs	r3, #0
 8004184:	e016      	b.n	80041b4 <json_value_init_object+0x48>
    }
    new_value->parent = NULL;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]
    new_value->type = JSONObject;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2204      	movs	r2, #4
 8004190:	605a      	str	r2, [r3, #4]
    new_value->value.object = json_object_make(new_value);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fd fc1c 	bl	80019d0 <json_object_make>
 8004198:	4602      	mov	r2, r0
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	609a      	str	r2, [r3, #8]
    if (!new_value->value.object) {
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d105      	bne.n	80041b2 <json_value_init_object+0x46>
        parson_free(new_value);
 80041a6:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <json_value_init_object+0x54>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	4798      	blx	r3
        return NULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	e000      	b.n	80041b4 <json_value_init_object+0x48>
    }
    return new_value;
 80041b2:	687b      	ldr	r3, [r7, #4]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20000008 	.word	0x20000008
 80041c0:	2000000c 	.word	0x2000000c

080041c4 <json_value_init_array>:

JSON_Value * json_value_init_array(void) {
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 80041ca:	4b12      	ldr	r3, [pc, #72]	; (8004214 <json_value_init_array+0x50>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2010      	movs	r0, #16
 80041d0:	4798      	blx	r3
 80041d2:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <json_value_init_array+0x1a>
        return NULL;
 80041da:	2300      	movs	r3, #0
 80041dc:	e016      	b.n	800420c <json_value_init_array+0x48>
    }
    new_value->parent = NULL;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
    new_value->type = JSONArray;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2205      	movs	r2, #5
 80041e8:	605a      	str	r2, [r3, #4]
    new_value->value.array = json_array_make(new_value);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fd feee 	bl	8001fcc <json_array_make>
 80041f0:	4602      	mov	r2, r0
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	609a      	str	r2, [r3, #8]
    if (!new_value->value.array) {
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d105      	bne.n	800420a <json_value_init_array+0x46>
        parson_free(new_value);
 80041fe:	4b06      	ldr	r3, [pc, #24]	; (8004218 <json_value_init_array+0x54>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	4798      	blx	r3
        return NULL;
 8004206:	2300      	movs	r3, #0
 8004208:	e000      	b.n	800420c <json_value_init_array+0x48>
    }
    return new_value;
 800420a:	687b      	ldr	r3, [r7, #4]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	20000008 	.word	0x20000008
 8004218:	2000000c 	.word	0x2000000c

0800421c <json_value_init_number>:
        parson_free(copy);
    }
    return value;
}

JSON_Value * json_value_init_number(double number) {
 800421c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *new_value = NULL;
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]
    if (IS_NUMBER_INVALID(number)) {
 800422a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800422e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004232:	f7fc fc53 	bl	8000adc <__aeabi_dcmpun>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d121      	bne.n	8004280 <json_value_init_number+0x64>
 800423c:	683c      	ldr	r4, [r7, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004244:	2301      	movs	r3, #1
 8004246:	461e      	mov	r6, r3
 8004248:	f04f 32ff 	mov.w	r2, #4294967295
 800424c:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <json_value_init_number+0x9c>)
 800424e:	4620      	mov	r0, r4
 8004250:	4629      	mov	r1, r5
 8004252:	f7fc fc43 	bl	8000adc <__aeabi_dcmpun>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10b      	bne.n	8004274 <json_value_init_number+0x58>
 800425c:	f04f 32ff 	mov.w	r2, #4294967295
 8004260:	4b15      	ldr	r3, [pc, #84]	; (80042b8 <json_value_init_number+0x9c>)
 8004262:	4620      	mov	r0, r4
 8004264:	4629      	mov	r1, r5
 8004266:	f7fc fc1b 	bl	8000aa0 <__aeabi_dcmple>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <json_value_init_number+0x58>
 8004270:	2300      	movs	r3, #0
 8004272:	461e      	mov	r6, r3
 8004274:	b2f3      	uxtb	r3, r6
 8004276:	f083 0301 	eor.w	r3, r3, #1
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <json_value_init_number+0x68>
        return NULL;
 8004280:	2300      	movs	r3, #0
 8004282:	e015      	b.n	80042b0 <json_value_init_number+0x94>
    }
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8004284:	4b0d      	ldr	r3, [pc, #52]	; (80042bc <json_value_init_number+0xa0>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2010      	movs	r0, #16
 800428a:	4798      	blx	r3
 800428c:	60f8      	str	r0, [r7, #12]
    if (new_value == NULL) {
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <json_value_init_number+0x7c>
        return NULL;
 8004294:	2300      	movs	r3, #0
 8004296:	e00b      	b.n	80042b0 <json_value_init_number+0x94>
    }
    new_value->parent = NULL;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNumber;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2203      	movs	r2, #3
 80042a2:	605a      	str	r2, [r3, #4]
    new_value->value.number = number;
 80042a4:	68f9      	ldr	r1, [r7, #12]
 80042a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042aa:	e9c1 2302 	strd	r2, r3, [r1, #8]
    return new_value;
 80042ae:	68fb      	ldr	r3, [r7, #12]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042b8:	7fefffff 	.word	0x7fefffff
 80042bc:	20000008 	.word	0x20000008

080042c0 <json_value_init_boolean>:

JSON_Value * json_value_init_boolean(int boolean) {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 80042c8:	4b0e      	ldr	r3, [pc, #56]	; (8004304 <json_value_init_boolean+0x44>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2010      	movs	r0, #16
 80042ce:	4798      	blx	r3
 80042d0:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <json_value_init_boolean+0x1c>
        return NULL;
 80042d8:	2300      	movs	r3, #0
 80042da:	e00f      	b.n	80042fc <json_value_init_boolean+0x3c>
    }
    new_value->parent = NULL;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
    new_value->type = JSONBoolean;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2206      	movs	r2, #6
 80042e6:	605a      	str	r2, [r3, #4]
    new_value->value.boolean = boolean ? 1 : 0;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	bf14      	ite	ne
 80042ee:	2301      	movne	r3, #1
 80042f0:	2300      	moveq	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	609a      	str	r2, [r3, #8]
    return new_value;
 80042fa:	68fb      	ldr	r3, [r7, #12]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	20000008 	.word	0x20000008

08004308 <json_value_init_null>:

JSON_Value * json_value_init_null(void) {
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 800430e:	4b0a      	ldr	r3, [pc, #40]	; (8004338 <json_value_init_null+0x30>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2010      	movs	r0, #16
 8004314:	4798      	blx	r3
 8004316:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <json_value_init_null+0x1a>
        return NULL;
 800431e:	2300      	movs	r3, #0
 8004320:	e006      	b.n	8004330 <json_value_init_null+0x28>
    }
    new_value->parent = NULL;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNull;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	605a      	str	r2, [r3, #4]
    return new_value;
 800432e:	687b      	ldr	r3, [r7, #4]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	20000008 	.word	0x20000008

0800433c <json_serialization_size>:
        default:
            return NULL;
    }
}

size_t json_serialization_size(const JSON_Value *value) {
 800433c:	b580      	push	{r7, lr}
 800433e:	b096      	sub	sp, #88	; 0x58
 8004340:	af02      	add	r7, sp, #8
 8004342:	6078      	str	r0, [r7, #4]
    char num_buf[PARSON_NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, PARSON_FALSE, num_buf);
 8004344:	f107 030c 	add.w	r3, r7, #12
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	2300      	movs	r3, #0
 800434c:	2200      	movs	r2, #0
 800434e:	2100      	movs	r1, #0
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7fe fcc7 	bl	8002ce4 <json_serialize_to_buffer_r>
 8004356:	64f8      	str	r0, [r7, #76]	; 0x4c
    return res < 0 ? 0 : (size_t)(res) + 1;
 8004358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800435a:	2b00      	cmp	r3, #0
 800435c:	db02      	blt.n	8004364 <json_serialization_size+0x28>
 800435e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004360:	3301      	adds	r3, #1
 8004362:	e000      	b.n	8004366 <json_serialization_size+0x2a>
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3750      	adds	r7, #80	; 0x50
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <json_serialize_to_buffer>:

JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 800436e:	b580      	push	{r7, lr}
 8004370:	b088      	sub	sp, #32
 8004372:	af02      	add	r7, sp, #8
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
    int written = -1;
 800437a:	f04f 33ff 	mov.w	r3, #4294967295
 800437e:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size(value);
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f7ff ffdb 	bl	800433c <json_serialization_size>
 8004386:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <json_serialize_to_buffer+0x28>
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	429a      	cmp	r2, r3
 8004394:	d202      	bcs.n	800439c <json_serialize_to_buffer+0x2e>
        return JSONFailure;
 8004396:	f04f 33ff 	mov.w	r3, #4294967295
 800439a:	e00f      	b.n	80043bc <json_serialize_to_buffer+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, PARSON_FALSE, NULL);
 800439c:	2300      	movs	r3, #0
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	2300      	movs	r3, #0
 80043a2:	2200      	movs	r2, #0
 80043a4:	68b9      	ldr	r1, [r7, #8]
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f7fe fc9c 	bl	8002ce4 <json_serialize_to_buffer_r>
 80043ac:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	da02      	bge.n	80043ba <json_serialize_to_buffer+0x4c>
        return JSONFailure;
 80043b4:	f04f 33ff 	mov.w	r3, #4294967295
 80043b8:	e000      	b.n	80043bc <json_serialize_to_buffer+0x4e>
    }
    return JSONSuccess;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <json_serialize_to_string>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string(const JSON_Value *value) {
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 80043cc:	f04f 33ff 	mov.w	r3, #4294967295
 80043d0:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size(value);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff ffb2 	bl	800433c <json_serialization_size>
 80043d8:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <json_serialize_to_string+0x24>
        return NULL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	e018      	b.n	800441a <json_serialize_to_string+0x56>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 80043e8:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <json_serialize_to_string+0x60>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6938      	ldr	r0, [r7, #16]
 80043ee:	4798      	blx	r3
 80043f0:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <json_serialize_to_string+0x38>
        return NULL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	e00e      	b.n	800441a <json_serialize_to_string+0x56>
    }
    serialization_result = json_serialize_to_buffer(value, buf, buf_size_bytes);
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	68f9      	ldr	r1, [r7, #12]
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff ffb4 	bl	800436e <json_serialize_to_buffer>
 8004406:	6178      	str	r0, [r7, #20]
    if (serialization_result != JSONSuccess) {
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d004      	beq.n	8004418 <json_serialize_to_string+0x54>
        json_free_serialized_string(buf);
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f80a 	bl	8004428 <json_free_serialized_string>
        return NULL;
 8004414:	2300      	movs	r3, #0
 8004416:	e000      	b.n	800441a <json_serialize_to_string+0x56>
    }
    return buf;
 8004418:	68fb      	ldr	r3, [r7, #12]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000008 	.word	0x20000008

08004428 <json_free_serialized_string>:
        return NULL;
    }
    return buf;
}

void json_free_serialized_string(char *string) {
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
    parson_free(string);
 8004430:	4b03      	ldr	r3, [pc, #12]	; (8004440 <json_free_serialized_string+0x18>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	4798      	blx	r3
}
 8004438:	bf00      	nop
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	2000000c 	.word	0x2000000c

08004444 <json_object_set_value>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {
 8004444:	b580      	push	{r7, lr}
 8004446:	b08e      	sub	sp, #56	; 0x38
 8004448:	af02      	add	r7, sp, #8
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 8004450:	2300      	movs	r3, #0
 8004452:	62bb      	str	r3, [r7, #40]	; 0x28
    parson_bool_t found = PARSON_FALSE;
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]
    size_t cell_ix = 0;
 8004458:	2300      	movs	r3, #0
 800445a:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t item_ix = 0;
 800445c:	2300      	movs	r3, #0
 800445e:	627b      	str	r3, [r7, #36]	; 0x24
    JSON_Value *old_value = NULL;
 8004460:	2300      	movs	r3, #0
 8004462:	623b      	str	r3, [r7, #32]
    char *key_copy = NULL;
 8004464:	2300      	movs	r3, #0
 8004466:	61fb      	str	r3, [r7, #28]

    if (!object || !name || !value || value->parent) {
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d009      	beq.n	8004482 <json_object_set_value+0x3e>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d006      	beq.n	8004482 <json_object_set_value+0x3e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <json_object_set_value+0x3e>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <json_object_set_value+0x44>
        return JSONFailure;
 8004482:	f04f 33ff 	mov.w	r3, #4294967295
 8004486:	e095      	b.n	80045b4 <json_object_set_value+0x170>
    }
    hash = hash_string(name, strlen(name));
 8004488:	68b8      	ldr	r0, [r7, #8]
 800448a:	f7fb fe79 	bl	8000180 <strlen>
 800448e:	4603      	mov	r3, r0
 8004490:	4619      	mov	r1, r3
 8004492:	68b8      	ldr	r0, [r7, #8]
 8004494:	f7fd fa70 	bl	8001978 <hash_string>
 8004498:	62b8      	str	r0, [r7, #40]	; 0x28
    found = PARSON_FALSE;
 800449a:	2300      	movs	r3, #0
 800449c:	617b      	str	r3, [r7, #20]
    cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 800449e:	68b8      	ldr	r0, [r7, #8]
 80044a0:	f7fb fe6e 	bl	8000180 <strlen>
 80044a4:	4602      	mov	r2, r0
 80044a6:	f107 0314 	add.w	r3, r7, #20
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	68b9      	ldr	r1, [r7, #8]
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f7fd fc42 	bl	8001d3a <json_object_get_cell_ix>
 80044b6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (found) {
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d01f      	beq.n	80044fe <json_object_set_value+0xba>
        item_ix = object->cells[cell_ix];
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
        old_value = object->values[item_ix];
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	623b      	str	r3, [r7, #32]
        json_value_free(old_value);
 80044da:	6a38      	ldr	r0, [r7, #32]
 80044dc:	f7ff fe18 	bl	8004110 <json_value_free>
        object->values[item_ix] = value;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	601a      	str	r2, [r3, #0]
        value->parent = json_object_get_wrapping_value(object);
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f7ff fd24 	bl	8003f3c <json_object_get_wrapping_value>
 80044f4:	4602      	mov	r2, r0
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	601a      	str	r2, [r3, #0]
        return JSONSuccess;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e05a      	b.n	80045b4 <json_object_set_value+0x170>
    }
    if (object->count >= object->item_capacity) {
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	429a      	cmp	r2, r3
 8004508:	d316      	bcc.n	8004538 <json_object_set_value+0xf4>
        JSON_Status res = json_object_grow_and_rehash(object);
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f7fd fbaa 	bl	8001c64 <json_object_grow_and_rehash>
 8004510:	61b8      	str	r0, [r7, #24]
        if (res != JSONSuccess) {
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <json_object_set_value+0xda>
            return JSONFailure;
 8004518:	f04f 33ff 	mov.w	r3, #4294967295
 800451c:	e04a      	b.n	80045b4 <json_object_set_value+0x170>
        }
        cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 800451e:	68b8      	ldr	r0, [r7, #8]
 8004520:	f7fb fe2e 	bl	8000180 <strlen>
 8004524:	4602      	mov	r2, r0
 8004526:	f107 0314 	add.w	r3, r7, #20
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	68b9      	ldr	r1, [r7, #8]
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f7fd fc02 	bl	8001d3a <json_object_get_cell_ix>
 8004536:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    key_copy = parson_strdup(name);
 8004538:	68b8      	ldr	r0, [r7, #8]
 800453a:	f7fd f949 	bl	80017d0 <parson_strdup>
 800453e:	61f8      	str	r0, [r7, #28]
    if (!key_copy) {
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d102      	bne.n	800454c <json_object_set_value+0x108>
        return JSONFailure;
 8004546:	f04f 33ff 	mov.w	r3, #4294967295
 800454a:	e033      	b.n	80045b4 <json_object_set_value+0x170>
    }
    object->names[object->count] = key_copy;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	601a      	str	r2, [r3, #0]
    object->cells[cell_ix] = object->count;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	6992      	ldr	r2, [r2, #24]
 800456a:	601a      	str	r2, [r3, #0]
    object->values[object->count] = value;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	601a      	str	r2, [r3, #0]
    object->cell_ixs[object->count] = cell_ix;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	695a      	ldr	r2, [r3, #20]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800458a:	601a      	str	r2, [r3, #0]
    object->hashes[object->count] = hash;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800459a:	601a      	str	r2, [r3, #0]
    object->count++;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	619a      	str	r2, [r3, #24]
    value->parent = json_object_get_wrapping_value(object);
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f7ff fcc8 	bl	8003f3c <json_object_get_wrapping_value>
 80045ac:	4602      	mov	r2, r0
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3730      	adds	r7, #48	; 0x30
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <json_object_set_number>:
        json_value_free(value);
    }
    return status;
}

JSON_Status json_object_set_number(JSON_Object *object, const char *name, double number) {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *value = json_value_init_number(number);
 80045ca:	ed97 0b00 	vldr	d0, [r7]
 80045ce:	f7ff fe25 	bl	800421c <json_value_init_number>
 80045d2:	6178      	str	r0, [r7, #20]
    JSON_Status status = json_object_set_value(object, name, value);
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	68b9      	ldr	r1, [r7, #8]
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7ff ff33 	bl	8004444 <json_object_set_value>
 80045de:	6138      	str	r0, [r7, #16]
    if (status != JSONSuccess) {
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <json_object_set_number+0x30>
        json_value_free(value);
 80045e6:	6978      	ldr	r0, [r7, #20]
 80045e8:	f7ff fd92 	bl	8004110 <json_value_free>
    }
    return status;
 80045ec:	693b      	ldr	r3, [r7, #16]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045f6:	b480      	push	{r7}
 80045f8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045fa:	bf00      	nop
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004608:	e7fe      	b.n	8004608 <NMI_Handler+0x4>

0800460a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800460a:	b480      	push	{r7}
 800460c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800460e:	e7fe      	b.n	800460e <HardFault_Handler+0x4>

08004610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004614:	e7fe      	b.n	8004614 <MemManage_Handler+0x4>

08004616 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004616:	b480      	push	{r7}
 8004618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800461a:	e7fe      	b.n	800461a <BusFault_Handler+0x4>

0800461c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004620:	e7fe      	b.n	8004620 <UsageFault_Handler+0x4>

08004622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004622:	b480      	push	{r7}
 8004624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004626:	bf00      	nop
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004634:	bf00      	nop
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800463e:	b480      	push	{r7}
 8004640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004642:	bf00      	nop
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004650:	f000 fcaa 	bl	8004fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004654:	bf00      	nop
 8004656:	bd80      	pop	{r7, pc}

08004658 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 800465c:	2001      	movs	r0, #1
 800465e:	f001 faef 	bl	8005c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004662:	bf00      	nop
 8004664:	bd80      	pop	{r7, pc}

08004666 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800466a:	2010      	movs	r0, #16
 800466c:	f001 fae8 	bl	8005c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004670:	bf00      	nop
 8004672:	bd80      	pop	{r7, pc}

08004674 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8004678:	4802      	ldr	r0, [pc, #8]	; (8004684 <DMA1_Channel1_IRQHandler+0x10>)
 800467a:	f000 ffd6 	bl	800562a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800467e:	bf00      	nop
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000394 	.word	0x20000394

08004688 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */
	uint32_t tmp_flag = 0;
 800468e:	2300      	movs	r3, #0
 8004690:	607b      	str	r3, [r7, #4]
		uint32_t temp;
		tmp_flag = __HAL_UART_GET_FLAG(&hlpuart1, UART_FLAG_IDLE);
 8004692:	4b27      	ldr	r3, [pc, #156]	; (8004730 <LPUART1_IRQHandler+0xa8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	2b10      	cmp	r3, #16
 800469e:	bf0c      	ite	eq
 80046a0:	2301      	moveq	r3, #1
 80046a2:	2300      	movne	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	607b      	str	r3, [r7, #4]
		if ((tmp_flag != RESET)) {
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d039      	beq.n	8004722 <LPUART1_IRQHandler+0x9a>
			__HAL_UART_CLEAR_IDLEFLAG(&hlpuart1);
 80046ae:	4b20      	ldr	r3, [pc, #128]	; (8004730 <LPUART1_IRQHandler+0xa8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2210      	movs	r2, #16
 80046b4:	621a      	str	r2, [r3, #32]
			temp = hlpuart1.Instance->ISR;
 80046b6:	4b1e      	ldr	r3, [pc, #120]	; (8004730 <LPUART1_IRQHandler+0xa8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	603b      	str	r3, [r7, #0]
			temp = hlpuart1.Instance->RDR;
 80046be:	4b1c      	ldr	r3, [pc, #112]	; (8004730 <LPUART1_IRQHandler+0xa8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	603b      	str	r3, [r7, #0]
			//HAL_UART_DMAStop(&hlpuart1);
			temp = hlpuart1.hdmarx->Instance->CNDTR;
 80046c6:	4b1a      	ldr	r3, [pc, #104]	; (8004730 <LPUART1_IRQHandler+0xa8>)
 80046c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	603b      	str	r3, [r7, #0]
			// reset index dma buffer to 1024 (countdown)
			__HAL_DMA_DISABLE(hlpuart1.hdmarx);
 80046d2:	4b17      	ldr	r3, [pc, #92]	; (8004730 <LPUART1_IRQHandler+0xa8>)
 80046d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4b14      	ldr	r3, [pc, #80]	; (8004730 <LPUART1_IRQHandler+0xa8>)
 80046de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0201 	bic.w	r2, r2, #1
 80046e8:	601a      	str	r2, [r3, #0]
			hlpuart1.hdmarx->Instance->CNDTR = UART_ESP32_MAX_RECVLEN;
 80046ea:	4b11      	ldr	r3, [pc, #68]	; (8004730 <LPUART1_IRQHandler+0xa8>)
 80046ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046f6:	605a      	str	r2, [r3, #4]
			__HAL_DMA_ENABLE(hlpuart1.hdmarx);
 80046f8:	4b0d      	ldr	r3, [pc, #52]	; (8004730 <LPUART1_IRQHandler+0xa8>)
 80046fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <LPUART1_IRQHandler+0xa8>)
 8004704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0201 	orr.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]
			UART_ESP32_RxLen = UART_ESP32_MAX_RECVLEN - temp;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	425b      	negs	r3, r3
 8004716:	b2da      	uxtb	r2, r3
 8004718:	4b06      	ldr	r3, [pc, #24]	; (8004734 <LPUART1_IRQHandler+0xac>)
 800471a:	701a      	strb	r2, [r3, #0]
			UART_ESP32_RecvEndFlag = 1;
 800471c:	4b06      	ldr	r3, [pc, #24]	; (8004738 <LPUART1_IRQHandler+0xb0>)
 800471e:	2201      	movs	r2, #1
 8004720:	701a      	strb	r2, [r3, #0]
		}
  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004722:	4803      	ldr	r0, [pc, #12]	; (8004730 <LPUART1_IRQHandler+0xa8>)
 8004724:	f003 fb8e 	bl	8007e44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	2000026c 	.word	0x2000026c
 8004734:	200016f0 	.word	0x200016f0
 8004738:	200016f1 	.word	0x200016f1

0800473c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
  return 1;
 8004740:	2301      	movs	r3, #1
}
 8004742:	4618      	mov	r0, r3
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <_kill>:

int _kill(int pid, int sig)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004756:	f005 fced 	bl	800a134 <__errno>
 800475a:	4603      	mov	r3, r0
 800475c:	2216      	movs	r2, #22
 800475e:	601a      	str	r2, [r3, #0]
  return -1;
 8004760:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004764:	4618      	mov	r0, r3
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <_exit>:

void _exit (int status)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004774:	f04f 31ff 	mov.w	r1, #4294967295
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff ffe7 	bl	800474c <_kill>
  while (1) {}    /* Make sure we hang here */
 800477e:	e7fe      	b.n	800477e <_exit+0x12>

08004780 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	e00a      	b.n	80047a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004792:	f3af 8000 	nop.w
 8004796:	4601      	mov	r1, r0
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	1c5a      	adds	r2, r3, #1
 800479c:	60ba      	str	r2, [r7, #8]
 800479e:	b2ca      	uxtb	r2, r1
 80047a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	3301      	adds	r3, #1
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	dbf0      	blt.n	8004792 <_read+0x12>
  }

  return len;
 80047b0:	687b      	ldr	r3, [r7, #4]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3718      	adds	r7, #24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <_close>:
  }
  return len;
}

int _close(int file)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80047c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047e2:	605a      	str	r2, [r3, #4]
  return 0;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <_isatty>:

int _isatty(int file)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80047fa:	2301      	movs	r3, #1
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
	...

08004824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800482c:	4a14      	ldr	r2, [pc, #80]	; (8004880 <_sbrk+0x5c>)
 800482e:	4b15      	ldr	r3, [pc, #84]	; (8004884 <_sbrk+0x60>)
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004838:	4b13      	ldr	r3, [pc, #76]	; (8004888 <_sbrk+0x64>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d102      	bne.n	8004846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004840:	4b11      	ldr	r3, [pc, #68]	; (8004888 <_sbrk+0x64>)
 8004842:	4a12      	ldr	r2, [pc, #72]	; (800488c <_sbrk+0x68>)
 8004844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004846:	4b10      	ldr	r3, [pc, #64]	; (8004888 <_sbrk+0x64>)
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4413      	add	r3, r2
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	429a      	cmp	r2, r3
 8004852:	d207      	bcs.n	8004864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004854:	f005 fc6e 	bl	800a134 <__errno>
 8004858:	4603      	mov	r3, r0
 800485a:	220c      	movs	r2, #12
 800485c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800485e:	f04f 33ff 	mov.w	r3, #4294967295
 8004862:	e009      	b.n	8004878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004864:	4b08      	ldr	r3, [pc, #32]	; (8004888 <_sbrk+0x64>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800486a:	4b07      	ldr	r3, [pc, #28]	; (8004888 <_sbrk+0x64>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4413      	add	r3, r2
 8004872:	4a05      	ldr	r2, [pc, #20]	; (8004888 <_sbrk+0x64>)
 8004874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004876:	68fb      	ldr	r3, [r7, #12]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	20030000 	.word	0x20030000
 8004884:	00000400 	.word	0x00000400
 8004888:	2000021c 	.word	0x2000021c
 800488c:	20001708 	.word	0x20001708

08004890 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8004894:	4b24      	ldr	r3, [pc, #144]	; (8004928 <SystemInit+0x98>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489a:	4a23      	ldr	r2, [pc, #140]	; (8004928 <SystemInit+0x98>)
 800489c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80048a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ae:	f043 0301 	orr.w	r3, r3, #1
 80048b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80048b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80048bc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80048be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048c8:	4b18      	ldr	r3, [pc, #96]	; (800492c <SystemInit+0x9c>)
 80048ca:	4013      	ands	r3, r2
 80048cc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80048ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048da:	f023 0305 	bic.w	r3, r3, #5
 80048de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80048e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ee:	f023 0301 	bic.w	r3, r3, #1
 80048f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80048f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048fa:	4a0d      	ldr	r2, [pc, #52]	; (8004930 <SystemInit+0xa0>)
 80048fc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80048fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004902:	4a0b      	ldr	r2, [pc, #44]	; (8004930 <SystemInit+0xa0>)
 8004904:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004914:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800491a:	2200      	movs	r2, #0
 800491c:	619a      	str	r2, [r3, #24]
}
 800491e:	bf00      	nop
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	e000ed00 	.word	0xe000ed00
 800492c:	faf6fefb 	.word	0xfaf6fefb
 8004930:	22041000 	.word	0x22041000

08004934 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800493c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004940:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004942:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4313      	orrs	r3, r2
 800494a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800494c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004950:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4013      	ands	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004958:	68fb      	ldr	r3, [r7, #12]
}
 800495a:	bf00      	nop
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
	...

08004968 <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800496c:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <MX_TIM17_Init+0x48>)
 800496e:	4a11      	ldr	r2, [pc, #68]	; (80049b4 <MX_TIM17_Init+0x4c>)
 8004970:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 32000;
 8004972:	4b0f      	ldr	r3, [pc, #60]	; (80049b0 <MX_TIM17_Init+0x48>)
 8004974:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8004978:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800497a:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <MX_TIM17_Init+0x48>)
 800497c:	2200      	movs	r2, #0
 800497e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 30000;
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <MX_TIM17_Init+0x48>)
 8004982:	f247 5230 	movw	r2, #30000	; 0x7530
 8004986:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004988:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <MX_TIM17_Init+0x48>)
 800498a:	2200      	movs	r2, #0
 800498c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800498e:	4b08      	ldr	r3, [pc, #32]	; (80049b0 <MX_TIM17_Init+0x48>)
 8004990:	2200      	movs	r2, #0
 8004992:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004994:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <MX_TIM17_Init+0x48>)
 8004996:	2200      	movs	r2, #0
 8004998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800499a:	4805      	ldr	r0, [pc, #20]	; (80049b0 <MX_TIM17_Init+0x48>)
 800499c:	f003 f84d 	bl	8007a3a <HAL_TIM_Base_Init>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80049a6:	f7fc fecd 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80049aa:	bf00      	nop
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20000220 	.word	0x20000220
 80049b4:	40014800 	.word	0x40014800

080049b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a05      	ldr	r2, [pc, #20]	; (80049dc <HAL_TIM_Base_MspInit+0x24>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d103      	bne.n	80049d2 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80049ca:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80049ce:	f7ff ffb1 	bl	8004934 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80049d2:	bf00      	nop
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40014800 	.word	0x40014800

080049e0 <LL_AHB2_GRP1_EnableClock>:
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80049e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80049f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4013      	ands	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a04:	68fb      	ldr	r3, [r7, #12]
}
 8004a06:	bf00      	nop
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <LL_APB1_GRP2_EnableClock>:
{
 8004a12:	b480      	push	{r7}
 8004a14:	b085      	sub	sp, #20
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8004a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8004a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4013      	ands	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a36:	68fb      	ldr	r3, [r7, #12]
}
 8004a38:	bf00      	nop
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <LL_APB2_GRP1_EnableClock>:
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8004a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4013      	ands	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a68:	68fb      	ldr	r3, [r7, #12]
}
 8004a6a:	bf00      	nop
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
	...

08004a78 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004a7c:	4b29      	ldr	r3, [pc, #164]	; (8004b24 <MX_LPUART1_UART_Init+0xac>)
 8004a7e:	4a2a      	ldr	r2, [pc, #168]	; (8004b28 <MX_LPUART1_UART_Init+0xb0>)
 8004a80:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8004a82:	4b28      	ldr	r3, [pc, #160]	; (8004b24 <MX_LPUART1_UART_Init+0xac>)
 8004a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a88:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004a8a:	4b26      	ldr	r3, [pc, #152]	; (8004b24 <MX_LPUART1_UART_Init+0xac>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004a90:	4b24      	ldr	r3, [pc, #144]	; (8004b24 <MX_LPUART1_UART_Init+0xac>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004a96:	4b23      	ldr	r3, [pc, #140]	; (8004b24 <MX_LPUART1_UART_Init+0xac>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004a9c:	4b21      	ldr	r3, [pc, #132]	; (8004b24 <MX_LPUART1_UART_Init+0xac>)
 8004a9e:	220c      	movs	r2, #12
 8004aa0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004aa2:	4b20      	ldr	r3, [pc, #128]	; (8004b24 <MX_LPUART1_UART_Init+0xac>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004aa8:	4b1e      	ldr	r3, [pc, #120]	; (8004b24 <MX_LPUART1_UART_Init+0xac>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004aae:	4b1d      	ldr	r3, [pc, #116]	; (8004b24 <MX_LPUART1_UART_Init+0xac>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ab4:	4b1b      	ldr	r3, [pc, #108]	; (8004b24 <MX_LPUART1_UART_Init+0xac>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8004aba:	4b1a      	ldr	r3, [pc, #104]	; (8004b24 <MX_LPUART1_UART_Init+0xac>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004ac0:	4818      	ldr	r0, [pc, #96]	; (8004b24 <MX_LPUART1_UART_Init+0xac>)
 8004ac2:	f003 f895 	bl	8007bf0 <HAL_UART_Init>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8004acc:	f7fc fe3a 	bl	8001744 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	4814      	ldr	r0, [pc, #80]	; (8004b24 <MX_LPUART1_UART_Init+0xac>)
 8004ad4:	f004 fbba 	bl	800924c <HAL_UARTEx_SetTxFifoThreshold>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004ade:	f7fc fe31 	bl	8001744 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	480f      	ldr	r0, [pc, #60]	; (8004b24 <MX_LPUART1_UART_Init+0xac>)
 8004ae6:	f004 fbef 	bl	80092c8 <HAL_UARTEx_SetRxFifoThreshold>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004af0:	f7fc fe28 	bl	8001744 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004af4:	480b      	ldr	r0, [pc, #44]	; (8004b24 <MX_LPUART1_UART_Init+0xac>)
 8004af6:	f004 fb70 	bl	80091da <HAL_UARTEx_DisableFifoMode>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004b00:	f7fc fe20 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_IDLE);
 8004b04:	4b07      	ldr	r3, [pc, #28]	; (8004b24 <MX_LPUART1_UART_Init+0xac>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <MX_LPUART1_UART_Init+0xac>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0210 	orr.w	r2, r2, #16
 8004b12:	601a      	str	r2, [r3, #0]
    	HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 8004b14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b18:	4904      	ldr	r1, [pc, #16]	; (8004b2c <MX_LPUART1_UART_Init+0xb4>)
 8004b1a:	4802      	ldr	r0, [pc, #8]	; (8004b24 <MX_LPUART1_UART_Init+0xac>)
 8004b1c:	f003 f946 	bl	8007dac <HAL_UART_Receive_DMA>
  /* USER CODE END LPUART1_Init 2 */

}
 8004b20:	bf00      	nop
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	2000026c 	.word	0x2000026c
 8004b28:	40008000 	.word	0x40008000
 8004b2c:	20000ef0 	.word	0x20000ef0

08004b30 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004b34:	4b23      	ldr	r3, [pc, #140]	; (8004bc4 <MX_USART1_UART_Init+0x94>)
 8004b36:	4a24      	ldr	r2, [pc, #144]	; (8004bc8 <MX_USART1_UART_Init+0x98>)
 8004b38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004b3a:	4b22      	ldr	r3, [pc, #136]	; (8004bc4 <MX_USART1_UART_Init+0x94>)
 8004b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8004b42:	4b20      	ldr	r3, [pc, #128]	; (8004bc4 <MX_USART1_UART_Init+0x94>)
 8004b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b48:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004b4a:	4b1e      	ldr	r3, [pc, #120]	; (8004bc4 <MX_USART1_UART_Init+0x94>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004b50:	4b1c      	ldr	r3, [pc, #112]	; (8004bc4 <MX_USART1_UART_Init+0x94>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004b56:	4b1b      	ldr	r3, [pc, #108]	; (8004bc4 <MX_USART1_UART_Init+0x94>)
 8004b58:	220c      	movs	r2, #12
 8004b5a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b5c:	4b19      	ldr	r3, [pc, #100]	; (8004bc4 <MX_USART1_UART_Init+0x94>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b62:	4b18      	ldr	r3, [pc, #96]	; (8004bc4 <MX_USART1_UART_Init+0x94>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b68:	4b16      	ldr	r3, [pc, #88]	; (8004bc4 <MX_USART1_UART_Init+0x94>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004b6e:	4b15      	ldr	r3, [pc, #84]	; (8004bc4 <MX_USART1_UART_Init+0x94>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b74:	4b13      	ldr	r3, [pc, #76]	; (8004bc4 <MX_USART1_UART_Init+0x94>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004b7a:	4812      	ldr	r0, [pc, #72]	; (8004bc4 <MX_USART1_UART_Init+0x94>)
 8004b7c:	f003 f838 	bl	8007bf0 <HAL_UART_Init>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8004b86:	f7fc fddd 	bl	8001744 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	480d      	ldr	r0, [pc, #52]	; (8004bc4 <MX_USART1_UART_Init+0x94>)
 8004b8e:	f004 fb5d 	bl	800924c <HAL_UARTEx_SetTxFifoThreshold>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8004b98:	f7fc fdd4 	bl	8001744 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	4809      	ldr	r0, [pc, #36]	; (8004bc4 <MX_USART1_UART_Init+0x94>)
 8004ba0:	f004 fb92 	bl	80092c8 <HAL_UARTEx_SetRxFifoThreshold>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8004baa:	f7fc fdcb 	bl	8001744 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004bae:	4805      	ldr	r0, [pc, #20]	; (8004bc4 <MX_USART1_UART_Init+0x94>)
 8004bb0:	f004 fb13 	bl	80091da <HAL_UARTEx_DisableFifoMode>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8004bba:	f7fc fdc3 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004bbe:	bf00      	nop
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20000300 	.word	0x20000300
 8004bc8:	40013800 	.word	0x40013800

08004bcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b09c      	sub	sp, #112	; 0x70
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	605a      	str	r2, [r3, #4]
 8004bde:	609a      	str	r2, [r3, #8]
 8004be0:	60da      	str	r2, [r3, #12]
 8004be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004be4:	f107 030c 	add.w	r3, r7, #12
 8004be8:	2250      	movs	r2, #80	; 0x50
 8004bea:	2100      	movs	r1, #0
 8004bec:	4618      	mov	r0, r3
 8004bee:	f005 fd23 	bl	800a638 <memset>
  if(uartHandle->Instance==LPUART1)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a44      	ldr	r2, [pc, #272]	; (8004d08 <HAL_UART_MspInit+0x13c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d156      	bne.n	8004caa <HAL_UART_MspInit+0xde>
//
  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004c00:	2300      	movs	r3, #0
 8004c02:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c04:	f107 030c 	add.w	r3, r7, #12
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f002 fc89 	bl	8007520 <HAL_RCCEx_PeriphCLKConfig>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004c14:	f7fc fd96 	bl	8001744 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004c18:	2001      	movs	r0, #1
 8004c1a:	f7ff fefa 	bl	8004a12 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c1e:	2004      	movs	r0, #4
 8004c20:	f7ff fede 	bl	80049e0 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ESP32_RX_Pin|ESP32_TX_Pin;
 8004c24:	2303      	movs	r3, #3
 8004c26:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c28:	2302      	movs	r3, #2
 8004c2a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c30:	2300      	movs	r3, #0
 8004c32:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004c34:	2308      	movs	r3, #8
 8004c36:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c38:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4833      	ldr	r0, [pc, #204]	; (8004d0c <HAL_UART_MspInit+0x140>)
 8004c40:	f000 fe44 	bl	80058cc <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8004c44:	4b32      	ldr	r3, [pc, #200]	; (8004d10 <HAL_UART_MspInit+0x144>)
 8004c46:	4a33      	ldr	r2, [pc, #204]	; (8004d14 <HAL_UART_MspInit+0x148>)
 8004c48:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8004c4a:	4b31      	ldr	r3, [pc, #196]	; (8004d10 <HAL_UART_MspInit+0x144>)
 8004c4c:	2210      	movs	r2, #16
 8004c4e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c50:	4b2f      	ldr	r3, [pc, #188]	; (8004d10 <HAL_UART_MspInit+0x144>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c56:	4b2e      	ldr	r3, [pc, #184]	; (8004d10 <HAL_UART_MspInit+0x144>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c5c:	4b2c      	ldr	r3, [pc, #176]	; (8004d10 <HAL_UART_MspInit+0x144>)
 8004c5e:	2280      	movs	r2, #128	; 0x80
 8004c60:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c62:	4b2b      	ldr	r3, [pc, #172]	; (8004d10 <HAL_UART_MspInit+0x144>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c68:	4b29      	ldr	r3, [pc, #164]	; (8004d10 <HAL_UART_MspInit+0x144>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8004c6e:	4b28      	ldr	r3, [pc, #160]	; (8004d10 <HAL_UART_MspInit+0x144>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c74:	4b26      	ldr	r3, [pc, #152]	; (8004d10 <HAL_UART_MspInit+0x144>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8004c7a:	4825      	ldr	r0, [pc, #148]	; (8004d10 <HAL_UART_MspInit+0x144>)
 8004c7c:	f000 faf4 	bl	8005268 <HAL_DMA_Init>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8004c86:	f7fc fd5d 	bl	8001744 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a20      	ldr	r2, [pc, #128]	; (8004d10 <HAL_UART_MspInit+0x144>)
 8004c8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004c92:	4a1f      	ldr	r2, [pc, #124]	; (8004d10 <HAL_UART_MspInit+0x144>)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8004c98:	2200      	movs	r2, #0
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	2025      	movs	r0, #37	; 0x25
 8004c9e:	f000 faae 	bl	80051fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004ca2:	2025      	movs	r0, #37	; 0x25
 8004ca4:	f000 fac5 	bl	8005232 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */
//
  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004ca8:	e029      	b.n	8004cfe <HAL_UART_MspInit+0x132>
  else if(uartHandle->Instance==USART1)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1a      	ldr	r2, [pc, #104]	; (8004d18 <HAL_UART_MspInit+0x14c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d124      	bne.n	8004cfe <HAL_UART_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004cbc:	f107 030c 	add.w	r3, r7, #12
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f002 fc2d 	bl	8007520 <HAL_RCCEx_PeriphCLKConfig>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_UART_MspInit+0x104>
      Error_Handler();
 8004ccc:	f7fc fd3a 	bl	8001744 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004cd0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004cd4:	f7ff feb6 	bl	8004a44 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cd8:	2002      	movs	r0, #2
 8004cda:	f7ff fe81 	bl	80049e0 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8004cde:	23c0      	movs	r3, #192	; 0xc0
 8004ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cea:	2300      	movs	r3, #0
 8004cec:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004cee:	2307      	movs	r3, #7
 8004cf0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cf2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4808      	ldr	r0, [pc, #32]	; (8004d1c <HAL_UART_MspInit+0x150>)
 8004cfa:	f000 fde7 	bl	80058cc <HAL_GPIO_Init>
}
 8004cfe:	bf00      	nop
 8004d00:	3770      	adds	r7, #112	; 0x70
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40008000 	.word	0x40008000
 8004d0c:	48000800 	.word	0x48000800
 8004d10:	20000394 	.word	0x20000394
 8004d14:	40020008 	.word	0x40020008
 8004d18:	40013800 	.word	0x40013800
 8004d1c:	48000400 	.word	0x48000400

08004d20 <LL_AHB2_GRP1_EnableClock>:
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4013      	ands	r3, r2
 8004d42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004d44:	68fb      	ldr	r3, [r7, #12]
}
 8004d46:	bf00      	nop
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <LL_APB1_GRP1_EnableClock>:
{
 8004d52:	b480      	push	{r7}
 8004d54:	b085      	sub	sp, #20
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4013      	ands	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004d76:	68fb      	ldr	r3, [r7, #12]
}
 8004d78:	bf00      	nop
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8004d88:	4b10      	ldr	r3, [pc, #64]	; (8004dcc <MX_USB_PCD_Init+0x48>)
 8004d8a:	4a11      	ldr	r2, [pc, #68]	; (8004dd0 <MX_USB_PCD_Init+0x4c>)
 8004d8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004d8e:	4b0f      	ldr	r3, [pc, #60]	; (8004dcc <MX_USB_PCD_Init+0x48>)
 8004d90:	2208      	movs	r2, #8
 8004d92:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004d94:	4b0d      	ldr	r3, [pc, #52]	; (8004dcc <MX_USB_PCD_Init+0x48>)
 8004d96:	2202      	movs	r2, #2
 8004d98:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004d9a:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <MX_USB_PCD_Init+0x48>)
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8004da0:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <MX_USB_PCD_Init+0x48>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004da6:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <MX_USB_PCD_Init+0x48>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004dac:	4b07      	ldr	r3, [pc, #28]	; (8004dcc <MX_USB_PCD_Init+0x48>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004db2:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <MX_USB_PCD_Init+0x48>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004db8:	4804      	ldr	r0, [pc, #16]	; (8004dcc <MX_USB_PCD_Init+0x48>)
 8004dba:	f000 ff59 	bl	8005c70 <HAL_PCD_Init>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8004dc4:	f7fc fcbe 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8004dc8:	bf00      	nop
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	200003f4 	.word	0x200003f4
 8004dd0:	40006800 	.word	0x40006800

08004dd4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b09c      	sub	sp, #112	; 0x70
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ddc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	605a      	str	r2, [r3, #4]
 8004de6:	609a      	str	r2, [r3, #8]
 8004de8:	60da      	str	r2, [r3, #12]
 8004dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004dec:	f107 030c 	add.w	r3, r7, #12
 8004df0:	2250      	movs	r2, #80	; 0x50
 8004df2:	2100      	movs	r1, #0
 8004df4:	4618      	mov	r0, r3
 8004df6:	f005 fc1f 	bl	800a638 <memset>
  if(pcdHandle->Instance==USB)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a1f      	ldr	r2, [pc, #124]	; (8004e7c <HAL_PCD_MspInit+0xa8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d136      	bne.n	8004e72 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e08:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8004e0a:	2318      	movs	r3, #24
 8004e0c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8004e0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e12:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8004e14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e18:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8004e1a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004e1e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8004e20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e24:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8004e26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004e2a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e2c:	f107 030c 	add.w	r3, r7, #12
 8004e30:	4618      	mov	r0, r3
 8004e32:	f002 fb75 	bl	8007520 <HAL_RCCEx_PeriphCLKConfig>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8004e3c:	f7fc fc82 	bl	8001744 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e40:	2001      	movs	r0, #1
 8004e42:	f7ff ff6d 	bl	8004d20 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004e46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004e4a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e50:	2300      	movs	r3, #0
 8004e52:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e54:	2300      	movs	r3, #0
 8004e56:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8004e58:	230a      	movs	r3, #10
 8004e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e5c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004e60:	4619      	mov	r1, r3
 8004e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e66:	f000 fd31 	bl	80058cc <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004e6a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004e6e:	f7ff ff70 	bl	8004d52 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004e72:	bf00      	nop
 8004e74:	3770      	adds	r7, #112	; 0x70
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40006800 	.word	0x40006800

08004e80 <CopyDataInit>:
 8004e80:	58d4      	ldr	r4, [r2, r3]
 8004e82:	50c4      	str	r4, [r0, r3]
 8004e84:	3304      	adds	r3, #4

08004e86 <LoopCopyDataInit>:
 8004e86:	18c4      	adds	r4, r0, r3
 8004e88:	428c      	cmp	r4, r1
 8004e8a:	d3f9      	bcc.n	8004e80 <CopyDataInit>
 8004e8c:	4770      	bx	lr

08004e8e <FillZerobss>:
 8004e8e:	6003      	str	r3, [r0, #0]
 8004e90:	3004      	adds	r0, #4

08004e92 <LoopFillZerobss>:
 8004e92:	4288      	cmp	r0, r1
 8004e94:	d3fb      	bcc.n	8004e8e <FillZerobss>
 8004e96:	4770      	bx	lr

08004e98 <Reset_Handler>:
 8004e98:	480c      	ldr	r0, [pc, #48]	; (8004ecc <LoopForever+0x2>)
 8004e9a:	4685      	mov	sp, r0
 8004e9c:	f7ff fcf8 	bl	8004890 <SystemInit>
 8004ea0:	480b      	ldr	r0, [pc, #44]	; (8004ed0 <LoopForever+0x6>)
 8004ea2:	490c      	ldr	r1, [pc, #48]	; (8004ed4 <LoopForever+0xa>)
 8004ea4:	4a0c      	ldr	r2, [pc, #48]	; (8004ed8 <LoopForever+0xe>)
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f7ff ffed 	bl	8004e86 <LoopCopyDataInit>
 8004eac:	480b      	ldr	r0, [pc, #44]	; (8004edc <LoopForever+0x12>)
 8004eae:	490c      	ldr	r1, [pc, #48]	; (8004ee0 <LoopForever+0x16>)
 8004eb0:	4a0c      	ldr	r2, [pc, #48]	; (8004ee4 <LoopForever+0x1a>)
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	f7ff ffe7 	bl	8004e86 <LoopCopyDataInit>
 8004eb8:	480b      	ldr	r0, [pc, #44]	; (8004ee8 <LoopForever+0x1e>)
 8004eba:	490c      	ldr	r1, [pc, #48]	; (8004eec <LoopForever+0x22>)
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	f7ff ffe8 	bl	8004e92 <LoopFillZerobss>
 8004ec2:	f005 faf5 	bl	800a4b0 <__libc_init_array>
 8004ec6:	f7fc fa93 	bl	80013f0 <main>

08004eca <LoopForever>:
 8004eca:	e7fe      	b.n	8004eca <LoopForever>
 8004ecc:	20030000 	.word	0x20030000
 8004ed0:	20000008 	.word	0x20000008
 8004ed4:	200001f8 	.word	0x200001f8
 8004ed8:	0800e58c 	.word	0x0800e58c
 8004edc:	20030000 	.word	0x20030000
 8004ee0:	20030000 	.word	0x20030000
 8004ee4:	0800e77c 	.word	0x0800e77c
 8004ee8:	200001f8 	.word	0x200001f8
 8004eec:	20001704 	.word	0x20001704

08004ef0 <ADC1_IRQHandler>:
 8004ef0:	e7fe      	b.n	8004ef0 <ADC1_IRQHandler>
	...

08004ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004efe:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <HAL_Init+0x3c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a0b      	ldr	r2, [pc, #44]	; (8004f30 <HAL_Init+0x3c>)
 8004f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f08:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f0a:	2003      	movs	r0, #3
 8004f0c:	f000 f96c 	bl	80051e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004f10:	2000      	movs	r0, #0
 8004f12:	f000 f80f 	bl	8004f34 <HAL_InitTick>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	71fb      	strb	r3, [r7, #7]
 8004f20:	e001      	b.n	8004f26 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004f22:	f7ff fb68 	bl	80045f6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004f26:	79fb      	ldrb	r3, [r7, #7]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3708      	adds	r7, #8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	58004000 	.word	0x58004000

08004f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004f40:	4b17      	ldr	r3, [pc, #92]	; (8004fa0 <HAL_InitTick+0x6c>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d024      	beq.n	8004f92 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004f48:	f002 f84a 	bl	8006fe0 <HAL_RCC_GetHCLKFreq>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	4b14      	ldr	r3, [pc, #80]	; (8004fa0 <HAL_InitTick+0x6c>)
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	4619      	mov	r1, r3
 8004f54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f58:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 f974 	bl	800524e <HAL_SYSTICK_Config>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10f      	bne.n	8004f8c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b0f      	cmp	r3, #15
 8004f70:	d809      	bhi.n	8004f86 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f72:	2200      	movs	r2, #0
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7a:	f000 f940 	bl	80051fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004f7e:	4a09      	ldr	r2, [pc, #36]	; (8004fa4 <HAL_InitTick+0x70>)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	e007      	b.n	8004f96 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	73fb      	strb	r3, [r7, #15]
 8004f8a:	e004      	b.n	8004f96 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	73fb      	strb	r3, [r7, #15]
 8004f90:	e001      	b.n	8004f96 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20000020 	.word	0x20000020
 8004fa4:	2000001c 	.word	0x2000001c

08004fa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004fac:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <HAL_IncTick+0x20>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <HAL_IncTick+0x24>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	4a04      	ldr	r2, [pc, #16]	; (8004fcc <HAL_IncTick+0x24>)
 8004fba:	6013      	str	r3, [r2, #0]
}
 8004fbc:	bf00      	nop
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	20000020 	.word	0x20000020
 8004fcc:	200006e8 	.word	0x200006e8

08004fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8004fd4:	4b03      	ldr	r3, [pc, #12]	; (8004fe4 <HAL_GetTick+0x14>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	200006e8 	.word	0x200006e8

08004fe8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004fec:	4b03      	ldr	r3, [pc, #12]	; (8004ffc <HAL_GetTickPrio+0x14>)
 8004fee:	681b      	ldr	r3, [r3, #0]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	2000001c 	.word	0x2000001c

08005000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005008:	f7ff ffe2 	bl	8004fd0 <HAL_GetTick>
 800500c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005018:	d005      	beq.n	8005026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800501a:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <HAL_Delay+0x44>)
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005026:	bf00      	nop
 8005028:	f7ff ffd2 	bl	8004fd0 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	429a      	cmp	r2, r3
 8005036:	d8f7      	bhi.n	8005028 <HAL_Delay+0x28>
  {
  }
}
 8005038:	bf00      	nop
 800503a:	bf00      	nop
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20000020 	.word	0x20000020

08005048 <__NVIC_SetPriorityGrouping>:
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005058:	4b0c      	ldr	r3, [pc, #48]	; (800508c <__NVIC_SetPriorityGrouping+0x44>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005064:	4013      	ands	r3, r2
 8005066:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800507a:	4a04      	ldr	r2, [pc, #16]	; (800508c <__NVIC_SetPriorityGrouping+0x44>)
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	60d3      	str	r3, [r2, #12]
}
 8005080:	bf00      	nop
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	e000ed00 	.word	0xe000ed00

08005090 <__NVIC_GetPriorityGrouping>:
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005094:	4b04      	ldr	r3, [pc, #16]	; (80050a8 <__NVIC_GetPriorityGrouping+0x18>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	0a1b      	lsrs	r3, r3, #8
 800509a:	f003 0307 	and.w	r3, r3, #7
}
 800509e:	4618      	mov	r0, r3
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	e000ed00 	.word	0xe000ed00

080050ac <__NVIC_EnableIRQ>:
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	4603      	mov	r3, r0
 80050b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	db0b      	blt.n	80050d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	f003 021f 	and.w	r2, r3, #31
 80050c4:	4907      	ldr	r1, [pc, #28]	; (80050e4 <__NVIC_EnableIRQ+0x38>)
 80050c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ca:	095b      	lsrs	r3, r3, #5
 80050cc:	2001      	movs	r0, #1
 80050ce:	fa00 f202 	lsl.w	r2, r0, r2
 80050d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	e000e100 	.word	0xe000e100

080050e8 <__NVIC_SetPriority>:
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4603      	mov	r3, r0
 80050f0:	6039      	str	r1, [r7, #0]
 80050f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	db0a      	blt.n	8005112 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	490c      	ldr	r1, [pc, #48]	; (8005134 <__NVIC_SetPriority+0x4c>)
 8005102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005106:	0112      	lsls	r2, r2, #4
 8005108:	b2d2      	uxtb	r2, r2
 800510a:	440b      	add	r3, r1
 800510c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005110:	e00a      	b.n	8005128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	b2da      	uxtb	r2, r3
 8005116:	4908      	ldr	r1, [pc, #32]	; (8005138 <__NVIC_SetPriority+0x50>)
 8005118:	79fb      	ldrb	r3, [r7, #7]
 800511a:	f003 030f 	and.w	r3, r3, #15
 800511e:	3b04      	subs	r3, #4
 8005120:	0112      	lsls	r2, r2, #4
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	440b      	add	r3, r1
 8005126:	761a      	strb	r2, [r3, #24]
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	e000e100 	.word	0xe000e100
 8005138:	e000ed00 	.word	0xe000ed00

0800513c <NVIC_EncodePriority>:
{
 800513c:	b480      	push	{r7}
 800513e:	b089      	sub	sp, #36	; 0x24
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	f1c3 0307 	rsb	r3, r3, #7
 8005156:	2b04      	cmp	r3, #4
 8005158:	bf28      	it	cs
 800515a:	2304      	movcs	r3, #4
 800515c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	3304      	adds	r3, #4
 8005162:	2b06      	cmp	r3, #6
 8005164:	d902      	bls.n	800516c <NVIC_EncodePriority+0x30>
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	3b03      	subs	r3, #3
 800516a:	e000      	b.n	800516e <NVIC_EncodePriority+0x32>
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005170:	f04f 32ff 	mov.w	r2, #4294967295
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	43da      	mvns	r2, r3
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	401a      	ands	r2, r3
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005184:	f04f 31ff 	mov.w	r1, #4294967295
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	fa01 f303 	lsl.w	r3, r1, r3
 800518e:	43d9      	mvns	r1, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005194:	4313      	orrs	r3, r2
}
 8005196:	4618      	mov	r0, r3
 8005198:	3724      	adds	r7, #36	; 0x24
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
	...

080051a4 <SysTick_Config>:
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051b4:	d301      	bcc.n	80051ba <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80051b6:	2301      	movs	r3, #1
 80051b8:	e00f      	b.n	80051da <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051ba:	4a0a      	ldr	r2, [pc, #40]	; (80051e4 <SysTick_Config+0x40>)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	3b01      	subs	r3, #1
 80051c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051c2:	210f      	movs	r1, #15
 80051c4:	f04f 30ff 	mov.w	r0, #4294967295
 80051c8:	f7ff ff8e 	bl	80050e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051cc:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <SysTick_Config+0x40>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051d2:	4b04      	ldr	r3, [pc, #16]	; (80051e4 <SysTick_Config+0x40>)
 80051d4:	2207      	movs	r2, #7
 80051d6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	e000e010 	.word	0xe000e010

080051e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7ff ff29 	bl	8005048 <__NVIC_SetPriorityGrouping>
}
 80051f6:	bf00      	nop
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b086      	sub	sp, #24
 8005202:	af00      	add	r7, sp, #0
 8005204:	4603      	mov	r3, r0
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	607a      	str	r2, [r7, #4]
 800520a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800520c:	f7ff ff40 	bl	8005090 <__NVIC_GetPriorityGrouping>
 8005210:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	6978      	ldr	r0, [r7, #20]
 8005218:	f7ff ff90 	bl	800513c <NVIC_EncodePriority>
 800521c:	4602      	mov	r2, r0
 800521e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005222:	4611      	mov	r1, r2
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff ff5f 	bl	80050e8 <__NVIC_SetPriority>
}
 800522a:	bf00      	nop
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b082      	sub	sp, #8
 8005236:	af00      	add	r7, sp, #0
 8005238:	4603      	mov	r3, r0
 800523a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800523c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff ff33 	bl	80050ac <__NVIC_EnableIRQ>
}
 8005246:	bf00      	nop
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7ff ffa4 	bl	80051a4 <SysTick_Config>
 800525c:	4603      	mov	r3, r0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e08e      	b.n	8005398 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	4b47      	ldr	r3, [pc, #284]	; (80053a0 <HAL_DMA_Init+0x138>)
 8005282:	429a      	cmp	r2, r3
 8005284:	d80f      	bhi.n	80052a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	461a      	mov	r2, r3
 800528c:	4b45      	ldr	r3, [pc, #276]	; (80053a4 <HAL_DMA_Init+0x13c>)
 800528e:	4413      	add	r3, r2
 8005290:	4a45      	ldr	r2, [pc, #276]	; (80053a8 <HAL_DMA_Init+0x140>)
 8005292:	fba2 2303 	umull	r2, r3, r2, r3
 8005296:	091b      	lsrs	r3, r3, #4
 8005298:	009a      	lsls	r2, r3, #2
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a42      	ldr	r2, [pc, #264]	; (80053ac <HAL_DMA_Init+0x144>)
 80052a2:	641a      	str	r2, [r3, #64]	; 0x40
 80052a4:	e00e      	b.n	80052c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	4b40      	ldr	r3, [pc, #256]	; (80053b0 <HAL_DMA_Init+0x148>)
 80052ae:	4413      	add	r3, r2
 80052b0:	4a3d      	ldr	r2, [pc, #244]	; (80053a8 <HAL_DMA_Init+0x140>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	091b      	lsrs	r3, r3, #4
 80052b8:	009a      	lsls	r2, r3, #2
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a3c      	ldr	r2, [pc, #240]	; (80053b4 <HAL_DMA_Init+0x14c>)
 80052c2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80052da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80052e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005300:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fa74 	bl	8005804 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005324:	d102      	bne.n	800532c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005334:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005338:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005342:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d010      	beq.n	800536e <HAL_DMA_Init+0x106>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2b04      	cmp	r3, #4
 8005352:	d80c      	bhi.n	800536e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fa93 	bl	8005880 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800536a:	605a      	str	r2, [r3, #4]
 800536c:	e008      	b.n	8005380 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40020407 	.word	0x40020407
 80053a4:	bffdfff8 	.word	0xbffdfff8
 80053a8:	cccccccd 	.word	0xcccccccd
 80053ac:	40020000 	.word	0x40020000
 80053b0:	bffdfbf8 	.word	0xbffdfbf8
 80053b4:	40020400 	.word	0x40020400

080053b8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_DMA_Start_IT+0x20>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e066      	b.n	80054a6 <HAL_DMA_Start_IT+0xee>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d155      	bne.n	8005498 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0201 	bic.w	r2, r2, #1
 8005408:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	68b9      	ldr	r1, [r7, #8]
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 f9b9 	bl	8005788 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	2b00      	cmp	r3, #0
 800541c:	d008      	beq.n	8005430 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f042 020e 	orr.w	r2, r2, #14
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	e00f      	b.n	8005450 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0204 	bic.w	r2, r2, #4
 800543e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 020a 	orr.w	r2, r2, #10
 800544e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d007      	beq.n	800546e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800546c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005472:	2b00      	cmp	r3, #0
 8005474:	d007      	beq.n	8005486 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005484:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 0201 	orr.w	r2, r2, #1
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	e005      	b.n	80054a4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80054a0:	2302      	movs	r3, #2
 80054a2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80054a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e04f      	b.n	8005560 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d008      	beq.n	80054de <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2204      	movs	r2, #4
 80054d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e040      	b.n	8005560 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 020e 	bic.w	r2, r2, #14
 80054ec:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0201 	bic.w	r2, r2, #1
 800550c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005512:	f003 021c 	and.w	r2, r3, #28
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	2101      	movs	r1, #1
 800551c:	fa01 f202 	lsl.w	r2, r1, r2
 8005520:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800552a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00c      	beq.n	800554e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005542:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800554c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d005      	beq.n	8005590 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2204      	movs	r2, #4
 8005588:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	73fb      	strb	r3, [r7, #15]
 800558e:	e047      	b.n	8005620 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 020e 	bic.w	r2, r2, #14
 800559e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0201 	bic.w	r2, r2, #1
 80055ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c4:	f003 021c 	and.w	r2, r3, #28
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055cc:	2101      	movs	r1, #1
 80055ce:	fa01 f202 	lsl.w	r2, r1, r2
 80055d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80055dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00c      	beq.n	8005600 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80055fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	4798      	blx	r3
    }
  }
  return status;
 8005620:	7bfb      	ldrb	r3, [r7, #15]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005646:	f003 031c 	and.w	r3, r3, #28
 800564a:	2204      	movs	r2, #4
 800564c:	409a      	lsls	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4013      	ands	r3, r2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d026      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x7a>
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	d021      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0320 	and.w	r3, r3, #32
 800566a:	2b00      	cmp	r3, #0
 800566c:	d107      	bne.n	800567e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 0204 	bic.w	r2, r2, #4
 800567c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005682:	f003 021c 	and.w	r2, r3, #28
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	2104      	movs	r1, #4
 800568c:	fa01 f202 	lsl.w	r2, r1, r2
 8005690:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	2b00      	cmp	r3, #0
 8005698:	d071      	beq.n	800577e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80056a2:	e06c      	b.n	800577e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a8:	f003 031c 	and.w	r3, r3, #28
 80056ac:	2202      	movs	r2, #2
 80056ae:	409a      	lsls	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4013      	ands	r3, r2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d02e      	beq.n	8005716 <HAL_DMA_IRQHandler+0xec>
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d029      	beq.n	8005716 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0320 	and.w	r3, r3, #32
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10b      	bne.n	80056e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 020a 	bic.w	r2, r2, #10
 80056de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ec:	f003 021c 	and.w	r2, r3, #28
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f4:	2102      	movs	r1, #2
 80056f6:	fa01 f202 	lsl.w	r2, r1, r2
 80056fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	2b00      	cmp	r3, #0
 800570a:	d038      	beq.n	800577e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005714:	e033      	b.n	800577e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800571a:	f003 031c 	and.w	r3, r3, #28
 800571e:	2208      	movs	r2, #8
 8005720:	409a      	lsls	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4013      	ands	r3, r2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d02a      	beq.n	8005780 <HAL_DMA_IRQHandler+0x156>
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	f003 0308 	and.w	r3, r3, #8
 8005730:	2b00      	cmp	r3, #0
 8005732:	d025      	beq.n	8005780 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 020e 	bic.w	r2, r2, #14
 8005742:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005748:	f003 021c 	and.w	r2, r3, #28
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005750:	2101      	movs	r1, #1
 8005752:	fa01 f202 	lsl.w	r2, r1, r2
 8005756:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005772:	2b00      	cmp	r3, #0
 8005774:	d004      	beq.n	8005780 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800577e:	bf00      	nop
 8005780:	bf00      	nop
}
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
 8005794:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800579e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d004      	beq.n	80057b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80057b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b6:	f003 021c 	and.w	r2, r3, #28
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	2101      	movs	r1, #1
 80057c0:	fa01 f202 	lsl.w	r2, r1, r2
 80057c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	2b10      	cmp	r3, #16
 80057d4:	d108      	bne.n	80057e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80057e6:	e007      	b.n	80057f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	60da      	str	r2, [r3, #12]
}
 80057f8:	bf00      	nop
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	461a      	mov	r2, r3
 8005812:	4b17      	ldr	r3, [pc, #92]	; (8005870 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005814:	429a      	cmp	r2, r3
 8005816:	d80a      	bhi.n	800582e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800581c:	089b      	lsrs	r3, r3, #2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005824:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6493      	str	r3, [r2, #72]	; 0x48
 800582c:	e007      	b.n	800583e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005832:	089b      	lsrs	r3, r3, #2
 8005834:	009a      	lsls	r2, r3, #2
 8005836:	4b0f      	ldr	r3, [pc, #60]	; (8005874 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005838:	4413      	add	r3, r2
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	b2db      	uxtb	r3, r3
 8005844:	3b08      	subs	r3, #8
 8005846:	4a0c      	ldr	r2, [pc, #48]	; (8005878 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005848:	fba2 2303 	umull	r2, r3, r2, r3
 800584c:	091b      	lsrs	r3, r3, #4
 800584e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a0a      	ldr	r2, [pc, #40]	; (800587c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005854:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f003 031f 	and.w	r3, r3, #31
 800585c:	2201      	movs	r2, #1
 800585e:	409a      	lsls	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005864:	bf00      	nop
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	40020407 	.word	0x40020407
 8005874:	4002081c 	.word	0x4002081c
 8005878:	cccccccd 	.word	0xcccccccd
 800587c:	40020880 	.word	0x40020880

08005880 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005890:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4b0b      	ldr	r3, [pc, #44]	; (80058c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	461a      	mov	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a09      	ldr	r2, [pc, #36]	; (80058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80058a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3b01      	subs	r3, #1
 80058aa:	f003 0303 	and.w	r3, r3, #3
 80058ae:	2201      	movs	r2, #1
 80058b0:	409a      	lsls	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80058b6:	bf00      	nop
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	1000823f 	.word	0x1000823f
 80058c8:	40020940 	.word	0x40020940

080058cc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80058d6:	2300      	movs	r3, #0
 80058d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80058da:	e14c      	b.n	8005b76 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	2101      	movs	r1, #1
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	fa01 f303 	lsl.w	r3, r1, r3
 80058e8:	4013      	ands	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 813e 	beq.w	8005b70 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f003 0303 	and.w	r3, r3, #3
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d005      	beq.n	800590c <HAL_GPIO_Init+0x40>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f003 0303 	and.w	r3, r3, #3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d130      	bne.n	800596e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	2203      	movs	r2, #3
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	43db      	mvns	r3, r3
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	4013      	ands	r3, r2
 8005922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	fa02 f303 	lsl.w	r3, r2, r3
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	4313      	orrs	r3, r2
 8005934:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005942:	2201      	movs	r2, #1
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	43db      	mvns	r3, r3
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	4013      	ands	r3, r2
 8005950:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	091b      	lsrs	r3, r3, #4
 8005958:	f003 0201 	and.w	r2, r3, #1
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	fa02 f303 	lsl.w	r3, r2, r3
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	2b03      	cmp	r3, #3
 8005978:	d017      	beq.n	80059aa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	2203      	movs	r2, #3
 8005986:	fa02 f303 	lsl.w	r3, r2, r3
 800598a:	43db      	mvns	r3, r3
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	4013      	ands	r3, r2
 8005990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	fa02 f303 	lsl.w	r3, r2, r3
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d123      	bne.n	80059fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	08da      	lsrs	r2, r3, #3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	3208      	adds	r2, #8
 80059be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	220f      	movs	r2, #15
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	43db      	mvns	r3, r3
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4013      	ands	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	691a      	ldr	r2, [r3, #16]
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f003 0307 	and.w	r3, r3, #7
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	08da      	lsrs	r2, r3, #3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3208      	adds	r2, #8
 80059f8:	6939      	ldr	r1, [r7, #16]
 80059fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	2203      	movs	r2, #3
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	43db      	mvns	r3, r3
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	4013      	ands	r3, r2
 8005a14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f003 0203 	and.w	r2, r3, #3
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 8098 	beq.w	8005b70 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005a40:	4a54      	ldr	r2, [pc, #336]	; (8005b94 <HAL_GPIO_Init+0x2c8>)
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	089b      	lsrs	r3, r3, #2
 8005a46:	3302      	adds	r3, #2
 8005a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f003 0303 	and.w	r3, r3, #3
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	220f      	movs	r2, #15
 8005a58:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5c:	43db      	mvns	r3, r3
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4013      	ands	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005a6a:	d019      	beq.n	8005aa0 <HAL_GPIO_Init+0x1d4>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a4a      	ldr	r2, [pc, #296]	; (8005b98 <HAL_GPIO_Init+0x2cc>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d013      	beq.n	8005a9c <HAL_GPIO_Init+0x1d0>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a49      	ldr	r2, [pc, #292]	; (8005b9c <HAL_GPIO_Init+0x2d0>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d00d      	beq.n	8005a98 <HAL_GPIO_Init+0x1cc>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a48      	ldr	r2, [pc, #288]	; (8005ba0 <HAL_GPIO_Init+0x2d4>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d007      	beq.n	8005a94 <HAL_GPIO_Init+0x1c8>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a47      	ldr	r2, [pc, #284]	; (8005ba4 <HAL_GPIO_Init+0x2d8>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d101      	bne.n	8005a90 <HAL_GPIO_Init+0x1c4>
 8005a8c:	2304      	movs	r3, #4
 8005a8e:	e008      	b.n	8005aa2 <HAL_GPIO_Init+0x1d6>
 8005a90:	2307      	movs	r3, #7
 8005a92:	e006      	b.n	8005aa2 <HAL_GPIO_Init+0x1d6>
 8005a94:	2303      	movs	r3, #3
 8005a96:	e004      	b.n	8005aa2 <HAL_GPIO_Init+0x1d6>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e002      	b.n	8005aa2 <HAL_GPIO_Init+0x1d6>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e000      	b.n	8005aa2 <HAL_GPIO_Init+0x1d6>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	f002 0203 	and.w	r2, r2, #3
 8005aa8:	0092      	lsls	r2, r2, #2
 8005aaa:	4093      	lsls	r3, r2
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005ab2:	4938      	ldr	r1, [pc, #224]	; (8005b94 <HAL_GPIO_Init+0x2c8>)
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	089b      	lsrs	r3, r3, #2
 8005ab8:	3302      	adds	r3, #2
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ac0:	4b39      	ldr	r3, [pc, #228]	; (8005ba8 <HAL_GPIO_Init+0x2dc>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	43db      	mvns	r3, r3
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	4013      	ands	r3, r2
 8005ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005ae4:	4a30      	ldr	r2, [pc, #192]	; (8005ba8 <HAL_GPIO_Init+0x2dc>)
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005aea:	4b2f      	ldr	r3, [pc, #188]	; (8005ba8 <HAL_GPIO_Init+0x2dc>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	43db      	mvns	r3, r3
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4013      	ands	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005b0e:	4a26      	ldr	r2, [pc, #152]	; (8005ba8 <HAL_GPIO_Init+0x2dc>)
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005b14:	4b24      	ldr	r3, [pc, #144]	; (8005ba8 <HAL_GPIO_Init+0x2dc>)
 8005b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	43db      	mvns	r3, r3
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4013      	ands	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005b3a:	4a1b      	ldr	r2, [pc, #108]	; (8005ba8 <HAL_GPIO_Init+0x2dc>)
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8005b42:	4b19      	ldr	r3, [pc, #100]	; (8005ba8 <HAL_GPIO_Init+0x2dc>)
 8005b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	43db      	mvns	r3, r3
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4013      	ands	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005b68:	4a0f      	ldr	r2, [pc, #60]	; (8005ba8 <HAL_GPIO_Init+0x2dc>)
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	3301      	adds	r3, #1
 8005b74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f47f aeab 	bne.w	80058dc <HAL_GPIO_Init+0x10>
  }
}
 8005b86:	bf00      	nop
 8005b88:	bf00      	nop
 8005b8a:	371c      	adds	r7, #28
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	40010000 	.word	0x40010000
 8005b98:	48000400 	.word	0x48000400
 8005b9c:	48000800 	.word	0x48000800
 8005ba0:	48000c00 	.word	0x48000c00
 8005ba4:	48001000 	.word	0x48001000
 8005ba8:	58000800 	.word	0x58000800

08005bac <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691a      	ldr	r2, [r3, #16]
 8005bbc:	887b      	ldrh	r3, [r7, #2]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	73fb      	strb	r3, [r7, #15]
 8005bc8:	e001      	b.n	8005bce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	807b      	strh	r3, [r7, #2]
 8005be8:	4613      	mov	r3, r2
 8005bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005bec:	787b      	ldrb	r3, [r7, #1]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005bf2:	887a      	ldrh	r2, [r7, #2]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005bf8:	e002      	b.n	8005c00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005bfa:	887a      	ldrh	r2, [r7, #2]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c1e:	887a      	ldrh	r2, [r7, #2]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4013      	ands	r3, r2
 8005c24:	041a      	lsls	r2, r3, #16
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	43d9      	mvns	r1, r3
 8005c2a:	887b      	ldrh	r3, [r7, #2]
 8005c2c:	400b      	ands	r3, r1
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	619a      	str	r2, [r3, #24]
}
 8005c34:	bf00      	nop
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	4603      	mov	r3, r0
 8005c48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005c4a:	4b08      	ldr	r3, [pc, #32]	; (8005c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	88fb      	ldrh	r3, [r7, #6]
 8005c50:	4013      	ands	r3, r2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d006      	beq.n	8005c64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c56:	4a05      	ldr	r2, [pc, #20]	; (8005c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c58:	88fb      	ldrh	r3, [r7, #6]
 8005c5a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c5c:	88fb      	ldrh	r3, [r7, #6]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fb fd56 	bl	8001710 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c64:	bf00      	nop
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	58000800 	.word	0x58000800

08005c70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c72:	b08b      	sub	sp, #44	; 0x2c
 8005c74:	af06      	add	r7, sp, #24
 8005c76:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e0cb      	b.n	8005e1a <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d106      	bne.n	8005c9c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7ff f89c 	bl	8004dd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2203      	movs	r2, #3
 8005ca0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f003 fb99 	bl	80093e0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cae:	2300      	movs	r3, #0
 8005cb0:	73fb      	strb	r3, [r7, #15]
 8005cb2:	e040      	b.n	8005d36 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005cb4:	7bfb      	ldrb	r3, [r7, #15]
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	440b      	add	r3, r1
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005cca:	7bfb      	ldrb	r3, [r7, #15]
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	1c5a      	adds	r2, r3, #1
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	440b      	add	r3, r1
 8005cda:	7bfa      	ldrb	r2, [r7, #15]
 8005cdc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	6879      	ldr	r1, [r7, #4]
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	440b      	add	r3, r1
 8005cee:	3303      	adds	r3, #3
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005cf4:	7bfa      	ldrb	r2, [r7, #15]
 8005cf6:	6879      	ldr	r1, [r7, #4]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	440b      	add	r3, r1
 8005d02:	3338      	adds	r3, #56	; 0x38
 8005d04:	2200      	movs	r2, #0
 8005d06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005d08:	7bfa      	ldrb	r2, [r7, #15]
 8005d0a:	6879      	ldr	r1, [r7, #4]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	440b      	add	r3, r1
 8005d16:	333c      	adds	r3, #60	; 0x3c
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005d1c:	7bfa      	ldrb	r2, [r7, #15]
 8005d1e:	6879      	ldr	r1, [r7, #4]
 8005d20:	4613      	mov	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	440b      	add	r3, r1
 8005d2a:	3340      	adds	r3, #64	; 0x40
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
 8005d32:	3301      	adds	r3, #1
 8005d34:	73fb      	strb	r3, [r7, #15]
 8005d36:	7bfa      	ldrb	r2, [r7, #15]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d3b9      	bcc.n	8005cb4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d40:	2300      	movs	r3, #0
 8005d42:	73fb      	strb	r3, [r7, #15]
 8005d44:	e044      	b.n	8005dd0 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d46:	7bfa      	ldrb	r2, [r7, #15]
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	00db      	lsls	r3, r3, #3
 8005d52:	440b      	add	r3, r1
 8005d54:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005d58:	2200      	movs	r2, #0
 8005d5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d5c:	7bfa      	ldrb	r2, [r7, #15]
 8005d5e:	6879      	ldr	r1, [r7, #4]
 8005d60:	4613      	mov	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	440b      	add	r3, r1
 8005d6a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005d6e:	7bfa      	ldrb	r2, [r7, #15]
 8005d70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005d72:	7bfa      	ldrb	r2, [r7, #15]
 8005d74:	6879      	ldr	r1, [r7, #4]
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	440b      	add	r3, r1
 8005d80:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005d84:	2200      	movs	r2, #0
 8005d86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005d88:	7bfa      	ldrb	r2, [r7, #15]
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	440b      	add	r3, r1
 8005d96:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005d9e:	7bfa      	ldrb	r2, [r7, #15]
 8005da0:	6879      	ldr	r1, [r7, #4]
 8005da2:	4613      	mov	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	00db      	lsls	r3, r3, #3
 8005daa:	440b      	add	r3, r1
 8005dac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005db4:	7bfa      	ldrb	r2, [r7, #15]
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	4613      	mov	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	00db      	lsls	r3, r3, #3
 8005dc0:	440b      	add	r3, r1
 8005dc2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	73fb      	strb	r3, [r7, #15]
 8005dd0:	7bfa      	ldrb	r2, [r7, #15]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d3b5      	bcc.n	8005d46 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	603b      	str	r3, [r7, #0]
 8005de0:	687e      	ldr	r6, [r7, #4]
 8005de2:	466d      	mov	r5, sp
 8005de4:	f106 0410 	add.w	r4, r6, #16
 8005de8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	602b      	str	r3, [r5, #0]
 8005df0:	1d33      	adds	r3, r6, #4
 8005df2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005df4:	6838      	ldr	r0, [r7, #0]
 8005df6:	f003 fb0e 	bl	8009416 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d102      	bne.n	8005e18 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f805 	bl	8005e22 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e22 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b085      	sub	sp, #20
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	f043 0301 	orr.w	r3, r3, #1
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	f043 0302 	orr.w	r3, r3, #2
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
	...

08005e78 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e7c:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a04      	ldr	r2, [pc, #16]	; (8005e94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e86:	6013      	str	r3, [r2, #0]
}
 8005e88:	bf00      	nop
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	58000400 	.word	0x58000400

08005e98 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005e9c:	4b04      	ldr	r3, [pc, #16]	; (8005eb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	58000400 	.word	0x58000400

08005eb4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ec6:	d101      	bne.n	8005ecc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e000      	b.n	8005ece <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <LL_RCC_HSE_Enable>:
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eea:	6013      	str	r3, [r2, #0]
}
 8005eec:	bf00      	nop
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <LL_RCC_HSE_Disable>:
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f08:	6013      	str	r3, [r2, #0]
}
 8005f0a:	bf00      	nop
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <LL_RCC_HSE_IsReady>:
{
 8005f14:	b480      	push	{r7}
 8005f16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f26:	d101      	bne.n	8005f2c <LL_RCC_HSE_IsReady+0x18>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e000      	b.n	8005f2e <LL_RCC_HSE_IsReady+0x1a>
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <LL_RCC_HSI_Enable>:
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f4a:	6013      	str	r3, [r2, #0]
}
 8005f4c:	bf00      	nop
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <LL_RCC_HSI_Disable>:
{
 8005f56:	b480      	push	{r7}
 8005f58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f68:	6013      	str	r3, [r2, #0]
}
 8005f6a:	bf00      	nop
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <LL_RCC_HSI_IsReady>:
{
 8005f74:	b480      	push	{r7}
 8005f76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f86:	d101      	bne.n	8005f8c <LL_RCC_HSI_IsReady+0x18>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e000      	b.n	8005f8e <LL_RCC_HSI_IsReady+0x1a>
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	061b      	lsls	r3, r3, #24
 8005fae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	604b      	str	r3, [r1, #4]
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <LL_RCC_HSI48_Enable>:
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fd2:	f043 0301 	orr.w	r3, r3, #1
 8005fd6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005fda:	bf00      	nop
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <LL_RCC_HSI48_Disable>:
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ff0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ff4:	f023 0301 	bic.w	r3, r3, #1
 8005ff8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005ffc:	bf00      	nop
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <LL_RCC_HSI48_IsReady>:
{
 8006006:	b480      	push	{r7}
 8006008:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800600a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800600e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b02      	cmp	r3, #2
 8006018:	d101      	bne.n	800601e <LL_RCC_HSI48_IsReady+0x18>
 800601a:	2301      	movs	r3, #1
 800601c:	e000      	b.n	8006020 <LL_RCC_HSI48_IsReady+0x1a>
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <LL_RCC_LSE_Enable>:
{
 800602a:	b480      	push	{r7}
 800602c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800602e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006036:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800603a:	f043 0301 	orr.w	r3, r3, #1
 800603e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006042:	bf00      	nop
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <LL_RCC_LSE_Disable>:
{
 800604c:	b480      	push	{r7}
 800604e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006058:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800605c:	f023 0301 	bic.w	r3, r3, #1
 8006060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006064:	bf00      	nop
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <LL_RCC_LSE_EnableBypass>:
{
 800606e:	b480      	push	{r7}
 8006070:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800607e:	f043 0304 	orr.w	r3, r3, #4
 8006082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006086:	bf00      	nop
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <LL_RCC_LSE_DisableBypass>:
{
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060a0:	f023 0304 	bic.w	r3, r3, #4
 80060a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80060a8:	bf00      	nop
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80060b2:	b480      	push	{r7}
 80060b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80060b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d101      	bne.n	80060ca <LL_RCC_LSE_IsReady+0x18>
 80060c6:	2301      	movs	r3, #1
 80060c8:	e000      	b.n	80060cc <LL_RCC_LSE_IsReady+0x1a>
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80060d6:	b480      	push	{r7}
 80060d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80060da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060e6:	f043 0301 	orr.w	r3, r3, #1
 80060ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80060ee:	bf00      	nop
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80060fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006108:	f023 0301 	bic.w	r3, r3, #1
 800610c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006110:	bf00      	nop
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800611a:	b480      	push	{r7}
 800611c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800611e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b02      	cmp	r3, #2
 800612c:	d101      	bne.n	8006132 <LL_RCC_LSI1_IsReady+0x18>
 800612e:	2301      	movs	r3, #1
 8006130:	e000      	b.n	8006134 <LL_RCC_LSI1_IsReady+0x1a>
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800613e:	b480      	push	{r7}
 8006140:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800614a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800614e:	f043 0304 	orr.w	r3, r3, #4
 8006152:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006156:	bf00      	nop
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800616c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006170:	f023 0304 	bic.w	r3, r3, #4
 8006174:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006178:	bf00      	nop
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8006182:	b480      	push	{r7}
 8006184:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800618a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800618e:	f003 0308 	and.w	r3, r3, #8
 8006192:	2b08      	cmp	r3, #8
 8006194:	d101      	bne.n	800619a <LL_RCC_LSI2_IsReady+0x18>
 8006196:	2301      	movs	r3, #1
 8006198:	e000      	b.n	800619c <LL_RCC_LSI2_IsReady+0x1a>
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80061ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	021b      	lsls	r3, r3, #8
 80061be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80061d4:	b480      	push	{r7}
 80061d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80061d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061e2:	f043 0301 	orr.w	r3, r3, #1
 80061e6:	6013      	str	r3, [r2, #0]
}
 80061e8:	bf00      	nop
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80061f2:	b480      	push	{r7}
 80061f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80061f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006200:	f023 0301 	bic.w	r3, r3, #1
 8006204:	6013      	str	r3, [r2, #0]
}
 8006206:	bf00      	nop
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8006210:	b480      	push	{r7}
 8006212:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b02      	cmp	r3, #2
 8006220:	d101      	bne.n	8006226 <LL_RCC_MSI_IsReady+0x16>
 8006222:	2301      	movs	r3, #1
 8006224:	e000      	b.n	8006228 <LL_RCC_MSI_IsReady+0x18>
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800623a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006244:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4313      	orrs	r3, r2
 800624c:	600b      	str	r3, [r1, #0]
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800626a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2bb0      	cmp	r3, #176	; 0xb0
 8006270:	d901      	bls.n	8006276 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8006272:	23b0      	movs	r3, #176	; 0xb0
 8006274:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8006276:	687b      	ldr	r3, [r7, #4]
}
 8006278:	4618      	mov	r0, r3
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800628c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	021b      	lsls	r3, r3, #8
 800629a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800629e:	4313      	orrs	r3, r2
 80062a0:	604b      	str	r3, [r1, #4]
}
 80062a2:	bf00      	nop
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80062b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f023 0203 	bic.w	r2, r3, #3
 80062c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	608b      	str	r3, [r1, #8]
}
 80062ca:	bf00      	nop
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80062d6:	b480      	push	{r7}
 80062d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80062da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f003 030c 	and.w	r3, r3, #12
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80062f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006300:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4313      	orrs	r3, r2
 8006308:	608b      	str	r3, [r1, #8]
}
 800630a:	bf00      	nop
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800631e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006322:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006326:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800632a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4313      	orrs	r3, r2
 8006332:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8006342:	b480      	push	{r7}
 8006344:	b083      	sub	sp, #12
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800634a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800634e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006352:	f023 020f 	bic.w	r2, r3, #15
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	091b      	lsrs	r3, r3, #4
 800635a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800635e:	4313      	orrs	r3, r2
 8006360:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006382:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4313      	orrs	r3, r2
 800638a:	608b      	str	r3, [r1, #8]
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80063a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	608b      	str	r3, [r1, #8]
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80063c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80063d8:	b480      	push	{r7}
 80063da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80063dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80063e4:	011b      	lsls	r3, r3, #4
 80063e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80063f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006402:	4618      	mov	r0, r3
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800641a:	4618      	mov	r0, r3
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006424:	b480      	push	{r7}
 8006426:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006436:	6013      	str	r3, [r2, #0]
}
 8006438:	bf00      	nop
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006442:	b480      	push	{r7}
 8006444:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006450:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006454:	6013      	str	r3, [r2, #0]
}
 8006456:	bf00      	nop
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006460:	b480      	push	{r7}
 8006462:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800646e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006472:	d101      	bne.n	8006478 <LL_RCC_PLL_IsReady+0x18>
 8006474:	2301      	movs	r3, #1
 8006476:	e000      	b.n	800647a <LL_RCC_PLL_IsReady+0x1a>
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	0a1b      	lsrs	r3, r3, #8
 8006490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006494:	4618      	mov	r0, r3
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800649e:	b480      	push	{r7}
 80064a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80064a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80064b6:	b480      	push	{r7}
 80064b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80064ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80064ce:	b480      	push	{r7}
 80064d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80064d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f003 0303 	and.w	r3, r3, #3
}
 80064dc:	4618      	mov	r0, r3
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80064e6:	b480      	push	{r7}
 80064e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80064ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f8:	d101      	bne.n	80064fe <LL_RCC_IsActiveFlag_HPRE+0x18>
 80064fa:	2301      	movs	r3, #1
 80064fc:	e000      	b.n	8006500 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800650a:	b480      	push	{r7}
 800650c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800650e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006512:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800651a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800651e:	d101      	bne.n	8006524 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006520:	2301      	movs	r3, #1
 8006522:	e000      	b.n	8006526 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006538:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800653c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006544:	d101      	bne.n	800654a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006546:	2301      	movs	r3, #1
 8006548:	e000      	b.n	800654c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006556:	b480      	push	{r7}
 8006558:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800655a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006564:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006568:	d101      	bne.n	800656e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800656a:	2301      	movs	r3, #1
 800656c:	e000      	b.n	8006570 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800657a:	b480      	push	{r7}
 800657c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800657e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006588:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800658c:	d101      	bne.n	8006592 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800658e:	2301      	movs	r3, #1
 8006590:	e000      	b.n	8006594 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
	...

080065a0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065a0:	b590      	push	{r4, r7, lr}
 80065a2:	b08d      	sub	sp, #52	; 0x34
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e363      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0320 	and.w	r3, r3, #32
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 808d 	beq.w	80066da <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065c0:	f7ff fe89 	bl	80062d6 <LL_RCC_GetSysClkSource>
 80065c4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065c6:	f7ff ff82 	bl	80064ce <LL_RCC_PLL_GetMainSource>
 80065ca:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80065cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d005      	beq.n	80065de <HAL_RCC_OscConfig+0x3e>
 80065d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d4:	2b0c      	cmp	r3, #12
 80065d6:	d147      	bne.n	8006668 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d144      	bne.n	8006668 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e347      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80065ee:	f7ff fe34 	bl	800625a <LL_RCC_MSI_GetRange>
 80065f2:	4603      	mov	r3, r0
 80065f4:	429c      	cmp	r4, r3
 80065f6:	d914      	bls.n	8006622 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 fd2f 	bl	8007060 <RCC_SetFlashLatencyFromMSIRange>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e336      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff fe0e 	bl	8006232 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	4618      	mov	r0, r3
 800661c:	f7ff fe32 	bl	8006284 <LL_RCC_MSI_SetCalibTrimming>
 8006620:	e013      	b.n	800664a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	4618      	mov	r0, r3
 8006628:	f7ff fe03 	bl	8006232 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	4618      	mov	r0, r3
 8006632:	f7ff fe27 	bl	8006284 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663a:	4618      	mov	r0, r3
 800663c:	f000 fd10 	bl	8007060 <RCC_SetFlashLatencyFromMSIRange>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e317      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800664a:	f000 fcc9 	bl	8006fe0 <HAL_RCC_GetHCLKFreq>
 800664e:	4603      	mov	r3, r0
 8006650:	4aa4      	ldr	r2, [pc, #656]	; (80068e4 <HAL_RCC_OscConfig+0x344>)
 8006652:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006654:	4ba4      	ldr	r3, [pc, #656]	; (80068e8 <HAL_RCC_OscConfig+0x348>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4618      	mov	r0, r3
 800665a:	f7fe fc6b 	bl	8004f34 <HAL_InitTick>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d039      	beq.n	80066d8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e308      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d01e      	beq.n	80066ae <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006670:	f7ff fdb0 	bl	80061d4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006674:	f7fe fcac 	bl	8004fd0 <HAL_GetTick>
 8006678:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800667a:	e008      	b.n	800668e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800667c:	f7fe fca8 	bl	8004fd0 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b02      	cmp	r3, #2
 8006688:	d901      	bls.n	800668e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e2f5      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800668e:	f7ff fdbf 	bl	8006210 <LL_RCC_MSI_IsReady>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d0f1      	beq.n	800667c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	4618      	mov	r0, r3
 800669e:	f7ff fdc8 	bl	8006232 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7ff fdec 	bl	8006284 <LL_RCC_MSI_SetCalibTrimming>
 80066ac:	e015      	b.n	80066da <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80066ae:	f7ff fda0 	bl	80061f2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80066b2:	f7fe fc8d 	bl	8004fd0 <HAL_GetTick>
 80066b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80066b8:	e008      	b.n	80066cc <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80066ba:	f7fe fc89 	bl	8004fd0 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d901      	bls.n	80066cc <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e2d6      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80066cc:	f7ff fda0 	bl	8006210 <LL_RCC_MSI_IsReady>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1f1      	bne.n	80066ba <HAL_RCC_OscConfig+0x11a>
 80066d6:	e000      	b.n	80066da <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80066d8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d047      	beq.n	8006776 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066e6:	f7ff fdf6 	bl	80062d6 <LL_RCC_GetSysClkSource>
 80066ea:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066ec:	f7ff feef 	bl	80064ce <LL_RCC_PLL_GetMainSource>
 80066f0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d005      	beq.n	8006704 <HAL_RCC_OscConfig+0x164>
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	2b0c      	cmp	r3, #12
 80066fc:	d108      	bne.n	8006710 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	2b03      	cmp	r3, #3
 8006702:	d105      	bne.n	8006710 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d134      	bne.n	8006776 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e2b4      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006718:	d102      	bne.n	8006720 <HAL_RCC_OscConfig+0x180>
 800671a:	f7ff fbdd 	bl	8005ed8 <LL_RCC_HSE_Enable>
 800671e:	e001      	b.n	8006724 <HAL_RCC_OscConfig+0x184>
 8006720:	f7ff fbe9 	bl	8005ef6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d012      	beq.n	8006752 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672c:	f7fe fc50 	bl	8004fd0 <HAL_GetTick>
 8006730:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006732:	e008      	b.n	8006746 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006734:	f7fe fc4c 	bl	8004fd0 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b64      	cmp	r3, #100	; 0x64
 8006740:	d901      	bls.n	8006746 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e299      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006746:	f7ff fbe5 	bl	8005f14 <LL_RCC_HSE_IsReady>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0f1      	beq.n	8006734 <HAL_RCC_OscConfig+0x194>
 8006750:	e011      	b.n	8006776 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006752:	f7fe fc3d 	bl	8004fd0 <HAL_GetTick>
 8006756:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006758:	e008      	b.n	800676c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800675a:	f7fe fc39 	bl	8004fd0 <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	2b64      	cmp	r3, #100	; 0x64
 8006766:	d901      	bls.n	800676c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e286      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800676c:	f7ff fbd2 	bl	8005f14 <LL_RCC_HSE_IsReady>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1f1      	bne.n	800675a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d04c      	beq.n	800681c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006782:	f7ff fda8 	bl	80062d6 <LL_RCC_GetSysClkSource>
 8006786:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006788:	f7ff fea1 	bl	80064ce <LL_RCC_PLL_GetMainSource>
 800678c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	2b04      	cmp	r3, #4
 8006792:	d005      	beq.n	80067a0 <HAL_RCC_OscConfig+0x200>
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	2b0c      	cmp	r3, #12
 8006798:	d10e      	bne.n	80067b8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2b02      	cmp	r3, #2
 800679e:	d10b      	bne.n	80067b8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e266      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7ff fbf1 	bl	8005f98 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80067b6:	e031      	b.n	800681c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d019      	beq.n	80067f4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067c0:	f7ff fbba 	bl	8005f38 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c4:	f7fe fc04 	bl	8004fd0 <HAL_GetTick>
 80067c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80067ca:	e008      	b.n	80067de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067cc:	f7fe fc00 	bl	8004fd0 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d901      	bls.n	80067de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e24d      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80067de:	f7ff fbc9 	bl	8005f74 <LL_RCC_HSI_IsReady>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d0f1      	beq.n	80067cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff fbd3 	bl	8005f98 <LL_RCC_HSI_SetCalibTrimming>
 80067f2:	e013      	b.n	800681c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067f4:	f7ff fbaf 	bl	8005f56 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f8:	f7fe fbea 	bl	8004fd0 <HAL_GetTick>
 80067fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80067fe:	e008      	b.n	8006812 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006800:	f7fe fbe6 	bl	8004fd0 <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	2b02      	cmp	r3, #2
 800680c:	d901      	bls.n	8006812 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e233      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006812:	f7ff fbaf 	bl	8005f74 <LL_RCC_HSI_IsReady>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1f1      	bne.n	8006800 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0308 	and.w	r3, r3, #8
 8006824:	2b00      	cmp	r3, #0
 8006826:	d106      	bne.n	8006836 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 80a3 	beq.w	800697c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d076      	beq.n	800692c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0310 	and.w	r3, r3, #16
 8006846:	2b00      	cmp	r3, #0
 8006848:	d046      	beq.n	80068d8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800684a:	f7ff fc66 	bl	800611a <LL_RCC_LSI1_IsReady>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d113      	bne.n	800687c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006854:	f7ff fc3f 	bl	80060d6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006858:	f7fe fbba 	bl	8004fd0 <HAL_GetTick>
 800685c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800685e:	e008      	b.n	8006872 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006860:	f7fe fbb6 	bl	8004fd0 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b02      	cmp	r3, #2
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e203      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006872:	f7ff fc52 	bl	800611a <LL_RCC_LSI1_IsReady>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0f1      	beq.n	8006860 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800687c:	f7ff fc5f 	bl	800613e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006880:	f7fe fba6 	bl	8004fd0 <HAL_GetTick>
 8006884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006888:	f7fe fba2 	bl	8004fd0 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b03      	cmp	r3, #3
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e1ef      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800689a:	f7ff fc72 	bl	8006182 <LL_RCC_LSI2_IsReady>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0f1      	beq.n	8006888 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff fc7c 	bl	80061a6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80068ae:	f7ff fc23 	bl	80060f8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b2:	f7fe fb8d 	bl	8004fd0 <HAL_GetTick>
 80068b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80068b8:	e008      	b.n	80068cc <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80068ba:	f7fe fb89 	bl	8004fd0 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d901      	bls.n	80068cc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e1d6      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80068cc:	f7ff fc25 	bl	800611a <LL_RCC_LSI1_IsReady>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1f1      	bne.n	80068ba <HAL_RCC_OscConfig+0x31a>
 80068d6:	e051      	b.n	800697c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80068d8:	f7ff fbfd 	bl	80060d6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068dc:	f7fe fb78 	bl	8004fd0 <HAL_GetTick>
 80068e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80068e2:	e00c      	b.n	80068fe <HAL_RCC_OscConfig+0x35e>
 80068e4:	20000018 	.word	0x20000018
 80068e8:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80068ec:	f7fe fb70 	bl	8004fd0 <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e1bd      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80068fe:	f7ff fc0c 	bl	800611a <LL_RCC_LSI1_IsReady>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d0f1      	beq.n	80068ec <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006908:	f7ff fc2a 	bl	8006160 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800690c:	e008      	b.n	8006920 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800690e:	f7fe fb5f 	bl	8004fd0 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	2b03      	cmp	r3, #3
 800691a:	d901      	bls.n	8006920 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e1ac      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006920:	f7ff fc2f 	bl	8006182 <LL_RCC_LSI2_IsReady>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1f1      	bne.n	800690e <HAL_RCC_OscConfig+0x36e>
 800692a:	e027      	b.n	800697c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800692c:	f7ff fc18 	bl	8006160 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006930:	f7fe fb4e 	bl	8004fd0 <HAL_GetTick>
 8006934:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006936:	e008      	b.n	800694a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006938:	f7fe fb4a 	bl	8004fd0 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	2b03      	cmp	r3, #3
 8006944:	d901      	bls.n	800694a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e197      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800694a:	f7ff fc1a 	bl	8006182 <LL_RCC_LSI2_IsReady>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1f1      	bne.n	8006938 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006954:	f7ff fbd0 	bl	80060f8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006958:	f7fe fb3a 	bl	8004fd0 <HAL_GetTick>
 800695c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800695e:	e008      	b.n	8006972 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006960:	f7fe fb36 	bl	8004fd0 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e183      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006972:	f7ff fbd2 	bl	800611a <LL_RCC_LSI1_IsReady>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1f1      	bne.n	8006960 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b00      	cmp	r3, #0
 8006986:	d05b      	beq.n	8006a40 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006988:	4ba7      	ldr	r3, [pc, #668]	; (8006c28 <HAL_RCC_OscConfig+0x688>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006990:	2b00      	cmp	r3, #0
 8006992:	d114      	bne.n	80069be <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006994:	f7ff fa70 	bl	8005e78 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006998:	f7fe fb1a 	bl	8004fd0 <HAL_GetTick>
 800699c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069a0:	f7fe fb16 	bl	8004fd0 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e163      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069b2:	4b9d      	ldr	r3, [pc, #628]	; (8006c28 <HAL_RCC_OscConfig+0x688>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0f0      	beq.n	80069a0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d102      	bne.n	80069cc <HAL_RCC_OscConfig+0x42c>
 80069c6:	f7ff fb30 	bl	800602a <LL_RCC_LSE_Enable>
 80069ca:	e00c      	b.n	80069e6 <HAL_RCC_OscConfig+0x446>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	2b05      	cmp	r3, #5
 80069d2:	d104      	bne.n	80069de <HAL_RCC_OscConfig+0x43e>
 80069d4:	f7ff fb4b 	bl	800606e <LL_RCC_LSE_EnableBypass>
 80069d8:	f7ff fb27 	bl	800602a <LL_RCC_LSE_Enable>
 80069dc:	e003      	b.n	80069e6 <HAL_RCC_OscConfig+0x446>
 80069de:	f7ff fb35 	bl	800604c <LL_RCC_LSE_Disable>
 80069e2:	f7ff fb55 	bl	8006090 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d014      	beq.n	8006a18 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ee:	f7fe faef 	bl	8004fd0 <HAL_GetTick>
 80069f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80069f4:	e00a      	b.n	8006a0c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069f6:	f7fe faeb 	bl	8004fd0 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d901      	bls.n	8006a0c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e136      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006a0c:	f7ff fb51 	bl	80060b2 <LL_RCC_LSE_IsReady>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0ef      	beq.n	80069f6 <HAL_RCC_OscConfig+0x456>
 8006a16:	e013      	b.n	8006a40 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a18:	f7fe fada 	bl	8004fd0 <HAL_GetTick>
 8006a1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006a1e:	e00a      	b.n	8006a36 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a20:	f7fe fad6 	bl	8004fd0 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e121      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006a36:	f7ff fb3c 	bl	80060b2 <LL_RCC_LSE_IsReady>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1ef      	bne.n	8006a20 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d02c      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d014      	beq.n	8006a7e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a54:	f7ff fab5 	bl	8005fc2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a58:	f7fe faba 	bl	8004fd0 <HAL_GetTick>
 8006a5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006a5e:	e008      	b.n	8006a72 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a60:	f7fe fab6 	bl	8004fd0 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e103      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006a72:	f7ff fac8 	bl	8006006 <LL_RCC_HSI48_IsReady>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d0f1      	beq.n	8006a60 <HAL_RCC_OscConfig+0x4c0>
 8006a7c:	e013      	b.n	8006aa6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a7e:	f7ff fab1 	bl	8005fe4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a82:	f7fe faa5 	bl	8004fd0 <HAL_GetTick>
 8006a86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006a88:	e008      	b.n	8006a9c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a8a:	f7fe faa1 	bl	8004fd0 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d901      	bls.n	8006a9c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e0ee      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006a9c:	f7ff fab3 	bl	8006006 <LL_RCC_HSI48_IsReady>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1f1      	bne.n	8006a8a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 80e4 	beq.w	8006c78 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ab0:	f7ff fc11 	bl	80062d6 <LL_RCC_GetSysClkSource>
 8006ab4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	f040 80b4 	bne.w	8006c30 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f003 0203 	and.w	r2, r3, #3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d123      	bne.n	8006b1e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d11c      	bne.n	8006b1e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	0a1b      	lsrs	r3, r3, #8
 8006ae8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d114      	bne.n	8006b1e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d10d      	bne.n	8006b1e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d106      	bne.n	8006b1e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d05d      	beq.n	8006bda <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	2b0c      	cmp	r3, #12
 8006b22:	d058      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e0a1      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006b36:	f7ff fc84 	bl	8006442 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b3a:	f7fe fa49 	bl	8004fd0 <HAL_GetTick>
 8006b3e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b40:	e008      	b.n	8006b54 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b42:	f7fe fa45 	bl	8004fd0 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e092      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1ef      	bne.n	8006b42 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b66:	68da      	ldr	r2, [r3, #12]
 8006b68:	4b30      	ldr	r3, [pc, #192]	; (8006c2c <HAL_RCC_OscConfig+0x68c>)
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b74:	4311      	orrs	r1, r2
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b7a:	0212      	lsls	r2, r2, #8
 8006b7c:	4311      	orrs	r1, r2
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006b82:	4311      	orrs	r1, r2
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006b88:	4311      	orrs	r1, r2
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b94:	4313      	orrs	r3, r2
 8006b96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006b98:	f7ff fc44 	bl	8006424 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006baa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006bac:	f7fe fa10 	bl	8004fd0 <HAL_GetTick>
 8006bb0:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bb2:	e008      	b.n	8006bc6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bb4:	f7fe fa0c 	bl	8004fd0 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e059      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d0ef      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bd4:	e050      	b.n	8006c78 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e04f      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d147      	bne.n	8006c78 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006be8:	f7ff fc1c 	bl	8006424 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006bfc:	f7fe f9e8 	bl	8004fd0 <HAL_GetTick>
 8006c00:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c02:	e008      	b.n	8006c16 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c04:	f7fe f9e4 	bl	8004fd0 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d901      	bls.n	8006c16 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e031      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d0ef      	beq.n	8006c04 <HAL_RCC_OscConfig+0x664>
 8006c24:	e028      	b.n	8006c78 <HAL_RCC_OscConfig+0x6d8>
 8006c26:	bf00      	nop
 8006c28:	58000400 	.word	0x58000400
 8006c2c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	2b0c      	cmp	r3, #12
 8006c34:	d01e      	beq.n	8006c74 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c36:	f7ff fc04 	bl	8006442 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3a:	f7fe f9c9 	bl	8004fd0 <HAL_GetTick>
 8006c3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c40:	e008      	b.n	8006c54 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c42:	f7fe f9c5 	bl	8004fd0 <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d901      	bls.n	8006c54 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e012      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1ef      	bne.n	8006c42 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c66:	68da      	ldr	r2, [r3, #12]
 8006c68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c6c:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <HAL_RCC_OscConfig+0x6e4>)
 8006c6e:	4013      	ands	r3, r2
 8006c70:	60cb      	str	r3, [r1, #12]
 8006c72:	e001      	b.n	8006c78 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e000      	b.n	8006c7a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3734      	adds	r7, #52	; 0x34
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd90      	pop	{r4, r7, pc}
 8006c82:	bf00      	nop
 8006c84:	eefefffc 	.word	0xeefefffc

08006c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e12d      	b.n	8006ef8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c9c:	4b98      	ldr	r3, [pc, #608]	; (8006f00 <HAL_RCC_ClockConfig+0x278>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0307 	and.w	r3, r3, #7
 8006ca4:	683a      	ldr	r2, [r7, #0]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d91b      	bls.n	8006ce2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006caa:	4b95      	ldr	r3, [pc, #596]	; (8006f00 <HAL_RCC_ClockConfig+0x278>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f023 0207 	bic.w	r2, r3, #7
 8006cb2:	4993      	ldr	r1, [pc, #588]	; (8006f00 <HAL_RCC_ClockConfig+0x278>)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cba:	f7fe f989 	bl	8004fd0 <HAL_GetTick>
 8006cbe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cc0:	e008      	b.n	8006cd4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006cc2:	f7fe f985 	bl	8004fd0 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d901      	bls.n	8006cd4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e111      	b.n	8006ef8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cd4:	4b8a      	ldr	r3, [pc, #552]	; (8006f00 <HAL_RCC_ClockConfig+0x278>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0307 	and.w	r3, r3, #7
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d1ef      	bne.n	8006cc2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d016      	beq.n	8006d1c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7ff fafb 	bl	80062ee <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006cf8:	f7fe f96a 	bl	8004fd0 <HAL_GetTick>
 8006cfc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006cfe:	e008      	b.n	8006d12 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006d00:	f7fe f966 	bl	8004fd0 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d901      	bls.n	8006d12 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e0f2      	b.n	8006ef8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006d12:	f7ff fbe8 	bl	80064e6 <LL_RCC_IsActiveFlag_HPRE>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d0f1      	beq.n	8006d00 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0320 	and.w	r3, r3, #32
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d016      	beq.n	8006d56 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7ff faf2 	bl	8006316 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006d32:	f7fe f94d 	bl	8004fd0 <HAL_GetTick>
 8006d36:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006d38:	e008      	b.n	8006d4c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006d3a:	f7fe f949 	bl	8004fd0 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d901      	bls.n	8006d4c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e0d5      	b.n	8006ef8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006d4c:	f7ff fbdd 	bl	800650a <LL_RCC_IsActiveFlag_C2HPRE>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d0f1      	beq.n	8006d3a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d016      	beq.n	8006d90 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7ff faeb 	bl	8006342 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006d6c:	f7fe f930 	bl	8004fd0 <HAL_GetTick>
 8006d70:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006d72:	e008      	b.n	8006d86 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006d74:	f7fe f92c 	bl	8004fd0 <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d901      	bls.n	8006d86 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e0b8      	b.n	8006ef8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006d86:	f7ff fbd3 	bl	8006530 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d0f1      	beq.n	8006d74 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d016      	beq.n	8006dca <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff fae5 	bl	8006370 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006da6:	f7fe f913 	bl	8004fd0 <HAL_GetTick>
 8006daa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006dac:	e008      	b.n	8006dc0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006dae:	f7fe f90f 	bl	8004fd0 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d901      	bls.n	8006dc0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e09b      	b.n	8006ef8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006dc0:	f7ff fbc9 	bl	8006556 <LL_RCC_IsActiveFlag_PPRE1>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d0f1      	beq.n	8006dae <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0308 	and.w	r3, r3, #8
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d017      	beq.n	8006e06 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	00db      	lsls	r3, r3, #3
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7ff fadb 	bl	8006398 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006de2:	f7fe f8f5 	bl	8004fd0 <HAL_GetTick>
 8006de6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006de8:	e008      	b.n	8006dfc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006dea:	f7fe f8f1 	bl	8004fd0 <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d901      	bls.n	8006dfc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e07d      	b.n	8006ef8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006dfc:	f7ff fbbd 	bl	800657a <LL_RCC_IsActiveFlag_PPRE2>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d0f1      	beq.n	8006dea <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d043      	beq.n	8006e9a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d106      	bne.n	8006e28 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006e1a:	f7ff f87b 	bl	8005f14 <LL_RCC_HSE_IsReady>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d11e      	bne.n	8006e62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e067      	b.n	8006ef8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	d106      	bne.n	8006e3e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006e30:	f7ff fb16 	bl	8006460 <LL_RCC_PLL_IsReady>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d113      	bne.n	8006e62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e05c      	b.n	8006ef8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d106      	bne.n	8006e54 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006e46:	f7ff f9e3 	bl	8006210 <LL_RCC_MSI_IsReady>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d108      	bne.n	8006e62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e051      	b.n	8006ef8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006e54:	f7ff f88e 	bl	8005f74 <LL_RCC_HSI_IsReady>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e04a      	b.n	8006ef8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7ff fa21 	bl	80062ae <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e6c:	f7fe f8b0 	bl	8004fd0 <HAL_GetTick>
 8006e70:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e72:	e00a      	b.n	8006e8a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e74:	f7fe f8ac 	bl	8004fd0 <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d901      	bls.n	8006e8a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e036      	b.n	8006ef8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e8a:	f7ff fa24 	bl	80062d6 <LL_RCC_GetSysClkSource>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d1ec      	bne.n	8006e74 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e9a:	4b19      	ldr	r3, [pc, #100]	; (8006f00 <HAL_RCC_ClockConfig+0x278>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0307 	and.w	r3, r3, #7
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d21b      	bcs.n	8006ee0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ea8:	4b15      	ldr	r3, [pc, #84]	; (8006f00 <HAL_RCC_ClockConfig+0x278>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f023 0207 	bic.w	r2, r3, #7
 8006eb0:	4913      	ldr	r1, [pc, #76]	; (8006f00 <HAL_RCC_ClockConfig+0x278>)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eb8:	f7fe f88a 	bl	8004fd0 <HAL_GetTick>
 8006ebc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ebe:	e008      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006ec0:	f7fe f886 	bl	8004fd0 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e012      	b.n	8006ef8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ed2:	4b0b      	ldr	r3, [pc, #44]	; (8006f00 <HAL_RCC_ClockConfig+0x278>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d1ef      	bne.n	8006ec0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006ee0:	f000 f87e 	bl	8006fe0 <HAL_RCC_GetHCLKFreq>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	4a07      	ldr	r2, [pc, #28]	; (8006f04 <HAL_RCC_ClockConfig+0x27c>)
 8006ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006eea:	f7fe f87d 	bl	8004fe8 <HAL_GetTickPrio>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7fe f81f 	bl	8004f34 <HAL_InitTick>
 8006ef6:	4603      	mov	r3, r0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	58004000 	.word	0x58004000
 8006f04:	20000018 	.word	0x20000018

08006f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f08:	b590      	push	{r4, r7, lr}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f0e:	f7ff f9e2 	bl	80062d6 <LL_RCC_GetSysClkSource>
 8006f12:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10a      	bne.n	8006f30 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006f1a:	f7ff f99e 	bl	800625a <LL_RCC_MSI_GetRange>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	091b      	lsrs	r3, r3, #4
 8006f22:	f003 030f 	and.w	r3, r3, #15
 8006f26:	4a2b      	ldr	r2, [pc, #172]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	e04b      	b.n	8006fc8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b04      	cmp	r3, #4
 8006f34:	d102      	bne.n	8006f3c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006f36:	4b28      	ldr	r3, [pc, #160]	; (8006fd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006f38:	60fb      	str	r3, [r7, #12]
 8006f3a:	e045      	b.n	8006fc8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b08      	cmp	r3, #8
 8006f40:	d10a      	bne.n	8006f58 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006f42:	f7fe ffb7 	bl	8005eb4 <LL_RCC_HSE_IsEnabledDiv2>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d102      	bne.n	8006f52 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006f4c:	4b22      	ldr	r3, [pc, #136]	; (8006fd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	e03a      	b.n	8006fc8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006f52:	4b22      	ldr	r3, [pc, #136]	; (8006fdc <HAL_RCC_GetSysClockFreq+0xd4>)
 8006f54:	60fb      	str	r3, [r7, #12]
 8006f56:	e037      	b.n	8006fc8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006f58:	f7ff fab9 	bl	80064ce <LL_RCC_PLL_GetMainSource>
 8006f5c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d003      	beq.n	8006f6c <HAL_RCC_GetSysClockFreq+0x64>
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d003      	beq.n	8006f72 <HAL_RCC_GetSysClockFreq+0x6a>
 8006f6a:	e00d      	b.n	8006f88 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006f6c:	4b1a      	ldr	r3, [pc, #104]	; (8006fd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006f6e:	60bb      	str	r3, [r7, #8]
        break;
 8006f70:	e015      	b.n	8006f9e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006f72:	f7fe ff9f 	bl	8005eb4 <LL_RCC_HSE_IsEnabledDiv2>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d102      	bne.n	8006f82 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006f7c:	4b16      	ldr	r3, [pc, #88]	; (8006fd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006f7e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006f80:	e00d      	b.n	8006f9e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006f82:	4b16      	ldr	r3, [pc, #88]	; (8006fdc <HAL_RCC_GetSysClockFreq+0xd4>)
 8006f84:	60bb      	str	r3, [r7, #8]
        break;
 8006f86:	e00a      	b.n	8006f9e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006f88:	f7ff f967 	bl	800625a <LL_RCC_MSI_GetRange>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	091b      	lsrs	r3, r3, #4
 8006f90:	f003 030f 	and.w	r3, r3, #15
 8006f94:	4a0f      	ldr	r2, [pc, #60]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f9a:	60bb      	str	r3, [r7, #8]
        break;
 8006f9c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006f9e:	f7ff fa71 	bl	8006484 <LL_RCC_PLL_GetN>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	fb03 f402 	mul.w	r4, r3, r2
 8006faa:	f7ff fa84 	bl	80064b6 <LL_RCC_PLL_GetDivider>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	091b      	lsrs	r3, r3, #4
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	fbb4 f4f3 	udiv	r4, r4, r3
 8006fb8:	f7ff fa71 	bl	800649e <LL_RCC_PLL_GetR>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	0f5b      	lsrs	r3, r3, #29
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	fbb4 f3f3 	udiv	r3, r4, r3
 8006fc6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd90      	pop	{r4, r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	0800e0e4 	.word	0x0800e0e4
 8006fd8:	00f42400 	.word	0x00f42400
 8006fdc:	01e84800 	.word	0x01e84800

08006fe0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fe0:	b598      	push	{r3, r4, r7, lr}
 8006fe2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006fe4:	f7ff ff90 	bl	8006f08 <HAL_RCC_GetSysClockFreq>
 8006fe8:	4604      	mov	r4, r0
 8006fea:	f7ff f9e9 	bl	80063c0 <LL_RCC_GetAHBPrescaler>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	091b      	lsrs	r3, r3, #4
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	4a03      	ldr	r2, [pc, #12]	; (8007004 <HAL_RCC_GetHCLKFreq+0x24>)
 8006ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ffc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007000:	4618      	mov	r0, r3
 8007002:	bd98      	pop	{r3, r4, r7, pc}
 8007004:	0800e084 	.word	0x0800e084

08007008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007008:	b598      	push	{r3, r4, r7, lr}
 800700a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800700c:	f7ff ffe8 	bl	8006fe0 <HAL_RCC_GetHCLKFreq>
 8007010:	4604      	mov	r4, r0
 8007012:	f7ff f9ef 	bl	80063f4 <LL_RCC_GetAPB1Prescaler>
 8007016:	4603      	mov	r3, r0
 8007018:	0a1b      	lsrs	r3, r3, #8
 800701a:	f003 0307 	and.w	r3, r3, #7
 800701e:	4a04      	ldr	r2, [pc, #16]	; (8007030 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007024:	f003 031f 	and.w	r3, r3, #31
 8007028:	fa24 f303 	lsr.w	r3, r4, r3
}
 800702c:	4618      	mov	r0, r3
 800702e:	bd98      	pop	{r3, r4, r7, pc}
 8007030:	0800e0c4 	.word	0x0800e0c4

08007034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007034:	b598      	push	{r3, r4, r7, lr}
 8007036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007038:	f7ff ffd2 	bl	8006fe0 <HAL_RCC_GetHCLKFreq>
 800703c:	4604      	mov	r4, r0
 800703e:	f7ff f9e5 	bl	800640c <LL_RCC_GetAPB2Prescaler>
 8007042:	4603      	mov	r3, r0
 8007044:	0adb      	lsrs	r3, r3, #11
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	4a04      	ldr	r2, [pc, #16]	; (800705c <HAL_RCC_GetPCLK2Freq+0x28>)
 800704c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007050:	f003 031f 	and.w	r3, r3, #31
 8007054:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007058:	4618      	mov	r0, r3
 800705a:	bd98      	pop	{r3, r4, r7, pc}
 800705c:	0800e0c4 	.word	0x0800e0c4

08007060 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007060:	b590      	push	{r4, r7, lr}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2bb0      	cmp	r3, #176	; 0xb0
 800706c:	d903      	bls.n	8007076 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800706e:	4b15      	ldr	r3, [pc, #84]	; (80070c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	60fb      	str	r3, [r7, #12]
 8007074:	e007      	b.n	8007086 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	091b      	lsrs	r3, r3, #4
 800707a:	f003 030f 	and.w	r3, r3, #15
 800707e:	4a11      	ldr	r2, [pc, #68]	; (80070c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007084:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007086:	f7ff f9a7 	bl	80063d8 <LL_RCC_GetAHB4Prescaler>
 800708a:	4603      	mov	r3, r0
 800708c:	091b      	lsrs	r3, r3, #4
 800708e:	f003 030f 	and.w	r3, r3, #15
 8007092:	4a0d      	ldr	r2, [pc, #52]	; (80070c8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	fbb2 f3f3 	udiv	r3, r2, r3
 800709e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	4a0a      	ldr	r2, [pc, #40]	; (80070cc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80070a4:	fba2 2303 	umull	r2, r3, r2, r3
 80070a8:	0c9c      	lsrs	r4, r3, #18
 80070aa:	f7fe fef5 	bl	8005e98 <HAL_PWREx_GetVoltageRange>
 80070ae:	4603      	mov	r3, r0
 80070b0:	4619      	mov	r1, r3
 80070b2:	4620      	mov	r0, r4
 80070b4:	f000 f80c 	bl	80070d0 <RCC_SetFlashLatency>
 80070b8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd90      	pop	{r4, r7, pc}
 80070c2:	bf00      	nop
 80070c4:	0800e0e4 	.word	0x0800e0e4
 80070c8:	0800e084 	.word	0x0800e084
 80070cc:	431bde83 	.word	0x431bde83

080070d0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80070d0:	b590      	push	{r4, r7, lr}
 80070d2:	b093      	sub	sp, #76	; 0x4c
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80070da:	4b37      	ldr	r3, [pc, #220]	; (80071b8 <RCC_SetFlashLatency+0xe8>)
 80070dc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80070e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80070e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80070e6:	4a35      	ldr	r2, [pc, #212]	; (80071bc <RCC_SetFlashLatency+0xec>)
 80070e8:	f107 031c 	add.w	r3, r7, #28
 80070ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80070ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80070f2:	4b33      	ldr	r3, [pc, #204]	; (80071c0 <RCC_SetFlashLatency+0xf0>)
 80070f4:	f107 040c 	add.w	r4, r7, #12
 80070f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80070fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80070fe:	2300      	movs	r3, #0
 8007100:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007108:	d11a      	bne.n	8007140 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800710a:	2300      	movs	r3, #0
 800710c:	643b      	str	r3, [r7, #64]	; 0x40
 800710e:	e013      	b.n	8007138 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	3348      	adds	r3, #72	; 0x48
 8007116:	443b      	add	r3, r7
 8007118:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	429a      	cmp	r2, r3
 8007120:	d807      	bhi.n	8007132 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	3348      	adds	r3, #72	; 0x48
 8007128:	443b      	add	r3, r7
 800712a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800712e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007130:	e020      	b.n	8007174 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007134:	3301      	adds	r3, #1
 8007136:	643b      	str	r3, [r7, #64]	; 0x40
 8007138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800713a:	2b03      	cmp	r3, #3
 800713c:	d9e8      	bls.n	8007110 <RCC_SetFlashLatency+0x40>
 800713e:	e019      	b.n	8007174 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007140:	2300      	movs	r3, #0
 8007142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007144:	e013      	b.n	800716e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	3348      	adds	r3, #72	; 0x48
 800714c:	443b      	add	r3, r7
 800714e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	429a      	cmp	r2, r3
 8007156:	d807      	bhi.n	8007168 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	3348      	adds	r3, #72	; 0x48
 800715e:	443b      	add	r3, r7
 8007160:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007164:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007166:	e005      	b.n	8007174 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800716a:	3301      	adds	r3, #1
 800716c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800716e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007170:	2b02      	cmp	r3, #2
 8007172:	d9e8      	bls.n	8007146 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8007174:	4b13      	ldr	r3, [pc, #76]	; (80071c4 <RCC_SetFlashLatency+0xf4>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f023 0207 	bic.w	r2, r3, #7
 800717c:	4911      	ldr	r1, [pc, #68]	; (80071c4 <RCC_SetFlashLatency+0xf4>)
 800717e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007180:	4313      	orrs	r3, r2
 8007182:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007184:	f7fd ff24 	bl	8004fd0 <HAL_GetTick>
 8007188:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800718a:	e008      	b.n	800719e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800718c:	f7fd ff20 	bl	8004fd0 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b02      	cmp	r3, #2
 8007198:	d901      	bls.n	800719e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e007      	b.n	80071ae <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800719e:	4b09      	ldr	r3, [pc, #36]	; (80071c4 <RCC_SetFlashLatency+0xf4>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d1ef      	bne.n	800718c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	374c      	adds	r7, #76	; 0x4c
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd90      	pop	{r4, r7, pc}
 80071b6:	bf00      	nop
 80071b8:	0800d864 	.word	0x0800d864
 80071bc:	0800d874 	.word	0x0800d874
 80071c0:	0800d880 	.word	0x0800d880
 80071c4:	58004000 	.word	0x58004000

080071c8 <LL_RCC_LSE_IsEnabled>:
{
 80071c8:	b480      	push	{r7}
 80071ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80071cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d101      	bne.n	80071e0 <LL_RCC_LSE_IsEnabled+0x18>
 80071dc:	2301      	movs	r3, #1
 80071de:	e000      	b.n	80071e2 <LL_RCC_LSE_IsEnabled+0x1a>
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <LL_RCC_LSE_IsReady>:
{
 80071ec:	b480      	push	{r7}
 80071ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80071f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d101      	bne.n	8007204 <LL_RCC_LSE_IsReady+0x18>
 8007200:	2301      	movs	r3, #1
 8007202:	e000      	b.n	8007206 <LL_RCC_LSE_IsReady+0x1a>
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <LL_RCC_MSI_EnablePLLMode>:
{
 8007210:	b480      	push	{r7}
 8007212:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8007214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800721e:	f043 0304 	orr.w	r3, r3, #4
 8007222:	6013      	str	r3, [r2, #0]
}
 8007224:	bf00      	nop
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <LL_RCC_SetRFWKPClockSource>:
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800723a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800723e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007242:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4313      	orrs	r3, r2
 800724a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800724e:	bf00      	nop
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <LL_RCC_SetSMPSClockSource>:
{
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	f023 0203 	bic.w	r2, r3, #3
 800726c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4313      	orrs	r3, r2
 8007274:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007276:	bf00      	nop
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <LL_RCC_SetSMPSPrescaler>:
{
 8007282:	b480      	push	{r7}
 8007284:	b083      	sub	sp, #12
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800728a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007294:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4313      	orrs	r3, r2
 800729c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800729e:	bf00      	nop
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <LL_RCC_SetUSARTClockSource>:
{
 80072aa:	b480      	push	{r7}
 80072ac:	b083      	sub	sp, #12
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80072b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ba:	f023 0203 	bic.w	r2, r3, #3
 80072be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80072ca:	bf00      	nop
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <LL_RCC_SetLPUARTClockSource>:
{
 80072d6:	b480      	push	{r7}
 80072d8:	b083      	sub	sp, #12
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80072de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80072ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80072f6:	bf00      	nop
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <LL_RCC_SetI2CClockSource>:
{
 8007302:	b480      	push	{r7}
 8007304:	b083      	sub	sp, #12
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800730a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800730e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	091b      	lsrs	r3, r3, #4
 8007316:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800731a:	43db      	mvns	r3, r3
 800731c:	401a      	ands	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	011b      	lsls	r3, r3, #4
 8007322:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007326:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800732a:	4313      	orrs	r3, r2
 800732c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <LL_RCC_SetLPTIMClockSource>:
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007348:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	0c1b      	lsrs	r3, r3, #16
 8007350:	041b      	lsls	r3, r3, #16
 8007352:	43db      	mvns	r3, r3
 8007354:	401a      	ands	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	041b      	lsls	r3, r3, #16
 800735a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800735e:	4313      	orrs	r3, r2
 8007360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <LL_RCC_SetSAIClockSource>:
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800737c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007380:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007384:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4313      	orrs	r3, r2
 800738c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <LL_RCC_SetRNGClockSource>:
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80073a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ac:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80073b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <LL_RCC_SetCLK48ClockSource>:
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80073d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80073dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <LL_RCC_SetUSBClockSource>:
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7ff ffe3 	bl	80073c8 <LL_RCC_SetCLK48ClockSource>
}
 8007402:	bf00      	nop
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <LL_RCC_SetADCClockSource>:
{
 800740a:	b480      	push	{r7}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800741a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800741e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4313      	orrs	r3, r2
 8007426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800742a:	bf00      	nop
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <LL_RCC_SetRTCClockSource>:
{
 8007436:	b480      	push	{r7}
 8007438:	b083      	sub	sp, #12
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800743e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007446:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800744a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4313      	orrs	r3, r2
 8007452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007456:	bf00      	nop
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <LL_RCC_GetRTCClockSource>:
{
 8007462:	b480      	push	{r7}
 8007464:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800746a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800746e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007472:	4618      	mov	r0, r3
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <LL_RCC_ForceBackupDomainReset>:
{
 800747c:	b480      	push	{r7}
 800747e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007488:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800748c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007494:	bf00      	nop
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <LL_RCC_ReleaseBackupDomainReset>:
{
 800749e:	b480      	push	{r7}
 80074a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80074a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80074b6:	bf00      	nop
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <LL_RCC_PLLSAI1_Enable>:
{
 80074c0:	b480      	push	{r7}
 80074c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80074c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074d2:	6013      	str	r3, [r2, #0]
}
 80074d4:	bf00      	nop
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <LL_RCC_PLLSAI1_Disable>:
{
 80074de:	b480      	push	{r7}
 80074e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80074e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074f0:	6013      	str	r3, [r2, #0]
}
 80074f2:	bf00      	nop
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <LL_RCC_PLLSAI1_IsReady>:
{
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800750a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800750e:	d101      	bne.n	8007514 <LL_RCC_PLLSAI1_IsReady+0x18>
 8007510:	2301      	movs	r3, #1
 8007512:	e000      	b.n	8007516 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007528:	2300      	movs	r3, #0
 800752a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800752c:	2300      	movs	r3, #0
 800752e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007538:	2b00      	cmp	r3, #0
 800753a:	d034      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007540:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007544:	d021      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007546:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800754a:	d81b      	bhi.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800754c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007550:	d01d      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007552:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007556:	d815      	bhi.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00b      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800755c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007560:	d110      	bne.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800756c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007570:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007572:	e00d      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3304      	adds	r3, #4
 8007578:	4618      	mov	r0, r3
 800757a:	f000 f94d 	bl	8007818 <RCCEx_PLLSAI1_ConfigNP>
 800757e:	4603      	mov	r3, r0
 8007580:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007582:	e005      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	77fb      	strb	r3, [r7, #31]
        break;
 8007588:	e002      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800758a:	bf00      	nop
 800758c:	e000      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800758e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007590:	7ffb      	ldrb	r3, [r7, #31]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d105      	bne.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759a:	4618      	mov	r0, r3
 800759c:	f7ff fee8 	bl	8007370 <LL_RCC_SetSAIClockSource>
 80075a0:	e001      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a2:	7ffb      	ldrb	r3, [r7, #31]
 80075a4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d046      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80075b2:	f7ff ff56 	bl	8007462 <LL_RCC_GetRTCClockSource>
 80075b6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d03c      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80075c2:	f7fe fc59 	bl	8005e78 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d105      	bne.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff ff30 	bl	8007436 <LL_RCC_SetRTCClockSource>
 80075d6:	e02e      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80075d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80075e2:	f7ff ff4b 	bl	800747c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80075e6:	f7ff ff5a 	bl	800749e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f4:	4313      	orrs	r3, r2
 80075f6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80075f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007602:	f7ff fde1 	bl	80071c8 <LL_RCC_LSE_IsEnabled>
 8007606:	4603      	mov	r3, r0
 8007608:	2b01      	cmp	r3, #1
 800760a:	d114      	bne.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800760c:	f7fd fce0 	bl	8004fd0 <HAL_GetTick>
 8007610:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007612:	e00b      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007614:	f7fd fcdc 	bl	8004fd0 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007622:	4293      	cmp	r3, r2
 8007624:	d902      	bls.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	77fb      	strb	r3, [r7, #31]
              break;
 800762a:	e004      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800762c:	f7ff fdde 	bl	80071ec <LL_RCC_LSE_IsReady>
 8007630:	4603      	mov	r3, r0
 8007632:	2b01      	cmp	r3, #1
 8007634:	d1ee      	bne.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007636:	7ffb      	ldrb	r3, [r7, #31]
 8007638:	77bb      	strb	r3, [r7, #30]
 800763a:	e001      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800763c:	7ffb      	ldrb	r3, [r7, #31]
 800763e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0301 	and.w	r3, r3, #1
 8007648:	2b00      	cmp	r3, #0
 800764a:	d004      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	4618      	mov	r0, r3
 8007652:	f7ff fe2a 	bl	80072aa <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	2b00      	cmp	r3, #0
 8007660:	d004      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	69db      	ldr	r3, [r3, #28]
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff fe35 	bl	80072d6 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0310 	and.w	r3, r3, #16
 8007674:	2b00      	cmp	r3, #0
 8007676:	d004      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767c:	4618      	mov	r0, r3
 800767e:	f7ff fe5d 	bl	800733c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0320 	and.w	r3, r3, #32
 800768a:	2b00      	cmp	r3, #0
 800768c:	d004      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007692:	4618      	mov	r0, r3
 8007694:	f7ff fe52 	bl	800733c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0304 	and.w	r3, r3, #4
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d004      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a1b      	ldr	r3, [r3, #32]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7ff fe2a 	bl	8007302 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0308 	and.w	r3, r3, #8
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d004      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076be:	4618      	mov	r0, r3
 80076c0:	f7ff fe1f 	bl	8007302 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d022      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7ff fe8d 	bl	80073f4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076e2:	d107      	bne.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80076e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076f2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076fc:	d10b      	bne.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	3304      	adds	r3, #4
 8007702:	4618      	mov	r0, r3
 8007704:	f000 f8e3 	bl	80078ce <RCCEx_PLLSAI1_ConfigNQ>
 8007708:	4603      	mov	r3, r0
 800770a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800770c:	7ffb      	ldrb	r3, [r7, #31]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007712:	7ffb      	ldrb	r3, [r7, #31]
 8007714:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800771e:	2b00      	cmp	r3, #0
 8007720:	d02b      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800772a:	d008      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007734:	d003      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773a:	2b00      	cmp	r3, #0
 800773c:	d105      	bne.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007742:	4618      	mov	r0, r3
 8007744:	f7ff fe2a 	bl	800739c <LL_RCC_SetRNGClockSource>
 8007748:	e00a      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800774e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	2000      	movs	r0, #0
 8007756:	f7ff fe21 	bl	800739c <LL_RCC_SetRNGClockSource>
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f7ff fe34 	bl	80073c8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007764:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007768:	d107      	bne.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800776a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007774:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007778:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007782:	2b00      	cmp	r3, #0
 8007784:	d022      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800778a:	4618      	mov	r0, r3
 800778c:	f7ff fe3d 	bl	800740a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007794:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007798:	d107      	bne.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800779a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077a8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077b2:	d10b      	bne.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	3304      	adds	r3, #4
 80077b8:	4618      	mov	r0, r3
 80077ba:	f000 f8e3 	bl	8007984 <RCCEx_PLLSAI1_ConfigNR>
 80077be:	4603      	mov	r3, r0
 80077c0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80077c2:	7ffb      	ldrb	r3, [r7, #31]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80077c8:	7ffb      	ldrb	r3, [r7, #31]
 80077ca:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d004      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077dc:	4618      	mov	r0, r3
 80077de:	f7ff fd26 	bl	800722e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d009      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7ff fd45 	bl	8007282 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7ff fd2c 	bl	800725a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007802:	7fbb      	ldrb	r3, [r7, #30]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3720      	adds	r7, #32
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8007810:	f7ff fcfe 	bl	8007210 <LL_RCC_MSI_EnablePLLMode>
}
 8007814:	bf00      	nop
 8007816:	bd80      	pop	{r7, pc}

08007818 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007824:	f7ff fe5b 	bl	80074de <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007828:	f7fd fbd2 	bl	8004fd0 <HAL_GetTick>
 800782c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800782e:	e009      	b.n	8007844 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007830:	f7fd fbce 	bl	8004fd0 <HAL_GetTick>
 8007834:	4602      	mov	r2, r0
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	2b02      	cmp	r3, #2
 800783c:	d902      	bls.n	8007844 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	73fb      	strb	r3, [r7, #15]
      break;
 8007842:	e004      	b.n	800784e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007844:	f7ff fe5a 	bl	80074fc <LL_RCC_PLLSAI1_IsReady>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1f0      	bne.n	8007830 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800784e:	7bfb      	ldrb	r3, [r7, #15]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d137      	bne.n	80078c4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	021b      	lsls	r3, r3, #8
 8007864:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007868:	4313      	orrs	r3, r2
 800786a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800786c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800787e:	4313      	orrs	r3, r2
 8007880:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007882:	f7ff fe1d 	bl	80074c0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007886:	f7fd fba3 	bl	8004fd0 <HAL_GetTick>
 800788a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800788c:	e009      	b.n	80078a2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800788e:	f7fd fb9f 	bl	8004fd0 <HAL_GetTick>
 8007892:	4602      	mov	r2, r0
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	2b02      	cmp	r3, #2
 800789a:	d902      	bls.n	80078a2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	73fb      	strb	r3, [r7, #15]
        break;
 80078a0:	e004      	b.n	80078ac <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80078a2:	f7ff fe2b 	bl	80074fc <LL_RCC_PLLSAI1_IsReady>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d1f0      	bne.n	800788e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d108      	bne.n	80078c4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80078b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078b6:	691a      	ldr	r2, [r3, #16]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078c0:	4313      	orrs	r3, r2
 80078c2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80078da:	f7ff fe00 	bl	80074de <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80078de:	f7fd fb77 	bl	8004fd0 <HAL_GetTick>
 80078e2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80078e4:	e009      	b.n	80078fa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078e6:	f7fd fb73 	bl	8004fd0 <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d902      	bls.n	80078fa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	73fb      	strb	r3, [r7, #15]
      break;
 80078f8:	e004      	b.n	8007904 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80078fa:	f7ff fdff 	bl	80074fc <LL_RCC_PLLSAI1_IsReady>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1f0      	bne.n	80078e6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007904:	7bfb      	ldrb	r3, [r7, #15]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d137      	bne.n	800797a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800790a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	021b      	lsls	r3, r3, #8
 800791a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800791e:	4313      	orrs	r3, r2
 8007920:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007934:	4313      	orrs	r3, r2
 8007936:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007938:	f7ff fdc2 	bl	80074c0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800793c:	f7fd fb48 	bl	8004fd0 <HAL_GetTick>
 8007940:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007942:	e009      	b.n	8007958 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007944:	f7fd fb44 	bl	8004fd0 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b02      	cmp	r3, #2
 8007950:	d902      	bls.n	8007958 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	73fb      	strb	r3, [r7, #15]
        break;
 8007956:	e004      	b.n	8007962 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007958:	f7ff fdd0 	bl	80074fc <LL_RCC_PLLSAI1_IsReady>
 800795c:	4603      	mov	r3, r0
 800795e:	2b01      	cmp	r3, #1
 8007960:	d1f0      	bne.n	8007944 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007962:	7bfb      	ldrb	r3, [r7, #15]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d108      	bne.n	800797a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800796c:	691a      	ldr	r2, [r3, #16]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007976:	4313      	orrs	r3, r2
 8007978:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800797a:	7bfb      	ldrb	r3, [r7, #15]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007990:	f7ff fda5 	bl	80074de <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007994:	f7fd fb1c 	bl	8004fd0 <HAL_GetTick>
 8007998:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800799a:	e009      	b.n	80079b0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800799c:	f7fd fb18 	bl	8004fd0 <HAL_GetTick>
 80079a0:	4602      	mov	r2, r0
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d902      	bls.n	80079b0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	73fb      	strb	r3, [r7, #15]
      break;
 80079ae:	e004      	b.n	80079ba <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80079b0:	f7ff fda4 	bl	80074fc <LL_RCC_PLLSAI1_IsReady>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1f0      	bne.n	800799c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d137      	bne.n	8007a30 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80079c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	021b      	lsls	r3, r3, #8
 80079d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079d4:	4313      	orrs	r3, r2
 80079d6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80079d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079ea:	4313      	orrs	r3, r2
 80079ec:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80079ee:	f7ff fd67 	bl	80074c0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079f2:	f7fd faed 	bl	8004fd0 <HAL_GetTick>
 80079f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80079f8:	e009      	b.n	8007a0e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80079fa:	f7fd fae9 	bl	8004fd0 <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d902      	bls.n	8007a0e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	73fb      	strb	r3, [r7, #15]
        break;
 8007a0c:	e004      	b.n	8007a18 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007a0e:	f7ff fd75 	bl	80074fc <LL_RCC_PLLSAI1_IsReady>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d1f0      	bne.n	80079fa <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d108      	bne.n	8007a30 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a22:	691a      	ldr	r2, [r3, #16]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b082      	sub	sp, #8
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d101      	bne.n	8007a4c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e049      	b.n	8007ae0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d106      	bne.n	8007a66 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7fc ffa9 	bl	80049b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2202      	movs	r2, #2
 8007a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	3304      	adds	r3, #4
 8007a76:	4619      	mov	r1, r3
 8007a78:	4610      	mov	r0, r2
 8007a7a:	f000 f835 	bl	8007ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a2a      	ldr	r2, [pc, #168]	; (8007ba4 <TIM_Base_SetConfig+0xbc>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d003      	beq.n	8007b08 <TIM_Base_SetConfig+0x20>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b06:	d108      	bne.n	8007b1a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a21      	ldr	r2, [pc, #132]	; (8007ba4 <TIM_Base_SetConfig+0xbc>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d00b      	beq.n	8007b3a <TIM_Base_SetConfig+0x52>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b28:	d007      	beq.n	8007b3a <TIM_Base_SetConfig+0x52>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a1e      	ldr	r2, [pc, #120]	; (8007ba8 <TIM_Base_SetConfig+0xc0>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d003      	beq.n	8007b3a <TIM_Base_SetConfig+0x52>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a1d      	ldr	r2, [pc, #116]	; (8007bac <TIM_Base_SetConfig+0xc4>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d108      	bne.n	8007b4c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	689a      	ldr	r2, [r3, #8]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a0c      	ldr	r2, [pc, #48]	; (8007ba4 <TIM_Base_SetConfig+0xbc>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d007      	beq.n	8007b88 <TIM_Base_SetConfig+0xa0>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a0b      	ldr	r2, [pc, #44]	; (8007ba8 <TIM_Base_SetConfig+0xc0>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d003      	beq.n	8007b88 <TIM_Base_SetConfig+0xa0>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a0a      	ldr	r2, [pc, #40]	; (8007bac <TIM_Base_SetConfig+0xc4>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d103      	bne.n	8007b90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	691a      	ldr	r2, [r3, #16]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	615a      	str	r2, [r3, #20]
}
 8007b96:	bf00      	nop
 8007b98:	3714      	adds	r7, #20
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	40012c00 	.word	0x40012c00
 8007ba8:	40014400 	.word	0x40014400
 8007bac:	40014800 	.word	0x40014800

08007bb0 <LL_RCC_GetUSARTClockSource>:
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4013      	ands	r3, r2
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <LL_RCC_GetLPUARTClockSource>:
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4013      	ands	r3, r2
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e042      	b.n	8007c88 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d106      	bne.n	8007c1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f7fc ffd9 	bl	8004bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2224      	movs	r2, #36	; 0x24
 8007c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 0201 	bic.w	r2, r2, #1
 8007c30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fc54 	bl	80084e0 <UART_SetConfig>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d101      	bne.n	8007c42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e022      	b.n	8007c88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d002      	beq.n	8007c50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fe70 	bl	8008930 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	689a      	ldr	r2, [r3, #8]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f042 0201 	orr.w	r2, r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fef7 	bl	8008a74 <UART_CheckIdleState>
 8007c86:	4603      	mov	r3, r0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b08a      	sub	sp, #40	; 0x28
 8007c94:	af02      	add	r7, sp, #8
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	603b      	str	r3, [r7, #0]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca6:	2b20      	cmp	r3, #32
 8007ca8:	d17b      	bne.n	8007da2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <HAL_UART_Transmit+0x26>
 8007cb0:	88fb      	ldrh	r3, [r7, #6]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e074      	b.n	8007da4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2221      	movs	r2, #33	; 0x21
 8007cc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007cca:	f7fd f981 	bl	8004fd0 <HAL_GetTick>
 8007cce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	88fa      	ldrh	r2, [r7, #6]
 8007cd4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	88fa      	ldrh	r2, [r7, #6]
 8007cdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ce8:	d108      	bne.n	8007cfc <HAL_UART_Transmit+0x6c>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d104      	bne.n	8007cfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	61bb      	str	r3, [r7, #24]
 8007cfa:	e003      	b.n	8007d04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d00:	2300      	movs	r3, #0
 8007d02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007d04:	e030      	b.n	8007d68 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	2180      	movs	r1, #128	; 0x80
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 ff59 	bl	8008bc8 <UART_WaitOnFlagUntilTimeout>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d005      	beq.n	8007d28 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e03d      	b.n	8007da4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10b      	bne.n	8007d46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	881b      	ldrh	r3, [r3, #0]
 8007d32:	461a      	mov	r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	3302      	adds	r3, #2
 8007d42:	61bb      	str	r3, [r7, #24]
 8007d44:	e007      	b.n	8007d56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	781a      	ldrb	r2, [r3, #0]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	3301      	adds	r3, #1
 8007d54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1c8      	bne.n	8007d06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	2140      	movs	r1, #64	; 0x40
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 ff22 	bl	8008bc8 <UART_WaitOnFlagUntilTimeout>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d005      	beq.n	8007d96 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2220      	movs	r2, #32
 8007d8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e006      	b.n	8007da4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	e000      	b.n	8007da4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007da2:	2302      	movs	r3, #2
  }
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3720      	adds	r7, #32
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b08a      	sub	sp, #40	; 0x28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	4613      	mov	r3, r2
 8007db8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dc0:	2b20      	cmp	r3, #32
 8007dc2:	d137      	bne.n	8007e34 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <HAL_UART_Receive_DMA+0x24>
 8007dca:	88fb      	ldrh	r3, [r7, #6]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e030      	b.n	8007e36 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a18      	ldr	r2, [pc, #96]	; (8007e40 <HAL_UART_Receive_DMA+0x94>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d01f      	beq.n	8007e24 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d018      	beq.n	8007e24 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	e853 3f00 	ldrex	r3, [r3]
 8007dfe:	613b      	str	r3, [r7, #16]
   return(result);
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e06:	627b      	str	r3, [r7, #36]	; 0x24
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	623b      	str	r3, [r7, #32]
 8007e12:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e14:	69f9      	ldr	r1, [r7, #28]
 8007e16:	6a3a      	ldr	r2, [r7, #32]
 8007e18:	e841 2300 	strex	r3, r2, [r1]
 8007e1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1e6      	bne.n	8007df2 <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007e24:	88fb      	ldrh	r3, [r7, #6]
 8007e26:	461a      	mov	r2, r3
 8007e28:	68b9      	ldr	r1, [r7, #8]
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f000 ff34 	bl	8008c98 <UART_Start_Receive_DMA>
 8007e30:	4603      	mov	r3, r0
 8007e32:	e000      	b.n	8007e36 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e34:	2302      	movs	r3, #2
  }
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3728      	adds	r7, #40	; 0x28
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	40008000 	.word	0x40008000

08007e44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b0ba      	sub	sp, #232	; 0xe8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007e6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007e72:	4013      	ands	r3, r2
 8007e74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007e78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d11b      	bne.n	8007eb8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e84:	f003 0320 	and.w	r3, r3, #32
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d015      	beq.n	8007eb8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e90:	f003 0320 	and.w	r3, r3, #32
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d105      	bne.n	8007ea4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d009      	beq.n	8007eb8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 82e3 	beq.w	8008474 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	4798      	blx	r3
      }
      return;
 8007eb6:	e2dd      	b.n	8008474 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007eb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 8123 	beq.w	8008108 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007ec2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007ec6:	4b8d      	ldr	r3, [pc, #564]	; (80080fc <HAL_UART_IRQHandler+0x2b8>)
 8007ec8:	4013      	ands	r3, r2
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d106      	bne.n	8007edc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007ece:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007ed2:	4b8b      	ldr	r3, [pc, #556]	; (8008100 <HAL_UART_IRQHandler+0x2bc>)
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f000 8116 	beq.w	8008108 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d011      	beq.n	8007f0c <HAL_UART_IRQHandler+0xc8>
 8007ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00b      	beq.n	8007f0c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f02:	f043 0201 	orr.w	r2, r3, #1
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f10:	f003 0302 	and.w	r3, r3, #2
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d011      	beq.n	8007f3c <HAL_UART_IRQHandler+0xf8>
 8007f18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00b      	beq.n	8007f3c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2202      	movs	r2, #2
 8007f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f32:	f043 0204 	orr.w	r2, r3, #4
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f40:	f003 0304 	and.w	r3, r3, #4
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d011      	beq.n	8007f6c <HAL_UART_IRQHandler+0x128>
 8007f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f4c:	f003 0301 	and.w	r3, r3, #1
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00b      	beq.n	8007f6c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2204      	movs	r2, #4
 8007f5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f62:	f043 0202 	orr.w	r2, r3, #2
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f70:	f003 0308 	and.w	r3, r3, #8
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d017      	beq.n	8007fa8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f7c:	f003 0320 	and.w	r3, r3, #32
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d105      	bne.n	8007f90 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007f84:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007f88:	4b5c      	ldr	r3, [pc, #368]	; (80080fc <HAL_UART_IRQHandler+0x2b8>)
 8007f8a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00b      	beq.n	8007fa8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2208      	movs	r2, #8
 8007f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f9e:	f043 0208 	orr.w	r2, r3, #8
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d012      	beq.n	8007fda <HAL_UART_IRQHandler+0x196>
 8007fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00c      	beq.n	8007fda <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fd0:	f043 0220 	orr.w	r2, r3, #32
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 8249 	beq.w	8008478 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fea:	f003 0320 	and.w	r3, r3, #32
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d013      	beq.n	800801a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ff6:	f003 0320 	and.w	r3, r3, #32
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d105      	bne.n	800800a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d007      	beq.n	800801a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800800e:	2b00      	cmp	r3, #0
 8008010:	d003      	beq.n	800801a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008020:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800802e:	2b40      	cmp	r3, #64	; 0x40
 8008030:	d005      	beq.n	800803e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008032:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008036:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800803a:	2b00      	cmp	r3, #0
 800803c:	d054      	beq.n	80080e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 ff11 	bl	8008e66 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800804e:	2b40      	cmp	r3, #64	; 0x40
 8008050:	d146      	bne.n	80080e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	3308      	adds	r3, #8
 8008058:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008060:	e853 3f00 	ldrex	r3, [r3]
 8008064:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008068:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800806c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008070:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	3308      	adds	r3, #8
 800807a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800807e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008082:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008086:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800808a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800808e:	e841 2300 	strex	r3, r2, [r1]
 8008092:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008096:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1d9      	bne.n	8008052 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d017      	beq.n	80080d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080ae:	4a15      	ldr	r2, [pc, #84]	; (8008104 <HAL_UART_IRQHandler+0x2c0>)
 80080b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7fd fa57 	bl	800556c <HAL_DMA_Abort_IT>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d019      	beq.n	80080f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80080d2:	4610      	mov	r0, r2
 80080d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080d6:	e00f      	b.n	80080f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f9eb 	bl	80084b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080de:	e00b      	b.n	80080f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f9e7 	bl	80084b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080e6:	e007      	b.n	80080f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f9e3 	bl	80084b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80080f6:	e1bf      	b.n	8008478 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080f8:	bf00      	nop
    return;
 80080fa:	e1bd      	b.n	8008478 <HAL_UART_IRQHandler+0x634>
 80080fc:	10000001 	.word	0x10000001
 8008100:	04000120 	.word	0x04000120
 8008104:	0800911d 	.word	0x0800911d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800810c:	2b01      	cmp	r3, #1
 800810e:	f040 8153 	bne.w	80083b8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008116:	f003 0310 	and.w	r3, r3, #16
 800811a:	2b00      	cmp	r3, #0
 800811c:	f000 814c 	beq.w	80083b8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008124:	f003 0310 	and.w	r3, r3, #16
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 8145 	beq.w	80083b8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2210      	movs	r2, #16
 8008134:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008140:	2b40      	cmp	r3, #64	; 0x40
 8008142:	f040 80bb 	bne.w	80082bc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008154:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 818f 	beq.w	800847c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008164:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008168:	429a      	cmp	r2, r3
 800816a:	f080 8187 	bcs.w	800847c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008174:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 0320 	and.w	r3, r3, #32
 8008186:	2b00      	cmp	r3, #0
 8008188:	f040 8087 	bne.w	800829a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008194:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008198:	e853 3f00 	ldrex	r3, [r3]
 800819c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80081a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	461a      	mov	r2, r3
 80081b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80081ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80081c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80081c6:	e841 2300 	strex	r3, r2, [r1]
 80081ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80081ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1da      	bne.n	800818c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3308      	adds	r3, #8
 80081dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081e0:	e853 3f00 	ldrex	r3, [r3]
 80081e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80081e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081e8:	f023 0301 	bic.w	r3, r3, #1
 80081ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	3308      	adds	r3, #8
 80081f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80081fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80081fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008200:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008202:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008206:	e841 2300 	strex	r3, r2, [r1]
 800820a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800820c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1e1      	bne.n	80081d6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3308      	adds	r3, #8
 8008218:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800821c:	e853 3f00 	ldrex	r3, [r3]
 8008220:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008228:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3308      	adds	r3, #8
 8008232:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008236:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008238:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800823c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800823e:	e841 2300 	strex	r3, r2, [r1]
 8008242:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1e3      	bne.n	8008212 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2220      	movs	r2, #32
 800824e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008260:	e853 3f00 	ldrex	r3, [r3]
 8008264:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008268:	f023 0310 	bic.w	r3, r3, #16
 800826c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	461a      	mov	r2, r3
 8008276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800827a:	65bb      	str	r3, [r7, #88]	; 0x58
 800827c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008280:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008282:	e841 2300 	strex	r3, r2, [r1]
 8008286:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1e4      	bne.n	8008258 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008294:	4618      	mov	r0, r3
 8008296:	f7fd f90a 	bl	80054ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2202      	movs	r2, #2
 800829e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	4619      	mov	r1, r3
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f907 	bl	80084c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082ba:	e0df      	b.n	800847c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 80d1 	beq.w	8008480 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80082de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f000 80cc 	beq.w	8008480 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f0:	e853 3f00 	ldrex	r3, [r3]
 80082f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	461a      	mov	r2, r3
 8008306:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800830a:	647b      	str	r3, [r7, #68]	; 0x44
 800830c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008310:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008312:	e841 2300 	strex	r3, r2, [r1]
 8008316:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1e4      	bne.n	80082e8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	3308      	adds	r3, #8
 8008324:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008328:	e853 3f00 	ldrex	r3, [r3]
 800832c:	623b      	str	r3, [r7, #32]
   return(result);
 800832e:	6a3b      	ldr	r3, [r7, #32]
 8008330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008334:	f023 0301 	bic.w	r3, r3, #1
 8008338:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3308      	adds	r3, #8
 8008342:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008346:	633a      	str	r2, [r7, #48]	; 0x30
 8008348:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800834c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800834e:	e841 2300 	strex	r3, r2, [r1]
 8008352:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1e1      	bne.n	800831e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2220      	movs	r2, #32
 800835e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	e853 3f00 	ldrex	r3, [r3]
 800837a:	60fb      	str	r3, [r7, #12]
   return(result);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f023 0310 	bic.w	r3, r3, #16
 8008382:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	461a      	mov	r2, r3
 800838c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008390:	61fb      	str	r3, [r7, #28]
 8008392:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008394:	69b9      	ldr	r1, [r7, #24]
 8008396:	69fa      	ldr	r2, [r7, #28]
 8008398:	e841 2300 	strex	r3, r2, [r1]
 800839c:	617b      	str	r3, [r7, #20]
   return(result);
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1e4      	bne.n	800836e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2202      	movs	r2, #2
 80083a8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083ae:	4619      	mov	r1, r3
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 f889 	bl	80084c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083b6:	e063      	b.n	8008480 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80083b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00e      	beq.n	80083e2 <HAL_UART_IRQHandler+0x59e>
 80083c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d008      	beq.n	80083e2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80083d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fedf 	bl	800919e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083e0:	e051      	b.n	8008486 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80083e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d014      	beq.n	8008418 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80083ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d105      	bne.n	8008406 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80083fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d008      	beq.n	8008418 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800840a:	2b00      	cmp	r3, #0
 800840c:	d03a      	beq.n	8008484 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	4798      	blx	r3
    }
    return;
 8008416:	e035      	b.n	8008484 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800841c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008420:	2b00      	cmp	r3, #0
 8008422:	d009      	beq.n	8008438 <HAL_UART_IRQHandler+0x5f4>
 8008424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800842c:	2b00      	cmp	r3, #0
 800842e:	d003      	beq.n	8008438 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fe89 	bl	8009148 <UART_EndTransmit_IT>
    return;
 8008436:	e026      	b.n	8008486 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800843c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d009      	beq.n	8008458 <HAL_UART_IRQHandler+0x614>
 8008444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008448:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d003      	beq.n	8008458 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 feb8 	bl	80091c6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008456:	e016      	b.n	8008486 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800845c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d010      	beq.n	8008486 <HAL_UART_IRQHandler+0x642>
 8008464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008468:	2b00      	cmp	r3, #0
 800846a:	da0c      	bge.n	8008486 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 fea0 	bl	80091b2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008472:	e008      	b.n	8008486 <HAL_UART_IRQHandler+0x642>
      return;
 8008474:	bf00      	nop
 8008476:	e006      	b.n	8008486 <HAL_UART_IRQHandler+0x642>
    return;
 8008478:	bf00      	nop
 800847a:	e004      	b.n	8008486 <HAL_UART_IRQHandler+0x642>
      return;
 800847c:	bf00      	nop
 800847e:	e002      	b.n	8008486 <HAL_UART_IRQHandler+0x642>
      return;
 8008480:	bf00      	nop
 8008482:	e000      	b.n	8008486 <HAL_UART_IRQHandler+0x642>
    return;
 8008484:	bf00      	nop
  }
}
 8008486:	37e8      	adds	r7, #232	; 0xe8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80084a8:	bf00      	nop
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80084bc:	bf00      	nop
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	460b      	mov	r3, r1
 80084d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084e4:	b08c      	sub	sp, #48	; 0x30
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	689a      	ldr	r2, [r3, #8]
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	431a      	orrs	r2, r3
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	431a      	orrs	r2, r3
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	69db      	ldr	r3, [r3, #28]
 8008504:	4313      	orrs	r3, r2
 8008506:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	4baf      	ldr	r3, [pc, #700]	; (80087cc <UART_SetConfig+0x2ec>)
 8008510:	4013      	ands	r3, r2
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	6812      	ldr	r2, [r2, #0]
 8008516:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008518:	430b      	orrs	r3, r1
 800851a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	68da      	ldr	r2, [r3, #12]
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	430a      	orrs	r2, r1
 8008530:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4aa4      	ldr	r2, [pc, #656]	; (80087d0 <UART_SetConfig+0x2f0>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d004      	beq.n	800854c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008548:	4313      	orrs	r3, r2
 800854a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008556:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	6812      	ldr	r2, [r2, #0]
 800855e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008560:	430b      	orrs	r3, r1
 8008562:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856a:	f023 010f 	bic.w	r1, r3, #15
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	430a      	orrs	r2, r1
 8008578:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a95      	ldr	r2, [pc, #596]	; (80087d4 <UART_SetConfig+0x2f4>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d125      	bne.n	80085d0 <UART_SetConfig+0xf0>
 8008584:	2003      	movs	r0, #3
 8008586:	f7ff fb13 	bl	8007bb0 <LL_RCC_GetUSARTClockSource>
 800858a:	4603      	mov	r3, r0
 800858c:	2b03      	cmp	r3, #3
 800858e:	d81b      	bhi.n	80085c8 <UART_SetConfig+0xe8>
 8008590:	a201      	add	r2, pc, #4	; (adr r2, 8008598 <UART_SetConfig+0xb8>)
 8008592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008596:	bf00      	nop
 8008598:	080085a9 	.word	0x080085a9
 800859c:	080085b9 	.word	0x080085b9
 80085a0:	080085b1 	.word	0x080085b1
 80085a4:	080085c1 	.word	0x080085c1
 80085a8:	2301      	movs	r3, #1
 80085aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ae:	e042      	b.n	8008636 <UART_SetConfig+0x156>
 80085b0:	2302      	movs	r3, #2
 80085b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085b6:	e03e      	b.n	8008636 <UART_SetConfig+0x156>
 80085b8:	2304      	movs	r3, #4
 80085ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085be:	e03a      	b.n	8008636 <UART_SetConfig+0x156>
 80085c0:	2308      	movs	r3, #8
 80085c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085c6:	e036      	b.n	8008636 <UART_SetConfig+0x156>
 80085c8:	2310      	movs	r3, #16
 80085ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ce:	e032      	b.n	8008636 <UART_SetConfig+0x156>
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a7e      	ldr	r2, [pc, #504]	; (80087d0 <UART_SetConfig+0x2f0>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d12a      	bne.n	8008630 <UART_SetConfig+0x150>
 80085da:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80085de:	f7ff faf7 	bl	8007bd0 <LL_RCC_GetLPUARTClockSource>
 80085e2:	4603      	mov	r3, r0
 80085e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085e8:	d01a      	beq.n	8008620 <UART_SetConfig+0x140>
 80085ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085ee:	d81b      	bhi.n	8008628 <UART_SetConfig+0x148>
 80085f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085f4:	d00c      	beq.n	8008610 <UART_SetConfig+0x130>
 80085f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085fa:	d815      	bhi.n	8008628 <UART_SetConfig+0x148>
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d003      	beq.n	8008608 <UART_SetConfig+0x128>
 8008600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008604:	d008      	beq.n	8008618 <UART_SetConfig+0x138>
 8008606:	e00f      	b.n	8008628 <UART_SetConfig+0x148>
 8008608:	2300      	movs	r3, #0
 800860a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800860e:	e012      	b.n	8008636 <UART_SetConfig+0x156>
 8008610:	2302      	movs	r3, #2
 8008612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008616:	e00e      	b.n	8008636 <UART_SetConfig+0x156>
 8008618:	2304      	movs	r3, #4
 800861a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800861e:	e00a      	b.n	8008636 <UART_SetConfig+0x156>
 8008620:	2308      	movs	r3, #8
 8008622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008626:	e006      	b.n	8008636 <UART_SetConfig+0x156>
 8008628:	2310      	movs	r3, #16
 800862a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800862e:	e002      	b.n	8008636 <UART_SetConfig+0x156>
 8008630:	2310      	movs	r3, #16
 8008632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a65      	ldr	r2, [pc, #404]	; (80087d0 <UART_SetConfig+0x2f0>)
 800863c:	4293      	cmp	r3, r2
 800863e:	f040 8097 	bne.w	8008770 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008642:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008646:	2b08      	cmp	r3, #8
 8008648:	d823      	bhi.n	8008692 <UART_SetConfig+0x1b2>
 800864a:	a201      	add	r2, pc, #4	; (adr r2, 8008650 <UART_SetConfig+0x170>)
 800864c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008650:	08008675 	.word	0x08008675
 8008654:	08008693 	.word	0x08008693
 8008658:	0800867d 	.word	0x0800867d
 800865c:	08008693 	.word	0x08008693
 8008660:	08008683 	.word	0x08008683
 8008664:	08008693 	.word	0x08008693
 8008668:	08008693 	.word	0x08008693
 800866c:	08008693 	.word	0x08008693
 8008670:	0800868b 	.word	0x0800868b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008674:	f7fe fcc8 	bl	8007008 <HAL_RCC_GetPCLK1Freq>
 8008678:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800867a:	e010      	b.n	800869e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800867c:	4b56      	ldr	r3, [pc, #344]	; (80087d8 <UART_SetConfig+0x2f8>)
 800867e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008680:	e00d      	b.n	800869e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008682:	f7fe fc41 	bl	8006f08 <HAL_RCC_GetSysClockFreq>
 8008686:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008688:	e009      	b.n	800869e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800868a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800868e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008690:	e005      	b.n	800869e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8008692:	2300      	movs	r3, #0
 8008694:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800869c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 812b 	beq.w	80088fc <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086aa:	4a4c      	ldr	r2, [pc, #304]	; (80087dc <UART_SetConfig+0x2fc>)
 80086ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086b0:	461a      	mov	r2, r3
 80086b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80086b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	685a      	ldr	r2, [r3, #4]
 80086be:	4613      	mov	r3, r2
 80086c0:	005b      	lsls	r3, r3, #1
 80086c2:	4413      	add	r3, r2
 80086c4:	69ba      	ldr	r2, [r7, #24]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d305      	bcc.n	80086d6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086d0:	69ba      	ldr	r2, [r7, #24]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d903      	bls.n	80086de <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80086dc:	e10e      	b.n	80088fc <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	2200      	movs	r2, #0
 80086e2:	60bb      	str	r3, [r7, #8]
 80086e4:	60fa      	str	r2, [r7, #12]
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ea:	4a3c      	ldr	r2, [pc, #240]	; (80087dc <UART_SetConfig+0x2fc>)
 80086ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	2200      	movs	r2, #0
 80086f4:	603b      	str	r3, [r7, #0]
 80086f6:	607a      	str	r2, [r7, #4]
 80086f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008700:	f7f8 fa4a 	bl	8000b98 <__aeabi_uldivmod>
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	4610      	mov	r0, r2
 800870a:	4619      	mov	r1, r3
 800870c:	f04f 0200 	mov.w	r2, #0
 8008710:	f04f 0300 	mov.w	r3, #0
 8008714:	020b      	lsls	r3, r1, #8
 8008716:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800871a:	0202      	lsls	r2, r0, #8
 800871c:	6979      	ldr	r1, [r7, #20]
 800871e:	6849      	ldr	r1, [r1, #4]
 8008720:	0849      	lsrs	r1, r1, #1
 8008722:	2000      	movs	r0, #0
 8008724:	460c      	mov	r4, r1
 8008726:	4605      	mov	r5, r0
 8008728:	eb12 0804 	adds.w	r8, r2, r4
 800872c:	eb43 0905 	adc.w	r9, r3, r5
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	469a      	mov	sl, r3
 8008738:	4693      	mov	fp, r2
 800873a:	4652      	mov	r2, sl
 800873c:	465b      	mov	r3, fp
 800873e:	4640      	mov	r0, r8
 8008740:	4649      	mov	r1, r9
 8008742:	f7f8 fa29 	bl	8000b98 <__aeabi_uldivmod>
 8008746:	4602      	mov	r2, r0
 8008748:	460b      	mov	r3, r1
 800874a:	4613      	mov	r3, r2
 800874c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800874e:	6a3b      	ldr	r3, [r7, #32]
 8008750:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008754:	d308      	bcc.n	8008768 <UART_SetConfig+0x288>
 8008756:	6a3b      	ldr	r3, [r7, #32]
 8008758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800875c:	d204      	bcs.n	8008768 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	6a3a      	ldr	r2, [r7, #32]
 8008764:	60da      	str	r2, [r3, #12]
 8008766:	e0c9      	b.n	80088fc <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800876e:	e0c5      	b.n	80088fc <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	69db      	ldr	r3, [r3, #28]
 8008774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008778:	d16d      	bne.n	8008856 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800877a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800877e:	3b01      	subs	r3, #1
 8008780:	2b07      	cmp	r3, #7
 8008782:	d82d      	bhi.n	80087e0 <UART_SetConfig+0x300>
 8008784:	a201      	add	r2, pc, #4	; (adr r2, 800878c <UART_SetConfig+0x2ac>)
 8008786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878a:	bf00      	nop
 800878c:	080087ad 	.word	0x080087ad
 8008790:	080087b5 	.word	0x080087b5
 8008794:	080087e1 	.word	0x080087e1
 8008798:	080087bb 	.word	0x080087bb
 800879c:	080087e1 	.word	0x080087e1
 80087a0:	080087e1 	.word	0x080087e1
 80087a4:	080087e1 	.word	0x080087e1
 80087a8:	080087c3 	.word	0x080087c3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087ac:	f7fe fc42 	bl	8007034 <HAL_RCC_GetPCLK2Freq>
 80087b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087b2:	e01b      	b.n	80087ec <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087b4:	4b08      	ldr	r3, [pc, #32]	; (80087d8 <UART_SetConfig+0x2f8>)
 80087b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80087b8:	e018      	b.n	80087ec <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087ba:	f7fe fba5 	bl	8006f08 <HAL_RCC_GetSysClockFreq>
 80087be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087c0:	e014      	b.n	80087ec <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80087c8:	e010      	b.n	80087ec <UART_SetConfig+0x30c>
 80087ca:	bf00      	nop
 80087cc:	cfff69f3 	.word	0xcfff69f3
 80087d0:	40008000 	.word	0x40008000
 80087d4:	40013800 	.word	0x40013800
 80087d8:	00f42400 	.word	0x00f42400
 80087dc:	0800e124 	.word	0x0800e124
      default:
        pclk = 0U;
 80087e0:	2300      	movs	r3, #0
 80087e2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80087ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 8084 	beq.w	80088fc <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	4a4b      	ldr	r2, [pc, #300]	; (8008928 <UART_SetConfig+0x448>)
 80087fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087fe:	461a      	mov	r2, r3
 8008800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008802:	fbb3 f3f2 	udiv	r3, r3, r2
 8008806:	005a      	lsls	r2, r3, #1
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	085b      	lsrs	r3, r3, #1
 800880e:	441a      	add	r2, r3
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	fbb2 f3f3 	udiv	r3, r2, r3
 8008818:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800881a:	6a3b      	ldr	r3, [r7, #32]
 800881c:	2b0f      	cmp	r3, #15
 800881e:	d916      	bls.n	800884e <UART_SetConfig+0x36e>
 8008820:	6a3b      	ldr	r3, [r7, #32]
 8008822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008826:	d212      	bcs.n	800884e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008828:	6a3b      	ldr	r3, [r7, #32]
 800882a:	b29b      	uxth	r3, r3
 800882c:	f023 030f 	bic.w	r3, r3, #15
 8008830:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008832:	6a3b      	ldr	r3, [r7, #32]
 8008834:	085b      	lsrs	r3, r3, #1
 8008836:	b29b      	uxth	r3, r3
 8008838:	f003 0307 	and.w	r3, r3, #7
 800883c:	b29a      	uxth	r2, r3
 800883e:	8bfb      	ldrh	r3, [r7, #30]
 8008840:	4313      	orrs	r3, r2
 8008842:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	8bfa      	ldrh	r2, [r7, #30]
 800884a:	60da      	str	r2, [r3, #12]
 800884c:	e056      	b.n	80088fc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008854:	e052      	b.n	80088fc <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008856:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800885a:	3b01      	subs	r3, #1
 800885c:	2b07      	cmp	r3, #7
 800885e:	d822      	bhi.n	80088a6 <UART_SetConfig+0x3c6>
 8008860:	a201      	add	r2, pc, #4	; (adr r2, 8008868 <UART_SetConfig+0x388>)
 8008862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008866:	bf00      	nop
 8008868:	08008889 	.word	0x08008889
 800886c:	08008891 	.word	0x08008891
 8008870:	080088a7 	.word	0x080088a7
 8008874:	08008897 	.word	0x08008897
 8008878:	080088a7 	.word	0x080088a7
 800887c:	080088a7 	.word	0x080088a7
 8008880:	080088a7 	.word	0x080088a7
 8008884:	0800889f 	.word	0x0800889f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008888:	f7fe fbd4 	bl	8007034 <HAL_RCC_GetPCLK2Freq>
 800888c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800888e:	e010      	b.n	80088b2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008890:	4b26      	ldr	r3, [pc, #152]	; (800892c <UART_SetConfig+0x44c>)
 8008892:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008894:	e00d      	b.n	80088b2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008896:	f7fe fb37 	bl	8006f08 <HAL_RCC_GetSysClockFreq>
 800889a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800889c:	e009      	b.n	80088b2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800889e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088a4:	e005      	b.n	80088b2 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80088b0:	bf00      	nop
    }

    if (pclk != 0U)
 80088b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d021      	beq.n	80088fc <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088bc:	4a1a      	ldr	r2, [pc, #104]	; (8008928 <UART_SetConfig+0x448>)
 80088be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088c2:	461a      	mov	r2, r3
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	085b      	lsrs	r3, r3, #1
 80088d0:	441a      	add	r2, r3
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	2b0f      	cmp	r3, #15
 80088e0:	d909      	bls.n	80088f6 <UART_SetConfig+0x416>
 80088e2:	6a3b      	ldr	r3, [r7, #32]
 80088e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088e8:	d205      	bcs.n	80088f6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	60da      	str	r2, [r3, #12]
 80088f4:	e002      	b.n	80088fc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	2201      	movs	r2, #1
 8008900:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	2201      	movs	r2, #1
 8008908:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	2200      	movs	r2, #0
 8008910:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	2200      	movs	r2, #0
 8008916:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008918:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800891c:	4618      	mov	r0, r3
 800891e:	3730      	adds	r7, #48	; 0x30
 8008920:	46bd      	mov	sp, r7
 8008922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008926:	bf00      	nop
 8008928:	0800e124 	.word	0x0800e124
 800892c:	00f42400 	.word	0x00f42400

08008930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893c:	f003 0301 	and.w	r3, r3, #1
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00a      	beq.n	800895a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	430a      	orrs	r2, r1
 8008958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895e:	f003 0302 	and.w	r3, r3, #2
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00a      	beq.n	800897c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	430a      	orrs	r2, r1
 800897a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008980:	f003 0304 	and.w	r3, r3, #4
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00a      	beq.n	800899e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a2:	f003 0308 	and.w	r3, r3, #8
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00a      	beq.n	80089c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	430a      	orrs	r2, r1
 80089be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c4:	f003 0310 	and.w	r3, r3, #16
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00a      	beq.n	80089e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	430a      	orrs	r2, r1
 80089e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e6:	f003 0320 	and.w	r3, r3, #32
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00a      	beq.n	8008a04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	430a      	orrs	r2, r1
 8008a02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d01a      	beq.n	8008a46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	430a      	orrs	r2, r1
 8008a24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a2e:	d10a      	bne.n	8008a46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	430a      	orrs	r2, r1
 8008a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00a      	beq.n	8008a68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	430a      	orrs	r2, r1
 8008a66:	605a      	str	r2, [r3, #4]
  }
}
 8008a68:	bf00      	nop
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b098      	sub	sp, #96	; 0x60
 8008a78:	af02      	add	r7, sp, #8
 8008a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a84:	f7fc faa4 	bl	8004fd0 <HAL_GetTick>
 8008a88:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 0308 	and.w	r3, r3, #8
 8008a94:	2b08      	cmp	r3, #8
 8008a96:	d12f      	bne.n	8008af8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f88e 	bl	8008bc8 <UART_WaitOnFlagUntilTimeout>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d022      	beq.n	8008af8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aba:	e853 3f00 	ldrex	r3, [r3]
 8008abe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ac6:	653b      	str	r3, [r7, #80]	; 0x50
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	461a      	mov	r2, r3
 8008ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ad0:	647b      	str	r3, [r7, #68]	; 0x44
 8008ad2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ad6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ad8:	e841 2300 	strex	r3, r2, [r1]
 8008adc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1e6      	bne.n	8008ab2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2220      	movs	r2, #32
 8008ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008af4:	2303      	movs	r3, #3
 8008af6:	e063      	b.n	8008bc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 0304 	and.w	r3, r3, #4
 8008b02:	2b04      	cmp	r3, #4
 8008b04:	d149      	bne.n	8008b9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f857 	bl	8008bc8 <UART_WaitOnFlagUntilTimeout>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d03c      	beq.n	8008b9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b28:	e853 3f00 	ldrex	r3, [r3]
 8008b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8008b2e:	6a3b      	ldr	r3, [r7, #32]
 8008b30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b3e:	633b      	str	r3, [r7, #48]	; 0x30
 8008b40:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b46:	e841 2300 	strex	r3, r2, [r1]
 8008b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1e6      	bne.n	8008b20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	3308      	adds	r3, #8
 8008b58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	e853 3f00 	ldrex	r3, [r3]
 8008b60:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f023 0301 	bic.w	r3, r3, #1
 8008b68:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	3308      	adds	r3, #8
 8008b70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b72:	61fa      	str	r2, [r7, #28]
 8008b74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b76:	69b9      	ldr	r1, [r7, #24]
 8008b78:	69fa      	ldr	r2, [r7, #28]
 8008b7a:	e841 2300 	strex	r3, r2, [r1]
 8008b7e:	617b      	str	r3, [r7, #20]
   return(result);
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1e5      	bne.n	8008b52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2220      	movs	r2, #32
 8008b8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e012      	b.n	8008bc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2220      	movs	r2, #32
 8008b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2220      	movs	r2, #32
 8008ba6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3758      	adds	r7, #88	; 0x58
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	603b      	str	r3, [r7, #0]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bd8:	e049      	b.n	8008c6e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be0:	d045      	beq.n	8008c6e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008be2:	f7fc f9f5 	bl	8004fd0 <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	69ba      	ldr	r2, [r7, #24]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d302      	bcc.n	8008bf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d101      	bne.n	8008bfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e048      	b.n	8008c8e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f003 0304 	and.w	r3, r3, #4
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d031      	beq.n	8008c6e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	69db      	ldr	r3, [r3, #28]
 8008c10:	f003 0308 	and.w	r3, r3, #8
 8008c14:	2b08      	cmp	r3, #8
 8008c16:	d110      	bne.n	8008c3a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2208      	movs	r2, #8
 8008c1e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f000 f920 	bl	8008e66 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2208      	movs	r2, #8
 8008c2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e029      	b.n	8008c8e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	69db      	ldr	r3, [r3, #28]
 8008c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c48:	d111      	bne.n	8008c6e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f000 f906 	bl	8008e66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2220      	movs	r2, #32
 8008c5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e00f      	b.n	8008c8e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	69da      	ldr	r2, [r3, #28]
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	4013      	ands	r3, r2
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	bf0c      	ite	eq
 8008c7e:	2301      	moveq	r3, #1
 8008c80:	2300      	movne	r3, #0
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	461a      	mov	r2, r3
 8008c86:	79fb      	ldrb	r3, [r7, #7]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d0a6      	beq.n	8008bda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
	...

08008c98 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b096      	sub	sp, #88	; 0x58
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	68ba      	ldr	r2, [r7, #8]
 8008caa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	88fa      	ldrh	r2, [r7, #6]
 8008cb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2222      	movs	r2, #34	; 0x22
 8008cc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d02d      	beq.n	8008d2a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cd4:	4a40      	ldr	r2, [pc, #256]	; (8008dd8 <UART_Start_Receive_DMA+0x140>)
 8008cd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cde:	4a3f      	ldr	r2, [pc, #252]	; (8008ddc <UART_Start_Receive_DMA+0x144>)
 8008ce0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ce8:	4a3d      	ldr	r2, [pc, #244]	; (8008de0 <UART_Start_Receive_DMA+0x148>)
 8008cea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	3324      	adds	r3, #36	; 0x24
 8008d02:	4619      	mov	r1, r3
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d08:	461a      	mov	r2, r3
 8008d0a:	88fb      	ldrh	r3, [r7, #6]
 8008d0c:	f7fc fb54 	bl	80053b8 <HAL_DMA_Start_IT>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d009      	beq.n	8008d2a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2210      	movs	r2, #16
 8008d1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2220      	movs	r2, #32
 8008d22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e051      	b.n	8008dce <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d018      	beq.n	8008d64 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3a:	e853 3f00 	ldrex	r3, [r3]
 8008d3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d46:	657b      	str	r3, [r7, #84]	; 0x54
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d50:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d52:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d54:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d58:	e841 2300 	strex	r3, r2, [r1]
 8008d5c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1e6      	bne.n	8008d32 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3308      	adds	r3, #8
 8008d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6e:	e853 3f00 	ldrex	r3, [r3]
 8008d72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	f043 0301 	orr.w	r3, r3, #1
 8008d7a:	653b      	str	r3, [r7, #80]	; 0x50
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3308      	adds	r3, #8
 8008d82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d84:	637a      	str	r2, [r7, #52]	; 0x34
 8008d86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d8c:	e841 2300 	strex	r3, r2, [r1]
 8008d90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1e5      	bne.n	8008d64 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	3308      	adds	r3, #8
 8008d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	e853 3f00 	ldrex	r3, [r3]
 8008da6:	613b      	str	r3, [r7, #16]
   return(result);
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	3308      	adds	r3, #8
 8008db6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008db8:	623a      	str	r2, [r7, #32]
 8008dba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dbc:	69f9      	ldr	r1, [r7, #28]
 8008dbe:	6a3a      	ldr	r2, [r7, #32]
 8008dc0:	e841 2300 	strex	r3, r2, [r1]
 8008dc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1e5      	bne.n	8008d98 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3758      	adds	r7, #88	; 0x58
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	08008f33 	.word	0x08008f33
 8008ddc:	0800905f 	.word	0x0800905f
 8008de0:	0800909d 	.word	0x0800909d

08008de4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b08f      	sub	sp, #60	; 0x3c
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df2:	6a3b      	ldr	r3, [r7, #32]
 8008df4:	e853 3f00 	ldrex	r3, [r3]
 8008df8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e00:	637b      	str	r3, [r7, #52]	; 0x34
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e0c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e12:	e841 2300 	strex	r3, r2, [r1]
 8008e16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1e6      	bne.n	8008dec <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3308      	adds	r3, #8
 8008e24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	e853 3f00 	ldrex	r3, [r3]
 8008e2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008e34:	633b      	str	r3, [r7, #48]	; 0x30
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	3308      	adds	r3, #8
 8008e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e3e:	61ba      	str	r2, [r7, #24]
 8008e40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e42:	6979      	ldr	r1, [r7, #20]
 8008e44:	69ba      	ldr	r2, [r7, #24]
 8008e46:	e841 2300 	strex	r3, r2, [r1]
 8008e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1e5      	bne.n	8008e1e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2220      	movs	r2, #32
 8008e56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008e5a:	bf00      	nop
 8008e5c:	373c      	adds	r7, #60	; 0x3c
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr

08008e66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e66:	b480      	push	{r7}
 8008e68:	b095      	sub	sp, #84	; 0x54
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e76:	e853 3f00 	ldrex	r3, [r3]
 8008e7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	461a      	mov	r2, r3
 8008e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e8c:	643b      	str	r3, [r7, #64]	; 0x40
 8008e8e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e94:	e841 2300 	strex	r3, r2, [r1]
 8008e98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1e6      	bne.n	8008e6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3308      	adds	r3, #8
 8008ea6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea8:	6a3b      	ldr	r3, [r7, #32]
 8008eaa:	e853 3f00 	ldrex	r3, [r3]
 8008eae:	61fb      	str	r3, [r7, #28]
   return(result);
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008eb6:	f023 0301 	bic.w	r3, r3, #1
 8008eba:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	3308      	adds	r3, #8
 8008ec2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ec4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ec6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ecc:	e841 2300 	strex	r3, r2, [r1]
 8008ed0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1e3      	bne.n	8008ea0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d118      	bne.n	8008f12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	e853 3f00 	ldrex	r3, [r3]
 8008eec:	60bb      	str	r3, [r7, #8]
   return(result);
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	f023 0310 	bic.w	r3, r3, #16
 8008ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	461a      	mov	r2, r3
 8008efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008efe:	61bb      	str	r3, [r7, #24]
 8008f00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f02:	6979      	ldr	r1, [r7, #20]
 8008f04:	69ba      	ldr	r2, [r7, #24]
 8008f06:	e841 2300 	strex	r3, r2, [r1]
 8008f0a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1e6      	bne.n	8008ee0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2220      	movs	r2, #32
 8008f16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008f26:	bf00      	nop
 8008f28:	3754      	adds	r7, #84	; 0x54
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr

08008f32 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b09c      	sub	sp, #112	; 0x70
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 0320 	and.w	r3, r3, #32
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d171      	bne.n	8009032 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f50:	2200      	movs	r2, #0
 8008f52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f5e:	e853 3f00 	ldrex	r3, [r3]
 8008f62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	461a      	mov	r2, r3
 8008f72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f74:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f76:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f7c:	e841 2300 	strex	r3, r2, [r1]
 8008f80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1e6      	bne.n	8008f56 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	3308      	adds	r3, #8
 8008f8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f92:	e853 3f00 	ldrex	r3, [r3]
 8008f96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f9a:	f023 0301 	bic.w	r3, r3, #1
 8008f9e:	667b      	str	r3, [r7, #100]	; 0x64
 8008fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3308      	adds	r3, #8
 8008fa6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008fa8:	647a      	str	r2, [r7, #68]	; 0x44
 8008faa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008fae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fb0:	e841 2300 	strex	r3, r2, [r1]
 8008fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1e5      	bne.n	8008f88 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3308      	adds	r3, #8
 8008fc2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc6:	e853 3f00 	ldrex	r3, [r3]
 8008fca:	623b      	str	r3, [r7, #32]
   return(result);
 8008fcc:	6a3b      	ldr	r3, [r7, #32]
 8008fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fd2:	663b      	str	r3, [r7, #96]	; 0x60
 8008fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3308      	adds	r3, #8
 8008fda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008fdc:	633a      	str	r2, [r7, #48]	; 0x30
 8008fde:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fe4:	e841 2300 	strex	r3, r2, [r1]
 8008fe8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d1e5      	bne.n	8008fbc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ff2:	2220      	movs	r2, #32
 8008ff4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d118      	bne.n	8009032 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	e853 3f00 	ldrex	r3, [r3]
 800900c:	60fb      	str	r3, [r7, #12]
   return(result);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f023 0310 	bic.w	r3, r3, #16
 8009014:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	461a      	mov	r2, r3
 800901c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800901e:	61fb      	str	r3, [r7, #28]
 8009020:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009022:	69b9      	ldr	r1, [r7, #24]
 8009024:	69fa      	ldr	r2, [r7, #28]
 8009026:	e841 2300 	strex	r3, r2, [r1]
 800902a:	617b      	str	r3, [r7, #20]
   return(result);
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1e6      	bne.n	8009000 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009034:	2200      	movs	r2, #0
 8009036:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800903a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800903c:	2b01      	cmp	r3, #1
 800903e:	d107      	bne.n	8009050 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009042:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009046:	4619      	mov	r1, r3
 8009048:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800904a:	f7ff fa3d 	bl	80084c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800904e:	e002      	b.n	8009056 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009050:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009052:	f7f8 fb33 	bl	80016bc <HAL_UART_RxCpltCallback>
}
 8009056:	bf00      	nop
 8009058:	3770      	adds	r7, #112	; 0x70
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800906a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2201      	movs	r2, #1
 8009070:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009076:	2b01      	cmp	r3, #1
 8009078:	d109      	bne.n	800908e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009080:	085b      	lsrs	r3, r3, #1
 8009082:	b29b      	uxth	r3, r3
 8009084:	4619      	mov	r1, r3
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f7ff fa1e 	bl	80084c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800908c:	e002      	b.n	8009094 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f7ff fa06 	bl	80084a0 <HAL_UART_RxHalfCpltCallback>
}
 8009094:	bf00      	nop
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b086      	sub	sp, #24
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090b0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090b8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090c4:	2b80      	cmp	r3, #128	; 0x80
 80090c6:	d109      	bne.n	80090dc <UART_DMAError+0x40>
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	2b21      	cmp	r3, #33	; 0x21
 80090cc:	d106      	bne.n	80090dc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80090d6:	6978      	ldr	r0, [r7, #20]
 80090d8:	f7ff fe84 	bl	8008de4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e6:	2b40      	cmp	r3, #64	; 0x40
 80090e8:	d109      	bne.n	80090fe <UART_DMAError+0x62>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2b22      	cmp	r3, #34	; 0x22
 80090ee:	d106      	bne.n	80090fe <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80090f8:	6978      	ldr	r0, [r7, #20]
 80090fa:	f7ff feb4 	bl	8008e66 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009104:	f043 0210 	orr.w	r2, r3, #16
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800910e:	6978      	ldr	r0, [r7, #20]
 8009110:	f7ff f9d0 	bl	80084b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009114:	bf00      	nop
 8009116:	3718      	adds	r7, #24
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009128:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2200      	movs	r2, #0
 800912e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2200      	movs	r2, #0
 8009136:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f7ff f9ba 	bl	80084b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009140:	bf00      	nop
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b088      	sub	sp, #32
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	e853 3f00 	ldrex	r3, [r3]
 800915c:	60bb      	str	r3, [r7, #8]
   return(result);
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009164:	61fb      	str	r3, [r7, #28]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	461a      	mov	r2, r3
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	61bb      	str	r3, [r7, #24]
 8009170:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009172:	6979      	ldr	r1, [r7, #20]
 8009174:	69ba      	ldr	r2, [r7, #24]
 8009176:	e841 2300 	strex	r3, r2, [r1]
 800917a:	613b      	str	r3, [r7, #16]
   return(result);
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1e6      	bne.n	8009150 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2220      	movs	r2, #32
 8009186:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f7ff f97b 	bl	800848c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009196:	bf00      	nop
 8009198:	3720      	adds	r7, #32
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800919e:	b480      	push	{r7}
 80091a0:	b083      	sub	sp, #12
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80091a6:	bf00      	nop
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b083      	sub	sp, #12
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80091ba:	bf00      	nop
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80091c6:	b480      	push	{r7}
 80091c8:	b083      	sub	sp, #12
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80091ce:	bf00      	nop
 80091d0:	370c      	adds	r7, #12
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80091da:	b480      	push	{r7}
 80091dc:	b085      	sub	sp, #20
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d101      	bne.n	80091f0 <HAL_UARTEx_DisableFifoMode+0x16>
 80091ec:	2302      	movs	r3, #2
 80091ee:	e027      	b.n	8009240 <HAL_UARTEx_DisableFifoMode+0x66>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2224      	movs	r2, #36	; 0x24
 80091fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f022 0201 	bic.w	r2, r2, #1
 8009216:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800921e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2220      	movs	r2, #32
 8009232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800925c:	2b01      	cmp	r3, #1
 800925e:	d101      	bne.n	8009264 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009260:	2302      	movs	r3, #2
 8009262:	e02d      	b.n	80092c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2224      	movs	r2, #36	; 0x24
 8009270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f022 0201 	bic.w	r2, r2, #1
 800928a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	430a      	orrs	r2, r1
 800929e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f84f 	bl	8009344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2220      	movs	r2, #32
 80092b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d101      	bne.n	80092e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80092dc:	2302      	movs	r3, #2
 80092de:	e02d      	b.n	800933c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2224      	movs	r2, #36	; 0x24
 80092ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f022 0201 	bic.w	r2, r2, #1
 8009306:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	430a      	orrs	r2, r1
 800931a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f811 	bl	8009344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2220      	movs	r2, #32
 800932e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009350:	2b00      	cmp	r3, #0
 8009352:	d108      	bne.n	8009366 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009364:	e031      	b.n	80093ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009366:	2308      	movs	r3, #8
 8009368:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800936a:	2308      	movs	r3, #8
 800936c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	0e5b      	lsrs	r3, r3, #25
 8009376:	b2db      	uxtb	r3, r3
 8009378:	f003 0307 	and.w	r3, r3, #7
 800937c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	0f5b      	lsrs	r3, r3, #29
 8009386:	b2db      	uxtb	r3, r3
 8009388:	f003 0307 	and.w	r3, r3, #7
 800938c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800938e:	7bbb      	ldrb	r3, [r7, #14]
 8009390:	7b3a      	ldrb	r2, [r7, #12]
 8009392:	4911      	ldr	r1, [pc, #68]	; (80093d8 <UARTEx_SetNbDataToProcess+0x94>)
 8009394:	5c8a      	ldrb	r2, [r1, r2]
 8009396:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800939a:	7b3a      	ldrb	r2, [r7, #12]
 800939c:	490f      	ldr	r1, [pc, #60]	; (80093dc <UARTEx_SetNbDataToProcess+0x98>)
 800939e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
 80093ae:	7b7a      	ldrb	r2, [r7, #13]
 80093b0:	4909      	ldr	r1, [pc, #36]	; (80093d8 <UARTEx_SetNbDataToProcess+0x94>)
 80093b2:	5c8a      	ldrb	r2, [r1, r2]
 80093b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80093b8:	7b7a      	ldrb	r2, [r7, #13]
 80093ba:	4908      	ldr	r1, [pc, #32]	; (80093dc <UARTEx_SetNbDataToProcess+0x98>)
 80093bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093be:	fb93 f3f2 	sdiv	r3, r3, r2
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80093ca:	bf00      	nop
 80093cc:	3714      	adds	r7, #20
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	0800e13c 	.word	0x0800e13c
 80093dc:	0800e144 	.word	0x0800e144

080093e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80093e8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80093ec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	43db      	mvns	r3, r3
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	4013      	ands	r3, r2
 8009400:	b29a      	uxth	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3714      	adds	r7, #20
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr

08009416 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009416:	b084      	sub	sp, #16
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	f107 0014 	add.w	r0, r7, #20
 8009424:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	370c      	adds	r7, #12
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	b004      	add	sp, #16
 8009456:	4770      	bx	lr

08009458 <uart_esp32_transmit>:
uint8_t UART_ESP32_TxBUF[UART_ESP32_MAX_SENDLEN];
uint8_t UART_ESP32_RxBUF[UART_ESP32_MAX_RECVLEN];
volatile uint8_t UART_ESP32_RxLen = 0;
volatile uint8_t UART_ESP32_RecvEndFlag = 0;

void uart_esp32_transmit(char *fmt, ...) {
 8009458:	b40f      	push	{r0, r1, r2, r3}
 800945a:	b580      	push	{r7, lr}
 800945c:	b082      	sub	sp, #8
 800945e:	af00      	add	r7, sp, #0
	uint16_t i, j;
	va_list ap;
	va_start(ap, fmt);
 8009460:	f107 0314 	add.w	r3, r7, #20
 8009464:	603b      	str	r3, [r7, #0]
	vsprintf((char*) UART_ESP32_TxBUF, fmt, ap);
 8009466:	683a      	ldr	r2, [r7, #0]
 8009468:	6939      	ldr	r1, [r7, #16]
 800946a:	4822      	ldr	r0, [pc, #136]	; (80094f4 <uart_esp32_transmit+0x9c>)
 800946c:	f002 f948 	bl	800b700 <vsiprintf>
	va_end(ap);

	for (i = 0; i < UART_ESP32_MAX_SENDLEN; i++) {
 8009470:	2300      	movs	r3, #0
 8009472:	80fb      	strh	r3, [r7, #6]
 8009474:	e019      	b.n	80094aa <uart_esp32_transmit+0x52>
		j = i + 1;
 8009476:	88fb      	ldrh	r3, [r7, #6]
 8009478:	3301      	adds	r3, #1
 800947a:	80bb      	strh	r3, [r7, #4]
		if (UART_ESP32_TxBUF[i] == '\00') {
 800947c:	88fb      	ldrh	r3, [r7, #6]
 800947e:	4a1d      	ldr	r2, [pc, #116]	; (80094f4 <uart_esp32_transmit+0x9c>)
 8009480:	5cd3      	ldrb	r3, [r2, r3]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10e      	bne.n	80094a4 <uart_esp32_transmit+0x4c>
			for (; j < UART_ESP32_MAX_SENDLEN; j++) {
 8009486:	e009      	b.n	800949c <uart_esp32_transmit+0x44>
				UART_ESP32_TxBUF[j - 1] = UART_ESP32_TxBUF[j];
 8009488:	88ba      	ldrh	r2, [r7, #4]
 800948a:	88bb      	ldrh	r3, [r7, #4]
 800948c:	3b01      	subs	r3, #1
 800948e:	4919      	ldr	r1, [pc, #100]	; (80094f4 <uart_esp32_transmit+0x9c>)
 8009490:	5c89      	ldrb	r1, [r1, r2]
 8009492:	4a18      	ldr	r2, [pc, #96]	; (80094f4 <uart_esp32_transmit+0x9c>)
 8009494:	54d1      	strb	r1, [r2, r3]
			for (; j < UART_ESP32_MAX_SENDLEN; j++) {
 8009496:	88bb      	ldrh	r3, [r7, #4]
 8009498:	3301      	adds	r3, #1
 800949a:	80bb      	strh	r3, [r7, #4]
 800949c:	88bb      	ldrh	r3, [r7, #4]
 800949e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094a2:	d3f1      	bcc.n	8009488 <uart_esp32_transmit+0x30>
	for (i = 0; i < UART_ESP32_MAX_SENDLEN; i++) {
 80094a4:	88fb      	ldrh	r3, [r7, #6]
 80094a6:	3301      	adds	r3, #1
 80094a8:	80fb      	strh	r3, [r7, #6]
 80094aa:	88fb      	ldrh	r3, [r7, #6]
 80094ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094b0:	d3e1      	bcc.n	8009476 <uart_esp32_transmit+0x1e>
			}
		}
	}

	i = strlen((const char*) UART_ESP32_TxBUF);
 80094b2:	4810      	ldr	r0, [pc, #64]	; (80094f4 <uart_esp32_transmit+0x9c>)
 80094b4:	f7f6 fe64 	bl	8000180 <strlen>
 80094b8:	4603      	mov	r3, r0
 80094ba:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(&hlpuart1, UART_ESP32_TxBUF, i, 100);
 80094bc:	88fa      	ldrh	r2, [r7, #6]
 80094be:	2364      	movs	r3, #100	; 0x64
 80094c0:	490c      	ldr	r1, [pc, #48]	; (80094f4 <uart_esp32_transmit+0x9c>)
 80094c2:	480d      	ldr	r0, [pc, #52]	; (80094f8 <uart_esp32_transmit+0xa0>)
 80094c4:	f7fe fbe4 	bl	8007c90 <HAL_UART_Transmit>

	memset(UART_ESP32_TxBUF, 0, UART_ESP32_MAX_SENDLEN);
 80094c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094cc:	2100      	movs	r1, #0
 80094ce:	4809      	ldr	r0, [pc, #36]	; (80094f4 <uart_esp32_transmit+0x9c>)
 80094d0:	f001 f8b2 	bl	800a638 <memset>
	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 80094d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094d8:	2100      	movs	r1, #0
 80094da:	4808      	ldr	r0, [pc, #32]	; (80094fc <uart_esp32_transmit+0xa4>)
 80094dc:	f001 f8ac 	bl	800a638 <memset>
	UART_ESP32_RecvEndFlag = 0;
 80094e0:	4b07      	ldr	r3, [pc, #28]	; (8009500 <uart_esp32_transmit+0xa8>)
 80094e2:	2200      	movs	r2, #0
 80094e4:	701a      	strb	r2, [r3, #0]
}
 80094e6:	bf00      	nop
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094f0:	b004      	add	sp, #16
 80094f2:	4770      	bx	lr
 80094f4:	200006f0 	.word	0x200006f0
 80094f8:	2000026c 	.word	0x2000026c
 80094fc:	20000ef0 	.word	0x20000ef0
 8009500:	200016f1 	.word	0x200016f1

08009504 <esp8266_CheckRespond>:

WIFI_StateTypeDef esp8266_CheckRespond(uint8_t *str) {
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
	printf("(DBG:) recv:\r\n%s\r\n", UART_ESP32_RxBUF);
 800950c:	4910      	ldr	r1, [pc, #64]	; (8009550 <esp8266_CheckRespond+0x4c>)
 800950e:	4811      	ldr	r0, [pc, #68]	; (8009554 <esp8266_CheckRespond+0x50>)
 8009510:	f001 f97a 	bl	800a808 <iprintf>
	if (strstr((const char*) UART_ESP32_RxBUF, (const char*) str) != NULL) {
 8009514:	6879      	ldr	r1, [r7, #4]
 8009516:	480e      	ldr	r0, [pc, #56]	; (8009550 <esp8266_CheckRespond+0x4c>)
 8009518:	f001 fa98 	bl	800aa4c <strstr>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00a      	beq.n	8009538 <esp8266_CheckRespond+0x34>
		printf("(DBG:) Match succeed\r\n");
 8009522:	480d      	ldr	r0, [pc, #52]	; (8009558 <esp8266_CheckRespond+0x54>)
 8009524:	f001 f9f6 	bl	800a914 <puts>
		memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 8009528:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800952c:	2100      	movs	r1, #0
 800952e:	4808      	ldr	r0, [pc, #32]	; (8009550 <esp8266_CheckRespond+0x4c>)
 8009530:	f001 f882 	bl	800a638 <memset>
		return _MATCHOK;
 8009534:	2304      	movs	r3, #4
 8009536:	e006      	b.n	8009546 <esp8266_CheckRespond+0x42>
	}

	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 8009538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800953c:	2100      	movs	r1, #0
 800953e:	4804      	ldr	r0, [pc, #16]	; (8009550 <esp8266_CheckRespond+0x4c>)
 8009540:	f001 f87a 	bl	800a638 <memset>
	return _MATCHERROR;
 8009544:	2303      	movs	r3, #3
}
 8009546:	4618      	mov	r0, r3
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	20000ef0 	.word	0x20000ef0
 8009554:	0800d890 	.word	0x0800d890
 8009558:	0800d8a4 	.word	0x0800d8a4

0800955c <esp8266_TransmitCmd>:

WIFI_StateTypeDef esp8266_TransmitCmd(uint8_t *cmd, uint8_t *ack,
		uint32_t waitms, uint8_t newline) {
 800955c:	b580      	push	{r7, lr}
 800955e:	b086      	sub	sp, #24
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	607a      	str	r2, [r7, #4]
 8009568:	70fb      	strb	r3, [r7, #3]
	int timeout = waitms;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	617b      	str	r3, [r7, #20]
	uint8_t check = 0;
 800956e:	2300      	movs	r3, #0
 8009570:	74fb      	strb	r3, [r7, #19]
	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 8009572:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009576:	2100      	movs	r1, #0
 8009578:	4826      	ldr	r0, [pc, #152]	; (8009614 <esp8266_TransmitCmd+0xb8>)
 800957a:	f001 f85d 	bl	800a638 <memset>
	printf("\r\n(DBG:) Try to send cmd: %s\r\n", cmd);
 800957e:	68f9      	ldr	r1, [r7, #12]
 8009580:	4825      	ldr	r0, [pc, #148]	; (8009618 <esp8266_TransmitCmd+0xbc>)
 8009582:	f001 f941 	bl	800a808 <iprintf>
	if (newline == 0)
 8009586:	78fb      	ldrb	r3, [r7, #3]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d104      	bne.n	8009596 <esp8266_TransmitCmd+0x3a>
		uart_esp32_transmit("%s", cmd);      // transmit cmd to usart2
 800958c:	68f9      	ldr	r1, [r7, #12]
 800958e:	4823      	ldr	r0, [pc, #140]	; (800961c <esp8266_TransmitCmd+0xc0>)
 8009590:	f7ff ff62 	bl	8009458 <uart_esp32_transmit>
 8009594:	e01e      	b.n	80095d4 <esp8266_TransmitCmd+0x78>
	else
		uart_esp32_transmit("%s\r\n", cmd); // transmit cmd to usart2
 8009596:	68f9      	ldr	r1, [r7, #12]
 8009598:	4821      	ldr	r0, [pc, #132]	; (8009620 <esp8266_TransmitCmd+0xc4>)
 800959a:	f7ff ff5d 	bl	8009458 <uart_esp32_transmit>

	while (timeout--) {
 800959e:	e019      	b.n	80095d4 <esp8266_TransmitCmd+0x78>
		// finish dma receive
		if (UART_ESP32_RecvEndFlag == 1) {
 80095a0:	4b20      	ldr	r3, [pc, #128]	; (8009624 <esp8266_TransmitCmd+0xc8>)
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d111      	bne.n	80095ce <esp8266_TransmitCmd+0x72>
			check = esp8266_CheckRespond(ack);
 80095aa:	68b8      	ldr	r0, [r7, #8]
 80095ac:	f7ff ffaa 	bl	8009504 <esp8266_CheckRespond>
 80095b0:	4603      	mov	r3, r0
 80095b2:	74fb      	strb	r3, [r7, #19]
			if (check == _MATCHOK) {
			}

			UART_ESP32_RxLen = 0;
 80095b4:	4b1c      	ldr	r3, [pc, #112]	; (8009628 <esp8266_TransmitCmd+0xcc>)
 80095b6:	2200      	movs	r2, #0
 80095b8:	701a      	strb	r2, [r3, #0]
			UART_ESP32_RecvEndFlag = 0;
 80095ba:	4b1a      	ldr	r3, [pc, #104]	; (8009624 <esp8266_TransmitCmd+0xc8>)
 80095bc:	2200      	movs	r2, #0
 80095be:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 80095c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095c4:	4913      	ldr	r1, [pc, #76]	; (8009614 <esp8266_TransmitCmd+0xb8>)
 80095c6:	4819      	ldr	r0, [pc, #100]	; (800962c <esp8266_TransmitCmd+0xd0>)
 80095c8:	f7fe fbf0 	bl	8007dac <HAL_UART_Receive_DMA>

			break;
 80095cc:	e007      	b.n	80095de <esp8266_TransmitCmd+0x82>
		}
		HAL_Delay(1);
 80095ce:	2001      	movs	r0, #1
 80095d0:	f7fb fd16 	bl	8005000 <HAL_Delay>
	while (timeout--) {
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	1e5a      	subs	r2, r3, #1
 80095d8:	617a      	str	r2, [r7, #20]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1e0      	bne.n	80095a0 <esp8266_TransmitCmd+0x44>
	}

	if (check == _MATCHERROR) {
 80095de:	7cfb      	ldrb	r3, [r7, #19]
 80095e0:	2b03      	cmp	r3, #3
 80095e2:	d104      	bne.n	80095ee <esp8266_TransmitCmd+0x92>
		printf("\r\n(DBG:) Cmd match failed\r\n");
 80095e4:	4812      	ldr	r0, [pc, #72]	; (8009630 <esp8266_TransmitCmd+0xd4>)
 80095e6:	f001 f995 	bl	800a914 <puts>
		return check;
 80095ea:	7cfb      	ldrb	r3, [r7, #19]
 80095ec:	e00e      	b.n	800960c <esp8266_TransmitCmd+0xb0>
	}
	if (timeout <= 0) {
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	dc07      	bgt.n	8009604 <esp8266_TransmitCmd+0xa8>
		printf("(DBG:) Finish waiting\r\n");
 80095f4:	480f      	ldr	r0, [pc, #60]	; (8009634 <esp8266_TransmitCmd+0xd8>)
 80095f6:	f001 f98d 	bl	800a914 <puts>
		printf("\r\n(DBG:) Timeout\r\n");
 80095fa:	480f      	ldr	r0, [pc, #60]	; (8009638 <esp8266_TransmitCmd+0xdc>)
 80095fc:	f001 f98a 	bl	800a914 <puts>
		return _TIMEOUT;
 8009600:	2302      	movs	r3, #2
 8009602:	e003      	b.n	800960c <esp8266_TransmitCmd+0xb0>
	}
	printf("(DBG:) Succeed\r\n");
 8009604:	480d      	ldr	r0, [pc, #52]	; (800963c <esp8266_TransmitCmd+0xe0>)
 8009606:	f001 f985 	bl	800a914 <puts>
	return _SUCCEED;
 800960a:	2301      	movs	r3, #1
}
 800960c:	4618      	mov	r0, r3
 800960e:	3718      	adds	r7, #24
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	20000ef0 	.word	0x20000ef0
 8009618:	0800d8bc 	.word	0x0800d8bc
 800961c:	0800d8dc 	.word	0x0800d8dc
 8009620:	0800d8e0 	.word	0x0800d8e0
 8009624:	200016f1 	.word	0x200016f1
 8009628:	200016f0 	.word	0x200016f0
 800962c:	2000026c 	.word	0x2000026c
 8009630:	0800d8e8 	.word	0x0800d8e8
 8009634:	0800d904 	.word	0x0800d904
 8009638:	0800d91c 	.word	0x0800d91c
 800963c:	0800d930 	.word	0x0800d930

08009640 <esp8266_HardwareReset>:

WIFI_StateTypeDef esp8266_HardwareReset(uint32_t waitms) {
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
	int timeout = waitms;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	60fb      	str	r3, [r7, #12]
	WIFI_RST_Enable();
 800964c:	2200      	movs	r2, #0
 800964e:	2108      	movs	r1, #8
 8009650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009654:	f7fc fac2 	bl	8005bdc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8009658:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800965c:	f7fb fcd0 	bl	8005000 <HAL_Delay>
	WIFI_RST_Disable();
 8009660:	2201      	movs	r2, #1
 8009662:	2108      	movs	r1, #8
 8009664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009668:	f7fc fab8 	bl	8005bdc <HAL_GPIO_WritePin>
	while (timeout--) {
 800966c:	e01b      	b.n	80096a6 <esp8266_HardwareReset+0x66>
		if (UART_ESP32_RecvEndFlag == 1) {
 800966e:	4b18      	ldr	r3, [pc, #96]	; (80096d0 <esp8266_HardwareReset+0x90>)
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	b2db      	uxtb	r3, r3
 8009674:	2b01      	cmp	r3, #1
 8009676:	d113      	bne.n	80096a0 <esp8266_HardwareReset+0x60>

			printf("(DBG:) Hardware Reset OK!\r\n");
 8009678:	4816      	ldr	r0, [pc, #88]	; (80096d4 <esp8266_HardwareReset+0x94>)
 800967a:	f001 f94b 	bl	800a914 <puts>
			HAL_Delay(100);
 800967e:	2064      	movs	r0, #100	; 0x64
 8009680:	f7fb fcbe 	bl	8005000 <HAL_Delay>

			UART_ESP32_RxLen = 0;
 8009684:	4b14      	ldr	r3, [pc, #80]	; (80096d8 <esp8266_HardwareReset+0x98>)
 8009686:	2200      	movs	r2, #0
 8009688:	701a      	strb	r2, [r3, #0]
			UART_ESP32_RecvEndFlag = 0;
 800968a:	4b11      	ldr	r3, [pc, #68]	; (80096d0 <esp8266_HardwareReset+0x90>)
 800968c:	2200      	movs	r2, #0
 800968e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 8009690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009694:	4911      	ldr	r1, [pc, #68]	; (80096dc <esp8266_HardwareReset+0x9c>)
 8009696:	4812      	ldr	r0, [pc, #72]	; (80096e0 <esp8266_HardwareReset+0xa0>)
 8009698:	f7fe fb88 	bl	8007dac <HAL_UART_Receive_DMA>

			return _SUCCEED;
 800969c:	2301      	movs	r3, #1
 800969e:	e013      	b.n	80096c8 <esp8266_HardwareReset+0x88>
		}
		HAL_Delay(1);
 80096a0:	2001      	movs	r0, #1
 80096a2:	f7fb fcad 	bl	8005000 <HAL_Delay>
	while (timeout--) {
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	1e5a      	subs	r2, r3, #1
 80096aa:	60fa      	str	r2, [r7, #12]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1de      	bne.n	800966e <esp8266_HardwareReset+0x2e>
	}
	if (timeout <= 0) {
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	dc07      	bgt.n	80096c6 <esp8266_HardwareReset+0x86>
		printf("(DBG:) Finish waiting\r\n");
 80096b6:	480b      	ldr	r0, [pc, #44]	; (80096e4 <esp8266_HardwareReset+0xa4>)
 80096b8:	f001 f92c 	bl	800a914 <puts>
		printf("\r\n(DBG:) Timeout\r\n");
 80096bc:	480a      	ldr	r0, [pc, #40]	; (80096e8 <esp8266_HardwareReset+0xa8>)
 80096be:	f001 f929 	bl	800a914 <puts>
		return _TIMEOUT;
 80096c2:	2302      	movs	r3, #2
 80096c4:	e000      	b.n	80096c8 <esp8266_HardwareReset+0x88>
	}

	return _UNKNOWN_ERROR;
 80096c6:	23ff      	movs	r3, #255	; 0xff
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	200016f1 	.word	0x200016f1
 80096d4:	0800d940 	.word	0x0800d940
 80096d8:	200016f0 	.word	0x200016f0
 80096dc:	20000ef0 	.word	0x20000ef0
 80096e0:	2000026c 	.word	0x2000026c
 80096e4:	0800d904 	.word	0x0800d904
 80096e8:	0800d91c 	.word	0x0800d91c

080096ec <esp8266_ConnectAP>:

WIFI_StateTypeDef esp8266_ConnectAP() {
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
	uint16_t cmd_len = strlen(AP_SSID) + strlen(AP_PSWD) + 30;
 80096f2:	2333      	movs	r3, #51	; 0x33
 80096f4:	80fb      	strh	r3, [r7, #6]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 80096f6:	88fb      	ldrh	r3, [r7, #6]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f000 ff65 	bl	800a5c8 <malloc>
 80096fe:	4603      	mov	r3, r0
 8009700:	603b      	str	r3, [r7, #0]
	memset(cmd, 0, cmd_len);
 8009702:	88fb      	ldrh	r3, [r7, #6]
 8009704:	461a      	mov	r2, r3
 8009706:	2100      	movs	r1, #0
 8009708:	6838      	ldr	r0, [r7, #0]
 800970a:	f000 ff95 	bl	800a638 <memset>
	sprintf((char*) cmd, "AT+CWJAP=\"%s\",\"%s\"", AP_SSID, AP_PSWD);
 800970e:	4b0e      	ldr	r3, [pc, #56]	; (8009748 <esp8266_ConnectAP+0x5c>)
 8009710:	4a0e      	ldr	r2, [pc, #56]	; (800974c <esp8266_ConnectAP+0x60>)
 8009712:	490f      	ldr	r1, [pc, #60]	; (8009750 <esp8266_ConnectAP+0x64>)
 8009714:	6838      	ldr	r0, [r7, #0]
 8009716:	f001 f915 	bl	800a944 <siprintf>

	if (esp8266_TransmitCmd(cmd, (uint8_t*) "WIFI CONNECTED", ESP8266_MAX_TIMEOUT, WITH_NEWLINE) == _SUCCEED)
 800971a:	2301      	movs	r3, #1
 800971c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009720:	490c      	ldr	r1, [pc, #48]	; (8009754 <esp8266_ConnectAP+0x68>)
 8009722:	6838      	ldr	r0, [r7, #0]
 8009724:	f7ff ff1a 	bl	800955c <esp8266_TransmitCmd>
 8009728:	4603      	mov	r3, r0
 800972a:	2b01      	cmp	r3, #1
 800972c:	d103      	bne.n	8009736 <esp8266_ConnectAP+0x4a>
		wifi_state = _ONLINE;
 800972e:	4b0a      	ldr	r3, [pc, #40]	; (8009758 <esp8266_ConnectAP+0x6c>)
 8009730:	2205      	movs	r2, #5
 8009732:	701a      	strb	r2, [r3, #0]
 8009734:	e002      	b.n	800973c <esp8266_ConnectAP+0x50>
	else
		wifi_state = _OFFLINE;
 8009736:	4b08      	ldr	r3, [pc, #32]	; (8009758 <esp8266_ConnectAP+0x6c>)
 8009738:	2206      	movs	r2, #6
 800973a:	701a      	strb	r2, [r3, #0]

	return wifi_state;
 800973c:	4b06      	ldr	r3, [pc, #24]	; (8009758 <esp8266_ConnectAP+0x6c>)
 800973e:	781b      	ldrb	r3, [r3, #0]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	0800d95c 	.word	0x0800d95c
 800974c:	0800d968 	.word	0x0800d968
 8009750:	0800d978 	.word	0x0800d978
 8009754:	0800d98c 	.word	0x0800d98c
 8009758:	20000021 	.word	0x20000021

0800975c <esp8266_SetupIP>:
	return _SUCCEED;
}

// +BCH
WIFI_StateTypeDef esp8266_SetupIP()
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
	uint8_t retry_count = 0;
 8009762:	2300      	movs	r3, #0
 8009764:	71fb      	strb	r3, [r7, #7]

	/* Reset esp8266 */
	printf("(DBG:) Trying to reset esp8266\r\n");
 8009766:	48a8      	ldr	r0, [pc, #672]	; (8009a08 <esp8266_SetupIP+0x2ac>)
 8009768:	f001 f8d4 	bl	800a914 <puts>
	wifi_config_step++;
 800976c:	4ba7      	ldr	r3, [pc, #668]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	3301      	adds	r3, #1
 8009772:	b2da      	uxtb	r2, r3
 8009774:	4ba5      	ldr	r3, [pc, #660]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 8009776:	701a      	strb	r2, [r3, #0]
	while (esp8266_HardwareReset(500) != _SUCCEED) {
 8009778:	e019      	b.n	80097ae <esp8266_SetupIP+0x52>
		retry_count++;
 800977a:	79fb      	ldrb	r3, [r7, #7]
 800977c:	3301      	adds	r3, #1
 800977e:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8009780:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009784:	f7fb fc3c 	bl	8005000 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8009788:	79fb      	ldrb	r3, [r7, #7]
 800978a:	2b03      	cmp	r3, #3
 800978c:	d90f      	bls.n	80097ae <esp8266_SetupIP+0x52>
			printf("(DBG:) Reset failed\r\n");
 800978e:	48a0      	ldr	r0, [pc, #640]	; (8009a10 <esp8266_SetupIP+0x2b4>)
 8009790:	f001 f8c0 	bl	800a914 <puts>
			retry_count = 0;
 8009794:	2300      	movs	r3, #0
 8009796:	71fb      	strb	r3, [r7, #7]
			trans_state = _UNKNOWN_STATE;
 8009798:	4b9e      	ldr	r3, [pc, #632]	; (8009a14 <esp8266_SetupIP+0x2b8>)
 800979a:	22ee      	movs	r2, #238	; 0xee
 800979c:	701a      	strb	r2, [r3, #0]
			wifi_config_step--;
 800979e:	4b9b      	ldr	r3, [pc, #620]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	3b01      	subs	r3, #1
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	4b99      	ldr	r3, [pc, #612]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 80097a8:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 80097aa:	2300      	movs	r3, #0
 80097ac:	e1e1      	b.n	8009b72 <esp8266_SetupIP+0x416>
	while (esp8266_HardwareReset(500) != _SUCCEED) {
 80097ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80097b2:	f7ff ff45 	bl	8009640 <esp8266_HardwareReset>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d1de      	bne.n	800977a <esp8266_SetupIP+0x1e>
		}
	}

	HAL_Delay(2000);		// wait 2 seconds
 80097bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80097c0:	f7fb fc1e 	bl	8005000 <HAL_Delay>
	retry_count = 0;		// reset retry count
 80097c4:	2300      	movs	r3, #0
 80097c6:	71fb      	strb	r3, [r7, #7]

	/* Close echo */
	printf("(DBG:) Trying to close echo\r\n");
 80097c8:	4893      	ldr	r0, [pc, #588]	; (8009a18 <esp8266_SetupIP+0x2bc>)
 80097ca:	f001 f8a3 	bl	800a914 <puts>
	wifi_config_step++;
 80097ce:	4b8f      	ldr	r3, [pc, #572]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	3301      	adds	r3, #1
 80097d4:	b2da      	uxtb	r2, r3
 80097d6:	4b8d      	ldr	r3, [pc, #564]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 80097d8:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 80097da:	e016      	b.n	800980a <esp8266_SetupIP+0xae>
			!= _SUCCEED) {
		retry_count++;
 80097dc:	79fb      	ldrb	r3, [r7, #7]
 80097de:	3301      	adds	r3, #1
 80097e0:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 80097e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80097e6:	f7fb fc0b 	bl	8005000 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 80097ea:	79fb      	ldrb	r3, [r7, #7]
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	d90c      	bls.n	800980a <esp8266_SetupIP+0xae>
			printf("(DBG:) Close echo failed\r\n");
 80097f0:	488a      	ldr	r0, [pc, #552]	; (8009a1c <esp8266_SetupIP+0x2c0>)
 80097f2:	f001 f88f 	bl	800a914 <puts>
			retry_count = 0;
 80097f6:	2300      	movs	r3, #0
 80097f8:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 80097fa:	4b84      	ldr	r3, [pc, #528]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	3b01      	subs	r3, #1
 8009800:	b2da      	uxtb	r2, r3
 8009802:	4b82      	ldr	r3, [pc, #520]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 8009804:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8009806:	2300      	movs	r3, #0
 8009808:	e1b3      	b.n	8009b72 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 800980a:	2301      	movs	r3, #1
 800980c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009810:	4983      	ldr	r1, [pc, #524]	; (8009a20 <esp8266_SetupIP+0x2c4>)
 8009812:	4884      	ldr	r0, [pc, #528]	; (8009a24 <esp8266_SetupIP+0x2c8>)
 8009814:	f7ff fea2 	bl	800955c <esp8266_TransmitCmd>
 8009818:	4603      	mov	r3, r0
 800981a:	2b01      	cmp	r3, #1
 800981c:	d1de      	bne.n	80097dc <esp8266_SetupIP+0x80>
		}
	}

	HAL_Delay(100);
 800981e:	2064      	movs	r0, #100	; 0x64
 8009820:	f7fb fbee 	bl	8005000 <HAL_Delay>
	retry_count = 0;		// reset retry count
 8009824:	2300      	movs	r3, #0
 8009826:	71fb      	strb	r3, [r7, #7]

	/* Set wifi mode 0:AP 1:STA 2:AP+STA */
	printf("(DBG:) Trying to set Wifi mode\r\n");
 8009828:	487f      	ldr	r0, [pc, #508]	; (8009a28 <esp8266_SetupIP+0x2cc>)
 800982a:	f001 f873 	bl	800a914 <puts>
	wifi_config_step++;
 800982e:	4b77      	ldr	r3, [pc, #476]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	3301      	adds	r3, #1
 8009834:	b2da      	uxtb	r2, r3
 8009836:	4b75      	ldr	r3, [pc, #468]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 8009838:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE=1", OK_ACK, 500,
 800983a:	e016      	b.n	800986a <esp8266_SetupIP+0x10e>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 800983c:	79fb      	ldrb	r3, [r7, #7]
 800983e:	3301      	adds	r3, #1
 8009840:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8009842:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009846:	f7fb fbdb 	bl	8005000 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800984a:	79fb      	ldrb	r3, [r7, #7]
 800984c:	2b03      	cmp	r3, #3
 800984e:	d90c      	bls.n	800986a <esp8266_SetupIP+0x10e>
			printf("(DBG:) Set Wifi mode failed\r\n");
 8009850:	4876      	ldr	r0, [pc, #472]	; (8009a2c <esp8266_SetupIP+0x2d0>)
 8009852:	f001 f85f 	bl	800a914 <puts>
			retry_count = 0;
 8009856:	2300      	movs	r3, #0
 8009858:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800985a:	4b6c      	ldr	r3, [pc, #432]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	3b01      	subs	r3, #1
 8009860:	b2da      	uxtb	r2, r3
 8009862:	4b6a      	ldr	r3, [pc, #424]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 8009864:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8009866:	2300      	movs	r3, #0
 8009868:	e183      	b.n	8009b72 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE=1", OK_ACK, 500,
 800986a:	2301      	movs	r3, #1
 800986c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009870:	496b      	ldr	r1, [pc, #428]	; (8009a20 <esp8266_SetupIP+0x2c4>)
 8009872:	486f      	ldr	r0, [pc, #444]	; (8009a30 <esp8266_SetupIP+0x2d4>)
 8009874:	f7ff fe72 	bl	800955c <esp8266_TransmitCmd>
 8009878:	4603      	mov	r3, r0
 800987a:	2b01      	cmp	r3, #1
 800987c:	d1de      	bne.n	800983c <esp8266_SetupIP+0xe0>
		}
	}

	HAL_Delay(100);
 800987e:	2064      	movs	r0, #100	; 0x64
 8009880:	f7fb fbbe 	bl	8005000 <HAL_Delay>
	retry_count = 0;		// reset retry count
 8009884:	2300      	movs	r3, #0
 8009886:	71fb      	strb	r3, [r7, #7]

	/* Disable auto connect */
	printf("(DBG:) Trying to close auto connect\r\n");
 8009888:	486a      	ldr	r0, [pc, #424]	; (8009a34 <esp8266_SetupIP+0x2d8>)
 800988a:	f001 f843 	bl	800a914 <puts>
	wifi_config_step++;
 800988e:	4b5f      	ldr	r3, [pc, #380]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	3301      	adds	r3, #1
 8009894:	b2da      	uxtb	r2, r3
 8009896:	4b5d      	ldr	r3, [pc, #372]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 8009898:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 800989a:	e016      	b.n	80098ca <esp8266_SetupIP+0x16e>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 800989c:	79fb      	ldrb	r3, [r7, #7]
 800989e:	3301      	adds	r3, #1
 80098a0:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 80098a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80098a6:	f7fb fbab 	bl	8005000 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 80098aa:	79fb      	ldrb	r3, [r7, #7]
 80098ac:	2b03      	cmp	r3, #3
 80098ae:	d90c      	bls.n	80098ca <esp8266_SetupIP+0x16e>
			printf("(DBG:) Close auto connect failed\r\n");
 80098b0:	4861      	ldr	r0, [pc, #388]	; (8009a38 <esp8266_SetupIP+0x2dc>)
 80098b2:	f001 f82f 	bl	800a914 <puts>
			retry_count = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 80098ba:	4b54      	ldr	r3, [pc, #336]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	3b01      	subs	r3, #1
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	4b52      	ldr	r3, [pc, #328]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 80098c4:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 80098c6:	2300      	movs	r3, #0
 80098c8:	e153      	b.n	8009b72 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 80098ca:	2301      	movs	r3, #1
 80098cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80098d0:	4953      	ldr	r1, [pc, #332]	; (8009a20 <esp8266_SetupIP+0x2c4>)
 80098d2:	485a      	ldr	r0, [pc, #360]	; (8009a3c <esp8266_SetupIP+0x2e0>)
 80098d4:	f7ff fe42 	bl	800955c <esp8266_TransmitCmd>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d1de      	bne.n	800989c <esp8266_SetupIP+0x140>
		}
	}

	HAL_Delay(100);
 80098de:	2064      	movs	r0, #100	; 0x64
 80098e0:	f7fb fb8e 	bl	8005000 <HAL_Delay>
	retry_count = 0;		// reset retry count
 80098e4:	2300      	movs	r3, #0
 80098e6:	71fb      	strb	r3, [r7, #7]

	/* Connect to AP(Wifi) */
	printf("(DBG:) Trying to connect to AP\r\n");
 80098e8:	4855      	ldr	r0, [pc, #340]	; (8009a40 <esp8266_SetupIP+0x2e4>)
 80098ea:	f001 f813 	bl	800a914 <puts>
	wifi_config_step++;
 80098ee:	4b47      	ldr	r3, [pc, #284]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	3301      	adds	r3, #1
 80098f4:	b2da      	uxtb	r2, r3
 80098f6:	4b45      	ldr	r3, [pc, #276]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 80098f8:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectAP() != _ONLINE) {
 80098fa:	e016      	b.n	800992a <esp8266_SetupIP+0x1ce>
		retry_count++;
 80098fc:	79fb      	ldrb	r3, [r7, #7]
 80098fe:	3301      	adds	r3, #1
 8009900:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8009902:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009906:	f7fb fb7b 	bl	8005000 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800990a:	79fb      	ldrb	r3, [r7, #7]
 800990c:	2b03      	cmp	r3, #3
 800990e:	d90c      	bls.n	800992a <esp8266_SetupIP+0x1ce>
			printf("(DBG:) Connect to AP failed\r\n");
 8009910:	484c      	ldr	r0, [pc, #304]	; (8009a44 <esp8266_SetupIP+0x2e8>)
 8009912:	f000 ffff 	bl	800a914 <puts>
			retry_count = 0;
 8009916:	2300      	movs	r3, #0
 8009918:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800991a:	4b3c      	ldr	r3, [pc, #240]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	3b01      	subs	r3, #1
 8009920:	b2da      	uxtb	r2, r3
 8009922:	4b3a      	ldr	r3, [pc, #232]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 8009924:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8009926:	2300      	movs	r3, #0
 8009928:	e123      	b.n	8009b72 <esp8266_SetupIP+0x416>
	while (esp8266_ConnectAP() != _ONLINE) {
 800992a:	f7ff fedf 	bl	80096ec <esp8266_ConnectAP>
 800992e:	4603      	mov	r3, r0
 8009930:	2b05      	cmp	r3, #5
 8009932:	d1e3      	bne.n	80098fc <esp8266_SetupIP+0x1a0>
		}
	}

	HAL_Delay(100);
 8009934:	2064      	movs	r0, #100	; 0x64
 8009936:	f7fb fb63 	bl	8005000 <HAL_Delay>
	retry_count = 0;		// reset retry count
 800993a:	2300      	movs	r3, #0
 800993c:	71fb      	strb	r3, [r7, #7]

	/* Try to get AP info */
	if (wifi_state == _ONLINE) {
 800993e:	4b42      	ldr	r3, [pc, #264]	; (8009a48 <esp8266_SetupIP+0x2ec>)
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	2b05      	cmp	r3, #5
 8009944:	d123      	bne.n	800998e <esp8266_SetupIP+0x232>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP?", OK_ACK,
 8009946:	e018      	b.n	800997a <esp8266_SetupIP+0x21e>
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 8009948:	79fb      	ldrb	r3, [r7, #7]
 800994a:	3301      	adds	r3, #1
 800994c:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 800994e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009952:	f7fb fb55 	bl	8005000 <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 8009956:	79fb      	ldrb	r3, [r7, #7]
 8009958:	2b01      	cmp	r3, #1
 800995a:	d90e      	bls.n	800997a <esp8266_SetupIP+0x21e>
				printf("(DBG:) Get AP msg failed\r\n");
 800995c:	483b      	ldr	r0, [pc, #236]	; (8009a4c <esp8266_SetupIP+0x2f0>)
 800995e:	f000 ffd9 	bl	800a914 <puts>
				printf("(DBG:) Connect server process will not be terminated");
 8009962:	483b      	ldr	r0, [pc, #236]	; (8009a50 <esp8266_SetupIP+0x2f4>)
 8009964:	f000 ff50 	bl	800a808 <iprintf>
				retry_count = 0;
 8009968:	2300      	movs	r3, #0
 800996a:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 800996c:	4b27      	ldr	r3, [pc, #156]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	3b01      	subs	r3, #1
 8009972:	b2da      	uxtb	r2, r3
 8009974:	4b25      	ldr	r3, [pc, #148]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 8009976:	701a      	strb	r2, [r3, #0]
				break;
 8009978:	e009      	b.n	800998e <esp8266_SetupIP+0x232>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP?", OK_ACK,
 800997a:	2301      	movs	r3, #1
 800997c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009980:	4927      	ldr	r1, [pc, #156]	; (8009a20 <esp8266_SetupIP+0x2c4>)
 8009982:	4834      	ldr	r0, [pc, #208]	; (8009a54 <esp8266_SetupIP+0x2f8>)
 8009984:	f7ff fdea 	bl	800955c <esp8266_TransmitCmd>
 8009988:	4603      	mov	r3, r0
 800998a:	2b01      	cmp	r3, #1
 800998c:	d1dc      	bne.n	8009948 <esp8266_SetupIP+0x1ec>
			}
		}
	}

	HAL_Delay(100);
 800998e:	2064      	movs	r0, #100	; 0x64
 8009990:	f7fb fb36 	bl	8005000 <HAL_Delay>
	retry_count = 0;		// reset retry count
 8009994:	2300      	movs	r3, #0
 8009996:	71fb      	strb	r3, [r7, #7]

	/* Try to get IP info */
	if (wifi_state == _ONLINE) {
 8009998:	4b2b      	ldr	r3, [pc, #172]	; (8009a48 <esp8266_SetupIP+0x2ec>)
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	2b05      	cmp	r3, #5
 800999e:	d123      	bne.n	80099e8 <esp8266_SetupIP+0x28c>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSTA?", OK_ACK,
 80099a0:	e018      	b.n	80099d4 <esp8266_SetupIP+0x278>
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 80099a2:	79fb      	ldrb	r3, [r7, #7]
 80099a4:	3301      	adds	r3, #1
 80099a6:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 80099a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80099ac:	f7fb fb28 	bl	8005000 <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 80099b0:	79fb      	ldrb	r3, [r7, #7]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d90e      	bls.n	80099d4 <esp8266_SetupIP+0x278>
				printf("(DBG:) Get IP info failed\r\n");
 80099b6:	4828      	ldr	r0, [pc, #160]	; (8009a58 <esp8266_SetupIP+0x2fc>)
 80099b8:	f000 ffac 	bl	800a914 <puts>
				printf("(DBG:) Connect server process will not be terminated");
 80099bc:	4824      	ldr	r0, [pc, #144]	; (8009a50 <esp8266_SetupIP+0x2f4>)
 80099be:	f000 ff23 	bl	800a808 <iprintf>
				retry_count = 0;
 80099c2:	2300      	movs	r3, #0
 80099c4:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 80099c6:	4b11      	ldr	r3, [pc, #68]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	3b01      	subs	r3, #1
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	4b0f      	ldr	r3, [pc, #60]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 80099d0:	701a      	strb	r2, [r3, #0]
				break;
 80099d2:	e009      	b.n	80099e8 <esp8266_SetupIP+0x28c>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSTA?", OK_ACK,
 80099d4:	2301      	movs	r3, #1
 80099d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099da:	4911      	ldr	r1, [pc, #68]	; (8009a20 <esp8266_SetupIP+0x2c4>)
 80099dc:	481f      	ldr	r0, [pc, #124]	; (8009a5c <esp8266_SetupIP+0x300>)
 80099de:	f7ff fdbd 	bl	800955c <esp8266_TransmitCmd>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d1dc      	bne.n	80099a2 <esp8266_SetupIP+0x246>
			}
		}
	}

	HAL_Delay(100);
 80099e8:	2064      	movs	r0, #100	; 0x64
 80099ea:	f7fb fb09 	bl	8005000 <HAL_Delay>
	retry_count = 0;		// reset retry count
 80099ee:	2300      	movs	r3, #0
 80099f0:	71fb      	strb	r3, [r7, #7]

	/* Set DHCP */
	printf("(DBG:) Trying to set DHCP mode\r\n");
 80099f2:	481b      	ldr	r0, [pc, #108]	; (8009a60 <esp8266_SetupIP+0x304>)
 80099f4:	f000 ff8e 	bl	800a914 <puts>
	wifi_config_step++;
 80099f8:	4b04      	ldr	r3, [pc, #16]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	3301      	adds	r3, #1
 80099fe:	b2da      	uxtb	r2, r3
 8009a00:	4b02      	ldr	r3, [pc, #8]	; (8009a0c <esp8266_SetupIP+0x2b0>)
 8009a02:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP=1,1", OK_ACK, 1000,
 8009a04:	e045      	b.n	8009a92 <esp8266_SetupIP+0x336>
 8009a06:	bf00      	nop
 8009a08:	0800d9dc 	.word	0x0800d9dc
 8009a0c:	200006ec 	.word	0x200006ec
 8009a10:	0800d9fc 	.word	0x0800d9fc
 8009a14:	20000022 	.word	0x20000022
 8009a18:	0800da48 	.word	0x0800da48
 8009a1c:	0800da68 	.word	0x0800da68
 8009a20:	0800da84 	.word	0x0800da84
 8009a24:	0800da88 	.word	0x0800da88
 8009a28:	0800da90 	.word	0x0800da90
 8009a2c:	0800dab0 	.word	0x0800dab0
 8009a30:	0800dad0 	.word	0x0800dad0
 8009a34:	0800dadc 	.word	0x0800dadc
 8009a38:	0800db04 	.word	0x0800db04
 8009a3c:	0800db28 	.word	0x0800db28
 8009a40:	0800db38 	.word	0x0800db38
 8009a44:	0800db58 	.word	0x0800db58
 8009a48:	20000021 	.word	0x20000021
 8009a4c:	0800db78 	.word	0x0800db78
 8009a50:	0800db94 	.word	0x0800db94
 8009a54:	0800dbcc 	.word	0x0800dbcc
 8009a58:	0800dbd8 	.word	0x0800dbd8
 8009a5c:	0800dbf4 	.word	0x0800dbf4
 8009a60:	0800dc00 	.word	0x0800dc00
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 8009a64:	79fb      	ldrb	r3, [r7, #7]
 8009a66:	3301      	adds	r3, #1
 8009a68:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8009a6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009a6e:	f7fb fac7 	bl	8005000 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8009a72:	79fb      	ldrb	r3, [r7, #7]
 8009a74:	2b03      	cmp	r3, #3
 8009a76:	d90c      	bls.n	8009a92 <esp8266_SetupIP+0x336>
			printf("(DBG:) Set DHCP model failed\r\n");
 8009a78:	4840      	ldr	r0, [pc, #256]	; (8009b7c <esp8266_SetupIP+0x420>)
 8009a7a:	f000 ff4b 	bl	800a914 <puts>
			retry_count = 0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8009a82:	4b3f      	ldr	r3, [pc, #252]	; (8009b80 <esp8266_SetupIP+0x424>)
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	3b01      	subs	r3, #1
 8009a88:	b2da      	uxtb	r2, r3
 8009a8a:	4b3d      	ldr	r3, [pc, #244]	; (8009b80 <esp8266_SetupIP+0x424>)
 8009a8c:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	e06f      	b.n	8009b72 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP=1,1", OK_ACK, 1000,
 8009a92:	2301      	movs	r3, #1
 8009a94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009a98:	493a      	ldr	r1, [pc, #232]	; (8009b84 <esp8266_SetupIP+0x428>)
 8009a9a:	483b      	ldr	r0, [pc, #236]	; (8009b88 <esp8266_SetupIP+0x42c>)
 8009a9c:	f7ff fd5e 	bl	800955c <esp8266_TransmitCmd>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d1de      	bne.n	8009a64 <esp8266_SetupIP+0x308>
		}
	}

	HAL_Delay(100);
 8009aa6:	2064      	movs	r0, #100	; 0x64
 8009aa8:	f7fb faaa 	bl	8005000 <HAL_Delay>
	retry_count = 0;
 8009aac:	2300      	movs	r3, #0
 8009aae:	71fb      	strb	r3, [r7, #7]

	/* Set single connection */
	printf("(DBG:) Trying to set single connection\r\n");
 8009ab0:	4836      	ldr	r0, [pc, #216]	; (8009b8c <esp8266_SetupIP+0x430>)
 8009ab2:	f000 ff2f 	bl	800a914 <puts>
	wifi_config_step++;
 8009ab6:	4b32      	ldr	r3, [pc, #200]	; (8009b80 <esp8266_SetupIP+0x424>)
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	3301      	adds	r3, #1
 8009abc:	b2da      	uxtb	r2, r3
 8009abe:	4b30      	ldr	r3, [pc, #192]	; (8009b80 <esp8266_SetupIP+0x424>)
 8009ac0:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 8009ac2:	e016      	b.n	8009af2 <esp8266_SetupIP+0x396>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 8009ac4:	79fb      	ldrb	r3, [r7, #7]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8009aca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009ace:	f7fb fa97 	bl	8005000 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8009ad2:	79fb      	ldrb	r3, [r7, #7]
 8009ad4:	2b03      	cmp	r3, #3
 8009ad6:	d90c      	bls.n	8009af2 <esp8266_SetupIP+0x396>
			printf("(DBG:) Set single connection model failed\r\n");
 8009ad8:	482d      	ldr	r0, [pc, #180]	; (8009b90 <esp8266_SetupIP+0x434>)
 8009ada:	f000 ff1b 	bl	800a914 <puts>
			retry_count = 0;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8009ae2:	4b27      	ldr	r3, [pc, #156]	; (8009b80 <esp8266_SetupIP+0x424>)
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	b2da      	uxtb	r2, r3
 8009aea:	4b25      	ldr	r3, [pc, #148]	; (8009b80 <esp8266_SetupIP+0x424>)
 8009aec:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8009aee:	2300      	movs	r3, #0
 8009af0:	e03f      	b.n	8009b72 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 8009af2:	2301      	movs	r3, #1
 8009af4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009af8:	4922      	ldr	r1, [pc, #136]	; (8009b84 <esp8266_SetupIP+0x428>)
 8009afa:	4826      	ldr	r0, [pc, #152]	; (8009b94 <esp8266_SetupIP+0x438>)
 8009afc:	f7ff fd2e 	bl	800955c <esp8266_TransmitCmd>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d1de      	bne.n	8009ac4 <esp8266_SetupIP+0x368>
		}
	}

	HAL_Delay(100);
 8009b06:	2064      	movs	r0, #100	; 0x64
 8009b08:	f7fb fa7a 	bl	8005000 <HAL_Delay>
	retry_count = 0;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	71fb      	strb	r3, [r7, #7]

	/* Set transparent transmission */
	printf("(DBG:) Trying to set transparent transmission mode\r\n");
 8009b10:	4821      	ldr	r0, [pc, #132]	; (8009b98 <esp8266_SetupIP+0x43c>)
 8009b12:	f000 feff 	bl	800a914 <puts>
	wifi_config_step++;
 8009b16:	4b1a      	ldr	r3, [pc, #104]	; (8009b80 <esp8266_SetupIP+0x424>)
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	b2da      	uxtb	r2, r3
 8009b1e:	4b18      	ldr	r3, [pc, #96]	; (8009b80 <esp8266_SetupIP+0x424>)
 8009b20:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 8009b22:	e016      	b.n	8009b52 <esp8266_SetupIP+0x3f6>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 8009b24:	79fb      	ldrb	r3, [r7, #7]
 8009b26:	3301      	adds	r3, #1
 8009b28:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8009b2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009b2e:	f7fb fa67 	bl	8005000 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8009b32:	79fb      	ldrb	r3, [r7, #7]
 8009b34:	2b03      	cmp	r3, #3
 8009b36:	d90c      	bls.n	8009b52 <esp8266_SetupIP+0x3f6>
			printf("(DBG:) Set transparent transmission mode failed\r\n");
 8009b38:	4818      	ldr	r0, [pc, #96]	; (8009b9c <esp8266_SetupIP+0x440>)
 8009b3a:	f000 feeb 	bl	800a914 <puts>
			retry_count = 0;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8009b42:	4b0f      	ldr	r3, [pc, #60]	; (8009b80 <esp8266_SetupIP+0x424>)
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	3b01      	subs	r3, #1
 8009b48:	b2da      	uxtb	r2, r3
 8009b4a:	4b0d      	ldr	r3, [pc, #52]	; (8009b80 <esp8266_SetupIP+0x424>)
 8009b4c:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	e00f      	b.n	8009b72 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 8009b52:	2301      	movs	r3, #1
 8009b54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009b58:	490a      	ldr	r1, [pc, #40]	; (8009b84 <esp8266_SetupIP+0x428>)
 8009b5a:	4811      	ldr	r0, [pc, #68]	; (8009ba0 <esp8266_SetupIP+0x444>)
 8009b5c:	f7ff fcfe 	bl	800955c <esp8266_TransmitCmd>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d1de      	bne.n	8009b24 <esp8266_SetupIP+0x3c8>
		}
	}

	HAL_Delay(100);
 8009b66:	2064      	movs	r0, #100	; 0x64
 8009b68:	f7fb fa4a 	bl	8005000 <HAL_Delay>
	retry_count = 0;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	71fb      	strb	r3, [r7, #7]
	return _SUCCEED;
 8009b70:	2301      	movs	r3, #1

}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	0800dc20 	.word	0x0800dc20
 8009b80:	200006ec 	.word	0x200006ec
 8009b84:	0800da84 	.word	0x0800da84
 8009b88:	0800dc40 	.word	0x0800dc40
 8009b8c:	0800dc50 	.word	0x0800dc50
 8009b90:	0800dc78 	.word	0x0800dc78
 8009b94:	0800dca4 	.word	0x0800dca4
 8009b98:	0800dcb0 	.word	0x0800dcb0
 8009b9c:	0800dce4 	.word	0x0800dce4
 8009ba0:	0800dd18 	.word	0x0800dd18

08009ba4 <esp8266_ConfigAccessBroker>:

static MQTT_StateTypeDef esp8266_ConfigAccessBroker()
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b086      	sub	sp, #24
 8009ba8:	af02      	add	r7, sp, #8
	int retry_count = 0;
 8009baa:	2300      	movs	r3, #0
 8009bac:	60fb      	str	r3, [r7, #12]
	uint16_t cmd_len = strlen(MQTT_CLIENTID) + strlen(MQTT_USERNAME) + strlen(MQTT_PASSWORD) + 40;
 8009bae:	232f      	movs	r3, #47	; 0x2f
 8009bb0:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 8009bb2:	897b      	ldrh	r3, [r7, #10]
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f000 fd07 	bl	800a5c8 <malloc>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 8009bbe:	897b      	ldrh	r3, [r7, #10]
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fd37 	bl	800a638 <memset>
	sprintf((char*) cmd, "AT+MQTTUSERCFG=0,1,\"%s\",\"%s\",\"%s\",0,0,\"\"", MQTT_CLIENTID, MQTT_USERNAME, MQTT_PASSWORD);
 8009bca:	4b19      	ldr	r3, [pc, #100]	; (8009c30 <esp8266_ConfigAccessBroker+0x8c>)
 8009bcc:	9300      	str	r3, [sp, #0]
 8009bce:	4b18      	ldr	r3, [pc, #96]	; (8009c30 <esp8266_ConfigAccessBroker+0x8c>)
 8009bd0:	4a18      	ldr	r2, [pc, #96]	; (8009c34 <esp8266_ConfigAccessBroker+0x90>)
 8009bd2:	4919      	ldr	r1, [pc, #100]	; (8009c38 <esp8266_ConfigAccessBroker+0x94>)
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 feb5 	bl	800a944 <siprintf>

	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 8009bda:	e011      	b.n	8009c00 <esp8266_ConfigAccessBroker+0x5c>
	{
		retry_count++;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	3301      	adds	r3, #1
 8009be0:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 8009be2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009be6:	f7fb fa0b 	bl	8005000 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2b03      	cmp	r3, #3
 8009bee:	dd07      	ble.n	8009c00 <esp8266_ConfigAccessBroker+0x5c>
			printf("(DBG:) esp8266_ConfigAccessBroker() failed\r\n");
 8009bf0:	4812      	ldr	r0, [pc, #72]	; (8009c3c <esp8266_ConfigAccessBroker+0x98>)
 8009bf2:	f000 fe8f 	bl	800a914 <puts>
			retry_count = 0;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	60fb      	str	r3, [r7, #12]
			mqtt_state = _CONFIG_ERROR_MQTT;
 8009bfa:	4b11      	ldr	r3, [pc, #68]	; (8009c40 <esp8266_ConfigAccessBroker+0x9c>)
 8009bfc:	2204      	movs	r2, #4
 8009bfe:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 8009c00:	2301      	movs	r3, #1
 8009c02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c06:	490f      	ldr	r1, [pc, #60]	; (8009c44 <esp8266_ConfigAccessBroker+0xa0>)
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f7ff fca7 	bl	800955c <esp8266_TransmitCmd>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d1e3      	bne.n	8009bdc <esp8266_ConfigAccessBroker+0x38>
		}
	}

	mqtt_state = _CONFIG_OK_MQTT;
 8009c14:	4b0a      	ldr	r3, [pc, #40]	; (8009c40 <esp8266_ConfigAccessBroker+0x9c>)
 8009c16:	2205      	movs	r2, #5
 8009c18:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8009c1a:	2064      	movs	r0, #100	; 0x64
 8009c1c:	f7fb f9f0 	bl	8005000 <HAL_Delay>
	retry_count = 0;
 8009c20:	2300      	movs	r3, #0
 8009c22:	60fb      	str	r3, [r7, #12]

	return mqtt_state;
 8009c24:	4b06      	ldr	r3, [pc, #24]	; (8009c40 <esp8266_ConfigAccessBroker+0x9c>)
 8009c26:	781b      	ldrb	r3, [r3, #0]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	0800dda4 	.word	0x0800dda4
 8009c34:	0800dda8 	.word	0x0800dda8
 8009c38:	0800ddb0 	.word	0x0800ddb0
 8009c3c:	0800dddc 	.word	0x0800dddc
 8009c40:	20000023 	.word	0x20000023
 8009c44:	0800da84 	.word	0x0800da84

08009c48 <esp8266_ConnectBroker>:

	return mqtt_state;
}

static MQTT_StateTypeDef esp8266_ConnectBroker()
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
	int retry_count = 0;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	60fb      	str	r3, [r7, #12]
	uint16_t cmd_len = strlen(IpServer) + strlen(ServerPort) + 25;
 8009c52:	232e      	movs	r3, #46	; 0x2e
 8009c54:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 8009c56:	897b      	ldrh	r3, [r7, #10]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f000 fcb5 	bl	800a5c8 <malloc>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 8009c62:	897b      	ldrh	r3, [r7, #10]
 8009c64:	461a      	mov	r2, r3
 8009c66:	2100      	movs	r1, #0
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fce5 	bl	800a638 <memset>
	sprintf((char*) cmd, "AT+MQTTCONN=0,\"%s\",%s,0", IpServer, ServerPort);
 8009c6e:	4b16      	ldr	r3, [pc, #88]	; (8009cc8 <esp8266_ConnectBroker+0x80>)
 8009c70:	4a16      	ldr	r2, [pc, #88]	; (8009ccc <esp8266_ConnectBroker+0x84>)
 8009c72:	4917      	ldr	r1, [pc, #92]	; (8009cd0 <esp8266_ConnectBroker+0x88>)
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fe65 	bl	800a944 <siprintf>

	//if (esp8266_TransmitCmd(cmd, (uint8_t*)"\r\nready\r\n", ESP8266_MAX_TIMEOUT, WITH_NEWLINE) == _SUCCEED)
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 8009c7a:	e011      	b.n	8009ca0 <esp8266_ConnectBroker+0x58>
	{
		retry_count++;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 8009c82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009c86:	f7fb f9bb 	bl	8005000 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2b03      	cmp	r3, #3
 8009c8e:	dd07      	ble.n	8009ca0 <esp8266_ConnectBroker+0x58>
			printf("(DBG:) esp8266_ConnectBroker() failed\r\n");
 8009c90:	4810      	ldr	r0, [pc, #64]	; (8009cd4 <esp8266_ConnectBroker+0x8c>)
 8009c92:	f000 fe3f 	bl	800a914 <puts>
			retry_count = 0;
 8009c96:	2300      	movs	r3, #0
 8009c98:	60fb      	str	r3, [r7, #12]
			mqtt_state = _UNCONNECTED_MQTT;
 8009c9a:	4b0f      	ldr	r3, [pc, #60]	; (8009cd8 <esp8266_ConnectBroker+0x90>)
 8009c9c:	2206      	movs	r2, #6
 8009c9e:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ca6:	490d      	ldr	r1, [pc, #52]	; (8009cdc <esp8266_ConnectBroker+0x94>)
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f7ff fc57 	bl	800955c <esp8266_TransmitCmd>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d1e3      	bne.n	8009c7c <esp8266_ConnectBroker+0x34>
		}
	}

	mqtt_state = _CONNECTED_MQTT;
 8009cb4:	4b08      	ldr	r3, [pc, #32]	; (8009cd8 <esp8266_ConnectBroker+0x90>)
 8009cb6:	2207      	movs	r2, #7
 8009cb8:	701a      	strb	r2, [r3, #0]

	return mqtt_state;
 8009cba:	4b07      	ldr	r3, [pc, #28]	; (8009cd8 <esp8266_ConnectBroker+0x90>)
 8009cbc:	781b      	ldrb	r3, [r3, #0]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	0800d99c 	.word	0x0800d99c
 8009ccc:	0800d9a4 	.word	0x0800d9a4
 8009cd0:	0800de30 	.word	0x0800de30
 8009cd4:	0800de48 	.word	0x0800de48
 8009cd8:	20000023 	.word	0x20000023
 8009cdc:	0800da84 	.word	0x0800da84

08009ce0 <esp8266_SetupConnect_BrokerMQTT>:

MQTT_StateTypeDef esp8266_SetupConnect_BrokerMQTT()
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
	uint8_t retry_count = 0;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	71fb      	strb	r3, [r7, #7]

	/* MQTT broker configuration esp8266 */
	printf("(DBG:) Trying to configure MQTT access broker esp8266\r\n");
 8009cea:	482d      	ldr	r0, [pc, #180]	; (8009da0 <esp8266_SetupConnect_BrokerMQTT+0xc0>)
 8009cec:	f000 fe12 	bl	800a914 <puts>
	mqtt_config_step++;
 8009cf0:	4b2c      	ldr	r3, [pc, #176]	; (8009da4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	4b2a      	ldr	r3, [pc, #168]	; (8009da4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 8009cfa:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConfigAccessBroker() != _CONFIG_OK_MQTT) {
 8009cfc:	e016      	b.n	8009d2c <esp8266_SetupConnect_BrokerMQTT+0x4c>
		retry_count++;
 8009cfe:	79fb      	ldrb	r3, [r7, #7]
 8009d00:	3301      	adds	r3, #1
 8009d02:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(500);
 8009d04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009d08:	f7fb f97a 	bl	8005000 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8009d0c:	79fb      	ldrb	r3, [r7, #7]
 8009d0e:	2b03      	cmp	r3, #3
 8009d10:	d90c      	bls.n	8009d2c <esp8266_SetupConnect_BrokerMQTT+0x4c>
			printf("(DBG:) Configure MQTT access broker failed\r\n");
 8009d12:	4825      	ldr	r0, [pc, #148]	; (8009da8 <esp8266_SetupConnect_BrokerMQTT+0xc8>)
 8009d14:	f000 fdfe 	bl	800a914 <puts>
			retry_count = 0;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	71fb      	strb	r3, [r7, #7]
			mqtt_config_step--;
 8009d1c:	4b21      	ldr	r3, [pc, #132]	; (8009da4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	3b01      	subs	r3, #1
 8009d22:	b2da      	uxtb	r2, r3
 8009d24:	4b1f      	ldr	r3, [pc, #124]	; (8009da4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 8009d26:	701a      	strb	r2, [r3, #0]
			return _FAILED_MQTT;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	e035      	b.n	8009d98 <esp8266_SetupConnect_BrokerMQTT+0xb8>
	while (esp8266_ConfigAccessBroker() != _CONFIG_OK_MQTT) {
 8009d2c:	f7ff ff3a 	bl	8009ba4 <esp8266_ConfigAccessBroker>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b05      	cmp	r3, #5
 8009d34:	d1e3      	bne.n	8009cfe <esp8266_SetupConnect_BrokerMQTT+0x1e>
		}
	}

	HAL_Delay(100);
 8009d36:	2064      	movs	r0, #100	; 0x64
 8009d38:	f7fb f962 	bl	8005000 <HAL_Delay>
	retry_count = 0;		// reset retry count
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	71fb      	strb	r3, [r7, #7]

	/* MQTT broker connection esp8266 */
	printf("(DBG:) Trying to connect to MQTT broker esp8266\r\n");
 8009d40:	481a      	ldr	r0, [pc, #104]	; (8009dac <esp8266_SetupConnect_BrokerMQTT+0xcc>)
 8009d42:	f000 fde7 	bl	800a914 <puts>
	mqtt_config_step++;
 8009d46:	4b17      	ldr	r3, [pc, #92]	; (8009da4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	b2da      	uxtb	r2, r3
 8009d4e:	4b15      	ldr	r3, [pc, #84]	; (8009da4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 8009d50:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectBroker() < _CONNECTED_MQTT) {
 8009d52:	e016      	b.n	8009d82 <esp8266_SetupConnect_BrokerMQTT+0xa2>
		retry_count++;
 8009d54:	79fb      	ldrb	r3, [r7, #7]
 8009d56:	3301      	adds	r3, #1
 8009d58:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(500);
 8009d5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009d5e:	f7fb f94f 	bl	8005000 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8009d62:	79fb      	ldrb	r3, [r7, #7]
 8009d64:	2b03      	cmp	r3, #3
 8009d66:	d90c      	bls.n	8009d82 <esp8266_SetupConnect_BrokerMQTT+0xa2>
			printf("(DBG:) connection MQTT broker failed\r\n");
 8009d68:	4811      	ldr	r0, [pc, #68]	; (8009db0 <esp8266_SetupConnect_BrokerMQTT+0xd0>)
 8009d6a:	f000 fdd3 	bl	800a914 <puts>
			retry_count = 0;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	71fb      	strb	r3, [r7, #7]
			mqtt_config_step--;
 8009d72:	4b0c      	ldr	r3, [pc, #48]	; (8009da4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	3b01      	subs	r3, #1
 8009d78:	b2da      	uxtb	r2, r3
 8009d7a:	4b0a      	ldr	r3, [pc, #40]	; (8009da4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 8009d7c:	701a      	strb	r2, [r3, #0]
			return _FAILED_MQTT;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	e00a      	b.n	8009d98 <esp8266_SetupConnect_BrokerMQTT+0xb8>
	while (esp8266_ConnectBroker() < _CONNECTED_MQTT) {
 8009d82:	f7ff ff61 	bl	8009c48 <esp8266_ConnectBroker>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b06      	cmp	r3, #6
 8009d8a:	d9e3      	bls.n	8009d54 <esp8266_SetupConnect_BrokerMQTT+0x74>
		}
	}

	HAL_Delay(100);
 8009d8c:	2064      	movs	r0, #100	; 0x64
 8009d8e:	f7fb f937 	bl	8005000 <HAL_Delay>
	retry_count = 0;		// reset retry count
 8009d92:	2300      	movs	r3, #0
 8009d94:	71fb      	strb	r3, [r7, #7]
	return _SUCCEED_MQTT;
 8009d96:	2301      	movs	r3, #1
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	0800de70 	.word	0x0800de70
 8009da4:	200006ed 	.word	0x200006ed
 8009da8:	0800dea8 	.word	0x0800dea8
 8009dac:	0800ded4 	.word	0x0800ded4
 8009db0:	0800df08 	.word	0x0800df08

08009db4 <esp8266_Subscribe_Temp_BrokerMQTT>:

MQTT_StateTypeDef esp8266_Subscribe_Temp_BrokerMQTT()
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
	int retry_count = 0;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	60fb      	str	r3, [r7, #12]
	if(mqtt_state < _CONNECTED_MQTT)
 8009dbe:	4b22      	ldr	r3, [pc, #136]	; (8009e48 <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	2b06      	cmp	r3, #6
 8009dc4:	d801      	bhi.n	8009dca <esp8266_Subscribe_Temp_BrokerMQTT+0x16>
		return _FAILED_MQTT;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	e039      	b.n	8009e3e <esp8266_Subscribe_Temp_BrokerMQTT+0x8a>

	uint16_t cmd_len = 40;
 8009dca:	2328      	movs	r3, #40	; 0x28
 8009dcc:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 8009dce:	897b      	ldrh	r3, [r7, #10]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f000 fbf9 	bl	800a5c8 <malloc>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 8009dda:	897b      	ldrh	r3, [r7, #10]
 8009ddc:	461a      	mov	r2, r3
 8009dde:	2100      	movs	r1, #0
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fc29 	bl	800a638 <memset>
	sprintf((char*) cmd, "AT+MQTTSUB=0,\"%s/getTemp\",1", MQTT_CLIENTID);
 8009de6:	4a19      	ldr	r2, [pc, #100]	; (8009e4c <esp8266_Subscribe_Temp_BrokerMQTT+0x98>)
 8009de8:	4919      	ldr	r1, [pc, #100]	; (8009e50 <esp8266_Subscribe_Temp_BrokerMQTT+0x9c>)
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 fdaa 	bl	800a944 <siprintf>

	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 8009df0:	e011      	b.n	8009e16 <esp8266_Subscribe_Temp_BrokerMQTT+0x62>
	{
		retry_count++;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	3301      	adds	r3, #1
 8009df6:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 8009df8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009dfc:	f7fb f900 	bl	8005000 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2b03      	cmp	r3, #3
 8009e04:	dd07      	ble.n	8009e16 <esp8266_Subscribe_Temp_BrokerMQTT+0x62>
			printf("(DBG:) esp8266_Subscribe_Temp_BrokerMQTT() failed\r\n");
 8009e06:	4813      	ldr	r0, [pc, #76]	; (8009e54 <esp8266_Subscribe_Temp_BrokerMQTT+0xa0>)
 8009e08:	f000 fd84 	bl	800a914 <puts>
			retry_count = 0;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	60fb      	str	r3, [r7, #12]
			mqtt_state = _FAILED_MQTT;
 8009e10:	4b0d      	ldr	r3, [pc, #52]	; (8009e48 <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	701a      	strb	r2, [r3, #0]
	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 8009e16:	2301      	movs	r3, #1
 8009e18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e1c:	490e      	ldr	r1, [pc, #56]	; (8009e58 <esp8266_Subscribe_Temp_BrokerMQTT+0xa4>)
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7ff fb9c 	bl	800955c <esp8266_TransmitCmd>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d1e3      	bne.n	8009df2 <esp8266_Subscribe_Temp_BrokerMQTT+0x3e>
		}
	}
	HAL_Delay(100);
 8009e2a:	2064      	movs	r0, #100	; 0x64
 8009e2c:	f7fb f8e8 	bl	8005000 <HAL_Delay>
	retry_count = 0;
 8009e30:	2300      	movs	r3, #0
 8009e32:	60fb      	str	r3, [r7, #12]
	mqtt_state = _SUBSCRIBED_TEMP_MQTT;
 8009e34:	4b04      	ldr	r3, [pc, #16]	; (8009e48 <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 8009e36:	2208      	movs	r2, #8
 8009e38:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 8009e3a:	4b03      	ldr	r3, [pc, #12]	; (8009e48 <esp8266_Subscribe_Temp_BrokerMQTT+0x94>)
 8009e3c:	781b      	ldrb	r3, [r3, #0]
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	20000023 	.word	0x20000023
 8009e4c:	0800dda8 	.word	0x0800dda8
 8009e50:	0800df30 	.word	0x0800df30
 8009e54:	0800df4c 	.word	0x0800df4c
 8009e58:	0800da84 	.word	0x0800da84

08009e5c <esp8266_Subscribe_ToF_BrokerMQTT>:

MQTT_StateTypeDef esp8266_Subscribe_ToF_BrokerMQTT()
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
	int retry_count = 0;
 8009e62:	2300      	movs	r3, #0
 8009e64:	60fb      	str	r3, [r7, #12]
	if(mqtt_state < _CONNECTED_MQTT)
 8009e66:	4b22      	ldr	r3, [pc, #136]	; (8009ef0 <esp8266_Subscribe_ToF_BrokerMQTT+0x94>)
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	2b06      	cmp	r3, #6
 8009e6c:	d801      	bhi.n	8009e72 <esp8266_Subscribe_ToF_BrokerMQTT+0x16>
		return _FAILED_MQTT;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	e039      	b.n	8009ee6 <esp8266_Subscribe_ToF_BrokerMQTT+0x8a>

	uint16_t cmd_len = 40;
 8009e72:	2328      	movs	r3, #40	; 0x28
 8009e74:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 8009e76:	897b      	ldrh	r3, [r7, #10]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f000 fba5 	bl	800a5c8 <malloc>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 8009e82:	897b      	ldrh	r3, [r7, #10]
 8009e84:	461a      	mov	r2, r3
 8009e86:	2100      	movs	r1, #0
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fbd5 	bl	800a638 <memset>
	sprintf((char*) cmd, "AT+MQTTSUB=0,\"%s/getTof\",1", MQTT_CLIENTID);
 8009e8e:	4a19      	ldr	r2, [pc, #100]	; (8009ef4 <esp8266_Subscribe_ToF_BrokerMQTT+0x98>)
 8009e90:	4919      	ldr	r1, [pc, #100]	; (8009ef8 <esp8266_Subscribe_ToF_BrokerMQTT+0x9c>)
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 fd56 	bl	800a944 <siprintf>

	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 8009e98:	e011      	b.n	8009ebe <esp8266_Subscribe_ToF_BrokerMQTT+0x62>
	{
		retry_count++;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 8009ea0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009ea4:	f7fb f8ac 	bl	8005000 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2b03      	cmp	r3, #3
 8009eac:	dd07      	ble.n	8009ebe <esp8266_Subscribe_ToF_BrokerMQTT+0x62>
			printf("(DBG:) esp8266_Subscribe_Temp_BrokerMQTT() failed\r\n");
 8009eae:	4813      	ldr	r0, [pc, #76]	; (8009efc <esp8266_Subscribe_ToF_BrokerMQTT+0xa0>)
 8009eb0:	f000 fd30 	bl	800a914 <puts>
			retry_count = 0;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	60fb      	str	r3, [r7, #12]
			mqtt_state = _FAILED_MQTT;
 8009eb8:	4b0d      	ldr	r3, [pc, #52]	; (8009ef0 <esp8266_Subscribe_ToF_BrokerMQTT+0x94>)
 8009eba:	2200      	movs	r2, #0
 8009ebc:	701a      	strb	r2, [r3, #0]
	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ec4:	490e      	ldr	r1, [pc, #56]	; (8009f00 <esp8266_Subscribe_ToF_BrokerMQTT+0xa4>)
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f7ff fb48 	bl	800955c <esp8266_TransmitCmd>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d1e3      	bne.n	8009e9a <esp8266_Subscribe_ToF_BrokerMQTT+0x3e>
		}
	}
	HAL_Delay(100);
 8009ed2:	2064      	movs	r0, #100	; 0x64
 8009ed4:	f7fb f894 	bl	8005000 <HAL_Delay>
	retry_count = 0;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	60fb      	str	r3, [r7, #12]
	mqtt_state = _SUBSCRIBED_TOF_MQTT;
 8009edc:	4b04      	ldr	r3, [pc, #16]	; (8009ef0 <esp8266_Subscribe_ToF_BrokerMQTT+0x94>)
 8009ede:	2209      	movs	r2, #9
 8009ee0:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 8009ee2:	4b03      	ldr	r3, [pc, #12]	; (8009ef0 <esp8266_Subscribe_ToF_BrokerMQTT+0x94>)
 8009ee4:	781b      	ldrb	r3, [r3, #0]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	20000023 	.word	0x20000023
 8009ef4:	0800dda8 	.word	0x0800dda8
 8009ef8:	0800df80 	.word	0x0800df80
 8009efc:	0800df4c 	.word	0x0800df4c
 8009f00:	0800da84 	.word	0x0800da84

08009f04 <esp8266_Publish_Button_BrokerMQTT>:

MQTT_StateTypeDef esp8266_Publish_Button_BrokerMQTT(uint8_t *data, uint16_t size)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b086      	sub	sp, #24
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	807b      	strh	r3, [r7, #2]
	int retry_count = 0;
 8009f10:	2300      	movs	r3, #0
 8009f12:	617b      	str	r3, [r7, #20]
	if(mqtt_state < _CONNECTED_MQTT || data == NULL)
 8009f14:	4b24      	ldr	r3, [pc, #144]	; (8009fa8 <esp8266_Publish_Button_BrokerMQTT+0xa4>)
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	2b06      	cmp	r3, #6
 8009f1a:	d902      	bls.n	8009f22 <esp8266_Publish_Button_BrokerMQTT+0x1e>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d101      	bne.n	8009f26 <esp8266_Publish_Button_BrokerMQTT+0x22>
		return _FAILED_MQTT;
 8009f22:	2300      	movs	r3, #0
 8009f24:	e03b      	b.n	8009f9e <esp8266_Publish_Button_BrokerMQTT+0x9a>

	uint16_t cmd_len = size + 40;
 8009f26:	887b      	ldrh	r3, [r7, #2]
 8009f28:	3328      	adds	r3, #40	; 0x28
 8009f2a:	827b      	strh	r3, [r7, #18]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 8009f2c:	8a7b      	ldrh	r3, [r7, #18]
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f000 fb4a 	bl	800a5c8 <malloc>
 8009f34:	4603      	mov	r3, r0
 8009f36:	60fb      	str	r3, [r7, #12]
	memset(cmd, 0, cmd_len);
 8009f38:	8a7b      	ldrh	r3, [r7, #18]
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	f000 fb7a 	bl	800a638 <memset>
	sprintf((char*) cmd, "AT+MQTTPUB=0,\"%s/button\",\"%s\",1,0", MQTT_CLIENTID, data);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4a19      	ldr	r2, [pc, #100]	; (8009fac <esp8266_Publish_Button_BrokerMQTT+0xa8>)
 8009f48:	4919      	ldr	r1, [pc, #100]	; (8009fb0 <esp8266_Publish_Button_BrokerMQTT+0xac>)
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f000 fcfa 	bl	800a944 <siprintf>

	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 8009f50:	e011      	b.n	8009f76 <esp8266_Publish_Button_BrokerMQTT+0x72>
	{
		retry_count++;
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	3301      	adds	r3, #1
 8009f56:	617b      	str	r3, [r7, #20]
		HAL_Delay(1000);
 8009f58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009f5c:	f7fb f850 	bl	8005000 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	2b03      	cmp	r3, #3
 8009f64:	dd07      	ble.n	8009f76 <esp8266_Publish_Button_BrokerMQTT+0x72>
			printf("(DBG:) esp8266_Subscribe_Temp_BrokerMQTT() failed\r\n");
 8009f66:	4813      	ldr	r0, [pc, #76]	; (8009fb4 <esp8266_Publish_Button_BrokerMQTT+0xb0>)
 8009f68:	f000 fcd4 	bl	800a914 <puts>
			retry_count = 0;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	617b      	str	r3, [r7, #20]
			mqtt_state = _FAILED_MQTT;
 8009f70:	4b0d      	ldr	r3, [pc, #52]	; (8009fa8 <esp8266_Publish_Button_BrokerMQTT+0xa4>)
 8009f72:	2200      	movs	r2, #0
 8009f74:	701a      	strb	r2, [r3, #0]
	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 8009f76:	2301      	movs	r3, #1
 8009f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f7c:	490e      	ldr	r1, [pc, #56]	; (8009fb8 <esp8266_Publish_Button_BrokerMQTT+0xb4>)
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f7ff faec 	bl	800955c <esp8266_TransmitCmd>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d1e3      	bne.n	8009f52 <esp8266_Publish_Button_BrokerMQTT+0x4e>
		}
	}
	HAL_Delay(100);
 8009f8a:	2064      	movs	r0, #100	; 0x64
 8009f8c:	f7fb f838 	bl	8005000 <HAL_Delay>
	retry_count = 0;
 8009f90:	2300      	movs	r3, #0
 8009f92:	617b      	str	r3, [r7, #20]
	mqtt_state = _PUBLISH_BUTTON_MQTT;
 8009f94:	4b04      	ldr	r3, [pc, #16]	; (8009fa8 <esp8266_Publish_Button_BrokerMQTT+0xa4>)
 8009f96:	220a      	movs	r2, #10
 8009f98:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 8009f9a:	4b03      	ldr	r3, [pc, #12]	; (8009fa8 <esp8266_Publish_Button_BrokerMQTT+0xa4>)
 8009f9c:	781b      	ldrb	r3, [r3, #0]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3718      	adds	r7, #24
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	20000023 	.word	0x20000023
 8009fac:	0800dda8 	.word	0x0800dda8
 8009fb0:	0800df9c 	.word	0x0800df9c
 8009fb4:	0800df4c 	.word	0x0800df4c
 8009fb8:	0800da84 	.word	0x0800da84

08009fbc <esp8266_Publish_Temp_BrokerMQTT>:

MQTT_StateTypeDef esp8266_Publish_Temp_BrokerMQTT(uint8_t *data, uint16_t size)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b086      	sub	sp, #24
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	807b      	strh	r3, [r7, #2]
	int retry_count = 0;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	617b      	str	r3, [r7, #20]
	if(mqtt_state < _CONNECTED_MQTT || data == NULL)
 8009fcc:	4b24      	ldr	r3, [pc, #144]	; (800a060 <esp8266_Publish_Temp_BrokerMQTT+0xa4>)
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	2b06      	cmp	r3, #6
 8009fd2:	d902      	bls.n	8009fda <esp8266_Publish_Temp_BrokerMQTT+0x1e>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d101      	bne.n	8009fde <esp8266_Publish_Temp_BrokerMQTT+0x22>
		return _FAILED_MQTT;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	e03b      	b.n	800a056 <esp8266_Publish_Temp_BrokerMQTT+0x9a>

	uint16_t cmd_len = size + 40;
 8009fde:	887b      	ldrh	r3, [r7, #2]
 8009fe0:	3328      	adds	r3, #40	; 0x28
 8009fe2:	827b      	strh	r3, [r7, #18]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 8009fe4:	8a7b      	ldrh	r3, [r7, #18]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f000 faee 	bl	800a5c8 <malloc>
 8009fec:	4603      	mov	r3, r0
 8009fee:	60fb      	str	r3, [r7, #12]
	memset(cmd, 0, cmd_len);
 8009ff0:	8a7b      	ldrh	r3, [r7, #18]
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f000 fb1e 	bl	800a638 <memset>
	sprintf((char*) cmd, "AT+MQTTPUB=0,\"%s/temp\",\"%s\",1,0", MQTT_CLIENTID, data);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a19      	ldr	r2, [pc, #100]	; (800a064 <esp8266_Publish_Temp_BrokerMQTT+0xa8>)
 800a000:	4919      	ldr	r1, [pc, #100]	; (800a068 <esp8266_Publish_Temp_BrokerMQTT+0xac>)
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	f000 fc9e 	bl	800a944 <siprintf>

	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800a008:	e011      	b.n	800a02e <esp8266_Publish_Temp_BrokerMQTT+0x72>
	{
		retry_count++;
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	3301      	adds	r3, #1
 800a00e:	617b      	str	r3, [r7, #20]
		HAL_Delay(1000);
 800a010:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a014:	f7fa fff4 	bl	8005000 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	2b03      	cmp	r3, #3
 800a01c:	dd07      	ble.n	800a02e <esp8266_Publish_Temp_BrokerMQTT+0x72>
			printf("(DBG:) esp8266_Subscribe_Temp_BrokerMQTT() failed\r\n");
 800a01e:	4813      	ldr	r0, [pc, #76]	; (800a06c <esp8266_Publish_Temp_BrokerMQTT+0xb0>)
 800a020:	f000 fc78 	bl	800a914 <puts>
			retry_count = 0;
 800a024:	2300      	movs	r3, #0
 800a026:	617b      	str	r3, [r7, #20]
			mqtt_state = _FAILED_MQTT;
 800a028:	4b0d      	ldr	r3, [pc, #52]	; (800a060 <esp8266_Publish_Temp_BrokerMQTT+0xa4>)
 800a02a:	2200      	movs	r2, #0
 800a02c:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800a02e:	2301      	movs	r3, #1
 800a030:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a034:	490e      	ldr	r1, [pc, #56]	; (800a070 <esp8266_Publish_Temp_BrokerMQTT+0xb4>)
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f7ff fa90 	bl	800955c <esp8266_TransmitCmd>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d1e3      	bne.n	800a00a <esp8266_Publish_Temp_BrokerMQTT+0x4e>
		}
	}
	HAL_Delay(100);
 800a042:	2064      	movs	r0, #100	; 0x64
 800a044:	f7fa ffdc 	bl	8005000 <HAL_Delay>
	retry_count = 0;
 800a048:	2300      	movs	r3, #0
 800a04a:	617b      	str	r3, [r7, #20]
	mqtt_state = _PUBLISH_TEMP_MQTT;
 800a04c:	4b04      	ldr	r3, [pc, #16]	; (800a060 <esp8266_Publish_Temp_BrokerMQTT+0xa4>)
 800a04e:	220b      	movs	r2, #11
 800a050:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 800a052:	4b03      	ldr	r3, [pc, #12]	; (800a060 <esp8266_Publish_Temp_BrokerMQTT+0xa4>)
 800a054:	781b      	ldrb	r3, [r3, #0]
}
 800a056:	4618      	mov	r0, r3
 800a058:	3718      	adds	r7, #24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	20000023 	.word	0x20000023
 800a064:	0800dda8 	.word	0x0800dda8
 800a068:	0800dfc0 	.word	0x0800dfc0
 800a06c:	0800df4c 	.word	0x0800df4c
 800a070:	0800da84 	.word	0x0800da84

0800a074 <esp8266_Subscribe_Motor_BrokerMQTT>:
	retry_count = 0;
	mqtt_state = _PUBLISH_TOF_MQTT;
	return mqtt_state;
}
MQTT_StateTypeDef esp8266_Subscribe_Motor_BrokerMQTT()
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
	int retry_count = 0;
 800a07a:	2300      	movs	r3, #0
 800a07c:	60fb      	str	r3, [r7, #12]
	if(mqtt_state < _CONNECTED_MQTT)
 800a07e:	4b22      	ldr	r3, [pc, #136]	; (800a108 <esp8266_Subscribe_Motor_BrokerMQTT+0x94>)
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	2b06      	cmp	r3, #6
 800a084:	d801      	bhi.n	800a08a <esp8266_Subscribe_Motor_BrokerMQTT+0x16>
		return _FAILED_MQTT;
 800a086:	2300      	movs	r3, #0
 800a088:	e039      	b.n	800a0fe <esp8266_Subscribe_Motor_BrokerMQTT+0x8a>

	uint16_t cmd_len = 40;
 800a08a:	2328      	movs	r3, #40	; 0x28
 800a08c:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 800a08e:	897b      	ldrh	r3, [r7, #10]
 800a090:	4618      	mov	r0, r3
 800a092:	f000 fa99 	bl	800a5c8 <malloc>
 800a096:	4603      	mov	r3, r0
 800a098:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 800a09a:	897b      	ldrh	r3, [r7, #10]
 800a09c:	461a      	mov	r2, r3
 800a09e:	2100      	movs	r1, #0
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 fac9 	bl	800a638 <memset>
	sprintf((char*) cmd, "AT+MQTTSUB=0,\"%s/motor\",1", MQTT_CLIENTID);
 800a0a6:	4a19      	ldr	r2, [pc, #100]	; (800a10c <esp8266_Subscribe_Motor_BrokerMQTT+0x98>)
 800a0a8:	4919      	ldr	r1, [pc, #100]	; (800a110 <esp8266_Subscribe_Motor_BrokerMQTT+0x9c>)
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 fc4a 	bl	800a944 <siprintf>

	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800a0b0:	e011      	b.n	800a0d6 <esp8266_Subscribe_Motor_BrokerMQTT+0x62>
	{
		retry_count++;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 800a0b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a0bc:	f7fa ffa0 	bl	8005000 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2b03      	cmp	r3, #3
 800a0c4:	dd07      	ble.n	800a0d6 <esp8266_Subscribe_Motor_BrokerMQTT+0x62>
			printf("(DBG:) esp8266_Subscribe_Motor_BrokerMQTT() failed\r\n");
 800a0c6:	4813      	ldr	r0, [pc, #76]	; (800a114 <esp8266_Subscribe_Motor_BrokerMQTT+0xa0>)
 800a0c8:	f000 fc24 	bl	800a914 <puts>
			retry_count = 0;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	60fb      	str	r3, [r7, #12]
			mqtt_state = _FAILED_MQTT;
 800a0d0:	4b0d      	ldr	r3, [pc, #52]	; (800a108 <esp8266_Subscribe_Motor_BrokerMQTT+0x94>)
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	701a      	strb	r2, [r3, #0]
	while(esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0dc:	490e      	ldr	r1, [pc, #56]	; (800a118 <esp8266_Subscribe_Motor_BrokerMQTT+0xa4>)
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f7ff fa3c 	bl	800955c <esp8266_TransmitCmd>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d1e3      	bne.n	800a0b2 <esp8266_Subscribe_Motor_BrokerMQTT+0x3e>
		}
	}
	HAL_Delay(100);
 800a0ea:	2064      	movs	r0, #100	; 0x64
 800a0ec:	f7fa ff88 	bl	8005000 <HAL_Delay>
	retry_count = 0;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	60fb      	str	r3, [r7, #12]
	mqtt_state = _SUBSCRIBED_MOTOR_MQTT;
 800a0f4:	4b04      	ldr	r3, [pc, #16]	; (800a108 <esp8266_Subscribe_Motor_BrokerMQTT+0x94>)
 800a0f6:	220d      	movs	r2, #13
 800a0f8:	701a      	strb	r2, [r3, #0]
	return mqtt_state;
 800a0fa:	4b03      	ldr	r3, [pc, #12]	; (800a108 <esp8266_Subscribe_Motor_BrokerMQTT+0x94>)
 800a0fc:	781b      	ldrb	r3, [r3, #0]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	20000023 	.word	0x20000023
 800a10c:	0800dda8 	.word	0x0800dda8
 800a110:	0800e034 	.word	0x0800e034
 800a114:	0800e050 	.word	0x0800e050
 800a118:	0800da84 	.word	0x0800da84

0800a11c <get_mqtt_state>:

uint8_t get_mqtt_state()
{
 800a11c:	b480      	push	{r7}
 800a11e:	af00      	add	r7, sp, #0
	return mqtt_state;
 800a120:	4b03      	ldr	r3, [pc, #12]	; (800a130 <get_mqtt_state+0x14>)
 800a122:	781b      	ldrb	r3, [r3, #0]
}
 800a124:	4618      	mov	r0, r3
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	20000023 	.word	0x20000023

0800a134 <__errno>:
 800a134:	4b01      	ldr	r3, [pc, #4]	; (800a13c <__errno+0x8>)
 800a136:	6818      	ldr	r0, [r3, #0]
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	20000024 	.word	0x20000024

0800a140 <__sflush_r>:
 800a140:	898a      	ldrh	r2, [r1, #12]
 800a142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a146:	4605      	mov	r5, r0
 800a148:	0710      	lsls	r0, r2, #28
 800a14a:	460c      	mov	r4, r1
 800a14c:	d458      	bmi.n	800a200 <__sflush_r+0xc0>
 800a14e:	684b      	ldr	r3, [r1, #4]
 800a150:	2b00      	cmp	r3, #0
 800a152:	dc05      	bgt.n	800a160 <__sflush_r+0x20>
 800a154:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a156:	2b00      	cmp	r3, #0
 800a158:	dc02      	bgt.n	800a160 <__sflush_r+0x20>
 800a15a:	2000      	movs	r0, #0
 800a15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a162:	2e00      	cmp	r6, #0
 800a164:	d0f9      	beq.n	800a15a <__sflush_r+0x1a>
 800a166:	2300      	movs	r3, #0
 800a168:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a16c:	682f      	ldr	r7, [r5, #0]
 800a16e:	602b      	str	r3, [r5, #0]
 800a170:	d032      	beq.n	800a1d8 <__sflush_r+0x98>
 800a172:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a174:	89a3      	ldrh	r3, [r4, #12]
 800a176:	075a      	lsls	r2, r3, #29
 800a178:	d505      	bpl.n	800a186 <__sflush_r+0x46>
 800a17a:	6863      	ldr	r3, [r4, #4]
 800a17c:	1ac0      	subs	r0, r0, r3
 800a17e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a180:	b10b      	cbz	r3, 800a186 <__sflush_r+0x46>
 800a182:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a184:	1ac0      	subs	r0, r0, r3
 800a186:	2300      	movs	r3, #0
 800a188:	4602      	mov	r2, r0
 800a18a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a18c:	6a21      	ldr	r1, [r4, #32]
 800a18e:	4628      	mov	r0, r5
 800a190:	47b0      	blx	r6
 800a192:	1c43      	adds	r3, r0, #1
 800a194:	89a3      	ldrh	r3, [r4, #12]
 800a196:	d106      	bne.n	800a1a6 <__sflush_r+0x66>
 800a198:	6829      	ldr	r1, [r5, #0]
 800a19a:	291d      	cmp	r1, #29
 800a19c:	d82c      	bhi.n	800a1f8 <__sflush_r+0xb8>
 800a19e:	4a2a      	ldr	r2, [pc, #168]	; (800a248 <__sflush_r+0x108>)
 800a1a0:	40ca      	lsrs	r2, r1
 800a1a2:	07d6      	lsls	r6, r2, #31
 800a1a4:	d528      	bpl.n	800a1f8 <__sflush_r+0xb8>
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	6062      	str	r2, [r4, #4]
 800a1aa:	04d9      	lsls	r1, r3, #19
 800a1ac:	6922      	ldr	r2, [r4, #16]
 800a1ae:	6022      	str	r2, [r4, #0]
 800a1b0:	d504      	bpl.n	800a1bc <__sflush_r+0x7c>
 800a1b2:	1c42      	adds	r2, r0, #1
 800a1b4:	d101      	bne.n	800a1ba <__sflush_r+0x7a>
 800a1b6:	682b      	ldr	r3, [r5, #0]
 800a1b8:	b903      	cbnz	r3, 800a1bc <__sflush_r+0x7c>
 800a1ba:	6560      	str	r0, [r4, #84]	; 0x54
 800a1bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1be:	602f      	str	r7, [r5, #0]
 800a1c0:	2900      	cmp	r1, #0
 800a1c2:	d0ca      	beq.n	800a15a <__sflush_r+0x1a>
 800a1c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1c8:	4299      	cmp	r1, r3
 800a1ca:	d002      	beq.n	800a1d2 <__sflush_r+0x92>
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	f000 fa3b 	bl	800a648 <_free_r>
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	6360      	str	r0, [r4, #52]	; 0x34
 800a1d6:	e7c1      	b.n	800a15c <__sflush_r+0x1c>
 800a1d8:	6a21      	ldr	r1, [r4, #32]
 800a1da:	2301      	movs	r3, #1
 800a1dc:	4628      	mov	r0, r5
 800a1de:	47b0      	blx	r6
 800a1e0:	1c41      	adds	r1, r0, #1
 800a1e2:	d1c7      	bne.n	800a174 <__sflush_r+0x34>
 800a1e4:	682b      	ldr	r3, [r5, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d0c4      	beq.n	800a174 <__sflush_r+0x34>
 800a1ea:	2b1d      	cmp	r3, #29
 800a1ec:	d001      	beq.n	800a1f2 <__sflush_r+0xb2>
 800a1ee:	2b16      	cmp	r3, #22
 800a1f0:	d101      	bne.n	800a1f6 <__sflush_r+0xb6>
 800a1f2:	602f      	str	r7, [r5, #0]
 800a1f4:	e7b1      	b.n	800a15a <__sflush_r+0x1a>
 800a1f6:	89a3      	ldrh	r3, [r4, #12]
 800a1f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1fc:	81a3      	strh	r3, [r4, #12]
 800a1fe:	e7ad      	b.n	800a15c <__sflush_r+0x1c>
 800a200:	690f      	ldr	r7, [r1, #16]
 800a202:	2f00      	cmp	r7, #0
 800a204:	d0a9      	beq.n	800a15a <__sflush_r+0x1a>
 800a206:	0793      	lsls	r3, r2, #30
 800a208:	680e      	ldr	r6, [r1, #0]
 800a20a:	bf08      	it	eq
 800a20c:	694b      	ldreq	r3, [r1, #20]
 800a20e:	600f      	str	r7, [r1, #0]
 800a210:	bf18      	it	ne
 800a212:	2300      	movne	r3, #0
 800a214:	eba6 0807 	sub.w	r8, r6, r7
 800a218:	608b      	str	r3, [r1, #8]
 800a21a:	f1b8 0f00 	cmp.w	r8, #0
 800a21e:	dd9c      	ble.n	800a15a <__sflush_r+0x1a>
 800a220:	6a21      	ldr	r1, [r4, #32]
 800a222:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a224:	4643      	mov	r3, r8
 800a226:	463a      	mov	r2, r7
 800a228:	4628      	mov	r0, r5
 800a22a:	47b0      	blx	r6
 800a22c:	2800      	cmp	r0, #0
 800a22e:	dc06      	bgt.n	800a23e <__sflush_r+0xfe>
 800a230:	89a3      	ldrh	r3, [r4, #12]
 800a232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a236:	81a3      	strh	r3, [r4, #12]
 800a238:	f04f 30ff 	mov.w	r0, #4294967295
 800a23c:	e78e      	b.n	800a15c <__sflush_r+0x1c>
 800a23e:	4407      	add	r7, r0
 800a240:	eba8 0800 	sub.w	r8, r8, r0
 800a244:	e7e9      	b.n	800a21a <__sflush_r+0xda>
 800a246:	bf00      	nop
 800a248:	20400001 	.word	0x20400001

0800a24c <_fflush_r>:
 800a24c:	b538      	push	{r3, r4, r5, lr}
 800a24e:	690b      	ldr	r3, [r1, #16]
 800a250:	4605      	mov	r5, r0
 800a252:	460c      	mov	r4, r1
 800a254:	b913      	cbnz	r3, 800a25c <_fflush_r+0x10>
 800a256:	2500      	movs	r5, #0
 800a258:	4628      	mov	r0, r5
 800a25a:	bd38      	pop	{r3, r4, r5, pc}
 800a25c:	b118      	cbz	r0, 800a266 <_fflush_r+0x1a>
 800a25e:	6983      	ldr	r3, [r0, #24]
 800a260:	b90b      	cbnz	r3, 800a266 <_fflush_r+0x1a>
 800a262:	f000 f887 	bl	800a374 <__sinit>
 800a266:	4b14      	ldr	r3, [pc, #80]	; (800a2b8 <_fflush_r+0x6c>)
 800a268:	429c      	cmp	r4, r3
 800a26a:	d11b      	bne.n	800a2a4 <_fflush_r+0x58>
 800a26c:	686c      	ldr	r4, [r5, #4]
 800a26e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d0ef      	beq.n	800a256 <_fflush_r+0xa>
 800a276:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a278:	07d0      	lsls	r0, r2, #31
 800a27a:	d404      	bmi.n	800a286 <_fflush_r+0x3a>
 800a27c:	0599      	lsls	r1, r3, #22
 800a27e:	d402      	bmi.n	800a286 <_fflush_r+0x3a>
 800a280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a282:	f000 f93a 	bl	800a4fa <__retarget_lock_acquire_recursive>
 800a286:	4628      	mov	r0, r5
 800a288:	4621      	mov	r1, r4
 800a28a:	f7ff ff59 	bl	800a140 <__sflush_r>
 800a28e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a290:	07da      	lsls	r2, r3, #31
 800a292:	4605      	mov	r5, r0
 800a294:	d4e0      	bmi.n	800a258 <_fflush_r+0xc>
 800a296:	89a3      	ldrh	r3, [r4, #12]
 800a298:	059b      	lsls	r3, r3, #22
 800a29a:	d4dd      	bmi.n	800a258 <_fflush_r+0xc>
 800a29c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a29e:	f000 f92d 	bl	800a4fc <__retarget_lock_release_recursive>
 800a2a2:	e7d9      	b.n	800a258 <_fflush_r+0xc>
 800a2a4:	4b05      	ldr	r3, [pc, #20]	; (800a2bc <_fflush_r+0x70>)
 800a2a6:	429c      	cmp	r4, r3
 800a2a8:	d101      	bne.n	800a2ae <_fflush_r+0x62>
 800a2aa:	68ac      	ldr	r4, [r5, #8]
 800a2ac:	e7df      	b.n	800a26e <_fflush_r+0x22>
 800a2ae:	4b04      	ldr	r3, [pc, #16]	; (800a2c0 <_fflush_r+0x74>)
 800a2b0:	429c      	cmp	r4, r3
 800a2b2:	bf08      	it	eq
 800a2b4:	68ec      	ldreq	r4, [r5, #12]
 800a2b6:	e7da      	b.n	800a26e <_fflush_r+0x22>
 800a2b8:	0800e270 	.word	0x0800e270
 800a2bc:	0800e290 	.word	0x0800e290
 800a2c0:	0800e250 	.word	0x0800e250

0800a2c4 <std>:
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	b510      	push	{r4, lr}
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	e9c0 3300 	strd	r3, r3, [r0]
 800a2ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2d2:	6083      	str	r3, [r0, #8]
 800a2d4:	8181      	strh	r1, [r0, #12]
 800a2d6:	6643      	str	r3, [r0, #100]	; 0x64
 800a2d8:	81c2      	strh	r2, [r0, #14]
 800a2da:	6183      	str	r3, [r0, #24]
 800a2dc:	4619      	mov	r1, r3
 800a2de:	2208      	movs	r2, #8
 800a2e0:	305c      	adds	r0, #92	; 0x5c
 800a2e2:	f000 f9a9 	bl	800a638 <memset>
 800a2e6:	4b05      	ldr	r3, [pc, #20]	; (800a2fc <std+0x38>)
 800a2e8:	6263      	str	r3, [r4, #36]	; 0x24
 800a2ea:	4b05      	ldr	r3, [pc, #20]	; (800a300 <std+0x3c>)
 800a2ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800a2ee:	4b05      	ldr	r3, [pc, #20]	; (800a304 <std+0x40>)
 800a2f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2f2:	4b05      	ldr	r3, [pc, #20]	; (800a308 <std+0x44>)
 800a2f4:	6224      	str	r4, [r4, #32]
 800a2f6:	6323      	str	r3, [r4, #48]	; 0x30
 800a2f8:	bd10      	pop	{r4, pc}
 800a2fa:	bf00      	nop
 800a2fc:	0800a985 	.word	0x0800a985
 800a300:	0800a9a7 	.word	0x0800a9a7
 800a304:	0800a9df 	.word	0x0800a9df
 800a308:	0800aa03 	.word	0x0800aa03

0800a30c <_cleanup_r>:
 800a30c:	4901      	ldr	r1, [pc, #4]	; (800a314 <_cleanup_r+0x8>)
 800a30e:	f000 b8af 	b.w	800a470 <_fwalk_reent>
 800a312:	bf00      	nop
 800a314:	0800a24d 	.word	0x0800a24d

0800a318 <__sfmoreglue>:
 800a318:	b570      	push	{r4, r5, r6, lr}
 800a31a:	2268      	movs	r2, #104	; 0x68
 800a31c:	1e4d      	subs	r5, r1, #1
 800a31e:	4355      	muls	r5, r2
 800a320:	460e      	mov	r6, r1
 800a322:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a326:	f000 f9fb 	bl	800a720 <_malloc_r>
 800a32a:	4604      	mov	r4, r0
 800a32c:	b140      	cbz	r0, 800a340 <__sfmoreglue+0x28>
 800a32e:	2100      	movs	r1, #0
 800a330:	e9c0 1600 	strd	r1, r6, [r0]
 800a334:	300c      	adds	r0, #12
 800a336:	60a0      	str	r0, [r4, #8]
 800a338:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a33c:	f000 f97c 	bl	800a638 <memset>
 800a340:	4620      	mov	r0, r4
 800a342:	bd70      	pop	{r4, r5, r6, pc}

0800a344 <__sfp_lock_acquire>:
 800a344:	4801      	ldr	r0, [pc, #4]	; (800a34c <__sfp_lock_acquire+0x8>)
 800a346:	f000 b8d8 	b.w	800a4fa <__retarget_lock_acquire_recursive>
 800a34a:	bf00      	nop
 800a34c:	200016f3 	.word	0x200016f3

0800a350 <__sfp_lock_release>:
 800a350:	4801      	ldr	r0, [pc, #4]	; (800a358 <__sfp_lock_release+0x8>)
 800a352:	f000 b8d3 	b.w	800a4fc <__retarget_lock_release_recursive>
 800a356:	bf00      	nop
 800a358:	200016f3 	.word	0x200016f3

0800a35c <__sinit_lock_acquire>:
 800a35c:	4801      	ldr	r0, [pc, #4]	; (800a364 <__sinit_lock_acquire+0x8>)
 800a35e:	f000 b8cc 	b.w	800a4fa <__retarget_lock_acquire_recursive>
 800a362:	bf00      	nop
 800a364:	200016f4 	.word	0x200016f4

0800a368 <__sinit_lock_release>:
 800a368:	4801      	ldr	r0, [pc, #4]	; (800a370 <__sinit_lock_release+0x8>)
 800a36a:	f000 b8c7 	b.w	800a4fc <__retarget_lock_release_recursive>
 800a36e:	bf00      	nop
 800a370:	200016f4 	.word	0x200016f4

0800a374 <__sinit>:
 800a374:	b510      	push	{r4, lr}
 800a376:	4604      	mov	r4, r0
 800a378:	f7ff fff0 	bl	800a35c <__sinit_lock_acquire>
 800a37c:	69a3      	ldr	r3, [r4, #24]
 800a37e:	b11b      	cbz	r3, 800a388 <__sinit+0x14>
 800a380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a384:	f7ff bff0 	b.w	800a368 <__sinit_lock_release>
 800a388:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a38c:	6523      	str	r3, [r4, #80]	; 0x50
 800a38e:	4b13      	ldr	r3, [pc, #76]	; (800a3dc <__sinit+0x68>)
 800a390:	4a13      	ldr	r2, [pc, #76]	; (800a3e0 <__sinit+0x6c>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	62a2      	str	r2, [r4, #40]	; 0x28
 800a396:	42a3      	cmp	r3, r4
 800a398:	bf04      	itt	eq
 800a39a:	2301      	moveq	r3, #1
 800a39c:	61a3      	streq	r3, [r4, #24]
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f000 f820 	bl	800a3e4 <__sfp>
 800a3a4:	6060      	str	r0, [r4, #4]
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	f000 f81c 	bl	800a3e4 <__sfp>
 800a3ac:	60a0      	str	r0, [r4, #8]
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f000 f818 	bl	800a3e4 <__sfp>
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	60e0      	str	r0, [r4, #12]
 800a3b8:	2104      	movs	r1, #4
 800a3ba:	6860      	ldr	r0, [r4, #4]
 800a3bc:	f7ff ff82 	bl	800a2c4 <std>
 800a3c0:	68a0      	ldr	r0, [r4, #8]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	2109      	movs	r1, #9
 800a3c6:	f7ff ff7d 	bl	800a2c4 <std>
 800a3ca:	68e0      	ldr	r0, [r4, #12]
 800a3cc:	2202      	movs	r2, #2
 800a3ce:	2112      	movs	r1, #18
 800a3d0:	f7ff ff78 	bl	800a2c4 <std>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	61a3      	str	r3, [r4, #24]
 800a3d8:	e7d2      	b.n	800a380 <__sinit+0xc>
 800a3da:	bf00      	nop
 800a3dc:	0800e2b0 	.word	0x0800e2b0
 800a3e0:	0800a30d 	.word	0x0800a30d

0800a3e4 <__sfp>:
 800a3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3e6:	4607      	mov	r7, r0
 800a3e8:	f7ff ffac 	bl	800a344 <__sfp_lock_acquire>
 800a3ec:	4b1e      	ldr	r3, [pc, #120]	; (800a468 <__sfp+0x84>)
 800a3ee:	681e      	ldr	r6, [r3, #0]
 800a3f0:	69b3      	ldr	r3, [r6, #24]
 800a3f2:	b913      	cbnz	r3, 800a3fa <__sfp+0x16>
 800a3f4:	4630      	mov	r0, r6
 800a3f6:	f7ff ffbd 	bl	800a374 <__sinit>
 800a3fa:	3648      	adds	r6, #72	; 0x48
 800a3fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a400:	3b01      	subs	r3, #1
 800a402:	d503      	bpl.n	800a40c <__sfp+0x28>
 800a404:	6833      	ldr	r3, [r6, #0]
 800a406:	b30b      	cbz	r3, 800a44c <__sfp+0x68>
 800a408:	6836      	ldr	r6, [r6, #0]
 800a40a:	e7f7      	b.n	800a3fc <__sfp+0x18>
 800a40c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a410:	b9d5      	cbnz	r5, 800a448 <__sfp+0x64>
 800a412:	4b16      	ldr	r3, [pc, #88]	; (800a46c <__sfp+0x88>)
 800a414:	60e3      	str	r3, [r4, #12]
 800a416:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a41a:	6665      	str	r5, [r4, #100]	; 0x64
 800a41c:	f000 f86c 	bl	800a4f8 <__retarget_lock_init_recursive>
 800a420:	f7ff ff96 	bl	800a350 <__sfp_lock_release>
 800a424:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a428:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a42c:	6025      	str	r5, [r4, #0]
 800a42e:	61a5      	str	r5, [r4, #24]
 800a430:	2208      	movs	r2, #8
 800a432:	4629      	mov	r1, r5
 800a434:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a438:	f000 f8fe 	bl	800a638 <memset>
 800a43c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a440:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a444:	4620      	mov	r0, r4
 800a446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a448:	3468      	adds	r4, #104	; 0x68
 800a44a:	e7d9      	b.n	800a400 <__sfp+0x1c>
 800a44c:	2104      	movs	r1, #4
 800a44e:	4638      	mov	r0, r7
 800a450:	f7ff ff62 	bl	800a318 <__sfmoreglue>
 800a454:	4604      	mov	r4, r0
 800a456:	6030      	str	r0, [r6, #0]
 800a458:	2800      	cmp	r0, #0
 800a45a:	d1d5      	bne.n	800a408 <__sfp+0x24>
 800a45c:	f7ff ff78 	bl	800a350 <__sfp_lock_release>
 800a460:	230c      	movs	r3, #12
 800a462:	603b      	str	r3, [r7, #0]
 800a464:	e7ee      	b.n	800a444 <__sfp+0x60>
 800a466:	bf00      	nop
 800a468:	0800e2b0 	.word	0x0800e2b0
 800a46c:	ffff0001 	.word	0xffff0001

0800a470 <_fwalk_reent>:
 800a470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a474:	4606      	mov	r6, r0
 800a476:	4688      	mov	r8, r1
 800a478:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a47c:	2700      	movs	r7, #0
 800a47e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a482:	f1b9 0901 	subs.w	r9, r9, #1
 800a486:	d505      	bpl.n	800a494 <_fwalk_reent+0x24>
 800a488:	6824      	ldr	r4, [r4, #0]
 800a48a:	2c00      	cmp	r4, #0
 800a48c:	d1f7      	bne.n	800a47e <_fwalk_reent+0xe>
 800a48e:	4638      	mov	r0, r7
 800a490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a494:	89ab      	ldrh	r3, [r5, #12]
 800a496:	2b01      	cmp	r3, #1
 800a498:	d907      	bls.n	800a4aa <_fwalk_reent+0x3a>
 800a49a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	d003      	beq.n	800a4aa <_fwalk_reent+0x3a>
 800a4a2:	4629      	mov	r1, r5
 800a4a4:	4630      	mov	r0, r6
 800a4a6:	47c0      	blx	r8
 800a4a8:	4307      	orrs	r7, r0
 800a4aa:	3568      	adds	r5, #104	; 0x68
 800a4ac:	e7e9      	b.n	800a482 <_fwalk_reent+0x12>
	...

0800a4b0 <__libc_init_array>:
 800a4b0:	b570      	push	{r4, r5, r6, lr}
 800a4b2:	4d0d      	ldr	r5, [pc, #52]	; (800a4e8 <__libc_init_array+0x38>)
 800a4b4:	4c0d      	ldr	r4, [pc, #52]	; (800a4ec <__libc_init_array+0x3c>)
 800a4b6:	1b64      	subs	r4, r4, r5
 800a4b8:	10a4      	asrs	r4, r4, #2
 800a4ba:	2600      	movs	r6, #0
 800a4bc:	42a6      	cmp	r6, r4
 800a4be:	d109      	bne.n	800a4d4 <__libc_init_array+0x24>
 800a4c0:	4d0b      	ldr	r5, [pc, #44]	; (800a4f0 <__libc_init_array+0x40>)
 800a4c2:	4c0c      	ldr	r4, [pc, #48]	; (800a4f4 <__libc_init_array+0x44>)
 800a4c4:	f002 ffc6 	bl	800d454 <_init>
 800a4c8:	1b64      	subs	r4, r4, r5
 800a4ca:	10a4      	asrs	r4, r4, #2
 800a4cc:	2600      	movs	r6, #0
 800a4ce:	42a6      	cmp	r6, r4
 800a4d0:	d105      	bne.n	800a4de <__libc_init_array+0x2e>
 800a4d2:	bd70      	pop	{r4, r5, r6, pc}
 800a4d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4d8:	4798      	blx	r3
 800a4da:	3601      	adds	r6, #1
 800a4dc:	e7ee      	b.n	800a4bc <__libc_init_array+0xc>
 800a4de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4e2:	4798      	blx	r3
 800a4e4:	3601      	adds	r6, #1
 800a4e6:	e7f2      	b.n	800a4ce <__libc_init_array+0x1e>
 800a4e8:	0800e584 	.word	0x0800e584
 800a4ec:	0800e584 	.word	0x0800e584
 800a4f0:	0800e584 	.word	0x0800e584
 800a4f4:	0800e588 	.word	0x0800e588

0800a4f8 <__retarget_lock_init_recursive>:
 800a4f8:	4770      	bx	lr

0800a4fa <__retarget_lock_acquire_recursive>:
 800a4fa:	4770      	bx	lr

0800a4fc <__retarget_lock_release_recursive>:
 800a4fc:	4770      	bx	lr

0800a4fe <__swhatbuf_r>:
 800a4fe:	b570      	push	{r4, r5, r6, lr}
 800a500:	460e      	mov	r6, r1
 800a502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a506:	2900      	cmp	r1, #0
 800a508:	b096      	sub	sp, #88	; 0x58
 800a50a:	4614      	mov	r4, r2
 800a50c:	461d      	mov	r5, r3
 800a50e:	da08      	bge.n	800a522 <__swhatbuf_r+0x24>
 800a510:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a514:	2200      	movs	r2, #0
 800a516:	602a      	str	r2, [r5, #0]
 800a518:	061a      	lsls	r2, r3, #24
 800a51a:	d410      	bmi.n	800a53e <__swhatbuf_r+0x40>
 800a51c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a520:	e00e      	b.n	800a540 <__swhatbuf_r+0x42>
 800a522:	466a      	mov	r2, sp
 800a524:	f001 f9d8 	bl	800b8d8 <_fstat_r>
 800a528:	2800      	cmp	r0, #0
 800a52a:	dbf1      	blt.n	800a510 <__swhatbuf_r+0x12>
 800a52c:	9a01      	ldr	r2, [sp, #4]
 800a52e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a532:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a536:	425a      	negs	r2, r3
 800a538:	415a      	adcs	r2, r3
 800a53a:	602a      	str	r2, [r5, #0]
 800a53c:	e7ee      	b.n	800a51c <__swhatbuf_r+0x1e>
 800a53e:	2340      	movs	r3, #64	; 0x40
 800a540:	2000      	movs	r0, #0
 800a542:	6023      	str	r3, [r4, #0]
 800a544:	b016      	add	sp, #88	; 0x58
 800a546:	bd70      	pop	{r4, r5, r6, pc}

0800a548 <__smakebuf_r>:
 800a548:	898b      	ldrh	r3, [r1, #12]
 800a54a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a54c:	079d      	lsls	r5, r3, #30
 800a54e:	4606      	mov	r6, r0
 800a550:	460c      	mov	r4, r1
 800a552:	d507      	bpl.n	800a564 <__smakebuf_r+0x1c>
 800a554:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a558:	6023      	str	r3, [r4, #0]
 800a55a:	6123      	str	r3, [r4, #16]
 800a55c:	2301      	movs	r3, #1
 800a55e:	6163      	str	r3, [r4, #20]
 800a560:	b002      	add	sp, #8
 800a562:	bd70      	pop	{r4, r5, r6, pc}
 800a564:	ab01      	add	r3, sp, #4
 800a566:	466a      	mov	r2, sp
 800a568:	f7ff ffc9 	bl	800a4fe <__swhatbuf_r>
 800a56c:	9900      	ldr	r1, [sp, #0]
 800a56e:	4605      	mov	r5, r0
 800a570:	4630      	mov	r0, r6
 800a572:	f000 f8d5 	bl	800a720 <_malloc_r>
 800a576:	b948      	cbnz	r0, 800a58c <__smakebuf_r+0x44>
 800a578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a57c:	059a      	lsls	r2, r3, #22
 800a57e:	d4ef      	bmi.n	800a560 <__smakebuf_r+0x18>
 800a580:	f023 0303 	bic.w	r3, r3, #3
 800a584:	f043 0302 	orr.w	r3, r3, #2
 800a588:	81a3      	strh	r3, [r4, #12]
 800a58a:	e7e3      	b.n	800a554 <__smakebuf_r+0xc>
 800a58c:	4b0d      	ldr	r3, [pc, #52]	; (800a5c4 <__smakebuf_r+0x7c>)
 800a58e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a590:	89a3      	ldrh	r3, [r4, #12]
 800a592:	6020      	str	r0, [r4, #0]
 800a594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a598:	81a3      	strh	r3, [r4, #12]
 800a59a:	9b00      	ldr	r3, [sp, #0]
 800a59c:	6163      	str	r3, [r4, #20]
 800a59e:	9b01      	ldr	r3, [sp, #4]
 800a5a0:	6120      	str	r0, [r4, #16]
 800a5a2:	b15b      	cbz	r3, 800a5bc <__smakebuf_r+0x74>
 800a5a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	f001 fd17 	bl	800bfdc <_isatty_r>
 800a5ae:	b128      	cbz	r0, 800a5bc <__smakebuf_r+0x74>
 800a5b0:	89a3      	ldrh	r3, [r4, #12]
 800a5b2:	f023 0303 	bic.w	r3, r3, #3
 800a5b6:	f043 0301 	orr.w	r3, r3, #1
 800a5ba:	81a3      	strh	r3, [r4, #12]
 800a5bc:	89a0      	ldrh	r0, [r4, #12]
 800a5be:	4305      	orrs	r5, r0
 800a5c0:	81a5      	strh	r5, [r4, #12]
 800a5c2:	e7cd      	b.n	800a560 <__smakebuf_r+0x18>
 800a5c4:	0800a30d 	.word	0x0800a30d

0800a5c8 <malloc>:
 800a5c8:	4b02      	ldr	r3, [pc, #8]	; (800a5d4 <malloc+0xc>)
 800a5ca:	4601      	mov	r1, r0
 800a5cc:	6818      	ldr	r0, [r3, #0]
 800a5ce:	f000 b8a7 	b.w	800a720 <_malloc_r>
 800a5d2:	bf00      	nop
 800a5d4:	20000024 	.word	0x20000024

0800a5d8 <free>:
 800a5d8:	4b02      	ldr	r3, [pc, #8]	; (800a5e4 <free+0xc>)
 800a5da:	4601      	mov	r1, r0
 800a5dc:	6818      	ldr	r0, [r3, #0]
 800a5de:	f000 b833 	b.w	800a648 <_free_r>
 800a5e2:	bf00      	nop
 800a5e4:	20000024 	.word	0x20000024

0800a5e8 <memcpy>:
 800a5e8:	440a      	add	r2, r1
 800a5ea:	4291      	cmp	r1, r2
 800a5ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5f0:	d100      	bne.n	800a5f4 <memcpy+0xc>
 800a5f2:	4770      	bx	lr
 800a5f4:	b510      	push	{r4, lr}
 800a5f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5fe:	4291      	cmp	r1, r2
 800a600:	d1f9      	bne.n	800a5f6 <memcpy+0xe>
 800a602:	bd10      	pop	{r4, pc}

0800a604 <memmove>:
 800a604:	4288      	cmp	r0, r1
 800a606:	b510      	push	{r4, lr}
 800a608:	eb01 0402 	add.w	r4, r1, r2
 800a60c:	d902      	bls.n	800a614 <memmove+0x10>
 800a60e:	4284      	cmp	r4, r0
 800a610:	4623      	mov	r3, r4
 800a612:	d807      	bhi.n	800a624 <memmove+0x20>
 800a614:	1e43      	subs	r3, r0, #1
 800a616:	42a1      	cmp	r1, r4
 800a618:	d008      	beq.n	800a62c <memmove+0x28>
 800a61a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a61e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a622:	e7f8      	b.n	800a616 <memmove+0x12>
 800a624:	4402      	add	r2, r0
 800a626:	4601      	mov	r1, r0
 800a628:	428a      	cmp	r2, r1
 800a62a:	d100      	bne.n	800a62e <memmove+0x2a>
 800a62c:	bd10      	pop	{r4, pc}
 800a62e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a636:	e7f7      	b.n	800a628 <memmove+0x24>

0800a638 <memset>:
 800a638:	4402      	add	r2, r0
 800a63a:	4603      	mov	r3, r0
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d100      	bne.n	800a642 <memset+0xa>
 800a640:	4770      	bx	lr
 800a642:	f803 1b01 	strb.w	r1, [r3], #1
 800a646:	e7f9      	b.n	800a63c <memset+0x4>

0800a648 <_free_r>:
 800a648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a64a:	2900      	cmp	r1, #0
 800a64c:	d044      	beq.n	800a6d8 <_free_r+0x90>
 800a64e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a652:	9001      	str	r0, [sp, #4]
 800a654:	2b00      	cmp	r3, #0
 800a656:	f1a1 0404 	sub.w	r4, r1, #4
 800a65a:	bfb8      	it	lt
 800a65c:	18e4      	addlt	r4, r4, r3
 800a65e:	f001 fcf1 	bl	800c044 <__malloc_lock>
 800a662:	4a1e      	ldr	r2, [pc, #120]	; (800a6dc <_free_r+0x94>)
 800a664:	9801      	ldr	r0, [sp, #4]
 800a666:	6813      	ldr	r3, [r2, #0]
 800a668:	b933      	cbnz	r3, 800a678 <_free_r+0x30>
 800a66a:	6063      	str	r3, [r4, #4]
 800a66c:	6014      	str	r4, [r2, #0]
 800a66e:	b003      	add	sp, #12
 800a670:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a674:	f001 bcec 	b.w	800c050 <__malloc_unlock>
 800a678:	42a3      	cmp	r3, r4
 800a67a:	d908      	bls.n	800a68e <_free_r+0x46>
 800a67c:	6825      	ldr	r5, [r4, #0]
 800a67e:	1961      	adds	r1, r4, r5
 800a680:	428b      	cmp	r3, r1
 800a682:	bf01      	itttt	eq
 800a684:	6819      	ldreq	r1, [r3, #0]
 800a686:	685b      	ldreq	r3, [r3, #4]
 800a688:	1949      	addeq	r1, r1, r5
 800a68a:	6021      	streq	r1, [r4, #0]
 800a68c:	e7ed      	b.n	800a66a <_free_r+0x22>
 800a68e:	461a      	mov	r2, r3
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	b10b      	cbz	r3, 800a698 <_free_r+0x50>
 800a694:	42a3      	cmp	r3, r4
 800a696:	d9fa      	bls.n	800a68e <_free_r+0x46>
 800a698:	6811      	ldr	r1, [r2, #0]
 800a69a:	1855      	adds	r5, r2, r1
 800a69c:	42a5      	cmp	r5, r4
 800a69e:	d10b      	bne.n	800a6b8 <_free_r+0x70>
 800a6a0:	6824      	ldr	r4, [r4, #0]
 800a6a2:	4421      	add	r1, r4
 800a6a4:	1854      	adds	r4, r2, r1
 800a6a6:	42a3      	cmp	r3, r4
 800a6a8:	6011      	str	r1, [r2, #0]
 800a6aa:	d1e0      	bne.n	800a66e <_free_r+0x26>
 800a6ac:	681c      	ldr	r4, [r3, #0]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	6053      	str	r3, [r2, #4]
 800a6b2:	4421      	add	r1, r4
 800a6b4:	6011      	str	r1, [r2, #0]
 800a6b6:	e7da      	b.n	800a66e <_free_r+0x26>
 800a6b8:	d902      	bls.n	800a6c0 <_free_r+0x78>
 800a6ba:	230c      	movs	r3, #12
 800a6bc:	6003      	str	r3, [r0, #0]
 800a6be:	e7d6      	b.n	800a66e <_free_r+0x26>
 800a6c0:	6825      	ldr	r5, [r4, #0]
 800a6c2:	1961      	adds	r1, r4, r5
 800a6c4:	428b      	cmp	r3, r1
 800a6c6:	bf04      	itt	eq
 800a6c8:	6819      	ldreq	r1, [r3, #0]
 800a6ca:	685b      	ldreq	r3, [r3, #4]
 800a6cc:	6063      	str	r3, [r4, #4]
 800a6ce:	bf04      	itt	eq
 800a6d0:	1949      	addeq	r1, r1, r5
 800a6d2:	6021      	streq	r1, [r4, #0]
 800a6d4:	6054      	str	r4, [r2, #4]
 800a6d6:	e7ca      	b.n	800a66e <_free_r+0x26>
 800a6d8:	b003      	add	sp, #12
 800a6da:	bd30      	pop	{r4, r5, pc}
 800a6dc:	200016f8 	.word	0x200016f8

0800a6e0 <sbrk_aligned>:
 800a6e0:	b570      	push	{r4, r5, r6, lr}
 800a6e2:	4e0e      	ldr	r6, [pc, #56]	; (800a71c <sbrk_aligned+0x3c>)
 800a6e4:	460c      	mov	r4, r1
 800a6e6:	6831      	ldr	r1, [r6, #0]
 800a6e8:	4605      	mov	r5, r0
 800a6ea:	b911      	cbnz	r1, 800a6f2 <sbrk_aligned+0x12>
 800a6ec:	f000 f91a 	bl	800a924 <_sbrk_r>
 800a6f0:	6030      	str	r0, [r6, #0]
 800a6f2:	4621      	mov	r1, r4
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	f000 f915 	bl	800a924 <_sbrk_r>
 800a6fa:	1c43      	adds	r3, r0, #1
 800a6fc:	d00a      	beq.n	800a714 <sbrk_aligned+0x34>
 800a6fe:	1cc4      	adds	r4, r0, #3
 800a700:	f024 0403 	bic.w	r4, r4, #3
 800a704:	42a0      	cmp	r0, r4
 800a706:	d007      	beq.n	800a718 <sbrk_aligned+0x38>
 800a708:	1a21      	subs	r1, r4, r0
 800a70a:	4628      	mov	r0, r5
 800a70c:	f000 f90a 	bl	800a924 <_sbrk_r>
 800a710:	3001      	adds	r0, #1
 800a712:	d101      	bne.n	800a718 <sbrk_aligned+0x38>
 800a714:	f04f 34ff 	mov.w	r4, #4294967295
 800a718:	4620      	mov	r0, r4
 800a71a:	bd70      	pop	{r4, r5, r6, pc}
 800a71c:	200016fc 	.word	0x200016fc

0800a720 <_malloc_r>:
 800a720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a724:	1ccd      	adds	r5, r1, #3
 800a726:	f025 0503 	bic.w	r5, r5, #3
 800a72a:	3508      	adds	r5, #8
 800a72c:	2d0c      	cmp	r5, #12
 800a72e:	bf38      	it	cc
 800a730:	250c      	movcc	r5, #12
 800a732:	2d00      	cmp	r5, #0
 800a734:	4607      	mov	r7, r0
 800a736:	db01      	blt.n	800a73c <_malloc_r+0x1c>
 800a738:	42a9      	cmp	r1, r5
 800a73a:	d905      	bls.n	800a748 <_malloc_r+0x28>
 800a73c:	230c      	movs	r3, #12
 800a73e:	603b      	str	r3, [r7, #0]
 800a740:	2600      	movs	r6, #0
 800a742:	4630      	mov	r0, r6
 800a744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a748:	4e2e      	ldr	r6, [pc, #184]	; (800a804 <_malloc_r+0xe4>)
 800a74a:	f001 fc7b 	bl	800c044 <__malloc_lock>
 800a74e:	6833      	ldr	r3, [r6, #0]
 800a750:	461c      	mov	r4, r3
 800a752:	bb34      	cbnz	r4, 800a7a2 <_malloc_r+0x82>
 800a754:	4629      	mov	r1, r5
 800a756:	4638      	mov	r0, r7
 800a758:	f7ff ffc2 	bl	800a6e0 <sbrk_aligned>
 800a75c:	1c43      	adds	r3, r0, #1
 800a75e:	4604      	mov	r4, r0
 800a760:	d14d      	bne.n	800a7fe <_malloc_r+0xde>
 800a762:	6834      	ldr	r4, [r6, #0]
 800a764:	4626      	mov	r6, r4
 800a766:	2e00      	cmp	r6, #0
 800a768:	d140      	bne.n	800a7ec <_malloc_r+0xcc>
 800a76a:	6823      	ldr	r3, [r4, #0]
 800a76c:	4631      	mov	r1, r6
 800a76e:	4638      	mov	r0, r7
 800a770:	eb04 0803 	add.w	r8, r4, r3
 800a774:	f000 f8d6 	bl	800a924 <_sbrk_r>
 800a778:	4580      	cmp	r8, r0
 800a77a:	d13a      	bne.n	800a7f2 <_malloc_r+0xd2>
 800a77c:	6821      	ldr	r1, [r4, #0]
 800a77e:	3503      	adds	r5, #3
 800a780:	1a6d      	subs	r5, r5, r1
 800a782:	f025 0503 	bic.w	r5, r5, #3
 800a786:	3508      	adds	r5, #8
 800a788:	2d0c      	cmp	r5, #12
 800a78a:	bf38      	it	cc
 800a78c:	250c      	movcc	r5, #12
 800a78e:	4629      	mov	r1, r5
 800a790:	4638      	mov	r0, r7
 800a792:	f7ff ffa5 	bl	800a6e0 <sbrk_aligned>
 800a796:	3001      	adds	r0, #1
 800a798:	d02b      	beq.n	800a7f2 <_malloc_r+0xd2>
 800a79a:	6823      	ldr	r3, [r4, #0]
 800a79c:	442b      	add	r3, r5
 800a79e:	6023      	str	r3, [r4, #0]
 800a7a0:	e00e      	b.n	800a7c0 <_malloc_r+0xa0>
 800a7a2:	6822      	ldr	r2, [r4, #0]
 800a7a4:	1b52      	subs	r2, r2, r5
 800a7a6:	d41e      	bmi.n	800a7e6 <_malloc_r+0xc6>
 800a7a8:	2a0b      	cmp	r2, #11
 800a7aa:	d916      	bls.n	800a7da <_malloc_r+0xba>
 800a7ac:	1961      	adds	r1, r4, r5
 800a7ae:	42a3      	cmp	r3, r4
 800a7b0:	6025      	str	r5, [r4, #0]
 800a7b2:	bf18      	it	ne
 800a7b4:	6059      	strne	r1, [r3, #4]
 800a7b6:	6863      	ldr	r3, [r4, #4]
 800a7b8:	bf08      	it	eq
 800a7ba:	6031      	streq	r1, [r6, #0]
 800a7bc:	5162      	str	r2, [r4, r5]
 800a7be:	604b      	str	r3, [r1, #4]
 800a7c0:	4638      	mov	r0, r7
 800a7c2:	f104 060b 	add.w	r6, r4, #11
 800a7c6:	f001 fc43 	bl	800c050 <__malloc_unlock>
 800a7ca:	f026 0607 	bic.w	r6, r6, #7
 800a7ce:	1d23      	adds	r3, r4, #4
 800a7d0:	1af2      	subs	r2, r6, r3
 800a7d2:	d0b6      	beq.n	800a742 <_malloc_r+0x22>
 800a7d4:	1b9b      	subs	r3, r3, r6
 800a7d6:	50a3      	str	r3, [r4, r2]
 800a7d8:	e7b3      	b.n	800a742 <_malloc_r+0x22>
 800a7da:	6862      	ldr	r2, [r4, #4]
 800a7dc:	42a3      	cmp	r3, r4
 800a7de:	bf0c      	ite	eq
 800a7e0:	6032      	streq	r2, [r6, #0]
 800a7e2:	605a      	strne	r2, [r3, #4]
 800a7e4:	e7ec      	b.n	800a7c0 <_malloc_r+0xa0>
 800a7e6:	4623      	mov	r3, r4
 800a7e8:	6864      	ldr	r4, [r4, #4]
 800a7ea:	e7b2      	b.n	800a752 <_malloc_r+0x32>
 800a7ec:	4634      	mov	r4, r6
 800a7ee:	6876      	ldr	r6, [r6, #4]
 800a7f0:	e7b9      	b.n	800a766 <_malloc_r+0x46>
 800a7f2:	230c      	movs	r3, #12
 800a7f4:	603b      	str	r3, [r7, #0]
 800a7f6:	4638      	mov	r0, r7
 800a7f8:	f001 fc2a 	bl	800c050 <__malloc_unlock>
 800a7fc:	e7a1      	b.n	800a742 <_malloc_r+0x22>
 800a7fe:	6025      	str	r5, [r4, #0]
 800a800:	e7de      	b.n	800a7c0 <_malloc_r+0xa0>
 800a802:	bf00      	nop
 800a804:	200016f8 	.word	0x200016f8

0800a808 <iprintf>:
 800a808:	b40f      	push	{r0, r1, r2, r3}
 800a80a:	4b0a      	ldr	r3, [pc, #40]	; (800a834 <iprintf+0x2c>)
 800a80c:	b513      	push	{r0, r1, r4, lr}
 800a80e:	681c      	ldr	r4, [r3, #0]
 800a810:	b124      	cbz	r4, 800a81c <iprintf+0x14>
 800a812:	69a3      	ldr	r3, [r4, #24]
 800a814:	b913      	cbnz	r3, 800a81c <iprintf+0x14>
 800a816:	4620      	mov	r0, r4
 800a818:	f7ff fdac 	bl	800a374 <__sinit>
 800a81c:	ab05      	add	r3, sp, #20
 800a81e:	9a04      	ldr	r2, [sp, #16]
 800a820:	68a1      	ldr	r1, [r4, #8]
 800a822:	9301      	str	r3, [sp, #4]
 800a824:	4620      	mov	r0, r4
 800a826:	f002 faa5 	bl	800cd74 <_vfiprintf_r>
 800a82a:	b002      	add	sp, #8
 800a82c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a830:	b004      	add	sp, #16
 800a832:	4770      	bx	lr
 800a834:	20000024 	.word	0x20000024

0800a838 <_puts_r>:
 800a838:	b570      	push	{r4, r5, r6, lr}
 800a83a:	460e      	mov	r6, r1
 800a83c:	4605      	mov	r5, r0
 800a83e:	b118      	cbz	r0, 800a848 <_puts_r+0x10>
 800a840:	6983      	ldr	r3, [r0, #24]
 800a842:	b90b      	cbnz	r3, 800a848 <_puts_r+0x10>
 800a844:	f7ff fd96 	bl	800a374 <__sinit>
 800a848:	69ab      	ldr	r3, [r5, #24]
 800a84a:	68ac      	ldr	r4, [r5, #8]
 800a84c:	b913      	cbnz	r3, 800a854 <_puts_r+0x1c>
 800a84e:	4628      	mov	r0, r5
 800a850:	f7ff fd90 	bl	800a374 <__sinit>
 800a854:	4b2c      	ldr	r3, [pc, #176]	; (800a908 <_puts_r+0xd0>)
 800a856:	429c      	cmp	r4, r3
 800a858:	d120      	bne.n	800a89c <_puts_r+0x64>
 800a85a:	686c      	ldr	r4, [r5, #4]
 800a85c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a85e:	07db      	lsls	r3, r3, #31
 800a860:	d405      	bmi.n	800a86e <_puts_r+0x36>
 800a862:	89a3      	ldrh	r3, [r4, #12]
 800a864:	0598      	lsls	r0, r3, #22
 800a866:	d402      	bmi.n	800a86e <_puts_r+0x36>
 800a868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a86a:	f7ff fe46 	bl	800a4fa <__retarget_lock_acquire_recursive>
 800a86e:	89a3      	ldrh	r3, [r4, #12]
 800a870:	0719      	lsls	r1, r3, #28
 800a872:	d51d      	bpl.n	800a8b0 <_puts_r+0x78>
 800a874:	6923      	ldr	r3, [r4, #16]
 800a876:	b1db      	cbz	r3, 800a8b0 <_puts_r+0x78>
 800a878:	3e01      	subs	r6, #1
 800a87a:	68a3      	ldr	r3, [r4, #8]
 800a87c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a880:	3b01      	subs	r3, #1
 800a882:	60a3      	str	r3, [r4, #8]
 800a884:	bb39      	cbnz	r1, 800a8d6 <_puts_r+0x9e>
 800a886:	2b00      	cmp	r3, #0
 800a888:	da38      	bge.n	800a8fc <_puts_r+0xc4>
 800a88a:	4622      	mov	r2, r4
 800a88c:	210a      	movs	r1, #10
 800a88e:	4628      	mov	r0, r5
 800a890:	f000 ff40 	bl	800b714 <__swbuf_r>
 800a894:	3001      	adds	r0, #1
 800a896:	d011      	beq.n	800a8bc <_puts_r+0x84>
 800a898:	250a      	movs	r5, #10
 800a89a:	e011      	b.n	800a8c0 <_puts_r+0x88>
 800a89c:	4b1b      	ldr	r3, [pc, #108]	; (800a90c <_puts_r+0xd4>)
 800a89e:	429c      	cmp	r4, r3
 800a8a0:	d101      	bne.n	800a8a6 <_puts_r+0x6e>
 800a8a2:	68ac      	ldr	r4, [r5, #8]
 800a8a4:	e7da      	b.n	800a85c <_puts_r+0x24>
 800a8a6:	4b1a      	ldr	r3, [pc, #104]	; (800a910 <_puts_r+0xd8>)
 800a8a8:	429c      	cmp	r4, r3
 800a8aa:	bf08      	it	eq
 800a8ac:	68ec      	ldreq	r4, [r5, #12]
 800a8ae:	e7d5      	b.n	800a85c <_puts_r+0x24>
 800a8b0:	4621      	mov	r1, r4
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	f000 ff92 	bl	800b7dc <__swsetup_r>
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	d0dd      	beq.n	800a878 <_puts_r+0x40>
 800a8bc:	f04f 35ff 	mov.w	r5, #4294967295
 800a8c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8c2:	07da      	lsls	r2, r3, #31
 800a8c4:	d405      	bmi.n	800a8d2 <_puts_r+0x9a>
 800a8c6:	89a3      	ldrh	r3, [r4, #12]
 800a8c8:	059b      	lsls	r3, r3, #22
 800a8ca:	d402      	bmi.n	800a8d2 <_puts_r+0x9a>
 800a8cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8ce:	f7ff fe15 	bl	800a4fc <__retarget_lock_release_recursive>
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	bd70      	pop	{r4, r5, r6, pc}
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	da04      	bge.n	800a8e4 <_puts_r+0xac>
 800a8da:	69a2      	ldr	r2, [r4, #24]
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	dc06      	bgt.n	800a8ee <_puts_r+0xb6>
 800a8e0:	290a      	cmp	r1, #10
 800a8e2:	d004      	beq.n	800a8ee <_puts_r+0xb6>
 800a8e4:	6823      	ldr	r3, [r4, #0]
 800a8e6:	1c5a      	adds	r2, r3, #1
 800a8e8:	6022      	str	r2, [r4, #0]
 800a8ea:	7019      	strb	r1, [r3, #0]
 800a8ec:	e7c5      	b.n	800a87a <_puts_r+0x42>
 800a8ee:	4622      	mov	r2, r4
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	f000 ff0f 	bl	800b714 <__swbuf_r>
 800a8f6:	3001      	adds	r0, #1
 800a8f8:	d1bf      	bne.n	800a87a <_puts_r+0x42>
 800a8fa:	e7df      	b.n	800a8bc <_puts_r+0x84>
 800a8fc:	6823      	ldr	r3, [r4, #0]
 800a8fe:	250a      	movs	r5, #10
 800a900:	1c5a      	adds	r2, r3, #1
 800a902:	6022      	str	r2, [r4, #0]
 800a904:	701d      	strb	r5, [r3, #0]
 800a906:	e7db      	b.n	800a8c0 <_puts_r+0x88>
 800a908:	0800e270 	.word	0x0800e270
 800a90c:	0800e290 	.word	0x0800e290
 800a910:	0800e250 	.word	0x0800e250

0800a914 <puts>:
 800a914:	4b02      	ldr	r3, [pc, #8]	; (800a920 <puts+0xc>)
 800a916:	4601      	mov	r1, r0
 800a918:	6818      	ldr	r0, [r3, #0]
 800a91a:	f7ff bf8d 	b.w	800a838 <_puts_r>
 800a91e:	bf00      	nop
 800a920:	20000024 	.word	0x20000024

0800a924 <_sbrk_r>:
 800a924:	b538      	push	{r3, r4, r5, lr}
 800a926:	4d06      	ldr	r5, [pc, #24]	; (800a940 <_sbrk_r+0x1c>)
 800a928:	2300      	movs	r3, #0
 800a92a:	4604      	mov	r4, r0
 800a92c:	4608      	mov	r0, r1
 800a92e:	602b      	str	r3, [r5, #0]
 800a930:	f7f9 ff78 	bl	8004824 <_sbrk>
 800a934:	1c43      	adds	r3, r0, #1
 800a936:	d102      	bne.n	800a93e <_sbrk_r+0x1a>
 800a938:	682b      	ldr	r3, [r5, #0]
 800a93a:	b103      	cbz	r3, 800a93e <_sbrk_r+0x1a>
 800a93c:	6023      	str	r3, [r4, #0]
 800a93e:	bd38      	pop	{r3, r4, r5, pc}
 800a940:	20001700 	.word	0x20001700

0800a944 <siprintf>:
 800a944:	b40e      	push	{r1, r2, r3}
 800a946:	b500      	push	{lr}
 800a948:	b09c      	sub	sp, #112	; 0x70
 800a94a:	ab1d      	add	r3, sp, #116	; 0x74
 800a94c:	9002      	str	r0, [sp, #8]
 800a94e:	9006      	str	r0, [sp, #24]
 800a950:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a954:	4809      	ldr	r0, [pc, #36]	; (800a97c <siprintf+0x38>)
 800a956:	9107      	str	r1, [sp, #28]
 800a958:	9104      	str	r1, [sp, #16]
 800a95a:	4909      	ldr	r1, [pc, #36]	; (800a980 <siprintf+0x3c>)
 800a95c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a960:	9105      	str	r1, [sp, #20]
 800a962:	6800      	ldr	r0, [r0, #0]
 800a964:	9301      	str	r3, [sp, #4]
 800a966:	a902      	add	r1, sp, #8
 800a968:	f002 f8da 	bl	800cb20 <_svfiprintf_r>
 800a96c:	9b02      	ldr	r3, [sp, #8]
 800a96e:	2200      	movs	r2, #0
 800a970:	701a      	strb	r2, [r3, #0]
 800a972:	b01c      	add	sp, #112	; 0x70
 800a974:	f85d eb04 	ldr.w	lr, [sp], #4
 800a978:	b003      	add	sp, #12
 800a97a:	4770      	bx	lr
 800a97c:	20000024 	.word	0x20000024
 800a980:	ffff0208 	.word	0xffff0208

0800a984 <__sread>:
 800a984:	b510      	push	{r4, lr}
 800a986:	460c      	mov	r4, r1
 800a988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a98c:	f002 fcb6 	bl	800d2fc <_read_r>
 800a990:	2800      	cmp	r0, #0
 800a992:	bfab      	itete	ge
 800a994:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a996:	89a3      	ldrhlt	r3, [r4, #12]
 800a998:	181b      	addge	r3, r3, r0
 800a99a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a99e:	bfac      	ite	ge
 800a9a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9a2:	81a3      	strhlt	r3, [r4, #12]
 800a9a4:	bd10      	pop	{r4, pc}

0800a9a6 <__swrite>:
 800a9a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9aa:	461f      	mov	r7, r3
 800a9ac:	898b      	ldrh	r3, [r1, #12]
 800a9ae:	05db      	lsls	r3, r3, #23
 800a9b0:	4605      	mov	r5, r0
 800a9b2:	460c      	mov	r4, r1
 800a9b4:	4616      	mov	r6, r2
 800a9b6:	d505      	bpl.n	800a9c4 <__swrite+0x1e>
 800a9b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9bc:	2302      	movs	r3, #2
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f001 fb1c 	bl	800bffc <_lseek_r>
 800a9c4:	89a3      	ldrh	r3, [r4, #12]
 800a9c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9ce:	81a3      	strh	r3, [r4, #12]
 800a9d0:	4632      	mov	r2, r6
 800a9d2:	463b      	mov	r3, r7
 800a9d4:	4628      	mov	r0, r5
 800a9d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9da:	f000 beed 	b.w	800b7b8 <_write_r>

0800a9de <__sseek>:
 800a9de:	b510      	push	{r4, lr}
 800a9e0:	460c      	mov	r4, r1
 800a9e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9e6:	f001 fb09 	bl	800bffc <_lseek_r>
 800a9ea:	1c43      	adds	r3, r0, #1
 800a9ec:	89a3      	ldrh	r3, [r4, #12]
 800a9ee:	bf15      	itete	ne
 800a9f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9fa:	81a3      	strheq	r3, [r4, #12]
 800a9fc:	bf18      	it	ne
 800a9fe:	81a3      	strhne	r3, [r4, #12]
 800aa00:	bd10      	pop	{r4, pc}

0800aa02 <__sclose>:
 800aa02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa06:	f000 bf57 	b.w	800b8b8 <_close_r>

0800aa0a <strchr>:
 800aa0a:	b2c9      	uxtb	r1, r1
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa12:	b11a      	cbz	r2, 800aa1c <strchr+0x12>
 800aa14:	428a      	cmp	r2, r1
 800aa16:	d1f9      	bne.n	800aa0c <strchr+0x2>
 800aa18:	4618      	mov	r0, r3
 800aa1a:	4770      	bx	lr
 800aa1c:	2900      	cmp	r1, #0
 800aa1e:	bf18      	it	ne
 800aa20:	2300      	movne	r3, #0
 800aa22:	e7f9      	b.n	800aa18 <strchr+0xe>

0800aa24 <strncmp>:
 800aa24:	b510      	push	{r4, lr}
 800aa26:	b17a      	cbz	r2, 800aa48 <strncmp+0x24>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	3901      	subs	r1, #1
 800aa2c:	1884      	adds	r4, r0, r2
 800aa2e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aa32:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aa36:	4290      	cmp	r0, r2
 800aa38:	d101      	bne.n	800aa3e <strncmp+0x1a>
 800aa3a:	42a3      	cmp	r3, r4
 800aa3c:	d101      	bne.n	800aa42 <strncmp+0x1e>
 800aa3e:	1a80      	subs	r0, r0, r2
 800aa40:	bd10      	pop	{r4, pc}
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d1f3      	bne.n	800aa2e <strncmp+0xa>
 800aa46:	e7fa      	b.n	800aa3e <strncmp+0x1a>
 800aa48:	4610      	mov	r0, r2
 800aa4a:	e7f9      	b.n	800aa40 <strncmp+0x1c>

0800aa4c <strstr>:
 800aa4c:	780a      	ldrb	r2, [r1, #0]
 800aa4e:	b570      	push	{r4, r5, r6, lr}
 800aa50:	b96a      	cbnz	r2, 800aa6e <strstr+0x22>
 800aa52:	bd70      	pop	{r4, r5, r6, pc}
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d109      	bne.n	800aa6c <strstr+0x20>
 800aa58:	460c      	mov	r4, r1
 800aa5a:	4605      	mov	r5, r0
 800aa5c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d0f6      	beq.n	800aa52 <strstr+0x6>
 800aa64:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800aa68:	429e      	cmp	r6, r3
 800aa6a:	d0f7      	beq.n	800aa5c <strstr+0x10>
 800aa6c:	3001      	adds	r0, #1
 800aa6e:	7803      	ldrb	r3, [r0, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d1ef      	bne.n	800aa54 <strstr+0x8>
 800aa74:	4618      	mov	r0, r3
 800aa76:	e7ec      	b.n	800aa52 <strstr+0x6>

0800aa78 <sulp>:
 800aa78:	b570      	push	{r4, r5, r6, lr}
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	460d      	mov	r5, r1
 800aa7e:	ec45 4b10 	vmov	d0, r4, r5
 800aa82:	4616      	mov	r6, r2
 800aa84:	f001 fe5c 	bl	800c740 <__ulp>
 800aa88:	ec51 0b10 	vmov	r0, r1, d0
 800aa8c:	b17e      	cbz	r6, 800aaae <sulp+0x36>
 800aa8e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aa92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	dd09      	ble.n	800aaae <sulp+0x36>
 800aa9a:	051b      	lsls	r3, r3, #20
 800aa9c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aaa0:	2400      	movs	r4, #0
 800aaa2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aaa6:	4622      	mov	r2, r4
 800aaa8:	462b      	mov	r3, r5
 800aaaa:	f7f5 fd7d 	bl	80005a8 <__aeabi_dmul>
 800aaae:	bd70      	pop	{r4, r5, r6, pc}

0800aab0 <_strtod_l>:
 800aab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab4:	ed2d 8b02 	vpush	{d8}
 800aab8:	b09d      	sub	sp, #116	; 0x74
 800aaba:	461f      	mov	r7, r3
 800aabc:	2300      	movs	r3, #0
 800aabe:	9318      	str	r3, [sp, #96]	; 0x60
 800aac0:	4ba2      	ldr	r3, [pc, #648]	; (800ad4c <_strtod_l+0x29c>)
 800aac2:	9213      	str	r2, [sp, #76]	; 0x4c
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	9305      	str	r3, [sp, #20]
 800aac8:	4604      	mov	r4, r0
 800aaca:	4618      	mov	r0, r3
 800aacc:	4688      	mov	r8, r1
 800aace:	f7f5 fb57 	bl	8000180 <strlen>
 800aad2:	f04f 0a00 	mov.w	sl, #0
 800aad6:	4605      	mov	r5, r0
 800aad8:	f04f 0b00 	mov.w	fp, #0
 800aadc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800aae0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aae2:	781a      	ldrb	r2, [r3, #0]
 800aae4:	2a2b      	cmp	r2, #43	; 0x2b
 800aae6:	d04e      	beq.n	800ab86 <_strtod_l+0xd6>
 800aae8:	d83b      	bhi.n	800ab62 <_strtod_l+0xb2>
 800aaea:	2a0d      	cmp	r2, #13
 800aaec:	d834      	bhi.n	800ab58 <_strtod_l+0xa8>
 800aaee:	2a08      	cmp	r2, #8
 800aaf0:	d834      	bhi.n	800ab5c <_strtod_l+0xac>
 800aaf2:	2a00      	cmp	r2, #0
 800aaf4:	d03e      	beq.n	800ab74 <_strtod_l+0xc4>
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	930a      	str	r3, [sp, #40]	; 0x28
 800aafa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800aafc:	7833      	ldrb	r3, [r6, #0]
 800aafe:	2b30      	cmp	r3, #48	; 0x30
 800ab00:	f040 80b0 	bne.w	800ac64 <_strtod_l+0x1b4>
 800ab04:	7873      	ldrb	r3, [r6, #1]
 800ab06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ab0a:	2b58      	cmp	r3, #88	; 0x58
 800ab0c:	d168      	bne.n	800abe0 <_strtod_l+0x130>
 800ab0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab10:	9301      	str	r3, [sp, #4]
 800ab12:	ab18      	add	r3, sp, #96	; 0x60
 800ab14:	9702      	str	r7, [sp, #8]
 800ab16:	9300      	str	r3, [sp, #0]
 800ab18:	4a8d      	ldr	r2, [pc, #564]	; (800ad50 <_strtod_l+0x2a0>)
 800ab1a:	ab19      	add	r3, sp, #100	; 0x64
 800ab1c:	a917      	add	r1, sp, #92	; 0x5c
 800ab1e:	4620      	mov	r0, r4
 800ab20:	f000 ff54 	bl	800b9cc <__gethex>
 800ab24:	f010 0707 	ands.w	r7, r0, #7
 800ab28:	4605      	mov	r5, r0
 800ab2a:	d005      	beq.n	800ab38 <_strtod_l+0x88>
 800ab2c:	2f06      	cmp	r7, #6
 800ab2e:	d12c      	bne.n	800ab8a <_strtod_l+0xda>
 800ab30:	3601      	adds	r6, #1
 800ab32:	2300      	movs	r3, #0
 800ab34:	9617      	str	r6, [sp, #92]	; 0x5c
 800ab36:	930a      	str	r3, [sp, #40]	; 0x28
 800ab38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	f040 8590 	bne.w	800b660 <_strtod_l+0xbb0>
 800ab40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab42:	b1eb      	cbz	r3, 800ab80 <_strtod_l+0xd0>
 800ab44:	4652      	mov	r2, sl
 800ab46:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ab4a:	ec43 2b10 	vmov	d0, r2, r3
 800ab4e:	b01d      	add	sp, #116	; 0x74
 800ab50:	ecbd 8b02 	vpop	{d8}
 800ab54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab58:	2a20      	cmp	r2, #32
 800ab5a:	d1cc      	bne.n	800aaf6 <_strtod_l+0x46>
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab60:	e7be      	b.n	800aae0 <_strtod_l+0x30>
 800ab62:	2a2d      	cmp	r2, #45	; 0x2d
 800ab64:	d1c7      	bne.n	800aaf6 <_strtod_l+0x46>
 800ab66:	2201      	movs	r2, #1
 800ab68:	920a      	str	r2, [sp, #40]	; 0x28
 800ab6a:	1c5a      	adds	r2, r3, #1
 800ab6c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ab6e:	785b      	ldrb	r3, [r3, #1]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d1c2      	bne.n	800aafa <_strtod_l+0x4a>
 800ab74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab76:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	f040 856e 	bne.w	800b65c <_strtod_l+0xbac>
 800ab80:	4652      	mov	r2, sl
 800ab82:	465b      	mov	r3, fp
 800ab84:	e7e1      	b.n	800ab4a <_strtod_l+0x9a>
 800ab86:	2200      	movs	r2, #0
 800ab88:	e7ee      	b.n	800ab68 <_strtod_l+0xb8>
 800ab8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ab8c:	b13a      	cbz	r2, 800ab9e <_strtod_l+0xee>
 800ab8e:	2135      	movs	r1, #53	; 0x35
 800ab90:	a81a      	add	r0, sp, #104	; 0x68
 800ab92:	f001 fee0 	bl	800c956 <__copybits>
 800ab96:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ab98:	4620      	mov	r0, r4
 800ab9a:	f001 fa9f 	bl	800c0dc <_Bfree>
 800ab9e:	3f01      	subs	r7, #1
 800aba0:	2f04      	cmp	r7, #4
 800aba2:	d806      	bhi.n	800abb2 <_strtod_l+0x102>
 800aba4:	e8df f007 	tbb	[pc, r7]
 800aba8:	1714030a 	.word	0x1714030a
 800abac:	0a          	.byte	0x0a
 800abad:	00          	.byte	0x00
 800abae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800abb2:	0728      	lsls	r0, r5, #28
 800abb4:	d5c0      	bpl.n	800ab38 <_strtod_l+0x88>
 800abb6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800abba:	e7bd      	b.n	800ab38 <_strtod_l+0x88>
 800abbc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800abc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800abc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800abc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800abca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800abce:	e7f0      	b.n	800abb2 <_strtod_l+0x102>
 800abd0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ad54 <_strtod_l+0x2a4>
 800abd4:	e7ed      	b.n	800abb2 <_strtod_l+0x102>
 800abd6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800abda:	f04f 3aff 	mov.w	sl, #4294967295
 800abde:	e7e8      	b.n	800abb2 <_strtod_l+0x102>
 800abe0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abe2:	1c5a      	adds	r2, r3, #1
 800abe4:	9217      	str	r2, [sp, #92]	; 0x5c
 800abe6:	785b      	ldrb	r3, [r3, #1]
 800abe8:	2b30      	cmp	r3, #48	; 0x30
 800abea:	d0f9      	beq.n	800abe0 <_strtod_l+0x130>
 800abec:	2b00      	cmp	r3, #0
 800abee:	d0a3      	beq.n	800ab38 <_strtod_l+0x88>
 800abf0:	2301      	movs	r3, #1
 800abf2:	f04f 0900 	mov.w	r9, #0
 800abf6:	9304      	str	r3, [sp, #16]
 800abf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abfa:	9308      	str	r3, [sp, #32]
 800abfc:	f8cd 901c 	str.w	r9, [sp, #28]
 800ac00:	464f      	mov	r7, r9
 800ac02:	220a      	movs	r2, #10
 800ac04:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ac06:	7806      	ldrb	r6, [r0, #0]
 800ac08:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ac0c:	b2d9      	uxtb	r1, r3
 800ac0e:	2909      	cmp	r1, #9
 800ac10:	d92a      	bls.n	800ac68 <_strtod_l+0x1b8>
 800ac12:	9905      	ldr	r1, [sp, #20]
 800ac14:	462a      	mov	r2, r5
 800ac16:	f7ff ff05 	bl	800aa24 <strncmp>
 800ac1a:	b398      	cbz	r0, 800ac84 <_strtod_l+0x1d4>
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	4632      	mov	r2, r6
 800ac20:	463d      	mov	r5, r7
 800ac22:	9005      	str	r0, [sp, #20]
 800ac24:	4603      	mov	r3, r0
 800ac26:	2a65      	cmp	r2, #101	; 0x65
 800ac28:	d001      	beq.n	800ac2e <_strtod_l+0x17e>
 800ac2a:	2a45      	cmp	r2, #69	; 0x45
 800ac2c:	d118      	bne.n	800ac60 <_strtod_l+0x1b0>
 800ac2e:	b91d      	cbnz	r5, 800ac38 <_strtod_l+0x188>
 800ac30:	9a04      	ldr	r2, [sp, #16]
 800ac32:	4302      	orrs	r2, r0
 800ac34:	d09e      	beq.n	800ab74 <_strtod_l+0xc4>
 800ac36:	2500      	movs	r5, #0
 800ac38:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ac3c:	f108 0201 	add.w	r2, r8, #1
 800ac40:	9217      	str	r2, [sp, #92]	; 0x5c
 800ac42:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ac46:	2a2b      	cmp	r2, #43	; 0x2b
 800ac48:	d075      	beq.n	800ad36 <_strtod_l+0x286>
 800ac4a:	2a2d      	cmp	r2, #45	; 0x2d
 800ac4c:	d07b      	beq.n	800ad46 <_strtod_l+0x296>
 800ac4e:	f04f 0c00 	mov.w	ip, #0
 800ac52:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ac56:	2909      	cmp	r1, #9
 800ac58:	f240 8082 	bls.w	800ad60 <_strtod_l+0x2b0>
 800ac5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ac60:	2600      	movs	r6, #0
 800ac62:	e09d      	b.n	800ada0 <_strtod_l+0x2f0>
 800ac64:	2300      	movs	r3, #0
 800ac66:	e7c4      	b.n	800abf2 <_strtod_l+0x142>
 800ac68:	2f08      	cmp	r7, #8
 800ac6a:	bfd8      	it	le
 800ac6c:	9907      	ldrle	r1, [sp, #28]
 800ac6e:	f100 0001 	add.w	r0, r0, #1
 800ac72:	bfda      	itte	le
 800ac74:	fb02 3301 	mlale	r3, r2, r1, r3
 800ac78:	9307      	strle	r3, [sp, #28]
 800ac7a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ac7e:	3701      	adds	r7, #1
 800ac80:	9017      	str	r0, [sp, #92]	; 0x5c
 800ac82:	e7bf      	b.n	800ac04 <_strtod_l+0x154>
 800ac84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac86:	195a      	adds	r2, r3, r5
 800ac88:	9217      	str	r2, [sp, #92]	; 0x5c
 800ac8a:	5d5a      	ldrb	r2, [r3, r5]
 800ac8c:	2f00      	cmp	r7, #0
 800ac8e:	d037      	beq.n	800ad00 <_strtod_l+0x250>
 800ac90:	9005      	str	r0, [sp, #20]
 800ac92:	463d      	mov	r5, r7
 800ac94:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ac98:	2b09      	cmp	r3, #9
 800ac9a:	d912      	bls.n	800acc2 <_strtod_l+0x212>
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e7c2      	b.n	800ac26 <_strtod_l+0x176>
 800aca0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aca2:	1c5a      	adds	r2, r3, #1
 800aca4:	9217      	str	r2, [sp, #92]	; 0x5c
 800aca6:	785a      	ldrb	r2, [r3, #1]
 800aca8:	3001      	adds	r0, #1
 800acaa:	2a30      	cmp	r2, #48	; 0x30
 800acac:	d0f8      	beq.n	800aca0 <_strtod_l+0x1f0>
 800acae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800acb2:	2b08      	cmp	r3, #8
 800acb4:	f200 84d9 	bhi.w	800b66a <_strtod_l+0xbba>
 800acb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acba:	9005      	str	r0, [sp, #20]
 800acbc:	2000      	movs	r0, #0
 800acbe:	9308      	str	r3, [sp, #32]
 800acc0:	4605      	mov	r5, r0
 800acc2:	3a30      	subs	r2, #48	; 0x30
 800acc4:	f100 0301 	add.w	r3, r0, #1
 800acc8:	d014      	beq.n	800acf4 <_strtod_l+0x244>
 800acca:	9905      	ldr	r1, [sp, #20]
 800accc:	4419      	add	r1, r3
 800acce:	9105      	str	r1, [sp, #20]
 800acd0:	462b      	mov	r3, r5
 800acd2:	eb00 0e05 	add.w	lr, r0, r5
 800acd6:	210a      	movs	r1, #10
 800acd8:	4573      	cmp	r3, lr
 800acda:	d113      	bne.n	800ad04 <_strtod_l+0x254>
 800acdc:	182b      	adds	r3, r5, r0
 800acde:	2b08      	cmp	r3, #8
 800ace0:	f105 0501 	add.w	r5, r5, #1
 800ace4:	4405      	add	r5, r0
 800ace6:	dc1c      	bgt.n	800ad22 <_strtod_l+0x272>
 800ace8:	9907      	ldr	r1, [sp, #28]
 800acea:	230a      	movs	r3, #10
 800acec:	fb03 2301 	mla	r3, r3, r1, r2
 800acf0:	9307      	str	r3, [sp, #28]
 800acf2:	2300      	movs	r3, #0
 800acf4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800acf6:	1c51      	adds	r1, r2, #1
 800acf8:	9117      	str	r1, [sp, #92]	; 0x5c
 800acfa:	7852      	ldrb	r2, [r2, #1]
 800acfc:	4618      	mov	r0, r3
 800acfe:	e7c9      	b.n	800ac94 <_strtod_l+0x1e4>
 800ad00:	4638      	mov	r0, r7
 800ad02:	e7d2      	b.n	800acaa <_strtod_l+0x1fa>
 800ad04:	2b08      	cmp	r3, #8
 800ad06:	dc04      	bgt.n	800ad12 <_strtod_l+0x262>
 800ad08:	9e07      	ldr	r6, [sp, #28]
 800ad0a:	434e      	muls	r6, r1
 800ad0c:	9607      	str	r6, [sp, #28]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	e7e2      	b.n	800acd8 <_strtod_l+0x228>
 800ad12:	f103 0c01 	add.w	ip, r3, #1
 800ad16:	f1bc 0f10 	cmp.w	ip, #16
 800ad1a:	bfd8      	it	le
 800ad1c:	fb01 f909 	mulle.w	r9, r1, r9
 800ad20:	e7f5      	b.n	800ad0e <_strtod_l+0x25e>
 800ad22:	2d10      	cmp	r5, #16
 800ad24:	bfdc      	itt	le
 800ad26:	230a      	movle	r3, #10
 800ad28:	fb03 2909 	mlale	r9, r3, r9, r2
 800ad2c:	e7e1      	b.n	800acf2 <_strtod_l+0x242>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	9305      	str	r3, [sp, #20]
 800ad32:	2301      	movs	r3, #1
 800ad34:	e77c      	b.n	800ac30 <_strtod_l+0x180>
 800ad36:	f04f 0c00 	mov.w	ip, #0
 800ad3a:	f108 0202 	add.w	r2, r8, #2
 800ad3e:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad40:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ad44:	e785      	b.n	800ac52 <_strtod_l+0x1a2>
 800ad46:	f04f 0c01 	mov.w	ip, #1
 800ad4a:	e7f6      	b.n	800ad3a <_strtod_l+0x28a>
 800ad4c:	0800e388 	.word	0x0800e388
 800ad50:	0800e2c0 	.word	0x0800e2c0
 800ad54:	7ff00000 	.word	0x7ff00000
 800ad58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad5a:	1c51      	adds	r1, r2, #1
 800ad5c:	9117      	str	r1, [sp, #92]	; 0x5c
 800ad5e:	7852      	ldrb	r2, [r2, #1]
 800ad60:	2a30      	cmp	r2, #48	; 0x30
 800ad62:	d0f9      	beq.n	800ad58 <_strtod_l+0x2a8>
 800ad64:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ad68:	2908      	cmp	r1, #8
 800ad6a:	f63f af79 	bhi.w	800ac60 <_strtod_l+0x1b0>
 800ad6e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ad72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad74:	9206      	str	r2, [sp, #24]
 800ad76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad78:	1c51      	adds	r1, r2, #1
 800ad7a:	9117      	str	r1, [sp, #92]	; 0x5c
 800ad7c:	7852      	ldrb	r2, [r2, #1]
 800ad7e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ad82:	2e09      	cmp	r6, #9
 800ad84:	d937      	bls.n	800adf6 <_strtod_l+0x346>
 800ad86:	9e06      	ldr	r6, [sp, #24]
 800ad88:	1b89      	subs	r1, r1, r6
 800ad8a:	2908      	cmp	r1, #8
 800ad8c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ad90:	dc02      	bgt.n	800ad98 <_strtod_l+0x2e8>
 800ad92:	4576      	cmp	r6, lr
 800ad94:	bfa8      	it	ge
 800ad96:	4676      	movge	r6, lr
 800ad98:	f1bc 0f00 	cmp.w	ip, #0
 800ad9c:	d000      	beq.n	800ada0 <_strtod_l+0x2f0>
 800ad9e:	4276      	negs	r6, r6
 800ada0:	2d00      	cmp	r5, #0
 800ada2:	d14d      	bne.n	800ae40 <_strtod_l+0x390>
 800ada4:	9904      	ldr	r1, [sp, #16]
 800ada6:	4301      	orrs	r1, r0
 800ada8:	f47f aec6 	bne.w	800ab38 <_strtod_l+0x88>
 800adac:	2b00      	cmp	r3, #0
 800adae:	f47f aee1 	bne.w	800ab74 <_strtod_l+0xc4>
 800adb2:	2a69      	cmp	r2, #105	; 0x69
 800adb4:	d027      	beq.n	800ae06 <_strtod_l+0x356>
 800adb6:	dc24      	bgt.n	800ae02 <_strtod_l+0x352>
 800adb8:	2a49      	cmp	r2, #73	; 0x49
 800adba:	d024      	beq.n	800ae06 <_strtod_l+0x356>
 800adbc:	2a4e      	cmp	r2, #78	; 0x4e
 800adbe:	f47f aed9 	bne.w	800ab74 <_strtod_l+0xc4>
 800adc2:	499f      	ldr	r1, [pc, #636]	; (800b040 <_strtod_l+0x590>)
 800adc4:	a817      	add	r0, sp, #92	; 0x5c
 800adc6:	f001 f859 	bl	800be7c <__match>
 800adca:	2800      	cmp	r0, #0
 800adcc:	f43f aed2 	beq.w	800ab74 <_strtod_l+0xc4>
 800add0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	2b28      	cmp	r3, #40	; 0x28
 800add6:	d12d      	bne.n	800ae34 <_strtod_l+0x384>
 800add8:	499a      	ldr	r1, [pc, #616]	; (800b044 <_strtod_l+0x594>)
 800adda:	aa1a      	add	r2, sp, #104	; 0x68
 800addc:	a817      	add	r0, sp, #92	; 0x5c
 800adde:	f001 f861 	bl	800bea4 <__hexnan>
 800ade2:	2805      	cmp	r0, #5
 800ade4:	d126      	bne.n	800ae34 <_strtod_l+0x384>
 800ade6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ade8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800adec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800adf0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800adf4:	e6a0      	b.n	800ab38 <_strtod_l+0x88>
 800adf6:	210a      	movs	r1, #10
 800adf8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800adfc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ae00:	e7b9      	b.n	800ad76 <_strtod_l+0x2c6>
 800ae02:	2a6e      	cmp	r2, #110	; 0x6e
 800ae04:	e7db      	b.n	800adbe <_strtod_l+0x30e>
 800ae06:	4990      	ldr	r1, [pc, #576]	; (800b048 <_strtod_l+0x598>)
 800ae08:	a817      	add	r0, sp, #92	; 0x5c
 800ae0a:	f001 f837 	bl	800be7c <__match>
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	f43f aeb0 	beq.w	800ab74 <_strtod_l+0xc4>
 800ae14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae16:	498d      	ldr	r1, [pc, #564]	; (800b04c <_strtod_l+0x59c>)
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	a817      	add	r0, sp, #92	; 0x5c
 800ae1c:	9317      	str	r3, [sp, #92]	; 0x5c
 800ae1e:	f001 f82d 	bl	800be7c <__match>
 800ae22:	b910      	cbnz	r0, 800ae2a <_strtod_l+0x37a>
 800ae24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae26:	3301      	adds	r3, #1
 800ae28:	9317      	str	r3, [sp, #92]	; 0x5c
 800ae2a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b05c <_strtod_l+0x5ac>
 800ae2e:	f04f 0a00 	mov.w	sl, #0
 800ae32:	e681      	b.n	800ab38 <_strtod_l+0x88>
 800ae34:	4886      	ldr	r0, [pc, #536]	; (800b050 <_strtod_l+0x5a0>)
 800ae36:	f002 fa73 	bl	800d320 <nan>
 800ae3a:	ec5b ab10 	vmov	sl, fp, d0
 800ae3e:	e67b      	b.n	800ab38 <_strtod_l+0x88>
 800ae40:	9b05      	ldr	r3, [sp, #20]
 800ae42:	9807      	ldr	r0, [sp, #28]
 800ae44:	1af3      	subs	r3, r6, r3
 800ae46:	2f00      	cmp	r7, #0
 800ae48:	bf08      	it	eq
 800ae4a:	462f      	moveq	r7, r5
 800ae4c:	2d10      	cmp	r5, #16
 800ae4e:	9306      	str	r3, [sp, #24]
 800ae50:	46a8      	mov	r8, r5
 800ae52:	bfa8      	it	ge
 800ae54:	f04f 0810 	movge.w	r8, #16
 800ae58:	f7f5 fb2c 	bl	80004b4 <__aeabi_ui2d>
 800ae5c:	2d09      	cmp	r5, #9
 800ae5e:	4682      	mov	sl, r0
 800ae60:	468b      	mov	fp, r1
 800ae62:	dd13      	ble.n	800ae8c <_strtod_l+0x3dc>
 800ae64:	4b7b      	ldr	r3, [pc, #492]	; (800b054 <_strtod_l+0x5a4>)
 800ae66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ae6a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ae6e:	f7f5 fb9b 	bl	80005a8 <__aeabi_dmul>
 800ae72:	4682      	mov	sl, r0
 800ae74:	4648      	mov	r0, r9
 800ae76:	468b      	mov	fp, r1
 800ae78:	f7f5 fb1c 	bl	80004b4 <__aeabi_ui2d>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	460b      	mov	r3, r1
 800ae80:	4650      	mov	r0, sl
 800ae82:	4659      	mov	r1, fp
 800ae84:	f7f5 f9da 	bl	800023c <__adddf3>
 800ae88:	4682      	mov	sl, r0
 800ae8a:	468b      	mov	fp, r1
 800ae8c:	2d0f      	cmp	r5, #15
 800ae8e:	dc38      	bgt.n	800af02 <_strtod_l+0x452>
 800ae90:	9b06      	ldr	r3, [sp, #24]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f43f ae50 	beq.w	800ab38 <_strtod_l+0x88>
 800ae98:	dd24      	ble.n	800aee4 <_strtod_l+0x434>
 800ae9a:	2b16      	cmp	r3, #22
 800ae9c:	dc0b      	bgt.n	800aeb6 <_strtod_l+0x406>
 800ae9e:	496d      	ldr	r1, [pc, #436]	; (800b054 <_strtod_l+0x5a4>)
 800aea0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aea8:	4652      	mov	r2, sl
 800aeaa:	465b      	mov	r3, fp
 800aeac:	f7f5 fb7c 	bl	80005a8 <__aeabi_dmul>
 800aeb0:	4682      	mov	sl, r0
 800aeb2:	468b      	mov	fp, r1
 800aeb4:	e640      	b.n	800ab38 <_strtod_l+0x88>
 800aeb6:	9a06      	ldr	r2, [sp, #24]
 800aeb8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800aebc:	4293      	cmp	r3, r2
 800aebe:	db20      	blt.n	800af02 <_strtod_l+0x452>
 800aec0:	4c64      	ldr	r4, [pc, #400]	; (800b054 <_strtod_l+0x5a4>)
 800aec2:	f1c5 050f 	rsb	r5, r5, #15
 800aec6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aeca:	4652      	mov	r2, sl
 800aecc:	465b      	mov	r3, fp
 800aece:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aed2:	f7f5 fb69 	bl	80005a8 <__aeabi_dmul>
 800aed6:	9b06      	ldr	r3, [sp, #24]
 800aed8:	1b5d      	subs	r5, r3, r5
 800aeda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800aede:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aee2:	e7e3      	b.n	800aeac <_strtod_l+0x3fc>
 800aee4:	9b06      	ldr	r3, [sp, #24]
 800aee6:	3316      	adds	r3, #22
 800aee8:	db0b      	blt.n	800af02 <_strtod_l+0x452>
 800aeea:	9b05      	ldr	r3, [sp, #20]
 800aeec:	1b9e      	subs	r6, r3, r6
 800aeee:	4b59      	ldr	r3, [pc, #356]	; (800b054 <_strtod_l+0x5a4>)
 800aef0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800aef4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aef8:	4650      	mov	r0, sl
 800aefa:	4659      	mov	r1, fp
 800aefc:	f7f5 fc7e 	bl	80007fc <__aeabi_ddiv>
 800af00:	e7d6      	b.n	800aeb0 <_strtod_l+0x400>
 800af02:	9b06      	ldr	r3, [sp, #24]
 800af04:	eba5 0808 	sub.w	r8, r5, r8
 800af08:	4498      	add	r8, r3
 800af0a:	f1b8 0f00 	cmp.w	r8, #0
 800af0e:	dd74      	ble.n	800affa <_strtod_l+0x54a>
 800af10:	f018 030f 	ands.w	r3, r8, #15
 800af14:	d00a      	beq.n	800af2c <_strtod_l+0x47c>
 800af16:	494f      	ldr	r1, [pc, #316]	; (800b054 <_strtod_l+0x5a4>)
 800af18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af1c:	4652      	mov	r2, sl
 800af1e:	465b      	mov	r3, fp
 800af20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af24:	f7f5 fb40 	bl	80005a8 <__aeabi_dmul>
 800af28:	4682      	mov	sl, r0
 800af2a:	468b      	mov	fp, r1
 800af2c:	f038 080f 	bics.w	r8, r8, #15
 800af30:	d04f      	beq.n	800afd2 <_strtod_l+0x522>
 800af32:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800af36:	dd22      	ble.n	800af7e <_strtod_l+0x4ce>
 800af38:	2500      	movs	r5, #0
 800af3a:	462e      	mov	r6, r5
 800af3c:	9507      	str	r5, [sp, #28]
 800af3e:	9505      	str	r5, [sp, #20]
 800af40:	2322      	movs	r3, #34	; 0x22
 800af42:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b05c <_strtod_l+0x5ac>
 800af46:	6023      	str	r3, [r4, #0]
 800af48:	f04f 0a00 	mov.w	sl, #0
 800af4c:	9b07      	ldr	r3, [sp, #28]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	f43f adf2 	beq.w	800ab38 <_strtod_l+0x88>
 800af54:	9918      	ldr	r1, [sp, #96]	; 0x60
 800af56:	4620      	mov	r0, r4
 800af58:	f001 f8c0 	bl	800c0dc <_Bfree>
 800af5c:	9905      	ldr	r1, [sp, #20]
 800af5e:	4620      	mov	r0, r4
 800af60:	f001 f8bc 	bl	800c0dc <_Bfree>
 800af64:	4631      	mov	r1, r6
 800af66:	4620      	mov	r0, r4
 800af68:	f001 f8b8 	bl	800c0dc <_Bfree>
 800af6c:	9907      	ldr	r1, [sp, #28]
 800af6e:	4620      	mov	r0, r4
 800af70:	f001 f8b4 	bl	800c0dc <_Bfree>
 800af74:	4629      	mov	r1, r5
 800af76:	4620      	mov	r0, r4
 800af78:	f001 f8b0 	bl	800c0dc <_Bfree>
 800af7c:	e5dc      	b.n	800ab38 <_strtod_l+0x88>
 800af7e:	4b36      	ldr	r3, [pc, #216]	; (800b058 <_strtod_l+0x5a8>)
 800af80:	9304      	str	r3, [sp, #16]
 800af82:	2300      	movs	r3, #0
 800af84:	ea4f 1828 	mov.w	r8, r8, asr #4
 800af88:	4650      	mov	r0, sl
 800af8a:	4659      	mov	r1, fp
 800af8c:	4699      	mov	r9, r3
 800af8e:	f1b8 0f01 	cmp.w	r8, #1
 800af92:	dc21      	bgt.n	800afd8 <_strtod_l+0x528>
 800af94:	b10b      	cbz	r3, 800af9a <_strtod_l+0x4ea>
 800af96:	4682      	mov	sl, r0
 800af98:	468b      	mov	fp, r1
 800af9a:	4b2f      	ldr	r3, [pc, #188]	; (800b058 <_strtod_l+0x5a8>)
 800af9c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800afa0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800afa4:	4652      	mov	r2, sl
 800afa6:	465b      	mov	r3, fp
 800afa8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800afac:	f7f5 fafc 	bl	80005a8 <__aeabi_dmul>
 800afb0:	4b2a      	ldr	r3, [pc, #168]	; (800b05c <_strtod_l+0x5ac>)
 800afb2:	460a      	mov	r2, r1
 800afb4:	400b      	ands	r3, r1
 800afb6:	492a      	ldr	r1, [pc, #168]	; (800b060 <_strtod_l+0x5b0>)
 800afb8:	428b      	cmp	r3, r1
 800afba:	4682      	mov	sl, r0
 800afbc:	d8bc      	bhi.n	800af38 <_strtod_l+0x488>
 800afbe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800afc2:	428b      	cmp	r3, r1
 800afc4:	bf86      	itte	hi
 800afc6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b064 <_strtod_l+0x5b4>
 800afca:	f04f 3aff 	movhi.w	sl, #4294967295
 800afce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800afd2:	2300      	movs	r3, #0
 800afd4:	9304      	str	r3, [sp, #16]
 800afd6:	e084      	b.n	800b0e2 <_strtod_l+0x632>
 800afd8:	f018 0f01 	tst.w	r8, #1
 800afdc:	d005      	beq.n	800afea <_strtod_l+0x53a>
 800afde:	9b04      	ldr	r3, [sp, #16]
 800afe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe4:	f7f5 fae0 	bl	80005a8 <__aeabi_dmul>
 800afe8:	2301      	movs	r3, #1
 800afea:	9a04      	ldr	r2, [sp, #16]
 800afec:	3208      	adds	r2, #8
 800afee:	f109 0901 	add.w	r9, r9, #1
 800aff2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aff6:	9204      	str	r2, [sp, #16]
 800aff8:	e7c9      	b.n	800af8e <_strtod_l+0x4de>
 800affa:	d0ea      	beq.n	800afd2 <_strtod_l+0x522>
 800affc:	f1c8 0800 	rsb	r8, r8, #0
 800b000:	f018 020f 	ands.w	r2, r8, #15
 800b004:	d00a      	beq.n	800b01c <_strtod_l+0x56c>
 800b006:	4b13      	ldr	r3, [pc, #76]	; (800b054 <_strtod_l+0x5a4>)
 800b008:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b00c:	4650      	mov	r0, sl
 800b00e:	4659      	mov	r1, fp
 800b010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b014:	f7f5 fbf2 	bl	80007fc <__aeabi_ddiv>
 800b018:	4682      	mov	sl, r0
 800b01a:	468b      	mov	fp, r1
 800b01c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b020:	d0d7      	beq.n	800afd2 <_strtod_l+0x522>
 800b022:	f1b8 0f1f 	cmp.w	r8, #31
 800b026:	dd1f      	ble.n	800b068 <_strtod_l+0x5b8>
 800b028:	2500      	movs	r5, #0
 800b02a:	462e      	mov	r6, r5
 800b02c:	9507      	str	r5, [sp, #28]
 800b02e:	9505      	str	r5, [sp, #20]
 800b030:	2322      	movs	r3, #34	; 0x22
 800b032:	f04f 0a00 	mov.w	sl, #0
 800b036:	f04f 0b00 	mov.w	fp, #0
 800b03a:	6023      	str	r3, [r4, #0]
 800b03c:	e786      	b.n	800af4c <_strtod_l+0x49c>
 800b03e:	bf00      	nop
 800b040:	0800e2bd 	.word	0x0800e2bd
 800b044:	0800e2d4 	.word	0x0800e2d4
 800b048:	0800e2b4 	.word	0x0800e2b4
 800b04c:	0800e2b7 	.word	0x0800e2b7
 800b050:	0800e57a 	.word	0x0800e57a
 800b054:	0800e438 	.word	0x0800e438
 800b058:	0800e410 	.word	0x0800e410
 800b05c:	7ff00000 	.word	0x7ff00000
 800b060:	7ca00000 	.word	0x7ca00000
 800b064:	7fefffff 	.word	0x7fefffff
 800b068:	f018 0310 	ands.w	r3, r8, #16
 800b06c:	bf18      	it	ne
 800b06e:	236a      	movne	r3, #106	; 0x6a
 800b070:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b420 <_strtod_l+0x970>
 800b074:	9304      	str	r3, [sp, #16]
 800b076:	4650      	mov	r0, sl
 800b078:	4659      	mov	r1, fp
 800b07a:	2300      	movs	r3, #0
 800b07c:	f018 0f01 	tst.w	r8, #1
 800b080:	d004      	beq.n	800b08c <_strtod_l+0x5dc>
 800b082:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b086:	f7f5 fa8f 	bl	80005a8 <__aeabi_dmul>
 800b08a:	2301      	movs	r3, #1
 800b08c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b090:	f109 0908 	add.w	r9, r9, #8
 800b094:	d1f2      	bne.n	800b07c <_strtod_l+0x5cc>
 800b096:	b10b      	cbz	r3, 800b09c <_strtod_l+0x5ec>
 800b098:	4682      	mov	sl, r0
 800b09a:	468b      	mov	fp, r1
 800b09c:	9b04      	ldr	r3, [sp, #16]
 800b09e:	b1c3      	cbz	r3, 800b0d2 <_strtod_l+0x622>
 800b0a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b0a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	4659      	mov	r1, fp
 800b0ac:	dd11      	ble.n	800b0d2 <_strtod_l+0x622>
 800b0ae:	2b1f      	cmp	r3, #31
 800b0b0:	f340 8124 	ble.w	800b2fc <_strtod_l+0x84c>
 800b0b4:	2b34      	cmp	r3, #52	; 0x34
 800b0b6:	bfde      	ittt	le
 800b0b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b0bc:	f04f 33ff 	movle.w	r3, #4294967295
 800b0c0:	fa03 f202 	lslle.w	r2, r3, r2
 800b0c4:	f04f 0a00 	mov.w	sl, #0
 800b0c8:	bfcc      	ite	gt
 800b0ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b0ce:	ea02 0b01 	andle.w	fp, r2, r1
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	4650      	mov	r0, sl
 800b0d8:	4659      	mov	r1, fp
 800b0da:	f7f5 fccd 	bl	8000a78 <__aeabi_dcmpeq>
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	d1a2      	bne.n	800b028 <_strtod_l+0x578>
 800b0e2:	9b07      	ldr	r3, [sp, #28]
 800b0e4:	9300      	str	r3, [sp, #0]
 800b0e6:	9908      	ldr	r1, [sp, #32]
 800b0e8:	462b      	mov	r3, r5
 800b0ea:	463a      	mov	r2, r7
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	f001 f85d 	bl	800c1ac <__s2b>
 800b0f2:	9007      	str	r0, [sp, #28]
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	f43f af1f 	beq.w	800af38 <_strtod_l+0x488>
 800b0fa:	9b05      	ldr	r3, [sp, #20]
 800b0fc:	1b9e      	subs	r6, r3, r6
 800b0fe:	9b06      	ldr	r3, [sp, #24]
 800b100:	2b00      	cmp	r3, #0
 800b102:	bfb4      	ite	lt
 800b104:	4633      	movlt	r3, r6
 800b106:	2300      	movge	r3, #0
 800b108:	930c      	str	r3, [sp, #48]	; 0x30
 800b10a:	9b06      	ldr	r3, [sp, #24]
 800b10c:	2500      	movs	r5, #0
 800b10e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b112:	9312      	str	r3, [sp, #72]	; 0x48
 800b114:	462e      	mov	r6, r5
 800b116:	9b07      	ldr	r3, [sp, #28]
 800b118:	4620      	mov	r0, r4
 800b11a:	6859      	ldr	r1, [r3, #4]
 800b11c:	f000 ff9e 	bl	800c05c <_Balloc>
 800b120:	9005      	str	r0, [sp, #20]
 800b122:	2800      	cmp	r0, #0
 800b124:	f43f af0c 	beq.w	800af40 <_strtod_l+0x490>
 800b128:	9b07      	ldr	r3, [sp, #28]
 800b12a:	691a      	ldr	r2, [r3, #16]
 800b12c:	3202      	adds	r2, #2
 800b12e:	f103 010c 	add.w	r1, r3, #12
 800b132:	0092      	lsls	r2, r2, #2
 800b134:	300c      	adds	r0, #12
 800b136:	f7ff fa57 	bl	800a5e8 <memcpy>
 800b13a:	ec4b ab10 	vmov	d0, sl, fp
 800b13e:	aa1a      	add	r2, sp, #104	; 0x68
 800b140:	a919      	add	r1, sp, #100	; 0x64
 800b142:	4620      	mov	r0, r4
 800b144:	f001 fb78 	bl	800c838 <__d2b>
 800b148:	ec4b ab18 	vmov	d8, sl, fp
 800b14c:	9018      	str	r0, [sp, #96]	; 0x60
 800b14e:	2800      	cmp	r0, #0
 800b150:	f43f aef6 	beq.w	800af40 <_strtod_l+0x490>
 800b154:	2101      	movs	r1, #1
 800b156:	4620      	mov	r0, r4
 800b158:	f001 f8c2 	bl	800c2e0 <__i2b>
 800b15c:	4606      	mov	r6, r0
 800b15e:	2800      	cmp	r0, #0
 800b160:	f43f aeee 	beq.w	800af40 <_strtod_l+0x490>
 800b164:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b166:	9904      	ldr	r1, [sp, #16]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	bfab      	itete	ge
 800b16c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b16e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b170:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b172:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b176:	bfac      	ite	ge
 800b178:	eb03 0902 	addge.w	r9, r3, r2
 800b17c:	1ad7      	sublt	r7, r2, r3
 800b17e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b180:	eba3 0801 	sub.w	r8, r3, r1
 800b184:	4490      	add	r8, r2
 800b186:	4ba1      	ldr	r3, [pc, #644]	; (800b40c <_strtod_l+0x95c>)
 800b188:	f108 38ff 	add.w	r8, r8, #4294967295
 800b18c:	4598      	cmp	r8, r3
 800b18e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b192:	f280 80c7 	bge.w	800b324 <_strtod_l+0x874>
 800b196:	eba3 0308 	sub.w	r3, r3, r8
 800b19a:	2b1f      	cmp	r3, #31
 800b19c:	eba2 0203 	sub.w	r2, r2, r3
 800b1a0:	f04f 0101 	mov.w	r1, #1
 800b1a4:	f300 80b1 	bgt.w	800b30a <_strtod_l+0x85a>
 800b1a8:	fa01 f303 	lsl.w	r3, r1, r3
 800b1ac:	930d      	str	r3, [sp, #52]	; 0x34
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	9308      	str	r3, [sp, #32]
 800b1b2:	eb09 0802 	add.w	r8, r9, r2
 800b1b6:	9b04      	ldr	r3, [sp, #16]
 800b1b8:	45c1      	cmp	r9, r8
 800b1ba:	4417      	add	r7, r2
 800b1bc:	441f      	add	r7, r3
 800b1be:	464b      	mov	r3, r9
 800b1c0:	bfa8      	it	ge
 800b1c2:	4643      	movge	r3, r8
 800b1c4:	42bb      	cmp	r3, r7
 800b1c6:	bfa8      	it	ge
 800b1c8:	463b      	movge	r3, r7
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	bfc2      	ittt	gt
 800b1ce:	eba8 0803 	subgt.w	r8, r8, r3
 800b1d2:	1aff      	subgt	r7, r7, r3
 800b1d4:	eba9 0903 	subgt.w	r9, r9, r3
 800b1d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	dd17      	ble.n	800b20e <_strtod_l+0x75e>
 800b1de:	4631      	mov	r1, r6
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	f001 f93c 	bl	800c460 <__pow5mult>
 800b1e8:	4606      	mov	r6, r0
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	f43f aea8 	beq.w	800af40 <_strtod_l+0x490>
 800b1f0:	4601      	mov	r1, r0
 800b1f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	f001 f889 	bl	800c30c <__multiply>
 800b1fa:	900b      	str	r0, [sp, #44]	; 0x2c
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	f43f ae9f 	beq.w	800af40 <_strtod_l+0x490>
 800b202:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b204:	4620      	mov	r0, r4
 800b206:	f000 ff69 	bl	800c0dc <_Bfree>
 800b20a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b20c:	9318      	str	r3, [sp, #96]	; 0x60
 800b20e:	f1b8 0f00 	cmp.w	r8, #0
 800b212:	f300 808c 	bgt.w	800b32e <_strtod_l+0x87e>
 800b216:	9b06      	ldr	r3, [sp, #24]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	dd08      	ble.n	800b22e <_strtod_l+0x77e>
 800b21c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b21e:	9905      	ldr	r1, [sp, #20]
 800b220:	4620      	mov	r0, r4
 800b222:	f001 f91d 	bl	800c460 <__pow5mult>
 800b226:	9005      	str	r0, [sp, #20]
 800b228:	2800      	cmp	r0, #0
 800b22a:	f43f ae89 	beq.w	800af40 <_strtod_l+0x490>
 800b22e:	2f00      	cmp	r7, #0
 800b230:	dd08      	ble.n	800b244 <_strtod_l+0x794>
 800b232:	9905      	ldr	r1, [sp, #20]
 800b234:	463a      	mov	r2, r7
 800b236:	4620      	mov	r0, r4
 800b238:	f001 f96c 	bl	800c514 <__lshift>
 800b23c:	9005      	str	r0, [sp, #20]
 800b23e:	2800      	cmp	r0, #0
 800b240:	f43f ae7e 	beq.w	800af40 <_strtod_l+0x490>
 800b244:	f1b9 0f00 	cmp.w	r9, #0
 800b248:	dd08      	ble.n	800b25c <_strtod_l+0x7ac>
 800b24a:	4631      	mov	r1, r6
 800b24c:	464a      	mov	r2, r9
 800b24e:	4620      	mov	r0, r4
 800b250:	f001 f960 	bl	800c514 <__lshift>
 800b254:	4606      	mov	r6, r0
 800b256:	2800      	cmp	r0, #0
 800b258:	f43f ae72 	beq.w	800af40 <_strtod_l+0x490>
 800b25c:	9a05      	ldr	r2, [sp, #20]
 800b25e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b260:	4620      	mov	r0, r4
 800b262:	f001 f9e3 	bl	800c62c <__mdiff>
 800b266:	4605      	mov	r5, r0
 800b268:	2800      	cmp	r0, #0
 800b26a:	f43f ae69 	beq.w	800af40 <_strtod_l+0x490>
 800b26e:	68c3      	ldr	r3, [r0, #12]
 800b270:	930b      	str	r3, [sp, #44]	; 0x2c
 800b272:	2300      	movs	r3, #0
 800b274:	60c3      	str	r3, [r0, #12]
 800b276:	4631      	mov	r1, r6
 800b278:	f001 f9bc 	bl	800c5f4 <__mcmp>
 800b27c:	2800      	cmp	r0, #0
 800b27e:	da60      	bge.n	800b342 <_strtod_l+0x892>
 800b280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b282:	ea53 030a 	orrs.w	r3, r3, sl
 800b286:	f040 8082 	bne.w	800b38e <_strtod_l+0x8de>
 800b28a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d17d      	bne.n	800b38e <_strtod_l+0x8de>
 800b292:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b296:	0d1b      	lsrs	r3, r3, #20
 800b298:	051b      	lsls	r3, r3, #20
 800b29a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b29e:	d976      	bls.n	800b38e <_strtod_l+0x8de>
 800b2a0:	696b      	ldr	r3, [r5, #20]
 800b2a2:	b913      	cbnz	r3, 800b2aa <_strtod_l+0x7fa>
 800b2a4:	692b      	ldr	r3, [r5, #16]
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	dd71      	ble.n	800b38e <_strtod_l+0x8de>
 800b2aa:	4629      	mov	r1, r5
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	f001 f930 	bl	800c514 <__lshift>
 800b2b4:	4631      	mov	r1, r6
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	f001 f99c 	bl	800c5f4 <__mcmp>
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	dd66      	ble.n	800b38e <_strtod_l+0x8de>
 800b2c0:	9904      	ldr	r1, [sp, #16]
 800b2c2:	4a53      	ldr	r2, [pc, #332]	; (800b410 <_strtod_l+0x960>)
 800b2c4:	465b      	mov	r3, fp
 800b2c6:	2900      	cmp	r1, #0
 800b2c8:	f000 8081 	beq.w	800b3ce <_strtod_l+0x91e>
 800b2cc:	ea02 010b 	and.w	r1, r2, fp
 800b2d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b2d4:	dc7b      	bgt.n	800b3ce <_strtod_l+0x91e>
 800b2d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b2da:	f77f aea9 	ble.w	800b030 <_strtod_l+0x580>
 800b2de:	4b4d      	ldr	r3, [pc, #308]	; (800b414 <_strtod_l+0x964>)
 800b2e0:	4650      	mov	r0, sl
 800b2e2:	4659      	mov	r1, fp
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f7f5 f95f 	bl	80005a8 <__aeabi_dmul>
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	4303      	orrs	r3, r0
 800b2ee:	bf08      	it	eq
 800b2f0:	2322      	moveq	r3, #34	; 0x22
 800b2f2:	4682      	mov	sl, r0
 800b2f4:	468b      	mov	fp, r1
 800b2f6:	bf08      	it	eq
 800b2f8:	6023      	streq	r3, [r4, #0]
 800b2fa:	e62b      	b.n	800af54 <_strtod_l+0x4a4>
 800b2fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b300:	fa02 f303 	lsl.w	r3, r2, r3
 800b304:	ea03 0a0a 	and.w	sl, r3, sl
 800b308:	e6e3      	b.n	800b0d2 <_strtod_l+0x622>
 800b30a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b30e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b312:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b316:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b31a:	fa01 f308 	lsl.w	r3, r1, r8
 800b31e:	9308      	str	r3, [sp, #32]
 800b320:	910d      	str	r1, [sp, #52]	; 0x34
 800b322:	e746      	b.n	800b1b2 <_strtod_l+0x702>
 800b324:	2300      	movs	r3, #0
 800b326:	9308      	str	r3, [sp, #32]
 800b328:	2301      	movs	r3, #1
 800b32a:	930d      	str	r3, [sp, #52]	; 0x34
 800b32c:	e741      	b.n	800b1b2 <_strtod_l+0x702>
 800b32e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b330:	4642      	mov	r2, r8
 800b332:	4620      	mov	r0, r4
 800b334:	f001 f8ee 	bl	800c514 <__lshift>
 800b338:	9018      	str	r0, [sp, #96]	; 0x60
 800b33a:	2800      	cmp	r0, #0
 800b33c:	f47f af6b 	bne.w	800b216 <_strtod_l+0x766>
 800b340:	e5fe      	b.n	800af40 <_strtod_l+0x490>
 800b342:	465f      	mov	r7, fp
 800b344:	d16e      	bne.n	800b424 <_strtod_l+0x974>
 800b346:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b348:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b34c:	b342      	cbz	r2, 800b3a0 <_strtod_l+0x8f0>
 800b34e:	4a32      	ldr	r2, [pc, #200]	; (800b418 <_strtod_l+0x968>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d128      	bne.n	800b3a6 <_strtod_l+0x8f6>
 800b354:	9b04      	ldr	r3, [sp, #16]
 800b356:	4651      	mov	r1, sl
 800b358:	b1eb      	cbz	r3, 800b396 <_strtod_l+0x8e6>
 800b35a:	4b2d      	ldr	r3, [pc, #180]	; (800b410 <_strtod_l+0x960>)
 800b35c:	403b      	ands	r3, r7
 800b35e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b362:	f04f 32ff 	mov.w	r2, #4294967295
 800b366:	d819      	bhi.n	800b39c <_strtod_l+0x8ec>
 800b368:	0d1b      	lsrs	r3, r3, #20
 800b36a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b36e:	fa02 f303 	lsl.w	r3, r2, r3
 800b372:	4299      	cmp	r1, r3
 800b374:	d117      	bne.n	800b3a6 <_strtod_l+0x8f6>
 800b376:	4b29      	ldr	r3, [pc, #164]	; (800b41c <_strtod_l+0x96c>)
 800b378:	429f      	cmp	r7, r3
 800b37a:	d102      	bne.n	800b382 <_strtod_l+0x8d2>
 800b37c:	3101      	adds	r1, #1
 800b37e:	f43f addf 	beq.w	800af40 <_strtod_l+0x490>
 800b382:	4b23      	ldr	r3, [pc, #140]	; (800b410 <_strtod_l+0x960>)
 800b384:	403b      	ands	r3, r7
 800b386:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b38a:	f04f 0a00 	mov.w	sl, #0
 800b38e:	9b04      	ldr	r3, [sp, #16]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d1a4      	bne.n	800b2de <_strtod_l+0x82e>
 800b394:	e5de      	b.n	800af54 <_strtod_l+0x4a4>
 800b396:	f04f 33ff 	mov.w	r3, #4294967295
 800b39a:	e7ea      	b.n	800b372 <_strtod_l+0x8c2>
 800b39c:	4613      	mov	r3, r2
 800b39e:	e7e8      	b.n	800b372 <_strtod_l+0x8c2>
 800b3a0:	ea53 030a 	orrs.w	r3, r3, sl
 800b3a4:	d08c      	beq.n	800b2c0 <_strtod_l+0x810>
 800b3a6:	9b08      	ldr	r3, [sp, #32]
 800b3a8:	b1db      	cbz	r3, 800b3e2 <_strtod_l+0x932>
 800b3aa:	423b      	tst	r3, r7
 800b3ac:	d0ef      	beq.n	800b38e <_strtod_l+0x8de>
 800b3ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3b0:	9a04      	ldr	r2, [sp, #16]
 800b3b2:	4650      	mov	r0, sl
 800b3b4:	4659      	mov	r1, fp
 800b3b6:	b1c3      	cbz	r3, 800b3ea <_strtod_l+0x93a>
 800b3b8:	f7ff fb5e 	bl	800aa78 <sulp>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	460b      	mov	r3, r1
 800b3c0:	ec51 0b18 	vmov	r0, r1, d8
 800b3c4:	f7f4 ff3a 	bl	800023c <__adddf3>
 800b3c8:	4682      	mov	sl, r0
 800b3ca:	468b      	mov	fp, r1
 800b3cc:	e7df      	b.n	800b38e <_strtod_l+0x8de>
 800b3ce:	4013      	ands	r3, r2
 800b3d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b3d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b3d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b3dc:	f04f 3aff 	mov.w	sl, #4294967295
 800b3e0:	e7d5      	b.n	800b38e <_strtod_l+0x8de>
 800b3e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3e4:	ea13 0f0a 	tst.w	r3, sl
 800b3e8:	e7e0      	b.n	800b3ac <_strtod_l+0x8fc>
 800b3ea:	f7ff fb45 	bl	800aa78 <sulp>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	ec51 0b18 	vmov	r0, r1, d8
 800b3f6:	f7f4 ff1f 	bl	8000238 <__aeabi_dsub>
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	4682      	mov	sl, r0
 800b400:	468b      	mov	fp, r1
 800b402:	f7f5 fb39 	bl	8000a78 <__aeabi_dcmpeq>
 800b406:	2800      	cmp	r0, #0
 800b408:	d0c1      	beq.n	800b38e <_strtod_l+0x8de>
 800b40a:	e611      	b.n	800b030 <_strtod_l+0x580>
 800b40c:	fffffc02 	.word	0xfffffc02
 800b410:	7ff00000 	.word	0x7ff00000
 800b414:	39500000 	.word	0x39500000
 800b418:	000fffff 	.word	0x000fffff
 800b41c:	7fefffff 	.word	0x7fefffff
 800b420:	0800e2e8 	.word	0x0800e2e8
 800b424:	4631      	mov	r1, r6
 800b426:	4628      	mov	r0, r5
 800b428:	f001 fa62 	bl	800c8f0 <__ratio>
 800b42c:	ec59 8b10 	vmov	r8, r9, d0
 800b430:	ee10 0a10 	vmov	r0, s0
 800b434:	2200      	movs	r2, #0
 800b436:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b43a:	4649      	mov	r1, r9
 800b43c:	f7f5 fb30 	bl	8000aa0 <__aeabi_dcmple>
 800b440:	2800      	cmp	r0, #0
 800b442:	d07a      	beq.n	800b53a <_strtod_l+0xa8a>
 800b444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b446:	2b00      	cmp	r3, #0
 800b448:	d04a      	beq.n	800b4e0 <_strtod_l+0xa30>
 800b44a:	4b95      	ldr	r3, [pc, #596]	; (800b6a0 <_strtod_l+0xbf0>)
 800b44c:	2200      	movs	r2, #0
 800b44e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b452:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b6a0 <_strtod_l+0xbf0>
 800b456:	f04f 0800 	mov.w	r8, #0
 800b45a:	4b92      	ldr	r3, [pc, #584]	; (800b6a4 <_strtod_l+0xbf4>)
 800b45c:	403b      	ands	r3, r7
 800b45e:	930d      	str	r3, [sp, #52]	; 0x34
 800b460:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b462:	4b91      	ldr	r3, [pc, #580]	; (800b6a8 <_strtod_l+0xbf8>)
 800b464:	429a      	cmp	r2, r3
 800b466:	f040 80b0 	bne.w	800b5ca <_strtod_l+0xb1a>
 800b46a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b46e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b472:	ec4b ab10 	vmov	d0, sl, fp
 800b476:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b47a:	f001 f961 	bl	800c740 <__ulp>
 800b47e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b482:	ec53 2b10 	vmov	r2, r3, d0
 800b486:	f7f5 f88f 	bl	80005a8 <__aeabi_dmul>
 800b48a:	4652      	mov	r2, sl
 800b48c:	465b      	mov	r3, fp
 800b48e:	f7f4 fed5 	bl	800023c <__adddf3>
 800b492:	460b      	mov	r3, r1
 800b494:	4983      	ldr	r1, [pc, #524]	; (800b6a4 <_strtod_l+0xbf4>)
 800b496:	4a85      	ldr	r2, [pc, #532]	; (800b6ac <_strtod_l+0xbfc>)
 800b498:	4019      	ands	r1, r3
 800b49a:	4291      	cmp	r1, r2
 800b49c:	4682      	mov	sl, r0
 800b49e:	d960      	bls.n	800b562 <_strtod_l+0xab2>
 800b4a0:	ee18 3a90 	vmov	r3, s17
 800b4a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d104      	bne.n	800b4b6 <_strtod_l+0xa06>
 800b4ac:	ee18 3a10 	vmov	r3, s16
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	f43f ad45 	beq.w	800af40 <_strtod_l+0x490>
 800b4b6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b6b8 <_strtod_l+0xc08>
 800b4ba:	f04f 3aff 	mov.w	sl, #4294967295
 800b4be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	f000 fe0b 	bl	800c0dc <_Bfree>
 800b4c6:	9905      	ldr	r1, [sp, #20]
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f000 fe07 	bl	800c0dc <_Bfree>
 800b4ce:	4631      	mov	r1, r6
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f000 fe03 	bl	800c0dc <_Bfree>
 800b4d6:	4629      	mov	r1, r5
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f000 fdff 	bl	800c0dc <_Bfree>
 800b4de:	e61a      	b.n	800b116 <_strtod_l+0x666>
 800b4e0:	f1ba 0f00 	cmp.w	sl, #0
 800b4e4:	d11b      	bne.n	800b51e <_strtod_l+0xa6e>
 800b4e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b4ea:	b9f3      	cbnz	r3, 800b52a <_strtod_l+0xa7a>
 800b4ec:	4b6c      	ldr	r3, [pc, #432]	; (800b6a0 <_strtod_l+0xbf0>)
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	4640      	mov	r0, r8
 800b4f2:	4649      	mov	r1, r9
 800b4f4:	f7f5 faca 	bl	8000a8c <__aeabi_dcmplt>
 800b4f8:	b9d0      	cbnz	r0, 800b530 <_strtod_l+0xa80>
 800b4fa:	4640      	mov	r0, r8
 800b4fc:	4649      	mov	r1, r9
 800b4fe:	4b6c      	ldr	r3, [pc, #432]	; (800b6b0 <_strtod_l+0xc00>)
 800b500:	2200      	movs	r2, #0
 800b502:	f7f5 f851 	bl	80005a8 <__aeabi_dmul>
 800b506:	4680      	mov	r8, r0
 800b508:	4689      	mov	r9, r1
 800b50a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b50e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b512:	9315      	str	r3, [sp, #84]	; 0x54
 800b514:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b518:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b51c:	e79d      	b.n	800b45a <_strtod_l+0x9aa>
 800b51e:	f1ba 0f01 	cmp.w	sl, #1
 800b522:	d102      	bne.n	800b52a <_strtod_l+0xa7a>
 800b524:	2f00      	cmp	r7, #0
 800b526:	f43f ad83 	beq.w	800b030 <_strtod_l+0x580>
 800b52a:	4b62      	ldr	r3, [pc, #392]	; (800b6b4 <_strtod_l+0xc04>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	e78e      	b.n	800b44e <_strtod_l+0x99e>
 800b530:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b6b0 <_strtod_l+0xc00>
 800b534:	f04f 0800 	mov.w	r8, #0
 800b538:	e7e7      	b.n	800b50a <_strtod_l+0xa5a>
 800b53a:	4b5d      	ldr	r3, [pc, #372]	; (800b6b0 <_strtod_l+0xc00>)
 800b53c:	4640      	mov	r0, r8
 800b53e:	4649      	mov	r1, r9
 800b540:	2200      	movs	r2, #0
 800b542:	f7f5 f831 	bl	80005a8 <__aeabi_dmul>
 800b546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b548:	4680      	mov	r8, r0
 800b54a:	4689      	mov	r9, r1
 800b54c:	b933      	cbnz	r3, 800b55c <_strtod_l+0xaac>
 800b54e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b552:	900e      	str	r0, [sp, #56]	; 0x38
 800b554:	930f      	str	r3, [sp, #60]	; 0x3c
 800b556:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b55a:	e7dd      	b.n	800b518 <_strtod_l+0xa68>
 800b55c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b560:	e7f9      	b.n	800b556 <_strtod_l+0xaa6>
 800b562:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b566:	9b04      	ldr	r3, [sp, #16]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1a8      	bne.n	800b4be <_strtod_l+0xa0e>
 800b56c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b570:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b572:	0d1b      	lsrs	r3, r3, #20
 800b574:	051b      	lsls	r3, r3, #20
 800b576:	429a      	cmp	r2, r3
 800b578:	d1a1      	bne.n	800b4be <_strtod_l+0xa0e>
 800b57a:	4640      	mov	r0, r8
 800b57c:	4649      	mov	r1, r9
 800b57e:	f7f5 fb23 	bl	8000bc8 <__aeabi_d2lz>
 800b582:	f7f4 ffe3 	bl	800054c <__aeabi_l2d>
 800b586:	4602      	mov	r2, r0
 800b588:	460b      	mov	r3, r1
 800b58a:	4640      	mov	r0, r8
 800b58c:	4649      	mov	r1, r9
 800b58e:	f7f4 fe53 	bl	8000238 <__aeabi_dsub>
 800b592:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b594:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b598:	ea43 030a 	orr.w	r3, r3, sl
 800b59c:	4313      	orrs	r3, r2
 800b59e:	4680      	mov	r8, r0
 800b5a0:	4689      	mov	r9, r1
 800b5a2:	d055      	beq.n	800b650 <_strtod_l+0xba0>
 800b5a4:	a336      	add	r3, pc, #216	; (adr r3, 800b680 <_strtod_l+0xbd0>)
 800b5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5aa:	f7f5 fa6f 	bl	8000a8c <__aeabi_dcmplt>
 800b5ae:	2800      	cmp	r0, #0
 800b5b0:	f47f acd0 	bne.w	800af54 <_strtod_l+0x4a4>
 800b5b4:	a334      	add	r3, pc, #208	; (adr r3, 800b688 <_strtod_l+0xbd8>)
 800b5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ba:	4640      	mov	r0, r8
 800b5bc:	4649      	mov	r1, r9
 800b5be:	f7f5 fa83 	bl	8000ac8 <__aeabi_dcmpgt>
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	f43f af7b 	beq.w	800b4be <_strtod_l+0xa0e>
 800b5c8:	e4c4      	b.n	800af54 <_strtod_l+0x4a4>
 800b5ca:	9b04      	ldr	r3, [sp, #16]
 800b5cc:	b333      	cbz	r3, 800b61c <_strtod_l+0xb6c>
 800b5ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b5d4:	d822      	bhi.n	800b61c <_strtod_l+0xb6c>
 800b5d6:	a32e      	add	r3, pc, #184	; (adr r3, 800b690 <_strtod_l+0xbe0>)
 800b5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5dc:	4640      	mov	r0, r8
 800b5de:	4649      	mov	r1, r9
 800b5e0:	f7f5 fa5e 	bl	8000aa0 <__aeabi_dcmple>
 800b5e4:	b1a0      	cbz	r0, 800b610 <_strtod_l+0xb60>
 800b5e6:	4649      	mov	r1, r9
 800b5e8:	4640      	mov	r0, r8
 800b5ea:	f7f5 fab5 	bl	8000b58 <__aeabi_d2uiz>
 800b5ee:	2801      	cmp	r0, #1
 800b5f0:	bf38      	it	cc
 800b5f2:	2001      	movcc	r0, #1
 800b5f4:	f7f4 ff5e 	bl	80004b4 <__aeabi_ui2d>
 800b5f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5fa:	4680      	mov	r8, r0
 800b5fc:	4689      	mov	r9, r1
 800b5fe:	bb23      	cbnz	r3, 800b64a <_strtod_l+0xb9a>
 800b600:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b604:	9010      	str	r0, [sp, #64]	; 0x40
 800b606:	9311      	str	r3, [sp, #68]	; 0x44
 800b608:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b60c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b612:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b614:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b618:	1a9b      	subs	r3, r3, r2
 800b61a:	9309      	str	r3, [sp, #36]	; 0x24
 800b61c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b620:	eeb0 0a48 	vmov.f32	s0, s16
 800b624:	eef0 0a68 	vmov.f32	s1, s17
 800b628:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b62c:	f001 f888 	bl	800c740 <__ulp>
 800b630:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b634:	ec53 2b10 	vmov	r2, r3, d0
 800b638:	f7f4 ffb6 	bl	80005a8 <__aeabi_dmul>
 800b63c:	ec53 2b18 	vmov	r2, r3, d8
 800b640:	f7f4 fdfc 	bl	800023c <__adddf3>
 800b644:	4682      	mov	sl, r0
 800b646:	468b      	mov	fp, r1
 800b648:	e78d      	b.n	800b566 <_strtod_l+0xab6>
 800b64a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b64e:	e7db      	b.n	800b608 <_strtod_l+0xb58>
 800b650:	a311      	add	r3, pc, #68	; (adr r3, 800b698 <_strtod_l+0xbe8>)
 800b652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b656:	f7f5 fa19 	bl	8000a8c <__aeabi_dcmplt>
 800b65a:	e7b2      	b.n	800b5c2 <_strtod_l+0xb12>
 800b65c:	2300      	movs	r3, #0
 800b65e:	930a      	str	r3, [sp, #40]	; 0x28
 800b660:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b662:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b664:	6013      	str	r3, [r2, #0]
 800b666:	f7ff ba6b 	b.w	800ab40 <_strtod_l+0x90>
 800b66a:	2a65      	cmp	r2, #101	; 0x65
 800b66c:	f43f ab5f 	beq.w	800ad2e <_strtod_l+0x27e>
 800b670:	2a45      	cmp	r2, #69	; 0x45
 800b672:	f43f ab5c 	beq.w	800ad2e <_strtod_l+0x27e>
 800b676:	2301      	movs	r3, #1
 800b678:	f7ff bb94 	b.w	800ada4 <_strtod_l+0x2f4>
 800b67c:	f3af 8000 	nop.w
 800b680:	94a03595 	.word	0x94a03595
 800b684:	3fdfffff 	.word	0x3fdfffff
 800b688:	35afe535 	.word	0x35afe535
 800b68c:	3fe00000 	.word	0x3fe00000
 800b690:	ffc00000 	.word	0xffc00000
 800b694:	41dfffff 	.word	0x41dfffff
 800b698:	94a03595 	.word	0x94a03595
 800b69c:	3fcfffff 	.word	0x3fcfffff
 800b6a0:	3ff00000 	.word	0x3ff00000
 800b6a4:	7ff00000 	.word	0x7ff00000
 800b6a8:	7fe00000 	.word	0x7fe00000
 800b6ac:	7c9fffff 	.word	0x7c9fffff
 800b6b0:	3fe00000 	.word	0x3fe00000
 800b6b4:	bff00000 	.word	0xbff00000
 800b6b8:	7fefffff 	.word	0x7fefffff

0800b6bc <strtod>:
 800b6bc:	460a      	mov	r2, r1
 800b6be:	4601      	mov	r1, r0
 800b6c0:	4802      	ldr	r0, [pc, #8]	; (800b6cc <strtod+0x10>)
 800b6c2:	4b03      	ldr	r3, [pc, #12]	; (800b6d0 <strtod+0x14>)
 800b6c4:	6800      	ldr	r0, [r0, #0]
 800b6c6:	f7ff b9f3 	b.w	800aab0 <_strtod_l>
 800b6ca:	bf00      	nop
 800b6cc:	20000024 	.word	0x20000024
 800b6d0:	2000008c 	.word	0x2000008c

0800b6d4 <_vsiprintf_r>:
 800b6d4:	b500      	push	{lr}
 800b6d6:	b09b      	sub	sp, #108	; 0x6c
 800b6d8:	9100      	str	r1, [sp, #0]
 800b6da:	9104      	str	r1, [sp, #16]
 800b6dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b6e0:	9105      	str	r1, [sp, #20]
 800b6e2:	9102      	str	r1, [sp, #8]
 800b6e4:	4905      	ldr	r1, [pc, #20]	; (800b6fc <_vsiprintf_r+0x28>)
 800b6e6:	9103      	str	r1, [sp, #12]
 800b6e8:	4669      	mov	r1, sp
 800b6ea:	f001 fa19 	bl	800cb20 <_svfiprintf_r>
 800b6ee:	9b00      	ldr	r3, [sp, #0]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	701a      	strb	r2, [r3, #0]
 800b6f4:	b01b      	add	sp, #108	; 0x6c
 800b6f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b6fa:	bf00      	nop
 800b6fc:	ffff0208 	.word	0xffff0208

0800b700 <vsiprintf>:
 800b700:	4613      	mov	r3, r2
 800b702:	460a      	mov	r2, r1
 800b704:	4601      	mov	r1, r0
 800b706:	4802      	ldr	r0, [pc, #8]	; (800b710 <vsiprintf+0x10>)
 800b708:	6800      	ldr	r0, [r0, #0]
 800b70a:	f7ff bfe3 	b.w	800b6d4 <_vsiprintf_r>
 800b70e:	bf00      	nop
 800b710:	20000024 	.word	0x20000024

0800b714 <__swbuf_r>:
 800b714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b716:	460e      	mov	r6, r1
 800b718:	4614      	mov	r4, r2
 800b71a:	4605      	mov	r5, r0
 800b71c:	b118      	cbz	r0, 800b726 <__swbuf_r+0x12>
 800b71e:	6983      	ldr	r3, [r0, #24]
 800b720:	b90b      	cbnz	r3, 800b726 <__swbuf_r+0x12>
 800b722:	f7fe fe27 	bl	800a374 <__sinit>
 800b726:	4b21      	ldr	r3, [pc, #132]	; (800b7ac <__swbuf_r+0x98>)
 800b728:	429c      	cmp	r4, r3
 800b72a:	d12b      	bne.n	800b784 <__swbuf_r+0x70>
 800b72c:	686c      	ldr	r4, [r5, #4]
 800b72e:	69a3      	ldr	r3, [r4, #24]
 800b730:	60a3      	str	r3, [r4, #8]
 800b732:	89a3      	ldrh	r3, [r4, #12]
 800b734:	071a      	lsls	r2, r3, #28
 800b736:	d52f      	bpl.n	800b798 <__swbuf_r+0x84>
 800b738:	6923      	ldr	r3, [r4, #16]
 800b73a:	b36b      	cbz	r3, 800b798 <__swbuf_r+0x84>
 800b73c:	6923      	ldr	r3, [r4, #16]
 800b73e:	6820      	ldr	r0, [r4, #0]
 800b740:	1ac0      	subs	r0, r0, r3
 800b742:	6963      	ldr	r3, [r4, #20]
 800b744:	b2f6      	uxtb	r6, r6
 800b746:	4283      	cmp	r3, r0
 800b748:	4637      	mov	r7, r6
 800b74a:	dc04      	bgt.n	800b756 <__swbuf_r+0x42>
 800b74c:	4621      	mov	r1, r4
 800b74e:	4628      	mov	r0, r5
 800b750:	f7fe fd7c 	bl	800a24c <_fflush_r>
 800b754:	bb30      	cbnz	r0, 800b7a4 <__swbuf_r+0x90>
 800b756:	68a3      	ldr	r3, [r4, #8]
 800b758:	3b01      	subs	r3, #1
 800b75a:	60a3      	str	r3, [r4, #8]
 800b75c:	6823      	ldr	r3, [r4, #0]
 800b75e:	1c5a      	adds	r2, r3, #1
 800b760:	6022      	str	r2, [r4, #0]
 800b762:	701e      	strb	r6, [r3, #0]
 800b764:	6963      	ldr	r3, [r4, #20]
 800b766:	3001      	adds	r0, #1
 800b768:	4283      	cmp	r3, r0
 800b76a:	d004      	beq.n	800b776 <__swbuf_r+0x62>
 800b76c:	89a3      	ldrh	r3, [r4, #12]
 800b76e:	07db      	lsls	r3, r3, #31
 800b770:	d506      	bpl.n	800b780 <__swbuf_r+0x6c>
 800b772:	2e0a      	cmp	r6, #10
 800b774:	d104      	bne.n	800b780 <__swbuf_r+0x6c>
 800b776:	4621      	mov	r1, r4
 800b778:	4628      	mov	r0, r5
 800b77a:	f7fe fd67 	bl	800a24c <_fflush_r>
 800b77e:	b988      	cbnz	r0, 800b7a4 <__swbuf_r+0x90>
 800b780:	4638      	mov	r0, r7
 800b782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b784:	4b0a      	ldr	r3, [pc, #40]	; (800b7b0 <__swbuf_r+0x9c>)
 800b786:	429c      	cmp	r4, r3
 800b788:	d101      	bne.n	800b78e <__swbuf_r+0x7a>
 800b78a:	68ac      	ldr	r4, [r5, #8]
 800b78c:	e7cf      	b.n	800b72e <__swbuf_r+0x1a>
 800b78e:	4b09      	ldr	r3, [pc, #36]	; (800b7b4 <__swbuf_r+0xa0>)
 800b790:	429c      	cmp	r4, r3
 800b792:	bf08      	it	eq
 800b794:	68ec      	ldreq	r4, [r5, #12]
 800b796:	e7ca      	b.n	800b72e <__swbuf_r+0x1a>
 800b798:	4621      	mov	r1, r4
 800b79a:	4628      	mov	r0, r5
 800b79c:	f000 f81e 	bl	800b7dc <__swsetup_r>
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	d0cb      	beq.n	800b73c <__swbuf_r+0x28>
 800b7a4:	f04f 37ff 	mov.w	r7, #4294967295
 800b7a8:	e7ea      	b.n	800b780 <__swbuf_r+0x6c>
 800b7aa:	bf00      	nop
 800b7ac:	0800e270 	.word	0x0800e270
 800b7b0:	0800e290 	.word	0x0800e290
 800b7b4:	0800e250 	.word	0x0800e250

0800b7b8 <_write_r>:
 800b7b8:	b538      	push	{r3, r4, r5, lr}
 800b7ba:	4d07      	ldr	r5, [pc, #28]	; (800b7d8 <_write_r+0x20>)
 800b7bc:	4604      	mov	r4, r0
 800b7be:	4608      	mov	r0, r1
 800b7c0:	4611      	mov	r1, r2
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	602a      	str	r2, [r5, #0]
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	f7f5 ff86 	bl	80016d8 <_write>
 800b7cc:	1c43      	adds	r3, r0, #1
 800b7ce:	d102      	bne.n	800b7d6 <_write_r+0x1e>
 800b7d0:	682b      	ldr	r3, [r5, #0]
 800b7d2:	b103      	cbz	r3, 800b7d6 <_write_r+0x1e>
 800b7d4:	6023      	str	r3, [r4, #0]
 800b7d6:	bd38      	pop	{r3, r4, r5, pc}
 800b7d8:	20001700 	.word	0x20001700

0800b7dc <__swsetup_r>:
 800b7dc:	4b32      	ldr	r3, [pc, #200]	; (800b8a8 <__swsetup_r+0xcc>)
 800b7de:	b570      	push	{r4, r5, r6, lr}
 800b7e0:	681d      	ldr	r5, [r3, #0]
 800b7e2:	4606      	mov	r6, r0
 800b7e4:	460c      	mov	r4, r1
 800b7e6:	b125      	cbz	r5, 800b7f2 <__swsetup_r+0x16>
 800b7e8:	69ab      	ldr	r3, [r5, #24]
 800b7ea:	b913      	cbnz	r3, 800b7f2 <__swsetup_r+0x16>
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	f7fe fdc1 	bl	800a374 <__sinit>
 800b7f2:	4b2e      	ldr	r3, [pc, #184]	; (800b8ac <__swsetup_r+0xd0>)
 800b7f4:	429c      	cmp	r4, r3
 800b7f6:	d10f      	bne.n	800b818 <__swsetup_r+0x3c>
 800b7f8:	686c      	ldr	r4, [r5, #4]
 800b7fa:	89a3      	ldrh	r3, [r4, #12]
 800b7fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b800:	0719      	lsls	r1, r3, #28
 800b802:	d42c      	bmi.n	800b85e <__swsetup_r+0x82>
 800b804:	06dd      	lsls	r5, r3, #27
 800b806:	d411      	bmi.n	800b82c <__swsetup_r+0x50>
 800b808:	2309      	movs	r3, #9
 800b80a:	6033      	str	r3, [r6, #0]
 800b80c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b810:	81a3      	strh	r3, [r4, #12]
 800b812:	f04f 30ff 	mov.w	r0, #4294967295
 800b816:	e03e      	b.n	800b896 <__swsetup_r+0xba>
 800b818:	4b25      	ldr	r3, [pc, #148]	; (800b8b0 <__swsetup_r+0xd4>)
 800b81a:	429c      	cmp	r4, r3
 800b81c:	d101      	bne.n	800b822 <__swsetup_r+0x46>
 800b81e:	68ac      	ldr	r4, [r5, #8]
 800b820:	e7eb      	b.n	800b7fa <__swsetup_r+0x1e>
 800b822:	4b24      	ldr	r3, [pc, #144]	; (800b8b4 <__swsetup_r+0xd8>)
 800b824:	429c      	cmp	r4, r3
 800b826:	bf08      	it	eq
 800b828:	68ec      	ldreq	r4, [r5, #12]
 800b82a:	e7e6      	b.n	800b7fa <__swsetup_r+0x1e>
 800b82c:	0758      	lsls	r0, r3, #29
 800b82e:	d512      	bpl.n	800b856 <__swsetup_r+0x7a>
 800b830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b832:	b141      	cbz	r1, 800b846 <__swsetup_r+0x6a>
 800b834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b838:	4299      	cmp	r1, r3
 800b83a:	d002      	beq.n	800b842 <__swsetup_r+0x66>
 800b83c:	4630      	mov	r0, r6
 800b83e:	f7fe ff03 	bl	800a648 <_free_r>
 800b842:	2300      	movs	r3, #0
 800b844:	6363      	str	r3, [r4, #52]	; 0x34
 800b846:	89a3      	ldrh	r3, [r4, #12]
 800b848:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b84c:	81a3      	strh	r3, [r4, #12]
 800b84e:	2300      	movs	r3, #0
 800b850:	6063      	str	r3, [r4, #4]
 800b852:	6923      	ldr	r3, [r4, #16]
 800b854:	6023      	str	r3, [r4, #0]
 800b856:	89a3      	ldrh	r3, [r4, #12]
 800b858:	f043 0308 	orr.w	r3, r3, #8
 800b85c:	81a3      	strh	r3, [r4, #12]
 800b85e:	6923      	ldr	r3, [r4, #16]
 800b860:	b94b      	cbnz	r3, 800b876 <__swsetup_r+0x9a>
 800b862:	89a3      	ldrh	r3, [r4, #12]
 800b864:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b86c:	d003      	beq.n	800b876 <__swsetup_r+0x9a>
 800b86e:	4621      	mov	r1, r4
 800b870:	4630      	mov	r0, r6
 800b872:	f7fe fe69 	bl	800a548 <__smakebuf_r>
 800b876:	89a0      	ldrh	r0, [r4, #12]
 800b878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b87c:	f010 0301 	ands.w	r3, r0, #1
 800b880:	d00a      	beq.n	800b898 <__swsetup_r+0xbc>
 800b882:	2300      	movs	r3, #0
 800b884:	60a3      	str	r3, [r4, #8]
 800b886:	6963      	ldr	r3, [r4, #20]
 800b888:	425b      	negs	r3, r3
 800b88a:	61a3      	str	r3, [r4, #24]
 800b88c:	6923      	ldr	r3, [r4, #16]
 800b88e:	b943      	cbnz	r3, 800b8a2 <__swsetup_r+0xc6>
 800b890:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b894:	d1ba      	bne.n	800b80c <__swsetup_r+0x30>
 800b896:	bd70      	pop	{r4, r5, r6, pc}
 800b898:	0781      	lsls	r1, r0, #30
 800b89a:	bf58      	it	pl
 800b89c:	6963      	ldrpl	r3, [r4, #20]
 800b89e:	60a3      	str	r3, [r4, #8]
 800b8a0:	e7f4      	b.n	800b88c <__swsetup_r+0xb0>
 800b8a2:	2000      	movs	r0, #0
 800b8a4:	e7f7      	b.n	800b896 <__swsetup_r+0xba>
 800b8a6:	bf00      	nop
 800b8a8:	20000024 	.word	0x20000024
 800b8ac:	0800e270 	.word	0x0800e270
 800b8b0:	0800e290 	.word	0x0800e290
 800b8b4:	0800e250 	.word	0x0800e250

0800b8b8 <_close_r>:
 800b8b8:	b538      	push	{r3, r4, r5, lr}
 800b8ba:	4d06      	ldr	r5, [pc, #24]	; (800b8d4 <_close_r+0x1c>)
 800b8bc:	2300      	movs	r3, #0
 800b8be:	4604      	mov	r4, r0
 800b8c0:	4608      	mov	r0, r1
 800b8c2:	602b      	str	r3, [r5, #0]
 800b8c4:	f7f8 ff79 	bl	80047ba <_close>
 800b8c8:	1c43      	adds	r3, r0, #1
 800b8ca:	d102      	bne.n	800b8d2 <_close_r+0x1a>
 800b8cc:	682b      	ldr	r3, [r5, #0]
 800b8ce:	b103      	cbz	r3, 800b8d2 <_close_r+0x1a>
 800b8d0:	6023      	str	r3, [r4, #0]
 800b8d2:	bd38      	pop	{r3, r4, r5, pc}
 800b8d4:	20001700 	.word	0x20001700

0800b8d8 <_fstat_r>:
 800b8d8:	b538      	push	{r3, r4, r5, lr}
 800b8da:	4d07      	ldr	r5, [pc, #28]	; (800b8f8 <_fstat_r+0x20>)
 800b8dc:	2300      	movs	r3, #0
 800b8de:	4604      	mov	r4, r0
 800b8e0:	4608      	mov	r0, r1
 800b8e2:	4611      	mov	r1, r2
 800b8e4:	602b      	str	r3, [r5, #0]
 800b8e6:	f7f8 ff74 	bl	80047d2 <_fstat>
 800b8ea:	1c43      	adds	r3, r0, #1
 800b8ec:	d102      	bne.n	800b8f4 <_fstat_r+0x1c>
 800b8ee:	682b      	ldr	r3, [r5, #0]
 800b8f0:	b103      	cbz	r3, 800b8f4 <_fstat_r+0x1c>
 800b8f2:	6023      	str	r3, [r4, #0]
 800b8f4:	bd38      	pop	{r3, r4, r5, pc}
 800b8f6:	bf00      	nop
 800b8f8:	20001700 	.word	0x20001700

0800b8fc <rshift>:
 800b8fc:	6903      	ldr	r3, [r0, #16]
 800b8fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b902:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b906:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b90a:	f100 0414 	add.w	r4, r0, #20
 800b90e:	dd45      	ble.n	800b99c <rshift+0xa0>
 800b910:	f011 011f 	ands.w	r1, r1, #31
 800b914:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b918:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b91c:	d10c      	bne.n	800b938 <rshift+0x3c>
 800b91e:	f100 0710 	add.w	r7, r0, #16
 800b922:	4629      	mov	r1, r5
 800b924:	42b1      	cmp	r1, r6
 800b926:	d334      	bcc.n	800b992 <rshift+0x96>
 800b928:	1a9b      	subs	r3, r3, r2
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	1eea      	subs	r2, r5, #3
 800b92e:	4296      	cmp	r6, r2
 800b930:	bf38      	it	cc
 800b932:	2300      	movcc	r3, #0
 800b934:	4423      	add	r3, r4
 800b936:	e015      	b.n	800b964 <rshift+0x68>
 800b938:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b93c:	f1c1 0820 	rsb	r8, r1, #32
 800b940:	40cf      	lsrs	r7, r1
 800b942:	f105 0e04 	add.w	lr, r5, #4
 800b946:	46a1      	mov	r9, r4
 800b948:	4576      	cmp	r6, lr
 800b94a:	46f4      	mov	ip, lr
 800b94c:	d815      	bhi.n	800b97a <rshift+0x7e>
 800b94e:	1a9a      	subs	r2, r3, r2
 800b950:	0092      	lsls	r2, r2, #2
 800b952:	3a04      	subs	r2, #4
 800b954:	3501      	adds	r5, #1
 800b956:	42ae      	cmp	r6, r5
 800b958:	bf38      	it	cc
 800b95a:	2200      	movcc	r2, #0
 800b95c:	18a3      	adds	r3, r4, r2
 800b95e:	50a7      	str	r7, [r4, r2]
 800b960:	b107      	cbz	r7, 800b964 <rshift+0x68>
 800b962:	3304      	adds	r3, #4
 800b964:	1b1a      	subs	r2, r3, r4
 800b966:	42a3      	cmp	r3, r4
 800b968:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b96c:	bf08      	it	eq
 800b96e:	2300      	moveq	r3, #0
 800b970:	6102      	str	r2, [r0, #16]
 800b972:	bf08      	it	eq
 800b974:	6143      	streq	r3, [r0, #20]
 800b976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b97a:	f8dc c000 	ldr.w	ip, [ip]
 800b97e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b982:	ea4c 0707 	orr.w	r7, ip, r7
 800b986:	f849 7b04 	str.w	r7, [r9], #4
 800b98a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b98e:	40cf      	lsrs	r7, r1
 800b990:	e7da      	b.n	800b948 <rshift+0x4c>
 800b992:	f851 cb04 	ldr.w	ip, [r1], #4
 800b996:	f847 cf04 	str.w	ip, [r7, #4]!
 800b99a:	e7c3      	b.n	800b924 <rshift+0x28>
 800b99c:	4623      	mov	r3, r4
 800b99e:	e7e1      	b.n	800b964 <rshift+0x68>

0800b9a0 <__hexdig_fun>:
 800b9a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b9a4:	2b09      	cmp	r3, #9
 800b9a6:	d802      	bhi.n	800b9ae <__hexdig_fun+0xe>
 800b9a8:	3820      	subs	r0, #32
 800b9aa:	b2c0      	uxtb	r0, r0
 800b9ac:	4770      	bx	lr
 800b9ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b9b2:	2b05      	cmp	r3, #5
 800b9b4:	d801      	bhi.n	800b9ba <__hexdig_fun+0x1a>
 800b9b6:	3847      	subs	r0, #71	; 0x47
 800b9b8:	e7f7      	b.n	800b9aa <__hexdig_fun+0xa>
 800b9ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b9be:	2b05      	cmp	r3, #5
 800b9c0:	d801      	bhi.n	800b9c6 <__hexdig_fun+0x26>
 800b9c2:	3827      	subs	r0, #39	; 0x27
 800b9c4:	e7f1      	b.n	800b9aa <__hexdig_fun+0xa>
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	4770      	bx	lr
	...

0800b9cc <__gethex>:
 800b9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d0:	ed2d 8b02 	vpush	{d8}
 800b9d4:	b089      	sub	sp, #36	; 0x24
 800b9d6:	ee08 0a10 	vmov	s16, r0
 800b9da:	9304      	str	r3, [sp, #16]
 800b9dc:	4bb4      	ldr	r3, [pc, #720]	; (800bcb0 <__gethex+0x2e4>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	9301      	str	r3, [sp, #4]
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	468b      	mov	fp, r1
 800b9e6:	4690      	mov	r8, r2
 800b9e8:	f7f4 fbca 	bl	8000180 <strlen>
 800b9ec:	9b01      	ldr	r3, [sp, #4]
 800b9ee:	f8db 2000 	ldr.w	r2, [fp]
 800b9f2:	4403      	add	r3, r0
 800b9f4:	4682      	mov	sl, r0
 800b9f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b9fa:	9305      	str	r3, [sp, #20]
 800b9fc:	1c93      	adds	r3, r2, #2
 800b9fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ba02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ba06:	32fe      	adds	r2, #254	; 0xfe
 800ba08:	18d1      	adds	r1, r2, r3
 800ba0a:	461f      	mov	r7, r3
 800ba0c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ba10:	9100      	str	r1, [sp, #0]
 800ba12:	2830      	cmp	r0, #48	; 0x30
 800ba14:	d0f8      	beq.n	800ba08 <__gethex+0x3c>
 800ba16:	f7ff ffc3 	bl	800b9a0 <__hexdig_fun>
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	d13a      	bne.n	800ba96 <__gethex+0xca>
 800ba20:	9901      	ldr	r1, [sp, #4]
 800ba22:	4652      	mov	r2, sl
 800ba24:	4638      	mov	r0, r7
 800ba26:	f7fe fffd 	bl	800aa24 <strncmp>
 800ba2a:	4605      	mov	r5, r0
 800ba2c:	2800      	cmp	r0, #0
 800ba2e:	d168      	bne.n	800bb02 <__gethex+0x136>
 800ba30:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ba34:	eb07 060a 	add.w	r6, r7, sl
 800ba38:	f7ff ffb2 	bl	800b9a0 <__hexdig_fun>
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	d062      	beq.n	800bb06 <__gethex+0x13a>
 800ba40:	4633      	mov	r3, r6
 800ba42:	7818      	ldrb	r0, [r3, #0]
 800ba44:	2830      	cmp	r0, #48	; 0x30
 800ba46:	461f      	mov	r7, r3
 800ba48:	f103 0301 	add.w	r3, r3, #1
 800ba4c:	d0f9      	beq.n	800ba42 <__gethex+0x76>
 800ba4e:	f7ff ffa7 	bl	800b9a0 <__hexdig_fun>
 800ba52:	2301      	movs	r3, #1
 800ba54:	fab0 f480 	clz	r4, r0
 800ba58:	0964      	lsrs	r4, r4, #5
 800ba5a:	4635      	mov	r5, r6
 800ba5c:	9300      	str	r3, [sp, #0]
 800ba5e:	463a      	mov	r2, r7
 800ba60:	4616      	mov	r6, r2
 800ba62:	3201      	adds	r2, #1
 800ba64:	7830      	ldrb	r0, [r6, #0]
 800ba66:	f7ff ff9b 	bl	800b9a0 <__hexdig_fun>
 800ba6a:	2800      	cmp	r0, #0
 800ba6c:	d1f8      	bne.n	800ba60 <__gethex+0x94>
 800ba6e:	9901      	ldr	r1, [sp, #4]
 800ba70:	4652      	mov	r2, sl
 800ba72:	4630      	mov	r0, r6
 800ba74:	f7fe ffd6 	bl	800aa24 <strncmp>
 800ba78:	b980      	cbnz	r0, 800ba9c <__gethex+0xd0>
 800ba7a:	b94d      	cbnz	r5, 800ba90 <__gethex+0xc4>
 800ba7c:	eb06 050a 	add.w	r5, r6, sl
 800ba80:	462a      	mov	r2, r5
 800ba82:	4616      	mov	r6, r2
 800ba84:	3201      	adds	r2, #1
 800ba86:	7830      	ldrb	r0, [r6, #0]
 800ba88:	f7ff ff8a 	bl	800b9a0 <__hexdig_fun>
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	d1f8      	bne.n	800ba82 <__gethex+0xb6>
 800ba90:	1bad      	subs	r5, r5, r6
 800ba92:	00ad      	lsls	r5, r5, #2
 800ba94:	e004      	b.n	800baa0 <__gethex+0xd4>
 800ba96:	2400      	movs	r4, #0
 800ba98:	4625      	mov	r5, r4
 800ba9a:	e7e0      	b.n	800ba5e <__gethex+0x92>
 800ba9c:	2d00      	cmp	r5, #0
 800ba9e:	d1f7      	bne.n	800ba90 <__gethex+0xc4>
 800baa0:	7833      	ldrb	r3, [r6, #0]
 800baa2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800baa6:	2b50      	cmp	r3, #80	; 0x50
 800baa8:	d13b      	bne.n	800bb22 <__gethex+0x156>
 800baaa:	7873      	ldrb	r3, [r6, #1]
 800baac:	2b2b      	cmp	r3, #43	; 0x2b
 800baae:	d02c      	beq.n	800bb0a <__gethex+0x13e>
 800bab0:	2b2d      	cmp	r3, #45	; 0x2d
 800bab2:	d02e      	beq.n	800bb12 <__gethex+0x146>
 800bab4:	1c71      	adds	r1, r6, #1
 800bab6:	f04f 0900 	mov.w	r9, #0
 800baba:	7808      	ldrb	r0, [r1, #0]
 800babc:	f7ff ff70 	bl	800b9a0 <__hexdig_fun>
 800bac0:	1e43      	subs	r3, r0, #1
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	2b18      	cmp	r3, #24
 800bac6:	d82c      	bhi.n	800bb22 <__gethex+0x156>
 800bac8:	f1a0 0210 	sub.w	r2, r0, #16
 800bacc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bad0:	f7ff ff66 	bl	800b9a0 <__hexdig_fun>
 800bad4:	1e43      	subs	r3, r0, #1
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	2b18      	cmp	r3, #24
 800bada:	d91d      	bls.n	800bb18 <__gethex+0x14c>
 800badc:	f1b9 0f00 	cmp.w	r9, #0
 800bae0:	d000      	beq.n	800bae4 <__gethex+0x118>
 800bae2:	4252      	negs	r2, r2
 800bae4:	4415      	add	r5, r2
 800bae6:	f8cb 1000 	str.w	r1, [fp]
 800baea:	b1e4      	cbz	r4, 800bb26 <__gethex+0x15a>
 800baec:	9b00      	ldr	r3, [sp, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	bf14      	ite	ne
 800baf2:	2700      	movne	r7, #0
 800baf4:	2706      	moveq	r7, #6
 800baf6:	4638      	mov	r0, r7
 800baf8:	b009      	add	sp, #36	; 0x24
 800bafa:	ecbd 8b02 	vpop	{d8}
 800bafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb02:	463e      	mov	r6, r7
 800bb04:	4625      	mov	r5, r4
 800bb06:	2401      	movs	r4, #1
 800bb08:	e7ca      	b.n	800baa0 <__gethex+0xd4>
 800bb0a:	f04f 0900 	mov.w	r9, #0
 800bb0e:	1cb1      	adds	r1, r6, #2
 800bb10:	e7d3      	b.n	800baba <__gethex+0xee>
 800bb12:	f04f 0901 	mov.w	r9, #1
 800bb16:	e7fa      	b.n	800bb0e <__gethex+0x142>
 800bb18:	230a      	movs	r3, #10
 800bb1a:	fb03 0202 	mla	r2, r3, r2, r0
 800bb1e:	3a10      	subs	r2, #16
 800bb20:	e7d4      	b.n	800bacc <__gethex+0x100>
 800bb22:	4631      	mov	r1, r6
 800bb24:	e7df      	b.n	800bae6 <__gethex+0x11a>
 800bb26:	1bf3      	subs	r3, r6, r7
 800bb28:	3b01      	subs	r3, #1
 800bb2a:	4621      	mov	r1, r4
 800bb2c:	2b07      	cmp	r3, #7
 800bb2e:	dc0b      	bgt.n	800bb48 <__gethex+0x17c>
 800bb30:	ee18 0a10 	vmov	r0, s16
 800bb34:	f000 fa92 	bl	800c05c <_Balloc>
 800bb38:	4604      	mov	r4, r0
 800bb3a:	b940      	cbnz	r0, 800bb4e <__gethex+0x182>
 800bb3c:	4b5d      	ldr	r3, [pc, #372]	; (800bcb4 <__gethex+0x2e8>)
 800bb3e:	4602      	mov	r2, r0
 800bb40:	21de      	movs	r1, #222	; 0xde
 800bb42:	485d      	ldr	r0, [pc, #372]	; (800bcb8 <__gethex+0x2ec>)
 800bb44:	f001 fc02 	bl	800d34c <__assert_func>
 800bb48:	3101      	adds	r1, #1
 800bb4a:	105b      	asrs	r3, r3, #1
 800bb4c:	e7ee      	b.n	800bb2c <__gethex+0x160>
 800bb4e:	f100 0914 	add.w	r9, r0, #20
 800bb52:	f04f 0b00 	mov.w	fp, #0
 800bb56:	f1ca 0301 	rsb	r3, sl, #1
 800bb5a:	f8cd 9008 	str.w	r9, [sp, #8]
 800bb5e:	f8cd b000 	str.w	fp, [sp]
 800bb62:	9306      	str	r3, [sp, #24]
 800bb64:	42b7      	cmp	r7, r6
 800bb66:	d340      	bcc.n	800bbea <__gethex+0x21e>
 800bb68:	9802      	ldr	r0, [sp, #8]
 800bb6a:	9b00      	ldr	r3, [sp, #0]
 800bb6c:	f840 3b04 	str.w	r3, [r0], #4
 800bb70:	eba0 0009 	sub.w	r0, r0, r9
 800bb74:	1080      	asrs	r0, r0, #2
 800bb76:	0146      	lsls	r6, r0, #5
 800bb78:	6120      	str	r0, [r4, #16]
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f000 fb60 	bl	800c240 <__hi0bits>
 800bb80:	1a30      	subs	r0, r6, r0
 800bb82:	f8d8 6000 	ldr.w	r6, [r8]
 800bb86:	42b0      	cmp	r0, r6
 800bb88:	dd63      	ble.n	800bc52 <__gethex+0x286>
 800bb8a:	1b87      	subs	r7, r0, r6
 800bb8c:	4639      	mov	r1, r7
 800bb8e:	4620      	mov	r0, r4
 800bb90:	f000 ff04 	bl	800c99c <__any_on>
 800bb94:	4682      	mov	sl, r0
 800bb96:	b1a8      	cbz	r0, 800bbc4 <__gethex+0x1f8>
 800bb98:	1e7b      	subs	r3, r7, #1
 800bb9a:	1159      	asrs	r1, r3, #5
 800bb9c:	f003 021f 	and.w	r2, r3, #31
 800bba0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bba4:	f04f 0a01 	mov.w	sl, #1
 800bba8:	fa0a f202 	lsl.w	r2, sl, r2
 800bbac:	420a      	tst	r2, r1
 800bbae:	d009      	beq.n	800bbc4 <__gethex+0x1f8>
 800bbb0:	4553      	cmp	r3, sl
 800bbb2:	dd05      	ble.n	800bbc0 <__gethex+0x1f4>
 800bbb4:	1eb9      	subs	r1, r7, #2
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	f000 fef0 	bl	800c99c <__any_on>
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	d145      	bne.n	800bc4c <__gethex+0x280>
 800bbc0:	f04f 0a02 	mov.w	sl, #2
 800bbc4:	4639      	mov	r1, r7
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	f7ff fe98 	bl	800b8fc <rshift>
 800bbcc:	443d      	add	r5, r7
 800bbce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bbd2:	42ab      	cmp	r3, r5
 800bbd4:	da4c      	bge.n	800bc70 <__gethex+0x2a4>
 800bbd6:	ee18 0a10 	vmov	r0, s16
 800bbda:	4621      	mov	r1, r4
 800bbdc:	f000 fa7e 	bl	800c0dc <_Bfree>
 800bbe0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	6013      	str	r3, [r2, #0]
 800bbe6:	27a3      	movs	r7, #163	; 0xa3
 800bbe8:	e785      	b.n	800baf6 <__gethex+0x12a>
 800bbea:	1e73      	subs	r3, r6, #1
 800bbec:	9a05      	ldr	r2, [sp, #20]
 800bbee:	9303      	str	r3, [sp, #12]
 800bbf0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d019      	beq.n	800bc2c <__gethex+0x260>
 800bbf8:	f1bb 0f20 	cmp.w	fp, #32
 800bbfc:	d107      	bne.n	800bc0e <__gethex+0x242>
 800bbfe:	9b02      	ldr	r3, [sp, #8]
 800bc00:	9a00      	ldr	r2, [sp, #0]
 800bc02:	f843 2b04 	str.w	r2, [r3], #4
 800bc06:	9302      	str	r3, [sp, #8]
 800bc08:	2300      	movs	r3, #0
 800bc0a:	9300      	str	r3, [sp, #0]
 800bc0c:	469b      	mov	fp, r3
 800bc0e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bc12:	f7ff fec5 	bl	800b9a0 <__hexdig_fun>
 800bc16:	9b00      	ldr	r3, [sp, #0]
 800bc18:	f000 000f 	and.w	r0, r0, #15
 800bc1c:	fa00 f00b 	lsl.w	r0, r0, fp
 800bc20:	4303      	orrs	r3, r0
 800bc22:	9300      	str	r3, [sp, #0]
 800bc24:	f10b 0b04 	add.w	fp, fp, #4
 800bc28:	9b03      	ldr	r3, [sp, #12]
 800bc2a:	e00d      	b.n	800bc48 <__gethex+0x27c>
 800bc2c:	9b03      	ldr	r3, [sp, #12]
 800bc2e:	9a06      	ldr	r2, [sp, #24]
 800bc30:	4413      	add	r3, r2
 800bc32:	42bb      	cmp	r3, r7
 800bc34:	d3e0      	bcc.n	800bbf8 <__gethex+0x22c>
 800bc36:	4618      	mov	r0, r3
 800bc38:	9901      	ldr	r1, [sp, #4]
 800bc3a:	9307      	str	r3, [sp, #28]
 800bc3c:	4652      	mov	r2, sl
 800bc3e:	f7fe fef1 	bl	800aa24 <strncmp>
 800bc42:	9b07      	ldr	r3, [sp, #28]
 800bc44:	2800      	cmp	r0, #0
 800bc46:	d1d7      	bne.n	800bbf8 <__gethex+0x22c>
 800bc48:	461e      	mov	r6, r3
 800bc4a:	e78b      	b.n	800bb64 <__gethex+0x198>
 800bc4c:	f04f 0a03 	mov.w	sl, #3
 800bc50:	e7b8      	b.n	800bbc4 <__gethex+0x1f8>
 800bc52:	da0a      	bge.n	800bc6a <__gethex+0x29e>
 800bc54:	1a37      	subs	r7, r6, r0
 800bc56:	4621      	mov	r1, r4
 800bc58:	ee18 0a10 	vmov	r0, s16
 800bc5c:	463a      	mov	r2, r7
 800bc5e:	f000 fc59 	bl	800c514 <__lshift>
 800bc62:	1bed      	subs	r5, r5, r7
 800bc64:	4604      	mov	r4, r0
 800bc66:	f100 0914 	add.w	r9, r0, #20
 800bc6a:	f04f 0a00 	mov.w	sl, #0
 800bc6e:	e7ae      	b.n	800bbce <__gethex+0x202>
 800bc70:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bc74:	42a8      	cmp	r0, r5
 800bc76:	dd72      	ble.n	800bd5e <__gethex+0x392>
 800bc78:	1b45      	subs	r5, r0, r5
 800bc7a:	42ae      	cmp	r6, r5
 800bc7c:	dc36      	bgt.n	800bcec <__gethex+0x320>
 800bc7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bc82:	2b02      	cmp	r3, #2
 800bc84:	d02a      	beq.n	800bcdc <__gethex+0x310>
 800bc86:	2b03      	cmp	r3, #3
 800bc88:	d02c      	beq.n	800bce4 <__gethex+0x318>
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d11c      	bne.n	800bcc8 <__gethex+0x2fc>
 800bc8e:	42ae      	cmp	r6, r5
 800bc90:	d11a      	bne.n	800bcc8 <__gethex+0x2fc>
 800bc92:	2e01      	cmp	r6, #1
 800bc94:	d112      	bne.n	800bcbc <__gethex+0x2f0>
 800bc96:	9a04      	ldr	r2, [sp, #16]
 800bc98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bc9c:	6013      	str	r3, [r2, #0]
 800bc9e:	2301      	movs	r3, #1
 800bca0:	6123      	str	r3, [r4, #16]
 800bca2:	f8c9 3000 	str.w	r3, [r9]
 800bca6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bca8:	2762      	movs	r7, #98	; 0x62
 800bcaa:	601c      	str	r4, [r3, #0]
 800bcac:	e723      	b.n	800baf6 <__gethex+0x12a>
 800bcae:	bf00      	nop
 800bcb0:	0800e388 	.word	0x0800e388
 800bcb4:	0800e310 	.word	0x0800e310
 800bcb8:	0800e321 	.word	0x0800e321
 800bcbc:	1e71      	subs	r1, r6, #1
 800bcbe:	4620      	mov	r0, r4
 800bcc0:	f000 fe6c 	bl	800c99c <__any_on>
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	d1e6      	bne.n	800bc96 <__gethex+0x2ca>
 800bcc8:	ee18 0a10 	vmov	r0, s16
 800bccc:	4621      	mov	r1, r4
 800bcce:	f000 fa05 	bl	800c0dc <_Bfree>
 800bcd2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	6013      	str	r3, [r2, #0]
 800bcd8:	2750      	movs	r7, #80	; 0x50
 800bcda:	e70c      	b.n	800baf6 <__gethex+0x12a>
 800bcdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d1f2      	bne.n	800bcc8 <__gethex+0x2fc>
 800bce2:	e7d8      	b.n	800bc96 <__gethex+0x2ca>
 800bce4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1d5      	bne.n	800bc96 <__gethex+0x2ca>
 800bcea:	e7ed      	b.n	800bcc8 <__gethex+0x2fc>
 800bcec:	1e6f      	subs	r7, r5, #1
 800bcee:	f1ba 0f00 	cmp.w	sl, #0
 800bcf2:	d131      	bne.n	800bd58 <__gethex+0x38c>
 800bcf4:	b127      	cbz	r7, 800bd00 <__gethex+0x334>
 800bcf6:	4639      	mov	r1, r7
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	f000 fe4f 	bl	800c99c <__any_on>
 800bcfe:	4682      	mov	sl, r0
 800bd00:	117b      	asrs	r3, r7, #5
 800bd02:	2101      	movs	r1, #1
 800bd04:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bd08:	f007 071f 	and.w	r7, r7, #31
 800bd0c:	fa01 f707 	lsl.w	r7, r1, r7
 800bd10:	421f      	tst	r7, r3
 800bd12:	4629      	mov	r1, r5
 800bd14:	4620      	mov	r0, r4
 800bd16:	bf18      	it	ne
 800bd18:	f04a 0a02 	orrne.w	sl, sl, #2
 800bd1c:	1b76      	subs	r6, r6, r5
 800bd1e:	f7ff fded 	bl	800b8fc <rshift>
 800bd22:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bd26:	2702      	movs	r7, #2
 800bd28:	f1ba 0f00 	cmp.w	sl, #0
 800bd2c:	d048      	beq.n	800bdc0 <__gethex+0x3f4>
 800bd2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd32:	2b02      	cmp	r3, #2
 800bd34:	d015      	beq.n	800bd62 <__gethex+0x396>
 800bd36:	2b03      	cmp	r3, #3
 800bd38:	d017      	beq.n	800bd6a <__gethex+0x39e>
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	d109      	bne.n	800bd52 <__gethex+0x386>
 800bd3e:	f01a 0f02 	tst.w	sl, #2
 800bd42:	d006      	beq.n	800bd52 <__gethex+0x386>
 800bd44:	f8d9 0000 	ldr.w	r0, [r9]
 800bd48:	ea4a 0a00 	orr.w	sl, sl, r0
 800bd4c:	f01a 0f01 	tst.w	sl, #1
 800bd50:	d10e      	bne.n	800bd70 <__gethex+0x3a4>
 800bd52:	f047 0710 	orr.w	r7, r7, #16
 800bd56:	e033      	b.n	800bdc0 <__gethex+0x3f4>
 800bd58:	f04f 0a01 	mov.w	sl, #1
 800bd5c:	e7d0      	b.n	800bd00 <__gethex+0x334>
 800bd5e:	2701      	movs	r7, #1
 800bd60:	e7e2      	b.n	800bd28 <__gethex+0x35c>
 800bd62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd64:	f1c3 0301 	rsb	r3, r3, #1
 800bd68:	9315      	str	r3, [sp, #84]	; 0x54
 800bd6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d0f0      	beq.n	800bd52 <__gethex+0x386>
 800bd70:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bd74:	f104 0314 	add.w	r3, r4, #20
 800bd78:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bd7c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bd80:	f04f 0c00 	mov.w	ip, #0
 800bd84:	4618      	mov	r0, r3
 800bd86:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd8a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bd8e:	d01c      	beq.n	800bdca <__gethex+0x3fe>
 800bd90:	3201      	adds	r2, #1
 800bd92:	6002      	str	r2, [r0, #0]
 800bd94:	2f02      	cmp	r7, #2
 800bd96:	f104 0314 	add.w	r3, r4, #20
 800bd9a:	d13f      	bne.n	800be1c <__gethex+0x450>
 800bd9c:	f8d8 2000 	ldr.w	r2, [r8]
 800bda0:	3a01      	subs	r2, #1
 800bda2:	42b2      	cmp	r2, r6
 800bda4:	d10a      	bne.n	800bdbc <__gethex+0x3f0>
 800bda6:	1171      	asrs	r1, r6, #5
 800bda8:	2201      	movs	r2, #1
 800bdaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bdae:	f006 061f 	and.w	r6, r6, #31
 800bdb2:	fa02 f606 	lsl.w	r6, r2, r6
 800bdb6:	421e      	tst	r6, r3
 800bdb8:	bf18      	it	ne
 800bdba:	4617      	movne	r7, r2
 800bdbc:	f047 0720 	orr.w	r7, r7, #32
 800bdc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bdc2:	601c      	str	r4, [r3, #0]
 800bdc4:	9b04      	ldr	r3, [sp, #16]
 800bdc6:	601d      	str	r5, [r3, #0]
 800bdc8:	e695      	b.n	800baf6 <__gethex+0x12a>
 800bdca:	4299      	cmp	r1, r3
 800bdcc:	f843 cc04 	str.w	ip, [r3, #-4]
 800bdd0:	d8d8      	bhi.n	800bd84 <__gethex+0x3b8>
 800bdd2:	68a3      	ldr	r3, [r4, #8]
 800bdd4:	459b      	cmp	fp, r3
 800bdd6:	db19      	blt.n	800be0c <__gethex+0x440>
 800bdd8:	6861      	ldr	r1, [r4, #4]
 800bdda:	ee18 0a10 	vmov	r0, s16
 800bdde:	3101      	adds	r1, #1
 800bde0:	f000 f93c 	bl	800c05c <_Balloc>
 800bde4:	4681      	mov	r9, r0
 800bde6:	b918      	cbnz	r0, 800bdf0 <__gethex+0x424>
 800bde8:	4b1a      	ldr	r3, [pc, #104]	; (800be54 <__gethex+0x488>)
 800bdea:	4602      	mov	r2, r0
 800bdec:	2184      	movs	r1, #132	; 0x84
 800bdee:	e6a8      	b.n	800bb42 <__gethex+0x176>
 800bdf0:	6922      	ldr	r2, [r4, #16]
 800bdf2:	3202      	adds	r2, #2
 800bdf4:	f104 010c 	add.w	r1, r4, #12
 800bdf8:	0092      	lsls	r2, r2, #2
 800bdfa:	300c      	adds	r0, #12
 800bdfc:	f7fe fbf4 	bl	800a5e8 <memcpy>
 800be00:	4621      	mov	r1, r4
 800be02:	ee18 0a10 	vmov	r0, s16
 800be06:	f000 f969 	bl	800c0dc <_Bfree>
 800be0a:	464c      	mov	r4, r9
 800be0c:	6923      	ldr	r3, [r4, #16]
 800be0e:	1c5a      	adds	r2, r3, #1
 800be10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be14:	6122      	str	r2, [r4, #16]
 800be16:	2201      	movs	r2, #1
 800be18:	615a      	str	r2, [r3, #20]
 800be1a:	e7bb      	b.n	800bd94 <__gethex+0x3c8>
 800be1c:	6922      	ldr	r2, [r4, #16]
 800be1e:	455a      	cmp	r2, fp
 800be20:	dd0b      	ble.n	800be3a <__gethex+0x46e>
 800be22:	2101      	movs	r1, #1
 800be24:	4620      	mov	r0, r4
 800be26:	f7ff fd69 	bl	800b8fc <rshift>
 800be2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be2e:	3501      	adds	r5, #1
 800be30:	42ab      	cmp	r3, r5
 800be32:	f6ff aed0 	blt.w	800bbd6 <__gethex+0x20a>
 800be36:	2701      	movs	r7, #1
 800be38:	e7c0      	b.n	800bdbc <__gethex+0x3f0>
 800be3a:	f016 061f 	ands.w	r6, r6, #31
 800be3e:	d0fa      	beq.n	800be36 <__gethex+0x46a>
 800be40:	4453      	add	r3, sl
 800be42:	f1c6 0620 	rsb	r6, r6, #32
 800be46:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800be4a:	f000 f9f9 	bl	800c240 <__hi0bits>
 800be4e:	42b0      	cmp	r0, r6
 800be50:	dbe7      	blt.n	800be22 <__gethex+0x456>
 800be52:	e7f0      	b.n	800be36 <__gethex+0x46a>
 800be54:	0800e310 	.word	0x0800e310

0800be58 <L_shift>:
 800be58:	f1c2 0208 	rsb	r2, r2, #8
 800be5c:	0092      	lsls	r2, r2, #2
 800be5e:	b570      	push	{r4, r5, r6, lr}
 800be60:	f1c2 0620 	rsb	r6, r2, #32
 800be64:	6843      	ldr	r3, [r0, #4]
 800be66:	6804      	ldr	r4, [r0, #0]
 800be68:	fa03 f506 	lsl.w	r5, r3, r6
 800be6c:	432c      	orrs	r4, r5
 800be6e:	40d3      	lsrs	r3, r2
 800be70:	6004      	str	r4, [r0, #0]
 800be72:	f840 3f04 	str.w	r3, [r0, #4]!
 800be76:	4288      	cmp	r0, r1
 800be78:	d3f4      	bcc.n	800be64 <L_shift+0xc>
 800be7a:	bd70      	pop	{r4, r5, r6, pc}

0800be7c <__match>:
 800be7c:	b530      	push	{r4, r5, lr}
 800be7e:	6803      	ldr	r3, [r0, #0]
 800be80:	3301      	adds	r3, #1
 800be82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be86:	b914      	cbnz	r4, 800be8e <__match+0x12>
 800be88:	6003      	str	r3, [r0, #0]
 800be8a:	2001      	movs	r0, #1
 800be8c:	bd30      	pop	{r4, r5, pc}
 800be8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be92:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800be96:	2d19      	cmp	r5, #25
 800be98:	bf98      	it	ls
 800be9a:	3220      	addls	r2, #32
 800be9c:	42a2      	cmp	r2, r4
 800be9e:	d0f0      	beq.n	800be82 <__match+0x6>
 800bea0:	2000      	movs	r0, #0
 800bea2:	e7f3      	b.n	800be8c <__match+0x10>

0800bea4 <__hexnan>:
 800bea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea8:	680b      	ldr	r3, [r1, #0]
 800beaa:	115e      	asrs	r6, r3, #5
 800beac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800beb0:	f013 031f 	ands.w	r3, r3, #31
 800beb4:	b087      	sub	sp, #28
 800beb6:	bf18      	it	ne
 800beb8:	3604      	addne	r6, #4
 800beba:	2500      	movs	r5, #0
 800bebc:	1f37      	subs	r7, r6, #4
 800bebe:	4690      	mov	r8, r2
 800bec0:	6802      	ldr	r2, [r0, #0]
 800bec2:	9301      	str	r3, [sp, #4]
 800bec4:	4682      	mov	sl, r0
 800bec6:	f846 5c04 	str.w	r5, [r6, #-4]
 800beca:	46b9      	mov	r9, r7
 800becc:	463c      	mov	r4, r7
 800bece:	9502      	str	r5, [sp, #8]
 800bed0:	46ab      	mov	fp, r5
 800bed2:	7851      	ldrb	r1, [r2, #1]
 800bed4:	1c53      	adds	r3, r2, #1
 800bed6:	9303      	str	r3, [sp, #12]
 800bed8:	b341      	cbz	r1, 800bf2c <__hexnan+0x88>
 800beda:	4608      	mov	r0, r1
 800bedc:	9205      	str	r2, [sp, #20]
 800bede:	9104      	str	r1, [sp, #16]
 800bee0:	f7ff fd5e 	bl	800b9a0 <__hexdig_fun>
 800bee4:	2800      	cmp	r0, #0
 800bee6:	d14f      	bne.n	800bf88 <__hexnan+0xe4>
 800bee8:	9904      	ldr	r1, [sp, #16]
 800beea:	9a05      	ldr	r2, [sp, #20]
 800beec:	2920      	cmp	r1, #32
 800beee:	d818      	bhi.n	800bf22 <__hexnan+0x7e>
 800bef0:	9b02      	ldr	r3, [sp, #8]
 800bef2:	459b      	cmp	fp, r3
 800bef4:	dd13      	ble.n	800bf1e <__hexnan+0x7a>
 800bef6:	454c      	cmp	r4, r9
 800bef8:	d206      	bcs.n	800bf08 <__hexnan+0x64>
 800befa:	2d07      	cmp	r5, #7
 800befc:	dc04      	bgt.n	800bf08 <__hexnan+0x64>
 800befe:	462a      	mov	r2, r5
 800bf00:	4649      	mov	r1, r9
 800bf02:	4620      	mov	r0, r4
 800bf04:	f7ff ffa8 	bl	800be58 <L_shift>
 800bf08:	4544      	cmp	r4, r8
 800bf0a:	d950      	bls.n	800bfae <__hexnan+0x10a>
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	f1a4 0904 	sub.w	r9, r4, #4
 800bf12:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf16:	f8cd b008 	str.w	fp, [sp, #8]
 800bf1a:	464c      	mov	r4, r9
 800bf1c:	461d      	mov	r5, r3
 800bf1e:	9a03      	ldr	r2, [sp, #12]
 800bf20:	e7d7      	b.n	800bed2 <__hexnan+0x2e>
 800bf22:	2929      	cmp	r1, #41	; 0x29
 800bf24:	d156      	bne.n	800bfd4 <__hexnan+0x130>
 800bf26:	3202      	adds	r2, #2
 800bf28:	f8ca 2000 	str.w	r2, [sl]
 800bf2c:	f1bb 0f00 	cmp.w	fp, #0
 800bf30:	d050      	beq.n	800bfd4 <__hexnan+0x130>
 800bf32:	454c      	cmp	r4, r9
 800bf34:	d206      	bcs.n	800bf44 <__hexnan+0xa0>
 800bf36:	2d07      	cmp	r5, #7
 800bf38:	dc04      	bgt.n	800bf44 <__hexnan+0xa0>
 800bf3a:	462a      	mov	r2, r5
 800bf3c:	4649      	mov	r1, r9
 800bf3e:	4620      	mov	r0, r4
 800bf40:	f7ff ff8a 	bl	800be58 <L_shift>
 800bf44:	4544      	cmp	r4, r8
 800bf46:	d934      	bls.n	800bfb2 <__hexnan+0x10e>
 800bf48:	f1a8 0204 	sub.w	r2, r8, #4
 800bf4c:	4623      	mov	r3, r4
 800bf4e:	f853 1b04 	ldr.w	r1, [r3], #4
 800bf52:	f842 1f04 	str.w	r1, [r2, #4]!
 800bf56:	429f      	cmp	r7, r3
 800bf58:	d2f9      	bcs.n	800bf4e <__hexnan+0xaa>
 800bf5a:	1b3b      	subs	r3, r7, r4
 800bf5c:	f023 0303 	bic.w	r3, r3, #3
 800bf60:	3304      	adds	r3, #4
 800bf62:	3401      	adds	r4, #1
 800bf64:	3e03      	subs	r6, #3
 800bf66:	42b4      	cmp	r4, r6
 800bf68:	bf88      	it	hi
 800bf6a:	2304      	movhi	r3, #4
 800bf6c:	4443      	add	r3, r8
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f843 2b04 	str.w	r2, [r3], #4
 800bf74:	429f      	cmp	r7, r3
 800bf76:	d2fb      	bcs.n	800bf70 <__hexnan+0xcc>
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	b91b      	cbnz	r3, 800bf84 <__hexnan+0xe0>
 800bf7c:	4547      	cmp	r7, r8
 800bf7e:	d127      	bne.n	800bfd0 <__hexnan+0x12c>
 800bf80:	2301      	movs	r3, #1
 800bf82:	603b      	str	r3, [r7, #0]
 800bf84:	2005      	movs	r0, #5
 800bf86:	e026      	b.n	800bfd6 <__hexnan+0x132>
 800bf88:	3501      	adds	r5, #1
 800bf8a:	2d08      	cmp	r5, #8
 800bf8c:	f10b 0b01 	add.w	fp, fp, #1
 800bf90:	dd06      	ble.n	800bfa0 <__hexnan+0xfc>
 800bf92:	4544      	cmp	r4, r8
 800bf94:	d9c3      	bls.n	800bf1e <__hexnan+0x7a>
 800bf96:	2300      	movs	r3, #0
 800bf98:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf9c:	2501      	movs	r5, #1
 800bf9e:	3c04      	subs	r4, #4
 800bfa0:	6822      	ldr	r2, [r4, #0]
 800bfa2:	f000 000f 	and.w	r0, r0, #15
 800bfa6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bfaa:	6022      	str	r2, [r4, #0]
 800bfac:	e7b7      	b.n	800bf1e <__hexnan+0x7a>
 800bfae:	2508      	movs	r5, #8
 800bfb0:	e7b5      	b.n	800bf1e <__hexnan+0x7a>
 800bfb2:	9b01      	ldr	r3, [sp, #4]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d0df      	beq.n	800bf78 <__hexnan+0xd4>
 800bfb8:	f04f 32ff 	mov.w	r2, #4294967295
 800bfbc:	f1c3 0320 	rsb	r3, r3, #32
 800bfc0:	fa22 f303 	lsr.w	r3, r2, r3
 800bfc4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bfc8:	401a      	ands	r2, r3
 800bfca:	f846 2c04 	str.w	r2, [r6, #-4]
 800bfce:	e7d3      	b.n	800bf78 <__hexnan+0xd4>
 800bfd0:	3f04      	subs	r7, #4
 800bfd2:	e7d1      	b.n	800bf78 <__hexnan+0xd4>
 800bfd4:	2004      	movs	r0, #4
 800bfd6:	b007      	add	sp, #28
 800bfd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bfdc <_isatty_r>:
 800bfdc:	b538      	push	{r3, r4, r5, lr}
 800bfde:	4d06      	ldr	r5, [pc, #24]	; (800bff8 <_isatty_r+0x1c>)
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	4608      	mov	r0, r1
 800bfe6:	602b      	str	r3, [r5, #0]
 800bfe8:	f7f8 fc03 	bl	80047f2 <_isatty>
 800bfec:	1c43      	adds	r3, r0, #1
 800bfee:	d102      	bne.n	800bff6 <_isatty_r+0x1a>
 800bff0:	682b      	ldr	r3, [r5, #0]
 800bff2:	b103      	cbz	r3, 800bff6 <_isatty_r+0x1a>
 800bff4:	6023      	str	r3, [r4, #0]
 800bff6:	bd38      	pop	{r3, r4, r5, pc}
 800bff8:	20001700 	.word	0x20001700

0800bffc <_lseek_r>:
 800bffc:	b538      	push	{r3, r4, r5, lr}
 800bffe:	4d07      	ldr	r5, [pc, #28]	; (800c01c <_lseek_r+0x20>)
 800c000:	4604      	mov	r4, r0
 800c002:	4608      	mov	r0, r1
 800c004:	4611      	mov	r1, r2
 800c006:	2200      	movs	r2, #0
 800c008:	602a      	str	r2, [r5, #0]
 800c00a:	461a      	mov	r2, r3
 800c00c:	f7f8 fbfc 	bl	8004808 <_lseek>
 800c010:	1c43      	adds	r3, r0, #1
 800c012:	d102      	bne.n	800c01a <_lseek_r+0x1e>
 800c014:	682b      	ldr	r3, [r5, #0]
 800c016:	b103      	cbz	r3, 800c01a <_lseek_r+0x1e>
 800c018:	6023      	str	r3, [r4, #0]
 800c01a:	bd38      	pop	{r3, r4, r5, pc}
 800c01c:	20001700 	.word	0x20001700

0800c020 <__ascii_mbtowc>:
 800c020:	b082      	sub	sp, #8
 800c022:	b901      	cbnz	r1, 800c026 <__ascii_mbtowc+0x6>
 800c024:	a901      	add	r1, sp, #4
 800c026:	b142      	cbz	r2, 800c03a <__ascii_mbtowc+0x1a>
 800c028:	b14b      	cbz	r3, 800c03e <__ascii_mbtowc+0x1e>
 800c02a:	7813      	ldrb	r3, [r2, #0]
 800c02c:	600b      	str	r3, [r1, #0]
 800c02e:	7812      	ldrb	r2, [r2, #0]
 800c030:	1e10      	subs	r0, r2, #0
 800c032:	bf18      	it	ne
 800c034:	2001      	movne	r0, #1
 800c036:	b002      	add	sp, #8
 800c038:	4770      	bx	lr
 800c03a:	4610      	mov	r0, r2
 800c03c:	e7fb      	b.n	800c036 <__ascii_mbtowc+0x16>
 800c03e:	f06f 0001 	mvn.w	r0, #1
 800c042:	e7f8      	b.n	800c036 <__ascii_mbtowc+0x16>

0800c044 <__malloc_lock>:
 800c044:	4801      	ldr	r0, [pc, #4]	; (800c04c <__malloc_lock+0x8>)
 800c046:	f7fe ba58 	b.w	800a4fa <__retarget_lock_acquire_recursive>
 800c04a:	bf00      	nop
 800c04c:	200016f2 	.word	0x200016f2

0800c050 <__malloc_unlock>:
 800c050:	4801      	ldr	r0, [pc, #4]	; (800c058 <__malloc_unlock+0x8>)
 800c052:	f7fe ba53 	b.w	800a4fc <__retarget_lock_release_recursive>
 800c056:	bf00      	nop
 800c058:	200016f2 	.word	0x200016f2

0800c05c <_Balloc>:
 800c05c:	b570      	push	{r4, r5, r6, lr}
 800c05e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c060:	4604      	mov	r4, r0
 800c062:	460d      	mov	r5, r1
 800c064:	b976      	cbnz	r6, 800c084 <_Balloc+0x28>
 800c066:	2010      	movs	r0, #16
 800c068:	f7fe faae 	bl	800a5c8 <malloc>
 800c06c:	4602      	mov	r2, r0
 800c06e:	6260      	str	r0, [r4, #36]	; 0x24
 800c070:	b920      	cbnz	r0, 800c07c <_Balloc+0x20>
 800c072:	4b18      	ldr	r3, [pc, #96]	; (800c0d4 <_Balloc+0x78>)
 800c074:	4818      	ldr	r0, [pc, #96]	; (800c0d8 <_Balloc+0x7c>)
 800c076:	2166      	movs	r1, #102	; 0x66
 800c078:	f001 f968 	bl	800d34c <__assert_func>
 800c07c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c080:	6006      	str	r6, [r0, #0]
 800c082:	60c6      	str	r6, [r0, #12]
 800c084:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c086:	68f3      	ldr	r3, [r6, #12]
 800c088:	b183      	cbz	r3, 800c0ac <_Balloc+0x50>
 800c08a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c08c:	68db      	ldr	r3, [r3, #12]
 800c08e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c092:	b9b8      	cbnz	r0, 800c0c4 <_Balloc+0x68>
 800c094:	2101      	movs	r1, #1
 800c096:	fa01 f605 	lsl.w	r6, r1, r5
 800c09a:	1d72      	adds	r2, r6, #5
 800c09c:	0092      	lsls	r2, r2, #2
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f000 fc9d 	bl	800c9de <_calloc_r>
 800c0a4:	b160      	cbz	r0, 800c0c0 <_Balloc+0x64>
 800c0a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c0aa:	e00e      	b.n	800c0ca <_Balloc+0x6e>
 800c0ac:	2221      	movs	r2, #33	; 0x21
 800c0ae:	2104      	movs	r1, #4
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	f000 fc94 	bl	800c9de <_calloc_r>
 800c0b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0b8:	60f0      	str	r0, [r6, #12]
 800c0ba:	68db      	ldr	r3, [r3, #12]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d1e4      	bne.n	800c08a <_Balloc+0x2e>
 800c0c0:	2000      	movs	r0, #0
 800c0c2:	bd70      	pop	{r4, r5, r6, pc}
 800c0c4:	6802      	ldr	r2, [r0, #0]
 800c0c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c0d0:	e7f7      	b.n	800c0c2 <_Balloc+0x66>
 800c0d2:	bf00      	nop
 800c0d4:	0800e39c 	.word	0x0800e39c
 800c0d8:	0800e3b3 	.word	0x0800e3b3

0800c0dc <_Bfree>:
 800c0dc:	b570      	push	{r4, r5, r6, lr}
 800c0de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c0e0:	4605      	mov	r5, r0
 800c0e2:	460c      	mov	r4, r1
 800c0e4:	b976      	cbnz	r6, 800c104 <_Bfree+0x28>
 800c0e6:	2010      	movs	r0, #16
 800c0e8:	f7fe fa6e 	bl	800a5c8 <malloc>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	6268      	str	r0, [r5, #36]	; 0x24
 800c0f0:	b920      	cbnz	r0, 800c0fc <_Bfree+0x20>
 800c0f2:	4b09      	ldr	r3, [pc, #36]	; (800c118 <_Bfree+0x3c>)
 800c0f4:	4809      	ldr	r0, [pc, #36]	; (800c11c <_Bfree+0x40>)
 800c0f6:	218a      	movs	r1, #138	; 0x8a
 800c0f8:	f001 f928 	bl	800d34c <__assert_func>
 800c0fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c100:	6006      	str	r6, [r0, #0]
 800c102:	60c6      	str	r6, [r0, #12]
 800c104:	b13c      	cbz	r4, 800c116 <_Bfree+0x3a>
 800c106:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c108:	6862      	ldr	r2, [r4, #4]
 800c10a:	68db      	ldr	r3, [r3, #12]
 800c10c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c110:	6021      	str	r1, [r4, #0]
 800c112:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c116:	bd70      	pop	{r4, r5, r6, pc}
 800c118:	0800e39c 	.word	0x0800e39c
 800c11c:	0800e3b3 	.word	0x0800e3b3

0800c120 <__multadd>:
 800c120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c124:	690d      	ldr	r5, [r1, #16]
 800c126:	4607      	mov	r7, r0
 800c128:	460c      	mov	r4, r1
 800c12a:	461e      	mov	r6, r3
 800c12c:	f101 0c14 	add.w	ip, r1, #20
 800c130:	2000      	movs	r0, #0
 800c132:	f8dc 3000 	ldr.w	r3, [ip]
 800c136:	b299      	uxth	r1, r3
 800c138:	fb02 6101 	mla	r1, r2, r1, r6
 800c13c:	0c1e      	lsrs	r6, r3, #16
 800c13e:	0c0b      	lsrs	r3, r1, #16
 800c140:	fb02 3306 	mla	r3, r2, r6, r3
 800c144:	b289      	uxth	r1, r1
 800c146:	3001      	adds	r0, #1
 800c148:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c14c:	4285      	cmp	r5, r0
 800c14e:	f84c 1b04 	str.w	r1, [ip], #4
 800c152:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c156:	dcec      	bgt.n	800c132 <__multadd+0x12>
 800c158:	b30e      	cbz	r6, 800c19e <__multadd+0x7e>
 800c15a:	68a3      	ldr	r3, [r4, #8]
 800c15c:	42ab      	cmp	r3, r5
 800c15e:	dc19      	bgt.n	800c194 <__multadd+0x74>
 800c160:	6861      	ldr	r1, [r4, #4]
 800c162:	4638      	mov	r0, r7
 800c164:	3101      	adds	r1, #1
 800c166:	f7ff ff79 	bl	800c05c <_Balloc>
 800c16a:	4680      	mov	r8, r0
 800c16c:	b928      	cbnz	r0, 800c17a <__multadd+0x5a>
 800c16e:	4602      	mov	r2, r0
 800c170:	4b0c      	ldr	r3, [pc, #48]	; (800c1a4 <__multadd+0x84>)
 800c172:	480d      	ldr	r0, [pc, #52]	; (800c1a8 <__multadd+0x88>)
 800c174:	21b5      	movs	r1, #181	; 0xb5
 800c176:	f001 f8e9 	bl	800d34c <__assert_func>
 800c17a:	6922      	ldr	r2, [r4, #16]
 800c17c:	3202      	adds	r2, #2
 800c17e:	f104 010c 	add.w	r1, r4, #12
 800c182:	0092      	lsls	r2, r2, #2
 800c184:	300c      	adds	r0, #12
 800c186:	f7fe fa2f 	bl	800a5e8 <memcpy>
 800c18a:	4621      	mov	r1, r4
 800c18c:	4638      	mov	r0, r7
 800c18e:	f7ff ffa5 	bl	800c0dc <_Bfree>
 800c192:	4644      	mov	r4, r8
 800c194:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c198:	3501      	adds	r5, #1
 800c19a:	615e      	str	r6, [r3, #20]
 800c19c:	6125      	str	r5, [r4, #16]
 800c19e:	4620      	mov	r0, r4
 800c1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1a4:	0800e310 	.word	0x0800e310
 800c1a8:	0800e3b3 	.word	0x0800e3b3

0800c1ac <__s2b>:
 800c1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1b0:	460c      	mov	r4, r1
 800c1b2:	4615      	mov	r5, r2
 800c1b4:	461f      	mov	r7, r3
 800c1b6:	2209      	movs	r2, #9
 800c1b8:	3308      	adds	r3, #8
 800c1ba:	4606      	mov	r6, r0
 800c1bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1c0:	2100      	movs	r1, #0
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	db09      	blt.n	800c1dc <__s2b+0x30>
 800c1c8:	4630      	mov	r0, r6
 800c1ca:	f7ff ff47 	bl	800c05c <_Balloc>
 800c1ce:	b940      	cbnz	r0, 800c1e2 <__s2b+0x36>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	4b19      	ldr	r3, [pc, #100]	; (800c238 <__s2b+0x8c>)
 800c1d4:	4819      	ldr	r0, [pc, #100]	; (800c23c <__s2b+0x90>)
 800c1d6:	21ce      	movs	r1, #206	; 0xce
 800c1d8:	f001 f8b8 	bl	800d34c <__assert_func>
 800c1dc:	0052      	lsls	r2, r2, #1
 800c1de:	3101      	adds	r1, #1
 800c1e0:	e7f0      	b.n	800c1c4 <__s2b+0x18>
 800c1e2:	9b08      	ldr	r3, [sp, #32]
 800c1e4:	6143      	str	r3, [r0, #20]
 800c1e6:	2d09      	cmp	r5, #9
 800c1e8:	f04f 0301 	mov.w	r3, #1
 800c1ec:	6103      	str	r3, [r0, #16]
 800c1ee:	dd16      	ble.n	800c21e <__s2b+0x72>
 800c1f0:	f104 0909 	add.w	r9, r4, #9
 800c1f4:	46c8      	mov	r8, r9
 800c1f6:	442c      	add	r4, r5
 800c1f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c1fc:	4601      	mov	r1, r0
 800c1fe:	3b30      	subs	r3, #48	; 0x30
 800c200:	220a      	movs	r2, #10
 800c202:	4630      	mov	r0, r6
 800c204:	f7ff ff8c 	bl	800c120 <__multadd>
 800c208:	45a0      	cmp	r8, r4
 800c20a:	d1f5      	bne.n	800c1f8 <__s2b+0x4c>
 800c20c:	f1a5 0408 	sub.w	r4, r5, #8
 800c210:	444c      	add	r4, r9
 800c212:	1b2d      	subs	r5, r5, r4
 800c214:	1963      	adds	r3, r4, r5
 800c216:	42bb      	cmp	r3, r7
 800c218:	db04      	blt.n	800c224 <__s2b+0x78>
 800c21a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c21e:	340a      	adds	r4, #10
 800c220:	2509      	movs	r5, #9
 800c222:	e7f6      	b.n	800c212 <__s2b+0x66>
 800c224:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c228:	4601      	mov	r1, r0
 800c22a:	3b30      	subs	r3, #48	; 0x30
 800c22c:	220a      	movs	r2, #10
 800c22e:	4630      	mov	r0, r6
 800c230:	f7ff ff76 	bl	800c120 <__multadd>
 800c234:	e7ee      	b.n	800c214 <__s2b+0x68>
 800c236:	bf00      	nop
 800c238:	0800e310 	.word	0x0800e310
 800c23c:	0800e3b3 	.word	0x0800e3b3

0800c240 <__hi0bits>:
 800c240:	0c03      	lsrs	r3, r0, #16
 800c242:	041b      	lsls	r3, r3, #16
 800c244:	b9d3      	cbnz	r3, 800c27c <__hi0bits+0x3c>
 800c246:	0400      	lsls	r0, r0, #16
 800c248:	2310      	movs	r3, #16
 800c24a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c24e:	bf04      	itt	eq
 800c250:	0200      	lsleq	r0, r0, #8
 800c252:	3308      	addeq	r3, #8
 800c254:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c258:	bf04      	itt	eq
 800c25a:	0100      	lsleq	r0, r0, #4
 800c25c:	3304      	addeq	r3, #4
 800c25e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c262:	bf04      	itt	eq
 800c264:	0080      	lsleq	r0, r0, #2
 800c266:	3302      	addeq	r3, #2
 800c268:	2800      	cmp	r0, #0
 800c26a:	db05      	blt.n	800c278 <__hi0bits+0x38>
 800c26c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c270:	f103 0301 	add.w	r3, r3, #1
 800c274:	bf08      	it	eq
 800c276:	2320      	moveq	r3, #32
 800c278:	4618      	mov	r0, r3
 800c27a:	4770      	bx	lr
 800c27c:	2300      	movs	r3, #0
 800c27e:	e7e4      	b.n	800c24a <__hi0bits+0xa>

0800c280 <__lo0bits>:
 800c280:	6803      	ldr	r3, [r0, #0]
 800c282:	f013 0207 	ands.w	r2, r3, #7
 800c286:	4601      	mov	r1, r0
 800c288:	d00b      	beq.n	800c2a2 <__lo0bits+0x22>
 800c28a:	07da      	lsls	r2, r3, #31
 800c28c:	d423      	bmi.n	800c2d6 <__lo0bits+0x56>
 800c28e:	0798      	lsls	r0, r3, #30
 800c290:	bf49      	itett	mi
 800c292:	085b      	lsrmi	r3, r3, #1
 800c294:	089b      	lsrpl	r3, r3, #2
 800c296:	2001      	movmi	r0, #1
 800c298:	600b      	strmi	r3, [r1, #0]
 800c29a:	bf5c      	itt	pl
 800c29c:	600b      	strpl	r3, [r1, #0]
 800c29e:	2002      	movpl	r0, #2
 800c2a0:	4770      	bx	lr
 800c2a2:	b298      	uxth	r0, r3
 800c2a4:	b9a8      	cbnz	r0, 800c2d2 <__lo0bits+0x52>
 800c2a6:	0c1b      	lsrs	r3, r3, #16
 800c2a8:	2010      	movs	r0, #16
 800c2aa:	b2da      	uxtb	r2, r3
 800c2ac:	b90a      	cbnz	r2, 800c2b2 <__lo0bits+0x32>
 800c2ae:	3008      	adds	r0, #8
 800c2b0:	0a1b      	lsrs	r3, r3, #8
 800c2b2:	071a      	lsls	r2, r3, #28
 800c2b4:	bf04      	itt	eq
 800c2b6:	091b      	lsreq	r3, r3, #4
 800c2b8:	3004      	addeq	r0, #4
 800c2ba:	079a      	lsls	r2, r3, #30
 800c2bc:	bf04      	itt	eq
 800c2be:	089b      	lsreq	r3, r3, #2
 800c2c0:	3002      	addeq	r0, #2
 800c2c2:	07da      	lsls	r2, r3, #31
 800c2c4:	d403      	bmi.n	800c2ce <__lo0bits+0x4e>
 800c2c6:	085b      	lsrs	r3, r3, #1
 800c2c8:	f100 0001 	add.w	r0, r0, #1
 800c2cc:	d005      	beq.n	800c2da <__lo0bits+0x5a>
 800c2ce:	600b      	str	r3, [r1, #0]
 800c2d0:	4770      	bx	lr
 800c2d2:	4610      	mov	r0, r2
 800c2d4:	e7e9      	b.n	800c2aa <__lo0bits+0x2a>
 800c2d6:	2000      	movs	r0, #0
 800c2d8:	4770      	bx	lr
 800c2da:	2020      	movs	r0, #32
 800c2dc:	4770      	bx	lr
	...

0800c2e0 <__i2b>:
 800c2e0:	b510      	push	{r4, lr}
 800c2e2:	460c      	mov	r4, r1
 800c2e4:	2101      	movs	r1, #1
 800c2e6:	f7ff feb9 	bl	800c05c <_Balloc>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	b928      	cbnz	r0, 800c2fa <__i2b+0x1a>
 800c2ee:	4b05      	ldr	r3, [pc, #20]	; (800c304 <__i2b+0x24>)
 800c2f0:	4805      	ldr	r0, [pc, #20]	; (800c308 <__i2b+0x28>)
 800c2f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c2f6:	f001 f829 	bl	800d34c <__assert_func>
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	6144      	str	r4, [r0, #20]
 800c2fe:	6103      	str	r3, [r0, #16]
 800c300:	bd10      	pop	{r4, pc}
 800c302:	bf00      	nop
 800c304:	0800e310 	.word	0x0800e310
 800c308:	0800e3b3 	.word	0x0800e3b3

0800c30c <__multiply>:
 800c30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c310:	4691      	mov	r9, r2
 800c312:	690a      	ldr	r2, [r1, #16]
 800c314:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c318:	429a      	cmp	r2, r3
 800c31a:	bfb8      	it	lt
 800c31c:	460b      	movlt	r3, r1
 800c31e:	460c      	mov	r4, r1
 800c320:	bfbc      	itt	lt
 800c322:	464c      	movlt	r4, r9
 800c324:	4699      	movlt	r9, r3
 800c326:	6927      	ldr	r7, [r4, #16]
 800c328:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c32c:	68a3      	ldr	r3, [r4, #8]
 800c32e:	6861      	ldr	r1, [r4, #4]
 800c330:	eb07 060a 	add.w	r6, r7, sl
 800c334:	42b3      	cmp	r3, r6
 800c336:	b085      	sub	sp, #20
 800c338:	bfb8      	it	lt
 800c33a:	3101      	addlt	r1, #1
 800c33c:	f7ff fe8e 	bl	800c05c <_Balloc>
 800c340:	b930      	cbnz	r0, 800c350 <__multiply+0x44>
 800c342:	4602      	mov	r2, r0
 800c344:	4b44      	ldr	r3, [pc, #272]	; (800c458 <__multiply+0x14c>)
 800c346:	4845      	ldr	r0, [pc, #276]	; (800c45c <__multiply+0x150>)
 800c348:	f240 115d 	movw	r1, #349	; 0x15d
 800c34c:	f000 fffe 	bl	800d34c <__assert_func>
 800c350:	f100 0514 	add.w	r5, r0, #20
 800c354:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c358:	462b      	mov	r3, r5
 800c35a:	2200      	movs	r2, #0
 800c35c:	4543      	cmp	r3, r8
 800c35e:	d321      	bcc.n	800c3a4 <__multiply+0x98>
 800c360:	f104 0314 	add.w	r3, r4, #20
 800c364:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c368:	f109 0314 	add.w	r3, r9, #20
 800c36c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c370:	9202      	str	r2, [sp, #8]
 800c372:	1b3a      	subs	r2, r7, r4
 800c374:	3a15      	subs	r2, #21
 800c376:	f022 0203 	bic.w	r2, r2, #3
 800c37a:	3204      	adds	r2, #4
 800c37c:	f104 0115 	add.w	r1, r4, #21
 800c380:	428f      	cmp	r7, r1
 800c382:	bf38      	it	cc
 800c384:	2204      	movcc	r2, #4
 800c386:	9201      	str	r2, [sp, #4]
 800c388:	9a02      	ldr	r2, [sp, #8]
 800c38a:	9303      	str	r3, [sp, #12]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d80c      	bhi.n	800c3aa <__multiply+0x9e>
 800c390:	2e00      	cmp	r6, #0
 800c392:	dd03      	ble.n	800c39c <__multiply+0x90>
 800c394:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d05a      	beq.n	800c452 <__multiply+0x146>
 800c39c:	6106      	str	r6, [r0, #16]
 800c39e:	b005      	add	sp, #20
 800c3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a4:	f843 2b04 	str.w	r2, [r3], #4
 800c3a8:	e7d8      	b.n	800c35c <__multiply+0x50>
 800c3aa:	f8b3 a000 	ldrh.w	sl, [r3]
 800c3ae:	f1ba 0f00 	cmp.w	sl, #0
 800c3b2:	d024      	beq.n	800c3fe <__multiply+0xf2>
 800c3b4:	f104 0e14 	add.w	lr, r4, #20
 800c3b8:	46a9      	mov	r9, r5
 800c3ba:	f04f 0c00 	mov.w	ip, #0
 800c3be:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c3c2:	f8d9 1000 	ldr.w	r1, [r9]
 800c3c6:	fa1f fb82 	uxth.w	fp, r2
 800c3ca:	b289      	uxth	r1, r1
 800c3cc:	fb0a 110b 	mla	r1, sl, fp, r1
 800c3d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c3d4:	f8d9 2000 	ldr.w	r2, [r9]
 800c3d8:	4461      	add	r1, ip
 800c3da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c3de:	fb0a c20b 	mla	r2, sl, fp, ip
 800c3e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c3e6:	b289      	uxth	r1, r1
 800c3e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c3ec:	4577      	cmp	r7, lr
 800c3ee:	f849 1b04 	str.w	r1, [r9], #4
 800c3f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c3f6:	d8e2      	bhi.n	800c3be <__multiply+0xb2>
 800c3f8:	9a01      	ldr	r2, [sp, #4]
 800c3fa:	f845 c002 	str.w	ip, [r5, r2]
 800c3fe:	9a03      	ldr	r2, [sp, #12]
 800c400:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c404:	3304      	adds	r3, #4
 800c406:	f1b9 0f00 	cmp.w	r9, #0
 800c40a:	d020      	beq.n	800c44e <__multiply+0x142>
 800c40c:	6829      	ldr	r1, [r5, #0]
 800c40e:	f104 0c14 	add.w	ip, r4, #20
 800c412:	46ae      	mov	lr, r5
 800c414:	f04f 0a00 	mov.w	sl, #0
 800c418:	f8bc b000 	ldrh.w	fp, [ip]
 800c41c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c420:	fb09 220b 	mla	r2, r9, fp, r2
 800c424:	4492      	add	sl, r2
 800c426:	b289      	uxth	r1, r1
 800c428:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c42c:	f84e 1b04 	str.w	r1, [lr], #4
 800c430:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c434:	f8be 1000 	ldrh.w	r1, [lr]
 800c438:	0c12      	lsrs	r2, r2, #16
 800c43a:	fb09 1102 	mla	r1, r9, r2, r1
 800c43e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c442:	4567      	cmp	r7, ip
 800c444:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c448:	d8e6      	bhi.n	800c418 <__multiply+0x10c>
 800c44a:	9a01      	ldr	r2, [sp, #4]
 800c44c:	50a9      	str	r1, [r5, r2]
 800c44e:	3504      	adds	r5, #4
 800c450:	e79a      	b.n	800c388 <__multiply+0x7c>
 800c452:	3e01      	subs	r6, #1
 800c454:	e79c      	b.n	800c390 <__multiply+0x84>
 800c456:	bf00      	nop
 800c458:	0800e310 	.word	0x0800e310
 800c45c:	0800e3b3 	.word	0x0800e3b3

0800c460 <__pow5mult>:
 800c460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c464:	4615      	mov	r5, r2
 800c466:	f012 0203 	ands.w	r2, r2, #3
 800c46a:	4606      	mov	r6, r0
 800c46c:	460f      	mov	r7, r1
 800c46e:	d007      	beq.n	800c480 <__pow5mult+0x20>
 800c470:	4c25      	ldr	r4, [pc, #148]	; (800c508 <__pow5mult+0xa8>)
 800c472:	3a01      	subs	r2, #1
 800c474:	2300      	movs	r3, #0
 800c476:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c47a:	f7ff fe51 	bl	800c120 <__multadd>
 800c47e:	4607      	mov	r7, r0
 800c480:	10ad      	asrs	r5, r5, #2
 800c482:	d03d      	beq.n	800c500 <__pow5mult+0xa0>
 800c484:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c486:	b97c      	cbnz	r4, 800c4a8 <__pow5mult+0x48>
 800c488:	2010      	movs	r0, #16
 800c48a:	f7fe f89d 	bl	800a5c8 <malloc>
 800c48e:	4602      	mov	r2, r0
 800c490:	6270      	str	r0, [r6, #36]	; 0x24
 800c492:	b928      	cbnz	r0, 800c4a0 <__pow5mult+0x40>
 800c494:	4b1d      	ldr	r3, [pc, #116]	; (800c50c <__pow5mult+0xac>)
 800c496:	481e      	ldr	r0, [pc, #120]	; (800c510 <__pow5mult+0xb0>)
 800c498:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c49c:	f000 ff56 	bl	800d34c <__assert_func>
 800c4a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4a4:	6004      	str	r4, [r0, #0]
 800c4a6:	60c4      	str	r4, [r0, #12]
 800c4a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c4ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c4b0:	b94c      	cbnz	r4, 800c4c6 <__pow5mult+0x66>
 800c4b2:	f240 2171 	movw	r1, #625	; 0x271
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	f7ff ff12 	bl	800c2e0 <__i2b>
 800c4bc:	2300      	movs	r3, #0
 800c4be:	f8c8 0008 	str.w	r0, [r8, #8]
 800c4c2:	4604      	mov	r4, r0
 800c4c4:	6003      	str	r3, [r0, #0]
 800c4c6:	f04f 0900 	mov.w	r9, #0
 800c4ca:	07eb      	lsls	r3, r5, #31
 800c4cc:	d50a      	bpl.n	800c4e4 <__pow5mult+0x84>
 800c4ce:	4639      	mov	r1, r7
 800c4d0:	4622      	mov	r2, r4
 800c4d2:	4630      	mov	r0, r6
 800c4d4:	f7ff ff1a 	bl	800c30c <__multiply>
 800c4d8:	4639      	mov	r1, r7
 800c4da:	4680      	mov	r8, r0
 800c4dc:	4630      	mov	r0, r6
 800c4de:	f7ff fdfd 	bl	800c0dc <_Bfree>
 800c4e2:	4647      	mov	r7, r8
 800c4e4:	106d      	asrs	r5, r5, #1
 800c4e6:	d00b      	beq.n	800c500 <__pow5mult+0xa0>
 800c4e8:	6820      	ldr	r0, [r4, #0]
 800c4ea:	b938      	cbnz	r0, 800c4fc <__pow5mult+0x9c>
 800c4ec:	4622      	mov	r2, r4
 800c4ee:	4621      	mov	r1, r4
 800c4f0:	4630      	mov	r0, r6
 800c4f2:	f7ff ff0b 	bl	800c30c <__multiply>
 800c4f6:	6020      	str	r0, [r4, #0]
 800c4f8:	f8c0 9000 	str.w	r9, [r0]
 800c4fc:	4604      	mov	r4, r0
 800c4fe:	e7e4      	b.n	800c4ca <__pow5mult+0x6a>
 800c500:	4638      	mov	r0, r7
 800c502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c506:	bf00      	nop
 800c508:	0800e500 	.word	0x0800e500
 800c50c:	0800e39c 	.word	0x0800e39c
 800c510:	0800e3b3 	.word	0x0800e3b3

0800c514 <__lshift>:
 800c514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c518:	460c      	mov	r4, r1
 800c51a:	6849      	ldr	r1, [r1, #4]
 800c51c:	6923      	ldr	r3, [r4, #16]
 800c51e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c522:	68a3      	ldr	r3, [r4, #8]
 800c524:	4607      	mov	r7, r0
 800c526:	4691      	mov	r9, r2
 800c528:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c52c:	f108 0601 	add.w	r6, r8, #1
 800c530:	42b3      	cmp	r3, r6
 800c532:	db0b      	blt.n	800c54c <__lshift+0x38>
 800c534:	4638      	mov	r0, r7
 800c536:	f7ff fd91 	bl	800c05c <_Balloc>
 800c53a:	4605      	mov	r5, r0
 800c53c:	b948      	cbnz	r0, 800c552 <__lshift+0x3e>
 800c53e:	4602      	mov	r2, r0
 800c540:	4b2a      	ldr	r3, [pc, #168]	; (800c5ec <__lshift+0xd8>)
 800c542:	482b      	ldr	r0, [pc, #172]	; (800c5f0 <__lshift+0xdc>)
 800c544:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c548:	f000 ff00 	bl	800d34c <__assert_func>
 800c54c:	3101      	adds	r1, #1
 800c54e:	005b      	lsls	r3, r3, #1
 800c550:	e7ee      	b.n	800c530 <__lshift+0x1c>
 800c552:	2300      	movs	r3, #0
 800c554:	f100 0114 	add.w	r1, r0, #20
 800c558:	f100 0210 	add.w	r2, r0, #16
 800c55c:	4618      	mov	r0, r3
 800c55e:	4553      	cmp	r3, sl
 800c560:	db37      	blt.n	800c5d2 <__lshift+0xbe>
 800c562:	6920      	ldr	r0, [r4, #16]
 800c564:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c568:	f104 0314 	add.w	r3, r4, #20
 800c56c:	f019 091f 	ands.w	r9, r9, #31
 800c570:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c574:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c578:	d02f      	beq.n	800c5da <__lshift+0xc6>
 800c57a:	f1c9 0e20 	rsb	lr, r9, #32
 800c57e:	468a      	mov	sl, r1
 800c580:	f04f 0c00 	mov.w	ip, #0
 800c584:	681a      	ldr	r2, [r3, #0]
 800c586:	fa02 f209 	lsl.w	r2, r2, r9
 800c58a:	ea42 020c 	orr.w	r2, r2, ip
 800c58e:	f84a 2b04 	str.w	r2, [sl], #4
 800c592:	f853 2b04 	ldr.w	r2, [r3], #4
 800c596:	4298      	cmp	r0, r3
 800c598:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c59c:	d8f2      	bhi.n	800c584 <__lshift+0x70>
 800c59e:	1b03      	subs	r3, r0, r4
 800c5a0:	3b15      	subs	r3, #21
 800c5a2:	f023 0303 	bic.w	r3, r3, #3
 800c5a6:	3304      	adds	r3, #4
 800c5a8:	f104 0215 	add.w	r2, r4, #21
 800c5ac:	4290      	cmp	r0, r2
 800c5ae:	bf38      	it	cc
 800c5b0:	2304      	movcc	r3, #4
 800c5b2:	f841 c003 	str.w	ip, [r1, r3]
 800c5b6:	f1bc 0f00 	cmp.w	ip, #0
 800c5ba:	d001      	beq.n	800c5c0 <__lshift+0xac>
 800c5bc:	f108 0602 	add.w	r6, r8, #2
 800c5c0:	3e01      	subs	r6, #1
 800c5c2:	4638      	mov	r0, r7
 800c5c4:	612e      	str	r6, [r5, #16]
 800c5c6:	4621      	mov	r1, r4
 800c5c8:	f7ff fd88 	bl	800c0dc <_Bfree>
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	e7c1      	b.n	800c55e <__lshift+0x4a>
 800c5da:	3904      	subs	r1, #4
 800c5dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c5e4:	4298      	cmp	r0, r3
 800c5e6:	d8f9      	bhi.n	800c5dc <__lshift+0xc8>
 800c5e8:	e7ea      	b.n	800c5c0 <__lshift+0xac>
 800c5ea:	bf00      	nop
 800c5ec:	0800e310 	.word	0x0800e310
 800c5f0:	0800e3b3 	.word	0x0800e3b3

0800c5f4 <__mcmp>:
 800c5f4:	b530      	push	{r4, r5, lr}
 800c5f6:	6902      	ldr	r2, [r0, #16]
 800c5f8:	690c      	ldr	r4, [r1, #16]
 800c5fa:	1b12      	subs	r2, r2, r4
 800c5fc:	d10e      	bne.n	800c61c <__mcmp+0x28>
 800c5fe:	f100 0314 	add.w	r3, r0, #20
 800c602:	3114      	adds	r1, #20
 800c604:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c608:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c60c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c610:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c614:	42a5      	cmp	r5, r4
 800c616:	d003      	beq.n	800c620 <__mcmp+0x2c>
 800c618:	d305      	bcc.n	800c626 <__mcmp+0x32>
 800c61a:	2201      	movs	r2, #1
 800c61c:	4610      	mov	r0, r2
 800c61e:	bd30      	pop	{r4, r5, pc}
 800c620:	4283      	cmp	r3, r0
 800c622:	d3f3      	bcc.n	800c60c <__mcmp+0x18>
 800c624:	e7fa      	b.n	800c61c <__mcmp+0x28>
 800c626:	f04f 32ff 	mov.w	r2, #4294967295
 800c62a:	e7f7      	b.n	800c61c <__mcmp+0x28>

0800c62c <__mdiff>:
 800c62c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c630:	460c      	mov	r4, r1
 800c632:	4606      	mov	r6, r0
 800c634:	4611      	mov	r1, r2
 800c636:	4620      	mov	r0, r4
 800c638:	4690      	mov	r8, r2
 800c63a:	f7ff ffdb 	bl	800c5f4 <__mcmp>
 800c63e:	1e05      	subs	r5, r0, #0
 800c640:	d110      	bne.n	800c664 <__mdiff+0x38>
 800c642:	4629      	mov	r1, r5
 800c644:	4630      	mov	r0, r6
 800c646:	f7ff fd09 	bl	800c05c <_Balloc>
 800c64a:	b930      	cbnz	r0, 800c65a <__mdiff+0x2e>
 800c64c:	4b3a      	ldr	r3, [pc, #232]	; (800c738 <__mdiff+0x10c>)
 800c64e:	4602      	mov	r2, r0
 800c650:	f240 2132 	movw	r1, #562	; 0x232
 800c654:	4839      	ldr	r0, [pc, #228]	; (800c73c <__mdiff+0x110>)
 800c656:	f000 fe79 	bl	800d34c <__assert_func>
 800c65a:	2301      	movs	r3, #1
 800c65c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c660:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c664:	bfa4      	itt	ge
 800c666:	4643      	movge	r3, r8
 800c668:	46a0      	movge	r8, r4
 800c66a:	4630      	mov	r0, r6
 800c66c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c670:	bfa6      	itte	ge
 800c672:	461c      	movge	r4, r3
 800c674:	2500      	movge	r5, #0
 800c676:	2501      	movlt	r5, #1
 800c678:	f7ff fcf0 	bl	800c05c <_Balloc>
 800c67c:	b920      	cbnz	r0, 800c688 <__mdiff+0x5c>
 800c67e:	4b2e      	ldr	r3, [pc, #184]	; (800c738 <__mdiff+0x10c>)
 800c680:	4602      	mov	r2, r0
 800c682:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c686:	e7e5      	b.n	800c654 <__mdiff+0x28>
 800c688:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c68c:	6926      	ldr	r6, [r4, #16]
 800c68e:	60c5      	str	r5, [r0, #12]
 800c690:	f104 0914 	add.w	r9, r4, #20
 800c694:	f108 0514 	add.w	r5, r8, #20
 800c698:	f100 0e14 	add.w	lr, r0, #20
 800c69c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c6a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c6a4:	f108 0210 	add.w	r2, r8, #16
 800c6a8:	46f2      	mov	sl, lr
 800c6aa:	2100      	movs	r1, #0
 800c6ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800c6b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c6b4:	fa1f f883 	uxth.w	r8, r3
 800c6b8:	fa11 f18b 	uxtah	r1, r1, fp
 800c6bc:	0c1b      	lsrs	r3, r3, #16
 800c6be:	eba1 0808 	sub.w	r8, r1, r8
 800c6c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c6c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c6ca:	fa1f f888 	uxth.w	r8, r8
 800c6ce:	1419      	asrs	r1, r3, #16
 800c6d0:	454e      	cmp	r6, r9
 800c6d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c6d6:	f84a 3b04 	str.w	r3, [sl], #4
 800c6da:	d8e7      	bhi.n	800c6ac <__mdiff+0x80>
 800c6dc:	1b33      	subs	r3, r6, r4
 800c6de:	3b15      	subs	r3, #21
 800c6e0:	f023 0303 	bic.w	r3, r3, #3
 800c6e4:	3304      	adds	r3, #4
 800c6e6:	3415      	adds	r4, #21
 800c6e8:	42a6      	cmp	r6, r4
 800c6ea:	bf38      	it	cc
 800c6ec:	2304      	movcc	r3, #4
 800c6ee:	441d      	add	r5, r3
 800c6f0:	4473      	add	r3, lr
 800c6f2:	469e      	mov	lr, r3
 800c6f4:	462e      	mov	r6, r5
 800c6f6:	4566      	cmp	r6, ip
 800c6f8:	d30e      	bcc.n	800c718 <__mdiff+0xec>
 800c6fa:	f10c 0203 	add.w	r2, ip, #3
 800c6fe:	1b52      	subs	r2, r2, r5
 800c700:	f022 0203 	bic.w	r2, r2, #3
 800c704:	3d03      	subs	r5, #3
 800c706:	45ac      	cmp	ip, r5
 800c708:	bf38      	it	cc
 800c70a:	2200      	movcc	r2, #0
 800c70c:	441a      	add	r2, r3
 800c70e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c712:	b17b      	cbz	r3, 800c734 <__mdiff+0x108>
 800c714:	6107      	str	r7, [r0, #16]
 800c716:	e7a3      	b.n	800c660 <__mdiff+0x34>
 800c718:	f856 8b04 	ldr.w	r8, [r6], #4
 800c71c:	fa11 f288 	uxtah	r2, r1, r8
 800c720:	1414      	asrs	r4, r2, #16
 800c722:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c726:	b292      	uxth	r2, r2
 800c728:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c72c:	f84e 2b04 	str.w	r2, [lr], #4
 800c730:	1421      	asrs	r1, r4, #16
 800c732:	e7e0      	b.n	800c6f6 <__mdiff+0xca>
 800c734:	3f01      	subs	r7, #1
 800c736:	e7ea      	b.n	800c70e <__mdiff+0xe2>
 800c738:	0800e310 	.word	0x0800e310
 800c73c:	0800e3b3 	.word	0x0800e3b3

0800c740 <__ulp>:
 800c740:	b082      	sub	sp, #8
 800c742:	ed8d 0b00 	vstr	d0, [sp]
 800c746:	9b01      	ldr	r3, [sp, #4]
 800c748:	4912      	ldr	r1, [pc, #72]	; (800c794 <__ulp+0x54>)
 800c74a:	4019      	ands	r1, r3
 800c74c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c750:	2900      	cmp	r1, #0
 800c752:	dd05      	ble.n	800c760 <__ulp+0x20>
 800c754:	2200      	movs	r2, #0
 800c756:	460b      	mov	r3, r1
 800c758:	ec43 2b10 	vmov	d0, r2, r3
 800c75c:	b002      	add	sp, #8
 800c75e:	4770      	bx	lr
 800c760:	4249      	negs	r1, r1
 800c762:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c766:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c76a:	f04f 0200 	mov.w	r2, #0
 800c76e:	f04f 0300 	mov.w	r3, #0
 800c772:	da04      	bge.n	800c77e <__ulp+0x3e>
 800c774:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c778:	fa41 f300 	asr.w	r3, r1, r0
 800c77c:	e7ec      	b.n	800c758 <__ulp+0x18>
 800c77e:	f1a0 0114 	sub.w	r1, r0, #20
 800c782:	291e      	cmp	r1, #30
 800c784:	bfda      	itte	le
 800c786:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c78a:	fa20 f101 	lsrle.w	r1, r0, r1
 800c78e:	2101      	movgt	r1, #1
 800c790:	460a      	mov	r2, r1
 800c792:	e7e1      	b.n	800c758 <__ulp+0x18>
 800c794:	7ff00000 	.word	0x7ff00000

0800c798 <__b2d>:
 800c798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c79a:	6905      	ldr	r5, [r0, #16]
 800c79c:	f100 0714 	add.w	r7, r0, #20
 800c7a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c7a4:	1f2e      	subs	r6, r5, #4
 800c7a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	f7ff fd48 	bl	800c240 <__hi0bits>
 800c7b0:	f1c0 0320 	rsb	r3, r0, #32
 800c7b4:	280a      	cmp	r0, #10
 800c7b6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c834 <__b2d+0x9c>
 800c7ba:	600b      	str	r3, [r1, #0]
 800c7bc:	dc14      	bgt.n	800c7e8 <__b2d+0x50>
 800c7be:	f1c0 0e0b 	rsb	lr, r0, #11
 800c7c2:	fa24 f10e 	lsr.w	r1, r4, lr
 800c7c6:	42b7      	cmp	r7, r6
 800c7c8:	ea41 030c 	orr.w	r3, r1, ip
 800c7cc:	bf34      	ite	cc
 800c7ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c7d2:	2100      	movcs	r1, #0
 800c7d4:	3015      	adds	r0, #21
 800c7d6:	fa04 f000 	lsl.w	r0, r4, r0
 800c7da:	fa21 f10e 	lsr.w	r1, r1, lr
 800c7de:	ea40 0201 	orr.w	r2, r0, r1
 800c7e2:	ec43 2b10 	vmov	d0, r2, r3
 800c7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7e8:	42b7      	cmp	r7, r6
 800c7ea:	bf3a      	itte	cc
 800c7ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c7f0:	f1a5 0608 	subcc.w	r6, r5, #8
 800c7f4:	2100      	movcs	r1, #0
 800c7f6:	380b      	subs	r0, #11
 800c7f8:	d017      	beq.n	800c82a <__b2d+0x92>
 800c7fa:	f1c0 0c20 	rsb	ip, r0, #32
 800c7fe:	fa04 f500 	lsl.w	r5, r4, r0
 800c802:	42be      	cmp	r6, r7
 800c804:	fa21 f40c 	lsr.w	r4, r1, ip
 800c808:	ea45 0504 	orr.w	r5, r5, r4
 800c80c:	bf8c      	ite	hi
 800c80e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c812:	2400      	movls	r4, #0
 800c814:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c818:	fa01 f000 	lsl.w	r0, r1, r0
 800c81c:	fa24 f40c 	lsr.w	r4, r4, ip
 800c820:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c824:	ea40 0204 	orr.w	r2, r0, r4
 800c828:	e7db      	b.n	800c7e2 <__b2d+0x4a>
 800c82a:	ea44 030c 	orr.w	r3, r4, ip
 800c82e:	460a      	mov	r2, r1
 800c830:	e7d7      	b.n	800c7e2 <__b2d+0x4a>
 800c832:	bf00      	nop
 800c834:	3ff00000 	.word	0x3ff00000

0800c838 <__d2b>:
 800c838:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c83c:	4689      	mov	r9, r1
 800c83e:	2101      	movs	r1, #1
 800c840:	ec57 6b10 	vmov	r6, r7, d0
 800c844:	4690      	mov	r8, r2
 800c846:	f7ff fc09 	bl	800c05c <_Balloc>
 800c84a:	4604      	mov	r4, r0
 800c84c:	b930      	cbnz	r0, 800c85c <__d2b+0x24>
 800c84e:	4602      	mov	r2, r0
 800c850:	4b25      	ldr	r3, [pc, #148]	; (800c8e8 <__d2b+0xb0>)
 800c852:	4826      	ldr	r0, [pc, #152]	; (800c8ec <__d2b+0xb4>)
 800c854:	f240 310a 	movw	r1, #778	; 0x30a
 800c858:	f000 fd78 	bl	800d34c <__assert_func>
 800c85c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c860:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c864:	bb35      	cbnz	r5, 800c8b4 <__d2b+0x7c>
 800c866:	2e00      	cmp	r6, #0
 800c868:	9301      	str	r3, [sp, #4]
 800c86a:	d028      	beq.n	800c8be <__d2b+0x86>
 800c86c:	4668      	mov	r0, sp
 800c86e:	9600      	str	r6, [sp, #0]
 800c870:	f7ff fd06 	bl	800c280 <__lo0bits>
 800c874:	9900      	ldr	r1, [sp, #0]
 800c876:	b300      	cbz	r0, 800c8ba <__d2b+0x82>
 800c878:	9a01      	ldr	r2, [sp, #4]
 800c87a:	f1c0 0320 	rsb	r3, r0, #32
 800c87e:	fa02 f303 	lsl.w	r3, r2, r3
 800c882:	430b      	orrs	r3, r1
 800c884:	40c2      	lsrs	r2, r0
 800c886:	6163      	str	r3, [r4, #20]
 800c888:	9201      	str	r2, [sp, #4]
 800c88a:	9b01      	ldr	r3, [sp, #4]
 800c88c:	61a3      	str	r3, [r4, #24]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	bf14      	ite	ne
 800c892:	2202      	movne	r2, #2
 800c894:	2201      	moveq	r2, #1
 800c896:	6122      	str	r2, [r4, #16]
 800c898:	b1d5      	cbz	r5, 800c8d0 <__d2b+0x98>
 800c89a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c89e:	4405      	add	r5, r0
 800c8a0:	f8c9 5000 	str.w	r5, [r9]
 800c8a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c8a8:	f8c8 0000 	str.w	r0, [r8]
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	b003      	add	sp, #12
 800c8b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c8b8:	e7d5      	b.n	800c866 <__d2b+0x2e>
 800c8ba:	6161      	str	r1, [r4, #20]
 800c8bc:	e7e5      	b.n	800c88a <__d2b+0x52>
 800c8be:	a801      	add	r0, sp, #4
 800c8c0:	f7ff fcde 	bl	800c280 <__lo0bits>
 800c8c4:	9b01      	ldr	r3, [sp, #4]
 800c8c6:	6163      	str	r3, [r4, #20]
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	6122      	str	r2, [r4, #16]
 800c8cc:	3020      	adds	r0, #32
 800c8ce:	e7e3      	b.n	800c898 <__d2b+0x60>
 800c8d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c8d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c8d8:	f8c9 0000 	str.w	r0, [r9]
 800c8dc:	6918      	ldr	r0, [r3, #16]
 800c8de:	f7ff fcaf 	bl	800c240 <__hi0bits>
 800c8e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c8e6:	e7df      	b.n	800c8a8 <__d2b+0x70>
 800c8e8:	0800e310 	.word	0x0800e310
 800c8ec:	0800e3b3 	.word	0x0800e3b3

0800c8f0 <__ratio>:
 800c8f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f4:	4688      	mov	r8, r1
 800c8f6:	4669      	mov	r1, sp
 800c8f8:	4681      	mov	r9, r0
 800c8fa:	f7ff ff4d 	bl	800c798 <__b2d>
 800c8fe:	a901      	add	r1, sp, #4
 800c900:	4640      	mov	r0, r8
 800c902:	ec55 4b10 	vmov	r4, r5, d0
 800c906:	f7ff ff47 	bl	800c798 <__b2d>
 800c90a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c90e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c912:	eba3 0c02 	sub.w	ip, r3, r2
 800c916:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c91a:	1a9b      	subs	r3, r3, r2
 800c91c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c920:	ec51 0b10 	vmov	r0, r1, d0
 800c924:	2b00      	cmp	r3, #0
 800c926:	bfd6      	itet	le
 800c928:	460a      	movle	r2, r1
 800c92a:	462a      	movgt	r2, r5
 800c92c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c930:	468b      	mov	fp, r1
 800c932:	462f      	mov	r7, r5
 800c934:	bfd4      	ite	le
 800c936:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c93a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c93e:	4620      	mov	r0, r4
 800c940:	ee10 2a10 	vmov	r2, s0
 800c944:	465b      	mov	r3, fp
 800c946:	4639      	mov	r1, r7
 800c948:	f7f3 ff58 	bl	80007fc <__aeabi_ddiv>
 800c94c:	ec41 0b10 	vmov	d0, r0, r1
 800c950:	b003      	add	sp, #12
 800c952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c956 <__copybits>:
 800c956:	3901      	subs	r1, #1
 800c958:	b570      	push	{r4, r5, r6, lr}
 800c95a:	1149      	asrs	r1, r1, #5
 800c95c:	6914      	ldr	r4, [r2, #16]
 800c95e:	3101      	adds	r1, #1
 800c960:	f102 0314 	add.w	r3, r2, #20
 800c964:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c968:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c96c:	1f05      	subs	r5, r0, #4
 800c96e:	42a3      	cmp	r3, r4
 800c970:	d30c      	bcc.n	800c98c <__copybits+0x36>
 800c972:	1aa3      	subs	r3, r4, r2
 800c974:	3b11      	subs	r3, #17
 800c976:	f023 0303 	bic.w	r3, r3, #3
 800c97a:	3211      	adds	r2, #17
 800c97c:	42a2      	cmp	r2, r4
 800c97e:	bf88      	it	hi
 800c980:	2300      	movhi	r3, #0
 800c982:	4418      	add	r0, r3
 800c984:	2300      	movs	r3, #0
 800c986:	4288      	cmp	r0, r1
 800c988:	d305      	bcc.n	800c996 <__copybits+0x40>
 800c98a:	bd70      	pop	{r4, r5, r6, pc}
 800c98c:	f853 6b04 	ldr.w	r6, [r3], #4
 800c990:	f845 6f04 	str.w	r6, [r5, #4]!
 800c994:	e7eb      	b.n	800c96e <__copybits+0x18>
 800c996:	f840 3b04 	str.w	r3, [r0], #4
 800c99a:	e7f4      	b.n	800c986 <__copybits+0x30>

0800c99c <__any_on>:
 800c99c:	f100 0214 	add.w	r2, r0, #20
 800c9a0:	6900      	ldr	r0, [r0, #16]
 800c9a2:	114b      	asrs	r3, r1, #5
 800c9a4:	4298      	cmp	r0, r3
 800c9a6:	b510      	push	{r4, lr}
 800c9a8:	db11      	blt.n	800c9ce <__any_on+0x32>
 800c9aa:	dd0a      	ble.n	800c9c2 <__any_on+0x26>
 800c9ac:	f011 011f 	ands.w	r1, r1, #31
 800c9b0:	d007      	beq.n	800c9c2 <__any_on+0x26>
 800c9b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c9b6:	fa24 f001 	lsr.w	r0, r4, r1
 800c9ba:	fa00 f101 	lsl.w	r1, r0, r1
 800c9be:	428c      	cmp	r4, r1
 800c9c0:	d10b      	bne.n	800c9da <__any_on+0x3e>
 800c9c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d803      	bhi.n	800c9d2 <__any_on+0x36>
 800c9ca:	2000      	movs	r0, #0
 800c9cc:	bd10      	pop	{r4, pc}
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	e7f7      	b.n	800c9c2 <__any_on+0x26>
 800c9d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9d6:	2900      	cmp	r1, #0
 800c9d8:	d0f5      	beq.n	800c9c6 <__any_on+0x2a>
 800c9da:	2001      	movs	r0, #1
 800c9dc:	e7f6      	b.n	800c9cc <__any_on+0x30>

0800c9de <_calloc_r>:
 800c9de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9e0:	fba1 2402 	umull	r2, r4, r1, r2
 800c9e4:	b94c      	cbnz	r4, 800c9fa <_calloc_r+0x1c>
 800c9e6:	4611      	mov	r1, r2
 800c9e8:	9201      	str	r2, [sp, #4]
 800c9ea:	f7fd fe99 	bl	800a720 <_malloc_r>
 800c9ee:	9a01      	ldr	r2, [sp, #4]
 800c9f0:	4605      	mov	r5, r0
 800c9f2:	b930      	cbnz	r0, 800ca02 <_calloc_r+0x24>
 800c9f4:	4628      	mov	r0, r5
 800c9f6:	b003      	add	sp, #12
 800c9f8:	bd30      	pop	{r4, r5, pc}
 800c9fa:	220c      	movs	r2, #12
 800c9fc:	6002      	str	r2, [r0, #0]
 800c9fe:	2500      	movs	r5, #0
 800ca00:	e7f8      	b.n	800c9f4 <_calloc_r+0x16>
 800ca02:	4621      	mov	r1, r4
 800ca04:	f7fd fe18 	bl	800a638 <memset>
 800ca08:	e7f4      	b.n	800c9f4 <_calloc_r+0x16>

0800ca0a <_realloc_r>:
 800ca0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca0e:	4680      	mov	r8, r0
 800ca10:	4614      	mov	r4, r2
 800ca12:	460e      	mov	r6, r1
 800ca14:	b921      	cbnz	r1, 800ca20 <_realloc_r+0x16>
 800ca16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca1a:	4611      	mov	r1, r2
 800ca1c:	f7fd be80 	b.w	800a720 <_malloc_r>
 800ca20:	b92a      	cbnz	r2, 800ca2e <_realloc_r+0x24>
 800ca22:	f7fd fe11 	bl	800a648 <_free_r>
 800ca26:	4625      	mov	r5, r4
 800ca28:	4628      	mov	r0, r5
 800ca2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca2e:	f000 fcbd 	bl	800d3ac <_malloc_usable_size_r>
 800ca32:	4284      	cmp	r4, r0
 800ca34:	4607      	mov	r7, r0
 800ca36:	d802      	bhi.n	800ca3e <_realloc_r+0x34>
 800ca38:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca3c:	d812      	bhi.n	800ca64 <_realloc_r+0x5a>
 800ca3e:	4621      	mov	r1, r4
 800ca40:	4640      	mov	r0, r8
 800ca42:	f7fd fe6d 	bl	800a720 <_malloc_r>
 800ca46:	4605      	mov	r5, r0
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d0ed      	beq.n	800ca28 <_realloc_r+0x1e>
 800ca4c:	42bc      	cmp	r4, r7
 800ca4e:	4622      	mov	r2, r4
 800ca50:	4631      	mov	r1, r6
 800ca52:	bf28      	it	cs
 800ca54:	463a      	movcs	r2, r7
 800ca56:	f7fd fdc7 	bl	800a5e8 <memcpy>
 800ca5a:	4631      	mov	r1, r6
 800ca5c:	4640      	mov	r0, r8
 800ca5e:	f7fd fdf3 	bl	800a648 <_free_r>
 800ca62:	e7e1      	b.n	800ca28 <_realloc_r+0x1e>
 800ca64:	4635      	mov	r5, r6
 800ca66:	e7df      	b.n	800ca28 <_realloc_r+0x1e>

0800ca68 <__ssputs_r>:
 800ca68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca6c:	688e      	ldr	r6, [r1, #8]
 800ca6e:	429e      	cmp	r6, r3
 800ca70:	4682      	mov	sl, r0
 800ca72:	460c      	mov	r4, r1
 800ca74:	4690      	mov	r8, r2
 800ca76:	461f      	mov	r7, r3
 800ca78:	d838      	bhi.n	800caec <__ssputs_r+0x84>
 800ca7a:	898a      	ldrh	r2, [r1, #12]
 800ca7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca80:	d032      	beq.n	800cae8 <__ssputs_r+0x80>
 800ca82:	6825      	ldr	r5, [r4, #0]
 800ca84:	6909      	ldr	r1, [r1, #16]
 800ca86:	eba5 0901 	sub.w	r9, r5, r1
 800ca8a:	6965      	ldr	r5, [r4, #20]
 800ca8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca94:	3301      	adds	r3, #1
 800ca96:	444b      	add	r3, r9
 800ca98:	106d      	asrs	r5, r5, #1
 800ca9a:	429d      	cmp	r5, r3
 800ca9c:	bf38      	it	cc
 800ca9e:	461d      	movcc	r5, r3
 800caa0:	0553      	lsls	r3, r2, #21
 800caa2:	d531      	bpl.n	800cb08 <__ssputs_r+0xa0>
 800caa4:	4629      	mov	r1, r5
 800caa6:	f7fd fe3b 	bl	800a720 <_malloc_r>
 800caaa:	4606      	mov	r6, r0
 800caac:	b950      	cbnz	r0, 800cac4 <__ssputs_r+0x5c>
 800caae:	230c      	movs	r3, #12
 800cab0:	f8ca 3000 	str.w	r3, [sl]
 800cab4:	89a3      	ldrh	r3, [r4, #12]
 800cab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caba:	81a3      	strh	r3, [r4, #12]
 800cabc:	f04f 30ff 	mov.w	r0, #4294967295
 800cac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac4:	6921      	ldr	r1, [r4, #16]
 800cac6:	464a      	mov	r2, r9
 800cac8:	f7fd fd8e 	bl	800a5e8 <memcpy>
 800cacc:	89a3      	ldrh	r3, [r4, #12]
 800cace:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cad6:	81a3      	strh	r3, [r4, #12]
 800cad8:	6126      	str	r6, [r4, #16]
 800cada:	6165      	str	r5, [r4, #20]
 800cadc:	444e      	add	r6, r9
 800cade:	eba5 0509 	sub.w	r5, r5, r9
 800cae2:	6026      	str	r6, [r4, #0]
 800cae4:	60a5      	str	r5, [r4, #8]
 800cae6:	463e      	mov	r6, r7
 800cae8:	42be      	cmp	r6, r7
 800caea:	d900      	bls.n	800caee <__ssputs_r+0x86>
 800caec:	463e      	mov	r6, r7
 800caee:	6820      	ldr	r0, [r4, #0]
 800caf0:	4632      	mov	r2, r6
 800caf2:	4641      	mov	r1, r8
 800caf4:	f7fd fd86 	bl	800a604 <memmove>
 800caf8:	68a3      	ldr	r3, [r4, #8]
 800cafa:	1b9b      	subs	r3, r3, r6
 800cafc:	60a3      	str	r3, [r4, #8]
 800cafe:	6823      	ldr	r3, [r4, #0]
 800cb00:	4433      	add	r3, r6
 800cb02:	6023      	str	r3, [r4, #0]
 800cb04:	2000      	movs	r0, #0
 800cb06:	e7db      	b.n	800cac0 <__ssputs_r+0x58>
 800cb08:	462a      	mov	r2, r5
 800cb0a:	f7ff ff7e 	bl	800ca0a <_realloc_r>
 800cb0e:	4606      	mov	r6, r0
 800cb10:	2800      	cmp	r0, #0
 800cb12:	d1e1      	bne.n	800cad8 <__ssputs_r+0x70>
 800cb14:	6921      	ldr	r1, [r4, #16]
 800cb16:	4650      	mov	r0, sl
 800cb18:	f7fd fd96 	bl	800a648 <_free_r>
 800cb1c:	e7c7      	b.n	800caae <__ssputs_r+0x46>
	...

0800cb20 <_svfiprintf_r>:
 800cb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb24:	4698      	mov	r8, r3
 800cb26:	898b      	ldrh	r3, [r1, #12]
 800cb28:	061b      	lsls	r3, r3, #24
 800cb2a:	b09d      	sub	sp, #116	; 0x74
 800cb2c:	4607      	mov	r7, r0
 800cb2e:	460d      	mov	r5, r1
 800cb30:	4614      	mov	r4, r2
 800cb32:	d50e      	bpl.n	800cb52 <_svfiprintf_r+0x32>
 800cb34:	690b      	ldr	r3, [r1, #16]
 800cb36:	b963      	cbnz	r3, 800cb52 <_svfiprintf_r+0x32>
 800cb38:	2140      	movs	r1, #64	; 0x40
 800cb3a:	f7fd fdf1 	bl	800a720 <_malloc_r>
 800cb3e:	6028      	str	r0, [r5, #0]
 800cb40:	6128      	str	r0, [r5, #16]
 800cb42:	b920      	cbnz	r0, 800cb4e <_svfiprintf_r+0x2e>
 800cb44:	230c      	movs	r3, #12
 800cb46:	603b      	str	r3, [r7, #0]
 800cb48:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4c:	e0d1      	b.n	800ccf2 <_svfiprintf_r+0x1d2>
 800cb4e:	2340      	movs	r3, #64	; 0x40
 800cb50:	616b      	str	r3, [r5, #20]
 800cb52:	2300      	movs	r3, #0
 800cb54:	9309      	str	r3, [sp, #36]	; 0x24
 800cb56:	2320      	movs	r3, #32
 800cb58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb60:	2330      	movs	r3, #48	; 0x30
 800cb62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cd0c <_svfiprintf_r+0x1ec>
 800cb66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb6a:	f04f 0901 	mov.w	r9, #1
 800cb6e:	4623      	mov	r3, r4
 800cb70:	469a      	mov	sl, r3
 800cb72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb76:	b10a      	cbz	r2, 800cb7c <_svfiprintf_r+0x5c>
 800cb78:	2a25      	cmp	r2, #37	; 0x25
 800cb7a:	d1f9      	bne.n	800cb70 <_svfiprintf_r+0x50>
 800cb7c:	ebba 0b04 	subs.w	fp, sl, r4
 800cb80:	d00b      	beq.n	800cb9a <_svfiprintf_r+0x7a>
 800cb82:	465b      	mov	r3, fp
 800cb84:	4622      	mov	r2, r4
 800cb86:	4629      	mov	r1, r5
 800cb88:	4638      	mov	r0, r7
 800cb8a:	f7ff ff6d 	bl	800ca68 <__ssputs_r>
 800cb8e:	3001      	adds	r0, #1
 800cb90:	f000 80aa 	beq.w	800cce8 <_svfiprintf_r+0x1c8>
 800cb94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb96:	445a      	add	r2, fp
 800cb98:	9209      	str	r2, [sp, #36]	; 0x24
 800cb9a:	f89a 3000 	ldrb.w	r3, [sl]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	f000 80a2 	beq.w	800cce8 <_svfiprintf_r+0x1c8>
 800cba4:	2300      	movs	r3, #0
 800cba6:	f04f 32ff 	mov.w	r2, #4294967295
 800cbaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbae:	f10a 0a01 	add.w	sl, sl, #1
 800cbb2:	9304      	str	r3, [sp, #16]
 800cbb4:	9307      	str	r3, [sp, #28]
 800cbb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbba:	931a      	str	r3, [sp, #104]	; 0x68
 800cbbc:	4654      	mov	r4, sl
 800cbbe:	2205      	movs	r2, #5
 800cbc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbc4:	4851      	ldr	r0, [pc, #324]	; (800cd0c <_svfiprintf_r+0x1ec>)
 800cbc6:	f7f3 fae3 	bl	8000190 <memchr>
 800cbca:	9a04      	ldr	r2, [sp, #16]
 800cbcc:	b9d8      	cbnz	r0, 800cc06 <_svfiprintf_r+0xe6>
 800cbce:	06d0      	lsls	r0, r2, #27
 800cbd0:	bf44      	itt	mi
 800cbd2:	2320      	movmi	r3, #32
 800cbd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbd8:	0711      	lsls	r1, r2, #28
 800cbda:	bf44      	itt	mi
 800cbdc:	232b      	movmi	r3, #43	; 0x2b
 800cbde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbe2:	f89a 3000 	ldrb.w	r3, [sl]
 800cbe6:	2b2a      	cmp	r3, #42	; 0x2a
 800cbe8:	d015      	beq.n	800cc16 <_svfiprintf_r+0xf6>
 800cbea:	9a07      	ldr	r2, [sp, #28]
 800cbec:	4654      	mov	r4, sl
 800cbee:	2000      	movs	r0, #0
 800cbf0:	f04f 0c0a 	mov.w	ip, #10
 800cbf4:	4621      	mov	r1, r4
 800cbf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbfa:	3b30      	subs	r3, #48	; 0x30
 800cbfc:	2b09      	cmp	r3, #9
 800cbfe:	d94e      	bls.n	800cc9e <_svfiprintf_r+0x17e>
 800cc00:	b1b0      	cbz	r0, 800cc30 <_svfiprintf_r+0x110>
 800cc02:	9207      	str	r2, [sp, #28]
 800cc04:	e014      	b.n	800cc30 <_svfiprintf_r+0x110>
 800cc06:	eba0 0308 	sub.w	r3, r0, r8
 800cc0a:	fa09 f303 	lsl.w	r3, r9, r3
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	9304      	str	r3, [sp, #16]
 800cc12:	46a2      	mov	sl, r4
 800cc14:	e7d2      	b.n	800cbbc <_svfiprintf_r+0x9c>
 800cc16:	9b03      	ldr	r3, [sp, #12]
 800cc18:	1d19      	adds	r1, r3, #4
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	9103      	str	r1, [sp, #12]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	bfbb      	ittet	lt
 800cc22:	425b      	neglt	r3, r3
 800cc24:	f042 0202 	orrlt.w	r2, r2, #2
 800cc28:	9307      	strge	r3, [sp, #28]
 800cc2a:	9307      	strlt	r3, [sp, #28]
 800cc2c:	bfb8      	it	lt
 800cc2e:	9204      	strlt	r2, [sp, #16]
 800cc30:	7823      	ldrb	r3, [r4, #0]
 800cc32:	2b2e      	cmp	r3, #46	; 0x2e
 800cc34:	d10c      	bne.n	800cc50 <_svfiprintf_r+0x130>
 800cc36:	7863      	ldrb	r3, [r4, #1]
 800cc38:	2b2a      	cmp	r3, #42	; 0x2a
 800cc3a:	d135      	bne.n	800cca8 <_svfiprintf_r+0x188>
 800cc3c:	9b03      	ldr	r3, [sp, #12]
 800cc3e:	1d1a      	adds	r2, r3, #4
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	9203      	str	r2, [sp, #12]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	bfb8      	it	lt
 800cc48:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc4c:	3402      	adds	r4, #2
 800cc4e:	9305      	str	r3, [sp, #20]
 800cc50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cd1c <_svfiprintf_r+0x1fc>
 800cc54:	7821      	ldrb	r1, [r4, #0]
 800cc56:	2203      	movs	r2, #3
 800cc58:	4650      	mov	r0, sl
 800cc5a:	f7f3 fa99 	bl	8000190 <memchr>
 800cc5e:	b140      	cbz	r0, 800cc72 <_svfiprintf_r+0x152>
 800cc60:	2340      	movs	r3, #64	; 0x40
 800cc62:	eba0 000a 	sub.w	r0, r0, sl
 800cc66:	fa03 f000 	lsl.w	r0, r3, r0
 800cc6a:	9b04      	ldr	r3, [sp, #16]
 800cc6c:	4303      	orrs	r3, r0
 800cc6e:	3401      	adds	r4, #1
 800cc70:	9304      	str	r3, [sp, #16]
 800cc72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc76:	4826      	ldr	r0, [pc, #152]	; (800cd10 <_svfiprintf_r+0x1f0>)
 800cc78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc7c:	2206      	movs	r2, #6
 800cc7e:	f7f3 fa87 	bl	8000190 <memchr>
 800cc82:	2800      	cmp	r0, #0
 800cc84:	d038      	beq.n	800ccf8 <_svfiprintf_r+0x1d8>
 800cc86:	4b23      	ldr	r3, [pc, #140]	; (800cd14 <_svfiprintf_r+0x1f4>)
 800cc88:	bb1b      	cbnz	r3, 800ccd2 <_svfiprintf_r+0x1b2>
 800cc8a:	9b03      	ldr	r3, [sp, #12]
 800cc8c:	3307      	adds	r3, #7
 800cc8e:	f023 0307 	bic.w	r3, r3, #7
 800cc92:	3308      	adds	r3, #8
 800cc94:	9303      	str	r3, [sp, #12]
 800cc96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc98:	4433      	add	r3, r6
 800cc9a:	9309      	str	r3, [sp, #36]	; 0x24
 800cc9c:	e767      	b.n	800cb6e <_svfiprintf_r+0x4e>
 800cc9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cca2:	460c      	mov	r4, r1
 800cca4:	2001      	movs	r0, #1
 800cca6:	e7a5      	b.n	800cbf4 <_svfiprintf_r+0xd4>
 800cca8:	2300      	movs	r3, #0
 800ccaa:	3401      	adds	r4, #1
 800ccac:	9305      	str	r3, [sp, #20]
 800ccae:	4619      	mov	r1, r3
 800ccb0:	f04f 0c0a 	mov.w	ip, #10
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccba:	3a30      	subs	r2, #48	; 0x30
 800ccbc:	2a09      	cmp	r2, #9
 800ccbe:	d903      	bls.n	800ccc8 <_svfiprintf_r+0x1a8>
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d0c5      	beq.n	800cc50 <_svfiprintf_r+0x130>
 800ccc4:	9105      	str	r1, [sp, #20]
 800ccc6:	e7c3      	b.n	800cc50 <_svfiprintf_r+0x130>
 800ccc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cccc:	4604      	mov	r4, r0
 800ccce:	2301      	movs	r3, #1
 800ccd0:	e7f0      	b.n	800ccb4 <_svfiprintf_r+0x194>
 800ccd2:	ab03      	add	r3, sp, #12
 800ccd4:	9300      	str	r3, [sp, #0]
 800ccd6:	462a      	mov	r2, r5
 800ccd8:	4b0f      	ldr	r3, [pc, #60]	; (800cd18 <_svfiprintf_r+0x1f8>)
 800ccda:	a904      	add	r1, sp, #16
 800ccdc:	4638      	mov	r0, r7
 800ccde:	f3af 8000 	nop.w
 800cce2:	1c42      	adds	r2, r0, #1
 800cce4:	4606      	mov	r6, r0
 800cce6:	d1d6      	bne.n	800cc96 <_svfiprintf_r+0x176>
 800cce8:	89ab      	ldrh	r3, [r5, #12]
 800ccea:	065b      	lsls	r3, r3, #25
 800ccec:	f53f af2c 	bmi.w	800cb48 <_svfiprintf_r+0x28>
 800ccf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccf2:	b01d      	add	sp, #116	; 0x74
 800ccf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf8:	ab03      	add	r3, sp, #12
 800ccfa:	9300      	str	r3, [sp, #0]
 800ccfc:	462a      	mov	r2, r5
 800ccfe:	4b06      	ldr	r3, [pc, #24]	; (800cd18 <_svfiprintf_r+0x1f8>)
 800cd00:	a904      	add	r1, sp, #16
 800cd02:	4638      	mov	r0, r7
 800cd04:	f000 f9d4 	bl	800d0b0 <_printf_i>
 800cd08:	e7eb      	b.n	800cce2 <_svfiprintf_r+0x1c2>
 800cd0a:	bf00      	nop
 800cd0c:	0800e50c 	.word	0x0800e50c
 800cd10:	0800e516 	.word	0x0800e516
 800cd14:	00000000 	.word	0x00000000
 800cd18:	0800ca69 	.word	0x0800ca69
 800cd1c:	0800e512 	.word	0x0800e512

0800cd20 <__sfputc_r>:
 800cd20:	6893      	ldr	r3, [r2, #8]
 800cd22:	3b01      	subs	r3, #1
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	b410      	push	{r4}
 800cd28:	6093      	str	r3, [r2, #8]
 800cd2a:	da08      	bge.n	800cd3e <__sfputc_r+0x1e>
 800cd2c:	6994      	ldr	r4, [r2, #24]
 800cd2e:	42a3      	cmp	r3, r4
 800cd30:	db01      	blt.n	800cd36 <__sfputc_r+0x16>
 800cd32:	290a      	cmp	r1, #10
 800cd34:	d103      	bne.n	800cd3e <__sfputc_r+0x1e>
 800cd36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd3a:	f7fe bceb 	b.w	800b714 <__swbuf_r>
 800cd3e:	6813      	ldr	r3, [r2, #0]
 800cd40:	1c58      	adds	r0, r3, #1
 800cd42:	6010      	str	r0, [r2, #0]
 800cd44:	7019      	strb	r1, [r3, #0]
 800cd46:	4608      	mov	r0, r1
 800cd48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd4c:	4770      	bx	lr

0800cd4e <__sfputs_r>:
 800cd4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd50:	4606      	mov	r6, r0
 800cd52:	460f      	mov	r7, r1
 800cd54:	4614      	mov	r4, r2
 800cd56:	18d5      	adds	r5, r2, r3
 800cd58:	42ac      	cmp	r4, r5
 800cd5a:	d101      	bne.n	800cd60 <__sfputs_r+0x12>
 800cd5c:	2000      	movs	r0, #0
 800cd5e:	e007      	b.n	800cd70 <__sfputs_r+0x22>
 800cd60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd64:	463a      	mov	r2, r7
 800cd66:	4630      	mov	r0, r6
 800cd68:	f7ff ffda 	bl	800cd20 <__sfputc_r>
 800cd6c:	1c43      	adds	r3, r0, #1
 800cd6e:	d1f3      	bne.n	800cd58 <__sfputs_r+0xa>
 800cd70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cd74 <_vfiprintf_r>:
 800cd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd78:	460d      	mov	r5, r1
 800cd7a:	b09d      	sub	sp, #116	; 0x74
 800cd7c:	4614      	mov	r4, r2
 800cd7e:	4698      	mov	r8, r3
 800cd80:	4606      	mov	r6, r0
 800cd82:	b118      	cbz	r0, 800cd8c <_vfiprintf_r+0x18>
 800cd84:	6983      	ldr	r3, [r0, #24]
 800cd86:	b90b      	cbnz	r3, 800cd8c <_vfiprintf_r+0x18>
 800cd88:	f7fd faf4 	bl	800a374 <__sinit>
 800cd8c:	4b89      	ldr	r3, [pc, #548]	; (800cfb4 <_vfiprintf_r+0x240>)
 800cd8e:	429d      	cmp	r5, r3
 800cd90:	d11b      	bne.n	800cdca <_vfiprintf_r+0x56>
 800cd92:	6875      	ldr	r5, [r6, #4]
 800cd94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd96:	07d9      	lsls	r1, r3, #31
 800cd98:	d405      	bmi.n	800cda6 <_vfiprintf_r+0x32>
 800cd9a:	89ab      	ldrh	r3, [r5, #12]
 800cd9c:	059a      	lsls	r2, r3, #22
 800cd9e:	d402      	bmi.n	800cda6 <_vfiprintf_r+0x32>
 800cda0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cda2:	f7fd fbaa 	bl	800a4fa <__retarget_lock_acquire_recursive>
 800cda6:	89ab      	ldrh	r3, [r5, #12]
 800cda8:	071b      	lsls	r3, r3, #28
 800cdaa:	d501      	bpl.n	800cdb0 <_vfiprintf_r+0x3c>
 800cdac:	692b      	ldr	r3, [r5, #16]
 800cdae:	b9eb      	cbnz	r3, 800cdec <_vfiprintf_r+0x78>
 800cdb0:	4629      	mov	r1, r5
 800cdb2:	4630      	mov	r0, r6
 800cdb4:	f7fe fd12 	bl	800b7dc <__swsetup_r>
 800cdb8:	b1c0      	cbz	r0, 800cdec <_vfiprintf_r+0x78>
 800cdba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdbc:	07dc      	lsls	r4, r3, #31
 800cdbe:	d50e      	bpl.n	800cdde <_vfiprintf_r+0x6a>
 800cdc0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc4:	b01d      	add	sp, #116	; 0x74
 800cdc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdca:	4b7b      	ldr	r3, [pc, #492]	; (800cfb8 <_vfiprintf_r+0x244>)
 800cdcc:	429d      	cmp	r5, r3
 800cdce:	d101      	bne.n	800cdd4 <_vfiprintf_r+0x60>
 800cdd0:	68b5      	ldr	r5, [r6, #8]
 800cdd2:	e7df      	b.n	800cd94 <_vfiprintf_r+0x20>
 800cdd4:	4b79      	ldr	r3, [pc, #484]	; (800cfbc <_vfiprintf_r+0x248>)
 800cdd6:	429d      	cmp	r5, r3
 800cdd8:	bf08      	it	eq
 800cdda:	68f5      	ldreq	r5, [r6, #12]
 800cddc:	e7da      	b.n	800cd94 <_vfiprintf_r+0x20>
 800cdde:	89ab      	ldrh	r3, [r5, #12]
 800cde0:	0598      	lsls	r0, r3, #22
 800cde2:	d4ed      	bmi.n	800cdc0 <_vfiprintf_r+0x4c>
 800cde4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cde6:	f7fd fb89 	bl	800a4fc <__retarget_lock_release_recursive>
 800cdea:	e7e9      	b.n	800cdc0 <_vfiprintf_r+0x4c>
 800cdec:	2300      	movs	r3, #0
 800cdee:	9309      	str	r3, [sp, #36]	; 0x24
 800cdf0:	2320      	movs	r3, #32
 800cdf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cdf6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdfa:	2330      	movs	r3, #48	; 0x30
 800cdfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cfc0 <_vfiprintf_r+0x24c>
 800ce00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce04:	f04f 0901 	mov.w	r9, #1
 800ce08:	4623      	mov	r3, r4
 800ce0a:	469a      	mov	sl, r3
 800ce0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce10:	b10a      	cbz	r2, 800ce16 <_vfiprintf_r+0xa2>
 800ce12:	2a25      	cmp	r2, #37	; 0x25
 800ce14:	d1f9      	bne.n	800ce0a <_vfiprintf_r+0x96>
 800ce16:	ebba 0b04 	subs.w	fp, sl, r4
 800ce1a:	d00b      	beq.n	800ce34 <_vfiprintf_r+0xc0>
 800ce1c:	465b      	mov	r3, fp
 800ce1e:	4622      	mov	r2, r4
 800ce20:	4629      	mov	r1, r5
 800ce22:	4630      	mov	r0, r6
 800ce24:	f7ff ff93 	bl	800cd4e <__sfputs_r>
 800ce28:	3001      	adds	r0, #1
 800ce2a:	f000 80aa 	beq.w	800cf82 <_vfiprintf_r+0x20e>
 800ce2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce30:	445a      	add	r2, fp
 800ce32:	9209      	str	r2, [sp, #36]	; 0x24
 800ce34:	f89a 3000 	ldrb.w	r3, [sl]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	f000 80a2 	beq.w	800cf82 <_vfiprintf_r+0x20e>
 800ce3e:	2300      	movs	r3, #0
 800ce40:	f04f 32ff 	mov.w	r2, #4294967295
 800ce44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce48:	f10a 0a01 	add.w	sl, sl, #1
 800ce4c:	9304      	str	r3, [sp, #16]
 800ce4e:	9307      	str	r3, [sp, #28]
 800ce50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce54:	931a      	str	r3, [sp, #104]	; 0x68
 800ce56:	4654      	mov	r4, sl
 800ce58:	2205      	movs	r2, #5
 800ce5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce5e:	4858      	ldr	r0, [pc, #352]	; (800cfc0 <_vfiprintf_r+0x24c>)
 800ce60:	f7f3 f996 	bl	8000190 <memchr>
 800ce64:	9a04      	ldr	r2, [sp, #16]
 800ce66:	b9d8      	cbnz	r0, 800cea0 <_vfiprintf_r+0x12c>
 800ce68:	06d1      	lsls	r1, r2, #27
 800ce6a:	bf44      	itt	mi
 800ce6c:	2320      	movmi	r3, #32
 800ce6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce72:	0713      	lsls	r3, r2, #28
 800ce74:	bf44      	itt	mi
 800ce76:	232b      	movmi	r3, #43	; 0x2b
 800ce78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ce80:	2b2a      	cmp	r3, #42	; 0x2a
 800ce82:	d015      	beq.n	800ceb0 <_vfiprintf_r+0x13c>
 800ce84:	9a07      	ldr	r2, [sp, #28]
 800ce86:	4654      	mov	r4, sl
 800ce88:	2000      	movs	r0, #0
 800ce8a:	f04f 0c0a 	mov.w	ip, #10
 800ce8e:	4621      	mov	r1, r4
 800ce90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce94:	3b30      	subs	r3, #48	; 0x30
 800ce96:	2b09      	cmp	r3, #9
 800ce98:	d94e      	bls.n	800cf38 <_vfiprintf_r+0x1c4>
 800ce9a:	b1b0      	cbz	r0, 800ceca <_vfiprintf_r+0x156>
 800ce9c:	9207      	str	r2, [sp, #28]
 800ce9e:	e014      	b.n	800ceca <_vfiprintf_r+0x156>
 800cea0:	eba0 0308 	sub.w	r3, r0, r8
 800cea4:	fa09 f303 	lsl.w	r3, r9, r3
 800cea8:	4313      	orrs	r3, r2
 800ceaa:	9304      	str	r3, [sp, #16]
 800ceac:	46a2      	mov	sl, r4
 800ceae:	e7d2      	b.n	800ce56 <_vfiprintf_r+0xe2>
 800ceb0:	9b03      	ldr	r3, [sp, #12]
 800ceb2:	1d19      	adds	r1, r3, #4
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	9103      	str	r1, [sp, #12]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	bfbb      	ittet	lt
 800cebc:	425b      	neglt	r3, r3
 800cebe:	f042 0202 	orrlt.w	r2, r2, #2
 800cec2:	9307      	strge	r3, [sp, #28]
 800cec4:	9307      	strlt	r3, [sp, #28]
 800cec6:	bfb8      	it	lt
 800cec8:	9204      	strlt	r2, [sp, #16]
 800ceca:	7823      	ldrb	r3, [r4, #0]
 800cecc:	2b2e      	cmp	r3, #46	; 0x2e
 800cece:	d10c      	bne.n	800ceea <_vfiprintf_r+0x176>
 800ced0:	7863      	ldrb	r3, [r4, #1]
 800ced2:	2b2a      	cmp	r3, #42	; 0x2a
 800ced4:	d135      	bne.n	800cf42 <_vfiprintf_r+0x1ce>
 800ced6:	9b03      	ldr	r3, [sp, #12]
 800ced8:	1d1a      	adds	r2, r3, #4
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	9203      	str	r2, [sp, #12]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	bfb8      	it	lt
 800cee2:	f04f 33ff 	movlt.w	r3, #4294967295
 800cee6:	3402      	adds	r4, #2
 800cee8:	9305      	str	r3, [sp, #20]
 800ceea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cfd0 <_vfiprintf_r+0x25c>
 800ceee:	7821      	ldrb	r1, [r4, #0]
 800cef0:	2203      	movs	r2, #3
 800cef2:	4650      	mov	r0, sl
 800cef4:	f7f3 f94c 	bl	8000190 <memchr>
 800cef8:	b140      	cbz	r0, 800cf0c <_vfiprintf_r+0x198>
 800cefa:	2340      	movs	r3, #64	; 0x40
 800cefc:	eba0 000a 	sub.w	r0, r0, sl
 800cf00:	fa03 f000 	lsl.w	r0, r3, r0
 800cf04:	9b04      	ldr	r3, [sp, #16]
 800cf06:	4303      	orrs	r3, r0
 800cf08:	3401      	adds	r4, #1
 800cf0a:	9304      	str	r3, [sp, #16]
 800cf0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf10:	482c      	ldr	r0, [pc, #176]	; (800cfc4 <_vfiprintf_r+0x250>)
 800cf12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf16:	2206      	movs	r2, #6
 800cf18:	f7f3 f93a 	bl	8000190 <memchr>
 800cf1c:	2800      	cmp	r0, #0
 800cf1e:	d03f      	beq.n	800cfa0 <_vfiprintf_r+0x22c>
 800cf20:	4b29      	ldr	r3, [pc, #164]	; (800cfc8 <_vfiprintf_r+0x254>)
 800cf22:	bb1b      	cbnz	r3, 800cf6c <_vfiprintf_r+0x1f8>
 800cf24:	9b03      	ldr	r3, [sp, #12]
 800cf26:	3307      	adds	r3, #7
 800cf28:	f023 0307 	bic.w	r3, r3, #7
 800cf2c:	3308      	adds	r3, #8
 800cf2e:	9303      	str	r3, [sp, #12]
 800cf30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf32:	443b      	add	r3, r7
 800cf34:	9309      	str	r3, [sp, #36]	; 0x24
 800cf36:	e767      	b.n	800ce08 <_vfiprintf_r+0x94>
 800cf38:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf3c:	460c      	mov	r4, r1
 800cf3e:	2001      	movs	r0, #1
 800cf40:	e7a5      	b.n	800ce8e <_vfiprintf_r+0x11a>
 800cf42:	2300      	movs	r3, #0
 800cf44:	3401      	adds	r4, #1
 800cf46:	9305      	str	r3, [sp, #20]
 800cf48:	4619      	mov	r1, r3
 800cf4a:	f04f 0c0a 	mov.w	ip, #10
 800cf4e:	4620      	mov	r0, r4
 800cf50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf54:	3a30      	subs	r2, #48	; 0x30
 800cf56:	2a09      	cmp	r2, #9
 800cf58:	d903      	bls.n	800cf62 <_vfiprintf_r+0x1ee>
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d0c5      	beq.n	800ceea <_vfiprintf_r+0x176>
 800cf5e:	9105      	str	r1, [sp, #20]
 800cf60:	e7c3      	b.n	800ceea <_vfiprintf_r+0x176>
 800cf62:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf66:	4604      	mov	r4, r0
 800cf68:	2301      	movs	r3, #1
 800cf6a:	e7f0      	b.n	800cf4e <_vfiprintf_r+0x1da>
 800cf6c:	ab03      	add	r3, sp, #12
 800cf6e:	9300      	str	r3, [sp, #0]
 800cf70:	462a      	mov	r2, r5
 800cf72:	4b16      	ldr	r3, [pc, #88]	; (800cfcc <_vfiprintf_r+0x258>)
 800cf74:	a904      	add	r1, sp, #16
 800cf76:	4630      	mov	r0, r6
 800cf78:	f3af 8000 	nop.w
 800cf7c:	4607      	mov	r7, r0
 800cf7e:	1c78      	adds	r0, r7, #1
 800cf80:	d1d6      	bne.n	800cf30 <_vfiprintf_r+0x1bc>
 800cf82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf84:	07d9      	lsls	r1, r3, #31
 800cf86:	d405      	bmi.n	800cf94 <_vfiprintf_r+0x220>
 800cf88:	89ab      	ldrh	r3, [r5, #12]
 800cf8a:	059a      	lsls	r2, r3, #22
 800cf8c:	d402      	bmi.n	800cf94 <_vfiprintf_r+0x220>
 800cf8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf90:	f7fd fab4 	bl	800a4fc <__retarget_lock_release_recursive>
 800cf94:	89ab      	ldrh	r3, [r5, #12]
 800cf96:	065b      	lsls	r3, r3, #25
 800cf98:	f53f af12 	bmi.w	800cdc0 <_vfiprintf_r+0x4c>
 800cf9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf9e:	e711      	b.n	800cdc4 <_vfiprintf_r+0x50>
 800cfa0:	ab03      	add	r3, sp, #12
 800cfa2:	9300      	str	r3, [sp, #0]
 800cfa4:	462a      	mov	r2, r5
 800cfa6:	4b09      	ldr	r3, [pc, #36]	; (800cfcc <_vfiprintf_r+0x258>)
 800cfa8:	a904      	add	r1, sp, #16
 800cfaa:	4630      	mov	r0, r6
 800cfac:	f000 f880 	bl	800d0b0 <_printf_i>
 800cfb0:	e7e4      	b.n	800cf7c <_vfiprintf_r+0x208>
 800cfb2:	bf00      	nop
 800cfb4:	0800e270 	.word	0x0800e270
 800cfb8:	0800e290 	.word	0x0800e290
 800cfbc:	0800e250 	.word	0x0800e250
 800cfc0:	0800e50c 	.word	0x0800e50c
 800cfc4:	0800e516 	.word	0x0800e516
 800cfc8:	00000000 	.word	0x00000000
 800cfcc:	0800cd4f 	.word	0x0800cd4f
 800cfd0:	0800e512 	.word	0x0800e512

0800cfd4 <_printf_common>:
 800cfd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfd8:	4616      	mov	r6, r2
 800cfda:	4699      	mov	r9, r3
 800cfdc:	688a      	ldr	r2, [r1, #8]
 800cfde:	690b      	ldr	r3, [r1, #16]
 800cfe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	bfb8      	it	lt
 800cfe8:	4613      	movlt	r3, r2
 800cfea:	6033      	str	r3, [r6, #0]
 800cfec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cff0:	4607      	mov	r7, r0
 800cff2:	460c      	mov	r4, r1
 800cff4:	b10a      	cbz	r2, 800cffa <_printf_common+0x26>
 800cff6:	3301      	adds	r3, #1
 800cff8:	6033      	str	r3, [r6, #0]
 800cffa:	6823      	ldr	r3, [r4, #0]
 800cffc:	0699      	lsls	r1, r3, #26
 800cffe:	bf42      	ittt	mi
 800d000:	6833      	ldrmi	r3, [r6, #0]
 800d002:	3302      	addmi	r3, #2
 800d004:	6033      	strmi	r3, [r6, #0]
 800d006:	6825      	ldr	r5, [r4, #0]
 800d008:	f015 0506 	ands.w	r5, r5, #6
 800d00c:	d106      	bne.n	800d01c <_printf_common+0x48>
 800d00e:	f104 0a19 	add.w	sl, r4, #25
 800d012:	68e3      	ldr	r3, [r4, #12]
 800d014:	6832      	ldr	r2, [r6, #0]
 800d016:	1a9b      	subs	r3, r3, r2
 800d018:	42ab      	cmp	r3, r5
 800d01a:	dc26      	bgt.n	800d06a <_printf_common+0x96>
 800d01c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d020:	1e13      	subs	r3, r2, #0
 800d022:	6822      	ldr	r2, [r4, #0]
 800d024:	bf18      	it	ne
 800d026:	2301      	movne	r3, #1
 800d028:	0692      	lsls	r2, r2, #26
 800d02a:	d42b      	bmi.n	800d084 <_printf_common+0xb0>
 800d02c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d030:	4649      	mov	r1, r9
 800d032:	4638      	mov	r0, r7
 800d034:	47c0      	blx	r8
 800d036:	3001      	adds	r0, #1
 800d038:	d01e      	beq.n	800d078 <_printf_common+0xa4>
 800d03a:	6823      	ldr	r3, [r4, #0]
 800d03c:	68e5      	ldr	r5, [r4, #12]
 800d03e:	6832      	ldr	r2, [r6, #0]
 800d040:	f003 0306 	and.w	r3, r3, #6
 800d044:	2b04      	cmp	r3, #4
 800d046:	bf08      	it	eq
 800d048:	1aad      	subeq	r5, r5, r2
 800d04a:	68a3      	ldr	r3, [r4, #8]
 800d04c:	6922      	ldr	r2, [r4, #16]
 800d04e:	bf0c      	ite	eq
 800d050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d054:	2500      	movne	r5, #0
 800d056:	4293      	cmp	r3, r2
 800d058:	bfc4      	itt	gt
 800d05a:	1a9b      	subgt	r3, r3, r2
 800d05c:	18ed      	addgt	r5, r5, r3
 800d05e:	2600      	movs	r6, #0
 800d060:	341a      	adds	r4, #26
 800d062:	42b5      	cmp	r5, r6
 800d064:	d11a      	bne.n	800d09c <_printf_common+0xc8>
 800d066:	2000      	movs	r0, #0
 800d068:	e008      	b.n	800d07c <_printf_common+0xa8>
 800d06a:	2301      	movs	r3, #1
 800d06c:	4652      	mov	r2, sl
 800d06e:	4649      	mov	r1, r9
 800d070:	4638      	mov	r0, r7
 800d072:	47c0      	blx	r8
 800d074:	3001      	adds	r0, #1
 800d076:	d103      	bne.n	800d080 <_printf_common+0xac>
 800d078:	f04f 30ff 	mov.w	r0, #4294967295
 800d07c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d080:	3501      	adds	r5, #1
 800d082:	e7c6      	b.n	800d012 <_printf_common+0x3e>
 800d084:	18e1      	adds	r1, r4, r3
 800d086:	1c5a      	adds	r2, r3, #1
 800d088:	2030      	movs	r0, #48	; 0x30
 800d08a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d08e:	4422      	add	r2, r4
 800d090:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d094:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d098:	3302      	adds	r3, #2
 800d09a:	e7c7      	b.n	800d02c <_printf_common+0x58>
 800d09c:	2301      	movs	r3, #1
 800d09e:	4622      	mov	r2, r4
 800d0a0:	4649      	mov	r1, r9
 800d0a2:	4638      	mov	r0, r7
 800d0a4:	47c0      	blx	r8
 800d0a6:	3001      	adds	r0, #1
 800d0a8:	d0e6      	beq.n	800d078 <_printf_common+0xa4>
 800d0aa:	3601      	adds	r6, #1
 800d0ac:	e7d9      	b.n	800d062 <_printf_common+0x8e>
	...

0800d0b0 <_printf_i>:
 800d0b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0b4:	7e0f      	ldrb	r7, [r1, #24]
 800d0b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d0b8:	2f78      	cmp	r7, #120	; 0x78
 800d0ba:	4691      	mov	r9, r2
 800d0bc:	4680      	mov	r8, r0
 800d0be:	460c      	mov	r4, r1
 800d0c0:	469a      	mov	sl, r3
 800d0c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d0c6:	d807      	bhi.n	800d0d8 <_printf_i+0x28>
 800d0c8:	2f62      	cmp	r7, #98	; 0x62
 800d0ca:	d80a      	bhi.n	800d0e2 <_printf_i+0x32>
 800d0cc:	2f00      	cmp	r7, #0
 800d0ce:	f000 80d8 	beq.w	800d282 <_printf_i+0x1d2>
 800d0d2:	2f58      	cmp	r7, #88	; 0x58
 800d0d4:	f000 80a3 	beq.w	800d21e <_printf_i+0x16e>
 800d0d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d0e0:	e03a      	b.n	800d158 <_printf_i+0xa8>
 800d0e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d0e6:	2b15      	cmp	r3, #21
 800d0e8:	d8f6      	bhi.n	800d0d8 <_printf_i+0x28>
 800d0ea:	a101      	add	r1, pc, #4	; (adr r1, 800d0f0 <_printf_i+0x40>)
 800d0ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d0f0:	0800d149 	.word	0x0800d149
 800d0f4:	0800d15d 	.word	0x0800d15d
 800d0f8:	0800d0d9 	.word	0x0800d0d9
 800d0fc:	0800d0d9 	.word	0x0800d0d9
 800d100:	0800d0d9 	.word	0x0800d0d9
 800d104:	0800d0d9 	.word	0x0800d0d9
 800d108:	0800d15d 	.word	0x0800d15d
 800d10c:	0800d0d9 	.word	0x0800d0d9
 800d110:	0800d0d9 	.word	0x0800d0d9
 800d114:	0800d0d9 	.word	0x0800d0d9
 800d118:	0800d0d9 	.word	0x0800d0d9
 800d11c:	0800d269 	.word	0x0800d269
 800d120:	0800d18d 	.word	0x0800d18d
 800d124:	0800d24b 	.word	0x0800d24b
 800d128:	0800d0d9 	.word	0x0800d0d9
 800d12c:	0800d0d9 	.word	0x0800d0d9
 800d130:	0800d28b 	.word	0x0800d28b
 800d134:	0800d0d9 	.word	0x0800d0d9
 800d138:	0800d18d 	.word	0x0800d18d
 800d13c:	0800d0d9 	.word	0x0800d0d9
 800d140:	0800d0d9 	.word	0x0800d0d9
 800d144:	0800d253 	.word	0x0800d253
 800d148:	682b      	ldr	r3, [r5, #0]
 800d14a:	1d1a      	adds	r2, r3, #4
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	602a      	str	r2, [r5, #0]
 800d150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d158:	2301      	movs	r3, #1
 800d15a:	e0a3      	b.n	800d2a4 <_printf_i+0x1f4>
 800d15c:	6820      	ldr	r0, [r4, #0]
 800d15e:	6829      	ldr	r1, [r5, #0]
 800d160:	0606      	lsls	r6, r0, #24
 800d162:	f101 0304 	add.w	r3, r1, #4
 800d166:	d50a      	bpl.n	800d17e <_printf_i+0xce>
 800d168:	680e      	ldr	r6, [r1, #0]
 800d16a:	602b      	str	r3, [r5, #0]
 800d16c:	2e00      	cmp	r6, #0
 800d16e:	da03      	bge.n	800d178 <_printf_i+0xc8>
 800d170:	232d      	movs	r3, #45	; 0x2d
 800d172:	4276      	negs	r6, r6
 800d174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d178:	485e      	ldr	r0, [pc, #376]	; (800d2f4 <_printf_i+0x244>)
 800d17a:	230a      	movs	r3, #10
 800d17c:	e019      	b.n	800d1b2 <_printf_i+0x102>
 800d17e:	680e      	ldr	r6, [r1, #0]
 800d180:	602b      	str	r3, [r5, #0]
 800d182:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d186:	bf18      	it	ne
 800d188:	b236      	sxthne	r6, r6
 800d18a:	e7ef      	b.n	800d16c <_printf_i+0xbc>
 800d18c:	682b      	ldr	r3, [r5, #0]
 800d18e:	6820      	ldr	r0, [r4, #0]
 800d190:	1d19      	adds	r1, r3, #4
 800d192:	6029      	str	r1, [r5, #0]
 800d194:	0601      	lsls	r1, r0, #24
 800d196:	d501      	bpl.n	800d19c <_printf_i+0xec>
 800d198:	681e      	ldr	r6, [r3, #0]
 800d19a:	e002      	b.n	800d1a2 <_printf_i+0xf2>
 800d19c:	0646      	lsls	r6, r0, #25
 800d19e:	d5fb      	bpl.n	800d198 <_printf_i+0xe8>
 800d1a0:	881e      	ldrh	r6, [r3, #0]
 800d1a2:	4854      	ldr	r0, [pc, #336]	; (800d2f4 <_printf_i+0x244>)
 800d1a4:	2f6f      	cmp	r7, #111	; 0x6f
 800d1a6:	bf0c      	ite	eq
 800d1a8:	2308      	moveq	r3, #8
 800d1aa:	230a      	movne	r3, #10
 800d1ac:	2100      	movs	r1, #0
 800d1ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d1b2:	6865      	ldr	r5, [r4, #4]
 800d1b4:	60a5      	str	r5, [r4, #8]
 800d1b6:	2d00      	cmp	r5, #0
 800d1b8:	bfa2      	ittt	ge
 800d1ba:	6821      	ldrge	r1, [r4, #0]
 800d1bc:	f021 0104 	bicge.w	r1, r1, #4
 800d1c0:	6021      	strge	r1, [r4, #0]
 800d1c2:	b90e      	cbnz	r6, 800d1c8 <_printf_i+0x118>
 800d1c4:	2d00      	cmp	r5, #0
 800d1c6:	d04d      	beq.n	800d264 <_printf_i+0x1b4>
 800d1c8:	4615      	mov	r5, r2
 800d1ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800d1ce:	fb03 6711 	mls	r7, r3, r1, r6
 800d1d2:	5dc7      	ldrb	r7, [r0, r7]
 800d1d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d1d8:	4637      	mov	r7, r6
 800d1da:	42bb      	cmp	r3, r7
 800d1dc:	460e      	mov	r6, r1
 800d1de:	d9f4      	bls.n	800d1ca <_printf_i+0x11a>
 800d1e0:	2b08      	cmp	r3, #8
 800d1e2:	d10b      	bne.n	800d1fc <_printf_i+0x14c>
 800d1e4:	6823      	ldr	r3, [r4, #0]
 800d1e6:	07de      	lsls	r6, r3, #31
 800d1e8:	d508      	bpl.n	800d1fc <_printf_i+0x14c>
 800d1ea:	6923      	ldr	r3, [r4, #16]
 800d1ec:	6861      	ldr	r1, [r4, #4]
 800d1ee:	4299      	cmp	r1, r3
 800d1f0:	bfde      	ittt	le
 800d1f2:	2330      	movle	r3, #48	; 0x30
 800d1f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d1f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d1fc:	1b52      	subs	r2, r2, r5
 800d1fe:	6122      	str	r2, [r4, #16]
 800d200:	f8cd a000 	str.w	sl, [sp]
 800d204:	464b      	mov	r3, r9
 800d206:	aa03      	add	r2, sp, #12
 800d208:	4621      	mov	r1, r4
 800d20a:	4640      	mov	r0, r8
 800d20c:	f7ff fee2 	bl	800cfd4 <_printf_common>
 800d210:	3001      	adds	r0, #1
 800d212:	d14c      	bne.n	800d2ae <_printf_i+0x1fe>
 800d214:	f04f 30ff 	mov.w	r0, #4294967295
 800d218:	b004      	add	sp, #16
 800d21a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d21e:	4835      	ldr	r0, [pc, #212]	; (800d2f4 <_printf_i+0x244>)
 800d220:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d224:	6829      	ldr	r1, [r5, #0]
 800d226:	6823      	ldr	r3, [r4, #0]
 800d228:	f851 6b04 	ldr.w	r6, [r1], #4
 800d22c:	6029      	str	r1, [r5, #0]
 800d22e:	061d      	lsls	r5, r3, #24
 800d230:	d514      	bpl.n	800d25c <_printf_i+0x1ac>
 800d232:	07df      	lsls	r7, r3, #31
 800d234:	bf44      	itt	mi
 800d236:	f043 0320 	orrmi.w	r3, r3, #32
 800d23a:	6023      	strmi	r3, [r4, #0]
 800d23c:	b91e      	cbnz	r6, 800d246 <_printf_i+0x196>
 800d23e:	6823      	ldr	r3, [r4, #0]
 800d240:	f023 0320 	bic.w	r3, r3, #32
 800d244:	6023      	str	r3, [r4, #0]
 800d246:	2310      	movs	r3, #16
 800d248:	e7b0      	b.n	800d1ac <_printf_i+0xfc>
 800d24a:	6823      	ldr	r3, [r4, #0]
 800d24c:	f043 0320 	orr.w	r3, r3, #32
 800d250:	6023      	str	r3, [r4, #0]
 800d252:	2378      	movs	r3, #120	; 0x78
 800d254:	4828      	ldr	r0, [pc, #160]	; (800d2f8 <_printf_i+0x248>)
 800d256:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d25a:	e7e3      	b.n	800d224 <_printf_i+0x174>
 800d25c:	0659      	lsls	r1, r3, #25
 800d25e:	bf48      	it	mi
 800d260:	b2b6      	uxthmi	r6, r6
 800d262:	e7e6      	b.n	800d232 <_printf_i+0x182>
 800d264:	4615      	mov	r5, r2
 800d266:	e7bb      	b.n	800d1e0 <_printf_i+0x130>
 800d268:	682b      	ldr	r3, [r5, #0]
 800d26a:	6826      	ldr	r6, [r4, #0]
 800d26c:	6961      	ldr	r1, [r4, #20]
 800d26e:	1d18      	adds	r0, r3, #4
 800d270:	6028      	str	r0, [r5, #0]
 800d272:	0635      	lsls	r5, r6, #24
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	d501      	bpl.n	800d27c <_printf_i+0x1cc>
 800d278:	6019      	str	r1, [r3, #0]
 800d27a:	e002      	b.n	800d282 <_printf_i+0x1d2>
 800d27c:	0670      	lsls	r0, r6, #25
 800d27e:	d5fb      	bpl.n	800d278 <_printf_i+0x1c8>
 800d280:	8019      	strh	r1, [r3, #0]
 800d282:	2300      	movs	r3, #0
 800d284:	6123      	str	r3, [r4, #16]
 800d286:	4615      	mov	r5, r2
 800d288:	e7ba      	b.n	800d200 <_printf_i+0x150>
 800d28a:	682b      	ldr	r3, [r5, #0]
 800d28c:	1d1a      	adds	r2, r3, #4
 800d28e:	602a      	str	r2, [r5, #0]
 800d290:	681d      	ldr	r5, [r3, #0]
 800d292:	6862      	ldr	r2, [r4, #4]
 800d294:	2100      	movs	r1, #0
 800d296:	4628      	mov	r0, r5
 800d298:	f7f2 ff7a 	bl	8000190 <memchr>
 800d29c:	b108      	cbz	r0, 800d2a2 <_printf_i+0x1f2>
 800d29e:	1b40      	subs	r0, r0, r5
 800d2a0:	6060      	str	r0, [r4, #4]
 800d2a2:	6863      	ldr	r3, [r4, #4]
 800d2a4:	6123      	str	r3, [r4, #16]
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2ac:	e7a8      	b.n	800d200 <_printf_i+0x150>
 800d2ae:	6923      	ldr	r3, [r4, #16]
 800d2b0:	462a      	mov	r2, r5
 800d2b2:	4649      	mov	r1, r9
 800d2b4:	4640      	mov	r0, r8
 800d2b6:	47d0      	blx	sl
 800d2b8:	3001      	adds	r0, #1
 800d2ba:	d0ab      	beq.n	800d214 <_printf_i+0x164>
 800d2bc:	6823      	ldr	r3, [r4, #0]
 800d2be:	079b      	lsls	r3, r3, #30
 800d2c0:	d413      	bmi.n	800d2ea <_printf_i+0x23a>
 800d2c2:	68e0      	ldr	r0, [r4, #12]
 800d2c4:	9b03      	ldr	r3, [sp, #12]
 800d2c6:	4298      	cmp	r0, r3
 800d2c8:	bfb8      	it	lt
 800d2ca:	4618      	movlt	r0, r3
 800d2cc:	e7a4      	b.n	800d218 <_printf_i+0x168>
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	4632      	mov	r2, r6
 800d2d2:	4649      	mov	r1, r9
 800d2d4:	4640      	mov	r0, r8
 800d2d6:	47d0      	blx	sl
 800d2d8:	3001      	adds	r0, #1
 800d2da:	d09b      	beq.n	800d214 <_printf_i+0x164>
 800d2dc:	3501      	adds	r5, #1
 800d2de:	68e3      	ldr	r3, [r4, #12]
 800d2e0:	9903      	ldr	r1, [sp, #12]
 800d2e2:	1a5b      	subs	r3, r3, r1
 800d2e4:	42ab      	cmp	r3, r5
 800d2e6:	dcf2      	bgt.n	800d2ce <_printf_i+0x21e>
 800d2e8:	e7eb      	b.n	800d2c2 <_printf_i+0x212>
 800d2ea:	2500      	movs	r5, #0
 800d2ec:	f104 0619 	add.w	r6, r4, #25
 800d2f0:	e7f5      	b.n	800d2de <_printf_i+0x22e>
 800d2f2:	bf00      	nop
 800d2f4:	0800e51d 	.word	0x0800e51d
 800d2f8:	0800e52e 	.word	0x0800e52e

0800d2fc <_read_r>:
 800d2fc:	b538      	push	{r3, r4, r5, lr}
 800d2fe:	4d07      	ldr	r5, [pc, #28]	; (800d31c <_read_r+0x20>)
 800d300:	4604      	mov	r4, r0
 800d302:	4608      	mov	r0, r1
 800d304:	4611      	mov	r1, r2
 800d306:	2200      	movs	r2, #0
 800d308:	602a      	str	r2, [r5, #0]
 800d30a:	461a      	mov	r2, r3
 800d30c:	f7f7 fa38 	bl	8004780 <_read>
 800d310:	1c43      	adds	r3, r0, #1
 800d312:	d102      	bne.n	800d31a <_read_r+0x1e>
 800d314:	682b      	ldr	r3, [r5, #0]
 800d316:	b103      	cbz	r3, 800d31a <_read_r+0x1e>
 800d318:	6023      	str	r3, [r4, #0]
 800d31a:	bd38      	pop	{r3, r4, r5, pc}
 800d31c:	20001700 	.word	0x20001700

0800d320 <nan>:
 800d320:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d328 <nan+0x8>
 800d324:	4770      	bx	lr
 800d326:	bf00      	nop
 800d328:	00000000 	.word	0x00000000
 800d32c:	7ff80000 	.word	0x7ff80000

0800d330 <__ascii_wctomb>:
 800d330:	b149      	cbz	r1, 800d346 <__ascii_wctomb+0x16>
 800d332:	2aff      	cmp	r2, #255	; 0xff
 800d334:	bf85      	ittet	hi
 800d336:	238a      	movhi	r3, #138	; 0x8a
 800d338:	6003      	strhi	r3, [r0, #0]
 800d33a:	700a      	strbls	r2, [r1, #0]
 800d33c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d340:	bf98      	it	ls
 800d342:	2001      	movls	r0, #1
 800d344:	4770      	bx	lr
 800d346:	4608      	mov	r0, r1
 800d348:	4770      	bx	lr
	...

0800d34c <__assert_func>:
 800d34c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d34e:	4614      	mov	r4, r2
 800d350:	461a      	mov	r2, r3
 800d352:	4b09      	ldr	r3, [pc, #36]	; (800d378 <__assert_func+0x2c>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	4605      	mov	r5, r0
 800d358:	68d8      	ldr	r0, [r3, #12]
 800d35a:	b14c      	cbz	r4, 800d370 <__assert_func+0x24>
 800d35c:	4b07      	ldr	r3, [pc, #28]	; (800d37c <__assert_func+0x30>)
 800d35e:	9100      	str	r1, [sp, #0]
 800d360:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d364:	4906      	ldr	r1, [pc, #24]	; (800d380 <__assert_func+0x34>)
 800d366:	462b      	mov	r3, r5
 800d368:	f000 f80e 	bl	800d388 <fiprintf>
 800d36c:	f000 f826 	bl	800d3bc <abort>
 800d370:	4b04      	ldr	r3, [pc, #16]	; (800d384 <__assert_func+0x38>)
 800d372:	461c      	mov	r4, r3
 800d374:	e7f3      	b.n	800d35e <__assert_func+0x12>
 800d376:	bf00      	nop
 800d378:	20000024 	.word	0x20000024
 800d37c:	0800e53f 	.word	0x0800e53f
 800d380:	0800e54c 	.word	0x0800e54c
 800d384:	0800e57a 	.word	0x0800e57a

0800d388 <fiprintf>:
 800d388:	b40e      	push	{r1, r2, r3}
 800d38a:	b503      	push	{r0, r1, lr}
 800d38c:	4601      	mov	r1, r0
 800d38e:	ab03      	add	r3, sp, #12
 800d390:	4805      	ldr	r0, [pc, #20]	; (800d3a8 <fiprintf+0x20>)
 800d392:	f853 2b04 	ldr.w	r2, [r3], #4
 800d396:	6800      	ldr	r0, [r0, #0]
 800d398:	9301      	str	r3, [sp, #4]
 800d39a:	f7ff fceb 	bl	800cd74 <_vfiprintf_r>
 800d39e:	b002      	add	sp, #8
 800d3a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3a4:	b003      	add	sp, #12
 800d3a6:	4770      	bx	lr
 800d3a8:	20000024 	.word	0x20000024

0800d3ac <_malloc_usable_size_r>:
 800d3ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3b0:	1f18      	subs	r0, r3, #4
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	bfbc      	itt	lt
 800d3b6:	580b      	ldrlt	r3, [r1, r0]
 800d3b8:	18c0      	addlt	r0, r0, r3
 800d3ba:	4770      	bx	lr

0800d3bc <abort>:
 800d3bc:	b508      	push	{r3, lr}
 800d3be:	2006      	movs	r0, #6
 800d3c0:	f000 f82c 	bl	800d41c <raise>
 800d3c4:	2001      	movs	r0, #1
 800d3c6:	f7f7 f9d1 	bl	800476c <_exit>

0800d3ca <_raise_r>:
 800d3ca:	291f      	cmp	r1, #31
 800d3cc:	b538      	push	{r3, r4, r5, lr}
 800d3ce:	4604      	mov	r4, r0
 800d3d0:	460d      	mov	r5, r1
 800d3d2:	d904      	bls.n	800d3de <_raise_r+0x14>
 800d3d4:	2316      	movs	r3, #22
 800d3d6:	6003      	str	r3, [r0, #0]
 800d3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3dc:	bd38      	pop	{r3, r4, r5, pc}
 800d3de:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d3e0:	b112      	cbz	r2, 800d3e8 <_raise_r+0x1e>
 800d3e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3e6:	b94b      	cbnz	r3, 800d3fc <_raise_r+0x32>
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f000 f831 	bl	800d450 <_getpid_r>
 800d3ee:	462a      	mov	r2, r5
 800d3f0:	4601      	mov	r1, r0
 800d3f2:	4620      	mov	r0, r4
 800d3f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3f8:	f000 b818 	b.w	800d42c <_kill_r>
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d00a      	beq.n	800d416 <_raise_r+0x4c>
 800d400:	1c59      	adds	r1, r3, #1
 800d402:	d103      	bne.n	800d40c <_raise_r+0x42>
 800d404:	2316      	movs	r3, #22
 800d406:	6003      	str	r3, [r0, #0]
 800d408:	2001      	movs	r0, #1
 800d40a:	e7e7      	b.n	800d3dc <_raise_r+0x12>
 800d40c:	2400      	movs	r4, #0
 800d40e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d412:	4628      	mov	r0, r5
 800d414:	4798      	blx	r3
 800d416:	2000      	movs	r0, #0
 800d418:	e7e0      	b.n	800d3dc <_raise_r+0x12>
	...

0800d41c <raise>:
 800d41c:	4b02      	ldr	r3, [pc, #8]	; (800d428 <raise+0xc>)
 800d41e:	4601      	mov	r1, r0
 800d420:	6818      	ldr	r0, [r3, #0]
 800d422:	f7ff bfd2 	b.w	800d3ca <_raise_r>
 800d426:	bf00      	nop
 800d428:	20000024 	.word	0x20000024

0800d42c <_kill_r>:
 800d42c:	b538      	push	{r3, r4, r5, lr}
 800d42e:	4d07      	ldr	r5, [pc, #28]	; (800d44c <_kill_r+0x20>)
 800d430:	2300      	movs	r3, #0
 800d432:	4604      	mov	r4, r0
 800d434:	4608      	mov	r0, r1
 800d436:	4611      	mov	r1, r2
 800d438:	602b      	str	r3, [r5, #0]
 800d43a:	f7f7 f987 	bl	800474c <_kill>
 800d43e:	1c43      	adds	r3, r0, #1
 800d440:	d102      	bne.n	800d448 <_kill_r+0x1c>
 800d442:	682b      	ldr	r3, [r5, #0]
 800d444:	b103      	cbz	r3, 800d448 <_kill_r+0x1c>
 800d446:	6023      	str	r3, [r4, #0]
 800d448:	bd38      	pop	{r3, r4, r5, pc}
 800d44a:	bf00      	nop
 800d44c:	20001700 	.word	0x20001700

0800d450 <_getpid_r>:
 800d450:	f7f7 b974 	b.w	800473c <_getpid>

0800d454 <_init>:
 800d454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d456:	bf00      	nop
 800d458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d45a:	bc08      	pop	{r3}
 800d45c:	469e      	mov	lr, r3
 800d45e:	4770      	bx	lr

0800d460 <_fini>:
 800d460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d462:	bf00      	nop
 800d464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d466:	bc08      	pop	{r3}
 800d468:	469e      	mov	lr, r3
 800d46a:	4770      	bx	lr
