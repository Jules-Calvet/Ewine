
Test_IR_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007334  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08007474  08007474  00017474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007650  08007650  00017650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007654  08007654  00017654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000008  08007658  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001b20  2000007c  080076cc  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001b9c  080076cc  00021b9c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001feb6  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004316  00000000  00000000  0003ff62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000020e8  00000000  00000000  00044278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001f20  00000000  00000000  00046360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00026a5f  00000000  00000000  00048280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001f3f9  00000000  00000000  0006ecdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000f1154  00000000  00000000  0008e0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0017f22c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00009190  00000000  00000000  0017f27c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000007c 	.word	0x2000007c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800745c 	.word	0x0800745c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000080 	.word	0x20000080
 800017c:	0800745c 	.word	0x0800745c

08000180 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000184:	4a08      	ldr	r2, [pc, #32]	; (80001a8 <MX_FREERTOS_Init+0x28>)
 8000186:	2100      	movs	r1, #0
 8000188:	4808      	ldr	r0, [pc, #32]	; (80001ac <MX_FREERTOS_Init+0x2c>)
 800018a:	f003 fe2d 	bl	8003de8 <osThreadNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a07      	ldr	r2, [pc, #28]	; (80001b0 <MX_FREERTOS_Init+0x30>)
 8000192:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <MX_FREERTOS_Init+0x34>)
 8000196:	2100      	movs	r1, #0
 8000198:	4807      	ldr	r0, [pc, #28]	; (80001b8 <MX_FREERTOS_Init+0x38>)
 800019a:	f003 fe25 	bl	8003de8 <osThreadNew>
 800019e:	4603      	mov	r3, r0
 80001a0:	4a06      	ldr	r2, [pc, #24]	; (80001bc <MX_FREERTOS_Init+0x3c>)
 80001a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	08007504 	.word	0x08007504
 80001ac:	080001c1 	.word	0x080001c1
 80001b0:	20000098 	.word	0x20000098
 80001b4:	08007528 	.word	0x08007528
 80001b8:	080001d1 	.word	0x080001d1
 80001bc:	2000009c 	.word	0x2000009c

080001c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80001c8:	2001      	movs	r0, #1
 80001ca:	f003 fe9f 	bl	8003f0c <osDelay>
 80001ce:	e7fb      	b.n	80001c8 <StartDefaultTask+0x8>

080001d0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80001d8:	2001      	movs	r0, #1
 80001da:	f003 fe97 	bl	8003f0c <osDelay>
 80001de:	e7fb      	b.n	80001d8 <StartTask02+0x8>

080001e0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	4313      	orrs	r3, r2
 80001f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4013      	ands	r3, r2
 8000202:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000204:	68fb      	ldr	r3, [r7, #12]
}
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr

08000212 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000212:	b480      	push	{r7}
 8000214:	b085      	sub	sp, #20
 8000216:	af00      	add	r7, sp, #0
 8000218:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800021a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800021e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000220:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	4313      	orrs	r3, r2
 8000228:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800022a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4013      	ands	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000236:	68fb      	ldr	r3, [r7, #12]
}
 8000238:	bf00      	nop
 800023a:	3714      	adds	r7, #20
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr

08000244 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000248:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <MX_I2C1_Init+0x74>)
 800024a:	4a1c      	ldr	r2, [pc, #112]	; (80002bc <MX_I2C1_Init+0x78>)
 800024c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800024e:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <MX_I2C1_Init+0x74>)
 8000250:	4a1b      	ldr	r2, [pc, #108]	; (80002c0 <MX_I2C1_Init+0x7c>)
 8000252:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <MX_I2C1_Init+0x74>)
 8000256:	2200      	movs	r2, #0
 8000258:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800025a:	4b17      	ldr	r3, [pc, #92]	; (80002b8 <MX_I2C1_Init+0x74>)
 800025c:	2201      	movs	r2, #1
 800025e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <MX_I2C1_Init+0x74>)
 8000262:	2200      	movs	r2, #0
 8000264:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000266:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <MX_I2C1_Init+0x74>)
 8000268:	2200      	movs	r2, #0
 800026a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <MX_I2C1_Init+0x74>)
 800026e:	2200      	movs	r2, #0
 8000270:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000272:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <MX_I2C1_Init+0x74>)
 8000274:	2200      	movs	r2, #0
 8000276:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000278:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <MX_I2C1_Init+0x74>)
 800027a:	2200      	movs	r2, #0
 800027c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800027e:	480e      	ldr	r0, [pc, #56]	; (80002b8 <MX_I2C1_Init+0x74>)
 8000280:	f000 ff06 	bl	8001090 <HAL_I2C_Init>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800028a:	f000 f987 	bl	800059c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800028e:	2100      	movs	r1, #0
 8000290:	4809      	ldr	r0, [pc, #36]	; (80002b8 <MX_I2C1_Init+0x74>)
 8000292:	f001 fc01 	bl	8001a98 <HAL_I2CEx_ConfigAnalogFilter>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800029c:	f000 f97e 	bl	800059c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80002a0:	2100      	movs	r1, #0
 80002a2:	4805      	ldr	r0, [pc, #20]	; (80002b8 <MX_I2C1_Init+0x74>)
 80002a4:	f001 fc43 	bl	8001b2e <HAL_I2CEx_ConfigDigitalFilter>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80002ae:	f000 f975 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	200000a0 	.word	0x200000a0
 80002bc:	40005400 	.word	0x40005400
 80002c0:	00707cbb 	.word	0x00707cbb

080002c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b09c      	sub	sp, #112	; 0x70
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80002dc:	f107 030c 	add.w	r3, r7, #12
 80002e0:	2250      	movs	r2, #80	; 0x50
 80002e2:	2100      	movs	r1, #0
 80002e4:	4618      	mov	r0, r3
 80002e6:	f006 fbe2 	bl	8006aae <memset>
  if(i2cHandle->Instance==I2C1)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a17      	ldr	r2, [pc, #92]	; (800034c <HAL_I2C_MspInit+0x88>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d126      	bne.n	8000342 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80002f4:	2304      	movs	r3, #4
 80002f6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80002f8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80002fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80002fe:	f107 030c 	add.w	r3, r7, #12
 8000302:	4618      	mov	r0, r3
 8000304:	f002 ffdc 	bl	80032c0 <HAL_RCCEx_PeriphCLKConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800030e:	f000 f945 	bl	800059c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000312:	2002      	movs	r0, #2
 8000314:	f7ff ff64 	bl	80001e0 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000318:	f44f 7340 	mov.w	r3, #768	; 0x300
 800031c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800031e:	2312      	movs	r3, #18
 8000320:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	2300      	movs	r3, #0
 8000324:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	2300      	movs	r3, #0
 8000328:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800032a:	2304      	movs	r3, #4
 800032c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800032e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000332:	4619      	mov	r1, r3
 8000334:	4806      	ldr	r0, [pc, #24]	; (8000350 <HAL_I2C_MspInit+0x8c>)
 8000336:	f000 fd3b 	bl	8000db0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800033a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800033e:	f7ff ff68 	bl	8000212 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000342:	bf00      	nop
 8000344:	3770      	adds	r7, #112	; 0x70
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40005400 	.word	0x40005400
 8000350:	48000400 	.word	0x48000400

08000354 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800035c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000360:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	2b00      	cmp	r3, #0
 800036a:	d013      	beq.n	8000394 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800036c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000370:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000374:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000378:	2b00      	cmp	r3, #0
 800037a:	d00b      	beq.n	8000394 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800037c:	e000      	b.n	8000380 <ITM_SendChar+0x2c>
    {
      __NOP();
 800037e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000380:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d0f9      	beq.n	800037e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800038a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800038e:	687a      	ldr	r2, [r7, #4]
 8000390:	b2d2      	uxtb	r2, r2
 8000392:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000394:	687b      	ldr	r3, [r7, #4]
}
 8000396:	4618      	mov	r0, r3
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr

080003a2 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80003a2:	b480      	push	{r7}
 80003a4:	b083      	sub	sp, #12
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80003aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80003b2:	f023 0218 	bic.w	r2, r3, #24
 80003b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4313      	orrs	r3, r2
 80003be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <_write>:
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b086      	sub	sp, #24
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	60f8      	str	r0, [r7, #12]
 80003d6:	60b9      	str	r1, [r7, #8]
 80003d8:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003da:	2300      	movs	r3, #0
 80003dc:	617b      	str	r3, [r7, #20]
 80003de:	e009      	b.n	80003f4 <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	1c5a      	adds	r2, r3, #1
 80003e4:	60ba      	str	r2, [r7, #8]
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ffb3 	bl	8000354 <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	3301      	adds	r3, #1
 80003f2:	617b      	str	r3, [r7, #20]
 80003f4:	697a      	ldr	r2, [r7, #20]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	dbf1      	blt.n	80003e0 <_write+0x12>
}
return len;
 80003fc:	687b      	ldr	r3, [r7, #4]
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3718      	adds	r7, #24
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
	...

08000408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040c:	f000 fba4 	bl	8000b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000410:	f000 f81e 	bl	8000450 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000414:	f000 f892 	bl	800053c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_I2C1_Init();
 8000418:	f7ff ff14 	bl	8000244 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if(mlx90614_init() == true)printf("Initialization OK ! \n");
 800041c:	f000 f8ee 	bl	80005fc <mlx90614_init>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d003      	beq.n	800042e <main+0x26>
 8000426:	4808      	ldr	r0, [pc, #32]	; (8000448 <main+0x40>)
 8000428:	f006 fc62 	bl	8006cf0 <puts>
 800042c:	e002      	b.n	8000434 <main+0x2c>
  else printf("Initialization Failed ! \n");
 800042e:	4807      	ldr	r0, [pc, #28]	; (800044c <main+0x44>)
 8000430:	f006 fc5e 	bl	8006cf0 <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000434:	f003 fc8e 	bl	8003d54 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000438:	f7ff fea2 	bl	8000180 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800043c:	f003 fcae 	bl	8003d9c <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  printf("\n");
 8000440:	200a      	movs	r0, #10
 8000442:	f006 fbd1 	bl	8006be8 <putchar>
 8000446:	e7fb      	b.n	8000440 <main+0x38>
 8000448:	0800748c 	.word	0x0800748c
 800044c:	080074a4 	.word	0x080074a4

08000450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b09a      	sub	sp, #104	; 0x68
 8000454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000456:	f107 0320 	add.w	r3, r7, #32
 800045a:	2248      	movs	r2, #72	; 0x48
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f006 fb25 	bl	8006aae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
 8000470:	611a      	str	r2, [r3, #16]
 8000472:	615a      	str	r2, [r3, #20]
 8000474:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000484:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	f023 0303 	bic.w	r3, r3, #3
 8000490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800049a:	f001 fb95 	bl	8001bc8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800049e:	2000      	movs	r0, #0
 80004a0:	f7ff ff7f 	bl	80003a2 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004a4:	4b24      	ldr	r3, [pc, #144]	; (8000538 <SystemClock_Config+0xe8>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80004ac:	4a22      	ldr	r2, [pc, #136]	; (8000538 <SystemClock_Config+0xe8>)
 80004ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004b2:	6013      	str	r3, [r2, #0]
 80004b4:	4b20      	ldr	r3, [pc, #128]	; (8000538 <SystemClock_Config+0xe8>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80004bc:	603b      	str	r3, [r7, #0]
 80004be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80004c0:	2327      	movs	r3, #39	; 0x27
 80004c2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80004ca:	2301      	movs	r3, #1
 80004cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004d4:	2301      	movs	r3, #1
 80004d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004d8:	2340      	movs	r3, #64	; 0x40
 80004da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80004dc:	2300      	movs	r3, #0
 80004de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004e0:	2360      	movs	r3, #96	; 0x60
 80004e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004e4:	2300      	movs	r3, #0
 80004e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e8:	f107 0320 	add.w	r3, r7, #32
 80004ec:	4618      	mov	r0, r3
 80004ee:	f001 ff0b 	bl	8002308 <HAL_RCC_OscConfig>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80004f8:	f000 f850 	bl	800059c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80004fc:	236f      	movs	r3, #111	; 0x6f
 80004fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000500:	2302      	movs	r3, #2
 8000502:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000504:	2300      	movs	r3, #0
 8000506:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000508:	2300      	movs	r3, #0
 800050a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800050c:	2300      	movs	r3, #0
 800050e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000510:	2300      	movs	r3, #0
 8000512:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000514:	2300      	movs	r3, #0
 8000516:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2101      	movs	r1, #1
 800051c:	4618      	mov	r0, r3
 800051e:	f002 fa67 	bl	80029f0 <HAL_RCC_ClockConfig>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000528:	f000 f838 	bl	800059c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800052c:	f003 f83e 	bl	80035ac <HAL_RCCEx_EnableMSIPLLMode>
}
 8000530:	bf00      	nop
 8000532:	3768      	adds	r7, #104	; 0x68
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	58000400 	.word	0x58000400

0800053c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000542:	463b      	mov	r3, r7
 8000544:	2250      	movs	r2, #80	; 0x50
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f006 fab0 	bl	8006aae <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800054e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000552:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000554:	2300      	movs	r3, #0
 8000556:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000558:	2300      	movs	r3, #0
 800055a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800055c:	463b      	mov	r3, r7
 800055e:	4618      	mov	r0, r3
 8000560:	f002 feae 	bl	80032c0 <HAL_RCCEx_PeriphCLKConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800056a:	f000 f817 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800056e:	bf00      	nop
 8000570:	3750      	adds	r7, #80	; 0x50
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d101      	bne.n	800058e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800058a:	f000 fb05 	bl	8000b98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40014800 	.word	0x40014800

0800059c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a0:	b672      	cpsid	i
}
 80005a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <Error_Handler+0x8>
	...

080005a8 <mlx90614_read16>:
  }
  return crc;
}
//###################################################################################################
bool mlx90614_read16(uint8_t address, int16_t *data)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af04      	add	r7, sp, #16
 80005ae:	4603      	mov	r3, r0
 80005b0:	6039      	str	r1, [r7, #0]
 80005b2:	71fb      	strb	r3, [r7, #7]
  uint8_t d[3];
  if(HAL_I2C_Mem_Read(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, d, 3, 100) != HAL_OK)
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	2364      	movs	r3, #100	; 0x64
 80005ba:	9302      	str	r3, [sp, #8]
 80005bc:	2303      	movs	r3, #3
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2301      	movs	r3, #1
 80005c8:	21b4      	movs	r1, #180	; 0xb4
 80005ca:	480b      	ldr	r0, [pc, #44]	; (80005f8 <mlx90614_read16+0x50>)
 80005cc:	f000 fdf0 	bl	80011b0 <HAL_I2C_Mem_Read>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <mlx90614_read16+0x32>
    return false;
 80005d6:	2300      	movs	r3, #0
 80005d8:	e009      	b.n	80005ee <mlx90614_read16+0x46>
  *data = d[0] | (d[1] << 8);
 80005da:	7b3b      	ldrb	r3, [r7, #12]
 80005dc:	b21a      	sxth	r2, r3
 80005de:	7b7b      	ldrb	r3, [r7, #13]
 80005e0:	021b      	lsls	r3, r3, #8
 80005e2:	b21b      	sxth	r3, r3
 80005e4:	4313      	orrs	r3, r2
 80005e6:	b21a      	sxth	r2, r3
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	801a      	strh	r2, [r3, #0]
  return true;
 80005ec:	2301      	movs	r3, #1
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	200000a0 	.word	0x200000a0

080005fc <mlx90614_init>:
	}
	return retTemp;
}
//###################################################################################################
bool mlx90614_init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  memset(&mlx90614, 0, sizeof(mlx90614));
 8000600:	2234      	movs	r2, #52	; 0x34
 8000602:	2100      	movs	r1, #0
 8000604:	4821      	ldr	r0, [pc, #132]	; (800068c <mlx90614_init+0x90>)
 8000606:	f006 fa52 	bl	8006aae <memset>
  mlx90614.unit = MLX90614_UNIT_C;
 800060a:	4b20      	ldr	r3, [pc, #128]	; (800068c <mlx90614_init+0x90>)
 800060c:	2202      	movs	r2, #2
 800060e:	701a      	strb	r2, [r3, #0]
  if(HAL_I2C_IsDeviceReady(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, 1, 100) != HAL_OK)
 8000610:	2364      	movs	r3, #100	; 0x64
 8000612:	2201      	movs	r2, #1
 8000614:	21b4      	movs	r1, #180	; 0xb4
 8000616:	481e      	ldr	r0, [pc, #120]	; (8000690 <mlx90614_init+0x94>)
 8000618:	f000 fee4 	bl	80013e4 <HAL_I2C_IsDeviceReady>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <mlx90614_init+0x2a>
    return false;
 8000622:	2300      	movs	r3, #0
 8000624:	e030      	b.n	8000688 <mlx90614_init+0x8c>
  mlx90614_read16(MLX90614_REGISTER_CONFIG, (int16_t*)&mlx90614.configReg);
 8000626:	491b      	ldr	r1, [pc, #108]	; (8000694 <mlx90614_init+0x98>)
 8000628:	2025      	movs	r0, #37	; 0x25
 800062a:	f7ff ffbd 	bl	80005a8 <mlx90614_read16>
  if(mlx90614_readID(NULL) == false)
 800062e:	2000      	movs	r0, #0
 8000630:	f000 f832 	bl	8000698 <mlx90614_readID>
 8000634:	4603      	mov	r3, r0
 8000636:	f083 0301 	eor.w	r3, r3, #1
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <mlx90614_init+0x48>
    return false;
 8000640:	2300      	movs	r3, #0
 8000642:	e021      	b.n	8000688 <mlx90614_init+0x8c>
  if(mlx90614_getEmissivity(NULL) == false)
 8000644:	2000      	movs	r0, #0
 8000646:	f000 f861 	bl	800070c <mlx90614_getEmissivity>
 800064a:	4603      	mov	r3, r0
 800064c:	f083 0301 	eor.w	r3, r3, #1
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <mlx90614_init+0x5e>
    return false;
 8000656:	2300      	movs	r3, #0
 8000658:	e016      	b.n	8000688 <mlx90614_init+0x8c>
  if(mlx90614_getMax(NULL) == false)
 800065a:	2000      	movs	r0, #0
 800065c:	f000 f890 	bl	8000780 <mlx90614_getMax>
 8000660:	4603      	mov	r3, r0
 8000662:	f083 0301 	eor.w	r3, r3, #1
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <mlx90614_init+0x74>
    return false;
 800066c:	2300      	movs	r3, #0
 800066e:	e00b      	b.n	8000688 <mlx90614_init+0x8c>
  if(mlx90614_getMin(NULL) == false)
 8000670:	2000      	movs	r0, #0
 8000672:	f000 f8a9 	bl	80007c8 <mlx90614_getMin>
 8000676:	4603      	mov	r3, r0
 8000678:	f083 0301 	eor.w	r3, r3, #1
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <mlx90614_init+0x8a>
    return false;
 8000682:	2300      	movs	r3, #0
 8000684:	e000      	b.n	8000688 <mlx90614_init+0x8c>

  return true;
 8000686:	2301      	movs	r3, #1
}
 8000688:	4618      	mov	r0, r3
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200000f4 	.word	0x200000f4
 8000690:	200000a0 	.word	0x200000a0
 8000694:	20000124 	.word	0x20000124

08000698 <mlx90614_readID>:
{
  mlx90614.unit = MLX90614_UNIT_;
}
//###################################################################################################
bool mlx90614_readID(int16_t *id)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	for (int i=0; i<4; i++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	e028      	b.n	80006f8 <mlx90614_readID+0x60>
	{
		int16_t temp = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	817b      	strh	r3, [r7, #10]
		if (!mlx90614_read16(MLX90614_REGISTER_ID0 + i, &temp))
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	333c      	adds	r3, #60	; 0x3c
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	f107 020a 	add.w	r2, r7, #10
 80006b6:	4611      	mov	r1, r2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ff75 	bl	80005a8 <mlx90614_read16>
 80006be:	4603      	mov	r3, r0
 80006c0:	f083 0301 	eor.w	r3, r3, #1
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <mlx90614_readID+0x36>
			return false;
 80006ca:	2300      	movs	r3, #0
 80006cc:	e018      	b.n	8000700 <mlx90614_readID+0x68>
    if(id != NULL)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d006      	beq.n	80006e2 <mlx90614_readID+0x4a>
      id[i] = (uint16_t)temp;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	4413      	add	r3, r2
 80006dc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80006e0:	801a      	strh	r2, [r3, #0]
    mlx90614.id[i] = (uint16_t)temp;
 80006e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80006e6:	b299      	uxth	r1, r3
 80006e8:	4a07      	ldr	r2, [pc, #28]	; (8000708 <mlx90614_readID+0x70>)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	3314      	adds	r3, #20
 80006ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i<4; i++)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	3301      	adds	r3, #1
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	ddd3      	ble.n	80006a6 <mlx90614_readID+0xe>
	}
	return true;
 80006fe:	2301      	movs	r3, #1
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000f4 	.word	0x200000f4

0800070c <mlx90614_getEmissivity>:
//###################################################################################################
bool mlx90614_getEmissivity(float *emissivity)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_KE, &mlx90614.rawEmissivity))
 8000714:	4917      	ldr	r1, [pc, #92]	; (8000774 <mlx90614_getEmissivity+0x68>)
 8000716:	2024      	movs	r0, #36	; 0x24
 8000718:	f7ff ff46 	bl	80005a8 <mlx90614_read16>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d022      	beq.n	8000768 <mlx90614_getEmissivity+0x5c>
	{
    mlx90614.emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <mlx90614_getEmissivity+0x6c>)
 8000724:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000728:	b29b      	uxth	r3, r3
 800072a:	ee07 3a90 	vmov	s15, r3
 800072e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000732:	eddf 6a12 	vldr	s13, [pc, #72]	; 800077c <mlx90614_getEmissivity+0x70>
 8000736:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <mlx90614_getEmissivity+0x6c>)
 800073c:	edc3 7a04 	vstr	s15, [r3, #16]
		if(emissivity != NULL)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d00e      	beq.n	8000764 <mlx90614_getEmissivity+0x58>
      *emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <mlx90614_getEmissivity+0x6c>)
 8000748:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800074c:	b29b      	uxth	r3, r3
 800074e:	ee07 3a90 	vmov	s15, r3
 8000752:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000756:	eddf 6a09 	vldr	s13, [pc, #36]	; 800077c <mlx90614_getEmissivity+0x70>
 800075a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8000764:	2301      	movs	r3, #1
 8000766:	e000      	b.n	800076a <mlx90614_getEmissivity+0x5e>
	}
	return false;
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200000f6 	.word	0x200000f6
 8000778:	200000f4 	.word	0x200000f4
 800077c:	477fff00 	.word	0x477fff00

08000780 <mlx90614_getMax>:
	mlx90614.rawMin = mlx90614_calcRawTemp(minTemp);
	return mlx90614_write16(MLX90614_REGISTER_TOMIN, mlx90614.rawMin);
}
//###################################################################################################
bool mlx90614_getMax(float *maxTemp)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMAX, &mlx90614.rawMax))
 8000788:	490d      	ldr	r1, [pc, #52]	; (80007c0 <mlx90614_getMax+0x40>)
 800078a:	2020      	movs	r0, #32
 800078c:	f7ff ff0c 	bl	80005a8 <mlx90614_read16>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d00e      	beq.n	80007b4 <mlx90614_getMax+0x34>
	{
    if(maxTemp != NULL)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d009      	beq.n	80007b0 <mlx90614_getMax+0x30>
      *maxTemp = mlx90614.rawMax;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <mlx90614_getMax+0x44>)
 800079e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80007a2:	ee07 3a90 	vmov	s15, r3
 80007a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	edc3 7a00 	vstr	s15, [r3]
		return true;
 80007b0:	2301      	movs	r3, #1
 80007b2:	e000      	b.n	80007b6 <mlx90614_getMax+0x36>
	}
	return false;
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000fe 	.word	0x200000fe
 80007c4:	200000f4 	.word	0x200000f4

080007c8 <mlx90614_getMin>:
//###################################################################################################
bool mlx90614_getMin(float *minTemp)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMIN, &mlx90614.rawMin))
 80007d0:	490d      	ldr	r1, [pc, #52]	; (8000808 <mlx90614_getMin+0x40>)
 80007d2:	2021      	movs	r0, #33	; 0x21
 80007d4:	f7ff fee8 	bl	80005a8 <mlx90614_read16>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d00e      	beq.n	80007fc <mlx90614_getMin+0x34>
	{
    if(minTemp != NULL)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d009      	beq.n	80007f8 <mlx90614_getMin+0x30>
      *minTemp = mlx90614.rawMin;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <mlx90614_getMin+0x44>)
 80007e6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80007ea:	ee07 3a90 	vmov	s15, r3
 80007ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	edc3 7a00 	vstr	s15, [r3]
		return true;
 80007f8:	2301      	movs	r3, #1
 80007fa:	e000      	b.n	80007fe <mlx90614_getMin+0x36>
	}
	return false;
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000100 	.word	0x20000100
 800080c:	200000f4 	.word	0x200000f4

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	210f      	movs	r1, #15
 8000818:	f06f 0001 	mvn.w	r0, #1
 800081c:	f000 faa0 	bl	8000d60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800082c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000830:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000832:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4313      	orrs	r3, r2
 800083a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800083c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000840:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4013      	ands	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000848:	68fb      	ldr	r3, [r7, #12]
}
 800084a:	bf00      	nop
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	; 0x30
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8000868:	2200      	movs	r2, #0
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	201a      	movs	r0, #26
 800086e:	f000 fa77 	bl	8000d60 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000872:	201a      	movs	r0, #26
 8000874:	f000 fa8e 	bl	8000d94 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000878:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800087c:	f7ff ffd2 	bl	8000824 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000880:	f107 0208 	add.w	r2, r7, #8
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	4611      	mov	r1, r2
 800088a:	4618      	mov	r0, r3
 800088c:	f002 fa86 	bl	8002d9c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000890:	f002 fa6e 	bl	8002d70 <HAL_RCC_GetPCLK2Freq>
 8000894:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000898:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <HAL_InitTick+0x8c>)
 800089a:	fba2 2303 	umull	r2, r3, r2, r3
 800089e:	0c9b      	lsrs	r3, r3, #18
 80008a0:	3b01      	subs	r3, #1
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80008a4:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <HAL_InitTick+0x90>)
 80008a6:	4a11      	ldr	r2, [pc, #68]	; (80008ec <HAL_InitTick+0x94>)
 80008a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <HAL_InitTick+0x90>)
 80008ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008b0:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80008b2:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <HAL_InitTick+0x90>)
 80008b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008b6:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <HAL_InitTick+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <HAL_InitTick+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 80008c4:	4808      	ldr	r0, [pc, #32]	; (80008e8 <HAL_InitTick+0x90>)
 80008c6:	f002 ff88 	bl	80037da <HAL_TIM_Base_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d104      	bne.n	80008da <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <HAL_InitTick+0x90>)
 80008d2:	f002 ffe3 	bl	800389c <HAL_TIM_Base_Start_IT>
 80008d6:	4603      	mov	r3, r0
 80008d8:	e000      	b.n	80008dc <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3730      	adds	r7, #48	; 0x30
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	431bde83 	.word	0x431bde83
 80008e8:	20000128 	.word	0x20000128
 80008ec:	40014800 	.word	0x40014800

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <NMI_Handler+0x4>

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000922:	f003 f809 	bl	8003938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000128 	.word	0x20000128

08000930 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	e00a      	b.n	8000958 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000942:	f3af 8000 	nop.w
 8000946:	4601      	mov	r1, r0
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	60ba      	str	r2, [r7, #8]
 800094e:	b2ca      	uxtb	r2, r1
 8000950:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	3301      	adds	r3, #1
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697a      	ldr	r2, [r7, #20]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	429a      	cmp	r2, r3
 800095e:	dbf0      	blt.n	8000942 <_read+0x12>
  }

  return len;
 8000960:	687b      	ldr	r3, [r7, #4]
}
 8000962:	4618      	mov	r0, r3
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <_close>:
  }
  return len;
}

int _close(int file)
{
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000972:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000982:	b480      	push	{r7}
 8000984:	b083      	sub	sp, #12
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
 800098a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000992:	605a      	str	r2, [r3, #4]
  return 0;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <_isatty>:

int _isatty(int file)
{
 80009a2:	b480      	push	{r7}
 80009a4:	b083      	sub	sp, #12
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009aa:	2301      	movs	r3, #1
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
	...

080009d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009dc:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <_sbrk+0x5c>)
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <_sbrk+0x60>)
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <_sbrk+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <_sbrk+0x64>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <_sbrk+0x68>)
 80009f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d207      	bcs.n	8000a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a04:	f005 ff22 	bl	800684c <__errno>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a12:	e009      	b.n	8000a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <_sbrk+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <_sbrk+0x64>)
 8000a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a26:	68fb      	ldr	r3, [r7, #12]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20030000 	.word	0x20030000
 8000a34:	00000400 	.word	0x00000400
 8000a38:	20000174 	.word	0x20000174
 8000a3c:	20001ba0 	.word	0x20001ba0

08000a40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000a44:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <SystemInit+0x98>)
 8000a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4a:	4a23      	ldr	r2, [pc, #140]	; (8000ad8 <SystemInit+0x98>)
 8000a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a68:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000a6c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <SystemInit+0x9c>)
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a8a:	f023 0305 	bic.w	r3, r3, #5
 8000a8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a9e:	f023 0301 	bic.w	r3, r3, #1
 8000aa2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aaa:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <SystemInit+0xa0>)
 8000aac:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ab2:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <SystemInit+0xa0>)
 8000ab4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ac0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ac4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00
 8000adc:	faf6fefb 	.word	0xfaf6fefb
 8000ae0:	22041000 	.word	0x22041000

08000ae4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000ae4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae8:	3304      	adds	r3, #4

08000aea <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aea:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aec:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000aee:	d3f9      	bcc.n	8000ae4 <CopyDataInit>
  bx lr
 8000af0:	4770      	bx	lr

08000af2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000af2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000af4:	3004      	adds	r0, #4

08000af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000af6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000af8:	d3fb      	bcc.n	8000af2 <FillZerobss>
  bx lr
 8000afa:	4770      	bx	lr

08000afc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000afc:	480c      	ldr	r0, [pc, #48]	; (8000b30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000afe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b00:	f7ff ff9e 	bl	8000a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000b04:	480b      	ldr	r0, [pc, #44]	; (8000b34 <LoopForever+0x6>)
 8000b06:	490c      	ldr	r1, [pc, #48]	; (8000b38 <LoopForever+0xa>)
 8000b08:	4a0c      	ldr	r2, [pc, #48]	; (8000b3c <LoopForever+0xe>)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f7ff ffed 	bl	8000aea <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000b10:	480b      	ldr	r0, [pc, #44]	; (8000b40 <LoopForever+0x12>)
 8000b12:	490c      	ldr	r1, [pc, #48]	; (8000b44 <LoopForever+0x16>)
 8000b14:	4a0c      	ldr	r2, [pc, #48]	; (8000b48 <LoopForever+0x1a>)
 8000b16:	2300      	movs	r3, #0
 8000b18:	f7ff ffe7 	bl	8000aea <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000b1c:	480b      	ldr	r0, [pc, #44]	; (8000b4c <LoopForever+0x1e>)
 8000b1e:	490c      	ldr	r1, [pc, #48]	; (8000b50 <LoopForever+0x22>)
 8000b20:	2300      	movs	r3, #0
 8000b22:	f7ff ffe8 	bl	8000af6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b26:	f005 ff8d 	bl	8006a44 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b2a:	f7ff fc6d 	bl	8000408 <main>

08000b2e <LoopForever>:

LoopForever:
  b LoopForever
 8000b2e:	e7fe      	b.n	8000b2e <LoopForever>
  ldr   r0, =_estack
 8000b30:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000b34:	20000008 	.word	0x20000008
 8000b38:	2000007c 	.word	0x2000007c
 8000b3c:	08007658 	.word	0x08007658
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000b40:	20030000 	.word	0x20030000
 8000b44:	20030000 	.word	0x20030000
 8000b48:	080076cc 	.word	0x080076cc
  INIT_BSS _sbss, _ebss
 8000b4c:	2000007c 	.word	0x2000007c
 8000b50:	20001b9c 	.word	0x20001b9c

08000b54 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC1_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <HAL_Init+0x3c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <HAL_Init+0x3c>)
 8000b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6e:	2003      	movs	r0, #3
 8000b70:	f000 f8eb 	bl	8000d4a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b74:	200f      	movs	r0, #15
 8000b76:	f7ff fe6f 	bl	8000858 <HAL_InitTick>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d002      	beq.n	8000b86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	71fb      	strb	r3, [r7, #7]
 8000b84:	e001      	b.n	8000b8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b86:	f7ff fe43 	bl	8000810 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	58004000 	.word	0x58004000

08000b98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x20>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x24>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <HAL_IncTick+0x24>)
 8000baa:	6013      	str	r3, [r2, #0]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000010 	.word	0x20000010
 8000bbc:	20000178 	.word	0x20000178

08000bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <HAL_GetTick+0x14>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000178 	.word	0x20000178

08000bd8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <HAL_GetTickPrio+0x14>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	2000000c 	.word	0x2000000c

08000bf0 <__NVIC_SetPriorityGrouping>:
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c22:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	60d3      	str	r3, [r2, #12]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_GetPriorityGrouping>:
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <__NVIC_GetPriorityGrouping+0x18>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	f003 0307 	and.w	r3, r3, #7
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_EnableIRQ>:
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db0b      	blt.n	8000c7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f003 021f 	and.w	r2, r3, #31
 8000c6c:	4907      	ldr	r1, [pc, #28]	; (8000c8c <__NVIC_EnableIRQ+0x38>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	095b      	lsrs	r3, r3, #5
 8000c74:	2001      	movs	r0, #1
 8000c76:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000e100 	.word	0xe000e100

08000c90 <__NVIC_SetPriority>:
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	490c      	ldr	r1, [pc, #48]	; (8000cdc <__NVIC_SetPriority+0x4c>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <NVIC_EncodePriority>:
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f1c3 0307 	rsb	r3, r3, #7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf28      	it	cs
 8000d02:	2304      	movcs	r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d902      	bls.n	8000d14 <NVIC_EncodePriority+0x30>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3b03      	subs	r3, #3
 8000d12:	e000      	b.n	8000d16 <NVIC_EncodePriority+0x32>
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43da      	mvns	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43d9      	mvns	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	4313      	orrs	r3, r2
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3724      	adds	r7, #36	; 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ff4c 	bl	8000bf0 <__NVIC_SetPriorityGrouping>
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
 8000d6c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6e:	f7ff ff63 	bl	8000c38 <__NVIC_GetPriorityGrouping>
 8000d72:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	68b9      	ldr	r1, [r7, #8]
 8000d78:	6978      	ldr	r0, [r7, #20]
 8000d7a:	f7ff ffb3 	bl	8000ce4 <NVIC_EncodePriority>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d84:	4611      	mov	r1, r2
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ff82 	bl	8000c90 <__NVIC_SetPriority>
}
 8000d8c:	bf00      	nop
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff56 	bl	8000c54 <__NVIC_EnableIRQ>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b087      	sub	sp, #28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dbe:	e14c      	b.n	800105a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f000 813e 	beq.w	8001054 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d005      	beq.n	8000df0 <HAL_GPIO_Init+0x40>
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d130      	bne.n	8000e52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e26:	2201      	movs	r2, #1
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	091b      	lsrs	r3, r3, #4
 8000e3c:	f003 0201 	and.w	r2, r3, #1
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	d017      	beq.n	8000e8e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d123      	bne.n	8000ee2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	08da      	lsrs	r2, r3, #3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3208      	adds	r2, #8
 8000ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	220f      	movs	r2, #15
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	691a      	ldr	r2, [r3, #16]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	f003 0307 	and.w	r3, r3, #7
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	08da      	lsrs	r2, r3, #3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3208      	adds	r2, #8
 8000edc:	6939      	ldr	r1, [r7, #16]
 8000ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	2203      	movs	r2, #3
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 0203 	and.w	r2, r3, #3
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f000 8098 	beq.w	8001054 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000f24:	4a54      	ldr	r2, [pc, #336]	; (8001078 <HAL_GPIO_Init+0x2c8>)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	089b      	lsrs	r3, r3, #2
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	220f      	movs	r2, #15
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f4e:	d019      	beq.n	8000f84 <HAL_GPIO_Init+0x1d4>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a4a      	ldr	r2, [pc, #296]	; (800107c <HAL_GPIO_Init+0x2cc>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d013      	beq.n	8000f80 <HAL_GPIO_Init+0x1d0>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a49      	ldr	r2, [pc, #292]	; (8001080 <HAL_GPIO_Init+0x2d0>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d00d      	beq.n	8000f7c <HAL_GPIO_Init+0x1cc>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a48      	ldr	r2, [pc, #288]	; (8001084 <HAL_GPIO_Init+0x2d4>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d007      	beq.n	8000f78 <HAL_GPIO_Init+0x1c8>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a47      	ldr	r2, [pc, #284]	; (8001088 <HAL_GPIO_Init+0x2d8>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d101      	bne.n	8000f74 <HAL_GPIO_Init+0x1c4>
 8000f70:	2304      	movs	r3, #4
 8000f72:	e008      	b.n	8000f86 <HAL_GPIO_Init+0x1d6>
 8000f74:	2307      	movs	r3, #7
 8000f76:	e006      	b.n	8000f86 <HAL_GPIO_Init+0x1d6>
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e004      	b.n	8000f86 <HAL_GPIO_Init+0x1d6>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e002      	b.n	8000f86 <HAL_GPIO_Init+0x1d6>
 8000f80:	2301      	movs	r3, #1
 8000f82:	e000      	b.n	8000f86 <HAL_GPIO_Init+0x1d6>
 8000f84:	2300      	movs	r3, #0
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	f002 0203 	and.w	r2, r2, #3
 8000f8c:	0092      	lsls	r2, r2, #2
 8000f8e:	4093      	lsls	r3, r2
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f96:	4938      	ldr	r1, [pc, #224]	; (8001078 <HAL_GPIO_Init+0x2c8>)
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fa4:	4b39      	ldr	r3, [pc, #228]	; (800108c <HAL_GPIO_Init+0x2dc>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fc8:	4a30      	ldr	r2, [pc, #192]	; (800108c <HAL_GPIO_Init+0x2dc>)
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000fce:	4b2f      	ldr	r3, [pc, #188]	; (800108c <HAL_GPIO_Init+0x2dc>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ff2:	4a26      	ldr	r2, [pc, #152]	; (800108c <HAL_GPIO_Init+0x2dc>)
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ff8:	4b24      	ldr	r3, [pc, #144]	; (800108c <HAL_GPIO_Init+0x2dc>)
 8000ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800101e:	4a1b      	ldr	r2, [pc, #108]	; (800108c <HAL_GPIO_Init+0x2dc>)
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_GPIO_Init+0x2dc>)
 8001028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800104c:	4a0f      	ldr	r2, [pc, #60]	; (800108c <HAL_GPIO_Init+0x2dc>)
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	3301      	adds	r3, #1
 8001058:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	fa22 f303 	lsr.w	r3, r2, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	f47f aeab 	bne.w	8000dc0 <HAL_GPIO_Init+0x10>
  }
}
 800106a:	bf00      	nop
 800106c:	bf00      	nop
 800106e:	371c      	adds	r7, #28
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	40010000 	.word	0x40010000
 800107c:	48000400 	.word	0x48000400
 8001080:	48000800 	.word	0x48000800
 8001084:	48000c00 	.word	0x48000c00
 8001088:	48001000 	.word	0x48001000
 800108c:	58000800 	.word	0x58000800

08001090 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e081      	b.n	80011a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d106      	bne.n	80010bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff f904 	bl	80002c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2224      	movs	r2, #36	; 0x24
 80010c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 0201 	bic.w	r2, r2, #1
 80010d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d107      	bne.n	800110a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	e006      	b.n	8001118 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001116:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d104      	bne.n	800112a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001128:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	6812      	ldr	r2, [r2, #0]
 8001134:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800113c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800114c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	691a      	ldr	r2, [r3, #16]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	430a      	orrs	r2, r1
 8001166:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69d9      	ldr	r1, [r3, #28]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1a      	ldr	r2, [r3, #32]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	430a      	orrs	r2, r1
 8001176:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f042 0201 	orr.w	r2, r2, #1
 8001186:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2220      	movs	r2, #32
 8001192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	4608      	mov	r0, r1
 80011ba:	4611      	mov	r1, r2
 80011bc:	461a      	mov	r2, r3
 80011be:	4603      	mov	r3, r0
 80011c0:	817b      	strh	r3, [r7, #10]
 80011c2:	460b      	mov	r3, r1
 80011c4:	813b      	strh	r3, [r7, #8]
 80011c6:	4613      	mov	r3, r2
 80011c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b20      	cmp	r3, #32
 80011d4:	f040 80fd 	bne.w	80013d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d002      	beq.n	80011e4 <HAL_I2C_Mem_Read+0x34>
 80011de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d105      	bne.n	80011f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e0f1      	b.n	80013d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d101      	bne.n	80011fe <HAL_I2C_Mem_Read+0x4e>
 80011fa:	2302      	movs	r3, #2
 80011fc:	e0ea      	b.n	80013d4 <HAL_I2C_Mem_Read+0x224>
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2201      	movs	r2, #1
 8001202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001206:	f7ff fcdb 	bl	8000bc0 <HAL_GetTick>
 800120a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2319      	movs	r3, #25
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f000 fa63 	bl	80016e4 <I2C_WaitOnFlagUntilTimeout>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e0d5      	b.n	80013d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2222      	movs	r2, #34	; 0x22
 800122c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2240      	movs	r2, #64	; 0x40
 8001234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2200      	movs	r2, #0
 800123c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6a3a      	ldr	r2, [r7, #32]
 8001242:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001248:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2200      	movs	r2, #0
 800124e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001250:	88f8      	ldrh	r0, [r7, #6]
 8001252:	893a      	ldrh	r2, [r7, #8]
 8001254:	8979      	ldrh	r1, [r7, #10]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	4603      	mov	r3, r0
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f000 f9c7 	bl	80015f4 <I2C_RequestMemoryRead>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e0ad      	b.n	80013d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800127c:	b29b      	uxth	r3, r3
 800127e:	2bff      	cmp	r3, #255	; 0xff
 8001280:	d90e      	bls.n	80012a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	22ff      	movs	r2, #255	; 0xff
 8001286:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800128c:	b2da      	uxtb	r2, r3
 800128e:	8979      	ldrh	r1, [r7, #10]
 8001290:	4b52      	ldr	r3, [pc, #328]	; (80013dc <HAL_I2C_Mem_Read+0x22c>)
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f000 fbcb 	bl	8001a34 <I2C_TransferConfig>
 800129e:	e00f      	b.n	80012c0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	8979      	ldrh	r1, [r7, #10]
 80012b2:	4b4a      	ldr	r3, [pc, #296]	; (80013dc <HAL_I2C_Mem_Read+0x22c>)
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f000 fbba 	bl	8001a34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c6:	2200      	movs	r2, #0
 80012c8:	2104      	movs	r1, #4
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f000 fa0a 	bl	80016e4 <I2C_WaitOnFlagUntilTimeout>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e07c      	b.n	80013d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f6:	3b01      	subs	r3, #1
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001302:	b29b      	uxth	r3, r3
 8001304:	3b01      	subs	r3, #1
 8001306:	b29a      	uxth	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001310:	b29b      	uxth	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d034      	beq.n	8001380 <HAL_I2C_Mem_Read+0x1d0>
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800131a:	2b00      	cmp	r3, #0
 800131c:	d130      	bne.n	8001380 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001324:	2200      	movs	r2, #0
 8001326:	2180      	movs	r1, #128	; 0x80
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f000 f9db 	bl	80016e4 <I2C_WaitOnFlagUntilTimeout>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e04d      	b.n	80013d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800133c:	b29b      	uxth	r3, r3
 800133e:	2bff      	cmp	r3, #255	; 0xff
 8001340:	d90e      	bls.n	8001360 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	22ff      	movs	r2, #255	; 0xff
 8001346:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800134c:	b2da      	uxtb	r2, r3
 800134e:	8979      	ldrh	r1, [r7, #10]
 8001350:	2300      	movs	r3, #0
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f000 fb6b 	bl	8001a34 <I2C_TransferConfig>
 800135e:	e00f      	b.n	8001380 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001364:	b29a      	uxth	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800136e:	b2da      	uxtb	r2, r3
 8001370:	8979      	ldrh	r1, [r7, #10]
 8001372:	2300      	movs	r3, #0
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f000 fb5a 	bl	8001a34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001384:	b29b      	uxth	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d19a      	bne.n	80012c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f000 fa28 	bl	80017e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e01a      	b.n	80013d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2220      	movs	r2, #32
 80013a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6859      	ldr	r1, [r3, #4]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_I2C_Mem_Read+0x230>)
 80013b2:	400b      	ands	r3, r1
 80013b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2220      	movs	r2, #32
 80013ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e000      	b.n	80013d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80013d2:	2302      	movs	r3, #2
  }
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	80002400 	.word	0x80002400
 80013e0:	fe00e800 	.word	0xfe00e800

080013e4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af02      	add	r7, sp, #8
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	460b      	mov	r3, r1
 80013f2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b20      	cmp	r3, #32
 8001402:	f040 80f1 	bne.w	80015e8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001414:	d101      	bne.n	800141a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001416:	2302      	movs	r3, #2
 8001418:	e0e7      	b.n	80015ea <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001420:	2b01      	cmp	r3, #1
 8001422:	d101      	bne.n	8001428 <HAL_I2C_IsDeviceReady+0x44>
 8001424:	2302      	movs	r3, #2
 8001426:	e0e0      	b.n	80015ea <HAL_I2C_IsDeviceReady+0x206>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2224      	movs	r2, #36	; 0x24
 8001434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2200      	movs	r2, #0
 800143c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d107      	bne.n	8001456 <HAL_I2C_IsDeviceReady+0x72>
 8001446:	897b      	ldrh	r3, [r7, #10]
 8001448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800144c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001450:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001454:	e004      	b.n	8001460 <HAL_I2C_IsDeviceReady+0x7c>
 8001456:	897b      	ldrh	r3, [r7, #10]
 8001458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800145c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001466:	f7ff fbab 	bl	8000bc0 <HAL_GetTick>
 800146a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	f003 0320 	and.w	r3, r3, #32
 8001476:	2b20      	cmp	r3, #32
 8001478:	bf0c      	ite	eq
 800147a:	2301      	moveq	r3, #1
 800147c:	2300      	movne	r3, #0
 800147e:	b2db      	uxtb	r3, r3
 8001480:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0310 	and.w	r3, r3, #16
 800148c:	2b10      	cmp	r3, #16
 800148e:	bf0c      	ite	eq
 8001490:	2301      	moveq	r3, #1
 8001492:	2300      	movne	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001498:	e034      	b.n	8001504 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a0:	d01a      	beq.n	80014d8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80014a2:	f7ff fb8d 	bl	8000bc0 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d302      	bcc.n	80014b8 <HAL_I2C_IsDeviceReady+0xd4>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10f      	bne.n	80014d8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2220      	movs	r2, #32
 80014bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c4:	f043 0220 	orr.w	r2, r3, #32
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e088      	b.n	80015ea <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	f003 0320 	and.w	r3, r3, #32
 80014e2:	2b20      	cmp	r3, #32
 80014e4:	bf0c      	ite	eq
 80014e6:	2301      	moveq	r3, #1
 80014e8:	2300      	movne	r3, #0
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f003 0310 	and.w	r3, r3, #16
 80014f8:	2b10      	cmp	r3, #16
 80014fa:	bf0c      	ite	eq
 80014fc:	2301      	moveq	r3, #1
 80014fe:	2300      	movne	r3, #0
 8001500:	b2db      	uxtb	r3, r3
 8001502:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001504:	7ffb      	ldrb	r3, [r7, #31]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <HAL_I2C_IsDeviceReady+0x12c>
 800150a:	7fbb      	ldrb	r3, [r7, #30]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0c4      	beq.n	800149a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	f003 0310 	and.w	r3, r3, #16
 800151a:	2b10      	cmp	r3, #16
 800151c:	d01a      	beq.n	8001554 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2200      	movs	r2, #0
 8001526:	2120      	movs	r1, #32
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 f8db 	bl	80016e4 <I2C_WaitOnFlagUntilTimeout>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e058      	b.n	80015ea <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2220      	movs	r2, #32
 800153e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2220      	movs	r2, #32
 8001544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	e04a      	b.n	80015ea <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	2200      	movs	r2, #0
 800155c:	2120      	movs	r1, #32
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f000 f8c0 	bl	80016e4 <I2C_WaitOnFlagUntilTimeout>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e03d      	b.n	80015ea <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2210      	movs	r2, #16
 8001574:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2220      	movs	r2, #32
 800157c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	429a      	cmp	r2, r3
 8001584:	d118      	bne.n	80015b8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001594:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	2200      	movs	r2, #0
 800159e:	2120      	movs	r1, #32
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f000 f89f 	bl	80016e4 <I2C_WaitOnFlagUntilTimeout>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e01c      	b.n	80015ea <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2220      	movs	r2, #32
 80015b6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	3301      	adds	r3, #1
 80015bc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	f63f af3b 	bhi.w	800143e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2220      	movs	r2, #32
 80015cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d4:	f043 0220 	orr.w	r2, r3, #32
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e000      	b.n	80015ea <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80015e8:	2302      	movs	r3, #2
  }
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3720      	adds	r7, #32
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	4608      	mov	r0, r1
 80015fe:	4611      	mov	r1, r2
 8001600:	461a      	mov	r2, r3
 8001602:	4603      	mov	r3, r0
 8001604:	817b      	strh	r3, [r7, #10]
 8001606:	460b      	mov	r3, r1
 8001608:	813b      	strh	r3, [r7, #8]
 800160a:	4613      	mov	r3, r2
 800160c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	8979      	ldrh	r1, [r7, #10]
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <I2C_RequestMemoryRead+0xa4>)
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2300      	movs	r3, #0
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 fa0a 	bl	8001a34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001620:	69fa      	ldr	r2, [r7, #28]
 8001622:	69b9      	ldr	r1, [r7, #24]
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f000 f89d 	bl	8001764 <I2C_WaitOnTXISFlagUntilTimeout>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e02c      	b.n	800168e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d105      	bne.n	8001646 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800163a:	893b      	ldrh	r3, [r7, #8]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	629a      	str	r2, [r3, #40]	; 0x28
 8001644:	e015      	b.n	8001672 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001646:	893b      	ldrh	r3, [r7, #8]
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	b29b      	uxth	r3, r3
 800164c:	b2da      	uxtb	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001654:	69fa      	ldr	r2, [r7, #28]
 8001656:	69b9      	ldr	r1, [r7, #24]
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f000 f883 	bl	8001764 <I2C_WaitOnTXISFlagUntilTimeout>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e012      	b.n	800168e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001668:	893b      	ldrh	r3, [r7, #8]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	2200      	movs	r2, #0
 800167a:	2140      	movs	r1, #64	; 0x40
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 f831 	bl	80016e4 <I2C_WaitOnFlagUntilTimeout>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e000      	b.n	800168e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	80002000 	.word	0x80002000

0800169c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d103      	bne.n	80016ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2200      	movs	r2, #0
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d007      	beq.n	80016d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	699a      	ldr	r2, [r3, #24]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0201 	orr.w	r2, r2, #1
 80016d6:	619a      	str	r2, [r3, #24]
  }
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	4613      	mov	r3, r2
 80016f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016f4:	e022      	b.n	800173c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016fc:	d01e      	beq.n	800173c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016fe:	f7ff fa5f 	bl	8000bc0 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d302      	bcc.n	8001714 <I2C_WaitOnFlagUntilTimeout+0x30>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d113      	bne.n	800173c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001718:	f043 0220 	orr.w	r2, r3, #32
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2220      	movs	r2, #32
 8001724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e00f      	b.n	800175c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	699a      	ldr	r2, [r3, #24]
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	4013      	ands	r3, r2
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	429a      	cmp	r2, r3
 800174a:	bf0c      	ite	eq
 800174c:	2301      	moveq	r3, #1
 800174e:	2300      	movne	r3, #0
 8001750:	b2db      	uxtb	r3, r3
 8001752:	461a      	mov	r2, r3
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	429a      	cmp	r2, r3
 8001758:	d0cd      	beq.n	80016f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001770:	e02c      	b.n	80017cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 f870 	bl	800185c <I2C_IsErrorOccurred>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e02a      	b.n	80017dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178c:	d01e      	beq.n	80017cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800178e:	f7ff fa17 	bl	8000bc0 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	429a      	cmp	r2, r3
 800179c:	d302      	bcc.n	80017a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d113      	bne.n	80017cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a8:	f043 0220 	orr.w	r2, r3, #32
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2220      	movs	r2, #32
 80017b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e007      	b.n	80017dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d1cb      	bne.n	8001772 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017f0:	e028      	b.n	8001844 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f000 f830 	bl	800185c <I2C_IsErrorOccurred>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e026      	b.n	8001854 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001806:	f7ff f9db 	bl	8000bc0 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	429a      	cmp	r2, r3
 8001814:	d302      	bcc.n	800181c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d113      	bne.n	8001844 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001820:	f043 0220 	orr.w	r2, r3, #32
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2220      	movs	r2, #32
 800182c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e007      	b.n	8001854 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	f003 0320 	and.w	r3, r3, #32
 800184e:	2b20      	cmp	r3, #32
 8001850:	d1cf      	bne.n	80017f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001868:	2300      	movs	r3, #0
 800186a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	f003 0310 	and.w	r3, r3, #16
 8001884:	2b00      	cmp	r3, #0
 8001886:	d075      	beq.n	8001974 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2210      	movs	r2, #16
 800188e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001890:	e056      	b.n	8001940 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001898:	d052      	beq.n	8001940 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800189a:	f7ff f991 	bl	8000bc0 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d302      	bcc.n	80018b0 <I2C_IsErrorOccurred+0x54>
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d147      	bne.n	8001940 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80018c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018d2:	d12e      	bne.n	8001932 <I2C_IsErrorOccurred+0xd6>
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018da:	d02a      	beq.n	8001932 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80018dc:	7cfb      	ldrb	r3, [r7, #19]
 80018de:	2b20      	cmp	r3, #32
 80018e0:	d027      	beq.n	8001932 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80018f2:	f7ff f965 	bl	8000bc0 <HAL_GetTick>
 80018f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018f8:	e01b      	b.n	8001932 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80018fa:	f7ff f961 	bl	8000bc0 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b19      	cmp	r3, #25
 8001906:	d914      	bls.n	8001932 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190c:	f043 0220 	orr.w	r2, r3, #32
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2220      	movs	r2, #32
 8001918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	f003 0320 	and.w	r3, r3, #32
 800193c:	2b20      	cmp	r3, #32
 800193e:	d1dc      	bne.n	80018fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f003 0320 	and.w	r3, r3, #32
 800194a:	2b20      	cmp	r3, #32
 800194c:	d003      	beq.n	8001956 <I2C_IsErrorOccurred+0xfa>
 800194e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001952:	2b00      	cmp	r3, #0
 8001954:	d09d      	beq.n	8001892 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800195a:	2b00      	cmp	r3, #0
 800195c:	d103      	bne.n	8001966 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2220      	movs	r2, #32
 8001964:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	f043 0304 	orr.w	r3, r3, #4
 800196c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00b      	beq.n	800199e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001996:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00b      	beq.n	80019c0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	f043 0308 	orr.w	r3, r3, #8
 80019ae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00b      	beq.n	80019e2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80019e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d01c      	beq.n	8001a24 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f7ff fe56 	bl	800169c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6859      	ldr	r1, [r3, #4]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <I2C_IsErrorOccurred+0x1d4>)
 80019fc:	400b      	ands	r3, r1
 80019fe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3728      	adds	r7, #40	; 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	fe00e800 	.word	0xfe00e800

08001a34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	817b      	strh	r3, [r7, #10]
 8001a42:	4613      	mov	r3, r2
 8001a44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a46:	897b      	ldrh	r3, [r7, #10]
 8001a48:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a4c:	7a7b      	ldrb	r3, [r7, #9]
 8001a4e:	041b      	lsls	r3, r3, #16
 8001a50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a54:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a62:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	0d5b      	lsrs	r3, r3, #21
 8001a6e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <I2C_TransferConfig+0x60>)
 8001a74:	430b      	orrs	r3, r1
 8001a76:	43db      	mvns	r3, r3
 8001a78:	ea02 0103 	and.w	r1, r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a86:	bf00      	nop
 8001a88:	371c      	adds	r7, #28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	03ff63ff 	.word	0x03ff63ff

08001a98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b20      	cmp	r3, #32
 8001aac:	d138      	bne.n	8001b20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e032      	b.n	8001b22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2224      	movs	r2, #36	; 0x24
 8001ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001aea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6819      	ldr	r1, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0201 	orr.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2220      	movs	r2, #32
 8001b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e000      	b.n	8001b22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b20:	2302      	movs	r3, #2
  }
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b085      	sub	sp, #20
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b20      	cmp	r3, #32
 8001b42:	d139      	bne.n	8001bb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d101      	bne.n	8001b52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e033      	b.n	8001bba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2224      	movs	r2, #36	; 0x24
 8001b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0201 	bic.w	r2, r2, #1
 8001b70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0201 	orr.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	e000      	b.n	8001bba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001bb8:	2302      	movs	r3, #2
  }
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	58000400 	.word	0x58000400

08001be8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <HAL_PWREx_GetVoltageRange+0x18>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	58000400 	.word	0x58000400

08001c04 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c16:	d101      	bne.n	8001c1c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_RCC_HSE_Enable>:
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_RCC_HSE_Disable>:
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_RCC_HSE_IsReady>:
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c76:	d101      	bne.n	8001c7c <LL_RCC_HSE_IsReady+0x18>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <LL_RCC_HSE_IsReady+0x1a>
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_RCC_HSI_Enable>:
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9a:	6013      	str	r3, [r2, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_RCC_HSI_Disable>:
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cb8:	6013      	str	r3, [r2, #0]
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_RCC_HSI_IsReady>:
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd6:	d101      	bne.n	8001cdc <LL_RCC_HSI_IsReady+0x18>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <LL_RCC_HSI_IsReady+0x1a>
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	061b      	lsls	r3, r3, #24
 8001cfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d02:	4313      	orrs	r3, r2
 8001d04:	604b      	str	r3, [r1, #4]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <LL_RCC_HSI48_Enable>:
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_RCC_HSI48_Disable>:
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d44:	f023 0301 	bic.w	r3, r3, #1
 8001d48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <LL_RCC_HSI48_IsReady>:
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d101      	bne.n	8001d6e <LL_RCC_HSI48_IsReady+0x18>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <LL_RCC_HSI48_IsReady+0x1a>
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_RCC_LSE_Enable>:
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_RCC_LSE_Disable>:
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dac:	f023 0301 	bic.w	r3, r3, #1
 8001db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <LL_RCC_LSE_EnableBypass>:
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_RCC_LSE_DisableBypass>:
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001df0:	f023 0304 	bic.w	r3, r3, #4
 8001df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d101      	bne.n	8001e1a <LL_RCC_LSE_IsReady+0x18>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <LL_RCC_LSE_IsReady+0x1a>
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d101      	bne.n	8001e82 <LL_RCC_LSI1_IsReady+0x18>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <LL_RCC_LSI1_IsReady+0x1a>
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ea6:	bf00      	nop
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ebc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ec0:	f023 0304 	bic.w	r3, r3, #4
 8001ec4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d101      	bne.n	8001eea <LL_RCC_LSI2_IsReady+0x18>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <LL_RCC_LSI2_IsReady+0x1a>
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f12:	4313      	orrs	r3, r2
 8001f14:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6013      	str	r3, [r2, #0]
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	6013      	str	r3, [r2, #0]
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d101      	bne.n	8001f76 <LL_RCC_MSI_IsReady+0x16>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <LL_RCC_MSI_IsReady+0x18>
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fba:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2bb0      	cmp	r3, #176	; 0xb0
 8001fc0:	d901      	bls.n	8001fc6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001fc2:	23b0      	movs	r3, #176	; 0xb0
 8001fc4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001fc6:	687b      	ldr	r3, [r7, #4]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f023 0203 	bic.w	r2, r3, #3
 8002010:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800202a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 030c 	and.w	r3, r3, #12
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002050:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800206e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002072:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002076:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800207a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4313      	orrs	r3, r2
 8002082:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800209a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800209e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020a2:	f023 020f 	bic.w	r2, r3, #15
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80020c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4313      	orrs	r3, r2
 80020da:	608b      	str	r3, [r1, #8]
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80020f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4313      	orrs	r3, r2
 8002102:	608b      	str	r3, [r1, #8]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800212c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002130:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002154:	4618      	mov	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800217a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800219c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a0:	6013      	str	r3, [r2, #0]
}
 80021a2:	bf00      	nop
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80021b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021be:	6013      	str	r3, [r2, #0]
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80021ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021dc:	d101      	bne.n	80021e2 <LL_RCC_PLL_IsReady+0x18>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <LL_RCC_PLL_IsReady+0x1a>
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80021f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	0a1b      	lsrs	r3, r3, #8
 80021fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80021fe:	4618      	mov	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800220c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002216:	4618      	mov	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800222e:	4618      	mov	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800223c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f003 0303 	and.w	r3, r3, #3
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002262:	d101      	bne.n	8002268 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002284:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002288:	d101      	bne.n	800228e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800229e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80022a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ae:	d101      	bne.n	80022b4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80022b0:	2301      	movs	r3, #1
 80022b2:	e000      	b.n	80022b6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80022c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022d2:	d101      	bne.n	80022d8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80022e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022f6:	d101      	bne.n	80022fc <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b08d      	sub	sp, #52	; 0x34
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e363      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0320 	and.w	r3, r3, #32
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 808d 	beq.w	8002442 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002328:	f7ff fe7d 	bl	8002026 <LL_RCC_GetSysClkSource>
 800232c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800232e:	f7ff ff83 	bl	8002238 <LL_RCC_PLL_GetMainSource>
 8002332:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <HAL_RCC_OscConfig+0x3e>
 800233a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233c:	2b0c      	cmp	r3, #12
 800233e:	d147      	bne.n	80023d0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002342:	2b01      	cmp	r3, #1
 8002344:	d144      	bne.n	80023d0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e347      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002356:	f7ff fe28 	bl	8001faa <LL_RCC_MSI_GetRange>
 800235a:	4603      	mov	r3, r0
 800235c:	429c      	cmp	r4, r3
 800235e:	d914      	bls.n	800238a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	4618      	mov	r0, r3
 8002366:	f000 fd4b 	bl	8002e00 <RCC_SetFlashLatencyFromMSIRange>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e336      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fe02 	bl	8001f82 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fe26 	bl	8001fd4 <LL_RCC_MSI_SetCalibTrimming>
 8002388:	e013      	b.n	80023b2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fdf7 	bl	8001f82 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fe1b 	bl	8001fd4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fd2c 	bl	8002e00 <RCC_SetFlashLatencyFromMSIRange>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e317      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80023b2:	f000 fcc9 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 80023b6:	4603      	mov	r3, r0
 80023b8:	4aa4      	ldr	r2, [pc, #656]	; (800264c <HAL_RCC_OscConfig+0x344>)
 80023ba:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023bc:	4ba4      	ldr	r3, [pc, #656]	; (8002650 <HAL_RCC_OscConfig+0x348>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe fa49 	bl	8000858 <HAL_InitTick>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d039      	beq.n	8002440 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e308      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d01e      	beq.n	8002416 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023d8:	f7ff fda4 	bl	8001f24 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023dc:	f7fe fbf0 	bl	8000bc0 <HAL_GetTick>
 80023e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023e4:	f7fe fbec 	bl	8000bc0 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e2f5      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80023f6:	f7ff fdb3 	bl	8001f60 <LL_RCC_MSI_IsReady>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f1      	beq.n	80023e4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fdbc 	bl	8001f82 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fde0 	bl	8001fd4 <LL_RCC_MSI_SetCalibTrimming>
 8002414:	e015      	b.n	8002442 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002416:	f7ff fd94 	bl	8001f42 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800241a:	f7fe fbd1 	bl	8000bc0 <HAL_GetTick>
 800241e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002422:	f7fe fbcd 	bl	8000bc0 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e2d6      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002434:	f7ff fd94 	bl	8001f60 <LL_RCC_MSI_IsReady>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f1      	bne.n	8002422 <HAL_RCC_OscConfig+0x11a>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002440:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d047      	beq.n	80024de <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800244e:	f7ff fdea 	bl	8002026 <LL_RCC_GetSysClkSource>
 8002452:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002454:	f7ff fef0 	bl	8002238 <LL_RCC_PLL_GetMainSource>
 8002458:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	2b08      	cmp	r3, #8
 800245e:	d005      	beq.n	800246c <HAL_RCC_OscConfig+0x164>
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	2b0c      	cmp	r3, #12
 8002464:	d108      	bne.n	8002478 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	2b03      	cmp	r3, #3
 800246a:	d105      	bne.n	8002478 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d134      	bne.n	80024de <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e2b4      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002480:	d102      	bne.n	8002488 <HAL_RCC_OscConfig+0x180>
 8002482:	f7ff fbd1 	bl	8001c28 <LL_RCC_HSE_Enable>
 8002486:	e001      	b.n	800248c <HAL_RCC_OscConfig+0x184>
 8002488:	f7ff fbdd 	bl	8001c46 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d012      	beq.n	80024ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7fe fb94 	bl	8000bc0 <HAL_GetTick>
 8002498:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249c:	f7fe fb90 	bl	8000bc0 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	; 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e299      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80024ae:	f7ff fbd9 	bl	8001c64 <LL_RCC_HSE_IsReady>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f1      	beq.n	800249c <HAL_RCC_OscConfig+0x194>
 80024b8:	e011      	b.n	80024de <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ba:	f7fe fb81 	bl	8000bc0 <HAL_GetTick>
 80024be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c2:	f7fe fb7d 	bl	8000bc0 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b64      	cmp	r3, #100	; 0x64
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e286      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80024d4:	f7ff fbc6 	bl	8001c64 <LL_RCC_HSE_IsReady>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f1      	bne.n	80024c2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d04c      	beq.n	8002584 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ea:	f7ff fd9c 	bl	8002026 <LL_RCC_GetSysClkSource>
 80024ee:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024f0:	f7ff fea2 	bl	8002238 <LL_RCC_PLL_GetMainSource>
 80024f4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_OscConfig+0x200>
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2b0c      	cmp	r3, #12
 8002500:	d10e      	bne.n	8002520 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d10b      	bne.n	8002520 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e266      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff fbe5 	bl	8001ce8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800251e:	e031      	b.n	8002584 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d019      	beq.n	800255c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002528:	f7ff fbae 	bl	8001c88 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7fe fb48 	bl	8000bc0 <HAL_GetTick>
 8002530:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002534:	f7fe fb44 	bl	8000bc0 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e24d      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002546:	f7ff fbbd 	bl	8001cc4 <LL_RCC_HSI_IsReady>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f1      	beq.n	8002534 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fbc7 	bl	8001ce8 <LL_RCC_HSI_SetCalibTrimming>
 800255a:	e013      	b.n	8002584 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800255c:	f7ff fba3 	bl	8001ca6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7fe fb2e 	bl	8000bc0 <HAL_GetTick>
 8002564:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002568:	f7fe fb2a 	bl	8000bc0 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e233      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800257a:	f7ff fba3 	bl	8001cc4 <LL_RCC_HSI_IsReady>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f1      	bne.n	8002568 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d106      	bne.n	800259e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80a3 	beq.w	80026e4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d076      	beq.n	8002694 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0310 	and.w	r3, r3, #16
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d046      	beq.n	8002640 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80025b2:	f7ff fc5a 	bl	8001e6a <LL_RCC_LSI1_IsReady>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d113      	bne.n	80025e4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80025bc:	f7ff fc33 	bl	8001e26 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025c0:	f7fe fafe 	bl	8000bc0 <HAL_GetTick>
 80025c4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80025c8:	f7fe fafa 	bl	8000bc0 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e203      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80025da:	f7ff fc46 	bl	8001e6a <LL_RCC_LSI1_IsReady>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f1      	beq.n	80025c8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80025e4:	f7ff fc53 	bl	8001e8e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7fe faea 	bl	8000bc0 <HAL_GetTick>
 80025ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80025f0:	f7fe fae6 	bl	8000bc0 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e1ef      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002602:	f7ff fc66 	bl	8001ed2 <LL_RCC_LSI2_IsReady>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f1      	beq.n	80025f0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fc70 	bl	8001ef6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002616:	f7ff fc17 	bl	8001e48 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261a:	f7fe fad1 	bl	8000bc0 <HAL_GetTick>
 800261e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002622:	f7fe facd 	bl	8000bc0 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e1d6      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002634:	f7ff fc19 	bl	8001e6a <LL_RCC_LSI1_IsReady>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f1      	bne.n	8002622 <HAL_RCC_OscConfig+0x31a>
 800263e:	e051      	b.n	80026e4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002640:	f7ff fbf1 	bl	8001e26 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002644:	f7fe fabc 	bl	8000bc0 <HAL_GetTick>
 8002648:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800264a:	e00c      	b.n	8002666 <HAL_RCC_OscConfig+0x35e>
 800264c:	20000008 	.word	0x20000008
 8002650:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002654:	f7fe fab4 	bl	8000bc0 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e1bd      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002666:	f7ff fc00 	bl	8001e6a <LL_RCC_LSI1_IsReady>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f1      	beq.n	8002654 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002670:	f7ff fc1e 	bl	8001eb0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002676:	f7fe faa3 	bl	8000bc0 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b03      	cmp	r3, #3
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e1ac      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002688:	f7ff fc23 	bl	8001ed2 <LL_RCC_LSI2_IsReady>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f1      	bne.n	8002676 <HAL_RCC_OscConfig+0x36e>
 8002692:	e027      	b.n	80026e4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002694:	f7ff fc0c 	bl	8001eb0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002698:	f7fe fa92 	bl	8000bc0 <HAL_GetTick>
 800269c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80026a0:	f7fe fa8e 	bl	8000bc0 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e197      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80026b2:	f7ff fc0e 	bl	8001ed2 <LL_RCC_LSI2_IsReady>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f1      	bne.n	80026a0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80026bc:	f7ff fbc4 	bl	8001e48 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7fe fa7e 	bl	8000bc0 <HAL_GetTick>
 80026c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80026c8:	f7fe fa7a 	bl	8000bc0 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e183      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80026da:	f7ff fbc6 	bl	8001e6a <LL_RCC_LSI1_IsReady>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f1      	bne.n	80026c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d05b      	beq.n	80027a8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f0:	4ba7      	ldr	r3, [pc, #668]	; (8002990 <HAL_RCC_OscConfig+0x688>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d114      	bne.n	8002726 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80026fc:	f7ff fa64 	bl	8001bc8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002700:	f7fe fa5e 	bl	8000bc0 <HAL_GetTick>
 8002704:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002708:	f7fe fa5a 	bl	8000bc0 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e163      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800271a:	4b9d      	ldr	r3, [pc, #628]	; (8002990 <HAL_RCC_OscConfig+0x688>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d102      	bne.n	8002734 <HAL_RCC_OscConfig+0x42c>
 800272e:	f7ff fb24 	bl	8001d7a <LL_RCC_LSE_Enable>
 8002732:	e00c      	b.n	800274e <HAL_RCC_OscConfig+0x446>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b05      	cmp	r3, #5
 800273a:	d104      	bne.n	8002746 <HAL_RCC_OscConfig+0x43e>
 800273c:	f7ff fb3f 	bl	8001dbe <LL_RCC_LSE_EnableBypass>
 8002740:	f7ff fb1b 	bl	8001d7a <LL_RCC_LSE_Enable>
 8002744:	e003      	b.n	800274e <HAL_RCC_OscConfig+0x446>
 8002746:	f7ff fb29 	bl	8001d9c <LL_RCC_LSE_Disable>
 800274a:	f7ff fb49 	bl	8001de0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d014      	beq.n	8002780 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002756:	f7fe fa33 	bl	8000bc0 <HAL_GetTick>
 800275a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800275c:	e00a      	b.n	8002774 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275e:	f7fe fa2f 	bl	8000bc0 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	f241 3288 	movw	r2, #5000	; 0x1388
 800276c:	4293      	cmp	r3, r2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e136      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002774:	f7ff fb45 	bl	8001e02 <LL_RCC_LSE_IsReady>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0ef      	beq.n	800275e <HAL_RCC_OscConfig+0x456>
 800277e:	e013      	b.n	80027a8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002780:	f7fe fa1e 	bl	8000bc0 <HAL_GetTick>
 8002784:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002786:	e00a      	b.n	800279e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002788:	f7fe fa1a 	bl	8000bc0 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	; 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e121      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800279e:	f7ff fb30 	bl	8001e02 <LL_RCC_LSE_IsReady>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1ef      	bne.n	8002788 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d02c      	beq.n	800280e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d014      	beq.n	80027e6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027bc:	f7ff faa9 	bl	8001d12 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c0:	f7fe f9fe 	bl	8000bc0 <HAL_GetTick>
 80027c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027c8:	f7fe f9fa 	bl	8000bc0 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e103      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80027da:	f7ff fabc 	bl	8001d56 <LL_RCC_HSI48_IsReady>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f1      	beq.n	80027c8 <HAL_RCC_OscConfig+0x4c0>
 80027e4:	e013      	b.n	800280e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027e6:	f7ff faa5 	bl	8001d34 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ea:	f7fe f9e9 	bl	8000bc0 <HAL_GetTick>
 80027ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027f2:	f7fe f9e5 	bl	8000bc0 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e0ee      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002804:	f7ff faa7 	bl	8001d56 <LL_RCC_HSI48_IsReady>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f1      	bne.n	80027f2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 80e4 	beq.w	80029e0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002818:	f7ff fc05 	bl	8002026 <LL_RCC_GetSysClkSource>
 800281c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800281e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	2b02      	cmp	r3, #2
 800282c:	f040 80b4 	bne.w	8002998 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f003 0203 	and.w	r2, r3, #3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	429a      	cmp	r2, r3
 800283c:	d123      	bne.n	8002886 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002848:	429a      	cmp	r2, r3
 800284a:	d11c      	bne.n	8002886 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	0a1b      	lsrs	r3, r3, #8
 8002850:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002858:	429a      	cmp	r2, r3
 800285a:	d114      	bne.n	8002886 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d10d      	bne.n	8002886 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d106      	bne.n	8002886 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002882:	429a      	cmp	r2, r3
 8002884:	d05d      	beq.n	8002942 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	2b0c      	cmp	r3, #12
 800288a:	d058      	beq.n	800293e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800288c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e0a1      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800289e:	f7ff fc85 	bl	80021ac <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028a2:	f7fe f98d 	bl	8000bc0 <HAL_GetTick>
 80028a6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028aa:	f7fe f989 	bl	8000bc0 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e092      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1ef      	bne.n	80028aa <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	4b30      	ldr	r3, [pc, #192]	; (8002994 <HAL_RCC_OscConfig+0x68c>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028dc:	4311      	orrs	r1, r2
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028e2:	0212      	lsls	r2, r2, #8
 80028e4:	4311      	orrs	r1, r2
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028ea:	4311      	orrs	r1, r2
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028f0:	4311      	orrs	r1, r2
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028f6:	430a      	orrs	r2, r1
 80028f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002900:	f7ff fc45 	bl	800218e <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800290e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002912:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002914:	f7fe f954 	bl	8000bc0 <HAL_GetTick>
 8002918:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291c:	f7fe f950 	bl	8000bc0 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e059      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0ef      	beq.n	800291c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800293c:	e050      	b.n	80029e0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e04f      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d147      	bne.n	80029e0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002950:	f7ff fc1d 	bl	800218e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800295e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002962:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002964:	f7fe f92c 	bl	8000bc0 <HAL_GetTick>
 8002968:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296c:	f7fe f928 	bl	8000bc0 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e031      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0ef      	beq.n	800296c <HAL_RCC_OscConfig+0x664>
 800298c:	e028      	b.n	80029e0 <HAL_RCC_OscConfig+0x6d8>
 800298e:	bf00      	nop
 8002990:	58000400 	.word	0x58000400
 8002994:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	2b0c      	cmp	r3, #12
 800299c:	d01e      	beq.n	80029dc <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299e:	f7ff fc05 	bl	80021ac <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a2:	f7fe f90d 	bl	8000bc0 <HAL_GetTick>
 80029a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029aa:	f7fe f909 	bl	8000bc0 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e012      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1ef      	bne.n	80029aa <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80029ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029d4:	4b05      	ldr	r3, [pc, #20]	; (80029ec <HAL_RCC_OscConfig+0x6e4>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	60cb      	str	r3, [r1, #12]
 80029da:	e001      	b.n	80029e0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3734      	adds	r7, #52	; 0x34
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd90      	pop	{r4, r7, pc}
 80029ea:	bf00      	nop
 80029ec:	eefefffc 	.word	0xeefefffc

080029f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e12d      	b.n	8002c60 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a04:	4b98      	ldr	r3, [pc, #608]	; (8002c68 <HAL_RCC_ClockConfig+0x278>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d91b      	bls.n	8002a4a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b95      	ldr	r3, [pc, #596]	; (8002c68 <HAL_RCC_ClockConfig+0x278>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 0207 	bic.w	r2, r3, #7
 8002a1a:	4993      	ldr	r1, [pc, #588]	; (8002c68 <HAL_RCC_ClockConfig+0x278>)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a22:	f7fe f8cd 	bl	8000bc0 <HAL_GetTick>
 8002a26:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a2a:	f7fe f8c9 	bl	8000bc0 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e111      	b.n	8002c60 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3c:	4b8a      	ldr	r3, [pc, #552]	; (8002c68 <HAL_RCC_ClockConfig+0x278>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d1ef      	bne.n	8002a2a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d016      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff faef 	bl	800203e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a60:	f7fe f8ae 	bl	8000bc0 <HAL_GetTick>
 8002a64:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a68:	f7fe f8aa 	bl	8000bc0 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e0f2      	b.n	8002c60 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a7a:	f7ff fbe9 	bl	8002250 <LL_RCC_IsActiveFlag_HPRE>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f1      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0320 	and.w	r3, r3, #32
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d016      	beq.n	8002abe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fae6 	bl	8002066 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a9a:	f7fe f891 	bl	8000bc0 <HAL_GetTick>
 8002a9e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002aa2:	f7fe f88d 	bl	8000bc0 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e0d5      	b.n	8002c60 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002ab4:	f7ff fbde 	bl	8002274 <LL_RCC_IsActiveFlag_C2HPRE>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f1      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d016      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fadf 	bl	8002092 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ad4:	f7fe f874 	bl	8000bc0 <HAL_GetTick>
 8002ad8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002adc:	f7fe f870 	bl	8000bc0 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e0b8      	b.n	8002c60 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002aee:	f7ff fbd4 	bl	800229a <LL_RCC_IsActiveFlag_SHDHPRE>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f1      	beq.n	8002adc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d016      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff fad9 	bl	80020c0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b0e:	f7fe f857 	bl	8000bc0 <HAL_GetTick>
 8002b12:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b16:	f7fe f853 	bl	8000bc0 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e09b      	b.n	8002c60 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002b28:	f7ff fbca 	bl	80022c0 <LL_RCC_IsActiveFlag_PPRE1>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f1      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d017      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff facf 	bl	80020e8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b4a:	f7fe f839 	bl	8000bc0 <HAL_GetTick>
 8002b4e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b52:	f7fe f835 	bl	8000bc0 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e07d      	b.n	8002c60 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b64:	f7ff fbbe 	bl	80022e4 <LL_RCC_IsActiveFlag_PPRE2>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f1      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d043      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d106      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002b82:	f7ff f86f 	bl	8001c64 <LL_RCC_HSE_IsReady>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d11e      	bne.n	8002bca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e067      	b.n	8002c60 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d106      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002b98:	f7ff fb17 	bl	80021ca <LL_RCC_PLL_IsReady>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d113      	bne.n	8002bca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e05c      	b.n	8002c60 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002bae:	f7ff f9d7 	bl	8001f60 <LL_RCC_MSI_IsReady>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d108      	bne.n	8002bca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e051      	b.n	8002c60 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002bbc:	f7ff f882 	bl	8001cc4 <LL_RCC_HSI_IsReady>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e04a      	b.n	8002c60 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fa15 	bl	8001ffe <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd4:	f7fd fff4 	bl	8000bc0 <HAL_GetTick>
 8002bd8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bdc:	f7fd fff0 	bl	8000bc0 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e036      	b.n	8002c60 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf2:	f7ff fa18 	bl	8002026 <LL_RCC_GetSysClkSource>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d1ec      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c02:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_RCC_ClockConfig+0x278>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d21b      	bcs.n	8002c48 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c10:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <HAL_RCC_ClockConfig+0x278>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f023 0207 	bic.w	r2, r3, #7
 8002c18:	4913      	ldr	r1, [pc, #76]	; (8002c68 <HAL_RCC_ClockConfig+0x278>)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c20:	f7fd ffce 	bl	8000bc0 <HAL_GetTick>
 8002c24:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c28:	f7fd ffca 	bl	8000bc0 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e012      	b.n	8002c60 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_RCC_ClockConfig+0x278>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d1ef      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c48:	f000 f87e 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	4a07      	ldr	r2, [pc, #28]	; (8002c6c <HAL_RCC_ClockConfig+0x27c>)
 8002c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002c52:	f7fd ffc1 	bl	8000bd8 <HAL_GetTickPrio>
 8002c56:	4603      	mov	r3, r0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fd fdfd 	bl	8000858 <HAL_InitTick>
 8002c5e:	4603      	mov	r3, r0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	58004000 	.word	0x58004000
 8002c6c:	20000008 	.word	0x20000008

08002c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c70:	b590      	push	{r4, r7, lr}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c76:	f7ff f9d6 	bl	8002026 <LL_RCC_GetSysClkSource>
 8002c7a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10a      	bne.n	8002c98 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c82:	f7ff f992 	bl	8001faa <LL_RCC_MSI_GetRange>
 8002c86:	4603      	mov	r3, r0
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	4a2b      	ldr	r2, [pc, #172]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	e04b      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d102      	bne.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c9e:	4b28      	ldr	r3, [pc, #160]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	e045      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d10a      	bne.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002caa:	f7fe ffab 	bl	8001c04 <LL_RCC_HSE_IsEnabledDiv2>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d102      	bne.n	8002cba <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002cb4:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	e03a      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002cba:	4b22      	ldr	r3, [pc, #136]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	e037      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002cc0:	f7ff faba 	bl	8002238 <LL_RCC_PLL_GetMainSource>
 8002cc4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d003      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x64>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d003      	beq.n	8002cda <HAL_RCC_GetSysClockFreq+0x6a>
 8002cd2:	e00d      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cd6:	60bb      	str	r3, [r7, #8]
        break;
 8002cd8:	e015      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002cda:	f7fe ff93 	bl	8001c04 <LL_RCC_HSE_IsEnabledDiv2>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d102      	bne.n	8002cea <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002ce4:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ce6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002ce8:	e00d      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002cea:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002cec:	60bb      	str	r3, [r7, #8]
        break;
 8002cee:	e00a      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002cf0:	f7ff f95b 	bl	8001faa <LL_RCC_MSI_GetRange>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	091b      	lsrs	r3, r3, #4
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	4a0f      	ldr	r2, [pc, #60]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d02:	60bb      	str	r3, [r7, #8]
        break;
 8002d04:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002d06:	f7ff fa72 	bl	80021ee <LL_RCC_PLL_GetN>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	fb03 f402 	mul.w	r4, r3, r2
 8002d12:	f7ff fa85 	bl	8002220 <LL_RCC_PLL_GetDivider>
 8002d16:	4603      	mov	r3, r0
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	fbb4 f4f3 	udiv	r4, r4, r3
 8002d20:	f7ff fa72 	bl	8002208 <LL_RCC_PLL_GetR>
 8002d24:	4603      	mov	r3, r0
 8002d26:	0f5b      	lsrs	r3, r3, #29
 8002d28:	3301      	adds	r3, #1
 8002d2a:	fbb4 f3f3 	udiv	r3, r4, r3
 8002d2e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002d30:	68fb      	ldr	r3, [r7, #12]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd90      	pop	{r4, r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	080075ac 	.word	0x080075ac
 8002d40:	00f42400 	.word	0x00f42400
 8002d44:	01e84800 	.word	0x01e84800

08002d48 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d48:	b598      	push	{r3, r4, r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002d4c:	f7ff ff90 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 8002d50:	4604      	mov	r4, r0
 8002d52:	f7ff f9dd 	bl	8002110 <LL_RCC_GetAHBPrescaler>
 8002d56:	4603      	mov	r3, r0
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	4a03      	ldr	r2, [pc, #12]	; (8002d6c <HAL_RCC_GetHCLKFreq+0x24>)
 8002d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d64:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	bd98      	pop	{r3, r4, r7, pc}
 8002d6c:	0800754c 	.word	0x0800754c

08002d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d70:	b598      	push	{r3, r4, r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002d74:	f7ff ffe8 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002d78:	4604      	mov	r4, r0
 8002d7a:	f7ff f9fc 	bl	8002176 <LL_RCC_GetAPB2Prescaler>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	0adb      	lsrs	r3, r3, #11
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	4a04      	ldr	r2, [pc, #16]	; (8002d98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	bd98      	pop	{r3, r4, r7, pc}
 8002d98:	0800758c 	.word	0x0800758c

08002d9c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	226f      	movs	r2, #111	; 0x6f
 8002daa:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002dac:	f7ff f93b 	bl	8002026 <LL_RCC_GetSysClkSource>
 8002db0:	4602      	mov	r2, r0
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002db6:	f7ff f9ab 	bl	8002110 <LL_RCC_GetAHBPrescaler>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8002dc0:	f7ff f9cd 	bl	800215e <LL_RCC_GetAPB1Prescaler>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8002dca:	f7ff f9d4 	bl	8002176 <LL_RCC_GetAPB2Prescaler>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002dd4:	f7ff f9a8 	bl	8002128 <LL_C2_RCC_GetAHBPrescaler>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8002dde:	f7ff f9b0 	bl	8002142 <LL_RCC_GetAHB4Prescaler>
 8002de2:	4602      	mov	r2, r0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002de8:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <HAL_RCC_GetClockConfig+0x60>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0207 	and.w	r2, r3, #7
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	601a      	str	r2, [r3, #0]
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	58004000 	.word	0x58004000

08002e00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002e00:	b590      	push	{r4, r7, lr}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2bb0      	cmp	r3, #176	; 0xb0
 8002e0c:	d903      	bls.n	8002e16 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002e0e:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	e007      	b.n	8002e26 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	4a11      	ldr	r2, [pc, #68]	; (8002e64 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e24:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002e26:	f7ff f98c 	bl	8002142 <LL_RCC_GetAHB4Prescaler>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4a0a      	ldr	r2, [pc, #40]	; (8002e6c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	0c9c      	lsrs	r4, r3, #18
 8002e4a:	f7fe fecd 	bl	8001be8 <HAL_PWREx_GetVoltageRange>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4619      	mov	r1, r3
 8002e52:	4620      	mov	r0, r4
 8002e54:	f000 f80c 	bl	8002e70 <RCC_SetFlashLatency>
 8002e58:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd90      	pop	{r4, r7, pc}
 8002e62:	bf00      	nop
 8002e64:	080075ac 	.word	0x080075ac
 8002e68:	0800754c 	.word	0x0800754c
 8002e6c:	431bde83 	.word	0x431bde83

08002e70 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002e70:	b590      	push	{r4, r7, lr}
 8002e72:	b093      	sub	sp, #76	; 0x4c
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002e7a:	4b37      	ldr	r3, [pc, #220]	; (8002f58 <RCC_SetFlashLatency+0xe8>)
 8002e7c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002e80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002e86:	4a35      	ldr	r2, [pc, #212]	; (8002f5c <RCC_SetFlashLatency+0xec>)
 8002e88:	f107 031c 	add.w	r3, r7, #28
 8002e8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002e92:	4b33      	ldr	r3, [pc, #204]	; (8002f60 <RCC_SetFlashLatency+0xf0>)
 8002e94:	f107 040c 	add.w	r4, r7, #12
 8002e98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ea8:	d11a      	bne.n	8002ee0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002eaa:	2300      	movs	r3, #0
 8002eac:	643b      	str	r3, [r7, #64]	; 0x40
 8002eae:	e013      	b.n	8002ed8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	3348      	adds	r3, #72	; 0x48
 8002eb6:	443b      	add	r3, r7
 8002eb8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d807      	bhi.n	8002ed2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	3348      	adds	r3, #72	; 0x48
 8002ec8:	443b      	add	r3, r7
 8002eca:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002ece:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002ed0:	e020      	b.n	8002f14 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d9e8      	bls.n	8002eb0 <RCC_SetFlashLatency+0x40>
 8002ede:	e019      	b.n	8002f14 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ee4:	e013      	b.n	8002f0e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	3348      	adds	r3, #72	; 0x48
 8002eec:	443b      	add	r3, r7
 8002eee:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d807      	bhi.n	8002f08 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	3348      	adds	r3, #72	; 0x48
 8002efe:	443b      	add	r3, r7
 8002f00:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002f04:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002f06:	e005      	b.n	8002f14 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d9e8      	bls.n	8002ee6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002f14:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <RCC_SetFlashLatency+0xf4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f023 0207 	bic.w	r2, r3, #7
 8002f1c:	4911      	ldr	r1, [pc, #68]	; (8002f64 <RCC_SetFlashLatency+0xf4>)
 8002f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f20:	4313      	orrs	r3, r2
 8002f22:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f24:	f7fd fe4c 	bl	8000bc0 <HAL_GetTick>
 8002f28:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002f2a:	e008      	b.n	8002f3e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f2c:	f7fd fe48 	bl	8000bc0 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e007      	b.n	8002f4e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002f3e:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <RCC_SetFlashLatency+0xf4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d1ef      	bne.n	8002f2c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	374c      	adds	r7, #76	; 0x4c
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd90      	pop	{r4, r7, pc}
 8002f56:	bf00      	nop
 8002f58:	080074c0 	.word	0x080074c0
 8002f5c:	080074d0 	.word	0x080074d0
 8002f60:	080074dc 	.word	0x080074dc
 8002f64:	58004000 	.word	0x58004000

08002f68 <LL_RCC_LSE_IsEnabled>:
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <LL_RCC_LSE_IsEnabled+0x18>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <LL_RCC_LSE_IsEnabled+0x1a>
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <LL_RCC_LSE_IsReady>:
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d101      	bne.n	8002fa4 <LL_RCC_LSE_IsReady+0x18>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <LL_RCC_LSE_IsReady+0x1a>
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <LL_RCC_MSI_EnablePLLMode>:
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fbe:	f043 0304 	orr.w	r3, r3, #4
 8002fc2:	6013      	str	r3, [r2, #0]
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <LL_RCC_SetRFWKPClockSource>:
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fde:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fe2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <LL_RCC_SetSMPSClockSource>:
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	f023 0203 	bic.w	r2, r3, #3
 800300c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4313      	orrs	r3, r2
 8003014:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <LL_RCC_SetSMPSPrescaler>:
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800302a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003034:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4313      	orrs	r3, r2
 800303c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <LL_RCC_SetUSARTClockSource>:
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305a:	f023 0203 	bic.w	r2, r3, #3
 800305e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <LL_RCC_SetLPUARTClockSource>:
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800307e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003086:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800308a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_RCC_SetI2CClockSource>:
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80030ba:	43db      	mvns	r3, r3
 80030bc:	401a      	ands	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80030c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <LL_RCC_SetLPTIMClockSource>:
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80030e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	0c1b      	lsrs	r3, r3, #16
 80030f0:	041b      	lsls	r3, r3, #16
 80030f2:	43db      	mvns	r3, r3
 80030f4:	401a      	ands	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	041b      	lsls	r3, r3, #16
 80030fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <LL_RCC_SetSAIClockSource>:
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003120:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003124:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <LL_RCC_SetRNGClockSource>:
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003150:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <LL_RCC_SetCLK48ClockSource>:
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003178:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800317c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <LL_RCC_SetUSBClockSource>:
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff ffe3 	bl	8003168 <LL_RCC_SetCLK48ClockSource>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <LL_RCC_SetADCClockSource>:
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80031b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <LL_RCC_SetRTCClockSource>:
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80031de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <LL_RCC_GetRTCClockSource>:
{
 8003202:	b480      	push	{r7}
 8003204:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003212:	4618      	mov	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <LL_RCC_ForceBackupDomainReset>:
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003228:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800322c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003234:	bf00      	nop
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <LL_RCC_ReleaseBackupDomainReset>:
{
 800323e:	b480      	push	{r7}
 8003240:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800324e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003256:	bf00      	nop
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <LL_RCC_PLLSAI1_Enable>:
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800326e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003272:	6013      	str	r3, [r2, #0]
}
 8003274:	bf00      	nop
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <LL_RCC_PLLSAI1_Disable>:
{
 800327e:	b480      	push	{r7}
 8003280:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800328c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003290:	6013      	str	r3, [r2, #0]
}
 8003292:	bf00      	nop
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <LL_RCC_PLLSAI1_IsReady>:
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80032a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032ae:	d101      	bne.n	80032b4 <LL_RCC_PLLSAI1_IsReady+0x18>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80032c8:	2300      	movs	r3, #0
 80032ca:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80032cc:	2300      	movs	r3, #0
 80032ce:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d034      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032e4:	d021      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80032e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032ea:	d81b      	bhi.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032f0:	d01d      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80032f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032f6:	d815      	bhi.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00b      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80032fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003300:	d110      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800330c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003310:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003312:	e00d      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3304      	adds	r3, #4
 8003318:	4618      	mov	r0, r3
 800331a:	f000 f94d 	bl	80035b8 <RCCEx_PLLSAI1_ConfigNP>
 800331e:	4603      	mov	r3, r0
 8003320:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003322:	e005      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	77fb      	strb	r3, [r7, #31]
        break;
 8003328:	e002      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800332a:	bf00      	nop
 800332c:	e000      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800332e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003330:	7ffb      	ldrb	r3, [r7, #31]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d105      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff fee8 	bl	8003110 <LL_RCC_SetSAIClockSource>
 8003340:	e001      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003342:	7ffb      	ldrb	r3, [r7, #31]
 8003344:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800334e:	2b00      	cmp	r3, #0
 8003350:	d046      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003352:	f7ff ff56 	bl	8003202 <LL_RCC_GetRTCClockSource>
 8003356:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	429a      	cmp	r2, r3
 8003360:	d03c      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003362:	f7fe fc31 	bl	8001bc8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d105      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff ff30 	bl	80031d6 <LL_RCC_SetRTCClockSource>
 8003376:	e02e      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003380:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003382:	f7ff ff4b 	bl	800321c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003386:	f7ff ff5a 	bl	800323e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003398:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80033a2:	f7ff fde1 	bl	8002f68 <LL_RCC_LSE_IsEnabled>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d114      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033ac:	f7fd fc08 	bl	8000bc0 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80033b2:	e00b      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b4:	f7fd fc04 	bl	8000bc0 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d902      	bls.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	77fb      	strb	r3, [r7, #31]
              break;
 80033ca:	e004      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80033cc:	f7ff fdde 	bl	8002f8c <LL_RCC_LSE_IsReady>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d1ee      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80033d6:	7ffb      	ldrb	r3, [r7, #31]
 80033d8:	77bb      	strb	r3, [r7, #30]
 80033da:	e001      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033dc:	7ffb      	ldrb	r3, [r7, #31]
 80033de:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d004      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff fe2a 	bl	800304a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d004      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fe35 	bl	8003076 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	d004      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff fe5d 	bl	80030dc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	2b00      	cmp	r3, #0
 800342c:	d004      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff fe52 	bl	80030dc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d004      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fe2a 	bl	80030a2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d004      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff fe1f 	bl	80030a2 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d022      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fe8d 	bl	8003194 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800347e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003482:	d107      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800348e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003492:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003498:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800349c:	d10b      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3304      	adds	r3, #4
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 f8e3 	bl	800366e <RCCEx_PLLSAI1_ConfigNQ>
 80034a8:	4603      	mov	r3, r0
 80034aa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80034ac:	7ffb      	ldrb	r3, [r7, #31]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80034b2:	7ffb      	ldrb	r3, [r7, #31]
 80034b4:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d02b      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ca:	d008      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034d4:	d003      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d105      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff fe2a 	bl	800313c <LL_RCC_SetRNGClockSource>
 80034e8:	e00a      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	2000      	movs	r0, #0
 80034f6:	f7ff fe21 	bl	800313c <LL_RCC_SetRNGClockSource>
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f7ff fe34 	bl	8003168 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003508:	d107      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800350a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003514:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003518:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003522:	2b00      	cmp	r3, #0
 8003524:	d022      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff fe3d 	bl	80031aa <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003538:	d107      	bne.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800353a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003548:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003552:	d10b      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3304      	adds	r3, #4
 8003558:	4618      	mov	r0, r3
 800355a:	f000 f8e3 	bl	8003724 <RCCEx_PLLSAI1_ConfigNR>
 800355e:	4603      	mov	r3, r0
 8003560:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003562:	7ffb      	ldrb	r3, [r7, #31]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003568:	7ffb      	ldrb	r3, [r7, #31]
 800356a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d004      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff fd26 	bl	8002fce <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fd45 	bl	8003022 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fd2c 	bl	8002ffa <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80035a2:	7fbb      	ldrb	r3, [r7, #30]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3720      	adds	r7, #32
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80035b0:	f7ff fcfe 	bl	8002fb0 <LL_RCC_MSI_EnablePLLMode>
}
 80035b4:	bf00      	nop
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80035c4:	f7ff fe5b 	bl	800327e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80035c8:	f7fd fafa 	bl	8000bc0 <HAL_GetTick>
 80035cc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80035ce:	e009      	b.n	80035e4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035d0:	f7fd faf6 	bl	8000bc0 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d902      	bls.n	80035e4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	73fb      	strb	r3, [r7, #15]
      break;
 80035e2:	e004      	b.n	80035ee <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80035e4:	f7ff fe5a 	bl	800329c <LL_RCC_PLLSAI1_IsReady>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d137      	bne.n	8003664 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80035f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003608:	4313      	orrs	r3, r2
 800360a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800360c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800361e:	4313      	orrs	r3, r2
 8003620:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003622:	f7ff fe1d 	bl	8003260 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003626:	f7fd facb 	bl	8000bc0 <HAL_GetTick>
 800362a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800362c:	e009      	b.n	8003642 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800362e:	f7fd fac7 	bl	8000bc0 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d902      	bls.n	8003642 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	73fb      	strb	r3, [r7, #15]
        break;
 8003640:	e004      	b.n	800364c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003642:	f7ff fe2b 	bl	800329c <LL_RCC_PLLSAI1_IsReady>
 8003646:	4603      	mov	r3, r0
 8003648:	2b01      	cmp	r3, #1
 800364a:	d1f0      	bne.n	800362e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d108      	bne.n	8003664 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003660:	4313      	orrs	r3, r2
 8003662:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003664:	7bfb      	ldrb	r3, [r7, #15]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b084      	sub	sp, #16
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800367a:	f7ff fe00 	bl	800327e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800367e:	f7fd fa9f 	bl	8000bc0 <HAL_GetTick>
 8003682:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003684:	e009      	b.n	800369a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003686:	f7fd fa9b 	bl	8000bc0 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d902      	bls.n	800369a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	73fb      	strb	r3, [r7, #15]
      break;
 8003698:	e004      	b.n	80036a4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800369a:	f7ff fdff 	bl	800329c <LL_RCC_PLLSAI1_IsReady>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1f0      	bne.n	8003686 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d137      	bne.n	800371a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80036aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	021b      	lsls	r3, r3, #8
 80036ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036be:	4313      	orrs	r3, r2
 80036c0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80036c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036d4:	4313      	orrs	r3, r2
 80036d6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80036d8:	f7ff fdc2 	bl	8003260 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036dc:	f7fd fa70 	bl	8000bc0 <HAL_GetTick>
 80036e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80036e2:	e009      	b.n	80036f8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036e4:	f7fd fa6c 	bl	8000bc0 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d902      	bls.n	80036f8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	73fb      	strb	r3, [r7, #15]
        break;
 80036f6:	e004      	b.n	8003702 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80036f8:	f7ff fdd0 	bl	800329c <LL_RCC_PLLSAI1_IsReady>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d1f0      	bne.n	80036e4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d108      	bne.n	800371a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003716:	4313      	orrs	r3, r2
 8003718:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800371a:	7bfb      	ldrb	r3, [r7, #15]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003730:	f7ff fda5 	bl	800327e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003734:	f7fd fa44 	bl	8000bc0 <HAL_GetTick>
 8003738:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800373a:	e009      	b.n	8003750 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800373c:	f7fd fa40 	bl	8000bc0 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d902      	bls.n	8003750 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	73fb      	strb	r3, [r7, #15]
      break;
 800374e:	e004      	b.n	800375a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003750:	f7ff fda4 	bl	800329c <LL_RCC_PLLSAI1_IsReady>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d137      	bne.n	80037d0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	021b      	lsls	r3, r3, #8
 8003770:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003774:	4313      	orrs	r3, r2
 8003776:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800378a:	4313      	orrs	r3, r2
 800378c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800378e:	f7ff fd67 	bl	8003260 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003792:	f7fd fa15 	bl	8000bc0 <HAL_GetTick>
 8003796:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003798:	e009      	b.n	80037ae <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800379a:	f7fd fa11 	bl	8000bc0 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d902      	bls.n	80037ae <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	73fb      	strb	r3, [r7, #15]
        break;
 80037ac:	e004      	b.n	80037b8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80037ae:	f7ff fd75 	bl	800329c <LL_RCC_PLLSAI1_IsReady>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d1f0      	bne.n	800379a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d108      	bne.n	80037d0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80037be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037cc:	4313      	orrs	r3, r2
 80037ce:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e049      	b.n	8003880 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d106      	bne.n	8003806 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f841 	bl	8003888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2202      	movs	r2, #2
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3304      	adds	r3, #4
 8003816:	4619      	mov	r1, r3
 8003818:	4610      	mov	r0, r2
 800381a:	f000 f9d5 	bl	8003bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d001      	beq.n	80038b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e036      	b.n	8003922 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0201 	orr.w	r2, r2, #1
 80038ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a17      	ldr	r2, [pc, #92]	; (8003930 <HAL_TIM_Base_Start_IT+0x94>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d004      	beq.n	80038e0 <HAL_TIM_Base_Start_IT+0x44>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038de:	d115      	bne.n	800390c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	4b13      	ldr	r3, [pc, #76]	; (8003934 <HAL_TIM_Base_Start_IT+0x98>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2b06      	cmp	r3, #6
 80038f0:	d015      	beq.n	800391e <HAL_TIM_Base_Start_IT+0x82>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f8:	d011      	beq.n	800391e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f042 0201 	orr.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800390a:	e008      	b.n	800391e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	e000      	b.n	8003920 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800391e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40012c00 	.word	0x40012c00
 8003934:	00010007 	.word	0x00010007

08003938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b02      	cmp	r3, #2
 800394c:	d122      	bne.n	8003994 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b02      	cmp	r3, #2
 800395a:	d11b      	bne.n	8003994 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0202 	mvn.w	r2, #2
 8003964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f905 	bl	8003b8a <HAL_TIM_IC_CaptureCallback>
 8003980:	e005      	b.n	800398e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f8f7 	bl	8003b76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f908 	bl	8003b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d122      	bne.n	80039e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d11b      	bne.n	80039e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0204 	mvn.w	r2, #4
 80039b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f8db 	bl	8003b8a <HAL_TIM_IC_CaptureCallback>
 80039d4:	e005      	b.n	80039e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f8cd 	bl	8003b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f8de 	bl	8003b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d122      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d11b      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0208 	mvn.w	r2, #8
 8003a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2204      	movs	r2, #4
 8003a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f8b1 	bl	8003b8a <HAL_TIM_IC_CaptureCallback>
 8003a28:	e005      	b.n	8003a36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f8a3 	bl	8003b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f8b4 	bl	8003b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f003 0310 	and.w	r3, r3, #16
 8003a46:	2b10      	cmp	r3, #16
 8003a48:	d122      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d11b      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0210 	mvn.w	r2, #16
 8003a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2208      	movs	r2, #8
 8003a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f887 	bl	8003b8a <HAL_TIM_IC_CaptureCallback>
 8003a7c:	e005      	b.n	8003a8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f879 	bl	8003b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f88a 	bl	8003b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d10e      	bne.n	8003abc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d107      	bne.n	8003abc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0201 	mvn.w	r2, #1
 8003ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fc fd5e 	bl	8000578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac6:	2b80      	cmp	r3, #128	; 0x80
 8003ac8:	d10e      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b80      	cmp	r3, #128	; 0x80
 8003ad6:	d107      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f8de 	bl	8003ca4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003af6:	d10e      	bne.n	8003b16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b02:	2b80      	cmp	r3, #128	; 0x80
 8003b04:	d107      	bne.n	8003b16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f8d1 	bl	8003cb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b20:	2b40      	cmp	r3, #64	; 0x40
 8003b22:	d10e      	bne.n	8003b42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2e:	2b40      	cmp	r3, #64	; 0x40
 8003b30:	d107      	bne.n	8003b42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f838 	bl	8003bb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b20      	cmp	r3, #32
 8003b4e:	d10e      	bne.n	8003b6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b20      	cmp	r3, #32
 8003b5c:	d107      	bne.n	8003b6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f06f 0220 	mvn.w	r2, #32
 8003b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f891 	bl	8003c90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a2a      	ldr	r2, [pc, #168]	; (8003c84 <TIM_Base_SetConfig+0xbc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d003      	beq.n	8003be8 <TIM_Base_SetConfig+0x20>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be6:	d108      	bne.n	8003bfa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a21      	ldr	r2, [pc, #132]	; (8003c84 <TIM_Base_SetConfig+0xbc>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00b      	beq.n	8003c1a <TIM_Base_SetConfig+0x52>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c08:	d007      	beq.n	8003c1a <TIM_Base_SetConfig+0x52>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a1e      	ldr	r2, [pc, #120]	; (8003c88 <TIM_Base_SetConfig+0xc0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d003      	beq.n	8003c1a <TIM_Base_SetConfig+0x52>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a1d      	ldr	r2, [pc, #116]	; (8003c8c <TIM_Base_SetConfig+0xc4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d108      	bne.n	8003c2c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a0c      	ldr	r2, [pc, #48]	; (8003c84 <TIM_Base_SetConfig+0xbc>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d007      	beq.n	8003c68 <TIM_Base_SetConfig+0xa0>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a0b      	ldr	r2, [pc, #44]	; (8003c88 <TIM_Base_SetConfig+0xc0>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d003      	beq.n	8003c68 <TIM_Base_SetConfig+0xa0>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a0a      	ldr	r2, [pc, #40]	; (8003c8c <TIM_Base_SetConfig+0xc4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d103      	bne.n	8003c70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	615a      	str	r2, [r3, #20]
}
 8003c76:	bf00      	nop
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40012c00 	.word	0x40012c00
 8003c88:	40014400 	.word	0x40014400
 8003c8c:	40014800 	.word	0x40014800

08003c90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <__NVIC_SetPriority>:
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	6039      	str	r1, [r7, #0]
 8003cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	db0a      	blt.n	8003cf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	490c      	ldr	r1, [pc, #48]	; (8003d18 <__NVIC_SetPriority+0x4c>)
 8003ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cea:	0112      	lsls	r2, r2, #4
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	440b      	add	r3, r1
 8003cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003cf4:	e00a      	b.n	8003d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	4908      	ldr	r1, [pc, #32]	; (8003d1c <__NVIC_SetPriority+0x50>)
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	3b04      	subs	r3, #4
 8003d04:	0112      	lsls	r2, r2, #4
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	440b      	add	r3, r1
 8003d0a:	761a      	strb	r2, [r3, #24]
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	e000e100 	.word	0xe000e100
 8003d1c:	e000ed00 	.word	0xe000ed00

08003d20 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <SysTick_Handler+0x1c>)
 8003d26:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003d28:	f001 fd28 	bl	800577c <xTaskGetSchedulerState>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d001      	beq.n	8003d36 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003d32:	f002 fb11 	bl	8006358 <xPortSysTickHandler>
  }
}
 8003d36:	bf00      	nop
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	e000e010 	.word	0xe000e010

08003d40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003d44:	2100      	movs	r1, #0
 8003d46:	f06f 0004 	mvn.w	r0, #4
 8003d4a:	f7ff ffbf 	bl	8003ccc <__NVIC_SetPriority>
#endif
}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d5a:	f3ef 8305 	mrs	r3, IPSR
 8003d5e:	603b      	str	r3, [r7, #0]
  return(result);
 8003d60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003d66:	f06f 0305 	mvn.w	r3, #5
 8003d6a:	607b      	str	r3, [r7, #4]
 8003d6c:	e00c      	b.n	8003d88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003d6e:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <osKernelInitialize+0x44>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d105      	bne.n	8003d82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003d76:	4b08      	ldr	r3, [pc, #32]	; (8003d98 <osKernelInitialize+0x44>)
 8003d78:	2201      	movs	r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	607b      	str	r3, [r7, #4]
 8003d80:	e002      	b.n	8003d88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003d82:	f04f 33ff 	mov.w	r3, #4294967295
 8003d86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003d88:	687b      	ldr	r3, [r7, #4]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	2000017c 	.word	0x2000017c

08003d9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003da2:	f3ef 8305 	mrs	r3, IPSR
 8003da6:	603b      	str	r3, [r7, #0]
  return(result);
 8003da8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003dae:	f06f 0305 	mvn.w	r3, #5
 8003db2:	607b      	str	r3, [r7, #4]
 8003db4:	e010      	b.n	8003dd8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003db6:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <osKernelStart+0x48>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d109      	bne.n	8003dd2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003dbe:	f7ff ffbf 	bl	8003d40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003dc2:	4b08      	ldr	r3, [pc, #32]	; (8003de4 <osKernelStart+0x48>)
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003dc8:	f001 f87c 	bl	8004ec4 <vTaskStartScheduler>
      stat = osOK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	607b      	str	r3, [r7, #4]
 8003dd0:	e002      	b.n	8003dd8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003dd8:	687b      	ldr	r3, [r7, #4]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	2000017c 	.word	0x2000017c

08003de8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08e      	sub	sp, #56	; 0x38
 8003dec:	af04      	add	r7, sp, #16
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003df8:	f3ef 8305 	mrs	r3, IPSR
 8003dfc:	617b      	str	r3, [r7, #20]
  return(result);
 8003dfe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d17e      	bne.n	8003f02 <osThreadNew+0x11a>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d07b      	beq.n	8003f02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003e0a:	2380      	movs	r3, #128	; 0x80
 8003e0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003e0e:	2318      	movs	r3, #24
 8003e10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003e16:	f04f 33ff 	mov.w	r3, #4294967295
 8003e1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d045      	beq.n	8003eae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <osThreadNew+0x48>
        name = attr->name;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <osThreadNew+0x6e>
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	2b38      	cmp	r3, #56	; 0x38
 8003e48:	d805      	bhi.n	8003e56 <osThreadNew+0x6e>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <osThreadNew+0x72>
        return (NULL);
 8003e56:	2300      	movs	r3, #0
 8003e58:	e054      	b.n	8003f04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	089b      	lsrs	r3, r3, #2
 8003e68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00e      	beq.n	8003e90 <osThreadNew+0xa8>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	2bbb      	cmp	r3, #187	; 0xbb
 8003e78:	d90a      	bls.n	8003e90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d006      	beq.n	8003e90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <osThreadNew+0xa8>
        mem = 1;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	61bb      	str	r3, [r7, #24]
 8003e8e:	e010      	b.n	8003eb2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10c      	bne.n	8003eb2 <osThreadNew+0xca>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d108      	bne.n	8003eb2 <osThreadNew+0xca>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d104      	bne.n	8003eb2 <osThreadNew+0xca>
          mem = 0;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61bb      	str	r3, [r7, #24]
 8003eac:	e001      	b.n	8003eb2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d110      	bne.n	8003eda <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ec0:	9202      	str	r2, [sp, #8]
 8003ec2:	9301      	str	r3, [sp, #4]
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	6a3a      	ldr	r2, [r7, #32]
 8003ecc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 fe0c 	bl	8004aec <xTaskCreateStatic>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	613b      	str	r3, [r7, #16]
 8003ed8:	e013      	b.n	8003f02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d110      	bne.n	8003f02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	f107 0310 	add.w	r3, r7, #16
 8003ee8:	9301      	str	r3, [sp, #4]
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 fe57 	bl	8004ba6 <xTaskCreate>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d001      	beq.n	8003f02 <osThreadNew+0x11a>
            hTask = NULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003f02:	693b      	ldr	r3, [r7, #16]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3728      	adds	r7, #40	; 0x28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f14:	f3ef 8305 	mrs	r3, IPSR
 8003f18:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <osDelay+0x1c>
    stat = osErrorISR;
 8003f20:	f06f 0305 	mvn.w	r3, #5
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	e007      	b.n	8003f38 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 ff92 	bl	8004e5c <vTaskDelay>
    }
  }

  return (stat);
 8003f38:	68fb      	ldr	r3, [r7, #12]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4a07      	ldr	r2, [pc, #28]	; (8003f70 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	4a06      	ldr	r2, [pc, #24]	; (8003f74 <vApplicationGetIdleTaskMemory+0x30>)
 8003f5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2280      	movs	r2, #128	; 0x80
 8003f60:	601a      	str	r2, [r3, #0]
}
 8003f62:	bf00      	nop
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000180 	.word	0x20000180
 8003f74:	2000023c 	.word	0x2000023c

08003f78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4a07      	ldr	r2, [pc, #28]	; (8003fa4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003f88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	4a06      	ldr	r2, [pc, #24]	; (8003fa8 <vApplicationGetTimerTaskMemory+0x30>)
 8003f8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f96:	601a      	str	r2, [r3, #0]
}
 8003f98:	bf00      	nop
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	2000043c 	.word	0x2000043c
 8003fa8:	200004f8 	.word	0x200004f8

08003fac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f103 0208 	add.w	r2, r3, #8
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f103 0208 	add.w	r2, r3, #8
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f103 0208 	add.w	r2, r3, #8
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004006:	b480      	push	{r7}
 8004008:	b085      	sub	sp, #20
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	601a      	str	r2, [r3, #0]
}
 8004042:	bf00      	nop
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800404e:	b480      	push	{r7}
 8004050:	b085      	sub	sp, #20
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004064:	d103      	bne.n	800406e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	e00c      	b.n	8004088 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3308      	adds	r3, #8
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	e002      	b.n	800407c <vListInsert+0x2e>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	429a      	cmp	r2, r3
 8004086:	d2f6      	bcs.n	8004076 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	601a      	str	r2, [r3, #0]
}
 80040b4:	bf00      	nop
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6892      	ldr	r2, [r2, #8]
 80040d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6852      	ldr	r2, [r2, #4]
 80040e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d103      	bne.n	80040f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	1e5a      	subs	r2, r3, #1
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10a      	bne.n	800413e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800413a:	bf00      	nop
 800413c:	e7fe      	b.n	800413c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800413e:	f002 f879 	bl	8006234 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414a:	68f9      	ldr	r1, [r7, #12]
 800414c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800414e:	fb01 f303 	mul.w	r3, r1, r3
 8004152:	441a      	add	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416e:	3b01      	subs	r3, #1
 8004170:	68f9      	ldr	r1, [r7, #12]
 8004172:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004174:	fb01 f303 	mul.w	r3, r1, r3
 8004178:	441a      	add	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	22ff      	movs	r2, #255	; 0xff
 8004182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	22ff      	movs	r2, #255	; 0xff
 800418a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d114      	bne.n	80041be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01a      	beq.n	80041d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3310      	adds	r3, #16
 80041a0:	4618      	mov	r0, r3
 80041a2:	f001 f929 	bl	80053f8 <xTaskRemoveFromEventList>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d012      	beq.n	80041d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041ac:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <xQueueGenericReset+0xcc>)
 80041ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	e009      	b.n	80041d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3310      	adds	r3, #16
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff fef2 	bl	8003fac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3324      	adds	r3, #36	; 0x24
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff feed 	bl	8003fac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041d2:	f002 f85f 	bl	8006294 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041d6:	2301      	movs	r3, #1
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	e000ed04 	.word	0xe000ed04

080041e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08e      	sub	sp, #56	; 0x38
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800420a:	bf00      	nop
 800420c:	e7fe      	b.n	800420c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004226:	bf00      	nop
 8004228:	e7fe      	b.n	8004228 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <xQueueGenericCreateStatic+0x52>
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <xQueueGenericCreateStatic+0x56>
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <xQueueGenericCreateStatic+0x58>
 800423a:	2300      	movs	r3, #0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10a      	bne.n	8004256 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	623b      	str	r3, [r7, #32]
}
 8004252:	bf00      	nop
 8004254:	e7fe      	b.n	8004254 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d102      	bne.n	8004262 <xQueueGenericCreateStatic+0x7e>
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <xQueueGenericCreateStatic+0x82>
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <xQueueGenericCreateStatic+0x84>
 8004266:	2300      	movs	r3, #0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10a      	bne.n	8004282 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	61fb      	str	r3, [r7, #28]
}
 800427e:	bf00      	nop
 8004280:	e7fe      	b.n	8004280 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004282:	2350      	movs	r3, #80	; 0x50
 8004284:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2b50      	cmp	r3, #80	; 0x50
 800428a:	d00a      	beq.n	80042a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800428c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	61bb      	str	r3, [r7, #24]
}
 800429e:	bf00      	nop
 80042a0:	e7fe      	b.n	80042a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80042a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80042a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00d      	beq.n	80042ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80042ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80042ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	4613      	mov	r3, r2
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	68b9      	ldr	r1, [r7, #8]
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 f805 	bl	80042d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80042ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3730      	adds	r7, #48	; 0x30
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d103      	bne.n	80042f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	e002      	b.n	80042f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004302:	2101      	movs	r1, #1
 8004304:	69b8      	ldr	r0, [r7, #24]
 8004306:	f7ff ff05 	bl	8004114 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004312:	bf00      	nop
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08e      	sub	sp, #56	; 0x38
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800432a:	2300      	movs	r3, #0
 800432c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <xQueueGenericSend+0x32>
	__asm volatile
 8004338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800434a:	bf00      	nop
 800434c:	e7fe      	b.n	800434c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d103      	bne.n	800435c <xQueueGenericSend+0x40>
 8004354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <xQueueGenericSend+0x44>
 800435c:	2301      	movs	r3, #1
 800435e:	e000      	b.n	8004362 <xQueueGenericSend+0x46>
 8004360:	2300      	movs	r3, #0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10a      	bne.n	800437c <xQueueGenericSend+0x60>
	__asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004378:	bf00      	nop
 800437a:	e7fe      	b.n	800437a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d103      	bne.n	800438a <xQueueGenericSend+0x6e>
 8004382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004386:	2b01      	cmp	r3, #1
 8004388:	d101      	bne.n	800438e <xQueueGenericSend+0x72>
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <xQueueGenericSend+0x74>
 800438e:	2300      	movs	r3, #0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10a      	bne.n	80043aa <xQueueGenericSend+0x8e>
	__asm volatile
 8004394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004398:	f383 8811 	msr	BASEPRI, r3
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	623b      	str	r3, [r7, #32]
}
 80043a6:	bf00      	nop
 80043a8:	e7fe      	b.n	80043a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043aa:	f001 f9e7 	bl	800577c <xTaskGetSchedulerState>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d102      	bne.n	80043ba <xQueueGenericSend+0x9e>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <xQueueGenericSend+0xa2>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <xQueueGenericSend+0xa4>
 80043be:	2300      	movs	r3, #0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10a      	bne.n	80043da <xQueueGenericSend+0xbe>
	__asm volatile
 80043c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c8:	f383 8811 	msr	BASEPRI, r3
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	61fb      	str	r3, [r7, #28]
}
 80043d6:	bf00      	nop
 80043d8:	e7fe      	b.n	80043d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043da:	f001 ff2b 	bl	8006234 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d302      	bcc.n	80043f0 <xQueueGenericSend+0xd4>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d129      	bne.n	8004444 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	68b9      	ldr	r1, [r7, #8]
 80043f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043f6:	f000 fa0b 	bl	8004810 <prvCopyDataToQueue>
 80043fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	2b00      	cmp	r3, #0
 8004402:	d010      	beq.n	8004426 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004406:	3324      	adds	r3, #36	; 0x24
 8004408:	4618      	mov	r0, r3
 800440a:	f000 fff5 	bl	80053f8 <xTaskRemoveFromEventList>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d013      	beq.n	800443c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004414:	4b3f      	ldr	r3, [pc, #252]	; (8004514 <xQueueGenericSend+0x1f8>)
 8004416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	e00a      	b.n	800443c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d007      	beq.n	800443c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800442c:	4b39      	ldr	r3, [pc, #228]	; (8004514 <xQueueGenericSend+0x1f8>)
 800442e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800443c:	f001 ff2a 	bl	8006294 <vPortExitCritical>
				return pdPASS;
 8004440:	2301      	movs	r3, #1
 8004442:	e063      	b.n	800450c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d103      	bne.n	8004452 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800444a:	f001 ff23 	bl	8006294 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800444e:	2300      	movs	r3, #0
 8004450:	e05c      	b.n	800450c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004454:	2b00      	cmp	r3, #0
 8004456:	d106      	bne.n	8004466 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004458:	f107 0314 	add.w	r3, r7, #20
 800445c:	4618      	mov	r0, r3
 800445e:	f001 f82f 	bl	80054c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004462:	2301      	movs	r3, #1
 8004464:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004466:	f001 ff15 	bl	8006294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800446a:	f000 fd9b 	bl	8004fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800446e:	f001 fee1 	bl	8006234 <vPortEnterCritical>
 8004472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004474:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004478:	b25b      	sxtb	r3, r3
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447e:	d103      	bne.n	8004488 <xQueueGenericSend+0x16c>
 8004480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800448e:	b25b      	sxtb	r3, r3
 8004490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004494:	d103      	bne.n	800449e <xQueueGenericSend+0x182>
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800449e:	f001 fef9 	bl	8006294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044a2:	1d3a      	adds	r2, r7, #4
 80044a4:	f107 0314 	add.w	r3, r7, #20
 80044a8:	4611      	mov	r1, r2
 80044aa:	4618      	mov	r0, r3
 80044ac:	f001 f81e 	bl	80054ec <xTaskCheckForTimeOut>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d124      	bne.n	8004500 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80044b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044b8:	f000 faa2 	bl	8004a00 <prvIsQueueFull>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d018      	beq.n	80044f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	3310      	adds	r3, #16
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	4611      	mov	r1, r2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 ff44 	bl	8005358 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80044d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044d2:	f000 fa2d 	bl	8004930 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80044d6:	f000 fd73 	bl	8004fc0 <xTaskResumeAll>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f47f af7c 	bne.w	80043da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80044e2:	4b0c      	ldr	r3, [pc, #48]	; (8004514 <xQueueGenericSend+0x1f8>)
 80044e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	e772      	b.n	80043da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80044f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044f6:	f000 fa1b 	bl	8004930 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044fa:	f000 fd61 	bl	8004fc0 <xTaskResumeAll>
 80044fe:	e76c      	b.n	80043da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004502:	f000 fa15 	bl	8004930 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004506:	f000 fd5b 	bl	8004fc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800450a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800450c:	4618      	mov	r0, r3
 800450e:	3738      	adds	r7, #56	; 0x38
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	e000ed04 	.word	0xe000ed04

08004518 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b090      	sub	sp, #64	; 0x40
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800452a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10a      	bne.n	8004546 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004542:	bf00      	nop
 8004544:	e7fe      	b.n	8004544 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d103      	bne.n	8004554 <xQueueGenericSendFromISR+0x3c>
 800454c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <xQueueGenericSendFromISR+0x40>
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <xQueueGenericSendFromISR+0x42>
 8004558:	2300      	movs	r3, #0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10a      	bne.n	8004574 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800455e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004570:	bf00      	nop
 8004572:	e7fe      	b.n	8004572 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d103      	bne.n	8004582 <xQueueGenericSendFromISR+0x6a>
 800457a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <xQueueGenericSendFromISR+0x6e>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <xQueueGenericSendFromISR+0x70>
 8004586:	2300      	movs	r3, #0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	623b      	str	r3, [r7, #32]
}
 800459e:	bf00      	nop
 80045a0:	e7fe      	b.n	80045a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045a2:	f001 ff29 	bl	80063f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80045a6:	f3ef 8211 	mrs	r2, BASEPRI
 80045aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	61fa      	str	r2, [r7, #28]
 80045bc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d302      	bcc.n	80045d4 <xQueueGenericSendFromISR+0xbc>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d12f      	bne.n	8004634 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80045d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80045ea:	f000 f911 	bl	8004810 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80045ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80045f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f6:	d112      	bne.n	800461e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d016      	beq.n	800462e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004602:	3324      	adds	r3, #36	; 0x24
 8004604:	4618      	mov	r0, r3
 8004606:	f000 fef7 	bl	80053f8 <xTaskRemoveFromEventList>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00e      	beq.n	800462e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00b      	beq.n	800462e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	e007      	b.n	800462e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800461e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004622:	3301      	adds	r3, #1
 8004624:	b2db      	uxtb	r3, r3
 8004626:	b25a      	sxtb	r2, r3
 8004628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800462e:	2301      	movs	r3, #1
 8004630:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004632:	e001      	b.n	8004638 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004634:	2300      	movs	r3, #0
 8004636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004642:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004646:	4618      	mov	r0, r3
 8004648:	3740      	adds	r7, #64	; 0x40
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08c      	sub	sp, #48	; 0x30
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800465c:	2300      	movs	r3, #0
 800465e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10a      	bne.n	8004680 <xQueueReceive+0x30>
	__asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	623b      	str	r3, [r7, #32]
}
 800467c:	bf00      	nop
 800467e:	e7fe      	b.n	800467e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d103      	bne.n	800468e <xQueueReceive+0x3e>
 8004686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <xQueueReceive+0x42>
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <xQueueReceive+0x44>
 8004692:	2300      	movs	r3, #0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10a      	bne.n	80046ae <xQueueReceive+0x5e>
	__asm volatile
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	61fb      	str	r3, [r7, #28]
}
 80046aa:	bf00      	nop
 80046ac:	e7fe      	b.n	80046ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046ae:	f001 f865 	bl	800577c <xTaskGetSchedulerState>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d102      	bne.n	80046be <xQueueReceive+0x6e>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <xQueueReceive+0x72>
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <xQueueReceive+0x74>
 80046c2:	2300      	movs	r3, #0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10a      	bne.n	80046de <xQueueReceive+0x8e>
	__asm volatile
 80046c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046cc:	f383 8811 	msr	BASEPRI, r3
 80046d0:	f3bf 8f6f 	isb	sy
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	61bb      	str	r3, [r7, #24]
}
 80046da:	bf00      	nop
 80046dc:	e7fe      	b.n	80046dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046de:	f001 fda9 	bl	8006234 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d01f      	beq.n	800472e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046f2:	f000 f8f7 	bl	80048e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	1e5a      	subs	r2, r3, #1
 80046fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00f      	beq.n	8004726 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004708:	3310      	adds	r3, #16
 800470a:	4618      	mov	r0, r3
 800470c:	f000 fe74 	bl	80053f8 <xTaskRemoveFromEventList>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d007      	beq.n	8004726 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004716:	4b3d      	ldr	r3, [pc, #244]	; (800480c <xQueueReceive+0x1bc>)
 8004718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004726:	f001 fdb5 	bl	8006294 <vPortExitCritical>
				return pdPASS;
 800472a:	2301      	movs	r3, #1
 800472c:	e069      	b.n	8004802 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d103      	bne.n	800473c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004734:	f001 fdae 	bl	8006294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004738:	2300      	movs	r3, #0
 800473a:	e062      	b.n	8004802 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800473c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004742:	f107 0310 	add.w	r3, r7, #16
 8004746:	4618      	mov	r0, r3
 8004748:	f000 feba 	bl	80054c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800474c:	2301      	movs	r3, #1
 800474e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004750:	f001 fda0 	bl	8006294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004754:	f000 fc26 	bl	8004fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004758:	f001 fd6c 	bl	8006234 <vPortEnterCritical>
 800475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004762:	b25b      	sxtb	r3, r3
 8004764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004768:	d103      	bne.n	8004772 <xQueueReceive+0x122>
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004774:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004778:	b25b      	sxtb	r3, r3
 800477a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477e:	d103      	bne.n	8004788 <xQueueReceive+0x138>
 8004780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004788:	f001 fd84 	bl	8006294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800478c:	1d3a      	adds	r2, r7, #4
 800478e:	f107 0310 	add.w	r3, r7, #16
 8004792:	4611      	mov	r1, r2
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fea9 	bl	80054ec <xTaskCheckForTimeOut>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d123      	bne.n	80047e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047a2:	f000 f917 	bl	80049d4 <prvIsQueueEmpty>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d017      	beq.n	80047dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ae:	3324      	adds	r3, #36	; 0x24
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	4611      	mov	r1, r2
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fdcf 	bl	8005358 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047bc:	f000 f8b8 	bl	8004930 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047c0:	f000 fbfe 	bl	8004fc0 <xTaskResumeAll>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d189      	bne.n	80046de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80047ca:	4b10      	ldr	r3, [pc, #64]	; (800480c <xQueueReceive+0x1bc>)
 80047cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	e780      	b.n	80046de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80047dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047de:	f000 f8a7 	bl	8004930 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047e2:	f000 fbed 	bl	8004fc0 <xTaskResumeAll>
 80047e6:	e77a      	b.n	80046de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80047e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047ea:	f000 f8a1 	bl	8004930 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047ee:	f000 fbe7 	bl	8004fc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047f4:	f000 f8ee 	bl	80049d4 <prvIsQueueEmpty>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f43f af6f 	beq.w	80046de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004800:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004802:	4618      	mov	r0, r3
 8004804:	3730      	adds	r7, #48	; 0x30
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	e000ed04 	.word	0xe000ed04

08004810 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10d      	bne.n	800484a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d14d      	bne.n	80048d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	4618      	mov	r0, r3
 800483c:	f000 ffbc 	bl	80057b8 <xTaskPriorityDisinherit>
 8004840:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	609a      	str	r2, [r3, #8]
 8004848:	e043      	b.n	80048d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d119      	bne.n	8004884 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6858      	ldr	r0, [r3, #4]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	461a      	mov	r2, r3
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	f002 f919 	bl	8006a92 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	441a      	add	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	429a      	cmp	r2, r3
 8004878:	d32b      	bcc.n	80048d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	605a      	str	r2, [r3, #4]
 8004882:	e026      	b.n	80048d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	68d8      	ldr	r0, [r3, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	461a      	mov	r2, r3
 800488e:	68b9      	ldr	r1, [r7, #8]
 8004890:	f002 f8ff 	bl	8006a92 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	425b      	negs	r3, r3
 800489e:	441a      	add	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d207      	bcs.n	80048c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	425b      	negs	r3, r3
 80048ba:	441a      	add	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d105      	bne.n	80048d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80048da:	697b      	ldr	r3, [r7, #20]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d018      	beq.n	8004928 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	441a      	add	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	429a      	cmp	r2, r3
 800490e:	d303      	bcc.n	8004918 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68d9      	ldr	r1, [r3, #12]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004920:	461a      	mov	r2, r3
 8004922:	6838      	ldr	r0, [r7, #0]
 8004924:	f002 f8b5 	bl	8006a92 <memcpy>
	}
}
 8004928:	bf00      	nop
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004938:	f001 fc7c 	bl	8006234 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004942:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004944:	e011      	b.n	800496a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	2b00      	cmp	r3, #0
 800494c:	d012      	beq.n	8004974 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3324      	adds	r3, #36	; 0x24
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fd50 	bl	80053f8 <xTaskRemoveFromEventList>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800495e:	f000 fe27 	bl	80055b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004962:	7bfb      	ldrb	r3, [r7, #15]
 8004964:	3b01      	subs	r3, #1
 8004966:	b2db      	uxtb	r3, r3
 8004968:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800496a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800496e:	2b00      	cmp	r3, #0
 8004970:	dce9      	bgt.n	8004946 <prvUnlockQueue+0x16>
 8004972:	e000      	b.n	8004976 <prvUnlockQueue+0x46>
					break;
 8004974:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	22ff      	movs	r2, #255	; 0xff
 800497a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800497e:	f001 fc89 	bl	8006294 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004982:	f001 fc57 	bl	8006234 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800498c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800498e:	e011      	b.n	80049b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d012      	beq.n	80049be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3310      	adds	r3, #16
 800499c:	4618      	mov	r0, r3
 800499e:	f000 fd2b 	bl	80053f8 <xTaskRemoveFromEventList>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049a8:	f000 fe02 	bl	80055b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049ac:	7bbb      	ldrb	r3, [r7, #14]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	dce9      	bgt.n	8004990 <prvUnlockQueue+0x60>
 80049bc:	e000      	b.n	80049c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	22ff      	movs	r2, #255	; 0xff
 80049c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80049c8:	f001 fc64 	bl	8006294 <vPortExitCritical>
}
 80049cc:	bf00      	nop
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049dc:	f001 fc2a 	bl	8006234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d102      	bne.n	80049ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80049e8:	2301      	movs	r3, #1
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	e001      	b.n	80049f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049f2:	f001 fc4f 	bl	8006294 <vPortExitCritical>

	return xReturn;
 80049f6:	68fb      	ldr	r3, [r7, #12]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a08:	f001 fc14 	bl	8006234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d102      	bne.n	8004a1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	e001      	b.n	8004a22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a22:	f001 fc37 	bl	8006294 <vPortExitCritical>

	return xReturn;
 8004a26:	68fb      	ldr	r3, [r7, #12]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	e014      	b.n	8004a6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a40:	4a0f      	ldr	r2, [pc, #60]	; (8004a80 <vQueueAddToRegistry+0x50>)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10b      	bne.n	8004a64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a4c:	490c      	ldr	r1, [pc, #48]	; (8004a80 <vQueueAddToRegistry+0x50>)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a56:	4a0a      	ldr	r2, [pc, #40]	; (8004a80 <vQueueAddToRegistry+0x50>)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a62:	e006      	b.n	8004a72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	3301      	adds	r3, #1
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b07      	cmp	r3, #7
 8004a6e:	d9e7      	bls.n	8004a40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a70:	bf00      	nop
 8004a72:	bf00      	nop
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	200008f8 	.word	0x200008f8

08004a84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a94:	f001 fbce 	bl	8006234 <vPortEnterCritical>
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a9e:	b25b      	sxtb	r3, r3
 8004aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa4:	d103      	bne.n	8004aae <vQueueWaitForMessageRestricted+0x2a>
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ab4:	b25b      	sxtb	r3, r3
 8004ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aba:	d103      	bne.n	8004ac4 <vQueueWaitForMessageRestricted+0x40>
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ac4:	f001 fbe6 	bl	8006294 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d106      	bne.n	8004ade <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	3324      	adds	r3, #36	; 0x24
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 fc61 	bl	80053a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ade:	6978      	ldr	r0, [r7, #20]
 8004ae0:	f7ff ff26 	bl	8004930 <prvUnlockQueue>
	}
 8004ae4:	bf00      	nop
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08e      	sub	sp, #56	; 0x38
 8004af0:	af04      	add	r7, sp, #16
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10a      	bne.n	8004b16 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	623b      	str	r3, [r7, #32]
}
 8004b12:	bf00      	nop
 8004b14:	e7fe      	b.n	8004b14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10a      	bne.n	8004b32 <xTaskCreateStatic+0x46>
	__asm volatile
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	61fb      	str	r3, [r7, #28]
}
 8004b2e:	bf00      	nop
 8004b30:	e7fe      	b.n	8004b30 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b32:	23bc      	movs	r3, #188	; 0xbc
 8004b34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2bbc      	cmp	r3, #188	; 0xbc
 8004b3a:	d00a      	beq.n	8004b52 <xTaskCreateStatic+0x66>
	__asm volatile
 8004b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	61bb      	str	r3, [r7, #24]
}
 8004b4e:	bf00      	nop
 8004b50:	e7fe      	b.n	8004b50 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b52:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d01e      	beq.n	8004b98 <xTaskCreateStatic+0xac>
 8004b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01b      	beq.n	8004b98 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b62:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b68:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b72:	2300      	movs	r3, #0
 8004b74:	9303      	str	r3, [sp, #12]
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	9302      	str	r3, [sp, #8]
 8004b7a:	f107 0314 	add.w	r3, r7, #20
 8004b7e:	9301      	str	r3, [sp, #4]
 8004b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	68b9      	ldr	r1, [r7, #8]
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 f850 	bl	8004c30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b92:	f000 f8f3 	bl	8004d7c <prvAddNewTaskToReadyList>
 8004b96:	e001      	b.n	8004b9c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b9c:	697b      	ldr	r3, [r7, #20]
	}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3728      	adds	r7, #40	; 0x28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b08c      	sub	sp, #48	; 0x30
 8004baa:	af04      	add	r7, sp, #16
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	603b      	str	r3, [r7, #0]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004bb6:	88fb      	ldrh	r3, [r7, #6]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f001 fc5c 	bl	8006478 <pvPortMalloc>
 8004bc0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00e      	beq.n	8004be6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004bc8:	20bc      	movs	r0, #188	; 0xbc
 8004bca:	f001 fc55 	bl	8006478 <pvPortMalloc>
 8004bce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	631a      	str	r2, [r3, #48]	; 0x30
 8004bdc:	e005      	b.n	8004bea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004bde:	6978      	ldr	r0, [r7, #20]
 8004be0:	f001 fd16 	bl	8006610 <vPortFree>
 8004be4:	e001      	b.n	8004bea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d017      	beq.n	8004c20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004bf8:	88fa      	ldrh	r2, [r7, #6]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	9303      	str	r3, [sp, #12]
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	9302      	str	r3, [sp, #8]
 8004c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c04:	9301      	str	r3, [sp, #4]
 8004c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68b9      	ldr	r1, [r7, #8]
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 f80e 	bl	8004c30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c14:	69f8      	ldr	r0, [r7, #28]
 8004c16:	f000 f8b1 	bl	8004d7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	61bb      	str	r3, [r7, #24]
 8004c1e:	e002      	b.n	8004c26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c20:	f04f 33ff 	mov.w	r3, #4294967295
 8004c24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c26:	69bb      	ldr	r3, [r7, #24]
	}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3720      	adds	r7, #32
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b088      	sub	sp, #32
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	461a      	mov	r2, r3
 8004c48:	21a5      	movs	r1, #165	; 0xa5
 8004c4a:	f001 ff30 	bl	8006aae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	f023 0307 	bic.w	r3, r3, #7
 8004c66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	617b      	str	r3, [r7, #20]
}
 8004c84:	bf00      	nop
 8004c86:	e7fe      	b.n	8004c86 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d01f      	beq.n	8004cce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61fb      	str	r3, [r7, #28]
 8004c92:	e012      	b.n	8004cba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	4413      	add	r3, r2
 8004c9a:	7819      	ldrb	r1, [r3, #0]
 8004c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	3334      	adds	r3, #52	; 0x34
 8004ca4:	460a      	mov	r2, r1
 8004ca6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	4413      	add	r3, r2
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d006      	beq.n	8004cc2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	61fb      	str	r3, [r7, #28]
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	2b0f      	cmp	r3, #15
 8004cbe:	d9e9      	bls.n	8004c94 <prvInitialiseNewTask+0x64>
 8004cc0:	e000      	b.n	8004cc4 <prvInitialiseNewTask+0x94>
			{
				break;
 8004cc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ccc:	e003      	b.n	8004cd6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd8:	2b37      	cmp	r3, #55	; 0x37
 8004cda:	d901      	bls.n	8004ce0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004cdc:	2337      	movs	r3, #55	; 0x37
 8004cde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ce4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cee:	2200      	movs	r2, #0
 8004cf0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff f978 	bl	8003fec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfe:	3318      	adds	r3, #24
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff f973 	bl	8003fec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2e:	3354      	adds	r3, #84	; 0x54
 8004d30:	2260      	movs	r2, #96	; 0x60
 8004d32:	2100      	movs	r1, #0
 8004d34:	4618      	mov	r0, r3
 8004d36:	f001 feba 	bl	8006aae <memset>
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	4a0c      	ldr	r2, [pc, #48]	; (8004d70 <prvInitialiseNewTask+0x140>)
 8004d3e:	659a      	str	r2, [r3, #88]	; 0x58
 8004d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d42:	4a0c      	ldr	r2, [pc, #48]	; (8004d74 <prvInitialiseNewTask+0x144>)
 8004d44:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	4a0b      	ldr	r2, [pc, #44]	; (8004d78 <prvInitialiseNewTask+0x148>)
 8004d4a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	68f9      	ldr	r1, [r7, #12]
 8004d50:	69b8      	ldr	r0, [r7, #24]
 8004d52:	f001 f941 	bl	8005fd8 <pxPortInitialiseStack>
 8004d56:	4602      	mov	r2, r0
 8004d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d68:	bf00      	nop
 8004d6a:	3720      	adds	r7, #32
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	0800760c 	.word	0x0800760c
 8004d74:	0800762c 	.word	0x0800762c
 8004d78:	080075ec 	.word	0x080075ec

08004d7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d84:	f001 fa56 	bl	8006234 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d88:	4b2d      	ldr	r3, [pc, #180]	; (8004e40 <prvAddNewTaskToReadyList+0xc4>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	4a2c      	ldr	r2, [pc, #176]	; (8004e40 <prvAddNewTaskToReadyList+0xc4>)
 8004d90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d92:	4b2c      	ldr	r3, [pc, #176]	; (8004e44 <prvAddNewTaskToReadyList+0xc8>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d109      	bne.n	8004dae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d9a:	4a2a      	ldr	r2, [pc, #168]	; (8004e44 <prvAddNewTaskToReadyList+0xc8>)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004da0:	4b27      	ldr	r3, [pc, #156]	; (8004e40 <prvAddNewTaskToReadyList+0xc4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d110      	bne.n	8004dca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004da8:	f000 fc26 	bl	80055f8 <prvInitialiseTaskLists>
 8004dac:	e00d      	b.n	8004dca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004dae:	4b26      	ldr	r3, [pc, #152]	; (8004e48 <prvAddNewTaskToReadyList+0xcc>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d109      	bne.n	8004dca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004db6:	4b23      	ldr	r3, [pc, #140]	; (8004e44 <prvAddNewTaskToReadyList+0xc8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d802      	bhi.n	8004dca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004dc4:	4a1f      	ldr	r2, [pc, #124]	; (8004e44 <prvAddNewTaskToReadyList+0xc8>)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004dca:	4b20      	ldr	r3, [pc, #128]	; (8004e4c <prvAddNewTaskToReadyList+0xd0>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	4a1e      	ldr	r2, [pc, #120]	; (8004e4c <prvAddNewTaskToReadyList+0xd0>)
 8004dd2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004dd4:	4b1d      	ldr	r3, [pc, #116]	; (8004e4c <prvAddNewTaskToReadyList+0xd0>)
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de0:	4b1b      	ldr	r3, [pc, #108]	; (8004e50 <prvAddNewTaskToReadyList+0xd4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d903      	bls.n	8004df0 <prvAddNewTaskToReadyList+0x74>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	4a18      	ldr	r2, [pc, #96]	; (8004e50 <prvAddNewTaskToReadyList+0xd4>)
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4a15      	ldr	r2, [pc, #84]	; (8004e54 <prvAddNewTaskToReadyList+0xd8>)
 8004dfe:	441a      	add	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3304      	adds	r3, #4
 8004e04:	4619      	mov	r1, r3
 8004e06:	4610      	mov	r0, r2
 8004e08:	f7ff f8fd 	bl	8004006 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e0c:	f001 fa42 	bl	8006294 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e10:	4b0d      	ldr	r3, [pc, #52]	; (8004e48 <prvAddNewTaskToReadyList+0xcc>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00e      	beq.n	8004e36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e18:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <prvAddNewTaskToReadyList+0xc8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d207      	bcs.n	8004e36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e26:	4b0c      	ldr	r3, [pc, #48]	; (8004e58 <prvAddNewTaskToReadyList+0xdc>)
 8004e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000e0c 	.word	0x20000e0c
 8004e44:	20000938 	.word	0x20000938
 8004e48:	20000e18 	.word	0x20000e18
 8004e4c:	20000e28 	.word	0x20000e28
 8004e50:	20000e14 	.word	0x20000e14
 8004e54:	2000093c 	.word	0x2000093c
 8004e58:	e000ed04 	.word	0xe000ed04

08004e5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d017      	beq.n	8004e9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e6e:	4b13      	ldr	r3, [pc, #76]	; (8004ebc <vTaskDelay+0x60>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00a      	beq.n	8004e8c <vTaskDelay+0x30>
	__asm volatile
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	60bb      	str	r3, [r7, #8]
}
 8004e88:	bf00      	nop
 8004e8a:	e7fe      	b.n	8004e8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e8c:	f000 f88a 	bl	8004fa4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e90:	2100      	movs	r1, #0
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fcfe 	bl	8005894 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e98:	f000 f892 	bl	8004fc0 <xTaskResumeAll>
 8004e9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d107      	bne.n	8004eb4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004ea4:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <vTaskDelay+0x64>)
 8004ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004eb4:	bf00      	nop
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000e34 	.word	0x20000e34
 8004ec0:	e000ed04 	.word	0xe000ed04

08004ec4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08a      	sub	sp, #40	; 0x28
 8004ec8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ed2:	463a      	mov	r2, r7
 8004ed4:	1d39      	adds	r1, r7, #4
 8004ed6:	f107 0308 	add.w	r3, r7, #8
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff f832 	bl	8003f44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ee0:	6839      	ldr	r1, [r7, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	9202      	str	r2, [sp, #8]
 8004ee8:	9301      	str	r3, [sp, #4]
 8004eea:	2300      	movs	r3, #0
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	460a      	mov	r2, r1
 8004ef2:	4924      	ldr	r1, [pc, #144]	; (8004f84 <vTaskStartScheduler+0xc0>)
 8004ef4:	4824      	ldr	r0, [pc, #144]	; (8004f88 <vTaskStartScheduler+0xc4>)
 8004ef6:	f7ff fdf9 	bl	8004aec <xTaskCreateStatic>
 8004efa:	4603      	mov	r3, r0
 8004efc:	4a23      	ldr	r2, [pc, #140]	; (8004f8c <vTaskStartScheduler+0xc8>)
 8004efe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f00:	4b22      	ldr	r3, [pc, #136]	; (8004f8c <vTaskStartScheduler+0xc8>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	e001      	b.n	8004f12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d102      	bne.n	8004f1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f18:	f000 fd10 	bl	800593c <xTimerCreateTimerTask>
 8004f1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d11b      	bne.n	8004f5c <vTaskStartScheduler+0x98>
	__asm volatile
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	613b      	str	r3, [r7, #16]
}
 8004f36:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f38:	4b15      	ldr	r3, [pc, #84]	; (8004f90 <vTaskStartScheduler+0xcc>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3354      	adds	r3, #84	; 0x54
 8004f3e:	4a15      	ldr	r2, [pc, #84]	; (8004f94 <vTaskStartScheduler+0xd0>)
 8004f40:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f42:	4b15      	ldr	r3, [pc, #84]	; (8004f98 <vTaskStartScheduler+0xd4>)
 8004f44:	f04f 32ff 	mov.w	r2, #4294967295
 8004f48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f4a:	4b14      	ldr	r3, [pc, #80]	; (8004f9c <vTaskStartScheduler+0xd8>)
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f50:	4b13      	ldr	r3, [pc, #76]	; (8004fa0 <vTaskStartScheduler+0xdc>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f56:	f001 f8cb 	bl	80060f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f5a:	e00e      	b.n	8004f7a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f62:	d10a      	bne.n	8004f7a <vTaskStartScheduler+0xb6>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	60fb      	str	r3, [r7, #12]
}
 8004f76:	bf00      	nop
 8004f78:	e7fe      	b.n	8004f78 <vTaskStartScheduler+0xb4>
}
 8004f7a:	bf00      	nop
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	080074ec 	.word	0x080074ec
 8004f88:	080055c9 	.word	0x080055c9
 8004f8c:	20000e30 	.word	0x20000e30
 8004f90:	20000938 	.word	0x20000938
 8004f94:	20000018 	.word	0x20000018
 8004f98:	20000e2c 	.word	0x20000e2c
 8004f9c:	20000e18 	.word	0x20000e18
 8004fa0:	20000e10 	.word	0x20000e10

08004fa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004fa8:	4b04      	ldr	r3, [pc, #16]	; (8004fbc <vTaskSuspendAll+0x18>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3301      	adds	r3, #1
 8004fae:	4a03      	ldr	r2, [pc, #12]	; (8004fbc <vTaskSuspendAll+0x18>)
 8004fb0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004fb2:	bf00      	nop
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	20000e34 	.word	0x20000e34

08004fc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004fce:	4b42      	ldr	r3, [pc, #264]	; (80050d8 <xTaskResumeAll+0x118>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10a      	bne.n	8004fec <xTaskResumeAll+0x2c>
	__asm volatile
 8004fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	603b      	str	r3, [r7, #0]
}
 8004fe8:	bf00      	nop
 8004fea:	e7fe      	b.n	8004fea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004fec:	f001 f922 	bl	8006234 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ff0:	4b39      	ldr	r3, [pc, #228]	; (80050d8 <xTaskResumeAll+0x118>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	4a38      	ldr	r2, [pc, #224]	; (80050d8 <xTaskResumeAll+0x118>)
 8004ff8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ffa:	4b37      	ldr	r3, [pc, #220]	; (80050d8 <xTaskResumeAll+0x118>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d162      	bne.n	80050c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005002:	4b36      	ldr	r3, [pc, #216]	; (80050dc <xTaskResumeAll+0x11c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d05e      	beq.n	80050c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800500a:	e02f      	b.n	800506c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800500c:	4b34      	ldr	r3, [pc, #208]	; (80050e0 <xTaskResumeAll+0x120>)
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	3318      	adds	r3, #24
 8005018:	4618      	mov	r0, r3
 800501a:	f7ff f851 	bl	80040c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	3304      	adds	r3, #4
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff f84c 	bl	80040c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502c:	4b2d      	ldr	r3, [pc, #180]	; (80050e4 <xTaskResumeAll+0x124>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d903      	bls.n	800503c <xTaskResumeAll+0x7c>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	4a2a      	ldr	r2, [pc, #168]	; (80050e4 <xTaskResumeAll+0x124>)
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005040:	4613      	mov	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4a27      	ldr	r2, [pc, #156]	; (80050e8 <xTaskResumeAll+0x128>)
 800504a:	441a      	add	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	3304      	adds	r3, #4
 8005050:	4619      	mov	r1, r3
 8005052:	4610      	mov	r0, r2
 8005054:	f7fe ffd7 	bl	8004006 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505c:	4b23      	ldr	r3, [pc, #140]	; (80050ec <xTaskResumeAll+0x12c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	429a      	cmp	r2, r3
 8005064:	d302      	bcc.n	800506c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005066:	4b22      	ldr	r3, [pc, #136]	; (80050f0 <xTaskResumeAll+0x130>)
 8005068:	2201      	movs	r2, #1
 800506a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800506c:	4b1c      	ldr	r3, [pc, #112]	; (80050e0 <xTaskResumeAll+0x120>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1cb      	bne.n	800500c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800507a:	f000 fb5f 	bl	800573c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800507e:	4b1d      	ldr	r3, [pc, #116]	; (80050f4 <xTaskResumeAll+0x134>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d010      	beq.n	80050ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800508a:	f000 f847 	bl	800511c <xTaskIncrementTick>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005094:	4b16      	ldr	r3, [pc, #88]	; (80050f0 <xTaskResumeAll+0x130>)
 8005096:	2201      	movs	r2, #1
 8005098:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3b01      	subs	r3, #1
 800509e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1f1      	bne.n	800508a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80050a6:	4b13      	ldr	r3, [pc, #76]	; (80050f4 <xTaskResumeAll+0x134>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050ac:	4b10      	ldr	r3, [pc, #64]	; (80050f0 <xTaskResumeAll+0x130>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d009      	beq.n	80050c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050b4:	2301      	movs	r3, #1
 80050b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050b8:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <xTaskResumeAll+0x138>)
 80050ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050c8:	f001 f8e4 	bl	8006294 <vPortExitCritical>

	return xAlreadyYielded;
 80050cc:	68bb      	ldr	r3, [r7, #8]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20000e34 	.word	0x20000e34
 80050dc:	20000e0c 	.word	0x20000e0c
 80050e0:	20000dcc 	.word	0x20000dcc
 80050e4:	20000e14 	.word	0x20000e14
 80050e8:	2000093c 	.word	0x2000093c
 80050ec:	20000938 	.word	0x20000938
 80050f0:	20000e20 	.word	0x20000e20
 80050f4:	20000e1c 	.word	0x20000e1c
 80050f8:	e000ed04 	.word	0xe000ed04

080050fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005102:	4b05      	ldr	r3, [pc, #20]	; (8005118 <xTaskGetTickCount+0x1c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005108:	687b      	ldr	r3, [r7, #4]
}
 800510a:	4618      	mov	r0, r3
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	20000e10 	.word	0x20000e10

0800511c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005126:	4b4f      	ldr	r3, [pc, #316]	; (8005264 <xTaskIncrementTick+0x148>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	f040 808f 	bne.w	800524e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005130:	4b4d      	ldr	r3, [pc, #308]	; (8005268 <xTaskIncrementTick+0x14c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3301      	adds	r3, #1
 8005136:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005138:	4a4b      	ldr	r2, [pc, #300]	; (8005268 <xTaskIncrementTick+0x14c>)
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d120      	bne.n	8005186 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005144:	4b49      	ldr	r3, [pc, #292]	; (800526c <xTaskIncrementTick+0x150>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <xTaskIncrementTick+0x48>
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	603b      	str	r3, [r7, #0]
}
 8005160:	bf00      	nop
 8005162:	e7fe      	b.n	8005162 <xTaskIncrementTick+0x46>
 8005164:	4b41      	ldr	r3, [pc, #260]	; (800526c <xTaskIncrementTick+0x150>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	4b41      	ldr	r3, [pc, #260]	; (8005270 <xTaskIncrementTick+0x154>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a3f      	ldr	r2, [pc, #252]	; (800526c <xTaskIncrementTick+0x150>)
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	4a3f      	ldr	r2, [pc, #252]	; (8005270 <xTaskIncrementTick+0x154>)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6013      	str	r3, [r2, #0]
 8005178:	4b3e      	ldr	r3, [pc, #248]	; (8005274 <xTaskIncrementTick+0x158>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3301      	adds	r3, #1
 800517e:	4a3d      	ldr	r2, [pc, #244]	; (8005274 <xTaskIncrementTick+0x158>)
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	f000 fadb 	bl	800573c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005186:	4b3c      	ldr	r3, [pc, #240]	; (8005278 <xTaskIncrementTick+0x15c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	429a      	cmp	r2, r3
 800518e:	d349      	bcc.n	8005224 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005190:	4b36      	ldr	r3, [pc, #216]	; (800526c <xTaskIncrementTick+0x150>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d104      	bne.n	80051a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800519a:	4b37      	ldr	r3, [pc, #220]	; (8005278 <xTaskIncrementTick+0x15c>)
 800519c:	f04f 32ff 	mov.w	r2, #4294967295
 80051a0:	601a      	str	r2, [r3, #0]
					break;
 80051a2:	e03f      	b.n	8005224 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051a4:	4b31      	ldr	r3, [pc, #196]	; (800526c <xTaskIncrementTick+0x150>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d203      	bcs.n	80051c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051bc:	4a2e      	ldr	r2, [pc, #184]	; (8005278 <xTaskIncrementTick+0x15c>)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80051c2:	e02f      	b.n	8005224 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	3304      	adds	r3, #4
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7fe ff79 	bl	80040c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d004      	beq.n	80051e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	3318      	adds	r3, #24
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fe ff70 	bl	80040c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e4:	4b25      	ldr	r3, [pc, #148]	; (800527c <xTaskIncrementTick+0x160>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d903      	bls.n	80051f4 <xTaskIncrementTick+0xd8>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	4a22      	ldr	r2, [pc, #136]	; (800527c <xTaskIncrementTick+0x160>)
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f8:	4613      	mov	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4a1f      	ldr	r2, [pc, #124]	; (8005280 <xTaskIncrementTick+0x164>)
 8005202:	441a      	add	r2, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	3304      	adds	r3, #4
 8005208:	4619      	mov	r1, r3
 800520a:	4610      	mov	r0, r2
 800520c:	f7fe fefb 	bl	8004006 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005214:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <xTaskIncrementTick+0x168>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521a:	429a      	cmp	r2, r3
 800521c:	d3b8      	bcc.n	8005190 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800521e:	2301      	movs	r3, #1
 8005220:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005222:	e7b5      	b.n	8005190 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005224:	4b17      	ldr	r3, [pc, #92]	; (8005284 <xTaskIncrementTick+0x168>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522a:	4915      	ldr	r1, [pc, #84]	; (8005280 <xTaskIncrementTick+0x164>)
 800522c:	4613      	mov	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	440b      	add	r3, r1
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d901      	bls.n	8005240 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800523c:	2301      	movs	r3, #1
 800523e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005240:	4b11      	ldr	r3, [pc, #68]	; (8005288 <xTaskIncrementTick+0x16c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d007      	beq.n	8005258 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005248:	2301      	movs	r3, #1
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	e004      	b.n	8005258 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800524e:	4b0f      	ldr	r3, [pc, #60]	; (800528c <xTaskIncrementTick+0x170>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3301      	adds	r3, #1
 8005254:	4a0d      	ldr	r2, [pc, #52]	; (800528c <xTaskIncrementTick+0x170>)
 8005256:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005258:	697b      	ldr	r3, [r7, #20]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20000e34 	.word	0x20000e34
 8005268:	20000e10 	.word	0x20000e10
 800526c:	20000dc4 	.word	0x20000dc4
 8005270:	20000dc8 	.word	0x20000dc8
 8005274:	20000e24 	.word	0x20000e24
 8005278:	20000e2c 	.word	0x20000e2c
 800527c:	20000e14 	.word	0x20000e14
 8005280:	2000093c 	.word	0x2000093c
 8005284:	20000938 	.word	0x20000938
 8005288:	20000e20 	.word	0x20000e20
 800528c:	20000e1c 	.word	0x20000e1c

08005290 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005296:	4b2a      	ldr	r3, [pc, #168]	; (8005340 <vTaskSwitchContext+0xb0>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800529e:	4b29      	ldr	r3, [pc, #164]	; (8005344 <vTaskSwitchContext+0xb4>)
 80052a0:	2201      	movs	r2, #1
 80052a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80052a4:	e046      	b.n	8005334 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80052a6:	4b27      	ldr	r3, [pc, #156]	; (8005344 <vTaskSwitchContext+0xb4>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ac:	4b26      	ldr	r3, [pc, #152]	; (8005348 <vTaskSwitchContext+0xb8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	e010      	b.n	80052d6 <vTaskSwitchContext+0x46>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10a      	bne.n	80052d0 <vTaskSwitchContext+0x40>
	__asm volatile
 80052ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	607b      	str	r3, [r7, #4]
}
 80052cc:	bf00      	nop
 80052ce:	e7fe      	b.n	80052ce <vTaskSwitchContext+0x3e>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	491d      	ldr	r1, [pc, #116]	; (800534c <vTaskSwitchContext+0xbc>)
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4613      	mov	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	440b      	add	r3, r1
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0e4      	beq.n	80052b4 <vTaskSwitchContext+0x24>
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4613      	mov	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4a15      	ldr	r2, [pc, #84]	; (800534c <vTaskSwitchContext+0xbc>)
 80052f6:	4413      	add	r3, r2
 80052f8:	60bb      	str	r3, [r7, #8]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	605a      	str	r2, [r3, #4]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	3308      	adds	r3, #8
 800530c:	429a      	cmp	r2, r3
 800530e:	d104      	bne.n	800531a <vTaskSwitchContext+0x8a>
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	605a      	str	r2, [r3, #4]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	4a0b      	ldr	r2, [pc, #44]	; (8005350 <vTaskSwitchContext+0xc0>)
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	4a08      	ldr	r2, [pc, #32]	; (8005348 <vTaskSwitchContext+0xb8>)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800532a:	4b09      	ldr	r3, [pc, #36]	; (8005350 <vTaskSwitchContext+0xc0>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3354      	adds	r3, #84	; 0x54
 8005330:	4a08      	ldr	r2, [pc, #32]	; (8005354 <vTaskSwitchContext+0xc4>)
 8005332:	6013      	str	r3, [r2, #0]
}
 8005334:	bf00      	nop
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	20000e34 	.word	0x20000e34
 8005344:	20000e20 	.word	0x20000e20
 8005348:	20000e14 	.word	0x20000e14
 800534c:	2000093c 	.word	0x2000093c
 8005350:	20000938 	.word	0x20000938
 8005354:	20000018 	.word	0x20000018

08005358 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10a      	bne.n	800537e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	60fb      	str	r3, [r7, #12]
}
 800537a:	bf00      	nop
 800537c:	e7fe      	b.n	800537c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800537e:	4b07      	ldr	r3, [pc, #28]	; (800539c <vTaskPlaceOnEventList+0x44>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3318      	adds	r3, #24
 8005384:	4619      	mov	r1, r3
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7fe fe61 	bl	800404e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800538c:	2101      	movs	r1, #1
 800538e:	6838      	ldr	r0, [r7, #0]
 8005390:	f000 fa80 	bl	8005894 <prvAddCurrentTaskToDelayedList>
}
 8005394:	bf00      	nop
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20000938 	.word	0x20000938

080053a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10a      	bne.n	80053c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80053b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b6:	f383 8811 	msr	BASEPRI, r3
 80053ba:	f3bf 8f6f 	isb	sy
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	617b      	str	r3, [r7, #20]
}
 80053c4:	bf00      	nop
 80053c6:	e7fe      	b.n	80053c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053c8:	4b0a      	ldr	r3, [pc, #40]	; (80053f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3318      	adds	r3, #24
 80053ce:	4619      	mov	r1, r3
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f7fe fe18 	bl	8004006 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80053dc:	f04f 33ff 	mov.w	r3, #4294967295
 80053e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80053e2:	6879      	ldr	r1, [r7, #4]
 80053e4:	68b8      	ldr	r0, [r7, #8]
 80053e6:	f000 fa55 	bl	8005894 <prvAddCurrentTaskToDelayedList>
	}
 80053ea:	bf00      	nop
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	20000938 	.word	0x20000938

080053f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10a      	bne.n	8005424 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	60fb      	str	r3, [r7, #12]
}
 8005420:	bf00      	nop
 8005422:	e7fe      	b.n	8005422 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	3318      	adds	r3, #24
 8005428:	4618      	mov	r0, r3
 800542a:	f7fe fe49 	bl	80040c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800542e:	4b1e      	ldr	r3, [pc, #120]	; (80054a8 <xTaskRemoveFromEventList+0xb0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d11d      	bne.n	8005472 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	3304      	adds	r3, #4
 800543a:	4618      	mov	r0, r3
 800543c:	f7fe fe40 	bl	80040c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005444:	4b19      	ldr	r3, [pc, #100]	; (80054ac <xTaskRemoveFromEventList+0xb4>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	429a      	cmp	r2, r3
 800544a:	d903      	bls.n	8005454 <xTaskRemoveFromEventList+0x5c>
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005450:	4a16      	ldr	r2, [pc, #88]	; (80054ac <xTaskRemoveFromEventList+0xb4>)
 8005452:	6013      	str	r3, [r2, #0]
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005458:	4613      	mov	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4a13      	ldr	r2, [pc, #76]	; (80054b0 <xTaskRemoveFromEventList+0xb8>)
 8005462:	441a      	add	r2, r3
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	3304      	adds	r3, #4
 8005468:	4619      	mov	r1, r3
 800546a:	4610      	mov	r0, r2
 800546c:	f7fe fdcb 	bl	8004006 <vListInsertEnd>
 8005470:	e005      	b.n	800547e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	3318      	adds	r3, #24
 8005476:	4619      	mov	r1, r3
 8005478:	480e      	ldr	r0, [pc, #56]	; (80054b4 <xTaskRemoveFromEventList+0xbc>)
 800547a:	f7fe fdc4 	bl	8004006 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005482:	4b0d      	ldr	r3, [pc, #52]	; (80054b8 <xTaskRemoveFromEventList+0xc0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005488:	429a      	cmp	r2, r3
 800548a:	d905      	bls.n	8005498 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800548c:	2301      	movs	r3, #1
 800548e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005490:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <xTaskRemoveFromEventList+0xc4>)
 8005492:	2201      	movs	r2, #1
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	e001      	b.n	800549c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005498:	2300      	movs	r3, #0
 800549a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800549c:	697b      	ldr	r3, [r7, #20]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20000e34 	.word	0x20000e34
 80054ac:	20000e14 	.word	0x20000e14
 80054b0:	2000093c 	.word	0x2000093c
 80054b4:	20000dcc 	.word	0x20000dcc
 80054b8:	20000938 	.word	0x20000938
 80054bc:	20000e20 	.word	0x20000e20

080054c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80054c8:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <vTaskInternalSetTimeOutState+0x24>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80054d0:	4b05      	ldr	r3, [pc, #20]	; (80054e8 <vTaskInternalSetTimeOutState+0x28>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	605a      	str	r2, [r3, #4]
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	20000e24 	.word	0x20000e24
 80054e8:	20000e10 	.word	0x20000e10

080054ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10a      	bne.n	8005512 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80054fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	613b      	str	r3, [r7, #16]
}
 800550e:	bf00      	nop
 8005510:	e7fe      	b.n	8005510 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10a      	bne.n	800552e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551c:	f383 8811 	msr	BASEPRI, r3
 8005520:	f3bf 8f6f 	isb	sy
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	60fb      	str	r3, [r7, #12]
}
 800552a:	bf00      	nop
 800552c:	e7fe      	b.n	800552c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800552e:	f000 fe81 	bl	8006234 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005532:	4b1d      	ldr	r3, [pc, #116]	; (80055a8 <xTaskCheckForTimeOut+0xbc>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554a:	d102      	bne.n	8005552 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800554c:	2300      	movs	r3, #0
 800554e:	61fb      	str	r3, [r7, #28]
 8005550:	e023      	b.n	800559a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	4b15      	ldr	r3, [pc, #84]	; (80055ac <xTaskCheckForTimeOut+0xc0>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d007      	beq.n	800556e <xTaskCheckForTimeOut+0x82>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	429a      	cmp	r2, r3
 8005566:	d302      	bcc.n	800556e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005568:	2301      	movs	r3, #1
 800556a:	61fb      	str	r3, [r7, #28]
 800556c:	e015      	b.n	800559a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	429a      	cmp	r2, r3
 8005576:	d20b      	bcs.n	8005590 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	1ad2      	subs	r2, r2, r3
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff ff9b 	bl	80054c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800558a:	2300      	movs	r3, #0
 800558c:	61fb      	str	r3, [r7, #28]
 800558e:	e004      	b.n	800559a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005596:	2301      	movs	r3, #1
 8005598:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800559a:	f000 fe7b 	bl	8006294 <vPortExitCritical>

	return xReturn;
 800559e:	69fb      	ldr	r3, [r7, #28]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3720      	adds	r7, #32
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	20000e10 	.word	0x20000e10
 80055ac:	20000e24 	.word	0x20000e24

080055b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80055b4:	4b03      	ldr	r3, [pc, #12]	; (80055c4 <vTaskMissedYield+0x14>)
 80055b6:	2201      	movs	r2, #1
 80055b8:	601a      	str	r2, [r3, #0]
}
 80055ba:	bf00      	nop
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	20000e20 	.word	0x20000e20

080055c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80055d0:	f000 f852 	bl	8005678 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80055d4:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <prvIdleTask+0x28>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d9f9      	bls.n	80055d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80055dc:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <prvIdleTask+0x2c>)
 80055de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80055ec:	e7f0      	b.n	80055d0 <prvIdleTask+0x8>
 80055ee:	bf00      	nop
 80055f0:	2000093c 	.word	0x2000093c
 80055f4:	e000ed04 	.word	0xe000ed04

080055f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055fe:	2300      	movs	r3, #0
 8005600:	607b      	str	r3, [r7, #4]
 8005602:	e00c      	b.n	800561e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4a12      	ldr	r2, [pc, #72]	; (8005658 <prvInitialiseTaskLists+0x60>)
 8005610:	4413      	add	r3, r2
 8005612:	4618      	mov	r0, r3
 8005614:	f7fe fcca 	bl	8003fac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	3301      	adds	r3, #1
 800561c:	607b      	str	r3, [r7, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b37      	cmp	r3, #55	; 0x37
 8005622:	d9ef      	bls.n	8005604 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005624:	480d      	ldr	r0, [pc, #52]	; (800565c <prvInitialiseTaskLists+0x64>)
 8005626:	f7fe fcc1 	bl	8003fac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800562a:	480d      	ldr	r0, [pc, #52]	; (8005660 <prvInitialiseTaskLists+0x68>)
 800562c:	f7fe fcbe 	bl	8003fac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005630:	480c      	ldr	r0, [pc, #48]	; (8005664 <prvInitialiseTaskLists+0x6c>)
 8005632:	f7fe fcbb 	bl	8003fac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005636:	480c      	ldr	r0, [pc, #48]	; (8005668 <prvInitialiseTaskLists+0x70>)
 8005638:	f7fe fcb8 	bl	8003fac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800563c:	480b      	ldr	r0, [pc, #44]	; (800566c <prvInitialiseTaskLists+0x74>)
 800563e:	f7fe fcb5 	bl	8003fac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005642:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <prvInitialiseTaskLists+0x78>)
 8005644:	4a05      	ldr	r2, [pc, #20]	; (800565c <prvInitialiseTaskLists+0x64>)
 8005646:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005648:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <prvInitialiseTaskLists+0x7c>)
 800564a:	4a05      	ldr	r2, [pc, #20]	; (8005660 <prvInitialiseTaskLists+0x68>)
 800564c:	601a      	str	r2, [r3, #0]
}
 800564e:	bf00      	nop
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	2000093c 	.word	0x2000093c
 800565c:	20000d9c 	.word	0x20000d9c
 8005660:	20000db0 	.word	0x20000db0
 8005664:	20000dcc 	.word	0x20000dcc
 8005668:	20000de0 	.word	0x20000de0
 800566c:	20000df8 	.word	0x20000df8
 8005670:	20000dc4 	.word	0x20000dc4
 8005674:	20000dc8 	.word	0x20000dc8

08005678 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800567e:	e019      	b.n	80056b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005680:	f000 fdd8 	bl	8006234 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005684:	4b10      	ldr	r3, [pc, #64]	; (80056c8 <prvCheckTasksWaitingTermination+0x50>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3304      	adds	r3, #4
 8005690:	4618      	mov	r0, r3
 8005692:	f7fe fd15 	bl	80040c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005696:	4b0d      	ldr	r3, [pc, #52]	; (80056cc <prvCheckTasksWaitingTermination+0x54>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3b01      	subs	r3, #1
 800569c:	4a0b      	ldr	r2, [pc, #44]	; (80056cc <prvCheckTasksWaitingTermination+0x54>)
 800569e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056a0:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <prvCheckTasksWaitingTermination+0x58>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3b01      	subs	r3, #1
 80056a6:	4a0a      	ldr	r2, [pc, #40]	; (80056d0 <prvCheckTasksWaitingTermination+0x58>)
 80056a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056aa:	f000 fdf3 	bl	8006294 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f810 	bl	80056d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056b4:	4b06      	ldr	r3, [pc, #24]	; (80056d0 <prvCheckTasksWaitingTermination+0x58>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1e1      	bne.n	8005680 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80056bc:	bf00      	nop
 80056be:	bf00      	nop
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	20000de0 	.word	0x20000de0
 80056cc:	20000e0c 	.word	0x20000e0c
 80056d0:	20000df4 	.word	0x20000df4

080056d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3354      	adds	r3, #84	; 0x54
 80056e0:	4618      	mov	r0, r3
 80056e2:	f001 fb1b 	bl	8006d1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d108      	bne.n	8005702 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 ff8b 	bl	8006610 <vPortFree>
				vPortFree( pxTCB );
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 ff88 	bl	8006610 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005700:	e018      	b.n	8005734 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005708:	2b01      	cmp	r3, #1
 800570a:	d103      	bne.n	8005714 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 ff7f 	bl	8006610 <vPortFree>
	}
 8005712:	e00f      	b.n	8005734 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800571a:	2b02      	cmp	r3, #2
 800571c:	d00a      	beq.n	8005734 <prvDeleteTCB+0x60>
	__asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	60fb      	str	r3, [r7, #12]
}
 8005730:	bf00      	nop
 8005732:	e7fe      	b.n	8005732 <prvDeleteTCB+0x5e>
	}
 8005734:	bf00      	nop
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005742:	4b0c      	ldr	r3, [pc, #48]	; (8005774 <prvResetNextTaskUnblockTime+0x38>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d104      	bne.n	8005756 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800574c:	4b0a      	ldr	r3, [pc, #40]	; (8005778 <prvResetNextTaskUnblockTime+0x3c>)
 800574e:	f04f 32ff 	mov.w	r2, #4294967295
 8005752:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005754:	e008      	b.n	8005768 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005756:	4b07      	ldr	r3, [pc, #28]	; (8005774 <prvResetNextTaskUnblockTime+0x38>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	4a04      	ldr	r2, [pc, #16]	; (8005778 <prvResetNextTaskUnblockTime+0x3c>)
 8005766:	6013      	str	r3, [r2, #0]
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	20000dc4 	.word	0x20000dc4
 8005778:	20000e2c 	.word	0x20000e2c

0800577c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005782:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <xTaskGetSchedulerState+0x34>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d102      	bne.n	8005790 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800578a:	2301      	movs	r3, #1
 800578c:	607b      	str	r3, [r7, #4]
 800578e:	e008      	b.n	80057a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005790:	4b08      	ldr	r3, [pc, #32]	; (80057b4 <xTaskGetSchedulerState+0x38>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d102      	bne.n	800579e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005798:	2302      	movs	r3, #2
 800579a:	607b      	str	r3, [r7, #4]
 800579c:	e001      	b.n	80057a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800579e:	2300      	movs	r3, #0
 80057a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80057a2:	687b      	ldr	r3, [r7, #4]
	}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	20000e18 	.word	0x20000e18
 80057b4:	20000e34 	.word	0x20000e34

080057b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80057c4:	2300      	movs	r3, #0
 80057c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d056      	beq.n	800587c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80057ce:	4b2e      	ldr	r3, [pc, #184]	; (8005888 <xTaskPriorityDisinherit+0xd0>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d00a      	beq.n	80057ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	60fb      	str	r3, [r7, #12]
}
 80057ea:	bf00      	nop
 80057ec:	e7fe      	b.n	80057ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10a      	bne.n	800580c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	60bb      	str	r3, [r7, #8]
}
 8005808:	bf00      	nop
 800580a:	e7fe      	b.n	800580a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005810:	1e5a      	subs	r2, r3, #1
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800581e:	429a      	cmp	r2, r3
 8005820:	d02c      	beq.n	800587c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005826:	2b00      	cmp	r3, #0
 8005828:	d128      	bne.n	800587c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	3304      	adds	r3, #4
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe fc46 	bl	80040c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584c:	4b0f      	ldr	r3, [pc, #60]	; (800588c <xTaskPriorityDisinherit+0xd4>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	429a      	cmp	r2, r3
 8005852:	d903      	bls.n	800585c <xTaskPriorityDisinherit+0xa4>
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005858:	4a0c      	ldr	r2, [pc, #48]	; (800588c <xTaskPriorityDisinherit+0xd4>)
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4a09      	ldr	r2, [pc, #36]	; (8005890 <xTaskPriorityDisinherit+0xd8>)
 800586a:	441a      	add	r2, r3
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	3304      	adds	r3, #4
 8005870:	4619      	mov	r1, r3
 8005872:	4610      	mov	r0, r2
 8005874:	f7fe fbc7 	bl	8004006 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005878:	2301      	movs	r3, #1
 800587a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800587c:	697b      	ldr	r3, [r7, #20]
	}
 800587e:	4618      	mov	r0, r3
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	20000938 	.word	0x20000938
 800588c:	20000e14 	.word	0x20000e14
 8005890:	2000093c 	.word	0x2000093c

08005894 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800589e:	4b21      	ldr	r3, [pc, #132]	; (8005924 <prvAddCurrentTaskToDelayedList+0x90>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058a4:	4b20      	ldr	r3, [pc, #128]	; (8005928 <prvAddCurrentTaskToDelayedList+0x94>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3304      	adds	r3, #4
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fe fc08 	bl	80040c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b6:	d10a      	bne.n	80058ce <prvAddCurrentTaskToDelayedList+0x3a>
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d007      	beq.n	80058ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058be:	4b1a      	ldr	r3, [pc, #104]	; (8005928 <prvAddCurrentTaskToDelayedList+0x94>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3304      	adds	r3, #4
 80058c4:	4619      	mov	r1, r3
 80058c6:	4819      	ldr	r0, [pc, #100]	; (800592c <prvAddCurrentTaskToDelayedList+0x98>)
 80058c8:	f7fe fb9d 	bl	8004006 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80058cc:	e026      	b.n	800591c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4413      	add	r3, r2
 80058d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058d6:	4b14      	ldr	r3, [pc, #80]	; (8005928 <prvAddCurrentTaskToDelayedList+0x94>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d209      	bcs.n	80058fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058e6:	4b12      	ldr	r3, [pc, #72]	; (8005930 <prvAddCurrentTaskToDelayedList+0x9c>)
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	4b0f      	ldr	r3, [pc, #60]	; (8005928 <prvAddCurrentTaskToDelayedList+0x94>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3304      	adds	r3, #4
 80058f0:	4619      	mov	r1, r3
 80058f2:	4610      	mov	r0, r2
 80058f4:	f7fe fbab 	bl	800404e <vListInsert>
}
 80058f8:	e010      	b.n	800591c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058fa:	4b0e      	ldr	r3, [pc, #56]	; (8005934 <prvAddCurrentTaskToDelayedList+0xa0>)
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	4b0a      	ldr	r3, [pc, #40]	; (8005928 <prvAddCurrentTaskToDelayedList+0x94>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3304      	adds	r3, #4
 8005904:	4619      	mov	r1, r3
 8005906:	4610      	mov	r0, r2
 8005908:	f7fe fba1 	bl	800404e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800590c:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <prvAddCurrentTaskToDelayedList+0xa4>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	429a      	cmp	r2, r3
 8005914:	d202      	bcs.n	800591c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005916:	4a08      	ldr	r2, [pc, #32]	; (8005938 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	6013      	str	r3, [r2, #0]
}
 800591c:	bf00      	nop
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	20000e10 	.word	0x20000e10
 8005928:	20000938 	.word	0x20000938
 800592c:	20000df8 	.word	0x20000df8
 8005930:	20000dc8 	.word	0x20000dc8
 8005934:	20000dc4 	.word	0x20000dc4
 8005938:	20000e2c 	.word	0x20000e2c

0800593c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08a      	sub	sp, #40	; 0x28
 8005940:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005942:	2300      	movs	r3, #0
 8005944:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005946:	f000 fb07 	bl	8005f58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800594a:	4b1c      	ldr	r3, [pc, #112]	; (80059bc <xTimerCreateTimerTask+0x80>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d021      	beq.n	8005996 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005956:	2300      	movs	r3, #0
 8005958:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800595a:	1d3a      	adds	r2, r7, #4
 800595c:	f107 0108 	add.w	r1, r7, #8
 8005960:	f107 030c 	add.w	r3, r7, #12
 8005964:	4618      	mov	r0, r3
 8005966:	f7fe fb07 	bl	8003f78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800596a:	6879      	ldr	r1, [r7, #4]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	9202      	str	r2, [sp, #8]
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	2302      	movs	r3, #2
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	2300      	movs	r3, #0
 800597a:	460a      	mov	r2, r1
 800597c:	4910      	ldr	r1, [pc, #64]	; (80059c0 <xTimerCreateTimerTask+0x84>)
 800597e:	4811      	ldr	r0, [pc, #68]	; (80059c4 <xTimerCreateTimerTask+0x88>)
 8005980:	f7ff f8b4 	bl	8004aec <xTaskCreateStatic>
 8005984:	4603      	mov	r3, r0
 8005986:	4a10      	ldr	r2, [pc, #64]	; (80059c8 <xTimerCreateTimerTask+0x8c>)
 8005988:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800598a:	4b0f      	ldr	r3, [pc, #60]	; (80059c8 <xTimerCreateTimerTask+0x8c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005992:	2301      	movs	r3, #1
 8005994:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10a      	bne.n	80059b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	613b      	str	r3, [r7, #16]
}
 80059ae:	bf00      	nop
 80059b0:	e7fe      	b.n	80059b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80059b2:	697b      	ldr	r3, [r7, #20]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3718      	adds	r7, #24
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	20000e68 	.word	0x20000e68
 80059c0:	080074f4 	.word	0x080074f4
 80059c4:	08005b01 	.word	0x08005b01
 80059c8:	20000e6c 	.word	0x20000e6c

080059cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08a      	sub	sp, #40	; 0x28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80059da:	2300      	movs	r3, #0
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10a      	bne.n	80059fa <xTimerGenericCommand+0x2e>
	__asm volatile
 80059e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	623b      	str	r3, [r7, #32]
}
 80059f6:	bf00      	nop
 80059f8:	e7fe      	b.n	80059f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80059fa:	4b1a      	ldr	r3, [pc, #104]	; (8005a64 <xTimerGenericCommand+0x98>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d02a      	beq.n	8005a58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2b05      	cmp	r3, #5
 8005a12:	dc18      	bgt.n	8005a46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a14:	f7ff feb2 	bl	800577c <xTaskGetSchedulerState>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d109      	bne.n	8005a32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a1e:	4b11      	ldr	r3, [pc, #68]	; (8005a64 <xTimerGenericCommand+0x98>)
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	f107 0110 	add.w	r1, r7, #16
 8005a26:	2300      	movs	r3, #0
 8005a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a2a:	f7fe fc77 	bl	800431c <xQueueGenericSend>
 8005a2e:	6278      	str	r0, [r7, #36]	; 0x24
 8005a30:	e012      	b.n	8005a58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005a32:	4b0c      	ldr	r3, [pc, #48]	; (8005a64 <xTimerGenericCommand+0x98>)
 8005a34:	6818      	ldr	r0, [r3, #0]
 8005a36:	f107 0110 	add.w	r1, r7, #16
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f7fe fc6d 	bl	800431c <xQueueGenericSend>
 8005a42:	6278      	str	r0, [r7, #36]	; 0x24
 8005a44:	e008      	b.n	8005a58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a46:	4b07      	ldr	r3, [pc, #28]	; (8005a64 <xTimerGenericCommand+0x98>)
 8005a48:	6818      	ldr	r0, [r3, #0]
 8005a4a:	f107 0110 	add.w	r1, r7, #16
 8005a4e:	2300      	movs	r3, #0
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	f7fe fd61 	bl	8004518 <xQueueGenericSendFromISR>
 8005a56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3728      	adds	r7, #40	; 0x28
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	20000e68 	.word	0x20000e68

08005a68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a72:	4b22      	ldr	r3, [pc, #136]	; (8005afc <prvProcessExpiredTimer+0x94>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	3304      	adds	r3, #4
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fe fb1d 	bl	80040c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d022      	beq.n	8005ada <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	699a      	ldr	r2, [r3, #24]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	18d1      	adds	r1, r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	6978      	ldr	r0, [r7, #20]
 8005aa2:	f000 f8d1 	bl	8005c48 <prvInsertTimerInActiveList>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d01f      	beq.n	8005aec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005aac:	2300      	movs	r3, #0
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	6978      	ldr	r0, [r7, #20]
 8005ab8:	f7ff ff88 	bl	80059cc <xTimerGenericCommand>
 8005abc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d113      	bne.n	8005aec <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	60fb      	str	r3, [r7, #12]
}
 8005ad6:	bf00      	nop
 8005ad8:	e7fe      	b.n	8005ad8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ae0:	f023 0301 	bic.w	r3, r3, #1
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	6978      	ldr	r0, [r7, #20]
 8005af2:	4798      	blx	r3
}
 8005af4:	bf00      	nop
 8005af6:	3718      	adds	r7, #24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	20000e60 	.word	0x20000e60

08005b00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b08:	f107 0308 	add.w	r3, r7, #8
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 f857 	bl	8005bc0 <prvGetNextExpireTime>
 8005b12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	4619      	mov	r1, r3
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 f803 	bl	8005b24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005b1e:	f000 f8d5 	bl	8005ccc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b22:	e7f1      	b.n	8005b08 <prvTimerTask+0x8>

08005b24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005b2e:	f7ff fa39 	bl	8004fa4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b32:	f107 0308 	add.w	r3, r7, #8
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 f866 	bl	8005c08 <prvSampleTimeNow>
 8005b3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d130      	bne.n	8005ba6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10a      	bne.n	8005b60 <prvProcessTimerOrBlockTask+0x3c>
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d806      	bhi.n	8005b60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b52:	f7ff fa35 	bl	8004fc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b56:	68f9      	ldr	r1, [r7, #12]
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7ff ff85 	bl	8005a68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b5e:	e024      	b.n	8005baa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d008      	beq.n	8005b78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005b66:	4b13      	ldr	r3, [pc, #76]	; (8005bb4 <prvProcessTimerOrBlockTask+0x90>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <prvProcessTimerOrBlockTask+0x50>
 8005b70:	2301      	movs	r3, #1
 8005b72:	e000      	b.n	8005b76 <prvProcessTimerOrBlockTask+0x52>
 8005b74:	2300      	movs	r3, #0
 8005b76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b78:	4b0f      	ldr	r3, [pc, #60]	; (8005bb8 <prvProcessTimerOrBlockTask+0x94>)
 8005b7a:	6818      	ldr	r0, [r3, #0]
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	4619      	mov	r1, r3
 8005b86:	f7fe ff7d 	bl	8004a84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b8a:	f7ff fa19 	bl	8004fc0 <xTaskResumeAll>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10a      	bne.n	8005baa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b94:	4b09      	ldr	r3, [pc, #36]	; (8005bbc <prvProcessTimerOrBlockTask+0x98>)
 8005b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	f3bf 8f6f 	isb	sy
}
 8005ba4:	e001      	b.n	8005baa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ba6:	f7ff fa0b 	bl	8004fc0 <xTaskResumeAll>
}
 8005baa:	bf00      	nop
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20000e64 	.word	0x20000e64
 8005bb8:	20000e68 	.word	0x20000e68
 8005bbc:	e000ed04 	.word	0xe000ed04

08005bc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005bc8:	4b0e      	ldr	r3, [pc, #56]	; (8005c04 <prvGetNextExpireTime+0x44>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <prvGetNextExpireTime+0x16>
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	e000      	b.n	8005bd8 <prvGetNextExpireTime+0x18>
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d105      	bne.n	8005bf0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005be4:	4b07      	ldr	r3, [pc, #28]	; (8005c04 <prvGetNextExpireTime+0x44>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	e001      	b.n	8005bf4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	20000e60 	.word	0x20000e60

08005c08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005c10:	f7ff fa74 	bl	80050fc <xTaskGetTickCount>
 8005c14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005c16:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <prvSampleTimeNow+0x3c>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d205      	bcs.n	8005c2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005c20:	f000 f936 	bl	8005e90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	e002      	b.n	8005c32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005c32:	4a04      	ldr	r2, [pc, #16]	; (8005c44 <prvSampleTimeNow+0x3c>)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005c38:	68fb      	ldr	r3, [r7, #12]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20000e70 	.word	0x20000e70

08005c48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c56:	2300      	movs	r3, #0
 8005c58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d812      	bhi.n	8005c94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	1ad2      	subs	r2, r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d302      	bcc.n	8005c82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	e01b      	b.n	8005cba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c82:	4b10      	ldr	r3, [pc, #64]	; (8005cc4 <prvInsertTimerInActiveList+0x7c>)
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	3304      	adds	r3, #4
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	f7fe f9de 	bl	800404e <vListInsert>
 8005c92:	e012      	b.n	8005cba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d206      	bcs.n	8005caa <prvInsertTimerInActiveList+0x62>
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d302      	bcc.n	8005caa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	617b      	str	r3, [r7, #20]
 8005ca8:	e007      	b.n	8005cba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005caa:	4b07      	ldr	r3, [pc, #28]	; (8005cc8 <prvInsertTimerInActiveList+0x80>)
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	f7fe f9ca 	bl	800404e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005cba:	697b      	ldr	r3, [r7, #20]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	20000e64 	.word	0x20000e64
 8005cc8:	20000e60 	.word	0x20000e60

08005ccc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08e      	sub	sp, #56	; 0x38
 8005cd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005cd2:	e0ca      	b.n	8005e6a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	da18      	bge.n	8005d0c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005cda:	1d3b      	adds	r3, r7, #4
 8005cdc:	3304      	adds	r3, #4
 8005cde:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10a      	bne.n	8005cfc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	61fb      	str	r3, [r7, #28]
}
 8005cf8:	bf00      	nop
 8005cfa:	e7fe      	b.n	8005cfa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d02:	6850      	ldr	r0, [r2, #4]
 8005d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d06:	6892      	ldr	r2, [r2, #8]
 8005d08:	4611      	mov	r1, r2
 8005d0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f2c0 80aa 	blt.w	8005e68 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d004      	beq.n	8005d2a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d22:	3304      	adds	r3, #4
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fe f9cb 	bl	80040c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d2a:	463b      	mov	r3, r7
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7ff ff6b 	bl	8005c08 <prvSampleTimeNow>
 8005d32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b09      	cmp	r3, #9
 8005d38:	f200 8097 	bhi.w	8005e6a <prvProcessReceivedCommands+0x19e>
 8005d3c:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <prvProcessReceivedCommands+0x78>)
 8005d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d42:	bf00      	nop
 8005d44:	08005d6d 	.word	0x08005d6d
 8005d48:	08005d6d 	.word	0x08005d6d
 8005d4c:	08005d6d 	.word	0x08005d6d
 8005d50:	08005de1 	.word	0x08005de1
 8005d54:	08005df5 	.word	0x08005df5
 8005d58:	08005e3f 	.word	0x08005e3f
 8005d5c:	08005d6d 	.word	0x08005d6d
 8005d60:	08005d6d 	.word	0x08005d6d
 8005d64:	08005de1 	.word	0x08005de1
 8005d68:	08005df5 	.word	0x08005df5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d72:	f043 0301 	orr.w	r3, r3, #1
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	18d1      	adds	r1, r2, r3
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d8c:	f7ff ff5c 	bl	8005c48 <prvInsertTimerInActiveList>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d069      	beq.n	8005e6a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005da4:	f003 0304 	and.w	r3, r3, #4
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d05e      	beq.n	8005e6a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	441a      	add	r2, r3
 8005db4:	2300      	movs	r3, #0
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	2300      	movs	r3, #0
 8005dba:	2100      	movs	r1, #0
 8005dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dbe:	f7ff fe05 	bl	80059cc <xTimerGenericCommand>
 8005dc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d14f      	bne.n	8005e6a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	61bb      	str	r3, [r7, #24]
}
 8005ddc:	bf00      	nop
 8005dde:	e7fe      	b.n	8005dde <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005de6:	f023 0301 	bic.w	r3, r3, #1
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005df2:	e03a      	b.n	8005e6a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dfa:	f043 0301 	orr.w	r3, r3, #1
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	617b      	str	r3, [r7, #20]
}
 8005e26:	bf00      	nop
 8005e28:	e7fe      	b.n	8005e28 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2c:	699a      	ldr	r2, [r3, #24]
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	18d1      	adds	r1, r2, r3
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e38:	f7ff ff06 	bl	8005c48 <prvInsertTimerInActiveList>
					break;
 8005e3c:	e015      	b.n	8005e6a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d103      	bne.n	8005e54 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e4e:	f000 fbdf 	bl	8006610 <vPortFree>
 8005e52:	e00a      	b.n	8005e6a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e5a:	f023 0301 	bic.w	r3, r3, #1
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005e66:	e000      	b.n	8005e6a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005e68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e6a:	4b08      	ldr	r3, [pc, #32]	; (8005e8c <prvProcessReceivedCommands+0x1c0>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	1d39      	adds	r1, r7, #4
 8005e70:	2200      	movs	r2, #0
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fe fbec 	bl	8004650 <xQueueReceive>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f47f af2a 	bne.w	8005cd4 <prvProcessReceivedCommands+0x8>
	}
}
 8005e80:	bf00      	nop
 8005e82:	bf00      	nop
 8005e84:	3730      	adds	r7, #48	; 0x30
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000e68 	.word	0x20000e68

08005e90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b088      	sub	sp, #32
 8005e94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e96:	e048      	b.n	8005f2a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e98:	4b2d      	ldr	r3, [pc, #180]	; (8005f50 <prvSwitchTimerLists+0xc0>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ea2:	4b2b      	ldr	r3, [pc, #172]	; (8005f50 <prvSwitchTimerLists+0xc0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	3304      	adds	r3, #4
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7fe f905 	bl	80040c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d02e      	beq.n	8005f2a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d90e      	bls.n	8005efc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005eea:	4b19      	ldr	r3, [pc, #100]	; (8005f50 <prvSwitchTimerLists+0xc0>)
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	f7fe f8aa 	bl	800404e <vListInsert>
 8005efa:	e016      	b.n	8005f2a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005efc:	2300      	movs	r3, #0
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	2300      	movs	r3, #0
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	2100      	movs	r1, #0
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f7ff fd60 	bl	80059cc <xTimerGenericCommand>
 8005f0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	603b      	str	r3, [r7, #0]
}
 8005f26:	bf00      	nop
 8005f28:	e7fe      	b.n	8005f28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f2a:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <prvSwitchTimerLists+0xc0>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1b1      	bne.n	8005e98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005f34:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <prvSwitchTimerLists+0xc0>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005f3a:	4b06      	ldr	r3, [pc, #24]	; (8005f54 <prvSwitchTimerLists+0xc4>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a04      	ldr	r2, [pc, #16]	; (8005f50 <prvSwitchTimerLists+0xc0>)
 8005f40:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005f42:	4a04      	ldr	r2, [pc, #16]	; (8005f54 <prvSwitchTimerLists+0xc4>)
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	6013      	str	r3, [r2, #0]
}
 8005f48:	bf00      	nop
 8005f4a:	3718      	adds	r7, #24
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	20000e60 	.word	0x20000e60
 8005f54:	20000e64 	.word	0x20000e64

08005f58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005f5e:	f000 f969 	bl	8006234 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005f62:	4b15      	ldr	r3, [pc, #84]	; (8005fb8 <prvCheckForValidListAndQueue+0x60>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d120      	bne.n	8005fac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005f6a:	4814      	ldr	r0, [pc, #80]	; (8005fbc <prvCheckForValidListAndQueue+0x64>)
 8005f6c:	f7fe f81e 	bl	8003fac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005f70:	4813      	ldr	r0, [pc, #76]	; (8005fc0 <prvCheckForValidListAndQueue+0x68>)
 8005f72:	f7fe f81b 	bl	8003fac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005f76:	4b13      	ldr	r3, [pc, #76]	; (8005fc4 <prvCheckForValidListAndQueue+0x6c>)
 8005f78:	4a10      	ldr	r2, [pc, #64]	; (8005fbc <prvCheckForValidListAndQueue+0x64>)
 8005f7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f7c:	4b12      	ldr	r3, [pc, #72]	; (8005fc8 <prvCheckForValidListAndQueue+0x70>)
 8005f7e:	4a10      	ldr	r2, [pc, #64]	; (8005fc0 <prvCheckForValidListAndQueue+0x68>)
 8005f80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005f82:	2300      	movs	r3, #0
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	4b11      	ldr	r3, [pc, #68]	; (8005fcc <prvCheckForValidListAndQueue+0x74>)
 8005f88:	4a11      	ldr	r2, [pc, #68]	; (8005fd0 <prvCheckForValidListAndQueue+0x78>)
 8005f8a:	2110      	movs	r1, #16
 8005f8c:	200a      	movs	r0, #10
 8005f8e:	f7fe f929 	bl	80041e4 <xQueueGenericCreateStatic>
 8005f92:	4603      	mov	r3, r0
 8005f94:	4a08      	ldr	r2, [pc, #32]	; (8005fb8 <prvCheckForValidListAndQueue+0x60>)
 8005f96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f98:	4b07      	ldr	r3, [pc, #28]	; (8005fb8 <prvCheckForValidListAndQueue+0x60>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005fa0:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <prvCheckForValidListAndQueue+0x60>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	490b      	ldr	r1, [pc, #44]	; (8005fd4 <prvCheckForValidListAndQueue+0x7c>)
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fe fd42 	bl	8004a30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005fac:	f000 f972 	bl	8006294 <vPortExitCritical>
}
 8005fb0:	bf00      	nop
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20000e68 	.word	0x20000e68
 8005fbc:	20000e38 	.word	0x20000e38
 8005fc0:	20000e4c 	.word	0x20000e4c
 8005fc4:	20000e60 	.word	0x20000e60
 8005fc8:	20000e64 	.word	0x20000e64
 8005fcc:	20000f14 	.word	0x20000f14
 8005fd0:	20000e74 	.word	0x20000e74
 8005fd4:	080074fc 	.word	0x080074fc

08005fd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	3b04      	subs	r3, #4
 8005fe8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3b04      	subs	r3, #4
 8005ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f023 0201 	bic.w	r2, r3, #1
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	3b04      	subs	r3, #4
 8006006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006008:	4a0c      	ldr	r2, [pc, #48]	; (800603c <pxPortInitialiseStack+0x64>)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	3b14      	subs	r3, #20
 8006012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	3b04      	subs	r3, #4
 800601e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f06f 0202 	mvn.w	r2, #2
 8006026:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	3b20      	subs	r3, #32
 800602c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800602e:	68fb      	ldr	r3, [r7, #12]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	08006041 	.word	0x08006041

08006040 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006046:	2300      	movs	r3, #0
 8006048:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800604a:	4b12      	ldr	r3, [pc, #72]	; (8006094 <prvTaskExitError+0x54>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006052:	d00a      	beq.n	800606a <prvTaskExitError+0x2a>
	__asm volatile
 8006054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	60fb      	str	r3, [r7, #12]
}
 8006066:	bf00      	nop
 8006068:	e7fe      	b.n	8006068 <prvTaskExitError+0x28>
	__asm volatile
 800606a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	60bb      	str	r3, [r7, #8]
}
 800607c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800607e:	bf00      	nop
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0fc      	beq.n	8006080 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006086:	bf00      	nop
 8006088:	bf00      	nop
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	20000014 	.word	0x20000014
	...

080060a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80060a0:	4b07      	ldr	r3, [pc, #28]	; (80060c0 <pxCurrentTCBConst2>)
 80060a2:	6819      	ldr	r1, [r3, #0]
 80060a4:	6808      	ldr	r0, [r1, #0]
 80060a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060aa:	f380 8809 	msr	PSP, r0
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f04f 0000 	mov.w	r0, #0
 80060b6:	f380 8811 	msr	BASEPRI, r0
 80060ba:	4770      	bx	lr
 80060bc:	f3af 8000 	nop.w

080060c0 <pxCurrentTCBConst2>:
 80060c0:	20000938 	.word	0x20000938
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80060c4:	bf00      	nop
 80060c6:	bf00      	nop

080060c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80060c8:	4808      	ldr	r0, [pc, #32]	; (80060ec <prvPortStartFirstTask+0x24>)
 80060ca:	6800      	ldr	r0, [r0, #0]
 80060cc:	6800      	ldr	r0, [r0, #0]
 80060ce:	f380 8808 	msr	MSP, r0
 80060d2:	f04f 0000 	mov.w	r0, #0
 80060d6:	f380 8814 	msr	CONTROL, r0
 80060da:	b662      	cpsie	i
 80060dc:	b661      	cpsie	f
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	df00      	svc	0
 80060e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060ea:	bf00      	nop
 80060ec:	e000ed08 	.word	0xe000ed08

080060f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060f6:	4b46      	ldr	r3, [pc, #280]	; (8006210 <xPortStartScheduler+0x120>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a46      	ldr	r2, [pc, #280]	; (8006214 <xPortStartScheduler+0x124>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d10a      	bne.n	8006116 <xPortStartScheduler+0x26>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	613b      	str	r3, [r7, #16]
}
 8006112:	bf00      	nop
 8006114:	e7fe      	b.n	8006114 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006116:	4b3e      	ldr	r3, [pc, #248]	; (8006210 <xPortStartScheduler+0x120>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a3f      	ldr	r2, [pc, #252]	; (8006218 <xPortStartScheduler+0x128>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d10a      	bne.n	8006136 <xPortStartScheduler+0x46>
	__asm volatile
 8006120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	60fb      	str	r3, [r7, #12]
}
 8006132:	bf00      	nop
 8006134:	e7fe      	b.n	8006134 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006136:	4b39      	ldr	r3, [pc, #228]	; (800621c <xPortStartScheduler+0x12c>)
 8006138:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	b2db      	uxtb	r3, r3
 8006140:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	22ff      	movs	r2, #255	; 0xff
 8006146:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006150:	78fb      	ldrb	r3, [r7, #3]
 8006152:	b2db      	uxtb	r3, r3
 8006154:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006158:	b2da      	uxtb	r2, r3
 800615a:	4b31      	ldr	r3, [pc, #196]	; (8006220 <xPortStartScheduler+0x130>)
 800615c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800615e:	4b31      	ldr	r3, [pc, #196]	; (8006224 <xPortStartScheduler+0x134>)
 8006160:	2207      	movs	r2, #7
 8006162:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006164:	e009      	b.n	800617a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006166:	4b2f      	ldr	r3, [pc, #188]	; (8006224 <xPortStartScheduler+0x134>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3b01      	subs	r3, #1
 800616c:	4a2d      	ldr	r2, [pc, #180]	; (8006224 <xPortStartScheduler+0x134>)
 800616e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	b2db      	uxtb	r3, r3
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	b2db      	uxtb	r3, r3
 8006178:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	b2db      	uxtb	r3, r3
 800617e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006182:	2b80      	cmp	r3, #128	; 0x80
 8006184:	d0ef      	beq.n	8006166 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006186:	4b27      	ldr	r3, [pc, #156]	; (8006224 <xPortStartScheduler+0x134>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f1c3 0307 	rsb	r3, r3, #7
 800618e:	2b04      	cmp	r3, #4
 8006190:	d00a      	beq.n	80061a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	60bb      	str	r3, [r7, #8]
}
 80061a4:	bf00      	nop
 80061a6:	e7fe      	b.n	80061a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80061a8:	4b1e      	ldr	r3, [pc, #120]	; (8006224 <xPortStartScheduler+0x134>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	021b      	lsls	r3, r3, #8
 80061ae:	4a1d      	ldr	r2, [pc, #116]	; (8006224 <xPortStartScheduler+0x134>)
 80061b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80061b2:	4b1c      	ldr	r3, [pc, #112]	; (8006224 <xPortStartScheduler+0x134>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061ba:	4a1a      	ldr	r2, [pc, #104]	; (8006224 <xPortStartScheduler+0x134>)
 80061bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80061c6:	4b18      	ldr	r3, [pc, #96]	; (8006228 <xPortStartScheduler+0x138>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a17      	ldr	r2, [pc, #92]	; (8006228 <xPortStartScheduler+0x138>)
 80061cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061d2:	4b15      	ldr	r3, [pc, #84]	; (8006228 <xPortStartScheduler+0x138>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a14      	ldr	r2, [pc, #80]	; (8006228 <xPortStartScheduler+0x138>)
 80061d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80061dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061de:	f000 f8dd 	bl	800639c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061e2:	4b12      	ldr	r3, [pc, #72]	; (800622c <xPortStartScheduler+0x13c>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061e8:	f000 f8fc 	bl	80063e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061ec:	4b10      	ldr	r3, [pc, #64]	; (8006230 <xPortStartScheduler+0x140>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a0f      	ldr	r2, [pc, #60]	; (8006230 <xPortStartScheduler+0x140>)
 80061f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061f8:	f7ff ff66 	bl	80060c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061fc:	f7ff f848 	bl	8005290 <vTaskSwitchContext>
	prvTaskExitError();
 8006200:	f7ff ff1e 	bl	8006040 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	e000ed00 	.word	0xe000ed00
 8006214:	410fc271 	.word	0x410fc271
 8006218:	410fc270 	.word	0x410fc270
 800621c:	e000e400 	.word	0xe000e400
 8006220:	20000f64 	.word	0x20000f64
 8006224:	20000f68 	.word	0x20000f68
 8006228:	e000ed20 	.word	0xe000ed20
 800622c:	20000014 	.word	0x20000014
 8006230:	e000ef34 	.word	0xe000ef34

08006234 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	607b      	str	r3, [r7, #4]
}
 800624c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800624e:	4b0f      	ldr	r3, [pc, #60]	; (800628c <vPortEnterCritical+0x58>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3301      	adds	r3, #1
 8006254:	4a0d      	ldr	r2, [pc, #52]	; (800628c <vPortEnterCritical+0x58>)
 8006256:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006258:	4b0c      	ldr	r3, [pc, #48]	; (800628c <vPortEnterCritical+0x58>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d10f      	bne.n	8006280 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006260:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <vPortEnterCritical+0x5c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00a      	beq.n	8006280 <vPortEnterCritical+0x4c>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	603b      	str	r3, [r7, #0]
}
 800627c:	bf00      	nop
 800627e:	e7fe      	b.n	800627e <vPortEnterCritical+0x4a>
	}
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	20000014 	.word	0x20000014
 8006290:	e000ed04 	.word	0xe000ed04

08006294 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800629a:	4b12      	ldr	r3, [pc, #72]	; (80062e4 <vPortExitCritical+0x50>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10a      	bne.n	80062b8 <vPortExitCritical+0x24>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	607b      	str	r3, [r7, #4]
}
 80062b4:	bf00      	nop
 80062b6:	e7fe      	b.n	80062b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80062b8:	4b0a      	ldr	r3, [pc, #40]	; (80062e4 <vPortExitCritical+0x50>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3b01      	subs	r3, #1
 80062be:	4a09      	ldr	r2, [pc, #36]	; (80062e4 <vPortExitCritical+0x50>)
 80062c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062c2:	4b08      	ldr	r3, [pc, #32]	; (80062e4 <vPortExitCritical+0x50>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d105      	bne.n	80062d6 <vPortExitCritical+0x42>
 80062ca:	2300      	movs	r3, #0
 80062cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	f383 8811 	msr	BASEPRI, r3
}
 80062d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80062d6:	bf00      	nop
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	20000014 	.word	0x20000014
	...

080062f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062f0:	f3ef 8009 	mrs	r0, PSP
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	4b15      	ldr	r3, [pc, #84]	; (8006350 <pxCurrentTCBConst>)
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	f01e 0f10 	tst.w	lr, #16
 8006300:	bf08      	it	eq
 8006302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630a:	6010      	str	r0, [r2, #0]
 800630c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006310:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006314:	f380 8811 	msr	BASEPRI, r0
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f7fe ffb6 	bl	8005290 <vTaskSwitchContext>
 8006324:	f04f 0000 	mov.w	r0, #0
 8006328:	f380 8811 	msr	BASEPRI, r0
 800632c:	bc09      	pop	{r0, r3}
 800632e:	6819      	ldr	r1, [r3, #0]
 8006330:	6808      	ldr	r0, [r1, #0]
 8006332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006336:	f01e 0f10 	tst.w	lr, #16
 800633a:	bf08      	it	eq
 800633c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006340:	f380 8809 	msr	PSP, r0
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	f3af 8000 	nop.w

08006350 <pxCurrentTCBConst>:
 8006350:	20000938 	.word	0x20000938
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop

08006358 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	607b      	str	r3, [r7, #4]
}
 8006370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006372:	f7fe fed3 	bl	800511c <xTaskIncrementTick>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800637c:	4b06      	ldr	r3, [pc, #24]	; (8006398 <xPortSysTickHandler+0x40>)
 800637e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	2300      	movs	r3, #0
 8006386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	f383 8811 	msr	BASEPRI, r3
}
 800638e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006390:	bf00      	nop
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800639c:	b480      	push	{r7}
 800639e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80063a0:	4b0b      	ldr	r3, [pc, #44]	; (80063d0 <vPortSetupTimerInterrupt+0x34>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80063a6:	4b0b      	ldr	r3, [pc, #44]	; (80063d4 <vPortSetupTimerInterrupt+0x38>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80063ac:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <vPortSetupTimerInterrupt+0x3c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a0a      	ldr	r2, [pc, #40]	; (80063dc <vPortSetupTimerInterrupt+0x40>)
 80063b2:	fba2 2303 	umull	r2, r3, r2, r3
 80063b6:	099b      	lsrs	r3, r3, #6
 80063b8:	4a09      	ldr	r2, [pc, #36]	; (80063e0 <vPortSetupTimerInterrupt+0x44>)
 80063ba:	3b01      	subs	r3, #1
 80063bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063be:	4b04      	ldr	r3, [pc, #16]	; (80063d0 <vPortSetupTimerInterrupt+0x34>)
 80063c0:	2207      	movs	r2, #7
 80063c2:	601a      	str	r2, [r3, #0]
}
 80063c4:	bf00      	nop
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	e000e010 	.word	0xe000e010
 80063d4:	e000e018 	.word	0xe000e018
 80063d8:	20000008 	.word	0x20000008
 80063dc:	10624dd3 	.word	0x10624dd3
 80063e0:	e000e014 	.word	0xe000e014

080063e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80063f4 <vPortEnableVFP+0x10>
 80063e8:	6801      	ldr	r1, [r0, #0]
 80063ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80063ee:	6001      	str	r1, [r0, #0]
 80063f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063f2:	bf00      	nop
 80063f4:	e000ed88 	.word	0xe000ed88

080063f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063fe:	f3ef 8305 	mrs	r3, IPSR
 8006402:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b0f      	cmp	r3, #15
 8006408:	d914      	bls.n	8006434 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800640a:	4a17      	ldr	r2, [pc, #92]	; (8006468 <vPortValidateInterruptPriority+0x70>)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006414:	4b15      	ldr	r3, [pc, #84]	; (800646c <vPortValidateInterruptPriority+0x74>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	7afa      	ldrb	r2, [r7, #11]
 800641a:	429a      	cmp	r2, r3
 800641c:	d20a      	bcs.n	8006434 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	607b      	str	r3, [r7, #4]
}
 8006430:	bf00      	nop
 8006432:	e7fe      	b.n	8006432 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006434:	4b0e      	ldr	r3, [pc, #56]	; (8006470 <vPortValidateInterruptPriority+0x78>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800643c:	4b0d      	ldr	r3, [pc, #52]	; (8006474 <vPortValidateInterruptPriority+0x7c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	429a      	cmp	r2, r3
 8006442:	d90a      	bls.n	800645a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	603b      	str	r3, [r7, #0]
}
 8006456:	bf00      	nop
 8006458:	e7fe      	b.n	8006458 <vPortValidateInterruptPriority+0x60>
	}
 800645a:	bf00      	nop
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	e000e3f0 	.word	0xe000e3f0
 800646c:	20000f64 	.word	0x20000f64
 8006470:	e000ed0c 	.word	0xe000ed0c
 8006474:	20000f68 	.word	0x20000f68

08006478 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b08a      	sub	sp, #40	; 0x28
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006480:	2300      	movs	r3, #0
 8006482:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006484:	f7fe fd8e 	bl	8004fa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006488:	4b5b      	ldr	r3, [pc, #364]	; (80065f8 <pvPortMalloc+0x180>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006490:	f000 f920 	bl	80066d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006494:	4b59      	ldr	r3, [pc, #356]	; (80065fc <pvPortMalloc+0x184>)
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4013      	ands	r3, r2
 800649c:	2b00      	cmp	r3, #0
 800649e:	f040 8093 	bne.w	80065c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d01d      	beq.n	80064e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80064a8:	2208      	movs	r2, #8
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4413      	add	r3, r2
 80064ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f003 0307 	and.w	r3, r3, #7
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d014      	beq.n	80064e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f023 0307 	bic.w	r3, r3, #7
 80064c0:	3308      	adds	r3, #8
 80064c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <pvPortMalloc+0x6c>
	__asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	617b      	str	r3, [r7, #20]
}
 80064e0:	bf00      	nop
 80064e2:	e7fe      	b.n	80064e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d06e      	beq.n	80065c8 <pvPortMalloc+0x150>
 80064ea:	4b45      	ldr	r3, [pc, #276]	; (8006600 <pvPortMalloc+0x188>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d869      	bhi.n	80065c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064f4:	4b43      	ldr	r3, [pc, #268]	; (8006604 <pvPortMalloc+0x18c>)
 80064f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064f8:	4b42      	ldr	r3, [pc, #264]	; (8006604 <pvPortMalloc+0x18c>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064fe:	e004      	b.n	800650a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	429a      	cmp	r2, r3
 8006512:	d903      	bls.n	800651c <pvPortMalloc+0xa4>
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1f1      	bne.n	8006500 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800651c:	4b36      	ldr	r3, [pc, #216]	; (80065f8 <pvPortMalloc+0x180>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006522:	429a      	cmp	r2, r3
 8006524:	d050      	beq.n	80065c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2208      	movs	r2, #8
 800652c:	4413      	add	r3, r2
 800652e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	1ad2      	subs	r2, r2, r3
 8006540:	2308      	movs	r3, #8
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	429a      	cmp	r2, r3
 8006546:	d91f      	bls.n	8006588 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4413      	add	r3, r2
 800654e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <pvPortMalloc+0xf8>
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	613b      	str	r3, [r7, #16]
}
 800656c:	bf00      	nop
 800656e:	e7fe      	b.n	800656e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	1ad2      	subs	r2, r2, r3
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006582:	69b8      	ldr	r0, [r7, #24]
 8006584:	f000 f908 	bl	8006798 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006588:	4b1d      	ldr	r3, [pc, #116]	; (8006600 <pvPortMalloc+0x188>)
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	4a1b      	ldr	r2, [pc, #108]	; (8006600 <pvPortMalloc+0x188>)
 8006594:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006596:	4b1a      	ldr	r3, [pc, #104]	; (8006600 <pvPortMalloc+0x188>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	4b1b      	ldr	r3, [pc, #108]	; (8006608 <pvPortMalloc+0x190>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d203      	bcs.n	80065aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80065a2:	4b17      	ldr	r3, [pc, #92]	; (8006600 <pvPortMalloc+0x188>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a18      	ldr	r2, [pc, #96]	; (8006608 <pvPortMalloc+0x190>)
 80065a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	685a      	ldr	r2, [r3, #4]
 80065ae:	4b13      	ldr	r3, [pc, #76]	; (80065fc <pvPortMalloc+0x184>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	431a      	orrs	r2, r3
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80065be:	4b13      	ldr	r3, [pc, #76]	; (800660c <pvPortMalloc+0x194>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3301      	adds	r3, #1
 80065c4:	4a11      	ldr	r2, [pc, #68]	; (800660c <pvPortMalloc+0x194>)
 80065c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80065c8:	f7fe fcfa 	bl	8004fc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	f003 0307 	and.w	r3, r3, #7
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <pvPortMalloc+0x174>
	__asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	60fb      	str	r3, [r7, #12]
}
 80065e8:	bf00      	nop
 80065ea:	e7fe      	b.n	80065ea <pvPortMalloc+0x172>
	return pvReturn;
 80065ec:	69fb      	ldr	r3, [r7, #28]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3728      	adds	r7, #40	; 0x28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20001b74 	.word	0x20001b74
 80065fc:	20001b88 	.word	0x20001b88
 8006600:	20001b78 	.word	0x20001b78
 8006604:	20001b6c 	.word	0x20001b6c
 8006608:	20001b7c 	.word	0x20001b7c
 800660c:	20001b80 	.word	0x20001b80

08006610 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d04d      	beq.n	80066be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006622:	2308      	movs	r3, #8
 8006624:	425b      	negs	r3, r3
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	4413      	add	r3, r2
 800662a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	4b24      	ldr	r3, [pc, #144]	; (80066c8 <vPortFree+0xb8>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4013      	ands	r3, r2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10a      	bne.n	8006654 <vPortFree+0x44>
	__asm volatile
 800663e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	60fb      	str	r3, [r7, #12]
}
 8006650:	bf00      	nop
 8006652:	e7fe      	b.n	8006652 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00a      	beq.n	8006672 <vPortFree+0x62>
	__asm volatile
 800665c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	60bb      	str	r3, [r7, #8]
}
 800666e:	bf00      	nop
 8006670:	e7fe      	b.n	8006670 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	4b14      	ldr	r3, [pc, #80]	; (80066c8 <vPortFree+0xb8>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4013      	ands	r3, r2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d01e      	beq.n	80066be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d11a      	bne.n	80066be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	4b0e      	ldr	r3, [pc, #56]	; (80066c8 <vPortFree+0xb8>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	43db      	mvns	r3, r3
 8006692:	401a      	ands	r2, r3
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006698:	f7fe fc84 	bl	8004fa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	4b0a      	ldr	r3, [pc, #40]	; (80066cc <vPortFree+0xbc>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4413      	add	r3, r2
 80066a6:	4a09      	ldr	r2, [pc, #36]	; (80066cc <vPortFree+0xbc>)
 80066a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066aa:	6938      	ldr	r0, [r7, #16]
 80066ac:	f000 f874 	bl	8006798 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80066b0:	4b07      	ldr	r3, [pc, #28]	; (80066d0 <vPortFree+0xc0>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3301      	adds	r3, #1
 80066b6:	4a06      	ldr	r2, [pc, #24]	; (80066d0 <vPortFree+0xc0>)
 80066b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80066ba:	f7fe fc81 	bl	8004fc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80066be:	bf00      	nop
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20001b88 	.word	0x20001b88
 80066cc:	20001b78 	.word	0x20001b78
 80066d0:	20001b84 	.word	0x20001b84

080066d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80066de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066e0:	4b27      	ldr	r3, [pc, #156]	; (8006780 <prvHeapInit+0xac>)
 80066e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00c      	beq.n	8006708 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	3307      	adds	r3, #7
 80066f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f023 0307 	bic.w	r3, r3, #7
 80066fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	4a1f      	ldr	r2, [pc, #124]	; (8006780 <prvHeapInit+0xac>)
 8006704:	4413      	add	r3, r2
 8006706:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800670c:	4a1d      	ldr	r2, [pc, #116]	; (8006784 <prvHeapInit+0xb0>)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006712:	4b1c      	ldr	r3, [pc, #112]	; (8006784 <prvHeapInit+0xb0>)
 8006714:	2200      	movs	r2, #0
 8006716:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	4413      	add	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006720:	2208      	movs	r2, #8
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	1a9b      	subs	r3, r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0307 	bic.w	r3, r3, #7
 800672e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4a15      	ldr	r2, [pc, #84]	; (8006788 <prvHeapInit+0xb4>)
 8006734:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006736:	4b14      	ldr	r3, [pc, #80]	; (8006788 <prvHeapInit+0xb4>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2200      	movs	r2, #0
 800673c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800673e:	4b12      	ldr	r3, [pc, #72]	; (8006788 <prvHeapInit+0xb4>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2200      	movs	r2, #0
 8006744:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	1ad2      	subs	r2, r2, r3
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006754:	4b0c      	ldr	r3, [pc, #48]	; (8006788 <prvHeapInit+0xb4>)
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	4a0a      	ldr	r2, [pc, #40]	; (800678c <prvHeapInit+0xb8>)
 8006762:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	4a09      	ldr	r2, [pc, #36]	; (8006790 <prvHeapInit+0xbc>)
 800676a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800676c:	4b09      	ldr	r3, [pc, #36]	; (8006794 <prvHeapInit+0xc0>)
 800676e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006772:	601a      	str	r2, [r3, #0]
}
 8006774:	bf00      	nop
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	20000f6c 	.word	0x20000f6c
 8006784:	20001b6c 	.word	0x20001b6c
 8006788:	20001b74 	.word	0x20001b74
 800678c:	20001b7c 	.word	0x20001b7c
 8006790:	20001b78 	.word	0x20001b78
 8006794:	20001b88 	.word	0x20001b88

08006798 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067a0:	4b28      	ldr	r3, [pc, #160]	; (8006844 <prvInsertBlockIntoFreeList+0xac>)
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	e002      	b.n	80067ac <prvInsertBlockIntoFreeList+0x14>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d8f7      	bhi.n	80067a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	4413      	add	r3, r2
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d108      	bne.n	80067da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	441a      	add	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	441a      	add	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d118      	bne.n	8006820 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	4b15      	ldr	r3, [pc, #84]	; (8006848 <prvInsertBlockIntoFreeList+0xb0>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d00d      	beq.n	8006816 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	441a      	add	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	e008      	b.n	8006828 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006816:	4b0c      	ldr	r3, [pc, #48]	; (8006848 <prvInsertBlockIntoFreeList+0xb0>)
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	e003      	b.n	8006828 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	429a      	cmp	r2, r3
 800682e:	d002      	beq.n	8006836 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006836:	bf00      	nop
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	20001b6c 	.word	0x20001b6c
 8006848:	20001b74 	.word	0x20001b74

0800684c <__errno>:
 800684c:	4b01      	ldr	r3, [pc, #4]	; (8006854 <__errno+0x8>)
 800684e:	6818      	ldr	r0, [r3, #0]
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	20000018 	.word	0x20000018

08006858 <std>:
 8006858:	2300      	movs	r3, #0
 800685a:	b510      	push	{r4, lr}
 800685c:	4604      	mov	r4, r0
 800685e:	e9c0 3300 	strd	r3, r3, [r0]
 8006862:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006866:	6083      	str	r3, [r0, #8]
 8006868:	8181      	strh	r1, [r0, #12]
 800686a:	6643      	str	r3, [r0, #100]	; 0x64
 800686c:	81c2      	strh	r2, [r0, #14]
 800686e:	6183      	str	r3, [r0, #24]
 8006870:	4619      	mov	r1, r3
 8006872:	2208      	movs	r2, #8
 8006874:	305c      	adds	r0, #92	; 0x5c
 8006876:	f000 f91a 	bl	8006aae <memset>
 800687a:	4b05      	ldr	r3, [pc, #20]	; (8006890 <std+0x38>)
 800687c:	6263      	str	r3, [r4, #36]	; 0x24
 800687e:	4b05      	ldr	r3, [pc, #20]	; (8006894 <std+0x3c>)
 8006880:	62a3      	str	r3, [r4, #40]	; 0x28
 8006882:	4b05      	ldr	r3, [pc, #20]	; (8006898 <std+0x40>)
 8006884:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006886:	4b05      	ldr	r3, [pc, #20]	; (800689c <std+0x44>)
 8006888:	6224      	str	r4, [r4, #32]
 800688a:	6323      	str	r3, [r4, #48]	; 0x30
 800688c:	bd10      	pop	{r4, pc}
 800688e:	bf00      	nop
 8006890:	08006df5 	.word	0x08006df5
 8006894:	08006e17 	.word	0x08006e17
 8006898:	08006e4f 	.word	0x08006e4f
 800689c:	08006e73 	.word	0x08006e73

080068a0 <_cleanup_r>:
 80068a0:	4901      	ldr	r1, [pc, #4]	; (80068a8 <_cleanup_r+0x8>)
 80068a2:	f000 b8af 	b.w	8006a04 <_fwalk_reent>
 80068a6:	bf00      	nop
 80068a8:	0800714d 	.word	0x0800714d

080068ac <__sfmoreglue>:
 80068ac:	b570      	push	{r4, r5, r6, lr}
 80068ae:	2268      	movs	r2, #104	; 0x68
 80068b0:	1e4d      	subs	r5, r1, #1
 80068b2:	4355      	muls	r5, r2
 80068b4:	460e      	mov	r6, r1
 80068b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80068ba:	f000 f921 	bl	8006b00 <_malloc_r>
 80068be:	4604      	mov	r4, r0
 80068c0:	b140      	cbz	r0, 80068d4 <__sfmoreglue+0x28>
 80068c2:	2100      	movs	r1, #0
 80068c4:	e9c0 1600 	strd	r1, r6, [r0]
 80068c8:	300c      	adds	r0, #12
 80068ca:	60a0      	str	r0, [r4, #8]
 80068cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068d0:	f000 f8ed 	bl	8006aae <memset>
 80068d4:	4620      	mov	r0, r4
 80068d6:	bd70      	pop	{r4, r5, r6, pc}

080068d8 <__sfp_lock_acquire>:
 80068d8:	4801      	ldr	r0, [pc, #4]	; (80068e0 <__sfp_lock_acquire+0x8>)
 80068da:	f000 b8d8 	b.w	8006a8e <__retarget_lock_acquire_recursive>
 80068de:	bf00      	nop
 80068e0:	20001b8d 	.word	0x20001b8d

080068e4 <__sfp_lock_release>:
 80068e4:	4801      	ldr	r0, [pc, #4]	; (80068ec <__sfp_lock_release+0x8>)
 80068e6:	f000 b8d3 	b.w	8006a90 <__retarget_lock_release_recursive>
 80068ea:	bf00      	nop
 80068ec:	20001b8d 	.word	0x20001b8d

080068f0 <__sinit_lock_acquire>:
 80068f0:	4801      	ldr	r0, [pc, #4]	; (80068f8 <__sinit_lock_acquire+0x8>)
 80068f2:	f000 b8cc 	b.w	8006a8e <__retarget_lock_acquire_recursive>
 80068f6:	bf00      	nop
 80068f8:	20001b8e 	.word	0x20001b8e

080068fc <__sinit_lock_release>:
 80068fc:	4801      	ldr	r0, [pc, #4]	; (8006904 <__sinit_lock_release+0x8>)
 80068fe:	f000 b8c7 	b.w	8006a90 <__retarget_lock_release_recursive>
 8006902:	bf00      	nop
 8006904:	20001b8e 	.word	0x20001b8e

08006908 <__sinit>:
 8006908:	b510      	push	{r4, lr}
 800690a:	4604      	mov	r4, r0
 800690c:	f7ff fff0 	bl	80068f0 <__sinit_lock_acquire>
 8006910:	69a3      	ldr	r3, [r4, #24]
 8006912:	b11b      	cbz	r3, 800691c <__sinit+0x14>
 8006914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006918:	f7ff bff0 	b.w	80068fc <__sinit_lock_release>
 800691c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006920:	6523      	str	r3, [r4, #80]	; 0x50
 8006922:	4b13      	ldr	r3, [pc, #76]	; (8006970 <__sinit+0x68>)
 8006924:	4a13      	ldr	r2, [pc, #76]	; (8006974 <__sinit+0x6c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	62a2      	str	r2, [r4, #40]	; 0x28
 800692a:	42a3      	cmp	r3, r4
 800692c:	bf04      	itt	eq
 800692e:	2301      	moveq	r3, #1
 8006930:	61a3      	streq	r3, [r4, #24]
 8006932:	4620      	mov	r0, r4
 8006934:	f000 f820 	bl	8006978 <__sfp>
 8006938:	6060      	str	r0, [r4, #4]
 800693a:	4620      	mov	r0, r4
 800693c:	f000 f81c 	bl	8006978 <__sfp>
 8006940:	60a0      	str	r0, [r4, #8]
 8006942:	4620      	mov	r0, r4
 8006944:	f000 f818 	bl	8006978 <__sfp>
 8006948:	2200      	movs	r2, #0
 800694a:	60e0      	str	r0, [r4, #12]
 800694c:	2104      	movs	r1, #4
 800694e:	6860      	ldr	r0, [r4, #4]
 8006950:	f7ff ff82 	bl	8006858 <std>
 8006954:	68a0      	ldr	r0, [r4, #8]
 8006956:	2201      	movs	r2, #1
 8006958:	2109      	movs	r1, #9
 800695a:	f7ff ff7d 	bl	8006858 <std>
 800695e:	68e0      	ldr	r0, [r4, #12]
 8006960:	2202      	movs	r2, #2
 8006962:	2112      	movs	r1, #18
 8006964:	f7ff ff78 	bl	8006858 <std>
 8006968:	2301      	movs	r3, #1
 800696a:	61a3      	str	r3, [r4, #24]
 800696c:	e7d2      	b.n	8006914 <__sinit+0xc>
 800696e:	bf00      	nop
 8006970:	0800764c 	.word	0x0800764c
 8006974:	080068a1 	.word	0x080068a1

08006978 <__sfp>:
 8006978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697a:	4607      	mov	r7, r0
 800697c:	f7ff ffac 	bl	80068d8 <__sfp_lock_acquire>
 8006980:	4b1e      	ldr	r3, [pc, #120]	; (80069fc <__sfp+0x84>)
 8006982:	681e      	ldr	r6, [r3, #0]
 8006984:	69b3      	ldr	r3, [r6, #24]
 8006986:	b913      	cbnz	r3, 800698e <__sfp+0x16>
 8006988:	4630      	mov	r0, r6
 800698a:	f7ff ffbd 	bl	8006908 <__sinit>
 800698e:	3648      	adds	r6, #72	; 0x48
 8006990:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006994:	3b01      	subs	r3, #1
 8006996:	d503      	bpl.n	80069a0 <__sfp+0x28>
 8006998:	6833      	ldr	r3, [r6, #0]
 800699a:	b30b      	cbz	r3, 80069e0 <__sfp+0x68>
 800699c:	6836      	ldr	r6, [r6, #0]
 800699e:	e7f7      	b.n	8006990 <__sfp+0x18>
 80069a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80069a4:	b9d5      	cbnz	r5, 80069dc <__sfp+0x64>
 80069a6:	4b16      	ldr	r3, [pc, #88]	; (8006a00 <__sfp+0x88>)
 80069a8:	60e3      	str	r3, [r4, #12]
 80069aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80069ae:	6665      	str	r5, [r4, #100]	; 0x64
 80069b0:	f000 f86c 	bl	8006a8c <__retarget_lock_init_recursive>
 80069b4:	f7ff ff96 	bl	80068e4 <__sfp_lock_release>
 80069b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80069bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80069c0:	6025      	str	r5, [r4, #0]
 80069c2:	61a5      	str	r5, [r4, #24]
 80069c4:	2208      	movs	r2, #8
 80069c6:	4629      	mov	r1, r5
 80069c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069cc:	f000 f86f 	bl	8006aae <memset>
 80069d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069d8:	4620      	mov	r0, r4
 80069da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069dc:	3468      	adds	r4, #104	; 0x68
 80069de:	e7d9      	b.n	8006994 <__sfp+0x1c>
 80069e0:	2104      	movs	r1, #4
 80069e2:	4638      	mov	r0, r7
 80069e4:	f7ff ff62 	bl	80068ac <__sfmoreglue>
 80069e8:	4604      	mov	r4, r0
 80069ea:	6030      	str	r0, [r6, #0]
 80069ec:	2800      	cmp	r0, #0
 80069ee:	d1d5      	bne.n	800699c <__sfp+0x24>
 80069f0:	f7ff ff78 	bl	80068e4 <__sfp_lock_release>
 80069f4:	230c      	movs	r3, #12
 80069f6:	603b      	str	r3, [r7, #0]
 80069f8:	e7ee      	b.n	80069d8 <__sfp+0x60>
 80069fa:	bf00      	nop
 80069fc:	0800764c 	.word	0x0800764c
 8006a00:	ffff0001 	.word	0xffff0001

08006a04 <_fwalk_reent>:
 8006a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a08:	4606      	mov	r6, r0
 8006a0a:	4688      	mov	r8, r1
 8006a0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a10:	2700      	movs	r7, #0
 8006a12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a16:	f1b9 0901 	subs.w	r9, r9, #1
 8006a1a:	d505      	bpl.n	8006a28 <_fwalk_reent+0x24>
 8006a1c:	6824      	ldr	r4, [r4, #0]
 8006a1e:	2c00      	cmp	r4, #0
 8006a20:	d1f7      	bne.n	8006a12 <_fwalk_reent+0xe>
 8006a22:	4638      	mov	r0, r7
 8006a24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a28:	89ab      	ldrh	r3, [r5, #12]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d907      	bls.n	8006a3e <_fwalk_reent+0x3a>
 8006a2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a32:	3301      	adds	r3, #1
 8006a34:	d003      	beq.n	8006a3e <_fwalk_reent+0x3a>
 8006a36:	4629      	mov	r1, r5
 8006a38:	4630      	mov	r0, r6
 8006a3a:	47c0      	blx	r8
 8006a3c:	4307      	orrs	r7, r0
 8006a3e:	3568      	adds	r5, #104	; 0x68
 8006a40:	e7e9      	b.n	8006a16 <_fwalk_reent+0x12>
	...

08006a44 <__libc_init_array>:
 8006a44:	b570      	push	{r4, r5, r6, lr}
 8006a46:	4d0d      	ldr	r5, [pc, #52]	; (8006a7c <__libc_init_array+0x38>)
 8006a48:	4c0d      	ldr	r4, [pc, #52]	; (8006a80 <__libc_init_array+0x3c>)
 8006a4a:	1b64      	subs	r4, r4, r5
 8006a4c:	10a4      	asrs	r4, r4, #2
 8006a4e:	2600      	movs	r6, #0
 8006a50:	42a6      	cmp	r6, r4
 8006a52:	d109      	bne.n	8006a68 <__libc_init_array+0x24>
 8006a54:	4d0b      	ldr	r5, [pc, #44]	; (8006a84 <__libc_init_array+0x40>)
 8006a56:	4c0c      	ldr	r4, [pc, #48]	; (8006a88 <__libc_init_array+0x44>)
 8006a58:	f000 fd00 	bl	800745c <_init>
 8006a5c:	1b64      	subs	r4, r4, r5
 8006a5e:	10a4      	asrs	r4, r4, #2
 8006a60:	2600      	movs	r6, #0
 8006a62:	42a6      	cmp	r6, r4
 8006a64:	d105      	bne.n	8006a72 <__libc_init_array+0x2e>
 8006a66:	bd70      	pop	{r4, r5, r6, pc}
 8006a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a6c:	4798      	blx	r3
 8006a6e:	3601      	adds	r6, #1
 8006a70:	e7ee      	b.n	8006a50 <__libc_init_array+0xc>
 8006a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a76:	4798      	blx	r3
 8006a78:	3601      	adds	r6, #1
 8006a7a:	e7f2      	b.n	8006a62 <__libc_init_array+0x1e>
 8006a7c:	08007650 	.word	0x08007650
 8006a80:	08007650 	.word	0x08007650
 8006a84:	08007650 	.word	0x08007650
 8006a88:	08007654 	.word	0x08007654

08006a8c <__retarget_lock_init_recursive>:
 8006a8c:	4770      	bx	lr

08006a8e <__retarget_lock_acquire_recursive>:
 8006a8e:	4770      	bx	lr

08006a90 <__retarget_lock_release_recursive>:
 8006a90:	4770      	bx	lr

08006a92 <memcpy>:
 8006a92:	440a      	add	r2, r1
 8006a94:	4291      	cmp	r1, r2
 8006a96:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a9a:	d100      	bne.n	8006a9e <memcpy+0xc>
 8006a9c:	4770      	bx	lr
 8006a9e:	b510      	push	{r4, lr}
 8006aa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aa8:	4291      	cmp	r1, r2
 8006aaa:	d1f9      	bne.n	8006aa0 <memcpy+0xe>
 8006aac:	bd10      	pop	{r4, pc}

08006aae <memset>:
 8006aae:	4402      	add	r2, r0
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d100      	bne.n	8006ab8 <memset+0xa>
 8006ab6:	4770      	bx	lr
 8006ab8:	f803 1b01 	strb.w	r1, [r3], #1
 8006abc:	e7f9      	b.n	8006ab2 <memset+0x4>
	...

08006ac0 <sbrk_aligned>:
 8006ac0:	b570      	push	{r4, r5, r6, lr}
 8006ac2:	4e0e      	ldr	r6, [pc, #56]	; (8006afc <sbrk_aligned+0x3c>)
 8006ac4:	460c      	mov	r4, r1
 8006ac6:	6831      	ldr	r1, [r6, #0]
 8006ac8:	4605      	mov	r5, r0
 8006aca:	b911      	cbnz	r1, 8006ad2 <sbrk_aligned+0x12>
 8006acc:	f000 f982 	bl	8006dd4 <_sbrk_r>
 8006ad0:	6030      	str	r0, [r6, #0]
 8006ad2:	4621      	mov	r1, r4
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	f000 f97d 	bl	8006dd4 <_sbrk_r>
 8006ada:	1c43      	adds	r3, r0, #1
 8006adc:	d00a      	beq.n	8006af4 <sbrk_aligned+0x34>
 8006ade:	1cc4      	adds	r4, r0, #3
 8006ae0:	f024 0403 	bic.w	r4, r4, #3
 8006ae4:	42a0      	cmp	r0, r4
 8006ae6:	d007      	beq.n	8006af8 <sbrk_aligned+0x38>
 8006ae8:	1a21      	subs	r1, r4, r0
 8006aea:	4628      	mov	r0, r5
 8006aec:	f000 f972 	bl	8006dd4 <_sbrk_r>
 8006af0:	3001      	adds	r0, #1
 8006af2:	d101      	bne.n	8006af8 <sbrk_aligned+0x38>
 8006af4:	f04f 34ff 	mov.w	r4, #4294967295
 8006af8:	4620      	mov	r0, r4
 8006afa:	bd70      	pop	{r4, r5, r6, pc}
 8006afc:	20001b94 	.word	0x20001b94

08006b00 <_malloc_r>:
 8006b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b04:	1ccd      	adds	r5, r1, #3
 8006b06:	f025 0503 	bic.w	r5, r5, #3
 8006b0a:	3508      	adds	r5, #8
 8006b0c:	2d0c      	cmp	r5, #12
 8006b0e:	bf38      	it	cc
 8006b10:	250c      	movcc	r5, #12
 8006b12:	2d00      	cmp	r5, #0
 8006b14:	4607      	mov	r7, r0
 8006b16:	db01      	blt.n	8006b1c <_malloc_r+0x1c>
 8006b18:	42a9      	cmp	r1, r5
 8006b1a:	d905      	bls.n	8006b28 <_malloc_r+0x28>
 8006b1c:	230c      	movs	r3, #12
 8006b1e:	603b      	str	r3, [r7, #0]
 8006b20:	2600      	movs	r6, #0
 8006b22:	4630      	mov	r0, r6
 8006b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b28:	4e2e      	ldr	r6, [pc, #184]	; (8006be4 <_malloc_r+0xe4>)
 8006b2a:	f000 fbc3 	bl	80072b4 <__malloc_lock>
 8006b2e:	6833      	ldr	r3, [r6, #0]
 8006b30:	461c      	mov	r4, r3
 8006b32:	bb34      	cbnz	r4, 8006b82 <_malloc_r+0x82>
 8006b34:	4629      	mov	r1, r5
 8006b36:	4638      	mov	r0, r7
 8006b38:	f7ff ffc2 	bl	8006ac0 <sbrk_aligned>
 8006b3c:	1c43      	adds	r3, r0, #1
 8006b3e:	4604      	mov	r4, r0
 8006b40:	d14d      	bne.n	8006bde <_malloc_r+0xde>
 8006b42:	6834      	ldr	r4, [r6, #0]
 8006b44:	4626      	mov	r6, r4
 8006b46:	2e00      	cmp	r6, #0
 8006b48:	d140      	bne.n	8006bcc <_malloc_r+0xcc>
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	4631      	mov	r1, r6
 8006b4e:	4638      	mov	r0, r7
 8006b50:	eb04 0803 	add.w	r8, r4, r3
 8006b54:	f000 f93e 	bl	8006dd4 <_sbrk_r>
 8006b58:	4580      	cmp	r8, r0
 8006b5a:	d13a      	bne.n	8006bd2 <_malloc_r+0xd2>
 8006b5c:	6821      	ldr	r1, [r4, #0]
 8006b5e:	3503      	adds	r5, #3
 8006b60:	1a6d      	subs	r5, r5, r1
 8006b62:	f025 0503 	bic.w	r5, r5, #3
 8006b66:	3508      	adds	r5, #8
 8006b68:	2d0c      	cmp	r5, #12
 8006b6a:	bf38      	it	cc
 8006b6c:	250c      	movcc	r5, #12
 8006b6e:	4629      	mov	r1, r5
 8006b70:	4638      	mov	r0, r7
 8006b72:	f7ff ffa5 	bl	8006ac0 <sbrk_aligned>
 8006b76:	3001      	adds	r0, #1
 8006b78:	d02b      	beq.n	8006bd2 <_malloc_r+0xd2>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	442b      	add	r3, r5
 8006b7e:	6023      	str	r3, [r4, #0]
 8006b80:	e00e      	b.n	8006ba0 <_malloc_r+0xa0>
 8006b82:	6822      	ldr	r2, [r4, #0]
 8006b84:	1b52      	subs	r2, r2, r5
 8006b86:	d41e      	bmi.n	8006bc6 <_malloc_r+0xc6>
 8006b88:	2a0b      	cmp	r2, #11
 8006b8a:	d916      	bls.n	8006bba <_malloc_r+0xba>
 8006b8c:	1961      	adds	r1, r4, r5
 8006b8e:	42a3      	cmp	r3, r4
 8006b90:	6025      	str	r5, [r4, #0]
 8006b92:	bf18      	it	ne
 8006b94:	6059      	strne	r1, [r3, #4]
 8006b96:	6863      	ldr	r3, [r4, #4]
 8006b98:	bf08      	it	eq
 8006b9a:	6031      	streq	r1, [r6, #0]
 8006b9c:	5162      	str	r2, [r4, r5]
 8006b9e:	604b      	str	r3, [r1, #4]
 8006ba0:	4638      	mov	r0, r7
 8006ba2:	f104 060b 	add.w	r6, r4, #11
 8006ba6:	f000 fb8b 	bl	80072c0 <__malloc_unlock>
 8006baa:	f026 0607 	bic.w	r6, r6, #7
 8006bae:	1d23      	adds	r3, r4, #4
 8006bb0:	1af2      	subs	r2, r6, r3
 8006bb2:	d0b6      	beq.n	8006b22 <_malloc_r+0x22>
 8006bb4:	1b9b      	subs	r3, r3, r6
 8006bb6:	50a3      	str	r3, [r4, r2]
 8006bb8:	e7b3      	b.n	8006b22 <_malloc_r+0x22>
 8006bba:	6862      	ldr	r2, [r4, #4]
 8006bbc:	42a3      	cmp	r3, r4
 8006bbe:	bf0c      	ite	eq
 8006bc0:	6032      	streq	r2, [r6, #0]
 8006bc2:	605a      	strne	r2, [r3, #4]
 8006bc4:	e7ec      	b.n	8006ba0 <_malloc_r+0xa0>
 8006bc6:	4623      	mov	r3, r4
 8006bc8:	6864      	ldr	r4, [r4, #4]
 8006bca:	e7b2      	b.n	8006b32 <_malloc_r+0x32>
 8006bcc:	4634      	mov	r4, r6
 8006bce:	6876      	ldr	r6, [r6, #4]
 8006bd0:	e7b9      	b.n	8006b46 <_malloc_r+0x46>
 8006bd2:	230c      	movs	r3, #12
 8006bd4:	603b      	str	r3, [r7, #0]
 8006bd6:	4638      	mov	r0, r7
 8006bd8:	f000 fb72 	bl	80072c0 <__malloc_unlock>
 8006bdc:	e7a1      	b.n	8006b22 <_malloc_r+0x22>
 8006bde:	6025      	str	r5, [r4, #0]
 8006be0:	e7de      	b.n	8006ba0 <_malloc_r+0xa0>
 8006be2:	bf00      	nop
 8006be4:	20001b90 	.word	0x20001b90

08006be8 <putchar>:
 8006be8:	4b09      	ldr	r3, [pc, #36]	; (8006c10 <putchar+0x28>)
 8006bea:	b513      	push	{r0, r1, r4, lr}
 8006bec:	681c      	ldr	r4, [r3, #0]
 8006bee:	4601      	mov	r1, r0
 8006bf0:	b134      	cbz	r4, 8006c00 <putchar+0x18>
 8006bf2:	69a3      	ldr	r3, [r4, #24]
 8006bf4:	b923      	cbnz	r3, 8006c00 <putchar+0x18>
 8006bf6:	9001      	str	r0, [sp, #4]
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f7ff fe85 	bl	8006908 <__sinit>
 8006bfe:	9901      	ldr	r1, [sp, #4]
 8006c00:	68a2      	ldr	r2, [r4, #8]
 8006c02:	4620      	mov	r0, r4
 8006c04:	b002      	add	sp, #8
 8006c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c0a:	f000 bbab 	b.w	8007364 <_putc_r>
 8006c0e:	bf00      	nop
 8006c10:	20000018 	.word	0x20000018

08006c14 <_puts_r>:
 8006c14:	b570      	push	{r4, r5, r6, lr}
 8006c16:	460e      	mov	r6, r1
 8006c18:	4605      	mov	r5, r0
 8006c1a:	b118      	cbz	r0, 8006c24 <_puts_r+0x10>
 8006c1c:	6983      	ldr	r3, [r0, #24]
 8006c1e:	b90b      	cbnz	r3, 8006c24 <_puts_r+0x10>
 8006c20:	f7ff fe72 	bl	8006908 <__sinit>
 8006c24:	69ab      	ldr	r3, [r5, #24]
 8006c26:	68ac      	ldr	r4, [r5, #8]
 8006c28:	b913      	cbnz	r3, 8006c30 <_puts_r+0x1c>
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f7ff fe6c 	bl	8006908 <__sinit>
 8006c30:	4b2c      	ldr	r3, [pc, #176]	; (8006ce4 <_puts_r+0xd0>)
 8006c32:	429c      	cmp	r4, r3
 8006c34:	d120      	bne.n	8006c78 <_puts_r+0x64>
 8006c36:	686c      	ldr	r4, [r5, #4]
 8006c38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c3a:	07db      	lsls	r3, r3, #31
 8006c3c:	d405      	bmi.n	8006c4a <_puts_r+0x36>
 8006c3e:	89a3      	ldrh	r3, [r4, #12]
 8006c40:	0598      	lsls	r0, r3, #22
 8006c42:	d402      	bmi.n	8006c4a <_puts_r+0x36>
 8006c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c46:	f7ff ff22 	bl	8006a8e <__retarget_lock_acquire_recursive>
 8006c4a:	89a3      	ldrh	r3, [r4, #12]
 8006c4c:	0719      	lsls	r1, r3, #28
 8006c4e:	d51d      	bpl.n	8006c8c <_puts_r+0x78>
 8006c50:	6923      	ldr	r3, [r4, #16]
 8006c52:	b1db      	cbz	r3, 8006c8c <_puts_r+0x78>
 8006c54:	3e01      	subs	r6, #1
 8006c56:	68a3      	ldr	r3, [r4, #8]
 8006c58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	60a3      	str	r3, [r4, #8]
 8006c60:	bb39      	cbnz	r1, 8006cb2 <_puts_r+0x9e>
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	da38      	bge.n	8006cd8 <_puts_r+0xc4>
 8006c66:	4622      	mov	r2, r4
 8006c68:	210a      	movs	r1, #10
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	f000 f906 	bl	8006e7c <__swbuf_r>
 8006c70:	3001      	adds	r0, #1
 8006c72:	d011      	beq.n	8006c98 <_puts_r+0x84>
 8006c74:	250a      	movs	r5, #10
 8006c76:	e011      	b.n	8006c9c <_puts_r+0x88>
 8006c78:	4b1b      	ldr	r3, [pc, #108]	; (8006ce8 <_puts_r+0xd4>)
 8006c7a:	429c      	cmp	r4, r3
 8006c7c:	d101      	bne.n	8006c82 <_puts_r+0x6e>
 8006c7e:	68ac      	ldr	r4, [r5, #8]
 8006c80:	e7da      	b.n	8006c38 <_puts_r+0x24>
 8006c82:	4b1a      	ldr	r3, [pc, #104]	; (8006cec <_puts_r+0xd8>)
 8006c84:	429c      	cmp	r4, r3
 8006c86:	bf08      	it	eq
 8006c88:	68ec      	ldreq	r4, [r5, #12]
 8006c8a:	e7d5      	b.n	8006c38 <_puts_r+0x24>
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	4628      	mov	r0, r5
 8006c90:	f000 f958 	bl	8006f44 <__swsetup_r>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d0dd      	beq.n	8006c54 <_puts_r+0x40>
 8006c98:	f04f 35ff 	mov.w	r5, #4294967295
 8006c9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c9e:	07da      	lsls	r2, r3, #31
 8006ca0:	d405      	bmi.n	8006cae <_puts_r+0x9a>
 8006ca2:	89a3      	ldrh	r3, [r4, #12]
 8006ca4:	059b      	lsls	r3, r3, #22
 8006ca6:	d402      	bmi.n	8006cae <_puts_r+0x9a>
 8006ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006caa:	f7ff fef1 	bl	8006a90 <__retarget_lock_release_recursive>
 8006cae:	4628      	mov	r0, r5
 8006cb0:	bd70      	pop	{r4, r5, r6, pc}
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	da04      	bge.n	8006cc0 <_puts_r+0xac>
 8006cb6:	69a2      	ldr	r2, [r4, #24]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	dc06      	bgt.n	8006cca <_puts_r+0xb6>
 8006cbc:	290a      	cmp	r1, #10
 8006cbe:	d004      	beq.n	8006cca <_puts_r+0xb6>
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	6022      	str	r2, [r4, #0]
 8006cc6:	7019      	strb	r1, [r3, #0]
 8006cc8:	e7c5      	b.n	8006c56 <_puts_r+0x42>
 8006cca:	4622      	mov	r2, r4
 8006ccc:	4628      	mov	r0, r5
 8006cce:	f000 f8d5 	bl	8006e7c <__swbuf_r>
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	d1bf      	bne.n	8006c56 <_puts_r+0x42>
 8006cd6:	e7df      	b.n	8006c98 <_puts_r+0x84>
 8006cd8:	6823      	ldr	r3, [r4, #0]
 8006cda:	250a      	movs	r5, #10
 8006cdc:	1c5a      	adds	r2, r3, #1
 8006cde:	6022      	str	r2, [r4, #0]
 8006ce0:	701d      	strb	r5, [r3, #0]
 8006ce2:	e7db      	b.n	8006c9c <_puts_r+0x88>
 8006ce4:	0800760c 	.word	0x0800760c
 8006ce8:	0800762c 	.word	0x0800762c
 8006cec:	080075ec 	.word	0x080075ec

08006cf0 <puts>:
 8006cf0:	4b02      	ldr	r3, [pc, #8]	; (8006cfc <puts+0xc>)
 8006cf2:	4601      	mov	r1, r0
 8006cf4:	6818      	ldr	r0, [r3, #0]
 8006cf6:	f7ff bf8d 	b.w	8006c14 <_puts_r>
 8006cfa:	bf00      	nop
 8006cfc:	20000018 	.word	0x20000018

08006d00 <cleanup_glue>:
 8006d00:	b538      	push	{r3, r4, r5, lr}
 8006d02:	460c      	mov	r4, r1
 8006d04:	6809      	ldr	r1, [r1, #0]
 8006d06:	4605      	mov	r5, r0
 8006d08:	b109      	cbz	r1, 8006d0e <cleanup_glue+0xe>
 8006d0a:	f7ff fff9 	bl	8006d00 <cleanup_glue>
 8006d0e:	4621      	mov	r1, r4
 8006d10:	4628      	mov	r0, r5
 8006d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d16:	f000 bad9 	b.w	80072cc <_free_r>
	...

08006d1c <_reclaim_reent>:
 8006d1c:	4b2c      	ldr	r3, [pc, #176]	; (8006dd0 <_reclaim_reent+0xb4>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4283      	cmp	r3, r0
 8006d22:	b570      	push	{r4, r5, r6, lr}
 8006d24:	4604      	mov	r4, r0
 8006d26:	d051      	beq.n	8006dcc <_reclaim_reent+0xb0>
 8006d28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006d2a:	b143      	cbz	r3, 8006d3e <_reclaim_reent+0x22>
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d14a      	bne.n	8006dc8 <_reclaim_reent+0xac>
 8006d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d34:	6819      	ldr	r1, [r3, #0]
 8006d36:	b111      	cbz	r1, 8006d3e <_reclaim_reent+0x22>
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f000 fac7 	bl	80072cc <_free_r>
 8006d3e:	6961      	ldr	r1, [r4, #20]
 8006d40:	b111      	cbz	r1, 8006d48 <_reclaim_reent+0x2c>
 8006d42:	4620      	mov	r0, r4
 8006d44:	f000 fac2 	bl	80072cc <_free_r>
 8006d48:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006d4a:	b111      	cbz	r1, 8006d52 <_reclaim_reent+0x36>
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f000 fabd 	bl	80072cc <_free_r>
 8006d52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006d54:	b111      	cbz	r1, 8006d5c <_reclaim_reent+0x40>
 8006d56:	4620      	mov	r0, r4
 8006d58:	f000 fab8 	bl	80072cc <_free_r>
 8006d5c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006d5e:	b111      	cbz	r1, 8006d66 <_reclaim_reent+0x4a>
 8006d60:	4620      	mov	r0, r4
 8006d62:	f000 fab3 	bl	80072cc <_free_r>
 8006d66:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006d68:	b111      	cbz	r1, 8006d70 <_reclaim_reent+0x54>
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f000 faae 	bl	80072cc <_free_r>
 8006d70:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006d72:	b111      	cbz	r1, 8006d7a <_reclaim_reent+0x5e>
 8006d74:	4620      	mov	r0, r4
 8006d76:	f000 faa9 	bl	80072cc <_free_r>
 8006d7a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006d7c:	b111      	cbz	r1, 8006d84 <_reclaim_reent+0x68>
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f000 faa4 	bl	80072cc <_free_r>
 8006d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d86:	b111      	cbz	r1, 8006d8e <_reclaim_reent+0x72>
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f000 fa9f 	bl	80072cc <_free_r>
 8006d8e:	69a3      	ldr	r3, [r4, #24]
 8006d90:	b1e3      	cbz	r3, 8006dcc <_reclaim_reent+0xb0>
 8006d92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d94:	4620      	mov	r0, r4
 8006d96:	4798      	blx	r3
 8006d98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006d9a:	b1b9      	cbz	r1, 8006dcc <_reclaim_reent+0xb0>
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006da2:	f7ff bfad 	b.w	8006d00 <cleanup_glue>
 8006da6:	5949      	ldr	r1, [r1, r5]
 8006da8:	b941      	cbnz	r1, 8006dbc <_reclaim_reent+0xa0>
 8006daa:	3504      	adds	r5, #4
 8006dac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dae:	2d80      	cmp	r5, #128	; 0x80
 8006db0:	68d9      	ldr	r1, [r3, #12]
 8006db2:	d1f8      	bne.n	8006da6 <_reclaim_reent+0x8a>
 8006db4:	4620      	mov	r0, r4
 8006db6:	f000 fa89 	bl	80072cc <_free_r>
 8006dba:	e7ba      	b.n	8006d32 <_reclaim_reent+0x16>
 8006dbc:	680e      	ldr	r6, [r1, #0]
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f000 fa84 	bl	80072cc <_free_r>
 8006dc4:	4631      	mov	r1, r6
 8006dc6:	e7ef      	b.n	8006da8 <_reclaim_reent+0x8c>
 8006dc8:	2500      	movs	r5, #0
 8006dca:	e7ef      	b.n	8006dac <_reclaim_reent+0x90>
 8006dcc:	bd70      	pop	{r4, r5, r6, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000018 	.word	0x20000018

08006dd4 <_sbrk_r>:
 8006dd4:	b538      	push	{r3, r4, r5, lr}
 8006dd6:	4d06      	ldr	r5, [pc, #24]	; (8006df0 <_sbrk_r+0x1c>)
 8006dd8:	2300      	movs	r3, #0
 8006dda:	4604      	mov	r4, r0
 8006ddc:	4608      	mov	r0, r1
 8006dde:	602b      	str	r3, [r5, #0]
 8006de0:	f7f9 fdf8 	bl	80009d4 <_sbrk>
 8006de4:	1c43      	adds	r3, r0, #1
 8006de6:	d102      	bne.n	8006dee <_sbrk_r+0x1a>
 8006de8:	682b      	ldr	r3, [r5, #0]
 8006dea:	b103      	cbz	r3, 8006dee <_sbrk_r+0x1a>
 8006dec:	6023      	str	r3, [r4, #0]
 8006dee:	bd38      	pop	{r3, r4, r5, pc}
 8006df0:	20001b98 	.word	0x20001b98

08006df4 <__sread>:
 8006df4:	b510      	push	{r4, lr}
 8006df6:	460c      	mov	r4, r1
 8006df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dfc:	f000 fafa 	bl	80073f4 <_read_r>
 8006e00:	2800      	cmp	r0, #0
 8006e02:	bfab      	itete	ge
 8006e04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e06:	89a3      	ldrhlt	r3, [r4, #12]
 8006e08:	181b      	addge	r3, r3, r0
 8006e0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e0e:	bfac      	ite	ge
 8006e10:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e12:	81a3      	strhlt	r3, [r4, #12]
 8006e14:	bd10      	pop	{r4, pc}

08006e16 <__swrite>:
 8006e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e1a:	461f      	mov	r7, r3
 8006e1c:	898b      	ldrh	r3, [r1, #12]
 8006e1e:	05db      	lsls	r3, r3, #23
 8006e20:	4605      	mov	r5, r0
 8006e22:	460c      	mov	r4, r1
 8006e24:	4616      	mov	r6, r2
 8006e26:	d505      	bpl.n	8006e34 <__swrite+0x1e>
 8006e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f000 f9c8 	bl	80071c4 <_lseek_r>
 8006e34:	89a3      	ldrh	r3, [r4, #12]
 8006e36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e3e:	81a3      	strh	r3, [r4, #12]
 8006e40:	4632      	mov	r2, r6
 8006e42:	463b      	mov	r3, r7
 8006e44:	4628      	mov	r0, r5
 8006e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e4a:	f000 b869 	b.w	8006f20 <_write_r>

08006e4e <__sseek>:
 8006e4e:	b510      	push	{r4, lr}
 8006e50:	460c      	mov	r4, r1
 8006e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e56:	f000 f9b5 	bl	80071c4 <_lseek_r>
 8006e5a:	1c43      	adds	r3, r0, #1
 8006e5c:	89a3      	ldrh	r3, [r4, #12]
 8006e5e:	bf15      	itete	ne
 8006e60:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e6a:	81a3      	strheq	r3, [r4, #12]
 8006e6c:	bf18      	it	ne
 8006e6e:	81a3      	strhne	r3, [r4, #12]
 8006e70:	bd10      	pop	{r4, pc}

08006e72 <__sclose>:
 8006e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e76:	f000 b8d3 	b.w	8007020 <_close_r>
	...

08006e7c <__swbuf_r>:
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	460e      	mov	r6, r1
 8006e80:	4614      	mov	r4, r2
 8006e82:	4605      	mov	r5, r0
 8006e84:	b118      	cbz	r0, 8006e8e <__swbuf_r+0x12>
 8006e86:	6983      	ldr	r3, [r0, #24]
 8006e88:	b90b      	cbnz	r3, 8006e8e <__swbuf_r+0x12>
 8006e8a:	f7ff fd3d 	bl	8006908 <__sinit>
 8006e8e:	4b21      	ldr	r3, [pc, #132]	; (8006f14 <__swbuf_r+0x98>)
 8006e90:	429c      	cmp	r4, r3
 8006e92:	d12b      	bne.n	8006eec <__swbuf_r+0x70>
 8006e94:	686c      	ldr	r4, [r5, #4]
 8006e96:	69a3      	ldr	r3, [r4, #24]
 8006e98:	60a3      	str	r3, [r4, #8]
 8006e9a:	89a3      	ldrh	r3, [r4, #12]
 8006e9c:	071a      	lsls	r2, r3, #28
 8006e9e:	d52f      	bpl.n	8006f00 <__swbuf_r+0x84>
 8006ea0:	6923      	ldr	r3, [r4, #16]
 8006ea2:	b36b      	cbz	r3, 8006f00 <__swbuf_r+0x84>
 8006ea4:	6923      	ldr	r3, [r4, #16]
 8006ea6:	6820      	ldr	r0, [r4, #0]
 8006ea8:	1ac0      	subs	r0, r0, r3
 8006eaa:	6963      	ldr	r3, [r4, #20]
 8006eac:	b2f6      	uxtb	r6, r6
 8006eae:	4283      	cmp	r3, r0
 8006eb0:	4637      	mov	r7, r6
 8006eb2:	dc04      	bgt.n	8006ebe <__swbuf_r+0x42>
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	f000 f948 	bl	800714c <_fflush_r>
 8006ebc:	bb30      	cbnz	r0, 8006f0c <__swbuf_r+0x90>
 8006ebe:	68a3      	ldr	r3, [r4, #8]
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	60a3      	str	r3, [r4, #8]
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	6022      	str	r2, [r4, #0]
 8006eca:	701e      	strb	r6, [r3, #0]
 8006ecc:	6963      	ldr	r3, [r4, #20]
 8006ece:	3001      	adds	r0, #1
 8006ed0:	4283      	cmp	r3, r0
 8006ed2:	d004      	beq.n	8006ede <__swbuf_r+0x62>
 8006ed4:	89a3      	ldrh	r3, [r4, #12]
 8006ed6:	07db      	lsls	r3, r3, #31
 8006ed8:	d506      	bpl.n	8006ee8 <__swbuf_r+0x6c>
 8006eda:	2e0a      	cmp	r6, #10
 8006edc:	d104      	bne.n	8006ee8 <__swbuf_r+0x6c>
 8006ede:	4621      	mov	r1, r4
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	f000 f933 	bl	800714c <_fflush_r>
 8006ee6:	b988      	cbnz	r0, 8006f0c <__swbuf_r+0x90>
 8006ee8:	4638      	mov	r0, r7
 8006eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eec:	4b0a      	ldr	r3, [pc, #40]	; (8006f18 <__swbuf_r+0x9c>)
 8006eee:	429c      	cmp	r4, r3
 8006ef0:	d101      	bne.n	8006ef6 <__swbuf_r+0x7a>
 8006ef2:	68ac      	ldr	r4, [r5, #8]
 8006ef4:	e7cf      	b.n	8006e96 <__swbuf_r+0x1a>
 8006ef6:	4b09      	ldr	r3, [pc, #36]	; (8006f1c <__swbuf_r+0xa0>)
 8006ef8:	429c      	cmp	r4, r3
 8006efa:	bf08      	it	eq
 8006efc:	68ec      	ldreq	r4, [r5, #12]
 8006efe:	e7ca      	b.n	8006e96 <__swbuf_r+0x1a>
 8006f00:	4621      	mov	r1, r4
 8006f02:	4628      	mov	r0, r5
 8006f04:	f000 f81e 	bl	8006f44 <__swsetup_r>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	d0cb      	beq.n	8006ea4 <__swbuf_r+0x28>
 8006f0c:	f04f 37ff 	mov.w	r7, #4294967295
 8006f10:	e7ea      	b.n	8006ee8 <__swbuf_r+0x6c>
 8006f12:	bf00      	nop
 8006f14:	0800760c 	.word	0x0800760c
 8006f18:	0800762c 	.word	0x0800762c
 8006f1c:	080075ec 	.word	0x080075ec

08006f20 <_write_r>:
 8006f20:	b538      	push	{r3, r4, r5, lr}
 8006f22:	4d07      	ldr	r5, [pc, #28]	; (8006f40 <_write_r+0x20>)
 8006f24:	4604      	mov	r4, r0
 8006f26:	4608      	mov	r0, r1
 8006f28:	4611      	mov	r1, r2
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	602a      	str	r2, [r5, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	f7f9 fa4d 	bl	80003ce <_write>
 8006f34:	1c43      	adds	r3, r0, #1
 8006f36:	d102      	bne.n	8006f3e <_write_r+0x1e>
 8006f38:	682b      	ldr	r3, [r5, #0]
 8006f3a:	b103      	cbz	r3, 8006f3e <_write_r+0x1e>
 8006f3c:	6023      	str	r3, [r4, #0]
 8006f3e:	bd38      	pop	{r3, r4, r5, pc}
 8006f40:	20001b98 	.word	0x20001b98

08006f44 <__swsetup_r>:
 8006f44:	4b32      	ldr	r3, [pc, #200]	; (8007010 <__swsetup_r+0xcc>)
 8006f46:	b570      	push	{r4, r5, r6, lr}
 8006f48:	681d      	ldr	r5, [r3, #0]
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	460c      	mov	r4, r1
 8006f4e:	b125      	cbz	r5, 8006f5a <__swsetup_r+0x16>
 8006f50:	69ab      	ldr	r3, [r5, #24]
 8006f52:	b913      	cbnz	r3, 8006f5a <__swsetup_r+0x16>
 8006f54:	4628      	mov	r0, r5
 8006f56:	f7ff fcd7 	bl	8006908 <__sinit>
 8006f5a:	4b2e      	ldr	r3, [pc, #184]	; (8007014 <__swsetup_r+0xd0>)
 8006f5c:	429c      	cmp	r4, r3
 8006f5e:	d10f      	bne.n	8006f80 <__swsetup_r+0x3c>
 8006f60:	686c      	ldr	r4, [r5, #4]
 8006f62:	89a3      	ldrh	r3, [r4, #12]
 8006f64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f68:	0719      	lsls	r1, r3, #28
 8006f6a:	d42c      	bmi.n	8006fc6 <__swsetup_r+0x82>
 8006f6c:	06dd      	lsls	r5, r3, #27
 8006f6e:	d411      	bmi.n	8006f94 <__swsetup_r+0x50>
 8006f70:	2309      	movs	r3, #9
 8006f72:	6033      	str	r3, [r6, #0]
 8006f74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f78:	81a3      	strh	r3, [r4, #12]
 8006f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7e:	e03e      	b.n	8006ffe <__swsetup_r+0xba>
 8006f80:	4b25      	ldr	r3, [pc, #148]	; (8007018 <__swsetup_r+0xd4>)
 8006f82:	429c      	cmp	r4, r3
 8006f84:	d101      	bne.n	8006f8a <__swsetup_r+0x46>
 8006f86:	68ac      	ldr	r4, [r5, #8]
 8006f88:	e7eb      	b.n	8006f62 <__swsetup_r+0x1e>
 8006f8a:	4b24      	ldr	r3, [pc, #144]	; (800701c <__swsetup_r+0xd8>)
 8006f8c:	429c      	cmp	r4, r3
 8006f8e:	bf08      	it	eq
 8006f90:	68ec      	ldreq	r4, [r5, #12]
 8006f92:	e7e6      	b.n	8006f62 <__swsetup_r+0x1e>
 8006f94:	0758      	lsls	r0, r3, #29
 8006f96:	d512      	bpl.n	8006fbe <__swsetup_r+0x7a>
 8006f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f9a:	b141      	cbz	r1, 8006fae <__swsetup_r+0x6a>
 8006f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fa0:	4299      	cmp	r1, r3
 8006fa2:	d002      	beq.n	8006faa <__swsetup_r+0x66>
 8006fa4:	4630      	mov	r0, r6
 8006fa6:	f000 f991 	bl	80072cc <_free_r>
 8006faa:	2300      	movs	r3, #0
 8006fac:	6363      	str	r3, [r4, #52]	; 0x34
 8006fae:	89a3      	ldrh	r3, [r4, #12]
 8006fb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006fb4:	81a3      	strh	r3, [r4, #12]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	6063      	str	r3, [r4, #4]
 8006fba:	6923      	ldr	r3, [r4, #16]
 8006fbc:	6023      	str	r3, [r4, #0]
 8006fbe:	89a3      	ldrh	r3, [r4, #12]
 8006fc0:	f043 0308 	orr.w	r3, r3, #8
 8006fc4:	81a3      	strh	r3, [r4, #12]
 8006fc6:	6923      	ldr	r3, [r4, #16]
 8006fc8:	b94b      	cbnz	r3, 8006fde <__swsetup_r+0x9a>
 8006fca:	89a3      	ldrh	r3, [r4, #12]
 8006fcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fd4:	d003      	beq.n	8006fde <__swsetup_r+0x9a>
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	4630      	mov	r0, r6
 8006fda:	f000 f92b 	bl	8007234 <__smakebuf_r>
 8006fde:	89a0      	ldrh	r0, [r4, #12]
 8006fe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fe4:	f010 0301 	ands.w	r3, r0, #1
 8006fe8:	d00a      	beq.n	8007000 <__swsetup_r+0xbc>
 8006fea:	2300      	movs	r3, #0
 8006fec:	60a3      	str	r3, [r4, #8]
 8006fee:	6963      	ldr	r3, [r4, #20]
 8006ff0:	425b      	negs	r3, r3
 8006ff2:	61a3      	str	r3, [r4, #24]
 8006ff4:	6923      	ldr	r3, [r4, #16]
 8006ff6:	b943      	cbnz	r3, 800700a <__swsetup_r+0xc6>
 8006ff8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ffc:	d1ba      	bne.n	8006f74 <__swsetup_r+0x30>
 8006ffe:	bd70      	pop	{r4, r5, r6, pc}
 8007000:	0781      	lsls	r1, r0, #30
 8007002:	bf58      	it	pl
 8007004:	6963      	ldrpl	r3, [r4, #20]
 8007006:	60a3      	str	r3, [r4, #8]
 8007008:	e7f4      	b.n	8006ff4 <__swsetup_r+0xb0>
 800700a:	2000      	movs	r0, #0
 800700c:	e7f7      	b.n	8006ffe <__swsetup_r+0xba>
 800700e:	bf00      	nop
 8007010:	20000018 	.word	0x20000018
 8007014:	0800760c 	.word	0x0800760c
 8007018:	0800762c 	.word	0x0800762c
 800701c:	080075ec 	.word	0x080075ec

08007020 <_close_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4d06      	ldr	r5, [pc, #24]	; (800703c <_close_r+0x1c>)
 8007024:	2300      	movs	r3, #0
 8007026:	4604      	mov	r4, r0
 8007028:	4608      	mov	r0, r1
 800702a:	602b      	str	r3, [r5, #0]
 800702c:	f7f9 fc9d 	bl	800096a <_close>
 8007030:	1c43      	adds	r3, r0, #1
 8007032:	d102      	bne.n	800703a <_close_r+0x1a>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	b103      	cbz	r3, 800703a <_close_r+0x1a>
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	bd38      	pop	{r3, r4, r5, pc}
 800703c:	20001b98 	.word	0x20001b98

08007040 <__sflush_r>:
 8007040:	898a      	ldrh	r2, [r1, #12]
 8007042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007046:	4605      	mov	r5, r0
 8007048:	0710      	lsls	r0, r2, #28
 800704a:	460c      	mov	r4, r1
 800704c:	d458      	bmi.n	8007100 <__sflush_r+0xc0>
 800704e:	684b      	ldr	r3, [r1, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	dc05      	bgt.n	8007060 <__sflush_r+0x20>
 8007054:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007056:	2b00      	cmp	r3, #0
 8007058:	dc02      	bgt.n	8007060 <__sflush_r+0x20>
 800705a:	2000      	movs	r0, #0
 800705c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007060:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007062:	2e00      	cmp	r6, #0
 8007064:	d0f9      	beq.n	800705a <__sflush_r+0x1a>
 8007066:	2300      	movs	r3, #0
 8007068:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800706c:	682f      	ldr	r7, [r5, #0]
 800706e:	602b      	str	r3, [r5, #0]
 8007070:	d032      	beq.n	80070d8 <__sflush_r+0x98>
 8007072:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007074:	89a3      	ldrh	r3, [r4, #12]
 8007076:	075a      	lsls	r2, r3, #29
 8007078:	d505      	bpl.n	8007086 <__sflush_r+0x46>
 800707a:	6863      	ldr	r3, [r4, #4]
 800707c:	1ac0      	subs	r0, r0, r3
 800707e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007080:	b10b      	cbz	r3, 8007086 <__sflush_r+0x46>
 8007082:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007084:	1ac0      	subs	r0, r0, r3
 8007086:	2300      	movs	r3, #0
 8007088:	4602      	mov	r2, r0
 800708a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800708c:	6a21      	ldr	r1, [r4, #32]
 800708e:	4628      	mov	r0, r5
 8007090:	47b0      	blx	r6
 8007092:	1c43      	adds	r3, r0, #1
 8007094:	89a3      	ldrh	r3, [r4, #12]
 8007096:	d106      	bne.n	80070a6 <__sflush_r+0x66>
 8007098:	6829      	ldr	r1, [r5, #0]
 800709a:	291d      	cmp	r1, #29
 800709c:	d82c      	bhi.n	80070f8 <__sflush_r+0xb8>
 800709e:	4a2a      	ldr	r2, [pc, #168]	; (8007148 <__sflush_r+0x108>)
 80070a0:	40ca      	lsrs	r2, r1
 80070a2:	07d6      	lsls	r6, r2, #31
 80070a4:	d528      	bpl.n	80070f8 <__sflush_r+0xb8>
 80070a6:	2200      	movs	r2, #0
 80070a8:	6062      	str	r2, [r4, #4]
 80070aa:	04d9      	lsls	r1, r3, #19
 80070ac:	6922      	ldr	r2, [r4, #16]
 80070ae:	6022      	str	r2, [r4, #0]
 80070b0:	d504      	bpl.n	80070bc <__sflush_r+0x7c>
 80070b2:	1c42      	adds	r2, r0, #1
 80070b4:	d101      	bne.n	80070ba <__sflush_r+0x7a>
 80070b6:	682b      	ldr	r3, [r5, #0]
 80070b8:	b903      	cbnz	r3, 80070bc <__sflush_r+0x7c>
 80070ba:	6560      	str	r0, [r4, #84]	; 0x54
 80070bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070be:	602f      	str	r7, [r5, #0]
 80070c0:	2900      	cmp	r1, #0
 80070c2:	d0ca      	beq.n	800705a <__sflush_r+0x1a>
 80070c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070c8:	4299      	cmp	r1, r3
 80070ca:	d002      	beq.n	80070d2 <__sflush_r+0x92>
 80070cc:	4628      	mov	r0, r5
 80070ce:	f000 f8fd 	bl	80072cc <_free_r>
 80070d2:	2000      	movs	r0, #0
 80070d4:	6360      	str	r0, [r4, #52]	; 0x34
 80070d6:	e7c1      	b.n	800705c <__sflush_r+0x1c>
 80070d8:	6a21      	ldr	r1, [r4, #32]
 80070da:	2301      	movs	r3, #1
 80070dc:	4628      	mov	r0, r5
 80070de:	47b0      	blx	r6
 80070e0:	1c41      	adds	r1, r0, #1
 80070e2:	d1c7      	bne.n	8007074 <__sflush_r+0x34>
 80070e4:	682b      	ldr	r3, [r5, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d0c4      	beq.n	8007074 <__sflush_r+0x34>
 80070ea:	2b1d      	cmp	r3, #29
 80070ec:	d001      	beq.n	80070f2 <__sflush_r+0xb2>
 80070ee:	2b16      	cmp	r3, #22
 80070f0:	d101      	bne.n	80070f6 <__sflush_r+0xb6>
 80070f2:	602f      	str	r7, [r5, #0]
 80070f4:	e7b1      	b.n	800705a <__sflush_r+0x1a>
 80070f6:	89a3      	ldrh	r3, [r4, #12]
 80070f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070fc:	81a3      	strh	r3, [r4, #12]
 80070fe:	e7ad      	b.n	800705c <__sflush_r+0x1c>
 8007100:	690f      	ldr	r7, [r1, #16]
 8007102:	2f00      	cmp	r7, #0
 8007104:	d0a9      	beq.n	800705a <__sflush_r+0x1a>
 8007106:	0793      	lsls	r3, r2, #30
 8007108:	680e      	ldr	r6, [r1, #0]
 800710a:	bf08      	it	eq
 800710c:	694b      	ldreq	r3, [r1, #20]
 800710e:	600f      	str	r7, [r1, #0]
 8007110:	bf18      	it	ne
 8007112:	2300      	movne	r3, #0
 8007114:	eba6 0807 	sub.w	r8, r6, r7
 8007118:	608b      	str	r3, [r1, #8]
 800711a:	f1b8 0f00 	cmp.w	r8, #0
 800711e:	dd9c      	ble.n	800705a <__sflush_r+0x1a>
 8007120:	6a21      	ldr	r1, [r4, #32]
 8007122:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007124:	4643      	mov	r3, r8
 8007126:	463a      	mov	r2, r7
 8007128:	4628      	mov	r0, r5
 800712a:	47b0      	blx	r6
 800712c:	2800      	cmp	r0, #0
 800712e:	dc06      	bgt.n	800713e <__sflush_r+0xfe>
 8007130:	89a3      	ldrh	r3, [r4, #12]
 8007132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007136:	81a3      	strh	r3, [r4, #12]
 8007138:	f04f 30ff 	mov.w	r0, #4294967295
 800713c:	e78e      	b.n	800705c <__sflush_r+0x1c>
 800713e:	4407      	add	r7, r0
 8007140:	eba8 0800 	sub.w	r8, r8, r0
 8007144:	e7e9      	b.n	800711a <__sflush_r+0xda>
 8007146:	bf00      	nop
 8007148:	20400001 	.word	0x20400001

0800714c <_fflush_r>:
 800714c:	b538      	push	{r3, r4, r5, lr}
 800714e:	690b      	ldr	r3, [r1, #16]
 8007150:	4605      	mov	r5, r0
 8007152:	460c      	mov	r4, r1
 8007154:	b913      	cbnz	r3, 800715c <_fflush_r+0x10>
 8007156:	2500      	movs	r5, #0
 8007158:	4628      	mov	r0, r5
 800715a:	bd38      	pop	{r3, r4, r5, pc}
 800715c:	b118      	cbz	r0, 8007166 <_fflush_r+0x1a>
 800715e:	6983      	ldr	r3, [r0, #24]
 8007160:	b90b      	cbnz	r3, 8007166 <_fflush_r+0x1a>
 8007162:	f7ff fbd1 	bl	8006908 <__sinit>
 8007166:	4b14      	ldr	r3, [pc, #80]	; (80071b8 <_fflush_r+0x6c>)
 8007168:	429c      	cmp	r4, r3
 800716a:	d11b      	bne.n	80071a4 <_fflush_r+0x58>
 800716c:	686c      	ldr	r4, [r5, #4]
 800716e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0ef      	beq.n	8007156 <_fflush_r+0xa>
 8007176:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007178:	07d0      	lsls	r0, r2, #31
 800717a:	d404      	bmi.n	8007186 <_fflush_r+0x3a>
 800717c:	0599      	lsls	r1, r3, #22
 800717e:	d402      	bmi.n	8007186 <_fflush_r+0x3a>
 8007180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007182:	f7ff fc84 	bl	8006a8e <__retarget_lock_acquire_recursive>
 8007186:	4628      	mov	r0, r5
 8007188:	4621      	mov	r1, r4
 800718a:	f7ff ff59 	bl	8007040 <__sflush_r>
 800718e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007190:	07da      	lsls	r2, r3, #31
 8007192:	4605      	mov	r5, r0
 8007194:	d4e0      	bmi.n	8007158 <_fflush_r+0xc>
 8007196:	89a3      	ldrh	r3, [r4, #12]
 8007198:	059b      	lsls	r3, r3, #22
 800719a:	d4dd      	bmi.n	8007158 <_fflush_r+0xc>
 800719c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800719e:	f7ff fc77 	bl	8006a90 <__retarget_lock_release_recursive>
 80071a2:	e7d9      	b.n	8007158 <_fflush_r+0xc>
 80071a4:	4b05      	ldr	r3, [pc, #20]	; (80071bc <_fflush_r+0x70>)
 80071a6:	429c      	cmp	r4, r3
 80071a8:	d101      	bne.n	80071ae <_fflush_r+0x62>
 80071aa:	68ac      	ldr	r4, [r5, #8]
 80071ac:	e7df      	b.n	800716e <_fflush_r+0x22>
 80071ae:	4b04      	ldr	r3, [pc, #16]	; (80071c0 <_fflush_r+0x74>)
 80071b0:	429c      	cmp	r4, r3
 80071b2:	bf08      	it	eq
 80071b4:	68ec      	ldreq	r4, [r5, #12]
 80071b6:	e7da      	b.n	800716e <_fflush_r+0x22>
 80071b8:	0800760c 	.word	0x0800760c
 80071bc:	0800762c 	.word	0x0800762c
 80071c0:	080075ec 	.word	0x080075ec

080071c4 <_lseek_r>:
 80071c4:	b538      	push	{r3, r4, r5, lr}
 80071c6:	4d07      	ldr	r5, [pc, #28]	; (80071e4 <_lseek_r+0x20>)
 80071c8:	4604      	mov	r4, r0
 80071ca:	4608      	mov	r0, r1
 80071cc:	4611      	mov	r1, r2
 80071ce:	2200      	movs	r2, #0
 80071d0:	602a      	str	r2, [r5, #0]
 80071d2:	461a      	mov	r2, r3
 80071d4:	f7f9 fbf0 	bl	80009b8 <_lseek>
 80071d8:	1c43      	adds	r3, r0, #1
 80071da:	d102      	bne.n	80071e2 <_lseek_r+0x1e>
 80071dc:	682b      	ldr	r3, [r5, #0]
 80071de:	b103      	cbz	r3, 80071e2 <_lseek_r+0x1e>
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	bd38      	pop	{r3, r4, r5, pc}
 80071e4:	20001b98 	.word	0x20001b98

080071e8 <__swhatbuf_r>:
 80071e8:	b570      	push	{r4, r5, r6, lr}
 80071ea:	460e      	mov	r6, r1
 80071ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071f0:	2900      	cmp	r1, #0
 80071f2:	b096      	sub	sp, #88	; 0x58
 80071f4:	4614      	mov	r4, r2
 80071f6:	461d      	mov	r5, r3
 80071f8:	da08      	bge.n	800720c <__swhatbuf_r+0x24>
 80071fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	602a      	str	r2, [r5, #0]
 8007202:	061a      	lsls	r2, r3, #24
 8007204:	d410      	bmi.n	8007228 <__swhatbuf_r+0x40>
 8007206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800720a:	e00e      	b.n	800722a <__swhatbuf_r+0x42>
 800720c:	466a      	mov	r2, sp
 800720e:	f000 f903 	bl	8007418 <_fstat_r>
 8007212:	2800      	cmp	r0, #0
 8007214:	dbf1      	blt.n	80071fa <__swhatbuf_r+0x12>
 8007216:	9a01      	ldr	r2, [sp, #4]
 8007218:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800721c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007220:	425a      	negs	r2, r3
 8007222:	415a      	adcs	r2, r3
 8007224:	602a      	str	r2, [r5, #0]
 8007226:	e7ee      	b.n	8007206 <__swhatbuf_r+0x1e>
 8007228:	2340      	movs	r3, #64	; 0x40
 800722a:	2000      	movs	r0, #0
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	b016      	add	sp, #88	; 0x58
 8007230:	bd70      	pop	{r4, r5, r6, pc}
	...

08007234 <__smakebuf_r>:
 8007234:	898b      	ldrh	r3, [r1, #12]
 8007236:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007238:	079d      	lsls	r5, r3, #30
 800723a:	4606      	mov	r6, r0
 800723c:	460c      	mov	r4, r1
 800723e:	d507      	bpl.n	8007250 <__smakebuf_r+0x1c>
 8007240:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007244:	6023      	str	r3, [r4, #0]
 8007246:	6123      	str	r3, [r4, #16]
 8007248:	2301      	movs	r3, #1
 800724a:	6163      	str	r3, [r4, #20]
 800724c:	b002      	add	sp, #8
 800724e:	bd70      	pop	{r4, r5, r6, pc}
 8007250:	ab01      	add	r3, sp, #4
 8007252:	466a      	mov	r2, sp
 8007254:	f7ff ffc8 	bl	80071e8 <__swhatbuf_r>
 8007258:	9900      	ldr	r1, [sp, #0]
 800725a:	4605      	mov	r5, r0
 800725c:	4630      	mov	r0, r6
 800725e:	f7ff fc4f 	bl	8006b00 <_malloc_r>
 8007262:	b948      	cbnz	r0, 8007278 <__smakebuf_r+0x44>
 8007264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007268:	059a      	lsls	r2, r3, #22
 800726a:	d4ef      	bmi.n	800724c <__smakebuf_r+0x18>
 800726c:	f023 0303 	bic.w	r3, r3, #3
 8007270:	f043 0302 	orr.w	r3, r3, #2
 8007274:	81a3      	strh	r3, [r4, #12]
 8007276:	e7e3      	b.n	8007240 <__smakebuf_r+0xc>
 8007278:	4b0d      	ldr	r3, [pc, #52]	; (80072b0 <__smakebuf_r+0x7c>)
 800727a:	62b3      	str	r3, [r6, #40]	; 0x28
 800727c:	89a3      	ldrh	r3, [r4, #12]
 800727e:	6020      	str	r0, [r4, #0]
 8007280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007284:	81a3      	strh	r3, [r4, #12]
 8007286:	9b00      	ldr	r3, [sp, #0]
 8007288:	6163      	str	r3, [r4, #20]
 800728a:	9b01      	ldr	r3, [sp, #4]
 800728c:	6120      	str	r0, [r4, #16]
 800728e:	b15b      	cbz	r3, 80072a8 <__smakebuf_r+0x74>
 8007290:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007294:	4630      	mov	r0, r6
 8007296:	f000 f8d1 	bl	800743c <_isatty_r>
 800729a:	b128      	cbz	r0, 80072a8 <__smakebuf_r+0x74>
 800729c:	89a3      	ldrh	r3, [r4, #12]
 800729e:	f023 0303 	bic.w	r3, r3, #3
 80072a2:	f043 0301 	orr.w	r3, r3, #1
 80072a6:	81a3      	strh	r3, [r4, #12]
 80072a8:	89a0      	ldrh	r0, [r4, #12]
 80072aa:	4305      	orrs	r5, r0
 80072ac:	81a5      	strh	r5, [r4, #12]
 80072ae:	e7cd      	b.n	800724c <__smakebuf_r+0x18>
 80072b0:	080068a1 	.word	0x080068a1

080072b4 <__malloc_lock>:
 80072b4:	4801      	ldr	r0, [pc, #4]	; (80072bc <__malloc_lock+0x8>)
 80072b6:	f7ff bbea 	b.w	8006a8e <__retarget_lock_acquire_recursive>
 80072ba:	bf00      	nop
 80072bc:	20001b8c 	.word	0x20001b8c

080072c0 <__malloc_unlock>:
 80072c0:	4801      	ldr	r0, [pc, #4]	; (80072c8 <__malloc_unlock+0x8>)
 80072c2:	f7ff bbe5 	b.w	8006a90 <__retarget_lock_release_recursive>
 80072c6:	bf00      	nop
 80072c8:	20001b8c 	.word	0x20001b8c

080072cc <_free_r>:
 80072cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072ce:	2900      	cmp	r1, #0
 80072d0:	d044      	beq.n	800735c <_free_r+0x90>
 80072d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072d6:	9001      	str	r0, [sp, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f1a1 0404 	sub.w	r4, r1, #4
 80072de:	bfb8      	it	lt
 80072e0:	18e4      	addlt	r4, r4, r3
 80072e2:	f7ff ffe7 	bl	80072b4 <__malloc_lock>
 80072e6:	4a1e      	ldr	r2, [pc, #120]	; (8007360 <_free_r+0x94>)
 80072e8:	9801      	ldr	r0, [sp, #4]
 80072ea:	6813      	ldr	r3, [r2, #0]
 80072ec:	b933      	cbnz	r3, 80072fc <_free_r+0x30>
 80072ee:	6063      	str	r3, [r4, #4]
 80072f0:	6014      	str	r4, [r2, #0]
 80072f2:	b003      	add	sp, #12
 80072f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072f8:	f7ff bfe2 	b.w	80072c0 <__malloc_unlock>
 80072fc:	42a3      	cmp	r3, r4
 80072fe:	d908      	bls.n	8007312 <_free_r+0x46>
 8007300:	6825      	ldr	r5, [r4, #0]
 8007302:	1961      	adds	r1, r4, r5
 8007304:	428b      	cmp	r3, r1
 8007306:	bf01      	itttt	eq
 8007308:	6819      	ldreq	r1, [r3, #0]
 800730a:	685b      	ldreq	r3, [r3, #4]
 800730c:	1949      	addeq	r1, r1, r5
 800730e:	6021      	streq	r1, [r4, #0]
 8007310:	e7ed      	b.n	80072ee <_free_r+0x22>
 8007312:	461a      	mov	r2, r3
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	b10b      	cbz	r3, 800731c <_free_r+0x50>
 8007318:	42a3      	cmp	r3, r4
 800731a:	d9fa      	bls.n	8007312 <_free_r+0x46>
 800731c:	6811      	ldr	r1, [r2, #0]
 800731e:	1855      	adds	r5, r2, r1
 8007320:	42a5      	cmp	r5, r4
 8007322:	d10b      	bne.n	800733c <_free_r+0x70>
 8007324:	6824      	ldr	r4, [r4, #0]
 8007326:	4421      	add	r1, r4
 8007328:	1854      	adds	r4, r2, r1
 800732a:	42a3      	cmp	r3, r4
 800732c:	6011      	str	r1, [r2, #0]
 800732e:	d1e0      	bne.n	80072f2 <_free_r+0x26>
 8007330:	681c      	ldr	r4, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	6053      	str	r3, [r2, #4]
 8007336:	4421      	add	r1, r4
 8007338:	6011      	str	r1, [r2, #0]
 800733a:	e7da      	b.n	80072f2 <_free_r+0x26>
 800733c:	d902      	bls.n	8007344 <_free_r+0x78>
 800733e:	230c      	movs	r3, #12
 8007340:	6003      	str	r3, [r0, #0]
 8007342:	e7d6      	b.n	80072f2 <_free_r+0x26>
 8007344:	6825      	ldr	r5, [r4, #0]
 8007346:	1961      	adds	r1, r4, r5
 8007348:	428b      	cmp	r3, r1
 800734a:	bf04      	itt	eq
 800734c:	6819      	ldreq	r1, [r3, #0]
 800734e:	685b      	ldreq	r3, [r3, #4]
 8007350:	6063      	str	r3, [r4, #4]
 8007352:	bf04      	itt	eq
 8007354:	1949      	addeq	r1, r1, r5
 8007356:	6021      	streq	r1, [r4, #0]
 8007358:	6054      	str	r4, [r2, #4]
 800735a:	e7ca      	b.n	80072f2 <_free_r+0x26>
 800735c:	b003      	add	sp, #12
 800735e:	bd30      	pop	{r4, r5, pc}
 8007360:	20001b90 	.word	0x20001b90

08007364 <_putc_r>:
 8007364:	b570      	push	{r4, r5, r6, lr}
 8007366:	460d      	mov	r5, r1
 8007368:	4614      	mov	r4, r2
 800736a:	4606      	mov	r6, r0
 800736c:	b118      	cbz	r0, 8007376 <_putc_r+0x12>
 800736e:	6983      	ldr	r3, [r0, #24]
 8007370:	b90b      	cbnz	r3, 8007376 <_putc_r+0x12>
 8007372:	f7ff fac9 	bl	8006908 <__sinit>
 8007376:	4b1c      	ldr	r3, [pc, #112]	; (80073e8 <_putc_r+0x84>)
 8007378:	429c      	cmp	r4, r3
 800737a:	d124      	bne.n	80073c6 <_putc_r+0x62>
 800737c:	6874      	ldr	r4, [r6, #4]
 800737e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007380:	07d8      	lsls	r0, r3, #31
 8007382:	d405      	bmi.n	8007390 <_putc_r+0x2c>
 8007384:	89a3      	ldrh	r3, [r4, #12]
 8007386:	0599      	lsls	r1, r3, #22
 8007388:	d402      	bmi.n	8007390 <_putc_r+0x2c>
 800738a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800738c:	f7ff fb7f 	bl	8006a8e <__retarget_lock_acquire_recursive>
 8007390:	68a3      	ldr	r3, [r4, #8]
 8007392:	3b01      	subs	r3, #1
 8007394:	2b00      	cmp	r3, #0
 8007396:	60a3      	str	r3, [r4, #8]
 8007398:	da05      	bge.n	80073a6 <_putc_r+0x42>
 800739a:	69a2      	ldr	r2, [r4, #24]
 800739c:	4293      	cmp	r3, r2
 800739e:	db1c      	blt.n	80073da <_putc_r+0x76>
 80073a0:	b2eb      	uxtb	r3, r5
 80073a2:	2b0a      	cmp	r3, #10
 80073a4:	d019      	beq.n	80073da <_putc_r+0x76>
 80073a6:	6823      	ldr	r3, [r4, #0]
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	6022      	str	r2, [r4, #0]
 80073ac:	701d      	strb	r5, [r3, #0]
 80073ae:	b2ed      	uxtb	r5, r5
 80073b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073b2:	07da      	lsls	r2, r3, #31
 80073b4:	d405      	bmi.n	80073c2 <_putc_r+0x5e>
 80073b6:	89a3      	ldrh	r3, [r4, #12]
 80073b8:	059b      	lsls	r3, r3, #22
 80073ba:	d402      	bmi.n	80073c2 <_putc_r+0x5e>
 80073bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073be:	f7ff fb67 	bl	8006a90 <__retarget_lock_release_recursive>
 80073c2:	4628      	mov	r0, r5
 80073c4:	bd70      	pop	{r4, r5, r6, pc}
 80073c6:	4b09      	ldr	r3, [pc, #36]	; (80073ec <_putc_r+0x88>)
 80073c8:	429c      	cmp	r4, r3
 80073ca:	d101      	bne.n	80073d0 <_putc_r+0x6c>
 80073cc:	68b4      	ldr	r4, [r6, #8]
 80073ce:	e7d6      	b.n	800737e <_putc_r+0x1a>
 80073d0:	4b07      	ldr	r3, [pc, #28]	; (80073f0 <_putc_r+0x8c>)
 80073d2:	429c      	cmp	r4, r3
 80073d4:	bf08      	it	eq
 80073d6:	68f4      	ldreq	r4, [r6, #12]
 80073d8:	e7d1      	b.n	800737e <_putc_r+0x1a>
 80073da:	4629      	mov	r1, r5
 80073dc:	4622      	mov	r2, r4
 80073de:	4630      	mov	r0, r6
 80073e0:	f7ff fd4c 	bl	8006e7c <__swbuf_r>
 80073e4:	4605      	mov	r5, r0
 80073e6:	e7e3      	b.n	80073b0 <_putc_r+0x4c>
 80073e8:	0800760c 	.word	0x0800760c
 80073ec:	0800762c 	.word	0x0800762c
 80073f0:	080075ec 	.word	0x080075ec

080073f4 <_read_r>:
 80073f4:	b538      	push	{r3, r4, r5, lr}
 80073f6:	4d07      	ldr	r5, [pc, #28]	; (8007414 <_read_r+0x20>)
 80073f8:	4604      	mov	r4, r0
 80073fa:	4608      	mov	r0, r1
 80073fc:	4611      	mov	r1, r2
 80073fe:	2200      	movs	r2, #0
 8007400:	602a      	str	r2, [r5, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	f7f9 fa94 	bl	8000930 <_read>
 8007408:	1c43      	adds	r3, r0, #1
 800740a:	d102      	bne.n	8007412 <_read_r+0x1e>
 800740c:	682b      	ldr	r3, [r5, #0]
 800740e:	b103      	cbz	r3, 8007412 <_read_r+0x1e>
 8007410:	6023      	str	r3, [r4, #0]
 8007412:	bd38      	pop	{r3, r4, r5, pc}
 8007414:	20001b98 	.word	0x20001b98

08007418 <_fstat_r>:
 8007418:	b538      	push	{r3, r4, r5, lr}
 800741a:	4d07      	ldr	r5, [pc, #28]	; (8007438 <_fstat_r+0x20>)
 800741c:	2300      	movs	r3, #0
 800741e:	4604      	mov	r4, r0
 8007420:	4608      	mov	r0, r1
 8007422:	4611      	mov	r1, r2
 8007424:	602b      	str	r3, [r5, #0]
 8007426:	f7f9 faac 	bl	8000982 <_fstat>
 800742a:	1c43      	adds	r3, r0, #1
 800742c:	d102      	bne.n	8007434 <_fstat_r+0x1c>
 800742e:	682b      	ldr	r3, [r5, #0]
 8007430:	b103      	cbz	r3, 8007434 <_fstat_r+0x1c>
 8007432:	6023      	str	r3, [r4, #0]
 8007434:	bd38      	pop	{r3, r4, r5, pc}
 8007436:	bf00      	nop
 8007438:	20001b98 	.word	0x20001b98

0800743c <_isatty_r>:
 800743c:	b538      	push	{r3, r4, r5, lr}
 800743e:	4d06      	ldr	r5, [pc, #24]	; (8007458 <_isatty_r+0x1c>)
 8007440:	2300      	movs	r3, #0
 8007442:	4604      	mov	r4, r0
 8007444:	4608      	mov	r0, r1
 8007446:	602b      	str	r3, [r5, #0]
 8007448:	f7f9 faab 	bl	80009a2 <_isatty>
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	d102      	bne.n	8007456 <_isatty_r+0x1a>
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	b103      	cbz	r3, 8007456 <_isatty_r+0x1a>
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	bd38      	pop	{r3, r4, r5, pc}
 8007458:	20001b98 	.word	0x20001b98

0800745c <_init>:
 800745c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745e:	bf00      	nop
 8007460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007462:	bc08      	pop	{r3}
 8007464:	469e      	mov	lr, r3
 8007466:	4770      	bx	lr

08007468 <_fini>:
 8007468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746a:	bf00      	nop
 800746c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800746e:	bc08      	pop	{r3}
 8007470:	469e      	mov	lr, r3
 8007472:	4770      	bx	lr
