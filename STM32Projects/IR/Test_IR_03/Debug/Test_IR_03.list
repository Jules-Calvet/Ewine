
Test_IR_03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008874  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  080089b8  080089b8  000189b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008f3c  08008f3c  00018f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008f44  08008f44  00018f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008f48  08008f48  00018f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000008  08008f4c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000490  200001e4  08009128  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000674  08009128  00020674  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fda8  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004014  00000000  00000000  0003ffbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001eb8  00000000  00000000  00043fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001d20  00000000  00000000  00045e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00025763  00000000  00000000  00047ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001fb30  00000000  00000000  0006d30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e8100  00000000  00000000  0008ce3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00174f3b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000930c  00000000  00000000  00174f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800899c 	.word	0x0800899c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	0800899c 	.word	0x0800899c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b974 	b.w	8000e58 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	468e      	mov	lr, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14d      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4694      	mov	ip, r2
 8000b9a:	d969      	bls.n	8000c70 <__udivmoddi4+0xe8>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b152      	cbz	r2, 8000bb8 <__udivmoddi4+0x30>
 8000ba2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ba6:	f1c2 0120 	rsb	r1, r2, #32
 8000baa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bb6:	4094      	lsls	r4, r2
 8000bb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bbc:	0c21      	lsrs	r1, r4, #16
 8000bbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000bc2:	fa1f f78c 	uxth.w	r7, ip
 8000bc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bce:	fb06 f107 	mul.w	r1, r6, r7
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bde:	f080 811f 	bcs.w	8000e20 <__udivmoddi4+0x298>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 811c 	bls.w	8000e20 <__udivmoddi4+0x298>
 8000be8:	3e02      	subs	r6, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a5b      	subs	r3, r3, r1
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bfc:	fb00 f707 	mul.w	r7, r0, r7
 8000c00:	42a7      	cmp	r7, r4
 8000c02:	d90a      	bls.n	8000c1a <__udivmoddi4+0x92>
 8000c04:	eb1c 0404 	adds.w	r4, ip, r4
 8000c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0c:	f080 810a 	bcs.w	8000e24 <__udivmoddi4+0x29c>
 8000c10:	42a7      	cmp	r7, r4
 8000c12:	f240 8107 	bls.w	8000e24 <__udivmoddi4+0x29c>
 8000c16:	4464      	add	r4, ip
 8000c18:	3802      	subs	r0, #2
 8000c1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1e:	1be4      	subs	r4, r4, r7
 8000c20:	2600      	movs	r6, #0
 8000c22:	b11d      	cbz	r5, 8000c2c <__udivmoddi4+0xa4>
 8000c24:	40d4      	lsrs	r4, r2
 8000c26:	2300      	movs	r3, #0
 8000c28:	e9c5 4300 	strd	r4, r3, [r5]
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0xc2>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80ef 	beq.w	8000e1a <__udivmoddi4+0x292>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x160>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xd4>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80f9 	bhi.w	8000e4e <__udivmoddi4+0x2c6>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	469e      	mov	lr, r3
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0e0      	beq.n	8000c2c <__udivmoddi4+0xa4>
 8000c6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c6e:	e7dd      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000c70:	b902      	cbnz	r2, 8000c74 <__udivmoddi4+0xec>
 8000c72:	deff      	udf	#255	; 0xff
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f040 8092 	bne.w	8000da2 <__udivmoddi4+0x21a>
 8000c7e:	eba1 010c 	sub.w	r1, r1, ip
 8000c82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	2601      	movs	r6, #1
 8000c8c:	0c20      	lsrs	r0, r4, #16
 8000c8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c92:	fb07 1113 	mls	r1, r7, r3, r1
 8000c96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c9a:	fb0e f003 	mul.w	r0, lr, r3
 8000c9e:	4288      	cmp	r0, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x12c>
 8000ca2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x12a>
 8000cac:	4288      	cmp	r0, r1
 8000cae:	f200 80cb 	bhi.w	8000e48 <__udivmoddi4+0x2c0>
 8000cb2:	4643      	mov	r3, r8
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x156>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x154>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	f200 80bb 	bhi.w	8000e52 <__udivmoddi4+0x2ca>
 8000cdc:	4608      	mov	r0, r1
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ce6:	e79c      	b.n	8000c22 <__udivmoddi4+0x9a>
 8000ce8:	f1c6 0720 	rsb	r7, r6, #32
 8000cec:	40b3      	lsls	r3, r6
 8000cee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf6:	fa20 f407 	lsr.w	r4, r0, r7
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	431c      	orrs	r4, r3
 8000d00:	40f9      	lsrs	r1, r7
 8000d02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d06:	fa00 f306 	lsl.w	r3, r0, r6
 8000d0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d0e:	0c20      	lsrs	r0, r4, #16
 8000d10:	fa1f fe8c 	uxth.w	lr, ip
 8000d14:	fb09 1118 	mls	r1, r9, r8, r1
 8000d18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d20:	4288      	cmp	r0, r1
 8000d22:	fa02 f206 	lsl.w	r2, r2, r6
 8000d26:	d90b      	bls.n	8000d40 <__udivmoddi4+0x1b8>
 8000d28:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d30:	f080 8088 	bcs.w	8000e44 <__udivmoddi4+0x2bc>
 8000d34:	4288      	cmp	r0, r1
 8000d36:	f240 8085 	bls.w	8000e44 <__udivmoddi4+0x2bc>
 8000d3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	1a09      	subs	r1, r1, r0
 8000d42:	b2a4      	uxth	r4, r4
 8000d44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d48:	fb09 1110 	mls	r1, r9, r0, r1
 8000d4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d54:	458e      	cmp	lr, r1
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1e2>
 8000d58:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d60:	d26c      	bcs.n	8000e3c <__udivmoddi4+0x2b4>
 8000d62:	458e      	cmp	lr, r1
 8000d64:	d96a      	bls.n	8000e3c <__udivmoddi4+0x2b4>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4461      	add	r1, ip
 8000d6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d72:	eba1 010e 	sub.w	r1, r1, lr
 8000d76:	42a1      	cmp	r1, r4
 8000d78:	46c8      	mov	r8, r9
 8000d7a:	46a6      	mov	lr, r4
 8000d7c:	d356      	bcc.n	8000e2c <__udivmoddi4+0x2a4>
 8000d7e:	d053      	beq.n	8000e28 <__udivmoddi4+0x2a0>
 8000d80:	b15d      	cbz	r5, 8000d9a <__udivmoddi4+0x212>
 8000d82:	ebb3 0208 	subs.w	r2, r3, r8
 8000d86:	eb61 010e 	sbc.w	r1, r1, lr
 8000d8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d92:	40f1      	lsrs	r1, r6
 8000d94:	431f      	orrs	r7, r3
 8000d96:	e9c5 7100 	strd	r7, r1, [r5]
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	f1c2 0320 	rsb	r3, r2, #32
 8000da6:	40d8      	lsrs	r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa21 f303 	lsr.w	r3, r1, r3
 8000db0:	4091      	lsls	r1, r2
 8000db2:	4301      	orrs	r1, r0
 8000db4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db8:	fa1f fe8c 	uxth.w	lr, ip
 8000dbc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dc0:	fb07 3610 	mls	r6, r7, r0, r3
 8000dc4:	0c0b      	lsrs	r3, r1, #16
 8000dc6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dca:	fb00 f60e 	mul.w	r6, r0, lr
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x260>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dde:	d22f      	bcs.n	8000e40 <__udivmoddi4+0x2b8>
 8000de0:	429e      	cmp	r6, r3
 8000de2:	d92d      	bls.n	8000e40 <__udivmoddi4+0x2b8>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	b289      	uxth	r1, r1
 8000dec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000df0:	fb07 3316 	mls	r3, r7, r6, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb06 f30e 	mul.w	r3, r6, lr
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x28a>
 8000e00:	eb1c 0101 	adds.w	r1, ip, r1
 8000e04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e08:	d216      	bcs.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d914      	bls.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0e:	3e02      	subs	r6, #2
 8000e10:	4461      	add	r1, ip
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e18:	e738      	b.n	8000c8c <__udivmoddi4+0x104>
 8000e1a:	462e      	mov	r6, r5
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	e705      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000e20:	4606      	mov	r6, r0
 8000e22:	e6e3      	b.n	8000bec <__udivmoddi4+0x64>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6f8      	b.n	8000c1a <__udivmoddi4+0x92>
 8000e28:	454b      	cmp	r3, r9
 8000e2a:	d2a9      	bcs.n	8000d80 <__udivmoddi4+0x1f8>
 8000e2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e34:	3801      	subs	r0, #1
 8000e36:	e7a3      	b.n	8000d80 <__udivmoddi4+0x1f8>
 8000e38:	4646      	mov	r6, r8
 8000e3a:	e7ea      	b.n	8000e12 <__udivmoddi4+0x28a>
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	e794      	b.n	8000d6a <__udivmoddi4+0x1e2>
 8000e40:	4640      	mov	r0, r8
 8000e42:	e7d1      	b.n	8000de8 <__udivmoddi4+0x260>
 8000e44:	46d0      	mov	r8, sl
 8000e46:	e77b      	b.n	8000d40 <__udivmoddi4+0x1b8>
 8000e48:	3b02      	subs	r3, #2
 8000e4a:	4461      	add	r1, ip
 8000e4c:	e732      	b.n	8000cb4 <__udivmoddi4+0x12c>
 8000e4e:	4630      	mov	r0, r6
 8000e50:	e709      	b.n	8000c66 <__udivmoddi4+0xde>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e742      	b.n	8000cde <__udivmoddi4+0x156>

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e80:	68fb      	ldr	r3, [r7, #12]
}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea4:	2004      	movs	r0, #4
 8000ea6:	f7ff ffd9 	bl	8000e5c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f7ff ffd6 	bl	8000e5c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	f7ff ffd3 	bl	8000e5c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb6:	2008      	movs	r0, #8
 8000eb8:	f7ff ffd0 	bl	8000e5c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2123      	movs	r1, #35	; 0x23
 8000ec0:	4814      	ldr	r0, [pc, #80]	; (8000f14 <MX_GPIO_Init+0x84>)
 8000ec2:	f001 fa47 	bl	8002354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ec6:	2310      	movs	r3, #16
 8000ec8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4810      	ldr	r0, [pc, #64]	; (8000f18 <MX_GPIO_Init+0x88>)
 8000ed8:	f001 f8cc 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000edc:	2323      	movs	r3, #35	; 0x23
 8000ede:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4808      	ldr	r0, [pc, #32]	; (8000f14 <MX_GPIO_Init+0x84>)
 8000ef2:	f001 f8bf 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	4619      	mov	r1, r3
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_GPIO_Init+0x8c>)
 8000f08:	f001 f8b4 	bl	8002074 <HAL_GPIO_Init>

}
 8000f0c:	bf00      	nop
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	48000400 	.word	0x48000400
 8000f18:	48000800 	.word	0x48000800
 8000f1c:	48000c00 	.word	0x48000c00

08000f20 <LL_AHB2_GRP1_EnableClock>:
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4013      	ands	r3, r2
 8000f42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f44:	68fb      	ldr	r3, [r7, #12]
}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b085      	sub	sp, #20
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4013      	ands	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <MX_I2C3_Init+0x74>)
 8000f8a:	4a1c      	ldr	r2, [pc, #112]	; (8000ffc <MX_I2C3_Init+0x78>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <MX_I2C3_Init+0x74>)
 8000f90:	4a1b      	ldr	r2, [pc, #108]	; (8001000 <MX_I2C3_Init+0x7c>)
 8000f92:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <MX_I2C3_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <MX_I2C3_Init+0x74>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <MX_I2C3_Init+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_I2C3_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <MX_I2C3_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_I2C3_Init+0x74>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_I2C3_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000fbe:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <MX_I2C3_Init+0x74>)
 8000fc0:	f001 f9e0 	bl	8002384 <HAL_I2C_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000fca:	f000 fa03 	bl	80013d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <MX_I2C3_Init+0x74>)
 8000fd2:	f001 feed 	bl	8002db0 <HAL_I2CEx_ConfigAnalogFilter>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000fdc:	f000 f9fa 	bl	80013d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_I2C3_Init+0x74>)
 8000fe4:	f001 ff2f 	bl	8002e46 <HAL_I2CEx_ConfigDigitalFilter>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000fee:	f000 f9f1 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000200 	.word	0x20000200
 8000ffc:	40005c00 	.word	0x40005c00
 8001000:	00707cbb 	.word	0x00707cbb

08001004 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b09c      	sub	sp, #112	; 0x70
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	2250      	movs	r2, #80	; 0x50
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f004 ff0f 	bl	8005e48 <memset>
  if(i2cHandle->Instance==I2C3)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a21      	ldr	r2, [pc, #132]	; (80010b4 <HAL_I2C_MspInit+0xb0>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d13a      	bne.n	80010aa <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001034:	2308      	movs	r3, #8
 8001036:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001038:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800103c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fbe0 	bl	8004808 <HAL_RCCEx_PeriphCLKConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800104e:	f000 f9c1 	bl	80013d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	2001      	movs	r0, #1
 8001054:	f7ff ff64 	bl	8000f20 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001058:	2002      	movs	r0, #2
 800105a:	f7ff ff61 	bl	8000f20 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB11     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800105e:	2380      	movs	r3, #128	; 0x80
 8001060:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001062:	2312      	movs	r3, #18
 8001064:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800106e:	2304      	movs	r3, #4
 8001070:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001076:	4619      	mov	r1, r3
 8001078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107c:	f000 fffa 	bl	8002074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001080:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001084:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001086:	2312      	movs	r3, #18
 8001088:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001092:	2304      	movs	r3, #4
 8001094:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800109a:	4619      	mov	r1, r3
 800109c:	4806      	ldr	r0, [pc, #24]	; (80010b8 <HAL_I2C_MspInit+0xb4>)
 800109e:	f000 ffe9 	bl	8002074 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010a2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80010a6:	f7ff ff54 	bl	8000f52 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80010aa:	bf00      	nop
 80010ac:	3770      	adds	r7, #112	; 0x70
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40005c00 	.word	0x40005c00
 80010b8:	48000400 	.word	0x48000400

080010bc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010c8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d013      	beq.n	80010fc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80010d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010d8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80010dc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00b      	beq.n	80010fc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010e4:	e000      	b.n	80010e8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80010e6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80010e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f9      	beq.n	80010e6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80010f2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80010fc:	687b      	ldr	r3, [r7, #4]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800111a:	f023 0218 	bic.w	r2, r3, #24
 800111e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4313      	orrs	r3, r2
 8001126:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	e009      	b.n	800115c <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	60ba      	str	r2, [r7, #8]
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ffb3 	bl	80010bc <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3301      	adds	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	429a      	cmp	r2, r3
 8001162:	dbf1      	blt.n	8001148 <_write+0x12>
}
return len;
 8001164:	687b      	ldr	r3, [r7, #4]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001176:	f000 fe2d 	bl	8001dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117a:	f000 f887 	bl	800128c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800117e:	f000 f8f9 	bl	8001374 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001182:	f7ff fe85 	bl	8000e90 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001186:	f000 fca7 	bl	8001ad8 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 800118a:	f000 fd6b 	bl	8001c64 <MX_USB_PCD_Init>
  MX_I2C3_Init();
 800118e:	f7ff fef9 	bl	8000f84 <MX_I2C3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int i = 1;
 8001192:	2301      	movs	r3, #1
 8001194:	607b      	str	r3, [r7, #4]

  //cap1.unit = MLX90614_UNIT_C;

  if(mlx90614_init() == true)printf("Initialization OK ! \n");
 8001196:	f000 f9a1 	bl	80014dc <mlx90614_init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <main+0x38>
 80011a0:	4833      	ldr	r0, [pc, #204]	; (8001270 <main+0x100>)
 80011a2:	f005 fb49 	bl	8006838 <puts>
 80011a6:	e002      	b.n	80011ae <main+0x3e>
  else printf("Initialization Failed ! \n");
 80011a8:	4832      	ldr	r0, [pc, #200]	; (8001274 <main+0x104>)
 80011aa:	f005 fb45 	bl	8006838 <puts>
  }
*/
  //mlx90614_setUnit(MLX90614_UNIT_C);

  //float tobj = 0.0f;
  mlx90614.configReg.DualIRSensor = 0;
 80011ae:	4a32      	ldr	r2, [pc, #200]	; (8001278 <main+0x108>)
 80011b0:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80011b4:	f36f 1386 	bfc	r3, #6, #1
 80011b8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
  mlx90614.configReg.SelectObjAmb = 1;
 80011bc:	4a2e      	ldr	r2, [pc, #184]	; (8001278 <main+0x108>)
 80011be:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80011c2:	2101      	movs	r1, #1
 80011c4:	f361 1305 	bfi	r3, r1, #4, #2
 80011c8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
  mlx90614.configReg.FIR = 4;
 80011cc:	4a2a      	ldr	r2, [pc, #168]	; (8001278 <main+0x108>)
 80011ce:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 80011d2:	2104      	movs	r1, #4
 80011d4:	f361 0302 	bfi	r3, r1, #0, #3
 80011d8:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
  if(mlx90614_setEmissivity(cap1->emissivity) == true) printf("setEmissivity OK : %0.2f \n", cap1->emissivity);
  else printf("setEmissivity failed !\n");
*/
  while (1)
  {
	  if(mlx90614_init() == true)printf("Initialization OK ! \n");
 80011dc:	f000 f97e 	bl	80014dc <mlx90614_init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <main+0x7e>
 80011e6:	4822      	ldr	r0, [pc, #136]	; (8001270 <main+0x100>)
 80011e8:	f005 fb26 	bl	8006838 <puts>
 80011ec:	e002      	b.n	80011f4 <main+0x84>
	  else printf("Initialization Failed ! \n");
 80011ee:	4821      	ldr	r0, [pc, #132]	; (8001274 <main+0x104>)
 80011f0:	f005 fb22 	bl	8006838 <puts>
	  mlx90614.configReg.DualIRSensor = 0;
 80011f4:	4a20      	ldr	r2, [pc, #128]	; (8001278 <main+0x108>)
 80011f6:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80011fa:	f36f 1386 	bfc	r3, #6, #1
 80011fe:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	    mlx90614.configReg.SelectObjAmb = 1;
 8001202:	4a1d      	ldr	r2, [pc, #116]	; (8001278 <main+0x108>)
 8001204:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8001208:	2101      	movs	r1, #1
 800120a:	f361 1305 	bfi	r3, r1, #4, #2
 800120e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	    mlx90614.configReg.FIR = 4;
 8001212:	4a19      	ldr	r2, [pc, #100]	; (8001278 <main+0x108>)
 8001214:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8001218:	2104      	movs	r1, #4
 800121a:	f361 0302 	bfi	r3, r1, #0, #3
 800121e:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("loop %d start\n",i);
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	4815      	ldr	r0, [pc, #84]	; (800127c <main+0x10c>)
 8001226:	f005 fa81 	bl	800672c <iprintf>
	  float temp = 0.0f;
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	603b      	str	r3, [r7, #0]

	  //if ( mlx90614_getAmbient(&cap1->ambient) == true ) printf("getAmbient OK : %0.2f *C\n", cap1->ambient);
	  //else printf("Failed to read ambient temperature\n");
	  if ( mlx90614_getAmbient(&temp) == true ) printf("getAmbient OK : %0.2f *C\n", temp);
 8001230:	463b      	mov	r3, r7
 8001232:	4618      	mov	r0, r3
 8001234:	f000 fa5c 	bl	80016f0 <mlx90614_getAmbient>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d009      	beq.n	8001252 <main+0xe2>
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f959 	bl	80004f8 <__aeabi_f2d>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <main+0x110>)
 800124c:	f005 fa6e 	bl	800672c <iprintf>
 8001250:	e002      	b.n	8001258 <main+0xe8>
	  else printf("Failed to read ambient temperature\n");
 8001252:	480c      	ldr	r0, [pc, #48]	; (8001284 <main+0x114>)
 8001254:	f005 faf0 	bl	8006838 <puts>

/*
	  if ( mlx90614_getObject2(&tobj) == true) printf("getObject2 OK : %0.2f *C\n", tobj);
	  else printf("Failed to read Object2 temperature\n");
*/
	  printf("loop %d end\n",i);
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	480b      	ldr	r0, [pc, #44]	; (8001288 <main+0x118>)
 800125c:	f005 fa66 	bl	800672c <iprintf>
	  i++;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3301      	adds	r3, #1
 8001264:	607b      	str	r3, [r7, #4]
	  HAL_Delay(2000);
 8001266:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800126a:	f000 fdff 	bl	8001e6c <HAL_Delay>
  {
 800126e:	e7b5      	b.n	80011dc <main+0x6c>
 8001270:	080089b8 	.word	0x080089b8
 8001274:	080089d0 	.word	0x080089d0
 8001278:	20000254 	.word	0x20000254
 800127c:	080089ec 	.word	0x080089ec
 8001280:	080089fc 	.word	0x080089fc
 8001284:	08008a18 	.word	0x08008a18
 8001288:	08008a3c 	.word	0x08008a3c

0800128c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b09a      	sub	sp, #104	; 0x68
 8001290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001292:	f107 0320 	add.w	r3, r7, #32
 8001296:	2248      	movs	r2, #72	; 0x48
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f004 fdd4 	bl	8005e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]
 80012ae:	615a      	str	r2, [r3, #20]
 80012b0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012b2:	f001 ff17 	bl	80030e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012b6:	2000      	movs	r0, #0
 80012b8:	f7ff ff27 	bl	800110a <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012bc:	4b2c      	ldr	r3, [pc, #176]	; (8001370 <SystemClock_Config+0xe4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012c4:	4a2a      	ldr	r2, [pc, #168]	; (8001370 <SystemClock_Config+0xe4>)
 80012c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b28      	ldr	r3, [pc, #160]	; (8001370 <SystemClock_Config+0xe4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80012d8:	2327      	movs	r3, #39	; 0x27
 80012da:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012e2:	2301      	movs	r3, #1
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012ec:	2301      	movs	r3, #1
 80012ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f0:	2340      	movs	r3, #64	; 0x40
 80012f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80012f4:	2300      	movs	r3, #0
 80012f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012f8:	2360      	movs	r3, #96	; 0x60
 80012fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012fc:	2302      	movs	r3, #2
 80012fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001300:	2301      	movs	r3, #1
 8001302:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001308:	2320      	movs	r3, #32
 800130a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800130c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001310:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001312:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001316:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001318:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800131c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131e:	f107 0320 	add.w	r3, r7, #32
 8001322:	4618      	mov	r0, r3
 8001324:	f002 fa7e 	bl	8003824 <HAL_RCC_OscConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800132e:	f000 f851 	bl	80013d4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001332:	236f      	movs	r3, #111	; 0x6f
 8001334:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001336:	2303      	movs	r3, #3
 8001338:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2103      	movs	r1, #3
 8001352:	4618      	mov	r0, r3
 8001354:	f002 fdda 	bl	8003f0c <HAL_RCC_ClockConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800135e:	f000 f839 	bl	80013d4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001362:	f003 fbc7 	bl	8004af4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001366:	bf00      	nop
 8001368:	3768      	adds	r7, #104	; 0x68
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	58000400 	.word	0x58000400

08001374 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b094      	sub	sp, #80	; 0x50
 8001378:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800137a:	463b      	mov	r3, r7
 800137c:	2250      	movs	r2, #80	; 0x50
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f004 fd61 	bl	8005e48 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001386:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800138c:	2300      	movs	r3, #0
 800138e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001390:	2300      	movs	r3, #0
 8001392:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001394:	463b      	mov	r3, r7
 8001396:	4618      	mov	r0, r3
 8001398:	f003 fa36 	bl	8004808 <HAL_RCCEx_PeriphCLKConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80013a2:	f000 f817 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80013a6:	bf00      	nop
 80013a8:	3750      	adds	r7, #80	; 0x50
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013c2:	f000 fd27 	bl	8001e14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40014800 	.word	0x40014800

080013d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d8:	b672      	cpsid	i
}
 80013da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013dc:	e7fe      	b.n	80013dc <Error_Handler+0x8>
	...

080013e0 <mlx90614_read16>:
  }
  return crc;
}
//###################################################################################################
bool mlx90614_read16(uint8_t address, int16_t *data)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af04      	add	r7, sp, #16
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
  uint8_t d[3];
  if(HAL_I2C_Mem_Read(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, d, 3, 100) != HAL_OK)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	2364      	movs	r3, #100	; 0x64
 80013f2:	9302      	str	r3, [sp, #8]
 80013f4:	2303      	movs	r3, #3
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2301      	movs	r3, #1
 8001400:	21b4      	movs	r1, #180	; 0xb4
 8001402:	480b      	ldr	r0, [pc, #44]	; (8001430 <mlx90614_read16+0x50>)
 8001404:	f001 f84e 	bl	80024a4 <HAL_I2C_Mem_Read>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <mlx90614_read16+0x32>
    return false;
 800140e:	2300      	movs	r3, #0
 8001410:	e009      	b.n	8001426 <mlx90614_read16+0x46>
  *data = d[0] | (d[1] << 8);
 8001412:	7b3b      	ldrb	r3, [r7, #12]
 8001414:	b21a      	sxth	r2, r3
 8001416:	7b7b      	ldrb	r3, [r7, #13]
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	b21b      	sxth	r3, r3
 800141c:	4313      	orrs	r3, r2
 800141e:	b21a      	sxth	r2, r3
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	801a      	strh	r2, [r3, #0]
  return true;
 8001424:	2301      	movs	r3, #1
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000200 	.word	0x20000200

08001434 <mlx90614_calcTemperature>:
	}
	return rawTemp;
}
//###################################################################################################
float mlx90614_calcTemperature(int16_t rawTemp)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
	float retTemp;
	if(mlx90614.unit == MLX90614_UNIT_RAW)
 800143e:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <mlx90614_calcTemperature+0x94>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d108      	bne.n	8001458 <mlx90614_calcTemperature+0x24>
	{
		retTemp = (float) rawTemp;
 8001446:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001452:	edc7 7a03 	vstr	s15, [r7, #12]
 8001456:	e02e      	b.n	80014b6 <mlx90614_calcTemperature+0x82>
	}
	else
	{
		retTemp = (float)(rawTemp) * 0.02f;
 8001458:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800145c:	ee07 3a90 	vmov	s15, r3
 8001460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001464:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80014cc <mlx90614_calcTemperature+0x98>
 8001468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800146c:	edc7 7a03 	vstr	s15, [r7, #12]
    if(mlx90614.unit != MLX90614_UNIT_K)
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <mlx90614_calcTemperature+0x94>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d01e      	beq.n	80014b6 <mlx90614_calcTemperature+0x82>
		{
			retTemp -= 273.15f;
 8001478:	edd7 7a03 	vldr	s15, [r7, #12]
 800147c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80014d0 <mlx90614_calcTemperature+0x9c>
 8001480:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001484:	edc7 7a03 	vstr	s15, [r7, #12]
/*
			if(obj == true){
				retTemp = retTemp * 0.26f;
			}
*/
			if(mlx90614.unit == MLX90614_UNIT_F)
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <mlx90614_calcTemperature+0x94>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b03      	cmp	r3, #3
 800148e:	d112      	bne.n	80014b6 <mlx90614_calcTemperature+0x82>
			{
				retTemp = retTemp * 9.0f / 5.0f + 32.0f;
 8001490:	edd7 7a03 	vldr	s15, [r7, #12]
 8001494:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001498:	ee27 7a87 	vmul.f32	s14, s15, s14
 800149c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80014a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80014d4 <mlx90614_calcTemperature+0xa0>
 80014a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014ac:	edc7 7a03 	vstr	s15, [r7, #12]
				printf("Convertion Farenheight Done ! \n");
 80014b0:	4809      	ldr	r0, [pc, #36]	; (80014d8 <mlx90614_calcTemperature+0xa4>)
 80014b2:	f005 f9c1 	bl	8006838 <puts>

			}
		}
	}
	return retTemp;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	ee07 3a90 	vmov	s15, r3
}
 80014bc:	eeb0 0a67 	vmov.f32	s0, s15
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000254 	.word	0x20000254
 80014cc:	3ca3d70a 	.word	0x3ca3d70a
 80014d0:	43889333 	.word	0x43889333
 80014d4:	42000000 	.word	0x42000000
 80014d8:	08008a4c 	.word	0x08008a4c

080014dc <mlx90614_init>:
//###################################################################################################
bool mlx90614_init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  memset(&mlx90614, 0, sizeof(mlx90614));
 80014e0:	2234      	movs	r2, #52	; 0x34
 80014e2:	2100      	movs	r1, #0
 80014e4:	4821      	ldr	r0, [pc, #132]	; (800156c <mlx90614_init+0x90>)
 80014e6:	f004 fcaf 	bl	8005e48 <memset>
  mlx90614.unit = MLX90614_UNIT_C;
 80014ea:	4b20      	ldr	r3, [pc, #128]	; (800156c <mlx90614_init+0x90>)
 80014ec:	2202      	movs	r2, #2
 80014ee:	701a      	strb	r2, [r3, #0]
  if(HAL_I2C_IsDeviceReady(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, 1, 100) != HAL_OK)
 80014f0:	2364      	movs	r3, #100	; 0x64
 80014f2:	2201      	movs	r2, #1
 80014f4:	21b4      	movs	r1, #180	; 0xb4
 80014f6:	481e      	ldr	r0, [pc, #120]	; (8001570 <mlx90614_init+0x94>)
 80014f8:	f001 f8ee 	bl	80026d8 <HAL_I2C_IsDeviceReady>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <mlx90614_init+0x2a>
    return false;
 8001502:	2300      	movs	r3, #0
 8001504:	e030      	b.n	8001568 <mlx90614_init+0x8c>
  mlx90614_read16(MLX90614_REGISTER_CONFIG, (int16_t*)&mlx90614.configReg);
 8001506:	491b      	ldr	r1, [pc, #108]	; (8001574 <mlx90614_init+0x98>)
 8001508:	2025      	movs	r0, #37	; 0x25
 800150a:	f7ff ff69 	bl	80013e0 <mlx90614_read16>
  if(mlx90614_readID(NULL) == false)
 800150e:	2000      	movs	r0, #0
 8001510:	f000 f832 	bl	8001578 <mlx90614_readID>
 8001514:	4603      	mov	r3, r0
 8001516:	f083 0301 	eor.w	r3, r3, #1
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <mlx90614_init+0x48>
    return false;
 8001520:	2300      	movs	r3, #0
 8001522:	e021      	b.n	8001568 <mlx90614_init+0x8c>
  if(mlx90614_getEmissivity(NULL) == false)
 8001524:	2000      	movs	r0, #0
 8001526:	f000 f861 	bl	80015ec <mlx90614_getEmissivity>
 800152a:	4603      	mov	r3, r0
 800152c:	f083 0301 	eor.w	r3, r3, #1
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <mlx90614_init+0x5e>
    return false;
 8001536:	2300      	movs	r3, #0
 8001538:	e016      	b.n	8001568 <mlx90614_init+0x8c>
  if(mlx90614_getMax(NULL) == false)
 800153a:	2000      	movs	r0, #0
 800153c:	f000 f890 	bl	8001660 <mlx90614_getMax>
 8001540:	4603      	mov	r3, r0
 8001542:	f083 0301 	eor.w	r3, r3, #1
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <mlx90614_init+0x74>
    return false;
 800154c:	2300      	movs	r3, #0
 800154e:	e00b      	b.n	8001568 <mlx90614_init+0x8c>
  if(mlx90614_getMin(NULL) == false)
 8001550:	2000      	movs	r0, #0
 8001552:	f000 f8a9 	bl	80016a8 <mlx90614_getMin>
 8001556:	4603      	mov	r3, r0
 8001558:	f083 0301 	eor.w	r3, r3, #1
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <mlx90614_init+0x8a>
    return false;
 8001562:	2300      	movs	r3, #0
 8001564:	e000      	b.n	8001568 <mlx90614_init+0x8c>

  return true;
 8001566:	2301      	movs	r3, #1
}
 8001568:	4618      	mov	r0, r3
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000254 	.word	0x20000254
 8001570:	20000200 	.word	0x20000200
 8001574:	20000284 	.word	0x20000284

08001578 <mlx90614_readID>:
{
  mlx90614.unit = MLX90614_UNIT_;
}
//###################################################################################################
bool mlx90614_readID(int16_t *id)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	for (int i=0; i<4; i++)
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	e028      	b.n	80015d8 <mlx90614_readID+0x60>
	{
		int16_t temp = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	817b      	strh	r3, [r7, #10]
		if (!mlx90614_read16(MLX90614_REGISTER_ID0 + i, &temp))
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	333c      	adds	r3, #60	; 0x3c
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f107 020a 	add.w	r2, r7, #10
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff21 	bl	80013e0 <mlx90614_read16>
 800159e:	4603      	mov	r3, r0
 80015a0:	f083 0301 	eor.w	r3, r3, #1
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <mlx90614_readID+0x36>
			return false;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e018      	b.n	80015e0 <mlx90614_readID+0x68>
		if(id != NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d006      	beq.n	80015c2 <mlx90614_readID+0x4a>
			id[i] = (uint16_t)temp;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	4413      	add	r3, r2
 80015bc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80015c0:	801a      	strh	r2, [r3, #0]
		mlx90614.id[i] = (uint16_t)temp;
 80015c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015c6:	b299      	uxth	r1, r3
 80015c8:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <mlx90614_readID+0x70>)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3314      	adds	r3, #20
 80015ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i<4; i++)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	3301      	adds	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2b03      	cmp	r3, #3
 80015dc:	ddd3      	ble.n	8001586 <mlx90614_readID+0xe>
	}
	return true;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000254 	.word	0x20000254

080015ec <mlx90614_getEmissivity>:
//###################################################################################################
bool mlx90614_getEmissivity(float *emissivity)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_KE, &mlx90614.rawEmissivity))
 80015f4:	4917      	ldr	r1, [pc, #92]	; (8001654 <mlx90614_getEmissivity+0x68>)
 80015f6:	2024      	movs	r0, #36	; 0x24
 80015f8:	f7ff fef2 	bl	80013e0 <mlx90614_read16>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d022      	beq.n	8001648 <mlx90614_getEmissivity+0x5c>
	{
    mlx90614.emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <mlx90614_getEmissivity+0x6c>)
 8001604:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001608:	b29b      	uxth	r3, r3
 800160a:	ee07 3a90 	vmov	s15, r3
 800160e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001612:	eddf 6a12 	vldr	s13, [pc, #72]	; 800165c <mlx90614_getEmissivity+0x70>
 8001616:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <mlx90614_getEmissivity+0x6c>)
 800161c:	edc3 7a04 	vstr	s15, [r3, #16]
		if(emissivity != NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00e      	beq.n	8001644 <mlx90614_getEmissivity+0x58>
      *emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <mlx90614_getEmissivity+0x6c>)
 8001628:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800162c:	b29b      	uxth	r3, r3
 800162e:	ee07 3a90 	vmov	s15, r3
 8001632:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001636:	eddf 6a09 	vldr	s13, [pc, #36]	; 800165c <mlx90614_getEmissivity+0x70>
 800163a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <mlx90614_getEmissivity+0x5e>
	}
	return false;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000256 	.word	0x20000256
 8001658:	20000254 	.word	0x20000254
 800165c:	477fff00 	.word	0x477fff00

08001660 <mlx90614_getMax>:
	mlx90614.rawMin = mlx90614_calcRawTemp(minTemp);
	return mlx90614_write16(MLX90614_REGISTER_TOMIN, mlx90614.rawMin);
}
//###################################################################################################
bool mlx90614_getMax(float *maxTemp)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMAX, &mlx90614.rawMax))
 8001668:	490d      	ldr	r1, [pc, #52]	; (80016a0 <mlx90614_getMax+0x40>)
 800166a:	2020      	movs	r0, #32
 800166c:	f7ff feb8 	bl	80013e0 <mlx90614_read16>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00e      	beq.n	8001694 <mlx90614_getMax+0x34>
	{
    if(maxTemp != NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d009      	beq.n	8001690 <mlx90614_getMax+0x30>
      *maxTemp = mlx90614.rawMax;
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <mlx90614_getMax+0x44>)
 800167e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <mlx90614_getMax+0x36>
	}
	return false;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	2000025e 	.word	0x2000025e
 80016a4:	20000254 	.word	0x20000254

080016a8 <mlx90614_getMin>:
//###################################################################################################
bool mlx90614_getMin(float *minTemp)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMIN, &mlx90614.rawMin))
 80016b0:	490d      	ldr	r1, [pc, #52]	; (80016e8 <mlx90614_getMin+0x40>)
 80016b2:	2021      	movs	r0, #33	; 0x21
 80016b4:	f7ff fe94 	bl	80013e0 <mlx90614_read16>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00e      	beq.n	80016dc <mlx90614_getMin+0x34>
	{
    if(minTemp != NULL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d009      	beq.n	80016d8 <mlx90614_getMin+0x30>
      *minTemp = mlx90614.rawMin;
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <mlx90614_getMin+0x44>)
 80016c6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80016ca:	ee07 3a90 	vmov	s15, r3
 80016ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	edc3 7a00 	vstr	s15, [r3]
		return true;
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <mlx90614_getMin+0x36>
	}
	return false;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000260 	.word	0x20000260
 80016ec:	20000254 	.word	0x20000254

080016f0 <mlx90614_getAmbient>:
//###################################################################################################
bool mlx90614_getAmbient(float *ambientTemp)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	if (mlx90614_read16(MLX90614_REGISTER_TA, &mlx90614.rawAmbient))
 80016f8:	490d      	ldr	r1, [pc, #52]	; (8001730 <mlx90614_getAmbient+0x40>)
 80016fa:	2006      	movs	r0, #6
 80016fc:	f7ff fe70 	bl	80013e0 <mlx90614_read16>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00f      	beq.n	8001726 <mlx90614_getAmbient+0x36>
	{
    if(ambientTemp != NULL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00a      	beq.n	8001722 <mlx90614_getAmbient+0x32>
      *ambientTemp = mlx90614_calcTemperature(mlx90614.rawAmbient);
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <mlx90614_getAmbient+0x44>)
 800170e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fe8e 	bl	8001434 <mlx90614_calcTemperature>
 8001718:	eef0 7a40 	vmov.f32	s15, s0
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <mlx90614_getAmbient+0x38>
	}
	return false;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000258 	.word	0x20000258
 8001734:	20000254 	.word	0x20000254

08001738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001746:	b480      	push	{r7}
 8001748:	b085      	sub	sp, #20
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800174e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001752:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001754:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4313      	orrs	r3, r2
 800175c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800175e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001762:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4013      	ands	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800176a:	68fb      	ldr	r3, [r7, #12]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08c      	sub	sp, #48	; 0x30
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8001788:	2200      	movs	r2, #0
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	201a      	movs	r0, #26
 800178e:	f000 fc49 	bl	8002024 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001792:	201a      	movs	r0, #26
 8001794:	f000 fc60 	bl	8002058 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001798:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800179c:	f7ff ffd3 	bl	8001746 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017a0:	f107 0208 	add.w	r2, r7, #8
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f002 fd9a 	bl	80042e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80017b0:	f002 fd82 	bl	80042b8 <HAL_RCC_GetPCLK2Freq>
 80017b4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <HAL_InitTick+0x8c>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	0c9b      	lsrs	r3, r3, #18
 80017c0:	3b01      	subs	r3, #1
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80017c4:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_InitTick+0x90>)
 80017c6:	4a11      	ldr	r2, [pc, #68]	; (800180c <HAL_InitTick+0x94>)
 80017c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_InitTick+0x90>)
 80017cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017d0:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80017d2:	4a0d      	ldr	r2, [pc, #52]	; (8001808 <HAL_InitTick+0x90>)
 80017d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d6:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_InitTick+0x90>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_InitTick+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 80017e4:	4808      	ldr	r0, [pc, #32]	; (8001808 <HAL_InitTick+0x90>)
 80017e6:	f003 fa9c 	bl	8004d22 <HAL_TIM_Base_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d104      	bne.n	80017fa <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <HAL_InitTick+0x90>)
 80017f2:	f003 faf7 	bl	8004de4 <HAL_TIM_Base_Start_IT>
 80017f6:	4603      	mov	r3, r0
 80017f8:	e000      	b.n	80017fc <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3730      	adds	r7, #48	; 0x30
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	431bde83 	.word	0x431bde83
 8001808:	20000288 	.word	0x20000288
 800180c:	40014800 	.word	0x40014800

08001810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <NMI_Handler+0x4>

08001816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <HardFault_Handler+0x4>

0800181c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <MemManage_Handler+0x4>

08001822 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <UsageFault_Handler+0x4>

0800182e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800186e:	f003 fb07 	bl	8004e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000288 	.word	0x20000288

0800187c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return 1;
 8001880:	2301      	movs	r3, #1
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_kill>:

int _kill(int pid, int sig)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001896:	f004 faad 	bl	8005df4 <__errno>
 800189a:	4603      	mov	r3, r0
 800189c:	2216      	movs	r2, #22
 800189e:	601a      	str	r2, [r3, #0]
  return -1;
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_exit>:

void _exit (int status)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ffe7 	bl	800188c <_kill>
  while (1) {}    /* Make sure we hang here */
 80018be:	e7fe      	b.n	80018be <_exit+0x12>

080018c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	e00a      	b.n	80018e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018d2:	f3af 8000 	nop.w
 80018d6:	4601      	mov	r1, r0
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	60ba      	str	r2, [r7, #8]
 80018de:	b2ca      	uxtb	r2, r1
 80018e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3301      	adds	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dbf0      	blt.n	80018d2 <_read+0x12>
  }

  return len;
 80018f0:	687b      	ldr	r3, [r7, #4]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_close>:
  }
  return len;
}

int _close(int file)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001922:	605a      	str	r2, [r3, #4]
  return 0;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_isatty>:

int _isatty(int file)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800193a:	2301      	movs	r3, #1
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800196c:	4a14      	ldr	r2, [pc, #80]	; (80019c0 <_sbrk+0x5c>)
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <_sbrk+0x60>)
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <_sbrk+0x64>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <_sbrk+0x64>)
 8001982:	4a12      	ldr	r2, [pc, #72]	; (80019cc <_sbrk+0x68>)
 8001984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <_sbrk+0x64>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	429a      	cmp	r2, r3
 8001992:	d207      	bcs.n	80019a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001994:	f004 fa2e 	bl	8005df4 <__errno>
 8001998:	4603      	mov	r3, r0
 800199a:	220c      	movs	r2, #12
 800199c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295
 80019a2:	e009      	b.n	80019b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <_sbrk+0x64>)
 80019b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019b6:	68fb      	ldr	r3, [r7, #12]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20030000 	.word	0x20030000
 80019c4:	00000400 	.word	0x00000400
 80019c8:	200002d4 	.word	0x200002d4
 80019cc:	20000678 	.word	0x20000678

080019d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <SystemInit+0x98>)
 80019d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019da:	4a23      	ldr	r2, [pc, #140]	; (8001a68 <SystemInit+0x98>)
 80019dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80019e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80019f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80019fc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80019fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a08:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <SystemInit+0x9c>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a1a:	f023 0305 	bic.w	r3, r3, #5
 8001a1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a2e:	f023 0301 	bic.w	r3, r3, #1
 8001a32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3a:	4a0d      	ldr	r2, [pc, #52]	; (8001a70 <SystemInit+0xa0>)
 8001a3c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a42:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <SystemInit+0xa0>)
 8001a44:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a54:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00
 8001a6c:	faf6fefb 	.word	0xfaf6fefb
 8001a70:	22041000 	.word	0x22041000

08001a74 <LL_AHB2_GRP1_EnableClock>:
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4013      	ands	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a98:	68fb      	ldr	r3, [r7, #12]
}
 8001a9a:	bf00      	nop
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <LL_APB2_GRP1_EnableClock>:
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b085      	sub	sp, #20
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ab4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aca:	68fb      	ldr	r3, [r7, #12]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001adc:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <MX_USART1_UART_Init+0x94>)
 8001ade:	4a24      	ldr	r2, [pc, #144]	; (8001b70 <MX_USART1_UART_Init+0x98>)
 8001ae0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ae2:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <MX_USART1_UART_Init+0x94>)
 8001ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ae8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001aea:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <MX_USART1_UART_Init+0x94>)
 8001aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001af0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001af2:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <MX_USART1_UART_Init+0x94>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001af8:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <MX_USART1_UART_Init+0x94>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001afe:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <MX_USART1_UART_Init+0x94>)
 8001b00:	220c      	movs	r2, #12
 8001b02:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <MX_USART1_UART_Init+0x94>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b0a:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <MX_USART1_UART_Init+0x94>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b10:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <MX_USART1_UART_Init+0x94>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <MX_USART1_UART_Init+0x94>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <MX_USART1_UART_Init+0x94>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b22:	4812      	ldr	r0, [pc, #72]	; (8001b6c <MX_USART1_UART_Init+0x94>)
 8001b24:	f003 fb96 	bl	8005254 <HAL_UART_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001b2e:	f7ff fc51 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b32:	2100      	movs	r1, #0
 8001b34:	480d      	ldr	r0, [pc, #52]	; (8001b6c <MX_USART1_UART_Init+0x94>)
 8001b36:	f004 f857 	bl	8005be8 <HAL_UARTEx_SetTxFifoThreshold>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001b40:	f7ff fc48 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b44:	2100      	movs	r1, #0
 8001b46:	4809      	ldr	r0, [pc, #36]	; (8001b6c <MX_USART1_UART_Init+0x94>)
 8001b48:	f004 f88c 	bl	8005c64 <HAL_UARTEx_SetRxFifoThreshold>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001b52:	f7ff fc3f 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b56:	4805      	ldr	r0, [pc, #20]	; (8001b6c <MX_USART1_UART_Init+0x94>)
 8001b58:	f004 f80d 	bl	8005b76 <HAL_UARTEx_DisableFifoMode>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001b62:	f7ff fc37 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200002d8 	.word	0x200002d8
 8001b70:	40013800 	.word	0x40013800

08001b74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b09c      	sub	sp, #112	; 0x70
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	2250      	movs	r2, #80	; 0x50
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f004 f957 	bl	8005e48 <memset>
  if(uartHandle->Instance==USART1)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a16      	ldr	r2, [pc, #88]	; (8001bf8 <HAL_UART_MspInit+0x84>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d124      	bne.n	8001bee <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f002 fe29 	bl	8004808 <HAL_RCCEx_PeriphCLKConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bbc:	f7ff fc0a 	bl	80013d4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bc0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001bc4:	f7ff ff6f 	bl	8001aa6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc8:	2002      	movs	r0, #2
 8001bca:	f7ff ff53 	bl	8001a74 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001bce:	23c0      	movs	r3, #192	; 0xc0
 8001bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bde:	2307      	movs	r3, #7
 8001be0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001be6:	4619      	mov	r1, r3
 8001be8:	4804      	ldr	r0, [pc, #16]	; (8001bfc <HAL_UART_MspInit+0x88>)
 8001bea:	f000 fa43 	bl	8002074 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001bee:	bf00      	nop
 8001bf0:	3770      	adds	r7, #112	; 0x70
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40013800 	.word	0x40013800
 8001bfc:	48000400 	.word	0x48000400

08001c00 <LL_AHB2_GRP1_EnableClock>:
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4013      	ands	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c24:	68fb      	ldr	r3, [r7, #12]
}
 8001c26:	bf00      	nop
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <LL_APB1_GRP1_EnableClock>:
{
 8001c32:	b480      	push	{r7}
 8001c34:	b085      	sub	sp, #20
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4013      	ands	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c56:	68fb      	ldr	r3, [r7, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001c68:	4b10      	ldr	r3, [pc, #64]	; (8001cac <MX_USB_PCD_Init+0x48>)
 8001c6a:	4a11      	ldr	r2, [pc, #68]	; (8001cb0 <MX_USB_PCD_Init+0x4c>)
 8001c6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <MX_USB_PCD_Init+0x48>)
 8001c70:	2208      	movs	r2, #8
 8001c72:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001c74:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <MX_USB_PCD_Init+0x48>)
 8001c76:	2202      	movs	r2, #2
 8001c78:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <MX_USB_PCD_Init+0x48>)
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <MX_USB_PCD_Init+0x48>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <MX_USB_PCD_Init+0x48>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <MX_USB_PCD_Init+0x48>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <MX_USB_PCD_Init+0x48>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001c98:	4804      	ldr	r0, [pc, #16]	; (8001cac <MX_USB_PCD_Init+0x48>)
 8001c9a:	f001 f920 	bl	8002ede <HAL_PCD_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001ca4:	f7ff fb96 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	2000036c 	.word	0x2000036c
 8001cb0:	40006800 	.word	0x40006800

08001cb4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b09c      	sub	sp, #112	; 0x70
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ccc:	f107 030c 	add.w	r3, r7, #12
 8001cd0:	2250      	movs	r2, #80	; 0x50
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f004 f8b7 	bl	8005e48 <memset>
  if(pcdHandle->Instance==USB)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a1f      	ldr	r2, [pc, #124]	; (8001d5c <HAL_PCD_MspInit+0xa8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d136      	bne.n	8001d52 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ce8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001cea:	2318      	movs	r3, #24
 8001cec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001cee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cf2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001cf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cf8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001cfa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001cfe:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001d00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d04:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001d06:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d0a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	4618      	mov	r0, r3
 8001d12:	f002 fd79 	bl	8004808 <HAL_RCCEx_PeriphCLKConfig>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8001d1c:	f7ff fb5a 	bl	80013d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d20:	2001      	movs	r0, #1
 8001d22:	f7ff ff6d 	bl	8001c00 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d26:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	2300      	movs	r3, #0
 8001d36:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001d38:	230a      	movs	r3, #10
 8001d3a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d40:	4619      	mov	r1, r3
 8001d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d46:	f000 f995 	bl	8002074 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001d4a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001d4e:	f7ff ff70 	bl	8001c32 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8001d52:	bf00      	nop
 8001d54:	3770      	adds	r7, #112	; 0x70
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40006800 	.word	0x40006800

08001d60 <CopyDataInit>:
 8001d60:	58d4      	ldr	r4, [r2, r3]
 8001d62:	50c4      	str	r4, [r0, r3]
 8001d64:	3304      	adds	r3, #4

08001d66 <LoopCopyDataInit>:
 8001d66:	18c4      	adds	r4, r0, r3
 8001d68:	428c      	cmp	r4, r1
 8001d6a:	d3f9      	bcc.n	8001d60 <CopyDataInit>
 8001d6c:	4770      	bx	lr

08001d6e <FillZerobss>:
 8001d6e:	6003      	str	r3, [r0, #0]
 8001d70:	3004      	adds	r0, #4

08001d72 <LoopFillZerobss>:
 8001d72:	4288      	cmp	r0, r1
 8001d74:	d3fb      	bcc.n	8001d6e <FillZerobss>
 8001d76:	4770      	bx	lr

08001d78 <Reset_Handler>:
 8001d78:	480c      	ldr	r0, [pc, #48]	; (8001dac <LoopForever+0x2>)
 8001d7a:	4685      	mov	sp, r0
 8001d7c:	f7ff fe28 	bl	80019d0 <SystemInit>
 8001d80:	480b      	ldr	r0, [pc, #44]	; (8001db0 <LoopForever+0x6>)
 8001d82:	490c      	ldr	r1, [pc, #48]	; (8001db4 <LoopForever+0xa>)
 8001d84:	4a0c      	ldr	r2, [pc, #48]	; (8001db8 <LoopForever+0xe>)
 8001d86:	2300      	movs	r3, #0
 8001d88:	f7ff ffed 	bl	8001d66 <LoopCopyDataInit>
 8001d8c:	480b      	ldr	r0, [pc, #44]	; (8001dbc <LoopForever+0x12>)
 8001d8e:	490c      	ldr	r1, [pc, #48]	; (8001dc0 <LoopForever+0x16>)
 8001d90:	4a0c      	ldr	r2, [pc, #48]	; (8001dc4 <LoopForever+0x1a>)
 8001d92:	2300      	movs	r3, #0
 8001d94:	f7ff ffe7 	bl	8001d66 <LoopCopyDataInit>
 8001d98:	480b      	ldr	r0, [pc, #44]	; (8001dc8 <LoopForever+0x1e>)
 8001d9a:	490c      	ldr	r1, [pc, #48]	; (8001dcc <LoopForever+0x22>)
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f7ff ffe8 	bl	8001d72 <LoopFillZerobss>
 8001da2:	f004 f82d 	bl	8005e00 <__libc_init_array>
 8001da6:	f7ff f9e3 	bl	8001170 <main>

08001daa <LoopForever>:
 8001daa:	e7fe      	b.n	8001daa <LoopForever>
 8001dac:	20030000 	.word	0x20030000
 8001db0:	20000008 	.word	0x20000008
 8001db4:	200001e4 	.word	0x200001e4
 8001db8:	08008f4c 	.word	0x08008f4c
 8001dbc:	20030000 	.word	0x20030000
 8001dc0:	20030000 	.word	0x20030000
 8001dc4:	08009128 	.word	0x08009128
 8001dc8:	200001e4 	.word	0x200001e4
 8001dcc:	20000674 	.word	0x20000674

08001dd0 <ADC1_IRQHandler>:
 8001dd0:	e7fe      	b.n	8001dd0 <ADC1_IRQHandler>
	...

08001dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dde:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <HAL_Init+0x3c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a0b      	ldr	r2, [pc, #44]	; (8001e10 <HAL_Init+0x3c>)
 8001de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dea:	2003      	movs	r0, #3
 8001dec:	f000 f90f 	bl	800200e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001df0:	200f      	movs	r0, #15
 8001df2:	f7ff fcc1 	bl	8001778 <HAL_InitTick>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	71fb      	strb	r3, [r7, #7]
 8001e00:	e001      	b.n	8001e06 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e02:	f7ff fc99 	bl	8001738 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e06:	79fb      	ldrb	r3, [r7, #7]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	58004000 	.word	0x58004000

08001e14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x20>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_IncTick+0x24>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4413      	add	r3, r2
 8001e24:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <HAL_IncTick+0x24>)
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000010 	.word	0x20000010
 8001e38:	20000660 	.word	0x20000660

08001e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <HAL_GetTick+0x14>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	20000660 	.word	0x20000660

08001e54 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <HAL_GetTickPrio+0x14>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	2000000c 	.word	0x2000000c

08001e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e74:	f7ff ffe2 	bl	8001e3c <HAL_GetTick>
 8001e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e84:	d005      	beq.n	8001e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e86:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <HAL_Delay+0x44>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4413      	add	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e92:	bf00      	nop
 8001e94:	f7ff ffd2 	bl	8001e3c <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d8f7      	bhi.n	8001e94 <HAL_Delay+0x28>
  {
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000010 	.word	0x20000010

08001eb4 <__NVIC_SetPriorityGrouping>:
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee6:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	60d3      	str	r3, [r2, #12]
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_GetPriorityGrouping>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f00:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <__NVIC_GetPriorityGrouping+0x18>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	f003 0307 	and.w	r3, r3, #7
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_EnableIRQ>:
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	db0b      	blt.n	8001f42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	f003 021f 	and.w	r2, r3, #31
 8001f30:	4907      	ldr	r1, [pc, #28]	; (8001f50 <__NVIC_EnableIRQ+0x38>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	095b      	lsrs	r3, r3, #5
 8001f38:	2001      	movs	r0, #1
 8001f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000e100 	.word	0xe000e100

08001f54 <__NVIC_SetPriority>:
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	6039      	str	r1, [r7, #0]
 8001f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	db0a      	blt.n	8001f7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	490c      	ldr	r1, [pc, #48]	; (8001fa0 <__NVIC_SetPriority+0x4c>)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	0112      	lsls	r2, r2, #4
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	440b      	add	r3, r1
 8001f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f7c:	e00a      	b.n	8001f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	4908      	ldr	r1, [pc, #32]	; (8001fa4 <__NVIC_SetPriority+0x50>)
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	3b04      	subs	r3, #4
 8001f8c:	0112      	lsls	r2, r2, #4
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	440b      	add	r3, r1
 8001f92:	761a      	strb	r2, [r3, #24]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000e100 	.word	0xe000e100
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <NVIC_EncodePriority>:
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b089      	sub	sp, #36	; 0x24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f1c3 0307 	rsb	r3, r3, #7
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	bf28      	it	cs
 8001fc6:	2304      	movcs	r3, #4
 8001fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	2b06      	cmp	r3, #6
 8001fd0:	d902      	bls.n	8001fd8 <NVIC_EncodePriority+0x30>
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3b03      	subs	r3, #3
 8001fd6:	e000      	b.n	8001fda <NVIC_EncodePriority+0x32>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	401a      	ands	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffa:	43d9      	mvns	r1, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002000:	4313      	orrs	r3, r2
}
 8002002:	4618      	mov	r0, r3
 8002004:	3724      	adds	r7, #36	; 0x24
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff ff4c 	bl	8001eb4 <__NVIC_SetPriorityGrouping>
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
 8002030:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002032:	f7ff ff63 	bl	8001efc <__NVIC_GetPriorityGrouping>
 8002036:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	68b9      	ldr	r1, [r7, #8]
 800203c:	6978      	ldr	r0, [r7, #20]
 800203e:	f7ff ffb3 	bl	8001fa8 <NVIC_EncodePriority>
 8002042:	4602      	mov	r2, r0
 8002044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff82 	bl	8001f54 <__NVIC_SetPriority>
}
 8002050:	bf00      	nop
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff56 	bl	8001f18 <__NVIC_EnableIRQ>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002074:	b480      	push	{r7}
 8002076:	b087      	sub	sp, #28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002082:	e14c      	b.n	800231e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	2101      	movs	r1, #1
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	fa01 f303 	lsl.w	r3, r1, r3
 8002090:	4013      	ands	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 813e 	beq.w	8002318 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d005      	beq.n	80020b4 <HAL_GPIO_Init+0x40>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d130      	bne.n	8002116 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	2203      	movs	r2, #3
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4013      	ands	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020ea:	2201      	movs	r2, #1
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	091b      	lsrs	r3, r3, #4
 8002100:	f003 0201 	and.w	r2, r3, #1
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	2b03      	cmp	r3, #3
 8002120:	d017      	beq.n	8002152 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	2203      	movs	r2, #3
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4013      	ands	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d123      	bne.n	80021a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	08da      	lsrs	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3208      	adds	r2, #8
 8002166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800216a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	220f      	movs	r2, #15
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4013      	ands	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	691a      	ldr	r2, [r3, #16]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	08da      	lsrs	r2, r3, #3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3208      	adds	r2, #8
 80021a0:	6939      	ldr	r1, [r7, #16]
 80021a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	2203      	movs	r2, #3
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4013      	ands	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 0203 	and.w	r2, r3, #3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 8098 	beq.w	8002318 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80021e8:	4a54      	ldr	r2, [pc, #336]	; (800233c <HAL_GPIO_Init+0x2c8>)
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	089b      	lsrs	r3, r3, #2
 80021ee:	3302      	adds	r3, #2
 80021f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	220f      	movs	r2, #15
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002212:	d019      	beq.n	8002248 <HAL_GPIO_Init+0x1d4>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a4a      	ldr	r2, [pc, #296]	; (8002340 <HAL_GPIO_Init+0x2cc>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d013      	beq.n	8002244 <HAL_GPIO_Init+0x1d0>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a49      	ldr	r2, [pc, #292]	; (8002344 <HAL_GPIO_Init+0x2d0>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d00d      	beq.n	8002240 <HAL_GPIO_Init+0x1cc>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a48      	ldr	r2, [pc, #288]	; (8002348 <HAL_GPIO_Init+0x2d4>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d007      	beq.n	800223c <HAL_GPIO_Init+0x1c8>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a47      	ldr	r2, [pc, #284]	; (800234c <HAL_GPIO_Init+0x2d8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d101      	bne.n	8002238 <HAL_GPIO_Init+0x1c4>
 8002234:	2304      	movs	r3, #4
 8002236:	e008      	b.n	800224a <HAL_GPIO_Init+0x1d6>
 8002238:	2307      	movs	r3, #7
 800223a:	e006      	b.n	800224a <HAL_GPIO_Init+0x1d6>
 800223c:	2303      	movs	r3, #3
 800223e:	e004      	b.n	800224a <HAL_GPIO_Init+0x1d6>
 8002240:	2302      	movs	r3, #2
 8002242:	e002      	b.n	800224a <HAL_GPIO_Init+0x1d6>
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <HAL_GPIO_Init+0x1d6>
 8002248:	2300      	movs	r3, #0
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	f002 0203 	and.w	r2, r2, #3
 8002250:	0092      	lsls	r2, r2, #2
 8002252:	4093      	lsls	r3, r2
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800225a:	4938      	ldr	r1, [pc, #224]	; (800233c <HAL_GPIO_Init+0x2c8>)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	089b      	lsrs	r3, r3, #2
 8002260:	3302      	adds	r3, #2
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002268:	4b39      	ldr	r3, [pc, #228]	; (8002350 <HAL_GPIO_Init+0x2dc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	43db      	mvns	r3, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800228c:	4a30      	ldr	r2, [pc, #192]	; (8002350 <HAL_GPIO_Init+0x2dc>)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002292:	4b2f      	ldr	r3, [pc, #188]	; (8002350 <HAL_GPIO_Init+0x2dc>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022b6:	4a26      	ldr	r2, [pc, #152]	; (8002350 <HAL_GPIO_Init+0x2dc>)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022bc:	4b24      	ldr	r3, [pc, #144]	; (8002350 <HAL_GPIO_Init+0x2dc>)
 80022be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	43db      	mvns	r3, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4013      	ands	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022e2:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <HAL_GPIO_Init+0x2dc>)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80022ea:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_GPIO_Init+0x2dc>)
 80022ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002310:	4a0f      	ldr	r2, [pc, #60]	; (8002350 <HAL_GPIO_Init+0x2dc>)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	3301      	adds	r3, #1
 800231c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	fa22 f303 	lsr.w	r3, r2, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	f47f aeab 	bne.w	8002084 <HAL_GPIO_Init+0x10>
  }
}
 800232e:	bf00      	nop
 8002330:	bf00      	nop
 8002332:	371c      	adds	r7, #28
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	40010000 	.word	0x40010000
 8002340:	48000400 	.word	0x48000400
 8002344:	48000800 	.word	0x48000800
 8002348:	48000c00 	.word	0x48000c00
 800234c:	48001000 	.word	0x48001000
 8002350:	58000800 	.word	0x58000800

08002354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	807b      	strh	r3, [r7, #2]
 8002360:	4613      	mov	r3, r2
 8002362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002364:	787b      	ldrb	r3, [r7, #1]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800236a:	887a      	ldrh	r2, [r7, #2]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002370:	e002      	b.n	8002378 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002372:	887a      	ldrh	r2, [r7, #2]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e081      	b.n	800249a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7fe fe2a 	bl	8001004 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2224      	movs	r2, #36	; 0x24
 80023b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0201 	bic.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d107      	bne.n	80023fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	e006      	b.n	800240c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800240a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d104      	bne.n	800241e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800241c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800242c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002430:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002440:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69d9      	ldr	r1, [r3, #28]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1a      	ldr	r2, [r3, #32]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	4608      	mov	r0, r1
 80024ae:	4611      	mov	r1, r2
 80024b0:	461a      	mov	r2, r3
 80024b2:	4603      	mov	r3, r0
 80024b4:	817b      	strh	r3, [r7, #10]
 80024b6:	460b      	mov	r3, r1
 80024b8:	813b      	strh	r3, [r7, #8]
 80024ba:	4613      	mov	r3, r2
 80024bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b20      	cmp	r3, #32
 80024c8:	f040 80fd 	bne.w	80026c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_I2C_Mem_Read+0x34>
 80024d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d105      	bne.n	80024e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0f1      	b.n	80026c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_I2C_Mem_Read+0x4e>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e0ea      	b.n	80026c8 <HAL_I2C_Mem_Read+0x224>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024fa:	f7ff fc9f 	bl	8001e3c <HAL_GetTick>
 80024fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2319      	movs	r3, #25
 8002506:	2201      	movs	r2, #1
 8002508:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 fa63 	bl	80029d8 <I2C_WaitOnFlagUntilTimeout>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0d5      	b.n	80026c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2222      	movs	r2, #34	; 0x22
 8002520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2240      	movs	r2, #64	; 0x40
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a3a      	ldr	r2, [r7, #32]
 8002536:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800253c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002544:	88f8      	ldrh	r0, [r7, #6]
 8002546:	893a      	ldrh	r2, [r7, #8]
 8002548:	8979      	ldrh	r1, [r7, #10]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	4603      	mov	r3, r0
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f9c7 	bl	80028e8 <I2C_RequestMemoryRead>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0ad      	b.n	80026c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	2bff      	cmp	r3, #255	; 0xff
 8002574:	d90e      	bls.n	8002594 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	22ff      	movs	r2, #255	; 0xff
 800257a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002580:	b2da      	uxtb	r2, r3
 8002582:	8979      	ldrh	r1, [r7, #10]
 8002584:	4b52      	ldr	r3, [pc, #328]	; (80026d0 <HAL_I2C_Mem_Read+0x22c>)
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 fbdd 	bl	8002d4c <I2C_TransferConfig>
 8002592:	e00f      	b.n	80025b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	8979      	ldrh	r1, [r7, #10]
 80025a6:	4b4a      	ldr	r3, [pc, #296]	; (80026d0 <HAL_I2C_Mem_Read+0x22c>)
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 fbcc 	bl	8002d4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ba:	2200      	movs	r2, #0
 80025bc:	2104      	movs	r1, #4
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 fa0a 	bl	80029d8 <I2C_WaitOnFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e07c      	b.n	80026c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d034      	beq.n	8002674 <HAL_I2C_Mem_Read+0x1d0>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260e:	2b00      	cmp	r3, #0
 8002610:	d130      	bne.n	8002674 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002618:	2200      	movs	r2, #0
 800261a:	2180      	movs	r1, #128	; 0x80
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 f9db 	bl	80029d8 <I2C_WaitOnFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e04d      	b.n	80026c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	2bff      	cmp	r3, #255	; 0xff
 8002634:	d90e      	bls.n	8002654 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	22ff      	movs	r2, #255	; 0xff
 800263a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002640:	b2da      	uxtb	r2, r3
 8002642:	8979      	ldrh	r1, [r7, #10]
 8002644:	2300      	movs	r3, #0
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fb7d 	bl	8002d4c <I2C_TransferConfig>
 8002652:	e00f      	b.n	8002674 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002662:	b2da      	uxtb	r2, r3
 8002664:	8979      	ldrh	r1, [r7, #10]
 8002666:	2300      	movs	r3, #0
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 fb6c 	bl	8002d4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d19a      	bne.n	80025b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 fa3e 	bl	8002b04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e01a      	b.n	80026c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2220      	movs	r2, #32
 8002698:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6859      	ldr	r1, [r3, #4]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_I2C_Mem_Read+0x230>)
 80026a6:	400b      	ands	r3, r1
 80026a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e000      	b.n	80026c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026c6:	2302      	movs	r3, #2
  }
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	80002400 	.word	0x80002400
 80026d4:	fe00e800 	.word	0xfe00e800

080026d8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08a      	sub	sp, #40	; 0x28
 80026dc:	af02      	add	r7, sp, #8
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	460b      	mov	r3, r1
 80026e6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b20      	cmp	r3, #32
 80026f6:	f040 80f1 	bne.w	80028dc <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002708:	d101      	bne.n	800270e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800270a:	2302      	movs	r3, #2
 800270c:	e0e7      	b.n	80028de <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_I2C_IsDeviceReady+0x44>
 8002718:	2302      	movs	r3, #2
 800271a:	e0e0      	b.n	80028de <HAL_I2C_IsDeviceReady+0x206>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2224      	movs	r2, #36	; 0x24
 8002728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d107      	bne.n	800274a <HAL_I2C_IsDeviceReady+0x72>
 800273a:	897b      	ldrh	r3, [r7, #10]
 800273c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002740:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002744:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002748:	e004      	b.n	8002754 <HAL_I2C_IsDeviceReady+0x7c>
 800274a:	897b      	ldrh	r3, [r7, #10]
 800274c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002750:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800275a:	f7ff fb6f 	bl	8001e3c <HAL_GetTick>
 800275e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b20      	cmp	r3, #32
 800276c:	bf0c      	ite	eq
 800276e:	2301      	moveq	r3, #1
 8002770:	2300      	movne	r3, #0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	2b10      	cmp	r3, #16
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800278c:	e034      	b.n	80027f8 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002794:	d01a      	beq.n	80027cc <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002796:	f7ff fb51 	bl	8001e3c <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d302      	bcc.n	80027ac <HAL_I2C_IsDeviceReady+0xd4>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10f      	bne.n	80027cc <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b8:	f043 0220 	orr.w	r2, r3, #32
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e088      	b.n	80028de <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f003 0320 	and.w	r3, r3, #32
 80027d6:	2b20      	cmp	r3, #32
 80027d8:	bf0c      	ite	eq
 80027da:	2301      	moveq	r3, #1
 80027dc:	2300      	movne	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	2b10      	cmp	r3, #16
 80027ee:	bf0c      	ite	eq
 80027f0:	2301      	moveq	r3, #1
 80027f2:	2300      	movne	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80027f8:	7ffb      	ldrb	r3, [r7, #31]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d102      	bne.n	8002804 <HAL_I2C_IsDeviceReady+0x12c>
 80027fe:	7fbb      	ldrb	r3, [r7, #30]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0c4      	beq.n	800278e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	f003 0310 	and.w	r3, r3, #16
 800280e:	2b10      	cmp	r3, #16
 8002810:	d01a      	beq.n	8002848 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2200      	movs	r2, #0
 800281a:	2120      	movs	r1, #32
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 f8db 	bl	80029d8 <I2C_WaitOnFlagUntilTimeout>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e058      	b.n	80028de <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2220      	movs	r2, #32
 8002832:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	e04a      	b.n	80028de <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	2200      	movs	r2, #0
 8002850:	2120      	movs	r1, #32
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f8c0 	bl	80029d8 <I2C_WaitOnFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e03d      	b.n	80028de <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2210      	movs	r2, #16
 8002868:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2220      	movs	r2, #32
 8002870:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	429a      	cmp	r2, r3
 8002878:	d118      	bne.n	80028ac <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002888:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	2200      	movs	r2, #0
 8002892:	2120      	movs	r1, #32
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f89f 	bl	80029d8 <I2C_WaitOnFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e01c      	b.n	80028de <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2220      	movs	r2, #32
 80028aa:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	3301      	adds	r3, #1
 80028b0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	f63f af3b 	bhi.w	8002732 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c8:	f043 0220 	orr.w	r2, r3, #32
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80028dc:	2302      	movs	r3, #2
  }
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3720      	adds	r7, #32
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af02      	add	r7, sp, #8
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	4608      	mov	r0, r1
 80028f2:	4611      	mov	r1, r2
 80028f4:	461a      	mov	r2, r3
 80028f6:	4603      	mov	r3, r0
 80028f8:	817b      	strh	r3, [r7, #10]
 80028fa:	460b      	mov	r3, r1
 80028fc:	813b      	strh	r3, [r7, #8]
 80028fe:	4613      	mov	r3, r2
 8002900:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	8979      	ldrh	r1, [r7, #10]
 8002908:	4b20      	ldr	r3, [pc, #128]	; (800298c <I2C_RequestMemoryRead+0xa4>)
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	2300      	movs	r3, #0
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 fa1c 	bl	8002d4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002914:	69fa      	ldr	r2, [r7, #28]
 8002916:	69b9      	ldr	r1, [r7, #24]
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f8ac 	bl	8002a76 <I2C_WaitOnTXISFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e02c      	b.n	8002982 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d105      	bne.n	800293a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800292e:	893b      	ldrh	r3, [r7, #8]
 8002930:	b2da      	uxtb	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	629a      	str	r2, [r3, #40]	; 0x28
 8002938:	e015      	b.n	8002966 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800293a:	893b      	ldrh	r3, [r7, #8]
 800293c:	0a1b      	lsrs	r3, r3, #8
 800293e:	b29b      	uxth	r3, r3
 8002940:	b2da      	uxtb	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	69b9      	ldr	r1, [r7, #24]
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f892 	bl	8002a76 <I2C_WaitOnTXISFlagUntilTimeout>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e012      	b.n	8002982 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800295c:	893b      	ldrh	r3, [r7, #8]
 800295e:	b2da      	uxtb	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	2200      	movs	r2, #0
 800296e:	2140      	movs	r1, #64	; 0x40
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f831 	bl	80029d8 <I2C_WaitOnFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	80002000 	.word	0x80002000

08002990 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d103      	bne.n	80029ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2200      	movs	r2, #0
 80029ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d007      	beq.n	80029cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0201 	orr.w	r2, r2, #1
 80029ca:	619a      	str	r2, [r3, #24]
  }
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	4613      	mov	r3, r2
 80029e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029e8:	e031      	b.n	8002a4e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f0:	d02d      	beq.n	8002a4e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f2:	f7ff fa23 	bl	8001e3c <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d302      	bcc.n	8002a08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d122      	bne.n	8002a4e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	4013      	ands	r3, r2
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	bf0c      	ite	eq
 8002a18:	2301      	moveq	r3, #1
 8002a1a:	2300      	movne	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d113      	bne.n	8002a4e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	f043 0220 	orr.w	r2, r3, #32
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e00f      	b.n	8002a6e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	699a      	ldr	r2, [r3, #24]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4013      	ands	r3, r2
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	bf0c      	ite	eq
 8002a5e:	2301      	moveq	r3, #1
 8002a60:	2300      	movne	r3, #0
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d0be      	beq.n	80029ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b084      	sub	sp, #16
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a82:	e033      	b.n	8002aec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	68b9      	ldr	r1, [r7, #8]
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f87f 	bl	8002b8c <I2C_IsErrorOccurred>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e031      	b.n	8002afc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9e:	d025      	beq.n	8002aec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa0:	f7ff f9cc 	bl	8001e3c <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d302      	bcc.n	8002ab6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d11a      	bne.n	8002aec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d013      	beq.n	8002aec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac8:	f043 0220 	orr.w	r2, r3, #32
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e007      	b.n	8002afc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d1c4      	bne.n	8002a84 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b10:	e02f      	b.n	8002b72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f838 	bl	8002b8c <I2C_IsErrorOccurred>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e02d      	b.n	8002b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b26:	f7ff f989 	bl	8001e3c <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d302      	bcc.n	8002b3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d11a      	bne.n	8002b72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d013      	beq.n	8002b72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	f043 0220 	orr.w	r2, r3, #32
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e007      	b.n	8002b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d1c8      	bne.n	8002b12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	; 0x28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d068      	beq.n	8002c8a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2210      	movs	r2, #16
 8002bbe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bc0:	e049      	b.n	8002c56 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc8:	d045      	beq.n	8002c56 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bca:	f7ff f937 	bl	8001e3c <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d302      	bcc.n	8002be0 <I2C_IsErrorOccurred+0x54>
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d13a      	bne.n	8002c56 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bf2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c02:	d121      	bne.n	8002c48 <I2C_IsErrorOccurred+0xbc>
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c0a:	d01d      	beq.n	8002c48 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c0c:	7cfb      	ldrb	r3, [r7, #19]
 8002c0e:	2b20      	cmp	r3, #32
 8002c10:	d01a      	beq.n	8002c48 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c20:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c22:	f7ff f90b 	bl	8001e3c <HAL_GetTick>
 8002c26:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c28:	e00e      	b.n	8002c48 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c2a:	f7ff f907 	bl	8001e3c <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b19      	cmp	r3, #25
 8002c36:	d907      	bls.n	8002c48 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	f043 0320 	orr.w	r3, r3, #32
 8002c3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002c46:	e006      	b.n	8002c56 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	d1e9      	bne.n	8002c2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	d003      	beq.n	8002c6c <I2C_IsErrorOccurred+0xe0>
 8002c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0aa      	beq.n	8002bc2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d103      	bne.n	8002c7c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	f043 0304 	orr.w	r3, r3, #4
 8002c82:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00b      	beq.n	8002cb4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	f043 0308 	orr.w	r3, r3, #8
 8002cc4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00b      	beq.n	8002cf8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	f043 0302 	orr.w	r3, r3, #2
 8002ce6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cf0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d01c      	beq.n	8002d3a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f7ff fe45 	bl	8002990 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6859      	ldr	r1, [r3, #4]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <I2C_IsErrorOccurred+0x1bc>)
 8002d12:	400b      	ands	r3, r1
 8002d14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3728      	adds	r7, #40	; 0x28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	fe00e800 	.word	0xfe00e800

08002d4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	607b      	str	r3, [r7, #4]
 8002d56:	460b      	mov	r3, r1
 8002d58:	817b      	strh	r3, [r7, #10]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d5e:	897b      	ldrh	r3, [r7, #10]
 8002d60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d64:	7a7b      	ldrb	r3, [r7, #9]
 8002d66:	041b      	lsls	r3, r3, #16
 8002d68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	0d5b      	lsrs	r3, r3, #21
 8002d86:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <I2C_TransferConfig+0x60>)
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	ea02 0103 	and.w	r1, r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d9e:	bf00      	nop
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	03ff63ff 	.word	0x03ff63ff

08002db0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b20      	cmp	r3, #32
 8002dc4:	d138      	bne.n	8002e38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e032      	b.n	8002e3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2224      	movs	r2, #36	; 0x24
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0201 	bic.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6819      	ldr	r1, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	e000      	b.n	8002e3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e38:	2302      	movs	r3, #2
  }
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b085      	sub	sp, #20
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b20      	cmp	r3, #32
 8002e5a:	d139      	bne.n	8002ed0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e033      	b.n	8002ed2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2224      	movs	r2, #36	; 0x24
 8002e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0201 	bic.w	r2, r2, #1
 8002e88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e000      	b.n	8002ed2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ed0:	2302      	movs	r3, #2
  }
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ede:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee0:	b08b      	sub	sp, #44	; 0x2c
 8002ee2:	af06      	add	r7, sp, #24
 8002ee4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0cb      	b.n	8003088 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d106      	bne.n	8002f0a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7fe fed5 	bl	8001cb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2203      	movs	r2, #3
 8002f0e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f002 ff30 	bl	8005d7c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	73fb      	strb	r3, [r7, #15]
 8002f20:	e040      	b.n	8002fa4 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	440b      	add	r3, r1
 8002f32:	3301      	adds	r3, #1
 8002f34:	2201      	movs	r2, #1
 8002f36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	440b      	add	r3, r1
 8002f48:	7bfa      	ldrb	r2, [r7, #15]
 8002f4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	440b      	add	r3, r1
 8002f5c:	3303      	adds	r3, #3
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f62:	7bfa      	ldrb	r2, [r7, #15]
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	440b      	add	r3, r1
 8002f70:	3338      	adds	r3, #56	; 0x38
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f76:	7bfa      	ldrb	r2, [r7, #15]
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	440b      	add	r3, r1
 8002f84:	333c      	adds	r3, #60	; 0x3c
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f8a:	7bfa      	ldrb	r2, [r7, #15]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	440b      	add	r3, r1
 8002f98:	3340      	adds	r3, #64	; 0x40
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	73fb      	strb	r3, [r7, #15]
 8002fa4:	7bfa      	ldrb	r2, [r7, #15]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d3b9      	bcc.n	8002f22 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fae:	2300      	movs	r3, #0
 8002fb0:	73fb      	strb	r3, [r7, #15]
 8002fb2:	e044      	b.n	800303e <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fb4:	7bfa      	ldrb	r2, [r7, #15]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	440b      	add	r3, r1
 8002fc2:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fca:	7bfa      	ldrb	r2, [r7, #15]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	440b      	add	r3, r1
 8002fd8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fdc:	7bfa      	ldrb	r2, [r7, #15]
 8002fde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	440b      	add	r3, r1
 8002fee:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ff6:	7bfa      	ldrb	r2, [r7, #15]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	440b      	add	r3, r1
 8003004:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	440b      	add	r3, r1
 800301a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003022:	7bfa      	ldrb	r2, [r7, #15]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	440b      	add	r3, r1
 8003030:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	3301      	adds	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]
 800303e:	7bfa      	ldrb	r2, [r7, #15]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	429a      	cmp	r2, r3
 8003046:	d3b5      	bcc.n	8002fb4 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	603b      	str	r3, [r7, #0]
 800304e:	687e      	ldr	r6, [r7, #4]
 8003050:	466d      	mov	r5, sp
 8003052:	f106 0410 	add.w	r4, r6, #16
 8003056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	602b      	str	r3, [r5, #0]
 800305e:	1d33      	adds	r3, r6, #4
 8003060:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003062:	6838      	ldr	r0, [r7, #0]
 8003064:	f002 fea5 	bl	8005db2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d102      	bne.n	8003086 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f805 	bl	8003090 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003090 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	f043 0302 	orr.w	r3, r3, #2
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a04      	ldr	r2, [pc, #16]	; (8003100 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80030ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f2:	6013      	str	r3, [r2, #0]
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	58000400 	.word	0x58000400

08003104 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <HAL_PWREx_GetVoltageRange+0x18>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003110:	4618      	mov	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	58000400 	.word	0x58000400

08003120 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800312e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003132:	d101      	bne.n	8003138 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <LL_RCC_HSE_Enable>:
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003156:	6013      	str	r3, [r2, #0]
}
 8003158:	bf00      	nop
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <LL_RCC_HSE_Disable>:
{
 8003162:	b480      	push	{r7}
 8003164:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003174:	6013      	str	r3, [r2, #0]
}
 8003176:	bf00      	nop
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_RCC_HSE_IsReady>:
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003192:	d101      	bne.n	8003198 <LL_RCC_HSE_IsReady+0x18>
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <LL_RCC_HSE_IsReady+0x1a>
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <LL_RCC_HSI_Enable>:
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80031a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b6:	6013      	str	r3, [r2, #0]
}
 80031b8:	bf00      	nop
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <LL_RCC_HSI_Disable>:
{
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80031c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031d4:	6013      	str	r3, [r2, #0]
}
 80031d6:	bf00      	nop
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <LL_RCC_HSI_IsReady>:
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80031e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f2:	d101      	bne.n	80031f8 <LL_RCC_HSI_IsReady+0x18>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <LL_RCC_HSI_IsReady+0x1a>
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800320c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	061b      	lsls	r3, r3, #24
 800321a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800321e:	4313      	orrs	r3, r2
 8003220:	604b      	str	r3, [r1, #4]
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <LL_RCC_HSI48_Enable>:
{
 800322e:	b480      	push	{r7}
 8003230:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003236:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800323a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003246:	bf00      	nop
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <LL_RCC_HSI48_Disable>:
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003258:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800325c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003260:	f023 0301 	bic.w	r3, r3, #1
 8003264:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003268:	bf00      	nop
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <LL_RCC_HSI48_IsReady>:
{
 8003272:	b480      	push	{r7}
 8003274:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800327a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b02      	cmp	r3, #2
 8003284:	d101      	bne.n	800328a <LL_RCC_HSI48_IsReady+0x18>
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <LL_RCC_HSI48_IsReady+0x1a>
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <LL_RCC_LSE_Enable>:
{
 8003296:	b480      	push	{r7}
 8003298:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800329a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80032ae:	bf00      	nop
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <LL_RCC_LSE_Disable>:
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032c8:	f023 0301 	bic.w	r3, r3, #1
 80032cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <LL_RCC_LSE_EnableBypass>:
{
 80032da:	b480      	push	{r7}
 80032dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80032de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032ea:	f043 0304 	orr.w	r3, r3, #4
 80032ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80032f2:	bf00      	nop
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <LL_RCC_LSE_DisableBypass>:
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003308:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800330c:	f023 0304 	bic.w	r3, r3, #4
 8003310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800331e:	b480      	push	{r7}
 8003320:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b02      	cmp	r3, #2
 8003330:	d101      	bne.n	8003336 <LL_RCC_LSE_IsReady+0x18>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <LL_RCC_LSE_IsReady+0x1a>
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003342:	b480      	push	{r7}
 8003344:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800334a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800334e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800335a:	bf00      	nop
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003370:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003374:	f023 0301 	bic.w	r3, r3, #1
 8003378:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800337c:	bf00      	nop
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003386:	b480      	push	{r7}
 8003388:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800338a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800338e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b02      	cmp	r3, #2
 8003398:	d101      	bne.n	800339e <LL_RCC_LSI1_IsReady+0x18>
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <LL_RCC_LSI1_IsReady+0x1a>
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80033aa:	b480      	push	{r7}
 80033ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80033ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033ba:	f043 0304 	orr.w	r3, r3, #4
 80033be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80033c2:	bf00      	nop
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80033d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033dc:	f023 0304 	bic.w	r3, r3, #4
 80033e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80033ee:	b480      	push	{r7}
 80033f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80033f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d101      	bne.n	8003406 <LL_RCC_LSI2_IsReady+0x18>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <LL_RCC_LSI2_IsReady+0x1a>
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800341a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800341e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003422:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	021b      	lsls	r3, r3, #8
 800342a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	6013      	str	r3, [r2, #0]
}
 8003454:	bf00      	nop
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800345e:	b480      	push	{r7}
 8003460:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800346c:	f023 0301 	bic.w	r3, r3, #1
 8003470:	6013      	str	r3, [r2, #0]
}
 8003472:	bf00      	nop
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b02      	cmp	r3, #2
 800348c:	d101      	bne.n	8003492 <LL_RCC_MSI_IsReady+0x16>
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <LL_RCC_MSI_IsReady+0x18>
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80034a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80034cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034d6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2bb0      	cmp	r3, #176	; 0xb0
 80034dc:	d901      	bls.n	80034e2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80034de:	23b0      	movs	r3, #176	; 0xb0
 80034e0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80034e2:	687b      	ldr	r3, [r7, #4]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80034f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	021b      	lsls	r3, r3, #8
 8003506:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800350a:	4313      	orrs	r3, r2
 800350c:	604b      	str	r3, [r1, #4]
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f023 0203 	bic.w	r2, r3, #3
 800352c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4313      	orrs	r3, r2
 8003534:	608b      	str	r3, [r1, #8]
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003542:	b480      	push	{r7}
 8003544:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 030c 	and.w	r3, r3, #12
}
 8003550:	4618      	mov	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800356c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800358a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003592:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003596:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80035b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80035be:	f023 020f 	bic.w	r2, r3, #15
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	091b      	lsrs	r3, r3, #4
 80035c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80035e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	608b      	str	r3, [r1, #8]
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800360c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003616:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4313      	orrs	r3, r2
 800361e:	608b      	str	r3, [r1, #8]
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800363a:	4618      	mov	r0, r3
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8003648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800364c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003654:	4618      	mov	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800365e:	b480      	push	{r7}
 8003660:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003666:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800367a:	b480      	push	{r7}
 800367c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800367e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003688:	4618      	mov	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003692:	b480      	push	{r7}
 8003694:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80036aa:	b480      	push	{r7}
 80036ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80036ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036bc:	6013      	str	r3, [r2, #0]
}
 80036be:	bf00      	nop
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80036cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036da:	6013      	str	r3, [r2, #0]
}
 80036dc:	bf00      	nop
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80036e6:	b480      	push	{r7}
 80036e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80036ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036f8:	d101      	bne.n	80036fe <LL_RCC_PLL_IsReady+0x18>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <LL_RCC_PLL_IsReady+0x1a>
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800370a:	b480      	push	{r7}
 800370c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800370e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	0a1b      	lsrs	r3, r3, #8
 8003716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800371a:	4618      	mov	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003732:	4618      	mov	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800374a:	4618      	mov	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f003 0303 	and.w	r3, r3, #3
}
 8003762:	4618      	mov	r0, r3
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800377a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377e:	d101      	bne.n	8003784 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003798:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800379c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037a4:	d101      	bne.n	80037aa <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80037b6:	b480      	push	{r7}
 80037b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80037ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80037c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ca:	d101      	bne.n	80037d0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80037e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037ee:	d101      	bne.n	80037f4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800380e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003812:	d101      	bne.n	8003818 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003814:	2301      	movs	r3, #1
 8003816:	e000      	b.n	800381a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003824:	b590      	push	{r4, r7, lr}
 8003826:	b08d      	sub	sp, #52	; 0x34
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e363      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 808d 	beq.w	800395e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003844:	f7ff fe7d 	bl	8003542 <LL_RCC_GetSysClkSource>
 8003848:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800384a:	f7ff ff83 	bl	8003754 <LL_RCC_PLL_GetMainSource>
 800384e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <HAL_RCC_OscConfig+0x3e>
 8003856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003858:	2b0c      	cmp	r3, #12
 800385a:	d147      	bne.n	80038ec <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	2b01      	cmp	r3, #1
 8003860:	d144      	bne.n	80038ec <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e347      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003872:	f7ff fe28 	bl	80034c6 <LL_RCC_MSI_GetRange>
 8003876:	4603      	mov	r3, r0
 8003878:	429c      	cmp	r4, r3
 800387a:	d914      	bls.n	80038a6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fd61 	bl	8004348 <RCC_SetFlashLatencyFromMSIRange>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e336      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff fe02 	bl	800349e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff fe26 	bl	80034f0 <LL_RCC_MSI_SetCalibTrimming>
 80038a4:	e013      	b.n	80038ce <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fdf7 	bl	800349e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff fe1b 	bl	80034f0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fd42 	bl	8004348 <RCC_SetFlashLatencyFromMSIRange>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e317      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80038ce:	f000 fcc9 	bl	8004264 <HAL_RCC_GetHCLKFreq>
 80038d2:	4603      	mov	r3, r0
 80038d4:	4aa4      	ldr	r2, [pc, #656]	; (8003b68 <HAL_RCC_OscConfig+0x344>)
 80038d6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038d8:	4ba4      	ldr	r3, [pc, #656]	; (8003b6c <HAL_RCC_OscConfig+0x348>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fd ff4b 	bl	8001778 <HAL_InitTick>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d039      	beq.n	800395c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e308      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d01e      	beq.n	8003932 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038f4:	f7ff fda4 	bl	8003440 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038f8:	f7fe faa0 	bl	8001e3c <HAL_GetTick>
 80038fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003900:	f7fe fa9c 	bl	8001e3c <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e2f5      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003912:	f7ff fdb3 	bl	800347c <LL_RCC_MSI_IsReady>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f1      	beq.n	8003900 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fdbc 	bl	800349e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff fde0 	bl	80034f0 <LL_RCC_MSI_SetCalibTrimming>
 8003930:	e015      	b.n	800395e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003932:	f7ff fd94 	bl	800345e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003936:	f7fe fa81 	bl	8001e3c <HAL_GetTick>
 800393a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800393e:	f7fe fa7d 	bl	8001e3c <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e2d6      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003950:	f7ff fd94 	bl	800347c <LL_RCC_MSI_IsReady>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f1      	bne.n	800393e <HAL_RCC_OscConfig+0x11a>
 800395a:	e000      	b.n	800395e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800395c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d047      	beq.n	80039fa <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800396a:	f7ff fdea 	bl	8003542 <LL_RCC_GetSysClkSource>
 800396e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003970:	f7ff fef0 	bl	8003754 <LL_RCC_PLL_GetMainSource>
 8003974:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	2b08      	cmp	r3, #8
 800397a:	d005      	beq.n	8003988 <HAL_RCC_OscConfig+0x164>
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	2b0c      	cmp	r3, #12
 8003980:	d108      	bne.n	8003994 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	2b03      	cmp	r3, #3
 8003986:	d105      	bne.n	8003994 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d134      	bne.n	80039fa <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e2b4      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399c:	d102      	bne.n	80039a4 <HAL_RCC_OscConfig+0x180>
 800399e:	f7ff fbd1 	bl	8003144 <LL_RCC_HSE_Enable>
 80039a2:	e001      	b.n	80039a8 <HAL_RCC_OscConfig+0x184>
 80039a4:	f7ff fbdd 	bl	8003162 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d012      	beq.n	80039d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fe fa44 	bl	8001e3c <HAL_GetTick>
 80039b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b8:	f7fe fa40 	bl	8001e3c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e299      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80039ca:	f7ff fbd9 	bl	8003180 <LL_RCC_HSE_IsReady>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f1      	beq.n	80039b8 <HAL_RCC_OscConfig+0x194>
 80039d4:	e011      	b.n	80039fa <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d6:	f7fe fa31 	bl	8001e3c <HAL_GetTick>
 80039da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039de:	f7fe fa2d 	bl	8001e3c <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b64      	cmp	r3, #100	; 0x64
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e286      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80039f0:	f7ff fbc6 	bl	8003180 <LL_RCC_HSE_IsReady>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f1      	bne.n	80039de <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d04c      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a06:	f7ff fd9c 	bl	8003542 <LL_RCC_GetSysClkSource>
 8003a0a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a0c:	f7ff fea2 	bl	8003754 <LL_RCC_PLL_GetMainSource>
 8003a10:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d005      	beq.n	8003a24 <HAL_RCC_OscConfig+0x200>
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	d10e      	bne.n	8003a3c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d10b      	bne.n	8003a3c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e266      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff fbe5 	bl	8003204 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003a3a:	e031      	b.n	8003aa0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d019      	beq.n	8003a78 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a44:	f7ff fbae 	bl	80031a4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a48:	f7fe f9f8 	bl	8001e3c <HAL_GetTick>
 8003a4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a50:	f7fe f9f4 	bl	8001e3c <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e24d      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003a62:	f7ff fbbd 	bl	80031e0 <LL_RCC_HSI_IsReady>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0f1      	beq.n	8003a50 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff fbc7 	bl	8003204 <LL_RCC_HSI_SetCalibTrimming>
 8003a76:	e013      	b.n	8003aa0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a78:	f7ff fba3 	bl	80031c2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7c:	f7fe f9de 	bl	8001e3c <HAL_GetTick>
 8003a80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a84:	f7fe f9da 	bl	8001e3c <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e233      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003a96:	f7ff fba3 	bl	80031e0 <LL_RCC_HSI_IsReady>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f1      	bne.n	8003a84 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d106      	bne.n	8003aba <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 80a3 	beq.w	8003c00 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d076      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0310 	and.w	r3, r3, #16
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d046      	beq.n	8003b5c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003ace:	f7ff fc5a 	bl	8003386 <LL_RCC_LSI1_IsReady>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d113      	bne.n	8003b00 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003ad8:	f7ff fc33 	bl	8003342 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003adc:	f7fe f9ae 	bl	8001e3c <HAL_GetTick>
 8003ae0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003ae4:	f7fe f9aa 	bl	8001e3c <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e203      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003af6:	f7ff fc46 	bl	8003386 <LL_RCC_LSI1_IsReady>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f1      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003b00:	f7ff fc53 	bl	80033aa <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7fe f99a 	bl	8001e3c <HAL_GetTick>
 8003b08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003b0c:	f7fe f996 	bl	8001e3c <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e1ef      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003b1e:	f7ff fc66 	bl	80033ee <LL_RCC_LSI2_IsReady>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0f1      	beq.n	8003b0c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff fc70 	bl	8003412 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003b32:	f7ff fc17 	bl	8003364 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b36:	f7fe f981 	bl	8001e3c <HAL_GetTick>
 8003b3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003b3e:	f7fe f97d 	bl	8001e3c <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e1d6      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003b50:	f7ff fc19 	bl	8003386 <LL_RCC_LSI1_IsReady>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f1      	bne.n	8003b3e <HAL_RCC_OscConfig+0x31a>
 8003b5a:	e051      	b.n	8003c00 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003b5c:	f7ff fbf1 	bl	8003342 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7fe f96c 	bl	8001e3c <HAL_GetTick>
 8003b64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003b66:	e00c      	b.n	8003b82 <HAL_RCC_OscConfig+0x35e>
 8003b68:	20000008 	.word	0x20000008
 8003b6c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003b70:	f7fe f964 	bl	8001e3c <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e1bd      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003b82:	f7ff fc00 	bl	8003386 <LL_RCC_LSI1_IsReady>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f1      	beq.n	8003b70 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003b8c:	f7ff fc1e 	bl	80033cc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003b92:	f7fe f953 	bl	8001e3c <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e1ac      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003ba4:	f7ff fc23 	bl	80033ee <LL_RCC_LSI2_IsReady>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f1      	bne.n	8003b92 <HAL_RCC_OscConfig+0x36e>
 8003bae:	e027      	b.n	8003c00 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003bb0:	f7ff fc0c 	bl	80033cc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb4:	f7fe f942 	bl	8001e3c <HAL_GetTick>
 8003bb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003bbc:	f7fe f93e 	bl	8001e3c <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e197      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003bce:	f7ff fc0e 	bl	80033ee <LL_RCC_LSI2_IsReady>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f1      	bne.n	8003bbc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003bd8:	f7ff fbc4 	bl	8003364 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bdc:	f7fe f92e 	bl	8001e3c <HAL_GetTick>
 8003be0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003be4:	f7fe f92a 	bl	8001e3c <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e183      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003bf6:	f7ff fbc6 	bl	8003386 <LL_RCC_LSI1_IsReady>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1f1      	bne.n	8003be4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d05b      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c0c:	4ba7      	ldr	r3, [pc, #668]	; (8003eac <HAL_RCC_OscConfig+0x688>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d114      	bne.n	8003c42 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003c18:	f7ff fa64 	bl	80030e4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1c:	f7fe f90e 	bl	8001e3c <HAL_GetTick>
 8003c20:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c24:	f7fe f90a 	bl	8001e3c <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e163      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c36:	4b9d      	ldr	r3, [pc, #628]	; (8003eac <HAL_RCC_OscConfig+0x688>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0f0      	beq.n	8003c24 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d102      	bne.n	8003c50 <HAL_RCC_OscConfig+0x42c>
 8003c4a:	f7ff fb24 	bl	8003296 <LL_RCC_LSE_Enable>
 8003c4e:	e00c      	b.n	8003c6a <HAL_RCC_OscConfig+0x446>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b05      	cmp	r3, #5
 8003c56:	d104      	bne.n	8003c62 <HAL_RCC_OscConfig+0x43e>
 8003c58:	f7ff fb3f 	bl	80032da <LL_RCC_LSE_EnableBypass>
 8003c5c:	f7ff fb1b 	bl	8003296 <LL_RCC_LSE_Enable>
 8003c60:	e003      	b.n	8003c6a <HAL_RCC_OscConfig+0x446>
 8003c62:	f7ff fb29 	bl	80032b8 <LL_RCC_LSE_Disable>
 8003c66:	f7ff fb49 	bl	80032fc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d014      	beq.n	8003c9c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c72:	f7fe f8e3 	bl	8001e3c <HAL_GetTick>
 8003c76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003c78:	e00a      	b.n	8003c90 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7a:	f7fe f8df 	bl	8001e3c <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e136      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003c90:	f7ff fb45 	bl	800331e <LL_RCC_LSE_IsReady>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0ef      	beq.n	8003c7a <HAL_RCC_OscConfig+0x456>
 8003c9a:	e013      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9c:	f7fe f8ce 	bl	8001e3c <HAL_GetTick>
 8003ca0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003ca2:	e00a      	b.n	8003cba <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca4:	f7fe f8ca 	bl	8001e3c <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e121      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003cba:	f7ff fb30 	bl	800331e <LL_RCC_LSE_IsReady>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1ef      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d02c      	beq.n	8003d2a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d014      	beq.n	8003d02 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cd8:	f7ff faa9 	bl	800322e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cdc:	f7fe f8ae 	bl	8001e3c <HAL_GetTick>
 8003ce0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ce4:	f7fe f8aa 	bl	8001e3c <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e103      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003cf6:	f7ff fabc 	bl	8003272 <LL_RCC_HSI48_IsReady>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f1      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x4c0>
 8003d00:	e013      	b.n	8003d2a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d02:	f7ff faa5 	bl	8003250 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d06:	f7fe f899 	bl	8001e3c <HAL_GetTick>
 8003d0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d0e:	f7fe f895 	bl	8001e3c <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e0ee      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003d20:	f7ff faa7 	bl	8003272 <LL_RCC_HSI48_IsReady>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f1      	bne.n	8003d0e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 80e4 	beq.w	8003efc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d34:	f7ff fc05 	bl	8003542 <LL_RCC_GetSysClkSource>
 8003d38:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	f040 80b4 	bne.w	8003eb4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f003 0203 	and.w	r2, r3, #3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d123      	bne.n	8003da2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d11c      	bne.n	8003da2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	0a1b      	lsrs	r3, r3, #8
 8003d6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d114      	bne.n	8003da2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d10d      	bne.n	8003da2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d106      	bne.n	8003da2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d05d      	beq.n	8003e5e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	2b0c      	cmp	r3, #12
 8003da6:	d058      	beq.n	8003e5a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e0a1      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003dba:	f7ff fc85 	bl	80036c8 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dbe:	f7fe f83d 	bl	8001e3c <HAL_GetTick>
 8003dc2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc6:	f7fe f839 	bl	8001e3c <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e092      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1ef      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	4b30      	ldr	r3, [pc, #192]	; (8003eb0 <HAL_RCC_OscConfig+0x68c>)
 8003dee:	4013      	ands	r3, r2
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003df8:	4311      	orrs	r1, r2
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dfe:	0212      	lsls	r2, r2, #8
 8003e00:	4311      	orrs	r1, r2
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e06:	4311      	orrs	r1, r2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e0c:	4311      	orrs	r1, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e12:	430a      	orrs	r2, r1
 8003e14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e1c:	f7ff fc45 	bl	80036aa <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e30:	f7fe f804 	bl	8001e3c <HAL_GetTick>
 8003e34:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e38:	f7fe f800 	bl	8001e3c <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e059      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0ef      	beq.n	8003e38 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e58:	e050      	b.n	8003efc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e04f      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d147      	bne.n	8003efc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e6c:	f7ff fc1d 	bl	80036aa <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e80:	f7fd ffdc 	bl	8001e3c <HAL_GetTick>
 8003e84:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e88:	f7fd ffd8 	bl	8001e3c <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e031      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0ef      	beq.n	8003e88 <HAL_RCC_OscConfig+0x664>
 8003ea8:	e028      	b.n	8003efc <HAL_RCC_OscConfig+0x6d8>
 8003eaa:	bf00      	nop
 8003eac:	58000400 	.word	0x58000400
 8003eb0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2b0c      	cmp	r3, #12
 8003eb8:	d01e      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eba:	f7ff fc05 	bl	80036c8 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebe:	f7fd ffbd 	bl	8001e3c <HAL_GetTick>
 8003ec2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec6:	f7fd ffb9 	bl	8001e3c <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e012      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1ef      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <HAL_RCC_OscConfig+0x6e4>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	60cb      	str	r3, [r1, #12]
 8003ef6:	e001      	b.n	8003efc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3734      	adds	r7, #52	; 0x34
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd90      	pop	{r4, r7, pc}
 8003f06:	bf00      	nop
 8003f08:	eefefffc 	.word	0xeefefffc

08003f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e12d      	b.n	800417c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f20:	4b98      	ldr	r3, [pc, #608]	; (8004184 <HAL_RCC_ClockConfig+0x278>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d91b      	bls.n	8003f66 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2e:	4b95      	ldr	r3, [pc, #596]	; (8004184 <HAL_RCC_ClockConfig+0x278>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 0207 	bic.w	r2, r3, #7
 8003f36:	4993      	ldr	r1, [pc, #588]	; (8004184 <HAL_RCC_ClockConfig+0x278>)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f3e:	f7fd ff7d 	bl	8001e3c <HAL_GetTick>
 8003f42:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003f46:	f7fd ff79 	bl	8001e3c <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e111      	b.n	800417c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f58:	4b8a      	ldr	r3, [pc, #552]	; (8004184 <HAL_RCC_ClockConfig+0x278>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d1ef      	bne.n	8003f46 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d016      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff faef 	bl	800355a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003f7c:	f7fd ff5e 	bl	8001e3c <HAL_GetTick>
 8003f80:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003f84:	f7fd ff5a 	bl	8001e3c <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e0f2      	b.n	800417c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003f96:	f7ff fbe9 	bl	800376c <LL_RCC_IsActiveFlag_HPRE>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0f1      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d016      	beq.n	8003fda <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff fae6 	bl	8003582 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003fb6:	f7fd ff41 	bl	8001e3c <HAL_GetTick>
 8003fba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003fbe:	f7fd ff3d 	bl	8001e3c <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e0d5      	b.n	800417c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003fd0:	f7ff fbde 	bl	8003790 <LL_RCC_IsActiveFlag_C2HPRE>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f1      	beq.n	8003fbe <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d016      	beq.n	8004014 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff fadf 	bl	80035ae <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ff0:	f7fd ff24 	bl	8001e3c <HAL_GetTick>
 8003ff4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ff8:	f7fd ff20 	bl	8001e3c <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e0b8      	b.n	800417c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800400a:	f7ff fbd4 	bl	80037b6 <LL_RCC_IsActiveFlag_SHDHPRE>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0f1      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d016      	beq.n	800404e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff fad9 	bl	80035dc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800402a:	f7fd ff07 	bl	8001e3c <HAL_GetTick>
 800402e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004030:	e008      	b.n	8004044 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004032:	f7fd ff03 	bl	8001e3c <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e09b      	b.n	800417c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004044:	f7ff fbca 	bl	80037dc <LL_RCC_IsActiveFlag_PPRE1>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f1      	beq.n	8004032 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d017      	beq.n	800408a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff facf 	bl	8003604 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004066:	f7fd fee9 	bl	8001e3c <HAL_GetTick>
 800406a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800406c:	e008      	b.n	8004080 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800406e:	f7fd fee5 	bl	8001e3c <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e07d      	b.n	800417c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004080:	f7ff fbbe 	bl	8003800 <LL_RCC_IsActiveFlag_PPRE2>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f1      	beq.n	800406e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d043      	beq.n	800411e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b02      	cmp	r3, #2
 800409c:	d106      	bne.n	80040ac <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800409e:	f7ff f86f 	bl	8003180 <LL_RCC_HSE_IsReady>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d11e      	bne.n	80040e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e067      	b.n	800417c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d106      	bne.n	80040c2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80040b4:	f7ff fb17 	bl	80036e6 <LL_RCC_PLL_IsReady>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d113      	bne.n	80040e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e05c      	b.n	800417c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80040ca:	f7ff f9d7 	bl	800347c <LL_RCC_MSI_IsReady>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d108      	bne.n	80040e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e051      	b.n	800417c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80040d8:	f7ff f882 	bl	80031e0 <LL_RCC_HSI_IsReady>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e04a      	b.n	800417c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff fa15 	bl	800351a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040f0:	f7fd fea4 	bl	8001e3c <HAL_GetTick>
 80040f4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f6:	e00a      	b.n	800410e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f8:	f7fd fea0 	bl	8001e3c <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	f241 3288 	movw	r2, #5000	; 0x1388
 8004106:	4293      	cmp	r3, r2
 8004108:	d901      	bls.n	800410e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e036      	b.n	800417c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410e:	f7ff fa18 	bl	8003542 <LL_RCC_GetSysClkSource>
 8004112:	4602      	mov	r2, r0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	429a      	cmp	r2, r3
 800411c:	d1ec      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800411e:	4b19      	ldr	r3, [pc, #100]	; (8004184 <HAL_RCC_ClockConfig+0x278>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d21b      	bcs.n	8004164 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412c:	4b15      	ldr	r3, [pc, #84]	; (8004184 <HAL_RCC_ClockConfig+0x278>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f023 0207 	bic.w	r2, r3, #7
 8004134:	4913      	ldr	r1, [pc, #76]	; (8004184 <HAL_RCC_ClockConfig+0x278>)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	4313      	orrs	r3, r2
 800413a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800413c:	f7fd fe7e 	bl	8001e3c <HAL_GetTick>
 8004140:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004142:	e008      	b.n	8004156 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004144:	f7fd fe7a 	bl	8001e3c <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e012      	b.n	800417c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004156:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <HAL_RCC_ClockConfig+0x278>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d1ef      	bne.n	8004144 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004164:	f000 f87e 	bl	8004264 <HAL_RCC_GetHCLKFreq>
 8004168:	4603      	mov	r3, r0
 800416a:	4a07      	ldr	r2, [pc, #28]	; (8004188 <HAL_RCC_ClockConfig+0x27c>)
 800416c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800416e:	f7fd fe71 	bl	8001e54 <HAL_GetTickPrio>
 8004172:	4603      	mov	r3, r0
 8004174:	4618      	mov	r0, r3
 8004176:	f7fd faff 	bl	8001778 <HAL_InitTick>
 800417a:	4603      	mov	r3, r0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	58004000 	.word	0x58004000
 8004188:	20000008 	.word	0x20000008

0800418c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800418c:	b590      	push	{r4, r7, lr}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004192:	f7ff f9d6 	bl	8003542 <LL_RCC_GetSysClkSource>
 8004196:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10a      	bne.n	80041b4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800419e:	f7ff f992 	bl	80034c6 <LL_RCC_MSI_GetRange>
 80041a2:	4603      	mov	r3, r0
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	4a2b      	ldr	r2, [pc, #172]	; (8004258 <HAL_RCC_GetSysClockFreq+0xcc>)
 80041ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	e04b      	b.n	800424c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d102      	bne.n	80041c0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041ba:	4b28      	ldr	r3, [pc, #160]	; (800425c <HAL_RCC_GetSysClockFreq+0xd0>)
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	e045      	b.n	800424c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d10a      	bne.n	80041dc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80041c6:	f7fe ffab 	bl	8003120 <LL_RCC_HSE_IsEnabledDiv2>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d102      	bne.n	80041d6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80041d0:	4b22      	ldr	r3, [pc, #136]	; (800425c <HAL_RCC_GetSysClockFreq+0xd0>)
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	e03a      	b.n	800424c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80041d6:	4b22      	ldr	r3, [pc, #136]	; (8004260 <HAL_RCC_GetSysClockFreq+0xd4>)
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	e037      	b.n	800424c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80041dc:	f7ff faba 	bl	8003754 <LL_RCC_PLL_GetMainSource>
 80041e0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d003      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0x64>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d003      	beq.n	80041f6 <HAL_RCC_GetSysClockFreq+0x6a>
 80041ee:	e00d      	b.n	800420c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80041f0:	4b1a      	ldr	r3, [pc, #104]	; (800425c <HAL_RCC_GetSysClockFreq+0xd0>)
 80041f2:	60bb      	str	r3, [r7, #8]
        break;
 80041f4:	e015      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80041f6:	f7fe ff93 	bl	8003120 <LL_RCC_HSE_IsEnabledDiv2>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d102      	bne.n	8004206 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004200:	4b16      	ldr	r3, [pc, #88]	; (800425c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004202:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004204:	e00d      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004206:	4b16      	ldr	r3, [pc, #88]	; (8004260 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004208:	60bb      	str	r3, [r7, #8]
        break;
 800420a:	e00a      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800420c:	f7ff f95b 	bl	80034c6 <LL_RCC_MSI_GetRange>
 8004210:	4603      	mov	r3, r0
 8004212:	091b      	lsrs	r3, r3, #4
 8004214:	f003 030f 	and.w	r3, r3, #15
 8004218:	4a0f      	ldr	r2, [pc, #60]	; (8004258 <HAL_RCC_GetSysClockFreq+0xcc>)
 800421a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800421e:	60bb      	str	r3, [r7, #8]
        break;
 8004220:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004222:	f7ff fa72 	bl	800370a <LL_RCC_PLL_GetN>
 8004226:	4602      	mov	r2, r0
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	fb03 f402 	mul.w	r4, r3, r2
 800422e:	f7ff fa85 	bl	800373c <LL_RCC_PLL_GetDivider>
 8004232:	4603      	mov	r3, r0
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	3301      	adds	r3, #1
 8004238:	fbb4 f4f3 	udiv	r4, r4, r3
 800423c:	f7ff fa72 	bl	8003724 <LL_RCC_PLL_GetR>
 8004240:	4603      	mov	r3, r0
 8004242:	0f5b      	lsrs	r3, r3, #29
 8004244:	3301      	adds	r3, #1
 8004246:	fbb4 f3f3 	udiv	r3, r4, r3
 800424a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800424c:	68fb      	ldr	r3, [r7, #12]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	bd90      	pop	{r4, r7, pc}
 8004256:	bf00      	nop
 8004258:	08008af8 	.word	0x08008af8
 800425c:	00f42400 	.word	0x00f42400
 8004260:	01e84800 	.word	0x01e84800

08004264 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004264:	b598      	push	{r3, r4, r7, lr}
 8004266:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004268:	f7ff ff90 	bl	800418c <HAL_RCC_GetSysClockFreq>
 800426c:	4604      	mov	r4, r0
 800426e:	f7ff f9dd 	bl	800362c <LL_RCC_GetAHBPrescaler>
 8004272:	4603      	mov	r3, r0
 8004274:	091b      	lsrs	r3, r3, #4
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	4a03      	ldr	r2, [pc, #12]	; (8004288 <HAL_RCC_GetHCLKFreq+0x24>)
 800427c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004280:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004284:	4618      	mov	r0, r3
 8004286:	bd98      	pop	{r3, r4, r7, pc}
 8004288:	08008a98 	.word	0x08008a98

0800428c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800428c:	b598      	push	{r3, r4, r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004290:	f7ff ffe8 	bl	8004264 <HAL_RCC_GetHCLKFreq>
 8004294:	4604      	mov	r4, r0
 8004296:	f7ff f9f0 	bl	800367a <LL_RCC_GetAPB1Prescaler>
 800429a:	4603      	mov	r3, r0
 800429c:	0a1b      	lsrs	r3, r3, #8
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	4a04      	ldr	r2, [pc, #16]	; (80042b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a8:	f003 031f 	and.w	r3, r3, #31
 80042ac:	fa24 f303 	lsr.w	r3, r4, r3
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	bd98      	pop	{r3, r4, r7, pc}
 80042b4:	08008ad8 	.word	0x08008ad8

080042b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042b8:	b598      	push	{r3, r4, r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80042bc:	f7ff ffd2 	bl	8004264 <HAL_RCC_GetHCLKFreq>
 80042c0:	4604      	mov	r4, r0
 80042c2:	f7ff f9e6 	bl	8003692 <LL_RCC_GetAPB2Prescaler>
 80042c6:	4603      	mov	r3, r0
 80042c8:	0adb      	lsrs	r3, r3, #11
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	4a04      	ldr	r2, [pc, #16]	; (80042e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80042dc:	4618      	mov	r0, r3
 80042de:	bd98      	pop	{r3, r4, r7, pc}
 80042e0:	08008ad8 	.word	0x08008ad8

080042e4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	226f      	movs	r2, #111	; 0x6f
 80042f2:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 80042f4:	f7ff f925 	bl	8003542 <LL_RCC_GetSysClkSource>
 80042f8:	4602      	mov	r2, r0
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80042fe:	f7ff f995 	bl	800362c <LL_RCC_GetAHBPrescaler>
 8004302:	4602      	mov	r2, r0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8004308:	f7ff f9b7 	bl	800367a <LL_RCC_GetAPB1Prescaler>
 800430c:	4602      	mov	r2, r0
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8004312:	f7ff f9be 	bl	8003692 <LL_RCC_GetAPB2Prescaler>
 8004316:	4602      	mov	r2, r0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800431c:	f7ff f992 	bl	8003644 <LL_C2_RCC_GetAHBPrescaler>
 8004320:	4602      	mov	r2, r0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8004326:	f7ff f99a 	bl	800365e <LL_RCC_GetAHB4Prescaler>
 800432a:	4602      	mov	r2, r0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004330:	4b04      	ldr	r3, [pc, #16]	; (8004344 <HAL_RCC_GetClockConfig+0x60>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0207 	and.w	r2, r3, #7
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	601a      	str	r2, [r3, #0]
}
 800433c:	bf00      	nop
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	58004000 	.word	0x58004000

08004348 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004348:	b590      	push	{r4, r7, lr}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2bb0      	cmp	r3, #176	; 0xb0
 8004354:	d903      	bls.n	800435e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004356:	4b15      	ldr	r3, [pc, #84]	; (80043ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	e007      	b.n	800436e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	091b      	lsrs	r3, r3, #4
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	4a11      	ldr	r2, [pc, #68]	; (80043ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800436c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800436e:	f7ff f976 	bl	800365e <LL_RCC_GetAHB4Prescaler>
 8004372:	4603      	mov	r3, r0
 8004374:	091b      	lsrs	r3, r3, #4
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	4a0d      	ldr	r2, [pc, #52]	; (80043b0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800437c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	fbb2 f3f3 	udiv	r3, r2, r3
 8004386:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4a0a      	ldr	r2, [pc, #40]	; (80043b4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800438c:	fba2 2303 	umull	r2, r3, r2, r3
 8004390:	0c9c      	lsrs	r4, r3, #18
 8004392:	f7fe feb7 	bl	8003104 <HAL_PWREx_GetVoltageRange>
 8004396:	4603      	mov	r3, r0
 8004398:	4619      	mov	r1, r3
 800439a:	4620      	mov	r0, r4
 800439c:	f000 f80c 	bl	80043b8 <RCC_SetFlashLatency>
 80043a0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd90      	pop	{r4, r7, pc}
 80043aa:	bf00      	nop
 80043ac:	08008af8 	.word	0x08008af8
 80043b0:	08008a98 	.word	0x08008a98
 80043b4:	431bde83 	.word	0x431bde83

080043b8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80043b8:	b590      	push	{r4, r7, lr}
 80043ba:	b093      	sub	sp, #76	; 0x4c
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80043c2:	4b37      	ldr	r3, [pc, #220]	; (80044a0 <RCC_SetFlashLatency+0xe8>)
 80043c4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80043c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80043ce:	4a35      	ldr	r2, [pc, #212]	; (80044a4 <RCC_SetFlashLatency+0xec>)
 80043d0:	f107 031c 	add.w	r3, r7, #28
 80043d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80043d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80043da:	4b33      	ldr	r3, [pc, #204]	; (80044a8 <RCC_SetFlashLatency+0xf0>)
 80043dc:	f107 040c 	add.w	r4, r7, #12
 80043e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80043e6:	2300      	movs	r3, #0
 80043e8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f0:	d11a      	bne.n	8004428 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80043f2:	2300      	movs	r3, #0
 80043f4:	643b      	str	r3, [r7, #64]	; 0x40
 80043f6:	e013      	b.n	8004420 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80043f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	3348      	adds	r3, #72	; 0x48
 80043fe:	443b      	add	r3, r7
 8004400:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	429a      	cmp	r2, r3
 8004408:	d807      	bhi.n	800441a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800440a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	3348      	adds	r3, #72	; 0x48
 8004410:	443b      	add	r3, r7
 8004412:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004416:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004418:	e020      	b.n	800445c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800441a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800441c:	3301      	adds	r3, #1
 800441e:	643b      	str	r3, [r7, #64]	; 0x40
 8004420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004422:	2b03      	cmp	r3, #3
 8004424:	d9e8      	bls.n	80043f8 <RCC_SetFlashLatency+0x40>
 8004426:	e019      	b.n	800445c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004428:	2300      	movs	r3, #0
 800442a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800442c:	e013      	b.n	8004456 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800442e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	3348      	adds	r3, #72	; 0x48
 8004434:	443b      	add	r3, r7
 8004436:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	429a      	cmp	r2, r3
 800443e:	d807      	bhi.n	8004450 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	3348      	adds	r3, #72	; 0x48
 8004446:	443b      	add	r3, r7
 8004448:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800444c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800444e:	e005      	b.n	800445c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004452:	3301      	adds	r3, #1
 8004454:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004458:	2b02      	cmp	r3, #2
 800445a:	d9e8      	bls.n	800442e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800445c:	4b13      	ldr	r3, [pc, #76]	; (80044ac <RCC_SetFlashLatency+0xf4>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f023 0207 	bic.w	r2, r3, #7
 8004464:	4911      	ldr	r1, [pc, #68]	; (80044ac <RCC_SetFlashLatency+0xf4>)
 8004466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004468:	4313      	orrs	r3, r2
 800446a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800446c:	f7fd fce6 	bl	8001e3c <HAL_GetTick>
 8004470:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004472:	e008      	b.n	8004486 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004474:	f7fd fce2 	bl	8001e3c <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e007      	b.n	8004496 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004486:	4b09      	ldr	r3, [pc, #36]	; (80044ac <RCC_SetFlashLatency+0xf4>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004490:	429a      	cmp	r2, r3
 8004492:	d1ef      	bne.n	8004474 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	374c      	adds	r7, #76	; 0x4c
 800449a:	46bd      	mov	sp, r7
 800449c:	bd90      	pop	{r4, r7, pc}
 800449e:	bf00      	nop
 80044a0:	08008a6c 	.word	0x08008a6c
 80044a4:	08008a7c 	.word	0x08008a7c
 80044a8:	08008a88 	.word	0x08008a88
 80044ac:	58004000 	.word	0x58004000

080044b0 <LL_RCC_LSE_IsEnabled>:
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80044b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <LL_RCC_LSE_IsEnabled+0x18>
 80044c4:	2301      	movs	r3, #1
 80044c6:	e000      	b.n	80044ca <LL_RCC_LSE_IsEnabled+0x1a>
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <LL_RCC_LSE_IsReady>:
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80044d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d101      	bne.n	80044ec <LL_RCC_LSE_IsReady+0x18>
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <LL_RCC_LSE_IsReady+0x1a>
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <LL_RCC_MSI_EnablePLLMode>:
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80044fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004506:	f043 0304 	orr.w	r3, r3, #4
 800450a:	6013      	str	r3, [r2, #0]
}
 800450c:	bf00      	nop
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <LL_RCC_SetRFWKPClockSource>:
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800451e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004526:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800452a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <LL_RCC_SetSMPSClockSource>:
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800454a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	f023 0203 	bic.w	r2, r3, #3
 8004554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4313      	orrs	r3, r2
 800455c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <LL_RCC_SetSMPSPrescaler>:
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800457c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4313      	orrs	r3, r2
 8004584:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <LL_RCC_SetUSARTClockSource>:
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800459a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a2:	f023 0203 	bic.w	r2, r3, #3
 80045a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <LL_RCC_SetLPUARTClockSource>:
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80045c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <LL_RCC_SetI2CClockSource>:
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80045f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	091b      	lsrs	r3, r3, #4
 80045fe:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004602:	43db      	mvns	r3, r3
 8004604:	401a      	ands	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800460e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <LL_RCC_SetLPTIMClockSource>:
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800462c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004630:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	0c1b      	lsrs	r3, r3, #16
 8004638:	041b      	lsls	r3, r3, #16
 800463a:	43db      	mvns	r3, r3
 800463c:	401a      	ands	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	041b      	lsls	r3, r3, #16
 8004642:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <LL_RCC_SetSAIClockSource>:
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004668:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800466c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <LL_RCC_SetRNGClockSource>:
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800468c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004694:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004698:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <LL_RCC_SetCLK48ClockSource>:
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80046b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <LL_RCC_SetUSBClockSource>:
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff ffe3 	bl	80046b0 <LL_RCC_SetCLK48ClockSource>
}
 80046ea:	bf00      	nop
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <LL_RCC_SetADCClockSource>:
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80046fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004702:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004706:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <LL_RCC_SetRTCClockSource>:
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004732:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <LL_RCC_GetRTCClockSource>:
{
 800474a:	b480      	push	{r7}
 800474c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800474e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004756:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800475a:	4618      	mov	r0, r3
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <LL_RCC_ForceBackupDomainReset>:
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800476c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004770:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800477c:	bf00      	nop
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004786:	b480      	push	{r7}
 8004788:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800478a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004792:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800479a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800479e:	bf00      	nop
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <LL_RCC_PLLSAI1_Enable>:
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80047ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047ba:	6013      	str	r3, [r2, #0]
}
 80047bc:	bf00      	nop
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <LL_RCC_PLLSAI1_Disable>:
{
 80047c6:	b480      	push	{r7}
 80047c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80047ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047d8:	6013      	str	r3, [r2, #0]
}
 80047da:	bf00      	nop
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <LL_RCC_PLLSAI1_IsReady>:
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80047e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047f6:	d101      	bne.n	80047fc <LL_RCC_PLLSAI1_IsReady+0x18>
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <LL_RCC_PLLSAI1_IsReady+0x1a>
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004810:	2300      	movs	r3, #0
 8004812:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004814:	2300      	movs	r3, #0
 8004816:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004820:	2b00      	cmp	r3, #0
 8004822:	d034      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800482c:	d021      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800482e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004832:	d81b      	bhi.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004834:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004838:	d01d      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800483a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800483e:	d815      	bhi.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00b      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004848:	d110      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800484a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004858:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800485a:	e00d      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3304      	adds	r3, #4
 8004860:	4618      	mov	r0, r3
 8004862:	f000 f94d 	bl	8004b00 <RCCEx_PLLSAI1_ConfigNP>
 8004866:	4603      	mov	r3, r0
 8004868:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800486a:	e005      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	77fb      	strb	r3, [r7, #31]
        break;
 8004870:	e002      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004872:	bf00      	nop
 8004874:	e000      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004876:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004878:	7ffb      	ldrb	r3, [r7, #31]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d105      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff fee8 	bl	8004658 <LL_RCC_SetSAIClockSource>
 8004888:	e001      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488a:	7ffb      	ldrb	r3, [r7, #31]
 800488c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004896:	2b00      	cmp	r3, #0
 8004898:	d046      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800489a:	f7ff ff56 	bl	800474a <LL_RCC_GetRTCClockSource>
 800489e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d03c      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80048aa:	f7fe fc1b 	bl	80030e4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d105      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff ff30 	bl	800471e <LL_RCC_SetRTCClockSource>
 80048be:	e02e      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80048c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80048ca:	f7ff ff4b 	bl	8004764 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80048ce:	f7ff ff5a 	bl	8004786 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	4313      	orrs	r3, r2
 80048de:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80048e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80048ea:	f7ff fde1 	bl	80044b0 <LL_RCC_LSE_IsEnabled>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d114      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048f4:	f7fd faa2 	bl	8001e3c <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80048fa:	e00b      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048fc:	f7fd fa9e 	bl	8001e3c <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	f241 3288 	movw	r2, #5000	; 0x1388
 800490a:	4293      	cmp	r3, r2
 800490c:	d902      	bls.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	77fb      	strb	r3, [r7, #31]
              break;
 8004912:	e004      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004914:	f7ff fdde 	bl	80044d4 <LL_RCC_LSE_IsReady>
 8004918:	4603      	mov	r3, r0
 800491a:	2b01      	cmp	r3, #1
 800491c:	d1ee      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800491e:	7ffb      	ldrb	r3, [r7, #31]
 8004920:	77bb      	strb	r3, [r7, #30]
 8004922:	e001      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004924:	7ffb      	ldrb	r3, [r7, #31]
 8004926:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d004      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff fe2a 	bl	8004592 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d004      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff fe35 	bl	80045be <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0310 	and.w	r3, r3, #16
 800495c:	2b00      	cmp	r3, #0
 800495e:	d004      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	4618      	mov	r0, r3
 8004966:	f7ff fe5d 	bl	8004624 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b00      	cmp	r3, #0
 8004974:	d004      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff fe52 	bl	8004624 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	d004      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff fe2a 	bl	80045ea <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d004      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fe1f 	bl	80045ea <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d022      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff fe8d 	bl	80046dc <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ca:	d107      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80049cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049da:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049e4:	d10b      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3304      	adds	r3, #4
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 f8e3 	bl	8004bb6 <RCCEx_PLLSAI1_ConfigNQ>
 80049f0:	4603      	mov	r3, r0
 80049f2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80049f4:	7ffb      	ldrb	r3, [r7, #31]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80049fa:	7ffb      	ldrb	r3, [r7, #31]
 80049fc:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d02b      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a12:	d008      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a1c:	d003      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d105      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff fe2a 	bl	8004684 <LL_RCC_SetRNGClockSource>
 8004a30:	e00a      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	f7ff fe21 	bl	8004684 <LL_RCC_SetRNGClockSource>
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f7ff fe34 	bl	80046b0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004a50:	d107      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a60:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d022      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff fe3d 	bl	80046f2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a80:	d107      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a90:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a9a:	d10b      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 f8e3 	bl	8004c6c <RCCEx_PLLSAI1_ConfigNR>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004aaa:	7ffb      	ldrb	r3, [r7, #31]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004ab0:	7ffb      	ldrb	r3, [r7, #31]
 8004ab2:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d004      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff fd26 	bl	8004516 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d009      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff fd45 	bl	800456a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff fd2c 	bl	8004542 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004aea:	7fbb      	ldrb	r3, [r7, #30]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3720      	adds	r7, #32
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004af8:	f7ff fcfe 	bl	80044f8 <LL_RCC_MSI_EnablePLLMode>
}
 8004afc:	bf00      	nop
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004b0c:	f7ff fe5b 	bl	80047c6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004b10:	f7fd f994 	bl	8001e3c <HAL_GetTick>
 8004b14:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004b16:	e009      	b.n	8004b2c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b18:	f7fd f990 	bl	8001e3c <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d902      	bls.n	8004b2c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	73fb      	strb	r3, [r7, #15]
      break;
 8004b2a:	e004      	b.n	8004b36 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004b2c:	f7ff fe5a 	bl	80047e4 <LL_RCC_PLLSAI1_IsReady>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f0      	bne.n	8004b18 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d137      	bne.n	8004bac <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b50:	4313      	orrs	r3, r2
 8004b52:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b66:	4313      	orrs	r3, r2
 8004b68:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004b6a:	f7ff fe1d 	bl	80047a8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b6e:	f7fd f965 	bl	8001e3c <HAL_GetTick>
 8004b72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004b74:	e009      	b.n	8004b8a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b76:	f7fd f961 	bl	8001e3c <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d902      	bls.n	8004b8a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	73fb      	strb	r3, [r7, #15]
        break;
 8004b88:	e004      	b.n	8004b94 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004b8a:	f7ff fe2b 	bl	80047e4 <LL_RCC_PLLSAI1_IsReady>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d1f0      	bne.n	8004b76 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d108      	bne.n	8004bac <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b084      	sub	sp, #16
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004bc2:	f7ff fe00 	bl	80047c6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004bc6:	f7fd f939 	bl	8001e3c <HAL_GetTick>
 8004bca:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004bcc:	e009      	b.n	8004be2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bce:	f7fd f935 	bl	8001e3c <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d902      	bls.n	8004be2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	73fb      	strb	r3, [r7, #15]
      break;
 8004be0:	e004      	b.n	8004bec <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004be2:	f7ff fdff 	bl	80047e4 <LL_RCC_PLLSAI1_IsReady>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1f0      	bne.n	8004bce <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d137      	bne.n	8004c62 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c06:	4313      	orrs	r3, r2
 8004c08:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004c20:	f7ff fdc2 	bl	80047a8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c24:	f7fd f90a 	bl	8001e3c <HAL_GetTick>
 8004c28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004c2a:	e009      	b.n	8004c40 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c2c:	f7fd f906 	bl	8001e3c <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d902      	bls.n	8004c40 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	73fb      	strb	r3, [r7, #15]
        break;
 8004c3e:	e004      	b.n	8004c4a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004c40:	f7ff fdd0 	bl	80047e4 <LL_RCC_PLLSAI1_IsReady>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d1f0      	bne.n	8004c2c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d108      	bne.n	8004c62 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c74:	2300      	movs	r3, #0
 8004c76:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004c78:	f7ff fda5 	bl	80047c6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004c7c:	f7fd f8de 	bl	8001e3c <HAL_GetTick>
 8004c80:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004c82:	e009      	b.n	8004c98 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c84:	f7fd f8da 	bl	8001e3c <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d902      	bls.n	8004c98 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	73fb      	strb	r3, [r7, #15]
      break;
 8004c96:	e004      	b.n	8004ca2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004c98:	f7ff fda4 	bl	80047e4 <LL_RCC_PLLSAI1_IsReady>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f0      	bne.n	8004c84 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d137      	bne.n	8004d18 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	021b      	lsls	r3, r3, #8
 8004cb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004cd6:	f7ff fd67 	bl	80047a8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cda:	f7fd f8af 	bl	8001e3c <HAL_GetTick>
 8004cde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004ce0:	e009      	b.n	8004cf6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ce2:	f7fd f8ab 	bl	8001e3c <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d902      	bls.n	8004cf6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	73fb      	strb	r3, [r7, #15]
        break;
 8004cf4:	e004      	b.n	8004d00 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004cf6:	f7ff fd75 	bl	80047e4 <LL_RCC_PLLSAI1_IsReady>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d1f0      	bne.n	8004ce2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d108      	bne.n	8004d18 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d0a:	691a      	ldr	r2, [r3, #16]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d14:	4313      	orrs	r3, r2
 8004d16:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b082      	sub	sp, #8
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e049      	b.n	8004dc8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d106      	bne.n	8004d4e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f841 	bl	8004dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2202      	movs	r2, #2
 8004d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4610      	mov	r0, r2
 8004d62:	f000 f9d5 	bl	8005110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d001      	beq.n	8004dfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e036      	b.n	8004e6a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a17      	ldr	r2, [pc, #92]	; (8004e78 <HAL_TIM_Base_Start_IT+0x94>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d004      	beq.n	8004e28 <HAL_TIM_Base_Start_IT+0x44>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e26:	d115      	bne.n	8004e54 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <HAL_TIM_Base_Start_IT+0x98>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b06      	cmp	r3, #6
 8004e38:	d015      	beq.n	8004e66 <HAL_TIM_Base_Start_IT+0x82>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e40:	d011      	beq.n	8004e66 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f042 0201 	orr.w	r2, r2, #1
 8004e50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e52:	e008      	b.n	8004e66 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0201 	orr.w	r2, r2, #1
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	e000      	b.n	8004e68 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40012c00 	.word	0x40012c00
 8004e7c:	00010007 	.word	0x00010007

08004e80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d122      	bne.n	8004edc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d11b      	bne.n	8004edc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f06f 0202 	mvn.w	r2, #2
 8004eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f905 	bl	80050d2 <HAL_TIM_IC_CaptureCallback>
 8004ec8:	e005      	b.n	8004ed6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f8f7 	bl	80050be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f908 	bl	80050e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d122      	bne.n	8004f30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d11b      	bne.n	8004f30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f06f 0204 	mvn.w	r2, #4
 8004f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2202      	movs	r2, #2
 8004f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f8db 	bl	80050d2 <HAL_TIM_IC_CaptureCallback>
 8004f1c:	e005      	b.n	8004f2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f8cd 	bl	80050be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f8de 	bl	80050e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b08      	cmp	r3, #8
 8004f3c:	d122      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d11b      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0208 	mvn.w	r2, #8
 8004f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2204      	movs	r2, #4
 8004f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f8b1 	bl	80050d2 <HAL_TIM_IC_CaptureCallback>
 8004f70:	e005      	b.n	8004f7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f8a3 	bl	80050be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f8b4 	bl	80050e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0310 	and.w	r3, r3, #16
 8004f8e:	2b10      	cmp	r3, #16
 8004f90:	d122      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	2b10      	cmp	r3, #16
 8004f9e:	d11b      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0210 	mvn.w	r2, #16
 8004fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2208      	movs	r2, #8
 8004fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f887 	bl	80050d2 <HAL_TIM_IC_CaptureCallback>
 8004fc4:	e005      	b.n	8004fd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f879 	bl	80050be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f88a 	bl	80050e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d10e      	bne.n	8005004 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d107      	bne.n	8005004 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f06f 0201 	mvn.w	r2, #1
 8004ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fc f9d6 	bl	80013b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500e:	2b80      	cmp	r3, #128	; 0x80
 8005010:	d10e      	bne.n	8005030 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501c:	2b80      	cmp	r3, #128	; 0x80
 800501e:	d107      	bne.n	8005030 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f8de 	bl	80051ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800503e:	d10e      	bne.n	800505e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504a:	2b80      	cmp	r3, #128	; 0x80
 800504c:	d107      	bne.n	800505e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f8d1 	bl	8005200 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005068:	2b40      	cmp	r3, #64	; 0x40
 800506a:	d10e      	bne.n	800508a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005076:	2b40      	cmp	r3, #64	; 0x40
 8005078:	d107      	bne.n	800508a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f838 	bl	80050fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b20      	cmp	r3, #32
 8005096:	d10e      	bne.n	80050b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f003 0320 	and.w	r3, r3, #32
 80050a2:	2b20      	cmp	r3, #32
 80050a4:	d107      	bne.n	80050b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f06f 0220 	mvn.w	r2, #32
 80050ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f891 	bl	80051d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050b6:	bf00      	nop
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
	...

08005110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a2a      	ldr	r2, [pc, #168]	; (80051cc <TIM_Base_SetConfig+0xbc>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d003      	beq.n	8005130 <TIM_Base_SetConfig+0x20>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512e:	d108      	bne.n	8005142 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a21      	ldr	r2, [pc, #132]	; (80051cc <TIM_Base_SetConfig+0xbc>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00b      	beq.n	8005162 <TIM_Base_SetConfig+0x52>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005150:	d007      	beq.n	8005162 <TIM_Base_SetConfig+0x52>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a1e      	ldr	r2, [pc, #120]	; (80051d0 <TIM_Base_SetConfig+0xc0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d003      	beq.n	8005162 <TIM_Base_SetConfig+0x52>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a1d      	ldr	r2, [pc, #116]	; (80051d4 <TIM_Base_SetConfig+0xc4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d108      	bne.n	8005174 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4313      	orrs	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a0c      	ldr	r2, [pc, #48]	; (80051cc <TIM_Base_SetConfig+0xbc>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d007      	beq.n	80051b0 <TIM_Base_SetConfig+0xa0>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a0b      	ldr	r2, [pc, #44]	; (80051d0 <TIM_Base_SetConfig+0xc0>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d003      	beq.n	80051b0 <TIM_Base_SetConfig+0xa0>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a0a      	ldr	r2, [pc, #40]	; (80051d4 <TIM_Base_SetConfig+0xc4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d103      	bne.n	80051b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	691a      	ldr	r2, [r3, #16]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	615a      	str	r2, [r3, #20]
}
 80051be:	bf00      	nop
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40012c00 	.word	0x40012c00
 80051d0:	40014400 	.word	0x40014400
 80051d4:	40014800 	.word	0x40014800

080051d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <LL_RCC_GetUSARTClockSource>:
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800521c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005220:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4013      	ands	r3, r2
}
 8005228:	4618      	mov	r0, r3
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <LL_RCC_GetLPUARTClockSource>:
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800523c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005240:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4013      	ands	r3, r2
}
 8005248:	4618      	mov	r0, r3
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e042      	b.n	80052ec <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526c:	2b00      	cmp	r3, #0
 800526e:	d106      	bne.n	800527e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7fc fc7b 	bl	8001b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2224      	movs	r2, #36	; 0x24
 8005282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0201 	bic.w	r2, r2, #1
 8005294:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f82c 	bl	80052f4 <UART_SetConfig>
 800529c:	4603      	mov	r3, r0
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d101      	bne.n	80052a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e022      	b.n	80052ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d002      	beq.n	80052b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fa48 	bl	8005744 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 facf 	bl	8005888 <UART_CheckIdleState>
 80052ea:	4603      	mov	r3, r0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052f8:	b08c      	sub	sp, #48	; 0x30
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	431a      	orrs	r2, r3
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	431a      	orrs	r2, r3
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	4313      	orrs	r3, r2
 800531a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4baf      	ldr	r3, [pc, #700]	; (80055e0 <UART_SetConfig+0x2ec>)
 8005324:	4013      	ands	r3, r2
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	6812      	ldr	r2, [r2, #0]
 800532a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800532c:	430b      	orrs	r3, r1
 800532e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4aa4      	ldr	r2, [pc, #656]	; (80055e4 <UART_SetConfig+0x2f0>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d004      	beq.n	8005360 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800535c:	4313      	orrs	r3, r2
 800535e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800536a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	6812      	ldr	r2, [r2, #0]
 8005372:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005374:	430b      	orrs	r3, r1
 8005376:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537e:	f023 010f 	bic.w	r1, r3, #15
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a95      	ldr	r2, [pc, #596]	; (80055e8 <UART_SetConfig+0x2f4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d125      	bne.n	80053e4 <UART_SetConfig+0xf0>
 8005398:	2003      	movs	r0, #3
 800539a:	f7ff ff3b 	bl	8005214 <LL_RCC_GetUSARTClockSource>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d81b      	bhi.n	80053dc <UART_SetConfig+0xe8>
 80053a4:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <UART_SetConfig+0xb8>)
 80053a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053aa:	bf00      	nop
 80053ac:	080053bd 	.word	0x080053bd
 80053b0:	080053cd 	.word	0x080053cd
 80053b4:	080053c5 	.word	0x080053c5
 80053b8:	080053d5 	.word	0x080053d5
 80053bc:	2301      	movs	r3, #1
 80053be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053c2:	e042      	b.n	800544a <UART_SetConfig+0x156>
 80053c4:	2302      	movs	r3, #2
 80053c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ca:	e03e      	b.n	800544a <UART_SetConfig+0x156>
 80053cc:	2304      	movs	r3, #4
 80053ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053d2:	e03a      	b.n	800544a <UART_SetConfig+0x156>
 80053d4:	2308      	movs	r3, #8
 80053d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053da:	e036      	b.n	800544a <UART_SetConfig+0x156>
 80053dc:	2310      	movs	r3, #16
 80053de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053e2:	e032      	b.n	800544a <UART_SetConfig+0x156>
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a7e      	ldr	r2, [pc, #504]	; (80055e4 <UART_SetConfig+0x2f0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d12a      	bne.n	8005444 <UART_SetConfig+0x150>
 80053ee:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80053f2:	f7ff ff1f 	bl	8005234 <LL_RCC_GetLPUARTClockSource>
 80053f6:	4603      	mov	r3, r0
 80053f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053fc:	d01a      	beq.n	8005434 <UART_SetConfig+0x140>
 80053fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005402:	d81b      	bhi.n	800543c <UART_SetConfig+0x148>
 8005404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005408:	d00c      	beq.n	8005424 <UART_SetConfig+0x130>
 800540a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800540e:	d815      	bhi.n	800543c <UART_SetConfig+0x148>
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <UART_SetConfig+0x128>
 8005414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005418:	d008      	beq.n	800542c <UART_SetConfig+0x138>
 800541a:	e00f      	b.n	800543c <UART_SetConfig+0x148>
 800541c:	2300      	movs	r3, #0
 800541e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005422:	e012      	b.n	800544a <UART_SetConfig+0x156>
 8005424:	2302      	movs	r3, #2
 8005426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800542a:	e00e      	b.n	800544a <UART_SetConfig+0x156>
 800542c:	2304      	movs	r3, #4
 800542e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005432:	e00a      	b.n	800544a <UART_SetConfig+0x156>
 8005434:	2308      	movs	r3, #8
 8005436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800543a:	e006      	b.n	800544a <UART_SetConfig+0x156>
 800543c:	2310      	movs	r3, #16
 800543e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005442:	e002      	b.n	800544a <UART_SetConfig+0x156>
 8005444:	2310      	movs	r3, #16
 8005446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a65      	ldr	r2, [pc, #404]	; (80055e4 <UART_SetConfig+0x2f0>)
 8005450:	4293      	cmp	r3, r2
 8005452:	f040 8097 	bne.w	8005584 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005456:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800545a:	2b08      	cmp	r3, #8
 800545c:	d823      	bhi.n	80054a6 <UART_SetConfig+0x1b2>
 800545e:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <UART_SetConfig+0x170>)
 8005460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005464:	08005489 	.word	0x08005489
 8005468:	080054a7 	.word	0x080054a7
 800546c:	08005491 	.word	0x08005491
 8005470:	080054a7 	.word	0x080054a7
 8005474:	08005497 	.word	0x08005497
 8005478:	080054a7 	.word	0x080054a7
 800547c:	080054a7 	.word	0x080054a7
 8005480:	080054a7 	.word	0x080054a7
 8005484:	0800549f 	.word	0x0800549f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005488:	f7fe ff00 	bl	800428c <HAL_RCC_GetPCLK1Freq>
 800548c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800548e:	e010      	b.n	80054b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005490:	4b56      	ldr	r3, [pc, #344]	; (80055ec <UART_SetConfig+0x2f8>)
 8005492:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005494:	e00d      	b.n	80054b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005496:	f7fe fe79 	bl	800418c <HAL_RCC_GetSysClockFreq>
 800549a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800549c:	e009      	b.n	80054b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800549e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054a4:	e005      	b.n	80054b2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80054b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 812b 	beq.w	8005710 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	4a4c      	ldr	r2, [pc, #304]	; (80055f0 <UART_SetConfig+0x2fc>)
 80054c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054c4:	461a      	mov	r2, r3
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80054cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	4613      	mov	r3, r2
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	4413      	add	r3, r2
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d305      	bcc.n	80054ea <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d903      	bls.n	80054f2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80054f0:	e10e      	b.n	8005710 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	2200      	movs	r2, #0
 80054f6:	60bb      	str	r3, [r7, #8]
 80054f8:	60fa      	str	r2, [r7, #12]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	4a3c      	ldr	r2, [pc, #240]	; (80055f0 <UART_SetConfig+0x2fc>)
 8005500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005504:	b29b      	uxth	r3, r3
 8005506:	2200      	movs	r2, #0
 8005508:	603b      	str	r3, [r7, #0]
 800550a:	607a      	str	r2, [r7, #4]
 800550c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005510:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005514:	f7fb fb20 	bl	8000b58 <__aeabi_uldivmod>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4610      	mov	r0, r2
 800551e:	4619      	mov	r1, r3
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	f04f 0300 	mov.w	r3, #0
 8005528:	020b      	lsls	r3, r1, #8
 800552a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800552e:	0202      	lsls	r2, r0, #8
 8005530:	6979      	ldr	r1, [r7, #20]
 8005532:	6849      	ldr	r1, [r1, #4]
 8005534:	0849      	lsrs	r1, r1, #1
 8005536:	2000      	movs	r0, #0
 8005538:	460c      	mov	r4, r1
 800553a:	4605      	mov	r5, r0
 800553c:	eb12 0804 	adds.w	r8, r2, r4
 8005540:	eb43 0905 	adc.w	r9, r3, r5
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	469a      	mov	sl, r3
 800554c:	4693      	mov	fp, r2
 800554e:	4652      	mov	r2, sl
 8005550:	465b      	mov	r3, fp
 8005552:	4640      	mov	r0, r8
 8005554:	4649      	mov	r1, r9
 8005556:	f7fb faff 	bl	8000b58 <__aeabi_uldivmod>
 800555a:	4602      	mov	r2, r0
 800555c:	460b      	mov	r3, r1
 800555e:	4613      	mov	r3, r2
 8005560:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005568:	d308      	bcc.n	800557c <UART_SetConfig+0x288>
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005570:	d204      	bcs.n	800557c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6a3a      	ldr	r2, [r7, #32]
 8005578:	60da      	str	r2, [r3, #12]
 800557a:	e0c9      	b.n	8005710 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005582:	e0c5      	b.n	8005710 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800558c:	d16d      	bne.n	800566a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800558e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005592:	3b01      	subs	r3, #1
 8005594:	2b07      	cmp	r3, #7
 8005596:	d82d      	bhi.n	80055f4 <UART_SetConfig+0x300>
 8005598:	a201      	add	r2, pc, #4	; (adr r2, 80055a0 <UART_SetConfig+0x2ac>)
 800559a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559e:	bf00      	nop
 80055a0:	080055c1 	.word	0x080055c1
 80055a4:	080055c9 	.word	0x080055c9
 80055a8:	080055f5 	.word	0x080055f5
 80055ac:	080055cf 	.word	0x080055cf
 80055b0:	080055f5 	.word	0x080055f5
 80055b4:	080055f5 	.word	0x080055f5
 80055b8:	080055f5 	.word	0x080055f5
 80055bc:	080055d7 	.word	0x080055d7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055c0:	f7fe fe7a 	bl	80042b8 <HAL_RCC_GetPCLK2Freq>
 80055c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055c6:	e01b      	b.n	8005600 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055c8:	4b08      	ldr	r3, [pc, #32]	; (80055ec <UART_SetConfig+0x2f8>)
 80055ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055cc:	e018      	b.n	8005600 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ce:	f7fe fddd 	bl	800418c <HAL_RCC_GetSysClockFreq>
 80055d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055d4:	e014      	b.n	8005600 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055dc:	e010      	b.n	8005600 <UART_SetConfig+0x30c>
 80055de:	bf00      	nop
 80055e0:	cfff69f3 	.word	0xcfff69f3
 80055e4:	40008000 	.word	0x40008000
 80055e8:	40013800 	.word	0x40013800
 80055ec:	00f42400 	.word	0x00f42400
 80055f0:	08008b38 	.word	0x08008b38
      default:
        pclk = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80055fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 8084 	beq.w	8005710 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	4a4b      	ldr	r2, [pc, #300]	; (800573c <UART_SetConfig+0x448>)
 800560e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005612:	461a      	mov	r2, r3
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	fbb3 f3f2 	udiv	r3, r3, r2
 800561a:	005a      	lsls	r2, r3, #1
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	085b      	lsrs	r3, r3, #1
 8005622:	441a      	add	r2, r3
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	fbb2 f3f3 	udiv	r3, r2, r3
 800562c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	2b0f      	cmp	r3, #15
 8005632:	d916      	bls.n	8005662 <UART_SetConfig+0x36e>
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800563a:	d212      	bcs.n	8005662 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	b29b      	uxth	r3, r3
 8005640:	f023 030f 	bic.w	r3, r3, #15
 8005644:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	085b      	lsrs	r3, r3, #1
 800564a:	b29b      	uxth	r3, r3
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	b29a      	uxth	r2, r3
 8005652:	8bfb      	ldrh	r3, [r7, #30]
 8005654:	4313      	orrs	r3, r2
 8005656:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	8bfa      	ldrh	r2, [r7, #30]
 800565e:	60da      	str	r2, [r3, #12]
 8005660:	e056      	b.n	8005710 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005668:	e052      	b.n	8005710 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800566a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800566e:	3b01      	subs	r3, #1
 8005670:	2b07      	cmp	r3, #7
 8005672:	d822      	bhi.n	80056ba <UART_SetConfig+0x3c6>
 8005674:	a201      	add	r2, pc, #4	; (adr r2, 800567c <UART_SetConfig+0x388>)
 8005676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567a:	bf00      	nop
 800567c:	0800569d 	.word	0x0800569d
 8005680:	080056a5 	.word	0x080056a5
 8005684:	080056bb 	.word	0x080056bb
 8005688:	080056ab 	.word	0x080056ab
 800568c:	080056bb 	.word	0x080056bb
 8005690:	080056bb 	.word	0x080056bb
 8005694:	080056bb 	.word	0x080056bb
 8005698:	080056b3 	.word	0x080056b3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800569c:	f7fe fe0c 	bl	80042b8 <HAL_RCC_GetPCLK2Freq>
 80056a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056a2:	e010      	b.n	80056c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056a4:	4b26      	ldr	r3, [pc, #152]	; (8005740 <UART_SetConfig+0x44c>)
 80056a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056a8:	e00d      	b.n	80056c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056aa:	f7fe fd6f 	bl	800418c <HAL_RCC_GetSysClockFreq>
 80056ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056b0:	e009      	b.n	80056c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056b8:	e005      	b.n	80056c6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80056c4:	bf00      	nop
    }

    if (pclk != 0U)
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d021      	beq.n	8005710 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	4a1a      	ldr	r2, [pc, #104]	; (800573c <UART_SetConfig+0x448>)
 80056d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056d6:	461a      	mov	r2, r3
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	fbb3 f2f2 	udiv	r2, r3, r2
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	085b      	lsrs	r3, r3, #1
 80056e4:	441a      	add	r2, r3
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	2b0f      	cmp	r3, #15
 80056f4:	d909      	bls.n	800570a <UART_SetConfig+0x416>
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056fc:	d205      	bcs.n	800570a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	b29a      	uxth	r2, r3
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	60da      	str	r2, [r3, #12]
 8005708:	e002      	b.n	8005710 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2201      	movs	r2, #1
 8005714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	2201      	movs	r2, #1
 800571c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2200      	movs	r2, #0
 8005724:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2200      	movs	r2, #0
 800572a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800572c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005730:	4618      	mov	r0, r3
 8005732:	3730      	adds	r7, #48	; 0x30
 8005734:	46bd      	mov	sp, r7
 8005736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800573a:	bf00      	nop
 800573c:	08008b38 	.word	0x08008b38
 8005740:	00f42400 	.word	0x00f42400

08005744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00a      	beq.n	800576e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005794:	f003 0304 	and.w	r3, r3, #4
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b6:	f003 0308 	and.w	r3, r3, #8
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fa:	f003 0320 	and.w	r3, r3, #32
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005820:	2b00      	cmp	r3, #0
 8005822:	d01a      	beq.n	800585a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005842:	d10a      	bne.n	800585a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	605a      	str	r2, [r3, #4]
  }
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b098      	sub	sp, #96	; 0x60
 800588c:	af02      	add	r7, sp, #8
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005898:	f7fc fad0 	bl	8001e3c <HAL_GetTick>
 800589c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0308 	and.w	r3, r3, #8
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d12f      	bne.n	800590c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058b4:	2200      	movs	r2, #0
 80058b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f88e 	bl	80059dc <UART_WaitOnFlagUntilTimeout>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d022      	beq.n	800590c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058da:	653b      	str	r3, [r7, #80]	; 0x50
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	461a      	mov	r2, r3
 80058e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058e4:	647b      	str	r3, [r7, #68]	; 0x44
 80058e6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058ec:	e841 2300 	strex	r3, r2, [r1]
 80058f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e6      	bne.n	80058c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e063      	b.n	80059d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0304 	and.w	r3, r3, #4
 8005916:	2b04      	cmp	r3, #4
 8005918:	d149      	bne.n	80059ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800591a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005922:	2200      	movs	r2, #0
 8005924:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f857 	bl	80059dc <UART_WaitOnFlagUntilTimeout>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d03c      	beq.n	80059ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	e853 3f00 	ldrex	r3, [r3]
 8005940:	623b      	str	r3, [r7, #32]
   return(result);
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005948:	64fb      	str	r3, [r7, #76]	; 0x4c
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	461a      	mov	r2, r3
 8005950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005952:	633b      	str	r3, [r7, #48]	; 0x30
 8005954:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005956:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e6      	bne.n	8005934 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3308      	adds	r3, #8
 800596c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	60fb      	str	r3, [r7, #12]
   return(result);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f023 0301 	bic.w	r3, r3, #1
 800597c:	64bb      	str	r3, [r7, #72]	; 0x48
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3308      	adds	r3, #8
 8005984:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005986:	61fa      	str	r2, [r7, #28]
 8005988:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598a:	69b9      	ldr	r1, [r7, #24]
 800598c:	69fa      	ldr	r2, [r7, #28]
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	617b      	str	r3, [r7, #20]
   return(result);
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e5      	bne.n	8005966 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2220      	movs	r2, #32
 800599e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e012      	b.n	80059d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3758      	adds	r7, #88	; 0x58
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	603b      	str	r3, [r7, #0]
 80059e8:	4613      	mov	r3, r2
 80059ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ec:	e049      	b.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f4:	d045      	beq.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f6:	f7fc fa21 	bl	8001e3c <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d302      	bcc.n	8005a0c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e048      	b.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0304 	and.w	r3, r3, #4
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d031      	beq.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	f003 0308 	and.w	r3, r3, #8
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d110      	bne.n	8005a4e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2208      	movs	r2, #8
 8005a32:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 f838 	bl	8005aaa <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2208      	movs	r2, #8
 8005a3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e029      	b.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a5c:	d111      	bne.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 f81e 	bl	8005aaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e00f      	b.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69da      	ldr	r2, [r3, #28]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	bf0c      	ite	eq
 8005a92:	2301      	moveq	r3, #1
 8005a94:	2300      	movne	r3, #0
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	461a      	mov	r2, r3
 8005a9a:	79fb      	ldrb	r3, [r7, #7]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d0a6      	beq.n	80059ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b095      	sub	sp, #84	; 0x54
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	461a      	mov	r2, r3
 8005ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ad2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ad6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ad8:	e841 2300 	strex	r3, r2, [r1]
 8005adc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e6      	bne.n	8005ab2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3308      	adds	r3, #8
 8005aea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	e853 3f00 	ldrex	r3, [r3]
 8005af2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005afa:	f023 0301 	bic.w	r3, r3, #1
 8005afe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	3308      	adds	r3, #8
 8005b06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b10:	e841 2300 	strex	r3, r2, [r1]
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e3      	bne.n	8005ae4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d118      	bne.n	8005b56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f023 0310 	bic.w	r3, r3, #16
 8005b38:	647b      	str	r3, [r7, #68]	; 0x44
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b42:	61bb      	str	r3, [r7, #24]
 8005b44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b46:	6979      	ldr	r1, [r7, #20]
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	e841 2300 	strex	r3, r2, [r1]
 8005b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1e6      	bne.n	8005b24 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005b6a:	bf00      	nop
 8005b6c:	3754      	adds	r7, #84	; 0x54
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b085      	sub	sp, #20
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d101      	bne.n	8005b8c <HAL_UARTEx_DisableFifoMode+0x16>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	e027      	b.n	8005bdc <HAL_UARTEx_DisableFifoMode+0x66>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2224      	movs	r2, #36	; 0x24
 8005b98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0201 	bic.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005bba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d101      	bne.n	8005c00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e02d      	b.n	8005c5c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2224      	movs	r2, #36	; 0x24
 8005c0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0201 	bic.w	r2, r2, #1
 8005c26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f84f 	bl	8005ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e02d      	b.n	8005cd8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2224      	movs	r2, #36	; 0x24
 8005c88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0201 	bic.w	r2, r2, #1
 8005ca2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f811 	bl	8005ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d108      	bne.n	8005d02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d00:	e031      	b.n	8005d66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d02:	2308      	movs	r3, #8
 8005d04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d06:	2308      	movs	r3, #8
 8005d08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	0e5b      	lsrs	r3, r3, #25
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	0f5b      	lsrs	r3, r3, #29
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	f003 0307 	and.w	r3, r3, #7
 8005d28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d2a:	7bbb      	ldrb	r3, [r7, #14]
 8005d2c:	7b3a      	ldrb	r2, [r7, #12]
 8005d2e:	4911      	ldr	r1, [pc, #68]	; (8005d74 <UARTEx_SetNbDataToProcess+0x94>)
 8005d30:	5c8a      	ldrb	r2, [r1, r2]
 8005d32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d36:	7b3a      	ldrb	r2, [r7, #12]
 8005d38:	490f      	ldr	r1, [pc, #60]	; (8005d78 <UARTEx_SetNbDataToProcess+0x98>)
 8005d3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
 8005d4a:	7b7a      	ldrb	r2, [r7, #13]
 8005d4c:	4909      	ldr	r1, [pc, #36]	; (8005d74 <UARTEx_SetNbDataToProcess+0x94>)
 8005d4e:	5c8a      	ldrb	r2, [r1, r2]
 8005d50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d54:	7b7a      	ldrb	r2, [r7, #13]
 8005d56:	4908      	ldr	r1, [pc, #32]	; (8005d78 <UARTEx_SetNbDataToProcess+0x98>)
 8005d58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005d66:	bf00      	nop
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	08008b50 	.word	0x08008b50
 8005d78:	08008b58 	.word	0x08008b58

08005d7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d84:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005d88:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	43db      	mvns	r3, r3
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005db2:	b084      	sub	sp, #16
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	f107 0014 	add.w	r0, r7, #20
 8005dc0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	b004      	add	sp, #16
 8005df2:	4770      	bx	lr

08005df4 <__errno>:
 8005df4:	4b01      	ldr	r3, [pc, #4]	; (8005dfc <__errno+0x8>)
 8005df6:	6818      	ldr	r0, [r3, #0]
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	20000014 	.word	0x20000014

08005e00 <__libc_init_array>:
 8005e00:	b570      	push	{r4, r5, r6, lr}
 8005e02:	4d0d      	ldr	r5, [pc, #52]	; (8005e38 <__libc_init_array+0x38>)
 8005e04:	4c0d      	ldr	r4, [pc, #52]	; (8005e3c <__libc_init_array+0x3c>)
 8005e06:	1b64      	subs	r4, r4, r5
 8005e08:	10a4      	asrs	r4, r4, #2
 8005e0a:	2600      	movs	r6, #0
 8005e0c:	42a6      	cmp	r6, r4
 8005e0e:	d109      	bne.n	8005e24 <__libc_init_array+0x24>
 8005e10:	4d0b      	ldr	r5, [pc, #44]	; (8005e40 <__libc_init_array+0x40>)
 8005e12:	4c0c      	ldr	r4, [pc, #48]	; (8005e44 <__libc_init_array+0x44>)
 8005e14:	f002 fdc2 	bl	800899c <_init>
 8005e18:	1b64      	subs	r4, r4, r5
 8005e1a:	10a4      	asrs	r4, r4, #2
 8005e1c:	2600      	movs	r6, #0
 8005e1e:	42a6      	cmp	r6, r4
 8005e20:	d105      	bne.n	8005e2e <__libc_init_array+0x2e>
 8005e22:	bd70      	pop	{r4, r5, r6, pc}
 8005e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e28:	4798      	blx	r3
 8005e2a:	3601      	adds	r6, #1
 8005e2c:	e7ee      	b.n	8005e0c <__libc_init_array+0xc>
 8005e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e32:	4798      	blx	r3
 8005e34:	3601      	adds	r6, #1
 8005e36:	e7f2      	b.n	8005e1e <__libc_init_array+0x1e>
 8005e38:	08008f44 	.word	0x08008f44
 8005e3c:	08008f44 	.word	0x08008f44
 8005e40:	08008f44 	.word	0x08008f44
 8005e44:	08008f48 	.word	0x08008f48

08005e48 <memset>:
 8005e48:	4402      	add	r2, r0
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d100      	bne.n	8005e52 <memset+0xa>
 8005e50:	4770      	bx	lr
 8005e52:	f803 1b01 	strb.w	r1, [r3], #1
 8005e56:	e7f9      	b.n	8005e4c <memset+0x4>

08005e58 <__cvt>:
 8005e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e5c:	ec55 4b10 	vmov	r4, r5, d0
 8005e60:	2d00      	cmp	r5, #0
 8005e62:	460e      	mov	r6, r1
 8005e64:	4619      	mov	r1, r3
 8005e66:	462b      	mov	r3, r5
 8005e68:	bfbb      	ittet	lt
 8005e6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005e6e:	461d      	movlt	r5, r3
 8005e70:	2300      	movge	r3, #0
 8005e72:	232d      	movlt	r3, #45	; 0x2d
 8005e74:	700b      	strb	r3, [r1, #0]
 8005e76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005e7c:	4691      	mov	r9, r2
 8005e7e:	f023 0820 	bic.w	r8, r3, #32
 8005e82:	bfbc      	itt	lt
 8005e84:	4622      	movlt	r2, r4
 8005e86:	4614      	movlt	r4, r2
 8005e88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e8c:	d005      	beq.n	8005e9a <__cvt+0x42>
 8005e8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e92:	d100      	bne.n	8005e96 <__cvt+0x3e>
 8005e94:	3601      	adds	r6, #1
 8005e96:	2102      	movs	r1, #2
 8005e98:	e000      	b.n	8005e9c <__cvt+0x44>
 8005e9a:	2103      	movs	r1, #3
 8005e9c:	ab03      	add	r3, sp, #12
 8005e9e:	9301      	str	r3, [sp, #4]
 8005ea0:	ab02      	add	r3, sp, #8
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	ec45 4b10 	vmov	d0, r4, r5
 8005ea8:	4653      	mov	r3, sl
 8005eaa:	4632      	mov	r2, r6
 8005eac:	f000 fe18 	bl	8006ae0 <_dtoa_r>
 8005eb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005eb4:	4607      	mov	r7, r0
 8005eb6:	d102      	bne.n	8005ebe <__cvt+0x66>
 8005eb8:	f019 0f01 	tst.w	r9, #1
 8005ebc:	d022      	beq.n	8005f04 <__cvt+0xac>
 8005ebe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ec2:	eb07 0906 	add.w	r9, r7, r6
 8005ec6:	d110      	bne.n	8005eea <__cvt+0x92>
 8005ec8:	783b      	ldrb	r3, [r7, #0]
 8005eca:	2b30      	cmp	r3, #48	; 0x30
 8005ecc:	d10a      	bne.n	8005ee4 <__cvt+0x8c>
 8005ece:	2200      	movs	r2, #0
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	4629      	mov	r1, r5
 8005ed6:	f7fa fdcf 	bl	8000a78 <__aeabi_dcmpeq>
 8005eda:	b918      	cbnz	r0, 8005ee4 <__cvt+0x8c>
 8005edc:	f1c6 0601 	rsb	r6, r6, #1
 8005ee0:	f8ca 6000 	str.w	r6, [sl]
 8005ee4:	f8da 3000 	ldr.w	r3, [sl]
 8005ee8:	4499      	add	r9, r3
 8005eea:	2200      	movs	r2, #0
 8005eec:	2300      	movs	r3, #0
 8005eee:	4620      	mov	r0, r4
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	f7fa fdc1 	bl	8000a78 <__aeabi_dcmpeq>
 8005ef6:	b108      	cbz	r0, 8005efc <__cvt+0xa4>
 8005ef8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005efc:	2230      	movs	r2, #48	; 0x30
 8005efe:	9b03      	ldr	r3, [sp, #12]
 8005f00:	454b      	cmp	r3, r9
 8005f02:	d307      	bcc.n	8005f14 <__cvt+0xbc>
 8005f04:	9b03      	ldr	r3, [sp, #12]
 8005f06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f08:	1bdb      	subs	r3, r3, r7
 8005f0a:	4638      	mov	r0, r7
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	b004      	add	sp, #16
 8005f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f14:	1c59      	adds	r1, r3, #1
 8005f16:	9103      	str	r1, [sp, #12]
 8005f18:	701a      	strb	r2, [r3, #0]
 8005f1a:	e7f0      	b.n	8005efe <__cvt+0xa6>

08005f1c <__exponent>:
 8005f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2900      	cmp	r1, #0
 8005f22:	bfb8      	it	lt
 8005f24:	4249      	neglt	r1, r1
 8005f26:	f803 2b02 	strb.w	r2, [r3], #2
 8005f2a:	bfb4      	ite	lt
 8005f2c:	222d      	movlt	r2, #45	; 0x2d
 8005f2e:	222b      	movge	r2, #43	; 0x2b
 8005f30:	2909      	cmp	r1, #9
 8005f32:	7042      	strb	r2, [r0, #1]
 8005f34:	dd2a      	ble.n	8005f8c <__exponent+0x70>
 8005f36:	f10d 0407 	add.w	r4, sp, #7
 8005f3a:	46a4      	mov	ip, r4
 8005f3c:	270a      	movs	r7, #10
 8005f3e:	46a6      	mov	lr, r4
 8005f40:	460a      	mov	r2, r1
 8005f42:	fb91 f6f7 	sdiv	r6, r1, r7
 8005f46:	fb07 1516 	mls	r5, r7, r6, r1
 8005f4a:	3530      	adds	r5, #48	; 0x30
 8005f4c:	2a63      	cmp	r2, #99	; 0x63
 8005f4e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005f52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005f56:	4631      	mov	r1, r6
 8005f58:	dcf1      	bgt.n	8005f3e <__exponent+0x22>
 8005f5a:	3130      	adds	r1, #48	; 0x30
 8005f5c:	f1ae 0502 	sub.w	r5, lr, #2
 8005f60:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005f64:	1c44      	adds	r4, r0, #1
 8005f66:	4629      	mov	r1, r5
 8005f68:	4561      	cmp	r1, ip
 8005f6a:	d30a      	bcc.n	8005f82 <__exponent+0x66>
 8005f6c:	f10d 0209 	add.w	r2, sp, #9
 8005f70:	eba2 020e 	sub.w	r2, r2, lr
 8005f74:	4565      	cmp	r5, ip
 8005f76:	bf88      	it	hi
 8005f78:	2200      	movhi	r2, #0
 8005f7a:	4413      	add	r3, r2
 8005f7c:	1a18      	subs	r0, r3, r0
 8005f7e:	b003      	add	sp, #12
 8005f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f86:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005f8a:	e7ed      	b.n	8005f68 <__exponent+0x4c>
 8005f8c:	2330      	movs	r3, #48	; 0x30
 8005f8e:	3130      	adds	r1, #48	; 0x30
 8005f90:	7083      	strb	r3, [r0, #2]
 8005f92:	70c1      	strb	r1, [r0, #3]
 8005f94:	1d03      	adds	r3, r0, #4
 8005f96:	e7f1      	b.n	8005f7c <__exponent+0x60>

08005f98 <_printf_float>:
 8005f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f9c:	ed2d 8b02 	vpush	{d8}
 8005fa0:	b08d      	sub	sp, #52	; 0x34
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005fa8:	4616      	mov	r6, r2
 8005faa:	461f      	mov	r7, r3
 8005fac:	4605      	mov	r5, r0
 8005fae:	f001 fd3d 	bl	8007a2c <_localeconv_r>
 8005fb2:	f8d0 a000 	ldr.w	sl, [r0]
 8005fb6:	4650      	mov	r0, sl
 8005fb8:	f7fa f8e2 	bl	8000180 <strlen>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	930a      	str	r3, [sp, #40]	; 0x28
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	9305      	str	r3, [sp, #20]
 8005fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8005fc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005fcc:	3307      	adds	r3, #7
 8005fce:	f023 0307 	bic.w	r3, r3, #7
 8005fd2:	f103 0208 	add.w	r2, r3, #8
 8005fd6:	f8c8 2000 	str.w	r2, [r8]
 8005fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fde:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005fe2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005fe6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005fea:	9307      	str	r3, [sp, #28]
 8005fec:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ff0:	ee08 0a10 	vmov	s16, r0
 8005ff4:	4b9f      	ldr	r3, [pc, #636]	; (8006274 <_printf_float+0x2dc>)
 8005ff6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8005ffe:	f7fa fd6d 	bl	8000adc <__aeabi_dcmpun>
 8006002:	bb88      	cbnz	r0, 8006068 <_printf_float+0xd0>
 8006004:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006008:	4b9a      	ldr	r3, [pc, #616]	; (8006274 <_printf_float+0x2dc>)
 800600a:	f04f 32ff 	mov.w	r2, #4294967295
 800600e:	f7fa fd47 	bl	8000aa0 <__aeabi_dcmple>
 8006012:	bb48      	cbnz	r0, 8006068 <_printf_float+0xd0>
 8006014:	2200      	movs	r2, #0
 8006016:	2300      	movs	r3, #0
 8006018:	4640      	mov	r0, r8
 800601a:	4649      	mov	r1, r9
 800601c:	f7fa fd36 	bl	8000a8c <__aeabi_dcmplt>
 8006020:	b110      	cbz	r0, 8006028 <_printf_float+0x90>
 8006022:	232d      	movs	r3, #45	; 0x2d
 8006024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006028:	4b93      	ldr	r3, [pc, #588]	; (8006278 <_printf_float+0x2e0>)
 800602a:	4894      	ldr	r0, [pc, #592]	; (800627c <_printf_float+0x2e4>)
 800602c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006030:	bf94      	ite	ls
 8006032:	4698      	movls	r8, r3
 8006034:	4680      	movhi	r8, r0
 8006036:	2303      	movs	r3, #3
 8006038:	6123      	str	r3, [r4, #16]
 800603a:	9b05      	ldr	r3, [sp, #20]
 800603c:	f023 0204 	bic.w	r2, r3, #4
 8006040:	6022      	str	r2, [r4, #0]
 8006042:	f04f 0900 	mov.w	r9, #0
 8006046:	9700      	str	r7, [sp, #0]
 8006048:	4633      	mov	r3, r6
 800604a:	aa0b      	add	r2, sp, #44	; 0x2c
 800604c:	4621      	mov	r1, r4
 800604e:	4628      	mov	r0, r5
 8006050:	f000 f9d8 	bl	8006404 <_printf_common>
 8006054:	3001      	adds	r0, #1
 8006056:	f040 8090 	bne.w	800617a <_printf_float+0x1e2>
 800605a:	f04f 30ff 	mov.w	r0, #4294967295
 800605e:	b00d      	add	sp, #52	; 0x34
 8006060:	ecbd 8b02 	vpop	{d8}
 8006064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006068:	4642      	mov	r2, r8
 800606a:	464b      	mov	r3, r9
 800606c:	4640      	mov	r0, r8
 800606e:	4649      	mov	r1, r9
 8006070:	f7fa fd34 	bl	8000adc <__aeabi_dcmpun>
 8006074:	b140      	cbz	r0, 8006088 <_printf_float+0xf0>
 8006076:	464b      	mov	r3, r9
 8006078:	2b00      	cmp	r3, #0
 800607a:	bfbc      	itt	lt
 800607c:	232d      	movlt	r3, #45	; 0x2d
 800607e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006082:	487f      	ldr	r0, [pc, #508]	; (8006280 <_printf_float+0x2e8>)
 8006084:	4b7f      	ldr	r3, [pc, #508]	; (8006284 <_printf_float+0x2ec>)
 8006086:	e7d1      	b.n	800602c <_printf_float+0x94>
 8006088:	6863      	ldr	r3, [r4, #4]
 800608a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800608e:	9206      	str	r2, [sp, #24]
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	d13f      	bne.n	8006114 <_printf_float+0x17c>
 8006094:	2306      	movs	r3, #6
 8006096:	6063      	str	r3, [r4, #4]
 8006098:	9b05      	ldr	r3, [sp, #20]
 800609a:	6861      	ldr	r1, [r4, #4]
 800609c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80060a0:	2300      	movs	r3, #0
 80060a2:	9303      	str	r3, [sp, #12]
 80060a4:	ab0a      	add	r3, sp, #40	; 0x28
 80060a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80060aa:	ab09      	add	r3, sp, #36	; 0x24
 80060ac:	ec49 8b10 	vmov	d0, r8, r9
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	6022      	str	r2, [r4, #0]
 80060b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80060b8:	4628      	mov	r0, r5
 80060ba:	f7ff fecd 	bl	8005e58 <__cvt>
 80060be:	9b06      	ldr	r3, [sp, #24]
 80060c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060c2:	2b47      	cmp	r3, #71	; 0x47
 80060c4:	4680      	mov	r8, r0
 80060c6:	d108      	bne.n	80060da <_printf_float+0x142>
 80060c8:	1cc8      	adds	r0, r1, #3
 80060ca:	db02      	blt.n	80060d2 <_printf_float+0x13a>
 80060cc:	6863      	ldr	r3, [r4, #4]
 80060ce:	4299      	cmp	r1, r3
 80060d0:	dd41      	ble.n	8006156 <_printf_float+0x1be>
 80060d2:	f1ab 0b02 	sub.w	fp, fp, #2
 80060d6:	fa5f fb8b 	uxtb.w	fp, fp
 80060da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80060de:	d820      	bhi.n	8006122 <_printf_float+0x18a>
 80060e0:	3901      	subs	r1, #1
 80060e2:	465a      	mov	r2, fp
 80060e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80060e8:	9109      	str	r1, [sp, #36]	; 0x24
 80060ea:	f7ff ff17 	bl	8005f1c <__exponent>
 80060ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060f0:	1813      	adds	r3, r2, r0
 80060f2:	2a01      	cmp	r2, #1
 80060f4:	4681      	mov	r9, r0
 80060f6:	6123      	str	r3, [r4, #16]
 80060f8:	dc02      	bgt.n	8006100 <_printf_float+0x168>
 80060fa:	6822      	ldr	r2, [r4, #0]
 80060fc:	07d2      	lsls	r2, r2, #31
 80060fe:	d501      	bpl.n	8006104 <_printf_float+0x16c>
 8006100:	3301      	adds	r3, #1
 8006102:	6123      	str	r3, [r4, #16]
 8006104:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006108:	2b00      	cmp	r3, #0
 800610a:	d09c      	beq.n	8006046 <_printf_float+0xae>
 800610c:	232d      	movs	r3, #45	; 0x2d
 800610e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006112:	e798      	b.n	8006046 <_printf_float+0xae>
 8006114:	9a06      	ldr	r2, [sp, #24]
 8006116:	2a47      	cmp	r2, #71	; 0x47
 8006118:	d1be      	bne.n	8006098 <_printf_float+0x100>
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1bc      	bne.n	8006098 <_printf_float+0x100>
 800611e:	2301      	movs	r3, #1
 8006120:	e7b9      	b.n	8006096 <_printf_float+0xfe>
 8006122:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006126:	d118      	bne.n	800615a <_printf_float+0x1c2>
 8006128:	2900      	cmp	r1, #0
 800612a:	6863      	ldr	r3, [r4, #4]
 800612c:	dd0b      	ble.n	8006146 <_printf_float+0x1ae>
 800612e:	6121      	str	r1, [r4, #16]
 8006130:	b913      	cbnz	r3, 8006138 <_printf_float+0x1a0>
 8006132:	6822      	ldr	r2, [r4, #0]
 8006134:	07d0      	lsls	r0, r2, #31
 8006136:	d502      	bpl.n	800613e <_printf_float+0x1a6>
 8006138:	3301      	adds	r3, #1
 800613a:	440b      	add	r3, r1
 800613c:	6123      	str	r3, [r4, #16]
 800613e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006140:	f04f 0900 	mov.w	r9, #0
 8006144:	e7de      	b.n	8006104 <_printf_float+0x16c>
 8006146:	b913      	cbnz	r3, 800614e <_printf_float+0x1b6>
 8006148:	6822      	ldr	r2, [r4, #0]
 800614a:	07d2      	lsls	r2, r2, #31
 800614c:	d501      	bpl.n	8006152 <_printf_float+0x1ba>
 800614e:	3302      	adds	r3, #2
 8006150:	e7f4      	b.n	800613c <_printf_float+0x1a4>
 8006152:	2301      	movs	r3, #1
 8006154:	e7f2      	b.n	800613c <_printf_float+0x1a4>
 8006156:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800615a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800615c:	4299      	cmp	r1, r3
 800615e:	db05      	blt.n	800616c <_printf_float+0x1d4>
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	6121      	str	r1, [r4, #16]
 8006164:	07d8      	lsls	r0, r3, #31
 8006166:	d5ea      	bpl.n	800613e <_printf_float+0x1a6>
 8006168:	1c4b      	adds	r3, r1, #1
 800616a:	e7e7      	b.n	800613c <_printf_float+0x1a4>
 800616c:	2900      	cmp	r1, #0
 800616e:	bfd4      	ite	le
 8006170:	f1c1 0202 	rsble	r2, r1, #2
 8006174:	2201      	movgt	r2, #1
 8006176:	4413      	add	r3, r2
 8006178:	e7e0      	b.n	800613c <_printf_float+0x1a4>
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	055a      	lsls	r2, r3, #21
 800617e:	d407      	bmi.n	8006190 <_printf_float+0x1f8>
 8006180:	6923      	ldr	r3, [r4, #16]
 8006182:	4642      	mov	r2, r8
 8006184:	4631      	mov	r1, r6
 8006186:	4628      	mov	r0, r5
 8006188:	47b8      	blx	r7
 800618a:	3001      	adds	r0, #1
 800618c:	d12c      	bne.n	80061e8 <_printf_float+0x250>
 800618e:	e764      	b.n	800605a <_printf_float+0xc2>
 8006190:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006194:	f240 80e0 	bls.w	8006358 <_printf_float+0x3c0>
 8006198:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800619c:	2200      	movs	r2, #0
 800619e:	2300      	movs	r3, #0
 80061a0:	f7fa fc6a 	bl	8000a78 <__aeabi_dcmpeq>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	d034      	beq.n	8006212 <_printf_float+0x27a>
 80061a8:	4a37      	ldr	r2, [pc, #220]	; (8006288 <_printf_float+0x2f0>)
 80061aa:	2301      	movs	r3, #1
 80061ac:	4631      	mov	r1, r6
 80061ae:	4628      	mov	r0, r5
 80061b0:	47b8      	blx	r7
 80061b2:	3001      	adds	r0, #1
 80061b4:	f43f af51 	beq.w	800605a <_printf_float+0xc2>
 80061b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061bc:	429a      	cmp	r2, r3
 80061be:	db02      	blt.n	80061c6 <_printf_float+0x22e>
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	07d8      	lsls	r0, r3, #31
 80061c4:	d510      	bpl.n	80061e8 <_printf_float+0x250>
 80061c6:	ee18 3a10 	vmov	r3, s16
 80061ca:	4652      	mov	r2, sl
 80061cc:	4631      	mov	r1, r6
 80061ce:	4628      	mov	r0, r5
 80061d0:	47b8      	blx	r7
 80061d2:	3001      	adds	r0, #1
 80061d4:	f43f af41 	beq.w	800605a <_printf_float+0xc2>
 80061d8:	f04f 0800 	mov.w	r8, #0
 80061dc:	f104 091a 	add.w	r9, r4, #26
 80061e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061e2:	3b01      	subs	r3, #1
 80061e4:	4543      	cmp	r3, r8
 80061e6:	dc09      	bgt.n	80061fc <_printf_float+0x264>
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	079b      	lsls	r3, r3, #30
 80061ec:	f100 8105 	bmi.w	80063fa <_printf_float+0x462>
 80061f0:	68e0      	ldr	r0, [r4, #12]
 80061f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061f4:	4298      	cmp	r0, r3
 80061f6:	bfb8      	it	lt
 80061f8:	4618      	movlt	r0, r3
 80061fa:	e730      	b.n	800605e <_printf_float+0xc6>
 80061fc:	2301      	movs	r3, #1
 80061fe:	464a      	mov	r2, r9
 8006200:	4631      	mov	r1, r6
 8006202:	4628      	mov	r0, r5
 8006204:	47b8      	blx	r7
 8006206:	3001      	adds	r0, #1
 8006208:	f43f af27 	beq.w	800605a <_printf_float+0xc2>
 800620c:	f108 0801 	add.w	r8, r8, #1
 8006210:	e7e6      	b.n	80061e0 <_printf_float+0x248>
 8006212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006214:	2b00      	cmp	r3, #0
 8006216:	dc39      	bgt.n	800628c <_printf_float+0x2f4>
 8006218:	4a1b      	ldr	r2, [pc, #108]	; (8006288 <_printf_float+0x2f0>)
 800621a:	2301      	movs	r3, #1
 800621c:	4631      	mov	r1, r6
 800621e:	4628      	mov	r0, r5
 8006220:	47b8      	blx	r7
 8006222:	3001      	adds	r0, #1
 8006224:	f43f af19 	beq.w	800605a <_printf_float+0xc2>
 8006228:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800622c:	4313      	orrs	r3, r2
 800622e:	d102      	bne.n	8006236 <_printf_float+0x29e>
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	07d9      	lsls	r1, r3, #31
 8006234:	d5d8      	bpl.n	80061e8 <_printf_float+0x250>
 8006236:	ee18 3a10 	vmov	r3, s16
 800623a:	4652      	mov	r2, sl
 800623c:	4631      	mov	r1, r6
 800623e:	4628      	mov	r0, r5
 8006240:	47b8      	blx	r7
 8006242:	3001      	adds	r0, #1
 8006244:	f43f af09 	beq.w	800605a <_printf_float+0xc2>
 8006248:	f04f 0900 	mov.w	r9, #0
 800624c:	f104 0a1a 	add.w	sl, r4, #26
 8006250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006252:	425b      	negs	r3, r3
 8006254:	454b      	cmp	r3, r9
 8006256:	dc01      	bgt.n	800625c <_printf_float+0x2c4>
 8006258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800625a:	e792      	b.n	8006182 <_printf_float+0x1ea>
 800625c:	2301      	movs	r3, #1
 800625e:	4652      	mov	r2, sl
 8006260:	4631      	mov	r1, r6
 8006262:	4628      	mov	r0, r5
 8006264:	47b8      	blx	r7
 8006266:	3001      	adds	r0, #1
 8006268:	f43f aef7 	beq.w	800605a <_printf_float+0xc2>
 800626c:	f109 0901 	add.w	r9, r9, #1
 8006270:	e7ee      	b.n	8006250 <_printf_float+0x2b8>
 8006272:	bf00      	nop
 8006274:	7fefffff 	.word	0x7fefffff
 8006278:	08008b64 	.word	0x08008b64
 800627c:	08008b68 	.word	0x08008b68
 8006280:	08008b70 	.word	0x08008b70
 8006284:	08008b6c 	.word	0x08008b6c
 8006288:	08008b74 	.word	0x08008b74
 800628c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800628e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006290:	429a      	cmp	r2, r3
 8006292:	bfa8      	it	ge
 8006294:	461a      	movge	r2, r3
 8006296:	2a00      	cmp	r2, #0
 8006298:	4691      	mov	r9, r2
 800629a:	dc37      	bgt.n	800630c <_printf_float+0x374>
 800629c:	f04f 0b00 	mov.w	fp, #0
 80062a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062a4:	f104 021a 	add.w	r2, r4, #26
 80062a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062aa:	9305      	str	r3, [sp, #20]
 80062ac:	eba3 0309 	sub.w	r3, r3, r9
 80062b0:	455b      	cmp	r3, fp
 80062b2:	dc33      	bgt.n	800631c <_printf_float+0x384>
 80062b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062b8:	429a      	cmp	r2, r3
 80062ba:	db3b      	blt.n	8006334 <_printf_float+0x39c>
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	07da      	lsls	r2, r3, #31
 80062c0:	d438      	bmi.n	8006334 <_printf_float+0x39c>
 80062c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062c4:	9a05      	ldr	r2, [sp, #20]
 80062c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062c8:	1a9a      	subs	r2, r3, r2
 80062ca:	eba3 0901 	sub.w	r9, r3, r1
 80062ce:	4591      	cmp	r9, r2
 80062d0:	bfa8      	it	ge
 80062d2:	4691      	movge	r9, r2
 80062d4:	f1b9 0f00 	cmp.w	r9, #0
 80062d8:	dc35      	bgt.n	8006346 <_printf_float+0x3ae>
 80062da:	f04f 0800 	mov.w	r8, #0
 80062de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062e2:	f104 0a1a 	add.w	sl, r4, #26
 80062e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062ea:	1a9b      	subs	r3, r3, r2
 80062ec:	eba3 0309 	sub.w	r3, r3, r9
 80062f0:	4543      	cmp	r3, r8
 80062f2:	f77f af79 	ble.w	80061e8 <_printf_float+0x250>
 80062f6:	2301      	movs	r3, #1
 80062f8:	4652      	mov	r2, sl
 80062fa:	4631      	mov	r1, r6
 80062fc:	4628      	mov	r0, r5
 80062fe:	47b8      	blx	r7
 8006300:	3001      	adds	r0, #1
 8006302:	f43f aeaa 	beq.w	800605a <_printf_float+0xc2>
 8006306:	f108 0801 	add.w	r8, r8, #1
 800630a:	e7ec      	b.n	80062e6 <_printf_float+0x34e>
 800630c:	4613      	mov	r3, r2
 800630e:	4631      	mov	r1, r6
 8006310:	4642      	mov	r2, r8
 8006312:	4628      	mov	r0, r5
 8006314:	47b8      	blx	r7
 8006316:	3001      	adds	r0, #1
 8006318:	d1c0      	bne.n	800629c <_printf_float+0x304>
 800631a:	e69e      	b.n	800605a <_printf_float+0xc2>
 800631c:	2301      	movs	r3, #1
 800631e:	4631      	mov	r1, r6
 8006320:	4628      	mov	r0, r5
 8006322:	9205      	str	r2, [sp, #20]
 8006324:	47b8      	blx	r7
 8006326:	3001      	adds	r0, #1
 8006328:	f43f ae97 	beq.w	800605a <_printf_float+0xc2>
 800632c:	9a05      	ldr	r2, [sp, #20]
 800632e:	f10b 0b01 	add.w	fp, fp, #1
 8006332:	e7b9      	b.n	80062a8 <_printf_float+0x310>
 8006334:	ee18 3a10 	vmov	r3, s16
 8006338:	4652      	mov	r2, sl
 800633a:	4631      	mov	r1, r6
 800633c:	4628      	mov	r0, r5
 800633e:	47b8      	blx	r7
 8006340:	3001      	adds	r0, #1
 8006342:	d1be      	bne.n	80062c2 <_printf_float+0x32a>
 8006344:	e689      	b.n	800605a <_printf_float+0xc2>
 8006346:	9a05      	ldr	r2, [sp, #20]
 8006348:	464b      	mov	r3, r9
 800634a:	4442      	add	r2, r8
 800634c:	4631      	mov	r1, r6
 800634e:	4628      	mov	r0, r5
 8006350:	47b8      	blx	r7
 8006352:	3001      	adds	r0, #1
 8006354:	d1c1      	bne.n	80062da <_printf_float+0x342>
 8006356:	e680      	b.n	800605a <_printf_float+0xc2>
 8006358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800635a:	2a01      	cmp	r2, #1
 800635c:	dc01      	bgt.n	8006362 <_printf_float+0x3ca>
 800635e:	07db      	lsls	r3, r3, #31
 8006360:	d538      	bpl.n	80063d4 <_printf_float+0x43c>
 8006362:	2301      	movs	r3, #1
 8006364:	4642      	mov	r2, r8
 8006366:	4631      	mov	r1, r6
 8006368:	4628      	mov	r0, r5
 800636a:	47b8      	blx	r7
 800636c:	3001      	adds	r0, #1
 800636e:	f43f ae74 	beq.w	800605a <_printf_float+0xc2>
 8006372:	ee18 3a10 	vmov	r3, s16
 8006376:	4652      	mov	r2, sl
 8006378:	4631      	mov	r1, r6
 800637a:	4628      	mov	r0, r5
 800637c:	47b8      	blx	r7
 800637e:	3001      	adds	r0, #1
 8006380:	f43f ae6b 	beq.w	800605a <_printf_float+0xc2>
 8006384:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006388:	2200      	movs	r2, #0
 800638a:	2300      	movs	r3, #0
 800638c:	f7fa fb74 	bl	8000a78 <__aeabi_dcmpeq>
 8006390:	b9d8      	cbnz	r0, 80063ca <_printf_float+0x432>
 8006392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006394:	f108 0201 	add.w	r2, r8, #1
 8006398:	3b01      	subs	r3, #1
 800639a:	4631      	mov	r1, r6
 800639c:	4628      	mov	r0, r5
 800639e:	47b8      	blx	r7
 80063a0:	3001      	adds	r0, #1
 80063a2:	d10e      	bne.n	80063c2 <_printf_float+0x42a>
 80063a4:	e659      	b.n	800605a <_printf_float+0xc2>
 80063a6:	2301      	movs	r3, #1
 80063a8:	4652      	mov	r2, sl
 80063aa:	4631      	mov	r1, r6
 80063ac:	4628      	mov	r0, r5
 80063ae:	47b8      	blx	r7
 80063b0:	3001      	adds	r0, #1
 80063b2:	f43f ae52 	beq.w	800605a <_printf_float+0xc2>
 80063b6:	f108 0801 	add.w	r8, r8, #1
 80063ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063bc:	3b01      	subs	r3, #1
 80063be:	4543      	cmp	r3, r8
 80063c0:	dcf1      	bgt.n	80063a6 <_printf_float+0x40e>
 80063c2:	464b      	mov	r3, r9
 80063c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80063c8:	e6dc      	b.n	8006184 <_printf_float+0x1ec>
 80063ca:	f04f 0800 	mov.w	r8, #0
 80063ce:	f104 0a1a 	add.w	sl, r4, #26
 80063d2:	e7f2      	b.n	80063ba <_printf_float+0x422>
 80063d4:	2301      	movs	r3, #1
 80063d6:	4642      	mov	r2, r8
 80063d8:	e7df      	b.n	800639a <_printf_float+0x402>
 80063da:	2301      	movs	r3, #1
 80063dc:	464a      	mov	r2, r9
 80063de:	4631      	mov	r1, r6
 80063e0:	4628      	mov	r0, r5
 80063e2:	47b8      	blx	r7
 80063e4:	3001      	adds	r0, #1
 80063e6:	f43f ae38 	beq.w	800605a <_printf_float+0xc2>
 80063ea:	f108 0801 	add.w	r8, r8, #1
 80063ee:	68e3      	ldr	r3, [r4, #12]
 80063f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063f2:	1a5b      	subs	r3, r3, r1
 80063f4:	4543      	cmp	r3, r8
 80063f6:	dcf0      	bgt.n	80063da <_printf_float+0x442>
 80063f8:	e6fa      	b.n	80061f0 <_printf_float+0x258>
 80063fa:	f04f 0800 	mov.w	r8, #0
 80063fe:	f104 0919 	add.w	r9, r4, #25
 8006402:	e7f4      	b.n	80063ee <_printf_float+0x456>

08006404 <_printf_common>:
 8006404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006408:	4616      	mov	r6, r2
 800640a:	4699      	mov	r9, r3
 800640c:	688a      	ldr	r2, [r1, #8]
 800640e:	690b      	ldr	r3, [r1, #16]
 8006410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006414:	4293      	cmp	r3, r2
 8006416:	bfb8      	it	lt
 8006418:	4613      	movlt	r3, r2
 800641a:	6033      	str	r3, [r6, #0]
 800641c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006420:	4607      	mov	r7, r0
 8006422:	460c      	mov	r4, r1
 8006424:	b10a      	cbz	r2, 800642a <_printf_common+0x26>
 8006426:	3301      	adds	r3, #1
 8006428:	6033      	str	r3, [r6, #0]
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	0699      	lsls	r1, r3, #26
 800642e:	bf42      	ittt	mi
 8006430:	6833      	ldrmi	r3, [r6, #0]
 8006432:	3302      	addmi	r3, #2
 8006434:	6033      	strmi	r3, [r6, #0]
 8006436:	6825      	ldr	r5, [r4, #0]
 8006438:	f015 0506 	ands.w	r5, r5, #6
 800643c:	d106      	bne.n	800644c <_printf_common+0x48>
 800643e:	f104 0a19 	add.w	sl, r4, #25
 8006442:	68e3      	ldr	r3, [r4, #12]
 8006444:	6832      	ldr	r2, [r6, #0]
 8006446:	1a9b      	subs	r3, r3, r2
 8006448:	42ab      	cmp	r3, r5
 800644a:	dc26      	bgt.n	800649a <_printf_common+0x96>
 800644c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006450:	1e13      	subs	r3, r2, #0
 8006452:	6822      	ldr	r2, [r4, #0]
 8006454:	bf18      	it	ne
 8006456:	2301      	movne	r3, #1
 8006458:	0692      	lsls	r2, r2, #26
 800645a:	d42b      	bmi.n	80064b4 <_printf_common+0xb0>
 800645c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006460:	4649      	mov	r1, r9
 8006462:	4638      	mov	r0, r7
 8006464:	47c0      	blx	r8
 8006466:	3001      	adds	r0, #1
 8006468:	d01e      	beq.n	80064a8 <_printf_common+0xa4>
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	68e5      	ldr	r5, [r4, #12]
 800646e:	6832      	ldr	r2, [r6, #0]
 8006470:	f003 0306 	and.w	r3, r3, #6
 8006474:	2b04      	cmp	r3, #4
 8006476:	bf08      	it	eq
 8006478:	1aad      	subeq	r5, r5, r2
 800647a:	68a3      	ldr	r3, [r4, #8]
 800647c:	6922      	ldr	r2, [r4, #16]
 800647e:	bf0c      	ite	eq
 8006480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006484:	2500      	movne	r5, #0
 8006486:	4293      	cmp	r3, r2
 8006488:	bfc4      	itt	gt
 800648a:	1a9b      	subgt	r3, r3, r2
 800648c:	18ed      	addgt	r5, r5, r3
 800648e:	2600      	movs	r6, #0
 8006490:	341a      	adds	r4, #26
 8006492:	42b5      	cmp	r5, r6
 8006494:	d11a      	bne.n	80064cc <_printf_common+0xc8>
 8006496:	2000      	movs	r0, #0
 8006498:	e008      	b.n	80064ac <_printf_common+0xa8>
 800649a:	2301      	movs	r3, #1
 800649c:	4652      	mov	r2, sl
 800649e:	4649      	mov	r1, r9
 80064a0:	4638      	mov	r0, r7
 80064a2:	47c0      	blx	r8
 80064a4:	3001      	adds	r0, #1
 80064a6:	d103      	bne.n	80064b0 <_printf_common+0xac>
 80064a8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b0:	3501      	adds	r5, #1
 80064b2:	e7c6      	b.n	8006442 <_printf_common+0x3e>
 80064b4:	18e1      	adds	r1, r4, r3
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	2030      	movs	r0, #48	; 0x30
 80064ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064be:	4422      	add	r2, r4
 80064c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064c8:	3302      	adds	r3, #2
 80064ca:	e7c7      	b.n	800645c <_printf_common+0x58>
 80064cc:	2301      	movs	r3, #1
 80064ce:	4622      	mov	r2, r4
 80064d0:	4649      	mov	r1, r9
 80064d2:	4638      	mov	r0, r7
 80064d4:	47c0      	blx	r8
 80064d6:	3001      	adds	r0, #1
 80064d8:	d0e6      	beq.n	80064a8 <_printf_common+0xa4>
 80064da:	3601      	adds	r6, #1
 80064dc:	e7d9      	b.n	8006492 <_printf_common+0x8e>
	...

080064e0 <_printf_i>:
 80064e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064e4:	7e0f      	ldrb	r7, [r1, #24]
 80064e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064e8:	2f78      	cmp	r7, #120	; 0x78
 80064ea:	4691      	mov	r9, r2
 80064ec:	4680      	mov	r8, r0
 80064ee:	460c      	mov	r4, r1
 80064f0:	469a      	mov	sl, r3
 80064f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064f6:	d807      	bhi.n	8006508 <_printf_i+0x28>
 80064f8:	2f62      	cmp	r7, #98	; 0x62
 80064fa:	d80a      	bhi.n	8006512 <_printf_i+0x32>
 80064fc:	2f00      	cmp	r7, #0
 80064fe:	f000 80d8 	beq.w	80066b2 <_printf_i+0x1d2>
 8006502:	2f58      	cmp	r7, #88	; 0x58
 8006504:	f000 80a3 	beq.w	800664e <_printf_i+0x16e>
 8006508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800650c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006510:	e03a      	b.n	8006588 <_printf_i+0xa8>
 8006512:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006516:	2b15      	cmp	r3, #21
 8006518:	d8f6      	bhi.n	8006508 <_printf_i+0x28>
 800651a:	a101      	add	r1, pc, #4	; (adr r1, 8006520 <_printf_i+0x40>)
 800651c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006520:	08006579 	.word	0x08006579
 8006524:	0800658d 	.word	0x0800658d
 8006528:	08006509 	.word	0x08006509
 800652c:	08006509 	.word	0x08006509
 8006530:	08006509 	.word	0x08006509
 8006534:	08006509 	.word	0x08006509
 8006538:	0800658d 	.word	0x0800658d
 800653c:	08006509 	.word	0x08006509
 8006540:	08006509 	.word	0x08006509
 8006544:	08006509 	.word	0x08006509
 8006548:	08006509 	.word	0x08006509
 800654c:	08006699 	.word	0x08006699
 8006550:	080065bd 	.word	0x080065bd
 8006554:	0800667b 	.word	0x0800667b
 8006558:	08006509 	.word	0x08006509
 800655c:	08006509 	.word	0x08006509
 8006560:	080066bb 	.word	0x080066bb
 8006564:	08006509 	.word	0x08006509
 8006568:	080065bd 	.word	0x080065bd
 800656c:	08006509 	.word	0x08006509
 8006570:	08006509 	.word	0x08006509
 8006574:	08006683 	.word	0x08006683
 8006578:	682b      	ldr	r3, [r5, #0]
 800657a:	1d1a      	adds	r2, r3, #4
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	602a      	str	r2, [r5, #0]
 8006580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006588:	2301      	movs	r3, #1
 800658a:	e0a3      	b.n	80066d4 <_printf_i+0x1f4>
 800658c:	6820      	ldr	r0, [r4, #0]
 800658e:	6829      	ldr	r1, [r5, #0]
 8006590:	0606      	lsls	r6, r0, #24
 8006592:	f101 0304 	add.w	r3, r1, #4
 8006596:	d50a      	bpl.n	80065ae <_printf_i+0xce>
 8006598:	680e      	ldr	r6, [r1, #0]
 800659a:	602b      	str	r3, [r5, #0]
 800659c:	2e00      	cmp	r6, #0
 800659e:	da03      	bge.n	80065a8 <_printf_i+0xc8>
 80065a0:	232d      	movs	r3, #45	; 0x2d
 80065a2:	4276      	negs	r6, r6
 80065a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065a8:	485e      	ldr	r0, [pc, #376]	; (8006724 <_printf_i+0x244>)
 80065aa:	230a      	movs	r3, #10
 80065ac:	e019      	b.n	80065e2 <_printf_i+0x102>
 80065ae:	680e      	ldr	r6, [r1, #0]
 80065b0:	602b      	str	r3, [r5, #0]
 80065b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065b6:	bf18      	it	ne
 80065b8:	b236      	sxthne	r6, r6
 80065ba:	e7ef      	b.n	800659c <_printf_i+0xbc>
 80065bc:	682b      	ldr	r3, [r5, #0]
 80065be:	6820      	ldr	r0, [r4, #0]
 80065c0:	1d19      	adds	r1, r3, #4
 80065c2:	6029      	str	r1, [r5, #0]
 80065c4:	0601      	lsls	r1, r0, #24
 80065c6:	d501      	bpl.n	80065cc <_printf_i+0xec>
 80065c8:	681e      	ldr	r6, [r3, #0]
 80065ca:	e002      	b.n	80065d2 <_printf_i+0xf2>
 80065cc:	0646      	lsls	r6, r0, #25
 80065ce:	d5fb      	bpl.n	80065c8 <_printf_i+0xe8>
 80065d0:	881e      	ldrh	r6, [r3, #0]
 80065d2:	4854      	ldr	r0, [pc, #336]	; (8006724 <_printf_i+0x244>)
 80065d4:	2f6f      	cmp	r7, #111	; 0x6f
 80065d6:	bf0c      	ite	eq
 80065d8:	2308      	moveq	r3, #8
 80065da:	230a      	movne	r3, #10
 80065dc:	2100      	movs	r1, #0
 80065de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065e2:	6865      	ldr	r5, [r4, #4]
 80065e4:	60a5      	str	r5, [r4, #8]
 80065e6:	2d00      	cmp	r5, #0
 80065e8:	bfa2      	ittt	ge
 80065ea:	6821      	ldrge	r1, [r4, #0]
 80065ec:	f021 0104 	bicge.w	r1, r1, #4
 80065f0:	6021      	strge	r1, [r4, #0]
 80065f2:	b90e      	cbnz	r6, 80065f8 <_printf_i+0x118>
 80065f4:	2d00      	cmp	r5, #0
 80065f6:	d04d      	beq.n	8006694 <_printf_i+0x1b4>
 80065f8:	4615      	mov	r5, r2
 80065fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80065fe:	fb03 6711 	mls	r7, r3, r1, r6
 8006602:	5dc7      	ldrb	r7, [r0, r7]
 8006604:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006608:	4637      	mov	r7, r6
 800660a:	42bb      	cmp	r3, r7
 800660c:	460e      	mov	r6, r1
 800660e:	d9f4      	bls.n	80065fa <_printf_i+0x11a>
 8006610:	2b08      	cmp	r3, #8
 8006612:	d10b      	bne.n	800662c <_printf_i+0x14c>
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	07de      	lsls	r6, r3, #31
 8006618:	d508      	bpl.n	800662c <_printf_i+0x14c>
 800661a:	6923      	ldr	r3, [r4, #16]
 800661c:	6861      	ldr	r1, [r4, #4]
 800661e:	4299      	cmp	r1, r3
 8006620:	bfde      	ittt	le
 8006622:	2330      	movle	r3, #48	; 0x30
 8006624:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006628:	f105 35ff 	addle.w	r5, r5, #4294967295
 800662c:	1b52      	subs	r2, r2, r5
 800662e:	6122      	str	r2, [r4, #16]
 8006630:	f8cd a000 	str.w	sl, [sp]
 8006634:	464b      	mov	r3, r9
 8006636:	aa03      	add	r2, sp, #12
 8006638:	4621      	mov	r1, r4
 800663a:	4640      	mov	r0, r8
 800663c:	f7ff fee2 	bl	8006404 <_printf_common>
 8006640:	3001      	adds	r0, #1
 8006642:	d14c      	bne.n	80066de <_printf_i+0x1fe>
 8006644:	f04f 30ff 	mov.w	r0, #4294967295
 8006648:	b004      	add	sp, #16
 800664a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800664e:	4835      	ldr	r0, [pc, #212]	; (8006724 <_printf_i+0x244>)
 8006650:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006654:	6829      	ldr	r1, [r5, #0]
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	f851 6b04 	ldr.w	r6, [r1], #4
 800665c:	6029      	str	r1, [r5, #0]
 800665e:	061d      	lsls	r5, r3, #24
 8006660:	d514      	bpl.n	800668c <_printf_i+0x1ac>
 8006662:	07df      	lsls	r7, r3, #31
 8006664:	bf44      	itt	mi
 8006666:	f043 0320 	orrmi.w	r3, r3, #32
 800666a:	6023      	strmi	r3, [r4, #0]
 800666c:	b91e      	cbnz	r6, 8006676 <_printf_i+0x196>
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	f023 0320 	bic.w	r3, r3, #32
 8006674:	6023      	str	r3, [r4, #0]
 8006676:	2310      	movs	r3, #16
 8006678:	e7b0      	b.n	80065dc <_printf_i+0xfc>
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	f043 0320 	orr.w	r3, r3, #32
 8006680:	6023      	str	r3, [r4, #0]
 8006682:	2378      	movs	r3, #120	; 0x78
 8006684:	4828      	ldr	r0, [pc, #160]	; (8006728 <_printf_i+0x248>)
 8006686:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800668a:	e7e3      	b.n	8006654 <_printf_i+0x174>
 800668c:	0659      	lsls	r1, r3, #25
 800668e:	bf48      	it	mi
 8006690:	b2b6      	uxthmi	r6, r6
 8006692:	e7e6      	b.n	8006662 <_printf_i+0x182>
 8006694:	4615      	mov	r5, r2
 8006696:	e7bb      	b.n	8006610 <_printf_i+0x130>
 8006698:	682b      	ldr	r3, [r5, #0]
 800669a:	6826      	ldr	r6, [r4, #0]
 800669c:	6961      	ldr	r1, [r4, #20]
 800669e:	1d18      	adds	r0, r3, #4
 80066a0:	6028      	str	r0, [r5, #0]
 80066a2:	0635      	lsls	r5, r6, #24
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	d501      	bpl.n	80066ac <_printf_i+0x1cc>
 80066a8:	6019      	str	r1, [r3, #0]
 80066aa:	e002      	b.n	80066b2 <_printf_i+0x1d2>
 80066ac:	0670      	lsls	r0, r6, #25
 80066ae:	d5fb      	bpl.n	80066a8 <_printf_i+0x1c8>
 80066b0:	8019      	strh	r1, [r3, #0]
 80066b2:	2300      	movs	r3, #0
 80066b4:	6123      	str	r3, [r4, #16]
 80066b6:	4615      	mov	r5, r2
 80066b8:	e7ba      	b.n	8006630 <_printf_i+0x150>
 80066ba:	682b      	ldr	r3, [r5, #0]
 80066bc:	1d1a      	adds	r2, r3, #4
 80066be:	602a      	str	r2, [r5, #0]
 80066c0:	681d      	ldr	r5, [r3, #0]
 80066c2:	6862      	ldr	r2, [r4, #4]
 80066c4:	2100      	movs	r1, #0
 80066c6:	4628      	mov	r0, r5
 80066c8:	f7f9 fd62 	bl	8000190 <memchr>
 80066cc:	b108      	cbz	r0, 80066d2 <_printf_i+0x1f2>
 80066ce:	1b40      	subs	r0, r0, r5
 80066d0:	6060      	str	r0, [r4, #4]
 80066d2:	6863      	ldr	r3, [r4, #4]
 80066d4:	6123      	str	r3, [r4, #16]
 80066d6:	2300      	movs	r3, #0
 80066d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066dc:	e7a8      	b.n	8006630 <_printf_i+0x150>
 80066de:	6923      	ldr	r3, [r4, #16]
 80066e0:	462a      	mov	r2, r5
 80066e2:	4649      	mov	r1, r9
 80066e4:	4640      	mov	r0, r8
 80066e6:	47d0      	blx	sl
 80066e8:	3001      	adds	r0, #1
 80066ea:	d0ab      	beq.n	8006644 <_printf_i+0x164>
 80066ec:	6823      	ldr	r3, [r4, #0]
 80066ee:	079b      	lsls	r3, r3, #30
 80066f0:	d413      	bmi.n	800671a <_printf_i+0x23a>
 80066f2:	68e0      	ldr	r0, [r4, #12]
 80066f4:	9b03      	ldr	r3, [sp, #12]
 80066f6:	4298      	cmp	r0, r3
 80066f8:	bfb8      	it	lt
 80066fa:	4618      	movlt	r0, r3
 80066fc:	e7a4      	b.n	8006648 <_printf_i+0x168>
 80066fe:	2301      	movs	r3, #1
 8006700:	4632      	mov	r2, r6
 8006702:	4649      	mov	r1, r9
 8006704:	4640      	mov	r0, r8
 8006706:	47d0      	blx	sl
 8006708:	3001      	adds	r0, #1
 800670a:	d09b      	beq.n	8006644 <_printf_i+0x164>
 800670c:	3501      	adds	r5, #1
 800670e:	68e3      	ldr	r3, [r4, #12]
 8006710:	9903      	ldr	r1, [sp, #12]
 8006712:	1a5b      	subs	r3, r3, r1
 8006714:	42ab      	cmp	r3, r5
 8006716:	dcf2      	bgt.n	80066fe <_printf_i+0x21e>
 8006718:	e7eb      	b.n	80066f2 <_printf_i+0x212>
 800671a:	2500      	movs	r5, #0
 800671c:	f104 0619 	add.w	r6, r4, #25
 8006720:	e7f5      	b.n	800670e <_printf_i+0x22e>
 8006722:	bf00      	nop
 8006724:	08008b76 	.word	0x08008b76
 8006728:	08008b87 	.word	0x08008b87

0800672c <iprintf>:
 800672c:	b40f      	push	{r0, r1, r2, r3}
 800672e:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <iprintf+0x2c>)
 8006730:	b513      	push	{r0, r1, r4, lr}
 8006732:	681c      	ldr	r4, [r3, #0]
 8006734:	b124      	cbz	r4, 8006740 <iprintf+0x14>
 8006736:	69a3      	ldr	r3, [r4, #24]
 8006738:	b913      	cbnz	r3, 8006740 <iprintf+0x14>
 800673a:	4620      	mov	r0, r4
 800673c:	f001 f8d8 	bl	80078f0 <__sinit>
 8006740:	ab05      	add	r3, sp, #20
 8006742:	9a04      	ldr	r2, [sp, #16]
 8006744:	68a1      	ldr	r1, [r4, #8]
 8006746:	9301      	str	r3, [sp, #4]
 8006748:	4620      	mov	r0, r4
 800674a:	f001 fe95 	bl	8008478 <_vfiprintf_r>
 800674e:	b002      	add	sp, #8
 8006750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006754:	b004      	add	sp, #16
 8006756:	4770      	bx	lr
 8006758:	20000014 	.word	0x20000014

0800675c <_puts_r>:
 800675c:	b570      	push	{r4, r5, r6, lr}
 800675e:	460e      	mov	r6, r1
 8006760:	4605      	mov	r5, r0
 8006762:	b118      	cbz	r0, 800676c <_puts_r+0x10>
 8006764:	6983      	ldr	r3, [r0, #24]
 8006766:	b90b      	cbnz	r3, 800676c <_puts_r+0x10>
 8006768:	f001 f8c2 	bl	80078f0 <__sinit>
 800676c:	69ab      	ldr	r3, [r5, #24]
 800676e:	68ac      	ldr	r4, [r5, #8]
 8006770:	b913      	cbnz	r3, 8006778 <_puts_r+0x1c>
 8006772:	4628      	mov	r0, r5
 8006774:	f001 f8bc 	bl	80078f0 <__sinit>
 8006778:	4b2c      	ldr	r3, [pc, #176]	; (800682c <_puts_r+0xd0>)
 800677a:	429c      	cmp	r4, r3
 800677c:	d120      	bne.n	80067c0 <_puts_r+0x64>
 800677e:	686c      	ldr	r4, [r5, #4]
 8006780:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006782:	07db      	lsls	r3, r3, #31
 8006784:	d405      	bmi.n	8006792 <_puts_r+0x36>
 8006786:	89a3      	ldrh	r3, [r4, #12]
 8006788:	0598      	lsls	r0, r3, #22
 800678a:	d402      	bmi.n	8006792 <_puts_r+0x36>
 800678c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800678e:	f001 f952 	bl	8007a36 <__retarget_lock_acquire_recursive>
 8006792:	89a3      	ldrh	r3, [r4, #12]
 8006794:	0719      	lsls	r1, r3, #28
 8006796:	d51d      	bpl.n	80067d4 <_puts_r+0x78>
 8006798:	6923      	ldr	r3, [r4, #16]
 800679a:	b1db      	cbz	r3, 80067d4 <_puts_r+0x78>
 800679c:	3e01      	subs	r6, #1
 800679e:	68a3      	ldr	r3, [r4, #8]
 80067a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80067a4:	3b01      	subs	r3, #1
 80067a6:	60a3      	str	r3, [r4, #8]
 80067a8:	bb39      	cbnz	r1, 80067fa <_puts_r+0x9e>
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	da38      	bge.n	8006820 <_puts_r+0xc4>
 80067ae:	4622      	mov	r2, r4
 80067b0:	210a      	movs	r1, #10
 80067b2:	4628      	mov	r0, r5
 80067b4:	f000 f848 	bl	8006848 <__swbuf_r>
 80067b8:	3001      	adds	r0, #1
 80067ba:	d011      	beq.n	80067e0 <_puts_r+0x84>
 80067bc:	250a      	movs	r5, #10
 80067be:	e011      	b.n	80067e4 <_puts_r+0x88>
 80067c0:	4b1b      	ldr	r3, [pc, #108]	; (8006830 <_puts_r+0xd4>)
 80067c2:	429c      	cmp	r4, r3
 80067c4:	d101      	bne.n	80067ca <_puts_r+0x6e>
 80067c6:	68ac      	ldr	r4, [r5, #8]
 80067c8:	e7da      	b.n	8006780 <_puts_r+0x24>
 80067ca:	4b1a      	ldr	r3, [pc, #104]	; (8006834 <_puts_r+0xd8>)
 80067cc:	429c      	cmp	r4, r3
 80067ce:	bf08      	it	eq
 80067d0:	68ec      	ldreq	r4, [r5, #12]
 80067d2:	e7d5      	b.n	8006780 <_puts_r+0x24>
 80067d4:	4621      	mov	r1, r4
 80067d6:	4628      	mov	r0, r5
 80067d8:	f000 f888 	bl	80068ec <__swsetup_r>
 80067dc:	2800      	cmp	r0, #0
 80067de:	d0dd      	beq.n	800679c <_puts_r+0x40>
 80067e0:	f04f 35ff 	mov.w	r5, #4294967295
 80067e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067e6:	07da      	lsls	r2, r3, #31
 80067e8:	d405      	bmi.n	80067f6 <_puts_r+0x9a>
 80067ea:	89a3      	ldrh	r3, [r4, #12]
 80067ec:	059b      	lsls	r3, r3, #22
 80067ee:	d402      	bmi.n	80067f6 <_puts_r+0x9a>
 80067f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067f2:	f001 f921 	bl	8007a38 <__retarget_lock_release_recursive>
 80067f6:	4628      	mov	r0, r5
 80067f8:	bd70      	pop	{r4, r5, r6, pc}
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	da04      	bge.n	8006808 <_puts_r+0xac>
 80067fe:	69a2      	ldr	r2, [r4, #24]
 8006800:	429a      	cmp	r2, r3
 8006802:	dc06      	bgt.n	8006812 <_puts_r+0xb6>
 8006804:	290a      	cmp	r1, #10
 8006806:	d004      	beq.n	8006812 <_puts_r+0xb6>
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	6022      	str	r2, [r4, #0]
 800680e:	7019      	strb	r1, [r3, #0]
 8006810:	e7c5      	b.n	800679e <_puts_r+0x42>
 8006812:	4622      	mov	r2, r4
 8006814:	4628      	mov	r0, r5
 8006816:	f000 f817 	bl	8006848 <__swbuf_r>
 800681a:	3001      	adds	r0, #1
 800681c:	d1bf      	bne.n	800679e <_puts_r+0x42>
 800681e:	e7df      	b.n	80067e0 <_puts_r+0x84>
 8006820:	6823      	ldr	r3, [r4, #0]
 8006822:	250a      	movs	r5, #10
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	6022      	str	r2, [r4, #0]
 8006828:	701d      	strb	r5, [r3, #0]
 800682a:	e7db      	b.n	80067e4 <_puts_r+0x88>
 800682c:	08008c48 	.word	0x08008c48
 8006830:	08008c68 	.word	0x08008c68
 8006834:	08008c28 	.word	0x08008c28

08006838 <puts>:
 8006838:	4b02      	ldr	r3, [pc, #8]	; (8006844 <puts+0xc>)
 800683a:	4601      	mov	r1, r0
 800683c:	6818      	ldr	r0, [r3, #0]
 800683e:	f7ff bf8d 	b.w	800675c <_puts_r>
 8006842:	bf00      	nop
 8006844:	20000014 	.word	0x20000014

08006848 <__swbuf_r>:
 8006848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684a:	460e      	mov	r6, r1
 800684c:	4614      	mov	r4, r2
 800684e:	4605      	mov	r5, r0
 8006850:	b118      	cbz	r0, 800685a <__swbuf_r+0x12>
 8006852:	6983      	ldr	r3, [r0, #24]
 8006854:	b90b      	cbnz	r3, 800685a <__swbuf_r+0x12>
 8006856:	f001 f84b 	bl	80078f0 <__sinit>
 800685a:	4b21      	ldr	r3, [pc, #132]	; (80068e0 <__swbuf_r+0x98>)
 800685c:	429c      	cmp	r4, r3
 800685e:	d12b      	bne.n	80068b8 <__swbuf_r+0x70>
 8006860:	686c      	ldr	r4, [r5, #4]
 8006862:	69a3      	ldr	r3, [r4, #24]
 8006864:	60a3      	str	r3, [r4, #8]
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	071a      	lsls	r2, r3, #28
 800686a:	d52f      	bpl.n	80068cc <__swbuf_r+0x84>
 800686c:	6923      	ldr	r3, [r4, #16]
 800686e:	b36b      	cbz	r3, 80068cc <__swbuf_r+0x84>
 8006870:	6923      	ldr	r3, [r4, #16]
 8006872:	6820      	ldr	r0, [r4, #0]
 8006874:	1ac0      	subs	r0, r0, r3
 8006876:	6963      	ldr	r3, [r4, #20]
 8006878:	b2f6      	uxtb	r6, r6
 800687a:	4283      	cmp	r3, r0
 800687c:	4637      	mov	r7, r6
 800687e:	dc04      	bgt.n	800688a <__swbuf_r+0x42>
 8006880:	4621      	mov	r1, r4
 8006882:	4628      	mov	r0, r5
 8006884:	f000 ffa0 	bl	80077c8 <_fflush_r>
 8006888:	bb30      	cbnz	r0, 80068d8 <__swbuf_r+0x90>
 800688a:	68a3      	ldr	r3, [r4, #8]
 800688c:	3b01      	subs	r3, #1
 800688e:	60a3      	str	r3, [r4, #8]
 8006890:	6823      	ldr	r3, [r4, #0]
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	6022      	str	r2, [r4, #0]
 8006896:	701e      	strb	r6, [r3, #0]
 8006898:	6963      	ldr	r3, [r4, #20]
 800689a:	3001      	adds	r0, #1
 800689c:	4283      	cmp	r3, r0
 800689e:	d004      	beq.n	80068aa <__swbuf_r+0x62>
 80068a0:	89a3      	ldrh	r3, [r4, #12]
 80068a2:	07db      	lsls	r3, r3, #31
 80068a4:	d506      	bpl.n	80068b4 <__swbuf_r+0x6c>
 80068a6:	2e0a      	cmp	r6, #10
 80068a8:	d104      	bne.n	80068b4 <__swbuf_r+0x6c>
 80068aa:	4621      	mov	r1, r4
 80068ac:	4628      	mov	r0, r5
 80068ae:	f000 ff8b 	bl	80077c8 <_fflush_r>
 80068b2:	b988      	cbnz	r0, 80068d8 <__swbuf_r+0x90>
 80068b4:	4638      	mov	r0, r7
 80068b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068b8:	4b0a      	ldr	r3, [pc, #40]	; (80068e4 <__swbuf_r+0x9c>)
 80068ba:	429c      	cmp	r4, r3
 80068bc:	d101      	bne.n	80068c2 <__swbuf_r+0x7a>
 80068be:	68ac      	ldr	r4, [r5, #8]
 80068c0:	e7cf      	b.n	8006862 <__swbuf_r+0x1a>
 80068c2:	4b09      	ldr	r3, [pc, #36]	; (80068e8 <__swbuf_r+0xa0>)
 80068c4:	429c      	cmp	r4, r3
 80068c6:	bf08      	it	eq
 80068c8:	68ec      	ldreq	r4, [r5, #12]
 80068ca:	e7ca      	b.n	8006862 <__swbuf_r+0x1a>
 80068cc:	4621      	mov	r1, r4
 80068ce:	4628      	mov	r0, r5
 80068d0:	f000 f80c 	bl	80068ec <__swsetup_r>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d0cb      	beq.n	8006870 <__swbuf_r+0x28>
 80068d8:	f04f 37ff 	mov.w	r7, #4294967295
 80068dc:	e7ea      	b.n	80068b4 <__swbuf_r+0x6c>
 80068de:	bf00      	nop
 80068e0:	08008c48 	.word	0x08008c48
 80068e4:	08008c68 	.word	0x08008c68
 80068e8:	08008c28 	.word	0x08008c28

080068ec <__swsetup_r>:
 80068ec:	4b32      	ldr	r3, [pc, #200]	; (80069b8 <__swsetup_r+0xcc>)
 80068ee:	b570      	push	{r4, r5, r6, lr}
 80068f0:	681d      	ldr	r5, [r3, #0]
 80068f2:	4606      	mov	r6, r0
 80068f4:	460c      	mov	r4, r1
 80068f6:	b125      	cbz	r5, 8006902 <__swsetup_r+0x16>
 80068f8:	69ab      	ldr	r3, [r5, #24]
 80068fa:	b913      	cbnz	r3, 8006902 <__swsetup_r+0x16>
 80068fc:	4628      	mov	r0, r5
 80068fe:	f000 fff7 	bl	80078f0 <__sinit>
 8006902:	4b2e      	ldr	r3, [pc, #184]	; (80069bc <__swsetup_r+0xd0>)
 8006904:	429c      	cmp	r4, r3
 8006906:	d10f      	bne.n	8006928 <__swsetup_r+0x3c>
 8006908:	686c      	ldr	r4, [r5, #4]
 800690a:	89a3      	ldrh	r3, [r4, #12]
 800690c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006910:	0719      	lsls	r1, r3, #28
 8006912:	d42c      	bmi.n	800696e <__swsetup_r+0x82>
 8006914:	06dd      	lsls	r5, r3, #27
 8006916:	d411      	bmi.n	800693c <__swsetup_r+0x50>
 8006918:	2309      	movs	r3, #9
 800691a:	6033      	str	r3, [r6, #0]
 800691c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006920:	81a3      	strh	r3, [r4, #12]
 8006922:	f04f 30ff 	mov.w	r0, #4294967295
 8006926:	e03e      	b.n	80069a6 <__swsetup_r+0xba>
 8006928:	4b25      	ldr	r3, [pc, #148]	; (80069c0 <__swsetup_r+0xd4>)
 800692a:	429c      	cmp	r4, r3
 800692c:	d101      	bne.n	8006932 <__swsetup_r+0x46>
 800692e:	68ac      	ldr	r4, [r5, #8]
 8006930:	e7eb      	b.n	800690a <__swsetup_r+0x1e>
 8006932:	4b24      	ldr	r3, [pc, #144]	; (80069c4 <__swsetup_r+0xd8>)
 8006934:	429c      	cmp	r4, r3
 8006936:	bf08      	it	eq
 8006938:	68ec      	ldreq	r4, [r5, #12]
 800693a:	e7e6      	b.n	800690a <__swsetup_r+0x1e>
 800693c:	0758      	lsls	r0, r3, #29
 800693e:	d512      	bpl.n	8006966 <__swsetup_r+0x7a>
 8006940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006942:	b141      	cbz	r1, 8006956 <__swsetup_r+0x6a>
 8006944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006948:	4299      	cmp	r1, r3
 800694a:	d002      	beq.n	8006952 <__swsetup_r+0x66>
 800694c:	4630      	mov	r0, r6
 800694e:	f001 fc89 	bl	8008264 <_free_r>
 8006952:	2300      	movs	r3, #0
 8006954:	6363      	str	r3, [r4, #52]	; 0x34
 8006956:	89a3      	ldrh	r3, [r4, #12]
 8006958:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800695c:	81a3      	strh	r3, [r4, #12]
 800695e:	2300      	movs	r3, #0
 8006960:	6063      	str	r3, [r4, #4]
 8006962:	6923      	ldr	r3, [r4, #16]
 8006964:	6023      	str	r3, [r4, #0]
 8006966:	89a3      	ldrh	r3, [r4, #12]
 8006968:	f043 0308 	orr.w	r3, r3, #8
 800696c:	81a3      	strh	r3, [r4, #12]
 800696e:	6923      	ldr	r3, [r4, #16]
 8006970:	b94b      	cbnz	r3, 8006986 <__swsetup_r+0x9a>
 8006972:	89a3      	ldrh	r3, [r4, #12]
 8006974:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800697c:	d003      	beq.n	8006986 <__swsetup_r+0x9a>
 800697e:	4621      	mov	r1, r4
 8006980:	4630      	mov	r0, r6
 8006982:	f001 f87f 	bl	8007a84 <__smakebuf_r>
 8006986:	89a0      	ldrh	r0, [r4, #12]
 8006988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800698c:	f010 0301 	ands.w	r3, r0, #1
 8006990:	d00a      	beq.n	80069a8 <__swsetup_r+0xbc>
 8006992:	2300      	movs	r3, #0
 8006994:	60a3      	str	r3, [r4, #8]
 8006996:	6963      	ldr	r3, [r4, #20]
 8006998:	425b      	negs	r3, r3
 800699a:	61a3      	str	r3, [r4, #24]
 800699c:	6923      	ldr	r3, [r4, #16]
 800699e:	b943      	cbnz	r3, 80069b2 <__swsetup_r+0xc6>
 80069a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069a4:	d1ba      	bne.n	800691c <__swsetup_r+0x30>
 80069a6:	bd70      	pop	{r4, r5, r6, pc}
 80069a8:	0781      	lsls	r1, r0, #30
 80069aa:	bf58      	it	pl
 80069ac:	6963      	ldrpl	r3, [r4, #20]
 80069ae:	60a3      	str	r3, [r4, #8]
 80069b0:	e7f4      	b.n	800699c <__swsetup_r+0xb0>
 80069b2:	2000      	movs	r0, #0
 80069b4:	e7f7      	b.n	80069a6 <__swsetup_r+0xba>
 80069b6:	bf00      	nop
 80069b8:	20000014 	.word	0x20000014
 80069bc:	08008c48 	.word	0x08008c48
 80069c0:	08008c68 	.word	0x08008c68
 80069c4:	08008c28 	.word	0x08008c28

080069c8 <quorem>:
 80069c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069cc:	6903      	ldr	r3, [r0, #16]
 80069ce:	690c      	ldr	r4, [r1, #16]
 80069d0:	42a3      	cmp	r3, r4
 80069d2:	4607      	mov	r7, r0
 80069d4:	f2c0 8081 	blt.w	8006ada <quorem+0x112>
 80069d8:	3c01      	subs	r4, #1
 80069da:	f101 0814 	add.w	r8, r1, #20
 80069de:	f100 0514 	add.w	r5, r0, #20
 80069e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069e6:	9301      	str	r3, [sp, #4]
 80069e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80069ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069f0:	3301      	adds	r3, #1
 80069f2:	429a      	cmp	r2, r3
 80069f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80069f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80069fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a00:	d331      	bcc.n	8006a66 <quorem+0x9e>
 8006a02:	f04f 0e00 	mov.w	lr, #0
 8006a06:	4640      	mov	r0, r8
 8006a08:	46ac      	mov	ip, r5
 8006a0a:	46f2      	mov	sl, lr
 8006a0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a10:	b293      	uxth	r3, r2
 8006a12:	fb06 e303 	mla	r3, r6, r3, lr
 8006a16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	ebaa 0303 	sub.w	r3, sl, r3
 8006a20:	f8dc a000 	ldr.w	sl, [ip]
 8006a24:	0c12      	lsrs	r2, r2, #16
 8006a26:	fa13 f38a 	uxtah	r3, r3, sl
 8006a2a:	fb06 e202 	mla	r2, r6, r2, lr
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	9b00      	ldr	r3, [sp, #0]
 8006a32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a36:	b292      	uxth	r2, r2
 8006a38:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006a3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a40:	f8bd 3000 	ldrh.w	r3, [sp]
 8006a44:	4581      	cmp	r9, r0
 8006a46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a4a:	f84c 3b04 	str.w	r3, [ip], #4
 8006a4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a52:	d2db      	bcs.n	8006a0c <quorem+0x44>
 8006a54:	f855 300b 	ldr.w	r3, [r5, fp]
 8006a58:	b92b      	cbnz	r3, 8006a66 <quorem+0x9e>
 8006a5a:	9b01      	ldr	r3, [sp, #4]
 8006a5c:	3b04      	subs	r3, #4
 8006a5e:	429d      	cmp	r5, r3
 8006a60:	461a      	mov	r2, r3
 8006a62:	d32e      	bcc.n	8006ac2 <quorem+0xfa>
 8006a64:	613c      	str	r4, [r7, #16]
 8006a66:	4638      	mov	r0, r7
 8006a68:	f001 fae4 	bl	8008034 <__mcmp>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	db24      	blt.n	8006aba <quorem+0xf2>
 8006a70:	3601      	adds	r6, #1
 8006a72:	4628      	mov	r0, r5
 8006a74:	f04f 0c00 	mov.w	ip, #0
 8006a78:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a7c:	f8d0 e000 	ldr.w	lr, [r0]
 8006a80:	b293      	uxth	r3, r2
 8006a82:	ebac 0303 	sub.w	r3, ip, r3
 8006a86:	0c12      	lsrs	r2, r2, #16
 8006a88:	fa13 f38e 	uxtah	r3, r3, lr
 8006a8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006a90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a9a:	45c1      	cmp	r9, r8
 8006a9c:	f840 3b04 	str.w	r3, [r0], #4
 8006aa0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006aa4:	d2e8      	bcs.n	8006a78 <quorem+0xb0>
 8006aa6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006aaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006aae:	b922      	cbnz	r2, 8006aba <quorem+0xf2>
 8006ab0:	3b04      	subs	r3, #4
 8006ab2:	429d      	cmp	r5, r3
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	d30a      	bcc.n	8006ace <quorem+0x106>
 8006ab8:	613c      	str	r4, [r7, #16]
 8006aba:	4630      	mov	r0, r6
 8006abc:	b003      	add	sp, #12
 8006abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac2:	6812      	ldr	r2, [r2, #0]
 8006ac4:	3b04      	subs	r3, #4
 8006ac6:	2a00      	cmp	r2, #0
 8006ac8:	d1cc      	bne.n	8006a64 <quorem+0x9c>
 8006aca:	3c01      	subs	r4, #1
 8006acc:	e7c7      	b.n	8006a5e <quorem+0x96>
 8006ace:	6812      	ldr	r2, [r2, #0]
 8006ad0:	3b04      	subs	r3, #4
 8006ad2:	2a00      	cmp	r2, #0
 8006ad4:	d1f0      	bne.n	8006ab8 <quorem+0xf0>
 8006ad6:	3c01      	subs	r4, #1
 8006ad8:	e7eb      	b.n	8006ab2 <quorem+0xea>
 8006ada:	2000      	movs	r0, #0
 8006adc:	e7ee      	b.n	8006abc <quorem+0xf4>
	...

08006ae0 <_dtoa_r>:
 8006ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae4:	ed2d 8b04 	vpush	{d8-d9}
 8006ae8:	ec57 6b10 	vmov	r6, r7, d0
 8006aec:	b093      	sub	sp, #76	; 0x4c
 8006aee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006af0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006af4:	9106      	str	r1, [sp, #24]
 8006af6:	ee10 aa10 	vmov	sl, s0
 8006afa:	4604      	mov	r4, r0
 8006afc:	9209      	str	r2, [sp, #36]	; 0x24
 8006afe:	930c      	str	r3, [sp, #48]	; 0x30
 8006b00:	46bb      	mov	fp, r7
 8006b02:	b975      	cbnz	r5, 8006b22 <_dtoa_r+0x42>
 8006b04:	2010      	movs	r0, #16
 8006b06:	f000 fffd 	bl	8007b04 <malloc>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	6260      	str	r0, [r4, #36]	; 0x24
 8006b0e:	b920      	cbnz	r0, 8006b1a <_dtoa_r+0x3a>
 8006b10:	4ba7      	ldr	r3, [pc, #668]	; (8006db0 <_dtoa_r+0x2d0>)
 8006b12:	21ea      	movs	r1, #234	; 0xea
 8006b14:	48a7      	ldr	r0, [pc, #668]	; (8006db4 <_dtoa_r+0x2d4>)
 8006b16:	f001 fe45 	bl	80087a4 <__assert_func>
 8006b1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b1e:	6005      	str	r5, [r0, #0]
 8006b20:	60c5      	str	r5, [r0, #12]
 8006b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b24:	6819      	ldr	r1, [r3, #0]
 8006b26:	b151      	cbz	r1, 8006b3e <_dtoa_r+0x5e>
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	604a      	str	r2, [r1, #4]
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	4093      	lsls	r3, r2
 8006b30:	608b      	str	r3, [r1, #8]
 8006b32:	4620      	mov	r0, r4
 8006b34:	f001 f83c 	bl	8007bb0 <_Bfree>
 8006b38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	1e3b      	subs	r3, r7, #0
 8006b40:	bfaa      	itet	ge
 8006b42:	2300      	movge	r3, #0
 8006b44:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006b48:	f8c8 3000 	strge.w	r3, [r8]
 8006b4c:	4b9a      	ldr	r3, [pc, #616]	; (8006db8 <_dtoa_r+0x2d8>)
 8006b4e:	bfbc      	itt	lt
 8006b50:	2201      	movlt	r2, #1
 8006b52:	f8c8 2000 	strlt.w	r2, [r8]
 8006b56:	ea33 030b 	bics.w	r3, r3, fp
 8006b5a:	d11b      	bne.n	8006b94 <_dtoa_r+0xb4>
 8006b5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b5e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b68:	4333      	orrs	r3, r6
 8006b6a:	f000 8592 	beq.w	8007692 <_dtoa_r+0xbb2>
 8006b6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b70:	b963      	cbnz	r3, 8006b8c <_dtoa_r+0xac>
 8006b72:	4b92      	ldr	r3, [pc, #584]	; (8006dbc <_dtoa_r+0x2dc>)
 8006b74:	e022      	b.n	8006bbc <_dtoa_r+0xdc>
 8006b76:	4b92      	ldr	r3, [pc, #584]	; (8006dc0 <_dtoa_r+0x2e0>)
 8006b78:	9301      	str	r3, [sp, #4]
 8006b7a:	3308      	adds	r3, #8
 8006b7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	9801      	ldr	r0, [sp, #4]
 8006b82:	b013      	add	sp, #76	; 0x4c
 8006b84:	ecbd 8b04 	vpop	{d8-d9}
 8006b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b8c:	4b8b      	ldr	r3, [pc, #556]	; (8006dbc <_dtoa_r+0x2dc>)
 8006b8e:	9301      	str	r3, [sp, #4]
 8006b90:	3303      	adds	r3, #3
 8006b92:	e7f3      	b.n	8006b7c <_dtoa_r+0x9c>
 8006b94:	2200      	movs	r2, #0
 8006b96:	2300      	movs	r3, #0
 8006b98:	4650      	mov	r0, sl
 8006b9a:	4659      	mov	r1, fp
 8006b9c:	f7f9 ff6c 	bl	8000a78 <__aeabi_dcmpeq>
 8006ba0:	ec4b ab19 	vmov	d9, sl, fp
 8006ba4:	4680      	mov	r8, r0
 8006ba6:	b158      	cbz	r0, 8006bc0 <_dtoa_r+0xe0>
 8006ba8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006baa:	2301      	movs	r3, #1
 8006bac:	6013      	str	r3, [r2, #0]
 8006bae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 856b 	beq.w	800768c <_dtoa_r+0xbac>
 8006bb6:	4883      	ldr	r0, [pc, #524]	; (8006dc4 <_dtoa_r+0x2e4>)
 8006bb8:	6018      	str	r0, [r3, #0]
 8006bba:	1e43      	subs	r3, r0, #1
 8006bbc:	9301      	str	r3, [sp, #4]
 8006bbe:	e7df      	b.n	8006b80 <_dtoa_r+0xa0>
 8006bc0:	ec4b ab10 	vmov	d0, sl, fp
 8006bc4:	aa10      	add	r2, sp, #64	; 0x40
 8006bc6:	a911      	add	r1, sp, #68	; 0x44
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f001 fad9 	bl	8008180 <__d2b>
 8006bce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006bd2:	ee08 0a10 	vmov	s16, r0
 8006bd6:	2d00      	cmp	r5, #0
 8006bd8:	f000 8084 	beq.w	8006ce4 <_dtoa_r+0x204>
 8006bdc:	ee19 3a90 	vmov	r3, s19
 8006be0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006be4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006be8:	4656      	mov	r6, sl
 8006bea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006bee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006bf2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006bf6:	4b74      	ldr	r3, [pc, #464]	; (8006dc8 <_dtoa_r+0x2e8>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	4639      	mov	r1, r7
 8006bfe:	f7f9 fb1b 	bl	8000238 <__aeabi_dsub>
 8006c02:	a365      	add	r3, pc, #404	; (adr r3, 8006d98 <_dtoa_r+0x2b8>)
 8006c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c08:	f7f9 fcce 	bl	80005a8 <__aeabi_dmul>
 8006c0c:	a364      	add	r3, pc, #400	; (adr r3, 8006da0 <_dtoa_r+0x2c0>)
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	f7f9 fb13 	bl	800023c <__adddf3>
 8006c16:	4606      	mov	r6, r0
 8006c18:	4628      	mov	r0, r5
 8006c1a:	460f      	mov	r7, r1
 8006c1c:	f7f9 fc5a 	bl	80004d4 <__aeabi_i2d>
 8006c20:	a361      	add	r3, pc, #388	; (adr r3, 8006da8 <_dtoa_r+0x2c8>)
 8006c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c26:	f7f9 fcbf 	bl	80005a8 <__aeabi_dmul>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4630      	mov	r0, r6
 8006c30:	4639      	mov	r1, r7
 8006c32:	f7f9 fb03 	bl	800023c <__adddf3>
 8006c36:	4606      	mov	r6, r0
 8006c38:	460f      	mov	r7, r1
 8006c3a:	f7f9 ff65 	bl	8000b08 <__aeabi_d2iz>
 8006c3e:	2200      	movs	r2, #0
 8006c40:	9000      	str	r0, [sp, #0]
 8006c42:	2300      	movs	r3, #0
 8006c44:	4630      	mov	r0, r6
 8006c46:	4639      	mov	r1, r7
 8006c48:	f7f9 ff20 	bl	8000a8c <__aeabi_dcmplt>
 8006c4c:	b150      	cbz	r0, 8006c64 <_dtoa_r+0x184>
 8006c4e:	9800      	ldr	r0, [sp, #0]
 8006c50:	f7f9 fc40 	bl	80004d4 <__aeabi_i2d>
 8006c54:	4632      	mov	r2, r6
 8006c56:	463b      	mov	r3, r7
 8006c58:	f7f9 ff0e 	bl	8000a78 <__aeabi_dcmpeq>
 8006c5c:	b910      	cbnz	r0, 8006c64 <_dtoa_r+0x184>
 8006c5e:	9b00      	ldr	r3, [sp, #0]
 8006c60:	3b01      	subs	r3, #1
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	9b00      	ldr	r3, [sp, #0]
 8006c66:	2b16      	cmp	r3, #22
 8006c68:	d85a      	bhi.n	8006d20 <_dtoa_r+0x240>
 8006c6a:	9a00      	ldr	r2, [sp, #0]
 8006c6c:	4b57      	ldr	r3, [pc, #348]	; (8006dcc <_dtoa_r+0x2ec>)
 8006c6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c76:	ec51 0b19 	vmov	r0, r1, d9
 8006c7a:	f7f9 ff07 	bl	8000a8c <__aeabi_dcmplt>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d050      	beq.n	8006d24 <_dtoa_r+0x244>
 8006c82:	9b00      	ldr	r3, [sp, #0]
 8006c84:	3b01      	subs	r3, #1
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	2300      	movs	r3, #0
 8006c8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c8e:	1b5d      	subs	r5, r3, r5
 8006c90:	1e6b      	subs	r3, r5, #1
 8006c92:	9305      	str	r3, [sp, #20]
 8006c94:	bf45      	ittet	mi
 8006c96:	f1c5 0301 	rsbmi	r3, r5, #1
 8006c9a:	9304      	strmi	r3, [sp, #16]
 8006c9c:	2300      	movpl	r3, #0
 8006c9e:	2300      	movmi	r3, #0
 8006ca0:	bf4c      	ite	mi
 8006ca2:	9305      	strmi	r3, [sp, #20]
 8006ca4:	9304      	strpl	r3, [sp, #16]
 8006ca6:	9b00      	ldr	r3, [sp, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	db3d      	blt.n	8006d28 <_dtoa_r+0x248>
 8006cac:	9b05      	ldr	r3, [sp, #20]
 8006cae:	9a00      	ldr	r2, [sp, #0]
 8006cb0:	920a      	str	r2, [sp, #40]	; 0x28
 8006cb2:	4413      	add	r3, r2
 8006cb4:	9305      	str	r3, [sp, #20]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	9307      	str	r3, [sp, #28]
 8006cba:	9b06      	ldr	r3, [sp, #24]
 8006cbc:	2b09      	cmp	r3, #9
 8006cbe:	f200 8089 	bhi.w	8006dd4 <_dtoa_r+0x2f4>
 8006cc2:	2b05      	cmp	r3, #5
 8006cc4:	bfc4      	itt	gt
 8006cc6:	3b04      	subgt	r3, #4
 8006cc8:	9306      	strgt	r3, [sp, #24]
 8006cca:	9b06      	ldr	r3, [sp, #24]
 8006ccc:	f1a3 0302 	sub.w	r3, r3, #2
 8006cd0:	bfcc      	ite	gt
 8006cd2:	2500      	movgt	r5, #0
 8006cd4:	2501      	movle	r5, #1
 8006cd6:	2b03      	cmp	r3, #3
 8006cd8:	f200 8087 	bhi.w	8006dea <_dtoa_r+0x30a>
 8006cdc:	e8df f003 	tbb	[pc, r3]
 8006ce0:	59383a2d 	.word	0x59383a2d
 8006ce4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006ce8:	441d      	add	r5, r3
 8006cea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006cee:	2b20      	cmp	r3, #32
 8006cf0:	bfc1      	itttt	gt
 8006cf2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006cf6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006cfa:	fa0b f303 	lslgt.w	r3, fp, r3
 8006cfe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006d02:	bfda      	itte	le
 8006d04:	f1c3 0320 	rsble	r3, r3, #32
 8006d08:	fa06 f003 	lslle.w	r0, r6, r3
 8006d0c:	4318      	orrgt	r0, r3
 8006d0e:	f7f9 fbd1 	bl	80004b4 <__aeabi_ui2d>
 8006d12:	2301      	movs	r3, #1
 8006d14:	4606      	mov	r6, r0
 8006d16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006d1a:	3d01      	subs	r5, #1
 8006d1c:	930e      	str	r3, [sp, #56]	; 0x38
 8006d1e:	e76a      	b.n	8006bf6 <_dtoa_r+0x116>
 8006d20:	2301      	movs	r3, #1
 8006d22:	e7b2      	b.n	8006c8a <_dtoa_r+0x1aa>
 8006d24:	900b      	str	r0, [sp, #44]	; 0x2c
 8006d26:	e7b1      	b.n	8006c8c <_dtoa_r+0x1ac>
 8006d28:	9b04      	ldr	r3, [sp, #16]
 8006d2a:	9a00      	ldr	r2, [sp, #0]
 8006d2c:	1a9b      	subs	r3, r3, r2
 8006d2e:	9304      	str	r3, [sp, #16]
 8006d30:	4253      	negs	r3, r2
 8006d32:	9307      	str	r3, [sp, #28]
 8006d34:	2300      	movs	r3, #0
 8006d36:	930a      	str	r3, [sp, #40]	; 0x28
 8006d38:	e7bf      	b.n	8006cba <_dtoa_r+0x1da>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	9308      	str	r3, [sp, #32]
 8006d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	dc55      	bgt.n	8006df0 <_dtoa_r+0x310>
 8006d44:	2301      	movs	r3, #1
 8006d46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d4e:	e00c      	b.n	8006d6a <_dtoa_r+0x28a>
 8006d50:	2301      	movs	r3, #1
 8006d52:	e7f3      	b.n	8006d3c <_dtoa_r+0x25c>
 8006d54:	2300      	movs	r3, #0
 8006d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d58:	9308      	str	r3, [sp, #32]
 8006d5a:	9b00      	ldr	r3, [sp, #0]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	9302      	str	r3, [sp, #8]
 8006d60:	3301      	adds	r3, #1
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	9303      	str	r3, [sp, #12]
 8006d66:	bfb8      	it	lt
 8006d68:	2301      	movlt	r3, #1
 8006d6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	6042      	str	r2, [r0, #4]
 8006d70:	2204      	movs	r2, #4
 8006d72:	f102 0614 	add.w	r6, r2, #20
 8006d76:	429e      	cmp	r6, r3
 8006d78:	6841      	ldr	r1, [r0, #4]
 8006d7a:	d93d      	bls.n	8006df8 <_dtoa_r+0x318>
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f000 fed7 	bl	8007b30 <_Balloc>
 8006d82:	9001      	str	r0, [sp, #4]
 8006d84:	2800      	cmp	r0, #0
 8006d86:	d13b      	bne.n	8006e00 <_dtoa_r+0x320>
 8006d88:	4b11      	ldr	r3, [pc, #68]	; (8006dd0 <_dtoa_r+0x2f0>)
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006d90:	e6c0      	b.n	8006b14 <_dtoa_r+0x34>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e7df      	b.n	8006d56 <_dtoa_r+0x276>
 8006d96:	bf00      	nop
 8006d98:	636f4361 	.word	0x636f4361
 8006d9c:	3fd287a7 	.word	0x3fd287a7
 8006da0:	8b60c8b3 	.word	0x8b60c8b3
 8006da4:	3fc68a28 	.word	0x3fc68a28
 8006da8:	509f79fb 	.word	0x509f79fb
 8006dac:	3fd34413 	.word	0x3fd34413
 8006db0:	08008ba5 	.word	0x08008ba5
 8006db4:	08008bbc 	.word	0x08008bbc
 8006db8:	7ff00000 	.word	0x7ff00000
 8006dbc:	08008ba1 	.word	0x08008ba1
 8006dc0:	08008b98 	.word	0x08008b98
 8006dc4:	08008b75 	.word	0x08008b75
 8006dc8:	3ff80000 	.word	0x3ff80000
 8006dcc:	08008d10 	.word	0x08008d10
 8006dd0:	08008c17 	.word	0x08008c17
 8006dd4:	2501      	movs	r5, #1
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	9306      	str	r3, [sp, #24]
 8006dda:	9508      	str	r5, [sp, #32]
 8006ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8006de0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006de4:	2200      	movs	r2, #0
 8006de6:	2312      	movs	r3, #18
 8006de8:	e7b0      	b.n	8006d4c <_dtoa_r+0x26c>
 8006dea:	2301      	movs	r3, #1
 8006dec:	9308      	str	r3, [sp, #32]
 8006dee:	e7f5      	b.n	8006ddc <_dtoa_r+0x2fc>
 8006df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006df6:	e7b8      	b.n	8006d6a <_dtoa_r+0x28a>
 8006df8:	3101      	adds	r1, #1
 8006dfa:	6041      	str	r1, [r0, #4]
 8006dfc:	0052      	lsls	r2, r2, #1
 8006dfe:	e7b8      	b.n	8006d72 <_dtoa_r+0x292>
 8006e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e02:	9a01      	ldr	r2, [sp, #4]
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	9b03      	ldr	r3, [sp, #12]
 8006e08:	2b0e      	cmp	r3, #14
 8006e0a:	f200 809d 	bhi.w	8006f48 <_dtoa_r+0x468>
 8006e0e:	2d00      	cmp	r5, #0
 8006e10:	f000 809a 	beq.w	8006f48 <_dtoa_r+0x468>
 8006e14:	9b00      	ldr	r3, [sp, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	dd32      	ble.n	8006e80 <_dtoa_r+0x3a0>
 8006e1a:	4ab7      	ldr	r2, [pc, #732]	; (80070f8 <_dtoa_r+0x618>)
 8006e1c:	f003 030f 	and.w	r3, r3, #15
 8006e20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006e24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e28:	9b00      	ldr	r3, [sp, #0]
 8006e2a:	05d8      	lsls	r0, r3, #23
 8006e2c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006e30:	d516      	bpl.n	8006e60 <_dtoa_r+0x380>
 8006e32:	4bb2      	ldr	r3, [pc, #712]	; (80070fc <_dtoa_r+0x61c>)
 8006e34:	ec51 0b19 	vmov	r0, r1, d9
 8006e38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e3c:	f7f9 fcde 	bl	80007fc <__aeabi_ddiv>
 8006e40:	f007 070f 	and.w	r7, r7, #15
 8006e44:	4682      	mov	sl, r0
 8006e46:	468b      	mov	fp, r1
 8006e48:	2503      	movs	r5, #3
 8006e4a:	4eac      	ldr	r6, [pc, #688]	; (80070fc <_dtoa_r+0x61c>)
 8006e4c:	b957      	cbnz	r7, 8006e64 <_dtoa_r+0x384>
 8006e4e:	4642      	mov	r2, r8
 8006e50:	464b      	mov	r3, r9
 8006e52:	4650      	mov	r0, sl
 8006e54:	4659      	mov	r1, fp
 8006e56:	f7f9 fcd1 	bl	80007fc <__aeabi_ddiv>
 8006e5a:	4682      	mov	sl, r0
 8006e5c:	468b      	mov	fp, r1
 8006e5e:	e028      	b.n	8006eb2 <_dtoa_r+0x3d2>
 8006e60:	2502      	movs	r5, #2
 8006e62:	e7f2      	b.n	8006e4a <_dtoa_r+0x36a>
 8006e64:	07f9      	lsls	r1, r7, #31
 8006e66:	d508      	bpl.n	8006e7a <_dtoa_r+0x39a>
 8006e68:	4640      	mov	r0, r8
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e70:	f7f9 fb9a 	bl	80005a8 <__aeabi_dmul>
 8006e74:	3501      	adds	r5, #1
 8006e76:	4680      	mov	r8, r0
 8006e78:	4689      	mov	r9, r1
 8006e7a:	107f      	asrs	r7, r7, #1
 8006e7c:	3608      	adds	r6, #8
 8006e7e:	e7e5      	b.n	8006e4c <_dtoa_r+0x36c>
 8006e80:	f000 809b 	beq.w	8006fba <_dtoa_r+0x4da>
 8006e84:	9b00      	ldr	r3, [sp, #0]
 8006e86:	4f9d      	ldr	r7, [pc, #628]	; (80070fc <_dtoa_r+0x61c>)
 8006e88:	425e      	negs	r6, r3
 8006e8a:	4b9b      	ldr	r3, [pc, #620]	; (80070f8 <_dtoa_r+0x618>)
 8006e8c:	f006 020f 	and.w	r2, r6, #15
 8006e90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e98:	ec51 0b19 	vmov	r0, r1, d9
 8006e9c:	f7f9 fb84 	bl	80005a8 <__aeabi_dmul>
 8006ea0:	1136      	asrs	r6, r6, #4
 8006ea2:	4682      	mov	sl, r0
 8006ea4:	468b      	mov	fp, r1
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	2502      	movs	r5, #2
 8006eaa:	2e00      	cmp	r6, #0
 8006eac:	d17a      	bne.n	8006fa4 <_dtoa_r+0x4c4>
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1d3      	bne.n	8006e5a <_dtoa_r+0x37a>
 8006eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 8082 	beq.w	8006fbe <_dtoa_r+0x4de>
 8006eba:	4b91      	ldr	r3, [pc, #580]	; (8007100 <_dtoa_r+0x620>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	4650      	mov	r0, sl
 8006ec0:	4659      	mov	r1, fp
 8006ec2:	f7f9 fde3 	bl	8000a8c <__aeabi_dcmplt>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	d079      	beq.n	8006fbe <_dtoa_r+0x4de>
 8006eca:	9b03      	ldr	r3, [sp, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d076      	beq.n	8006fbe <_dtoa_r+0x4de>
 8006ed0:	9b02      	ldr	r3, [sp, #8]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	dd36      	ble.n	8006f44 <_dtoa_r+0x464>
 8006ed6:	9b00      	ldr	r3, [sp, #0]
 8006ed8:	4650      	mov	r0, sl
 8006eda:	4659      	mov	r1, fp
 8006edc:	1e5f      	subs	r7, r3, #1
 8006ede:	2200      	movs	r2, #0
 8006ee0:	4b88      	ldr	r3, [pc, #544]	; (8007104 <_dtoa_r+0x624>)
 8006ee2:	f7f9 fb61 	bl	80005a8 <__aeabi_dmul>
 8006ee6:	9e02      	ldr	r6, [sp, #8]
 8006ee8:	4682      	mov	sl, r0
 8006eea:	468b      	mov	fp, r1
 8006eec:	3501      	adds	r5, #1
 8006eee:	4628      	mov	r0, r5
 8006ef0:	f7f9 faf0 	bl	80004d4 <__aeabi_i2d>
 8006ef4:	4652      	mov	r2, sl
 8006ef6:	465b      	mov	r3, fp
 8006ef8:	f7f9 fb56 	bl	80005a8 <__aeabi_dmul>
 8006efc:	4b82      	ldr	r3, [pc, #520]	; (8007108 <_dtoa_r+0x628>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	f7f9 f99c 	bl	800023c <__adddf3>
 8006f04:	46d0      	mov	r8, sl
 8006f06:	46d9      	mov	r9, fp
 8006f08:	4682      	mov	sl, r0
 8006f0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006f0e:	2e00      	cmp	r6, #0
 8006f10:	d158      	bne.n	8006fc4 <_dtoa_r+0x4e4>
 8006f12:	4b7e      	ldr	r3, [pc, #504]	; (800710c <_dtoa_r+0x62c>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	4640      	mov	r0, r8
 8006f18:	4649      	mov	r1, r9
 8006f1a:	f7f9 f98d 	bl	8000238 <__aeabi_dsub>
 8006f1e:	4652      	mov	r2, sl
 8006f20:	465b      	mov	r3, fp
 8006f22:	4680      	mov	r8, r0
 8006f24:	4689      	mov	r9, r1
 8006f26:	f7f9 fdcf 	bl	8000ac8 <__aeabi_dcmpgt>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	f040 8295 	bne.w	800745a <_dtoa_r+0x97a>
 8006f30:	4652      	mov	r2, sl
 8006f32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f36:	4640      	mov	r0, r8
 8006f38:	4649      	mov	r1, r9
 8006f3a:	f7f9 fda7 	bl	8000a8c <__aeabi_dcmplt>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	f040 8289 	bne.w	8007456 <_dtoa_r+0x976>
 8006f44:	ec5b ab19 	vmov	sl, fp, d9
 8006f48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f2c0 8148 	blt.w	80071e0 <_dtoa_r+0x700>
 8006f50:	9a00      	ldr	r2, [sp, #0]
 8006f52:	2a0e      	cmp	r2, #14
 8006f54:	f300 8144 	bgt.w	80071e0 <_dtoa_r+0x700>
 8006f58:	4b67      	ldr	r3, [pc, #412]	; (80070f8 <_dtoa_r+0x618>)
 8006f5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f280 80d5 	bge.w	8007114 <_dtoa_r+0x634>
 8006f6a:	9b03      	ldr	r3, [sp, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f300 80d1 	bgt.w	8007114 <_dtoa_r+0x634>
 8006f72:	f040 826f 	bne.w	8007454 <_dtoa_r+0x974>
 8006f76:	4b65      	ldr	r3, [pc, #404]	; (800710c <_dtoa_r+0x62c>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	4640      	mov	r0, r8
 8006f7c:	4649      	mov	r1, r9
 8006f7e:	f7f9 fb13 	bl	80005a8 <__aeabi_dmul>
 8006f82:	4652      	mov	r2, sl
 8006f84:	465b      	mov	r3, fp
 8006f86:	f7f9 fd95 	bl	8000ab4 <__aeabi_dcmpge>
 8006f8a:	9e03      	ldr	r6, [sp, #12]
 8006f8c:	4637      	mov	r7, r6
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	f040 8245 	bne.w	800741e <_dtoa_r+0x93e>
 8006f94:	9d01      	ldr	r5, [sp, #4]
 8006f96:	2331      	movs	r3, #49	; 0x31
 8006f98:	f805 3b01 	strb.w	r3, [r5], #1
 8006f9c:	9b00      	ldr	r3, [sp, #0]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	e240      	b.n	8007426 <_dtoa_r+0x946>
 8006fa4:	07f2      	lsls	r2, r6, #31
 8006fa6:	d505      	bpl.n	8006fb4 <_dtoa_r+0x4d4>
 8006fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fac:	f7f9 fafc 	bl	80005a8 <__aeabi_dmul>
 8006fb0:	3501      	adds	r5, #1
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	1076      	asrs	r6, r6, #1
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	e777      	b.n	8006eaa <_dtoa_r+0x3ca>
 8006fba:	2502      	movs	r5, #2
 8006fbc:	e779      	b.n	8006eb2 <_dtoa_r+0x3d2>
 8006fbe:	9f00      	ldr	r7, [sp, #0]
 8006fc0:	9e03      	ldr	r6, [sp, #12]
 8006fc2:	e794      	b.n	8006eee <_dtoa_r+0x40e>
 8006fc4:	9901      	ldr	r1, [sp, #4]
 8006fc6:	4b4c      	ldr	r3, [pc, #304]	; (80070f8 <_dtoa_r+0x618>)
 8006fc8:	4431      	add	r1, r6
 8006fca:	910d      	str	r1, [sp, #52]	; 0x34
 8006fcc:	9908      	ldr	r1, [sp, #32]
 8006fce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006fd2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006fd6:	2900      	cmp	r1, #0
 8006fd8:	d043      	beq.n	8007062 <_dtoa_r+0x582>
 8006fda:	494d      	ldr	r1, [pc, #308]	; (8007110 <_dtoa_r+0x630>)
 8006fdc:	2000      	movs	r0, #0
 8006fde:	f7f9 fc0d 	bl	80007fc <__aeabi_ddiv>
 8006fe2:	4652      	mov	r2, sl
 8006fe4:	465b      	mov	r3, fp
 8006fe6:	f7f9 f927 	bl	8000238 <__aeabi_dsub>
 8006fea:	9d01      	ldr	r5, [sp, #4]
 8006fec:	4682      	mov	sl, r0
 8006fee:	468b      	mov	fp, r1
 8006ff0:	4649      	mov	r1, r9
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	f7f9 fd88 	bl	8000b08 <__aeabi_d2iz>
 8006ff8:	4606      	mov	r6, r0
 8006ffa:	f7f9 fa6b 	bl	80004d4 <__aeabi_i2d>
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	4640      	mov	r0, r8
 8007004:	4649      	mov	r1, r9
 8007006:	f7f9 f917 	bl	8000238 <__aeabi_dsub>
 800700a:	3630      	adds	r6, #48	; 0x30
 800700c:	f805 6b01 	strb.w	r6, [r5], #1
 8007010:	4652      	mov	r2, sl
 8007012:	465b      	mov	r3, fp
 8007014:	4680      	mov	r8, r0
 8007016:	4689      	mov	r9, r1
 8007018:	f7f9 fd38 	bl	8000a8c <__aeabi_dcmplt>
 800701c:	2800      	cmp	r0, #0
 800701e:	d163      	bne.n	80070e8 <_dtoa_r+0x608>
 8007020:	4642      	mov	r2, r8
 8007022:	464b      	mov	r3, r9
 8007024:	4936      	ldr	r1, [pc, #216]	; (8007100 <_dtoa_r+0x620>)
 8007026:	2000      	movs	r0, #0
 8007028:	f7f9 f906 	bl	8000238 <__aeabi_dsub>
 800702c:	4652      	mov	r2, sl
 800702e:	465b      	mov	r3, fp
 8007030:	f7f9 fd2c 	bl	8000a8c <__aeabi_dcmplt>
 8007034:	2800      	cmp	r0, #0
 8007036:	f040 80b5 	bne.w	80071a4 <_dtoa_r+0x6c4>
 800703a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800703c:	429d      	cmp	r5, r3
 800703e:	d081      	beq.n	8006f44 <_dtoa_r+0x464>
 8007040:	4b30      	ldr	r3, [pc, #192]	; (8007104 <_dtoa_r+0x624>)
 8007042:	2200      	movs	r2, #0
 8007044:	4650      	mov	r0, sl
 8007046:	4659      	mov	r1, fp
 8007048:	f7f9 faae 	bl	80005a8 <__aeabi_dmul>
 800704c:	4b2d      	ldr	r3, [pc, #180]	; (8007104 <_dtoa_r+0x624>)
 800704e:	4682      	mov	sl, r0
 8007050:	468b      	mov	fp, r1
 8007052:	4640      	mov	r0, r8
 8007054:	4649      	mov	r1, r9
 8007056:	2200      	movs	r2, #0
 8007058:	f7f9 faa6 	bl	80005a8 <__aeabi_dmul>
 800705c:	4680      	mov	r8, r0
 800705e:	4689      	mov	r9, r1
 8007060:	e7c6      	b.n	8006ff0 <_dtoa_r+0x510>
 8007062:	4650      	mov	r0, sl
 8007064:	4659      	mov	r1, fp
 8007066:	f7f9 fa9f 	bl	80005a8 <__aeabi_dmul>
 800706a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800706c:	9d01      	ldr	r5, [sp, #4]
 800706e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007070:	4682      	mov	sl, r0
 8007072:	468b      	mov	fp, r1
 8007074:	4649      	mov	r1, r9
 8007076:	4640      	mov	r0, r8
 8007078:	f7f9 fd46 	bl	8000b08 <__aeabi_d2iz>
 800707c:	4606      	mov	r6, r0
 800707e:	f7f9 fa29 	bl	80004d4 <__aeabi_i2d>
 8007082:	3630      	adds	r6, #48	; 0x30
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	4640      	mov	r0, r8
 800708a:	4649      	mov	r1, r9
 800708c:	f7f9 f8d4 	bl	8000238 <__aeabi_dsub>
 8007090:	f805 6b01 	strb.w	r6, [r5], #1
 8007094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007096:	429d      	cmp	r5, r3
 8007098:	4680      	mov	r8, r0
 800709a:	4689      	mov	r9, r1
 800709c:	f04f 0200 	mov.w	r2, #0
 80070a0:	d124      	bne.n	80070ec <_dtoa_r+0x60c>
 80070a2:	4b1b      	ldr	r3, [pc, #108]	; (8007110 <_dtoa_r+0x630>)
 80070a4:	4650      	mov	r0, sl
 80070a6:	4659      	mov	r1, fp
 80070a8:	f7f9 f8c8 	bl	800023c <__adddf3>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4640      	mov	r0, r8
 80070b2:	4649      	mov	r1, r9
 80070b4:	f7f9 fd08 	bl	8000ac8 <__aeabi_dcmpgt>
 80070b8:	2800      	cmp	r0, #0
 80070ba:	d173      	bne.n	80071a4 <_dtoa_r+0x6c4>
 80070bc:	4652      	mov	r2, sl
 80070be:	465b      	mov	r3, fp
 80070c0:	4913      	ldr	r1, [pc, #76]	; (8007110 <_dtoa_r+0x630>)
 80070c2:	2000      	movs	r0, #0
 80070c4:	f7f9 f8b8 	bl	8000238 <__aeabi_dsub>
 80070c8:	4602      	mov	r2, r0
 80070ca:	460b      	mov	r3, r1
 80070cc:	4640      	mov	r0, r8
 80070ce:	4649      	mov	r1, r9
 80070d0:	f7f9 fcdc 	bl	8000a8c <__aeabi_dcmplt>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	f43f af35 	beq.w	8006f44 <_dtoa_r+0x464>
 80070da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80070dc:	1e6b      	subs	r3, r5, #1
 80070de:	930f      	str	r3, [sp, #60]	; 0x3c
 80070e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80070e4:	2b30      	cmp	r3, #48	; 0x30
 80070e6:	d0f8      	beq.n	80070da <_dtoa_r+0x5fa>
 80070e8:	9700      	str	r7, [sp, #0]
 80070ea:	e049      	b.n	8007180 <_dtoa_r+0x6a0>
 80070ec:	4b05      	ldr	r3, [pc, #20]	; (8007104 <_dtoa_r+0x624>)
 80070ee:	f7f9 fa5b 	bl	80005a8 <__aeabi_dmul>
 80070f2:	4680      	mov	r8, r0
 80070f4:	4689      	mov	r9, r1
 80070f6:	e7bd      	b.n	8007074 <_dtoa_r+0x594>
 80070f8:	08008d10 	.word	0x08008d10
 80070fc:	08008ce8 	.word	0x08008ce8
 8007100:	3ff00000 	.word	0x3ff00000
 8007104:	40240000 	.word	0x40240000
 8007108:	401c0000 	.word	0x401c0000
 800710c:	40140000 	.word	0x40140000
 8007110:	3fe00000 	.word	0x3fe00000
 8007114:	9d01      	ldr	r5, [sp, #4]
 8007116:	4656      	mov	r6, sl
 8007118:	465f      	mov	r7, fp
 800711a:	4642      	mov	r2, r8
 800711c:	464b      	mov	r3, r9
 800711e:	4630      	mov	r0, r6
 8007120:	4639      	mov	r1, r7
 8007122:	f7f9 fb6b 	bl	80007fc <__aeabi_ddiv>
 8007126:	f7f9 fcef 	bl	8000b08 <__aeabi_d2iz>
 800712a:	4682      	mov	sl, r0
 800712c:	f7f9 f9d2 	bl	80004d4 <__aeabi_i2d>
 8007130:	4642      	mov	r2, r8
 8007132:	464b      	mov	r3, r9
 8007134:	f7f9 fa38 	bl	80005a8 <__aeabi_dmul>
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	4630      	mov	r0, r6
 800713e:	4639      	mov	r1, r7
 8007140:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007144:	f7f9 f878 	bl	8000238 <__aeabi_dsub>
 8007148:	f805 6b01 	strb.w	r6, [r5], #1
 800714c:	9e01      	ldr	r6, [sp, #4]
 800714e:	9f03      	ldr	r7, [sp, #12]
 8007150:	1bae      	subs	r6, r5, r6
 8007152:	42b7      	cmp	r7, r6
 8007154:	4602      	mov	r2, r0
 8007156:	460b      	mov	r3, r1
 8007158:	d135      	bne.n	80071c6 <_dtoa_r+0x6e6>
 800715a:	f7f9 f86f 	bl	800023c <__adddf3>
 800715e:	4642      	mov	r2, r8
 8007160:	464b      	mov	r3, r9
 8007162:	4606      	mov	r6, r0
 8007164:	460f      	mov	r7, r1
 8007166:	f7f9 fcaf 	bl	8000ac8 <__aeabi_dcmpgt>
 800716a:	b9d0      	cbnz	r0, 80071a2 <_dtoa_r+0x6c2>
 800716c:	4642      	mov	r2, r8
 800716e:	464b      	mov	r3, r9
 8007170:	4630      	mov	r0, r6
 8007172:	4639      	mov	r1, r7
 8007174:	f7f9 fc80 	bl	8000a78 <__aeabi_dcmpeq>
 8007178:	b110      	cbz	r0, 8007180 <_dtoa_r+0x6a0>
 800717a:	f01a 0f01 	tst.w	sl, #1
 800717e:	d110      	bne.n	80071a2 <_dtoa_r+0x6c2>
 8007180:	4620      	mov	r0, r4
 8007182:	ee18 1a10 	vmov	r1, s16
 8007186:	f000 fd13 	bl	8007bb0 <_Bfree>
 800718a:	2300      	movs	r3, #0
 800718c:	9800      	ldr	r0, [sp, #0]
 800718e:	702b      	strb	r3, [r5, #0]
 8007190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007192:	3001      	adds	r0, #1
 8007194:	6018      	str	r0, [r3, #0]
 8007196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007198:	2b00      	cmp	r3, #0
 800719a:	f43f acf1 	beq.w	8006b80 <_dtoa_r+0xa0>
 800719e:	601d      	str	r5, [r3, #0]
 80071a0:	e4ee      	b.n	8006b80 <_dtoa_r+0xa0>
 80071a2:	9f00      	ldr	r7, [sp, #0]
 80071a4:	462b      	mov	r3, r5
 80071a6:	461d      	mov	r5, r3
 80071a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071ac:	2a39      	cmp	r2, #57	; 0x39
 80071ae:	d106      	bne.n	80071be <_dtoa_r+0x6de>
 80071b0:	9a01      	ldr	r2, [sp, #4]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d1f7      	bne.n	80071a6 <_dtoa_r+0x6c6>
 80071b6:	9901      	ldr	r1, [sp, #4]
 80071b8:	2230      	movs	r2, #48	; 0x30
 80071ba:	3701      	adds	r7, #1
 80071bc:	700a      	strb	r2, [r1, #0]
 80071be:	781a      	ldrb	r2, [r3, #0]
 80071c0:	3201      	adds	r2, #1
 80071c2:	701a      	strb	r2, [r3, #0]
 80071c4:	e790      	b.n	80070e8 <_dtoa_r+0x608>
 80071c6:	4ba6      	ldr	r3, [pc, #664]	; (8007460 <_dtoa_r+0x980>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	f7f9 f9ed 	bl	80005a8 <__aeabi_dmul>
 80071ce:	2200      	movs	r2, #0
 80071d0:	2300      	movs	r3, #0
 80071d2:	4606      	mov	r6, r0
 80071d4:	460f      	mov	r7, r1
 80071d6:	f7f9 fc4f 	bl	8000a78 <__aeabi_dcmpeq>
 80071da:	2800      	cmp	r0, #0
 80071dc:	d09d      	beq.n	800711a <_dtoa_r+0x63a>
 80071de:	e7cf      	b.n	8007180 <_dtoa_r+0x6a0>
 80071e0:	9a08      	ldr	r2, [sp, #32]
 80071e2:	2a00      	cmp	r2, #0
 80071e4:	f000 80d7 	beq.w	8007396 <_dtoa_r+0x8b6>
 80071e8:	9a06      	ldr	r2, [sp, #24]
 80071ea:	2a01      	cmp	r2, #1
 80071ec:	f300 80ba 	bgt.w	8007364 <_dtoa_r+0x884>
 80071f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071f2:	2a00      	cmp	r2, #0
 80071f4:	f000 80b2 	beq.w	800735c <_dtoa_r+0x87c>
 80071f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80071fc:	9e07      	ldr	r6, [sp, #28]
 80071fe:	9d04      	ldr	r5, [sp, #16]
 8007200:	9a04      	ldr	r2, [sp, #16]
 8007202:	441a      	add	r2, r3
 8007204:	9204      	str	r2, [sp, #16]
 8007206:	9a05      	ldr	r2, [sp, #20]
 8007208:	2101      	movs	r1, #1
 800720a:	441a      	add	r2, r3
 800720c:	4620      	mov	r0, r4
 800720e:	9205      	str	r2, [sp, #20]
 8007210:	f000 fd86 	bl	8007d20 <__i2b>
 8007214:	4607      	mov	r7, r0
 8007216:	2d00      	cmp	r5, #0
 8007218:	dd0c      	ble.n	8007234 <_dtoa_r+0x754>
 800721a:	9b05      	ldr	r3, [sp, #20]
 800721c:	2b00      	cmp	r3, #0
 800721e:	dd09      	ble.n	8007234 <_dtoa_r+0x754>
 8007220:	42ab      	cmp	r3, r5
 8007222:	9a04      	ldr	r2, [sp, #16]
 8007224:	bfa8      	it	ge
 8007226:	462b      	movge	r3, r5
 8007228:	1ad2      	subs	r2, r2, r3
 800722a:	9204      	str	r2, [sp, #16]
 800722c:	9a05      	ldr	r2, [sp, #20]
 800722e:	1aed      	subs	r5, r5, r3
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	9305      	str	r3, [sp, #20]
 8007234:	9b07      	ldr	r3, [sp, #28]
 8007236:	b31b      	cbz	r3, 8007280 <_dtoa_r+0x7a0>
 8007238:	9b08      	ldr	r3, [sp, #32]
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 80af 	beq.w	800739e <_dtoa_r+0x8be>
 8007240:	2e00      	cmp	r6, #0
 8007242:	dd13      	ble.n	800726c <_dtoa_r+0x78c>
 8007244:	4639      	mov	r1, r7
 8007246:	4632      	mov	r2, r6
 8007248:	4620      	mov	r0, r4
 800724a:	f000 fe29 	bl	8007ea0 <__pow5mult>
 800724e:	ee18 2a10 	vmov	r2, s16
 8007252:	4601      	mov	r1, r0
 8007254:	4607      	mov	r7, r0
 8007256:	4620      	mov	r0, r4
 8007258:	f000 fd78 	bl	8007d4c <__multiply>
 800725c:	ee18 1a10 	vmov	r1, s16
 8007260:	4680      	mov	r8, r0
 8007262:	4620      	mov	r0, r4
 8007264:	f000 fca4 	bl	8007bb0 <_Bfree>
 8007268:	ee08 8a10 	vmov	s16, r8
 800726c:	9b07      	ldr	r3, [sp, #28]
 800726e:	1b9a      	subs	r2, r3, r6
 8007270:	d006      	beq.n	8007280 <_dtoa_r+0x7a0>
 8007272:	ee18 1a10 	vmov	r1, s16
 8007276:	4620      	mov	r0, r4
 8007278:	f000 fe12 	bl	8007ea0 <__pow5mult>
 800727c:	ee08 0a10 	vmov	s16, r0
 8007280:	2101      	movs	r1, #1
 8007282:	4620      	mov	r0, r4
 8007284:	f000 fd4c 	bl	8007d20 <__i2b>
 8007288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800728a:	2b00      	cmp	r3, #0
 800728c:	4606      	mov	r6, r0
 800728e:	f340 8088 	ble.w	80073a2 <_dtoa_r+0x8c2>
 8007292:	461a      	mov	r2, r3
 8007294:	4601      	mov	r1, r0
 8007296:	4620      	mov	r0, r4
 8007298:	f000 fe02 	bl	8007ea0 <__pow5mult>
 800729c:	9b06      	ldr	r3, [sp, #24]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	4606      	mov	r6, r0
 80072a2:	f340 8081 	ble.w	80073a8 <_dtoa_r+0x8c8>
 80072a6:	f04f 0800 	mov.w	r8, #0
 80072aa:	6933      	ldr	r3, [r6, #16]
 80072ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80072b0:	6918      	ldr	r0, [r3, #16]
 80072b2:	f000 fce5 	bl	8007c80 <__hi0bits>
 80072b6:	f1c0 0020 	rsb	r0, r0, #32
 80072ba:	9b05      	ldr	r3, [sp, #20]
 80072bc:	4418      	add	r0, r3
 80072be:	f010 001f 	ands.w	r0, r0, #31
 80072c2:	f000 8092 	beq.w	80073ea <_dtoa_r+0x90a>
 80072c6:	f1c0 0320 	rsb	r3, r0, #32
 80072ca:	2b04      	cmp	r3, #4
 80072cc:	f340 808a 	ble.w	80073e4 <_dtoa_r+0x904>
 80072d0:	f1c0 001c 	rsb	r0, r0, #28
 80072d4:	9b04      	ldr	r3, [sp, #16]
 80072d6:	4403      	add	r3, r0
 80072d8:	9304      	str	r3, [sp, #16]
 80072da:	9b05      	ldr	r3, [sp, #20]
 80072dc:	4403      	add	r3, r0
 80072de:	4405      	add	r5, r0
 80072e0:	9305      	str	r3, [sp, #20]
 80072e2:	9b04      	ldr	r3, [sp, #16]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	dd07      	ble.n	80072f8 <_dtoa_r+0x818>
 80072e8:	ee18 1a10 	vmov	r1, s16
 80072ec:	461a      	mov	r2, r3
 80072ee:	4620      	mov	r0, r4
 80072f0:	f000 fe30 	bl	8007f54 <__lshift>
 80072f4:	ee08 0a10 	vmov	s16, r0
 80072f8:	9b05      	ldr	r3, [sp, #20]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	dd05      	ble.n	800730a <_dtoa_r+0x82a>
 80072fe:	4631      	mov	r1, r6
 8007300:	461a      	mov	r2, r3
 8007302:	4620      	mov	r0, r4
 8007304:	f000 fe26 	bl	8007f54 <__lshift>
 8007308:	4606      	mov	r6, r0
 800730a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800730c:	2b00      	cmp	r3, #0
 800730e:	d06e      	beq.n	80073ee <_dtoa_r+0x90e>
 8007310:	ee18 0a10 	vmov	r0, s16
 8007314:	4631      	mov	r1, r6
 8007316:	f000 fe8d 	bl	8008034 <__mcmp>
 800731a:	2800      	cmp	r0, #0
 800731c:	da67      	bge.n	80073ee <_dtoa_r+0x90e>
 800731e:	9b00      	ldr	r3, [sp, #0]
 8007320:	3b01      	subs	r3, #1
 8007322:	ee18 1a10 	vmov	r1, s16
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	220a      	movs	r2, #10
 800732a:	2300      	movs	r3, #0
 800732c:	4620      	mov	r0, r4
 800732e:	f000 fc61 	bl	8007bf4 <__multadd>
 8007332:	9b08      	ldr	r3, [sp, #32]
 8007334:	ee08 0a10 	vmov	s16, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 81b1 	beq.w	80076a0 <_dtoa_r+0xbc0>
 800733e:	2300      	movs	r3, #0
 8007340:	4639      	mov	r1, r7
 8007342:	220a      	movs	r2, #10
 8007344:	4620      	mov	r0, r4
 8007346:	f000 fc55 	bl	8007bf4 <__multadd>
 800734a:	9b02      	ldr	r3, [sp, #8]
 800734c:	2b00      	cmp	r3, #0
 800734e:	4607      	mov	r7, r0
 8007350:	f300 808e 	bgt.w	8007470 <_dtoa_r+0x990>
 8007354:	9b06      	ldr	r3, [sp, #24]
 8007356:	2b02      	cmp	r3, #2
 8007358:	dc51      	bgt.n	80073fe <_dtoa_r+0x91e>
 800735a:	e089      	b.n	8007470 <_dtoa_r+0x990>
 800735c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800735e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007362:	e74b      	b.n	80071fc <_dtoa_r+0x71c>
 8007364:	9b03      	ldr	r3, [sp, #12]
 8007366:	1e5e      	subs	r6, r3, #1
 8007368:	9b07      	ldr	r3, [sp, #28]
 800736a:	42b3      	cmp	r3, r6
 800736c:	bfbf      	itttt	lt
 800736e:	9b07      	ldrlt	r3, [sp, #28]
 8007370:	9607      	strlt	r6, [sp, #28]
 8007372:	1af2      	sublt	r2, r6, r3
 8007374:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007376:	bfb6      	itet	lt
 8007378:	189b      	addlt	r3, r3, r2
 800737a:	1b9e      	subge	r6, r3, r6
 800737c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800737e:	9b03      	ldr	r3, [sp, #12]
 8007380:	bfb8      	it	lt
 8007382:	2600      	movlt	r6, #0
 8007384:	2b00      	cmp	r3, #0
 8007386:	bfb7      	itett	lt
 8007388:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800738c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007390:	1a9d      	sublt	r5, r3, r2
 8007392:	2300      	movlt	r3, #0
 8007394:	e734      	b.n	8007200 <_dtoa_r+0x720>
 8007396:	9e07      	ldr	r6, [sp, #28]
 8007398:	9d04      	ldr	r5, [sp, #16]
 800739a:	9f08      	ldr	r7, [sp, #32]
 800739c:	e73b      	b.n	8007216 <_dtoa_r+0x736>
 800739e:	9a07      	ldr	r2, [sp, #28]
 80073a0:	e767      	b.n	8007272 <_dtoa_r+0x792>
 80073a2:	9b06      	ldr	r3, [sp, #24]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	dc18      	bgt.n	80073da <_dtoa_r+0x8fa>
 80073a8:	f1ba 0f00 	cmp.w	sl, #0
 80073ac:	d115      	bne.n	80073da <_dtoa_r+0x8fa>
 80073ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073b2:	b993      	cbnz	r3, 80073da <_dtoa_r+0x8fa>
 80073b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80073b8:	0d1b      	lsrs	r3, r3, #20
 80073ba:	051b      	lsls	r3, r3, #20
 80073bc:	b183      	cbz	r3, 80073e0 <_dtoa_r+0x900>
 80073be:	9b04      	ldr	r3, [sp, #16]
 80073c0:	3301      	adds	r3, #1
 80073c2:	9304      	str	r3, [sp, #16]
 80073c4:	9b05      	ldr	r3, [sp, #20]
 80073c6:	3301      	adds	r3, #1
 80073c8:	9305      	str	r3, [sp, #20]
 80073ca:	f04f 0801 	mov.w	r8, #1
 80073ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f47f af6a 	bne.w	80072aa <_dtoa_r+0x7ca>
 80073d6:	2001      	movs	r0, #1
 80073d8:	e76f      	b.n	80072ba <_dtoa_r+0x7da>
 80073da:	f04f 0800 	mov.w	r8, #0
 80073de:	e7f6      	b.n	80073ce <_dtoa_r+0x8ee>
 80073e0:	4698      	mov	r8, r3
 80073e2:	e7f4      	b.n	80073ce <_dtoa_r+0x8ee>
 80073e4:	f43f af7d 	beq.w	80072e2 <_dtoa_r+0x802>
 80073e8:	4618      	mov	r0, r3
 80073ea:	301c      	adds	r0, #28
 80073ec:	e772      	b.n	80072d4 <_dtoa_r+0x7f4>
 80073ee:	9b03      	ldr	r3, [sp, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	dc37      	bgt.n	8007464 <_dtoa_r+0x984>
 80073f4:	9b06      	ldr	r3, [sp, #24]
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	dd34      	ble.n	8007464 <_dtoa_r+0x984>
 80073fa:	9b03      	ldr	r3, [sp, #12]
 80073fc:	9302      	str	r3, [sp, #8]
 80073fe:	9b02      	ldr	r3, [sp, #8]
 8007400:	b96b      	cbnz	r3, 800741e <_dtoa_r+0x93e>
 8007402:	4631      	mov	r1, r6
 8007404:	2205      	movs	r2, #5
 8007406:	4620      	mov	r0, r4
 8007408:	f000 fbf4 	bl	8007bf4 <__multadd>
 800740c:	4601      	mov	r1, r0
 800740e:	4606      	mov	r6, r0
 8007410:	ee18 0a10 	vmov	r0, s16
 8007414:	f000 fe0e 	bl	8008034 <__mcmp>
 8007418:	2800      	cmp	r0, #0
 800741a:	f73f adbb 	bgt.w	8006f94 <_dtoa_r+0x4b4>
 800741e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007420:	9d01      	ldr	r5, [sp, #4]
 8007422:	43db      	mvns	r3, r3
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	f04f 0800 	mov.w	r8, #0
 800742a:	4631      	mov	r1, r6
 800742c:	4620      	mov	r0, r4
 800742e:	f000 fbbf 	bl	8007bb0 <_Bfree>
 8007432:	2f00      	cmp	r7, #0
 8007434:	f43f aea4 	beq.w	8007180 <_dtoa_r+0x6a0>
 8007438:	f1b8 0f00 	cmp.w	r8, #0
 800743c:	d005      	beq.n	800744a <_dtoa_r+0x96a>
 800743e:	45b8      	cmp	r8, r7
 8007440:	d003      	beq.n	800744a <_dtoa_r+0x96a>
 8007442:	4641      	mov	r1, r8
 8007444:	4620      	mov	r0, r4
 8007446:	f000 fbb3 	bl	8007bb0 <_Bfree>
 800744a:	4639      	mov	r1, r7
 800744c:	4620      	mov	r0, r4
 800744e:	f000 fbaf 	bl	8007bb0 <_Bfree>
 8007452:	e695      	b.n	8007180 <_dtoa_r+0x6a0>
 8007454:	2600      	movs	r6, #0
 8007456:	4637      	mov	r7, r6
 8007458:	e7e1      	b.n	800741e <_dtoa_r+0x93e>
 800745a:	9700      	str	r7, [sp, #0]
 800745c:	4637      	mov	r7, r6
 800745e:	e599      	b.n	8006f94 <_dtoa_r+0x4b4>
 8007460:	40240000 	.word	0x40240000
 8007464:	9b08      	ldr	r3, [sp, #32]
 8007466:	2b00      	cmp	r3, #0
 8007468:	f000 80ca 	beq.w	8007600 <_dtoa_r+0xb20>
 800746c:	9b03      	ldr	r3, [sp, #12]
 800746e:	9302      	str	r3, [sp, #8]
 8007470:	2d00      	cmp	r5, #0
 8007472:	dd05      	ble.n	8007480 <_dtoa_r+0x9a0>
 8007474:	4639      	mov	r1, r7
 8007476:	462a      	mov	r2, r5
 8007478:	4620      	mov	r0, r4
 800747a:	f000 fd6b 	bl	8007f54 <__lshift>
 800747e:	4607      	mov	r7, r0
 8007480:	f1b8 0f00 	cmp.w	r8, #0
 8007484:	d05b      	beq.n	800753e <_dtoa_r+0xa5e>
 8007486:	6879      	ldr	r1, [r7, #4]
 8007488:	4620      	mov	r0, r4
 800748a:	f000 fb51 	bl	8007b30 <_Balloc>
 800748e:	4605      	mov	r5, r0
 8007490:	b928      	cbnz	r0, 800749e <_dtoa_r+0x9be>
 8007492:	4b87      	ldr	r3, [pc, #540]	; (80076b0 <_dtoa_r+0xbd0>)
 8007494:	4602      	mov	r2, r0
 8007496:	f240 21ea 	movw	r1, #746	; 0x2ea
 800749a:	f7ff bb3b 	b.w	8006b14 <_dtoa_r+0x34>
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	3202      	adds	r2, #2
 80074a2:	0092      	lsls	r2, r2, #2
 80074a4:	f107 010c 	add.w	r1, r7, #12
 80074a8:	300c      	adds	r0, #12
 80074aa:	f000 fb33 	bl	8007b14 <memcpy>
 80074ae:	2201      	movs	r2, #1
 80074b0:	4629      	mov	r1, r5
 80074b2:	4620      	mov	r0, r4
 80074b4:	f000 fd4e 	bl	8007f54 <__lshift>
 80074b8:	9b01      	ldr	r3, [sp, #4]
 80074ba:	f103 0901 	add.w	r9, r3, #1
 80074be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80074c2:	4413      	add	r3, r2
 80074c4:	9305      	str	r3, [sp, #20]
 80074c6:	f00a 0301 	and.w	r3, sl, #1
 80074ca:	46b8      	mov	r8, r7
 80074cc:	9304      	str	r3, [sp, #16]
 80074ce:	4607      	mov	r7, r0
 80074d0:	4631      	mov	r1, r6
 80074d2:	ee18 0a10 	vmov	r0, s16
 80074d6:	f7ff fa77 	bl	80069c8 <quorem>
 80074da:	4641      	mov	r1, r8
 80074dc:	9002      	str	r0, [sp, #8]
 80074de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80074e2:	ee18 0a10 	vmov	r0, s16
 80074e6:	f000 fda5 	bl	8008034 <__mcmp>
 80074ea:	463a      	mov	r2, r7
 80074ec:	9003      	str	r0, [sp, #12]
 80074ee:	4631      	mov	r1, r6
 80074f0:	4620      	mov	r0, r4
 80074f2:	f000 fdbb 	bl	800806c <__mdiff>
 80074f6:	68c2      	ldr	r2, [r0, #12]
 80074f8:	f109 3bff 	add.w	fp, r9, #4294967295
 80074fc:	4605      	mov	r5, r0
 80074fe:	bb02      	cbnz	r2, 8007542 <_dtoa_r+0xa62>
 8007500:	4601      	mov	r1, r0
 8007502:	ee18 0a10 	vmov	r0, s16
 8007506:	f000 fd95 	bl	8008034 <__mcmp>
 800750a:	4602      	mov	r2, r0
 800750c:	4629      	mov	r1, r5
 800750e:	4620      	mov	r0, r4
 8007510:	9207      	str	r2, [sp, #28]
 8007512:	f000 fb4d 	bl	8007bb0 <_Bfree>
 8007516:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800751a:	ea43 0102 	orr.w	r1, r3, r2
 800751e:	9b04      	ldr	r3, [sp, #16]
 8007520:	430b      	orrs	r3, r1
 8007522:	464d      	mov	r5, r9
 8007524:	d10f      	bne.n	8007546 <_dtoa_r+0xa66>
 8007526:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800752a:	d02a      	beq.n	8007582 <_dtoa_r+0xaa2>
 800752c:	9b03      	ldr	r3, [sp, #12]
 800752e:	2b00      	cmp	r3, #0
 8007530:	dd02      	ble.n	8007538 <_dtoa_r+0xa58>
 8007532:	9b02      	ldr	r3, [sp, #8]
 8007534:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007538:	f88b a000 	strb.w	sl, [fp]
 800753c:	e775      	b.n	800742a <_dtoa_r+0x94a>
 800753e:	4638      	mov	r0, r7
 8007540:	e7ba      	b.n	80074b8 <_dtoa_r+0x9d8>
 8007542:	2201      	movs	r2, #1
 8007544:	e7e2      	b.n	800750c <_dtoa_r+0xa2c>
 8007546:	9b03      	ldr	r3, [sp, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	db04      	blt.n	8007556 <_dtoa_r+0xa76>
 800754c:	9906      	ldr	r1, [sp, #24]
 800754e:	430b      	orrs	r3, r1
 8007550:	9904      	ldr	r1, [sp, #16]
 8007552:	430b      	orrs	r3, r1
 8007554:	d122      	bne.n	800759c <_dtoa_r+0xabc>
 8007556:	2a00      	cmp	r2, #0
 8007558:	ddee      	ble.n	8007538 <_dtoa_r+0xa58>
 800755a:	ee18 1a10 	vmov	r1, s16
 800755e:	2201      	movs	r2, #1
 8007560:	4620      	mov	r0, r4
 8007562:	f000 fcf7 	bl	8007f54 <__lshift>
 8007566:	4631      	mov	r1, r6
 8007568:	ee08 0a10 	vmov	s16, r0
 800756c:	f000 fd62 	bl	8008034 <__mcmp>
 8007570:	2800      	cmp	r0, #0
 8007572:	dc03      	bgt.n	800757c <_dtoa_r+0xa9c>
 8007574:	d1e0      	bne.n	8007538 <_dtoa_r+0xa58>
 8007576:	f01a 0f01 	tst.w	sl, #1
 800757a:	d0dd      	beq.n	8007538 <_dtoa_r+0xa58>
 800757c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007580:	d1d7      	bne.n	8007532 <_dtoa_r+0xa52>
 8007582:	2339      	movs	r3, #57	; 0x39
 8007584:	f88b 3000 	strb.w	r3, [fp]
 8007588:	462b      	mov	r3, r5
 800758a:	461d      	mov	r5, r3
 800758c:	3b01      	subs	r3, #1
 800758e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007592:	2a39      	cmp	r2, #57	; 0x39
 8007594:	d071      	beq.n	800767a <_dtoa_r+0xb9a>
 8007596:	3201      	adds	r2, #1
 8007598:	701a      	strb	r2, [r3, #0]
 800759a:	e746      	b.n	800742a <_dtoa_r+0x94a>
 800759c:	2a00      	cmp	r2, #0
 800759e:	dd07      	ble.n	80075b0 <_dtoa_r+0xad0>
 80075a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80075a4:	d0ed      	beq.n	8007582 <_dtoa_r+0xaa2>
 80075a6:	f10a 0301 	add.w	r3, sl, #1
 80075aa:	f88b 3000 	strb.w	r3, [fp]
 80075ae:	e73c      	b.n	800742a <_dtoa_r+0x94a>
 80075b0:	9b05      	ldr	r3, [sp, #20]
 80075b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80075b6:	4599      	cmp	r9, r3
 80075b8:	d047      	beq.n	800764a <_dtoa_r+0xb6a>
 80075ba:	ee18 1a10 	vmov	r1, s16
 80075be:	2300      	movs	r3, #0
 80075c0:	220a      	movs	r2, #10
 80075c2:	4620      	mov	r0, r4
 80075c4:	f000 fb16 	bl	8007bf4 <__multadd>
 80075c8:	45b8      	cmp	r8, r7
 80075ca:	ee08 0a10 	vmov	s16, r0
 80075ce:	f04f 0300 	mov.w	r3, #0
 80075d2:	f04f 020a 	mov.w	r2, #10
 80075d6:	4641      	mov	r1, r8
 80075d8:	4620      	mov	r0, r4
 80075da:	d106      	bne.n	80075ea <_dtoa_r+0xb0a>
 80075dc:	f000 fb0a 	bl	8007bf4 <__multadd>
 80075e0:	4680      	mov	r8, r0
 80075e2:	4607      	mov	r7, r0
 80075e4:	f109 0901 	add.w	r9, r9, #1
 80075e8:	e772      	b.n	80074d0 <_dtoa_r+0x9f0>
 80075ea:	f000 fb03 	bl	8007bf4 <__multadd>
 80075ee:	4639      	mov	r1, r7
 80075f0:	4680      	mov	r8, r0
 80075f2:	2300      	movs	r3, #0
 80075f4:	220a      	movs	r2, #10
 80075f6:	4620      	mov	r0, r4
 80075f8:	f000 fafc 	bl	8007bf4 <__multadd>
 80075fc:	4607      	mov	r7, r0
 80075fe:	e7f1      	b.n	80075e4 <_dtoa_r+0xb04>
 8007600:	9b03      	ldr	r3, [sp, #12]
 8007602:	9302      	str	r3, [sp, #8]
 8007604:	9d01      	ldr	r5, [sp, #4]
 8007606:	ee18 0a10 	vmov	r0, s16
 800760a:	4631      	mov	r1, r6
 800760c:	f7ff f9dc 	bl	80069c8 <quorem>
 8007610:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007614:	9b01      	ldr	r3, [sp, #4]
 8007616:	f805 ab01 	strb.w	sl, [r5], #1
 800761a:	1aea      	subs	r2, r5, r3
 800761c:	9b02      	ldr	r3, [sp, #8]
 800761e:	4293      	cmp	r3, r2
 8007620:	dd09      	ble.n	8007636 <_dtoa_r+0xb56>
 8007622:	ee18 1a10 	vmov	r1, s16
 8007626:	2300      	movs	r3, #0
 8007628:	220a      	movs	r2, #10
 800762a:	4620      	mov	r0, r4
 800762c:	f000 fae2 	bl	8007bf4 <__multadd>
 8007630:	ee08 0a10 	vmov	s16, r0
 8007634:	e7e7      	b.n	8007606 <_dtoa_r+0xb26>
 8007636:	9b02      	ldr	r3, [sp, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	bfc8      	it	gt
 800763c:	461d      	movgt	r5, r3
 800763e:	9b01      	ldr	r3, [sp, #4]
 8007640:	bfd8      	it	le
 8007642:	2501      	movle	r5, #1
 8007644:	441d      	add	r5, r3
 8007646:	f04f 0800 	mov.w	r8, #0
 800764a:	ee18 1a10 	vmov	r1, s16
 800764e:	2201      	movs	r2, #1
 8007650:	4620      	mov	r0, r4
 8007652:	f000 fc7f 	bl	8007f54 <__lshift>
 8007656:	4631      	mov	r1, r6
 8007658:	ee08 0a10 	vmov	s16, r0
 800765c:	f000 fcea 	bl	8008034 <__mcmp>
 8007660:	2800      	cmp	r0, #0
 8007662:	dc91      	bgt.n	8007588 <_dtoa_r+0xaa8>
 8007664:	d102      	bne.n	800766c <_dtoa_r+0xb8c>
 8007666:	f01a 0f01 	tst.w	sl, #1
 800766a:	d18d      	bne.n	8007588 <_dtoa_r+0xaa8>
 800766c:	462b      	mov	r3, r5
 800766e:	461d      	mov	r5, r3
 8007670:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007674:	2a30      	cmp	r2, #48	; 0x30
 8007676:	d0fa      	beq.n	800766e <_dtoa_r+0xb8e>
 8007678:	e6d7      	b.n	800742a <_dtoa_r+0x94a>
 800767a:	9a01      	ldr	r2, [sp, #4]
 800767c:	429a      	cmp	r2, r3
 800767e:	d184      	bne.n	800758a <_dtoa_r+0xaaa>
 8007680:	9b00      	ldr	r3, [sp, #0]
 8007682:	3301      	adds	r3, #1
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	2331      	movs	r3, #49	; 0x31
 8007688:	7013      	strb	r3, [r2, #0]
 800768a:	e6ce      	b.n	800742a <_dtoa_r+0x94a>
 800768c:	4b09      	ldr	r3, [pc, #36]	; (80076b4 <_dtoa_r+0xbd4>)
 800768e:	f7ff ba95 	b.w	8006bbc <_dtoa_r+0xdc>
 8007692:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007694:	2b00      	cmp	r3, #0
 8007696:	f47f aa6e 	bne.w	8006b76 <_dtoa_r+0x96>
 800769a:	4b07      	ldr	r3, [pc, #28]	; (80076b8 <_dtoa_r+0xbd8>)
 800769c:	f7ff ba8e 	b.w	8006bbc <_dtoa_r+0xdc>
 80076a0:	9b02      	ldr	r3, [sp, #8]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	dcae      	bgt.n	8007604 <_dtoa_r+0xb24>
 80076a6:	9b06      	ldr	r3, [sp, #24]
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	f73f aea8 	bgt.w	80073fe <_dtoa_r+0x91e>
 80076ae:	e7a9      	b.n	8007604 <_dtoa_r+0xb24>
 80076b0:	08008c17 	.word	0x08008c17
 80076b4:	08008b74 	.word	0x08008b74
 80076b8:	08008b98 	.word	0x08008b98

080076bc <__sflush_r>:
 80076bc:	898a      	ldrh	r2, [r1, #12]
 80076be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076c2:	4605      	mov	r5, r0
 80076c4:	0710      	lsls	r0, r2, #28
 80076c6:	460c      	mov	r4, r1
 80076c8:	d458      	bmi.n	800777c <__sflush_r+0xc0>
 80076ca:	684b      	ldr	r3, [r1, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	dc05      	bgt.n	80076dc <__sflush_r+0x20>
 80076d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	dc02      	bgt.n	80076dc <__sflush_r+0x20>
 80076d6:	2000      	movs	r0, #0
 80076d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076de:	2e00      	cmp	r6, #0
 80076e0:	d0f9      	beq.n	80076d6 <__sflush_r+0x1a>
 80076e2:	2300      	movs	r3, #0
 80076e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076e8:	682f      	ldr	r7, [r5, #0]
 80076ea:	602b      	str	r3, [r5, #0]
 80076ec:	d032      	beq.n	8007754 <__sflush_r+0x98>
 80076ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076f0:	89a3      	ldrh	r3, [r4, #12]
 80076f2:	075a      	lsls	r2, r3, #29
 80076f4:	d505      	bpl.n	8007702 <__sflush_r+0x46>
 80076f6:	6863      	ldr	r3, [r4, #4]
 80076f8:	1ac0      	subs	r0, r0, r3
 80076fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076fc:	b10b      	cbz	r3, 8007702 <__sflush_r+0x46>
 80076fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007700:	1ac0      	subs	r0, r0, r3
 8007702:	2300      	movs	r3, #0
 8007704:	4602      	mov	r2, r0
 8007706:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007708:	6a21      	ldr	r1, [r4, #32]
 800770a:	4628      	mov	r0, r5
 800770c:	47b0      	blx	r6
 800770e:	1c43      	adds	r3, r0, #1
 8007710:	89a3      	ldrh	r3, [r4, #12]
 8007712:	d106      	bne.n	8007722 <__sflush_r+0x66>
 8007714:	6829      	ldr	r1, [r5, #0]
 8007716:	291d      	cmp	r1, #29
 8007718:	d82c      	bhi.n	8007774 <__sflush_r+0xb8>
 800771a:	4a2a      	ldr	r2, [pc, #168]	; (80077c4 <__sflush_r+0x108>)
 800771c:	40ca      	lsrs	r2, r1
 800771e:	07d6      	lsls	r6, r2, #31
 8007720:	d528      	bpl.n	8007774 <__sflush_r+0xb8>
 8007722:	2200      	movs	r2, #0
 8007724:	6062      	str	r2, [r4, #4]
 8007726:	04d9      	lsls	r1, r3, #19
 8007728:	6922      	ldr	r2, [r4, #16]
 800772a:	6022      	str	r2, [r4, #0]
 800772c:	d504      	bpl.n	8007738 <__sflush_r+0x7c>
 800772e:	1c42      	adds	r2, r0, #1
 8007730:	d101      	bne.n	8007736 <__sflush_r+0x7a>
 8007732:	682b      	ldr	r3, [r5, #0]
 8007734:	b903      	cbnz	r3, 8007738 <__sflush_r+0x7c>
 8007736:	6560      	str	r0, [r4, #84]	; 0x54
 8007738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800773a:	602f      	str	r7, [r5, #0]
 800773c:	2900      	cmp	r1, #0
 800773e:	d0ca      	beq.n	80076d6 <__sflush_r+0x1a>
 8007740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007744:	4299      	cmp	r1, r3
 8007746:	d002      	beq.n	800774e <__sflush_r+0x92>
 8007748:	4628      	mov	r0, r5
 800774a:	f000 fd8b 	bl	8008264 <_free_r>
 800774e:	2000      	movs	r0, #0
 8007750:	6360      	str	r0, [r4, #52]	; 0x34
 8007752:	e7c1      	b.n	80076d8 <__sflush_r+0x1c>
 8007754:	6a21      	ldr	r1, [r4, #32]
 8007756:	2301      	movs	r3, #1
 8007758:	4628      	mov	r0, r5
 800775a:	47b0      	blx	r6
 800775c:	1c41      	adds	r1, r0, #1
 800775e:	d1c7      	bne.n	80076f0 <__sflush_r+0x34>
 8007760:	682b      	ldr	r3, [r5, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d0c4      	beq.n	80076f0 <__sflush_r+0x34>
 8007766:	2b1d      	cmp	r3, #29
 8007768:	d001      	beq.n	800776e <__sflush_r+0xb2>
 800776a:	2b16      	cmp	r3, #22
 800776c:	d101      	bne.n	8007772 <__sflush_r+0xb6>
 800776e:	602f      	str	r7, [r5, #0]
 8007770:	e7b1      	b.n	80076d6 <__sflush_r+0x1a>
 8007772:	89a3      	ldrh	r3, [r4, #12]
 8007774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007778:	81a3      	strh	r3, [r4, #12]
 800777a:	e7ad      	b.n	80076d8 <__sflush_r+0x1c>
 800777c:	690f      	ldr	r7, [r1, #16]
 800777e:	2f00      	cmp	r7, #0
 8007780:	d0a9      	beq.n	80076d6 <__sflush_r+0x1a>
 8007782:	0793      	lsls	r3, r2, #30
 8007784:	680e      	ldr	r6, [r1, #0]
 8007786:	bf08      	it	eq
 8007788:	694b      	ldreq	r3, [r1, #20]
 800778a:	600f      	str	r7, [r1, #0]
 800778c:	bf18      	it	ne
 800778e:	2300      	movne	r3, #0
 8007790:	eba6 0807 	sub.w	r8, r6, r7
 8007794:	608b      	str	r3, [r1, #8]
 8007796:	f1b8 0f00 	cmp.w	r8, #0
 800779a:	dd9c      	ble.n	80076d6 <__sflush_r+0x1a>
 800779c:	6a21      	ldr	r1, [r4, #32]
 800779e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077a0:	4643      	mov	r3, r8
 80077a2:	463a      	mov	r2, r7
 80077a4:	4628      	mov	r0, r5
 80077a6:	47b0      	blx	r6
 80077a8:	2800      	cmp	r0, #0
 80077aa:	dc06      	bgt.n	80077ba <__sflush_r+0xfe>
 80077ac:	89a3      	ldrh	r3, [r4, #12]
 80077ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077b2:	81a3      	strh	r3, [r4, #12]
 80077b4:	f04f 30ff 	mov.w	r0, #4294967295
 80077b8:	e78e      	b.n	80076d8 <__sflush_r+0x1c>
 80077ba:	4407      	add	r7, r0
 80077bc:	eba8 0800 	sub.w	r8, r8, r0
 80077c0:	e7e9      	b.n	8007796 <__sflush_r+0xda>
 80077c2:	bf00      	nop
 80077c4:	20400001 	.word	0x20400001

080077c8 <_fflush_r>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	690b      	ldr	r3, [r1, #16]
 80077cc:	4605      	mov	r5, r0
 80077ce:	460c      	mov	r4, r1
 80077d0:	b913      	cbnz	r3, 80077d8 <_fflush_r+0x10>
 80077d2:	2500      	movs	r5, #0
 80077d4:	4628      	mov	r0, r5
 80077d6:	bd38      	pop	{r3, r4, r5, pc}
 80077d8:	b118      	cbz	r0, 80077e2 <_fflush_r+0x1a>
 80077da:	6983      	ldr	r3, [r0, #24]
 80077dc:	b90b      	cbnz	r3, 80077e2 <_fflush_r+0x1a>
 80077de:	f000 f887 	bl	80078f0 <__sinit>
 80077e2:	4b14      	ldr	r3, [pc, #80]	; (8007834 <_fflush_r+0x6c>)
 80077e4:	429c      	cmp	r4, r3
 80077e6:	d11b      	bne.n	8007820 <_fflush_r+0x58>
 80077e8:	686c      	ldr	r4, [r5, #4]
 80077ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d0ef      	beq.n	80077d2 <_fflush_r+0xa>
 80077f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077f4:	07d0      	lsls	r0, r2, #31
 80077f6:	d404      	bmi.n	8007802 <_fflush_r+0x3a>
 80077f8:	0599      	lsls	r1, r3, #22
 80077fa:	d402      	bmi.n	8007802 <_fflush_r+0x3a>
 80077fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077fe:	f000 f91a 	bl	8007a36 <__retarget_lock_acquire_recursive>
 8007802:	4628      	mov	r0, r5
 8007804:	4621      	mov	r1, r4
 8007806:	f7ff ff59 	bl	80076bc <__sflush_r>
 800780a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800780c:	07da      	lsls	r2, r3, #31
 800780e:	4605      	mov	r5, r0
 8007810:	d4e0      	bmi.n	80077d4 <_fflush_r+0xc>
 8007812:	89a3      	ldrh	r3, [r4, #12]
 8007814:	059b      	lsls	r3, r3, #22
 8007816:	d4dd      	bmi.n	80077d4 <_fflush_r+0xc>
 8007818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800781a:	f000 f90d 	bl	8007a38 <__retarget_lock_release_recursive>
 800781e:	e7d9      	b.n	80077d4 <_fflush_r+0xc>
 8007820:	4b05      	ldr	r3, [pc, #20]	; (8007838 <_fflush_r+0x70>)
 8007822:	429c      	cmp	r4, r3
 8007824:	d101      	bne.n	800782a <_fflush_r+0x62>
 8007826:	68ac      	ldr	r4, [r5, #8]
 8007828:	e7df      	b.n	80077ea <_fflush_r+0x22>
 800782a:	4b04      	ldr	r3, [pc, #16]	; (800783c <_fflush_r+0x74>)
 800782c:	429c      	cmp	r4, r3
 800782e:	bf08      	it	eq
 8007830:	68ec      	ldreq	r4, [r5, #12]
 8007832:	e7da      	b.n	80077ea <_fflush_r+0x22>
 8007834:	08008c48 	.word	0x08008c48
 8007838:	08008c68 	.word	0x08008c68
 800783c:	08008c28 	.word	0x08008c28

08007840 <std>:
 8007840:	2300      	movs	r3, #0
 8007842:	b510      	push	{r4, lr}
 8007844:	4604      	mov	r4, r0
 8007846:	e9c0 3300 	strd	r3, r3, [r0]
 800784a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800784e:	6083      	str	r3, [r0, #8]
 8007850:	8181      	strh	r1, [r0, #12]
 8007852:	6643      	str	r3, [r0, #100]	; 0x64
 8007854:	81c2      	strh	r2, [r0, #14]
 8007856:	6183      	str	r3, [r0, #24]
 8007858:	4619      	mov	r1, r3
 800785a:	2208      	movs	r2, #8
 800785c:	305c      	adds	r0, #92	; 0x5c
 800785e:	f7fe faf3 	bl	8005e48 <memset>
 8007862:	4b05      	ldr	r3, [pc, #20]	; (8007878 <std+0x38>)
 8007864:	6263      	str	r3, [r4, #36]	; 0x24
 8007866:	4b05      	ldr	r3, [pc, #20]	; (800787c <std+0x3c>)
 8007868:	62a3      	str	r3, [r4, #40]	; 0x28
 800786a:	4b05      	ldr	r3, [pc, #20]	; (8007880 <std+0x40>)
 800786c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800786e:	4b05      	ldr	r3, [pc, #20]	; (8007884 <std+0x44>)
 8007870:	6224      	str	r4, [r4, #32]
 8007872:	6323      	str	r3, [r4, #48]	; 0x30
 8007874:	bd10      	pop	{r4, pc}
 8007876:	bf00      	nop
 8007878:	080086f9 	.word	0x080086f9
 800787c:	0800871b 	.word	0x0800871b
 8007880:	08008753 	.word	0x08008753
 8007884:	08008777 	.word	0x08008777

08007888 <_cleanup_r>:
 8007888:	4901      	ldr	r1, [pc, #4]	; (8007890 <_cleanup_r+0x8>)
 800788a:	f000 b8af 	b.w	80079ec <_fwalk_reent>
 800788e:	bf00      	nop
 8007890:	080077c9 	.word	0x080077c9

08007894 <__sfmoreglue>:
 8007894:	b570      	push	{r4, r5, r6, lr}
 8007896:	2268      	movs	r2, #104	; 0x68
 8007898:	1e4d      	subs	r5, r1, #1
 800789a:	4355      	muls	r5, r2
 800789c:	460e      	mov	r6, r1
 800789e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078a2:	f000 fd4b 	bl	800833c <_malloc_r>
 80078a6:	4604      	mov	r4, r0
 80078a8:	b140      	cbz	r0, 80078bc <__sfmoreglue+0x28>
 80078aa:	2100      	movs	r1, #0
 80078ac:	e9c0 1600 	strd	r1, r6, [r0]
 80078b0:	300c      	adds	r0, #12
 80078b2:	60a0      	str	r0, [r4, #8]
 80078b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078b8:	f7fe fac6 	bl	8005e48 <memset>
 80078bc:	4620      	mov	r0, r4
 80078be:	bd70      	pop	{r4, r5, r6, pc}

080078c0 <__sfp_lock_acquire>:
 80078c0:	4801      	ldr	r0, [pc, #4]	; (80078c8 <__sfp_lock_acquire+0x8>)
 80078c2:	f000 b8b8 	b.w	8007a36 <__retarget_lock_acquire_recursive>
 80078c6:	bf00      	nop
 80078c8:	20000665 	.word	0x20000665

080078cc <__sfp_lock_release>:
 80078cc:	4801      	ldr	r0, [pc, #4]	; (80078d4 <__sfp_lock_release+0x8>)
 80078ce:	f000 b8b3 	b.w	8007a38 <__retarget_lock_release_recursive>
 80078d2:	bf00      	nop
 80078d4:	20000665 	.word	0x20000665

080078d8 <__sinit_lock_acquire>:
 80078d8:	4801      	ldr	r0, [pc, #4]	; (80078e0 <__sinit_lock_acquire+0x8>)
 80078da:	f000 b8ac 	b.w	8007a36 <__retarget_lock_acquire_recursive>
 80078de:	bf00      	nop
 80078e0:	20000666 	.word	0x20000666

080078e4 <__sinit_lock_release>:
 80078e4:	4801      	ldr	r0, [pc, #4]	; (80078ec <__sinit_lock_release+0x8>)
 80078e6:	f000 b8a7 	b.w	8007a38 <__retarget_lock_release_recursive>
 80078ea:	bf00      	nop
 80078ec:	20000666 	.word	0x20000666

080078f0 <__sinit>:
 80078f0:	b510      	push	{r4, lr}
 80078f2:	4604      	mov	r4, r0
 80078f4:	f7ff fff0 	bl	80078d8 <__sinit_lock_acquire>
 80078f8:	69a3      	ldr	r3, [r4, #24]
 80078fa:	b11b      	cbz	r3, 8007904 <__sinit+0x14>
 80078fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007900:	f7ff bff0 	b.w	80078e4 <__sinit_lock_release>
 8007904:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007908:	6523      	str	r3, [r4, #80]	; 0x50
 800790a:	4b13      	ldr	r3, [pc, #76]	; (8007958 <__sinit+0x68>)
 800790c:	4a13      	ldr	r2, [pc, #76]	; (800795c <__sinit+0x6c>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	62a2      	str	r2, [r4, #40]	; 0x28
 8007912:	42a3      	cmp	r3, r4
 8007914:	bf04      	itt	eq
 8007916:	2301      	moveq	r3, #1
 8007918:	61a3      	streq	r3, [r4, #24]
 800791a:	4620      	mov	r0, r4
 800791c:	f000 f820 	bl	8007960 <__sfp>
 8007920:	6060      	str	r0, [r4, #4]
 8007922:	4620      	mov	r0, r4
 8007924:	f000 f81c 	bl	8007960 <__sfp>
 8007928:	60a0      	str	r0, [r4, #8]
 800792a:	4620      	mov	r0, r4
 800792c:	f000 f818 	bl	8007960 <__sfp>
 8007930:	2200      	movs	r2, #0
 8007932:	60e0      	str	r0, [r4, #12]
 8007934:	2104      	movs	r1, #4
 8007936:	6860      	ldr	r0, [r4, #4]
 8007938:	f7ff ff82 	bl	8007840 <std>
 800793c:	68a0      	ldr	r0, [r4, #8]
 800793e:	2201      	movs	r2, #1
 8007940:	2109      	movs	r1, #9
 8007942:	f7ff ff7d 	bl	8007840 <std>
 8007946:	68e0      	ldr	r0, [r4, #12]
 8007948:	2202      	movs	r2, #2
 800794a:	2112      	movs	r1, #18
 800794c:	f7ff ff78 	bl	8007840 <std>
 8007950:	2301      	movs	r3, #1
 8007952:	61a3      	str	r3, [r4, #24]
 8007954:	e7d2      	b.n	80078fc <__sinit+0xc>
 8007956:	bf00      	nop
 8007958:	08008b60 	.word	0x08008b60
 800795c:	08007889 	.word	0x08007889

08007960 <__sfp>:
 8007960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007962:	4607      	mov	r7, r0
 8007964:	f7ff ffac 	bl	80078c0 <__sfp_lock_acquire>
 8007968:	4b1e      	ldr	r3, [pc, #120]	; (80079e4 <__sfp+0x84>)
 800796a:	681e      	ldr	r6, [r3, #0]
 800796c:	69b3      	ldr	r3, [r6, #24]
 800796e:	b913      	cbnz	r3, 8007976 <__sfp+0x16>
 8007970:	4630      	mov	r0, r6
 8007972:	f7ff ffbd 	bl	80078f0 <__sinit>
 8007976:	3648      	adds	r6, #72	; 0x48
 8007978:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800797c:	3b01      	subs	r3, #1
 800797e:	d503      	bpl.n	8007988 <__sfp+0x28>
 8007980:	6833      	ldr	r3, [r6, #0]
 8007982:	b30b      	cbz	r3, 80079c8 <__sfp+0x68>
 8007984:	6836      	ldr	r6, [r6, #0]
 8007986:	e7f7      	b.n	8007978 <__sfp+0x18>
 8007988:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800798c:	b9d5      	cbnz	r5, 80079c4 <__sfp+0x64>
 800798e:	4b16      	ldr	r3, [pc, #88]	; (80079e8 <__sfp+0x88>)
 8007990:	60e3      	str	r3, [r4, #12]
 8007992:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007996:	6665      	str	r5, [r4, #100]	; 0x64
 8007998:	f000 f84c 	bl	8007a34 <__retarget_lock_init_recursive>
 800799c:	f7ff ff96 	bl	80078cc <__sfp_lock_release>
 80079a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80079a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80079a8:	6025      	str	r5, [r4, #0]
 80079aa:	61a5      	str	r5, [r4, #24]
 80079ac:	2208      	movs	r2, #8
 80079ae:	4629      	mov	r1, r5
 80079b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079b4:	f7fe fa48 	bl	8005e48 <memset>
 80079b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079c0:	4620      	mov	r0, r4
 80079c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079c4:	3468      	adds	r4, #104	; 0x68
 80079c6:	e7d9      	b.n	800797c <__sfp+0x1c>
 80079c8:	2104      	movs	r1, #4
 80079ca:	4638      	mov	r0, r7
 80079cc:	f7ff ff62 	bl	8007894 <__sfmoreglue>
 80079d0:	4604      	mov	r4, r0
 80079d2:	6030      	str	r0, [r6, #0]
 80079d4:	2800      	cmp	r0, #0
 80079d6:	d1d5      	bne.n	8007984 <__sfp+0x24>
 80079d8:	f7ff ff78 	bl	80078cc <__sfp_lock_release>
 80079dc:	230c      	movs	r3, #12
 80079de:	603b      	str	r3, [r7, #0]
 80079e0:	e7ee      	b.n	80079c0 <__sfp+0x60>
 80079e2:	bf00      	nop
 80079e4:	08008b60 	.word	0x08008b60
 80079e8:	ffff0001 	.word	0xffff0001

080079ec <_fwalk_reent>:
 80079ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079f0:	4606      	mov	r6, r0
 80079f2:	4688      	mov	r8, r1
 80079f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079f8:	2700      	movs	r7, #0
 80079fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079fe:	f1b9 0901 	subs.w	r9, r9, #1
 8007a02:	d505      	bpl.n	8007a10 <_fwalk_reent+0x24>
 8007a04:	6824      	ldr	r4, [r4, #0]
 8007a06:	2c00      	cmp	r4, #0
 8007a08:	d1f7      	bne.n	80079fa <_fwalk_reent+0xe>
 8007a0a:	4638      	mov	r0, r7
 8007a0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a10:	89ab      	ldrh	r3, [r5, #12]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d907      	bls.n	8007a26 <_fwalk_reent+0x3a>
 8007a16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	d003      	beq.n	8007a26 <_fwalk_reent+0x3a>
 8007a1e:	4629      	mov	r1, r5
 8007a20:	4630      	mov	r0, r6
 8007a22:	47c0      	blx	r8
 8007a24:	4307      	orrs	r7, r0
 8007a26:	3568      	adds	r5, #104	; 0x68
 8007a28:	e7e9      	b.n	80079fe <_fwalk_reent+0x12>
	...

08007a2c <_localeconv_r>:
 8007a2c:	4800      	ldr	r0, [pc, #0]	; (8007a30 <_localeconv_r+0x4>)
 8007a2e:	4770      	bx	lr
 8007a30:	20000168 	.word	0x20000168

08007a34 <__retarget_lock_init_recursive>:
 8007a34:	4770      	bx	lr

08007a36 <__retarget_lock_acquire_recursive>:
 8007a36:	4770      	bx	lr

08007a38 <__retarget_lock_release_recursive>:
 8007a38:	4770      	bx	lr

08007a3a <__swhatbuf_r>:
 8007a3a:	b570      	push	{r4, r5, r6, lr}
 8007a3c:	460e      	mov	r6, r1
 8007a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a42:	2900      	cmp	r1, #0
 8007a44:	b096      	sub	sp, #88	; 0x58
 8007a46:	4614      	mov	r4, r2
 8007a48:	461d      	mov	r5, r3
 8007a4a:	da08      	bge.n	8007a5e <__swhatbuf_r+0x24>
 8007a4c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	602a      	str	r2, [r5, #0]
 8007a54:	061a      	lsls	r2, r3, #24
 8007a56:	d410      	bmi.n	8007a7a <__swhatbuf_r+0x40>
 8007a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a5c:	e00e      	b.n	8007a7c <__swhatbuf_r+0x42>
 8007a5e:	466a      	mov	r2, sp
 8007a60:	f000 fee0 	bl	8008824 <_fstat_r>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	dbf1      	blt.n	8007a4c <__swhatbuf_r+0x12>
 8007a68:	9a01      	ldr	r2, [sp, #4]
 8007a6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a72:	425a      	negs	r2, r3
 8007a74:	415a      	adcs	r2, r3
 8007a76:	602a      	str	r2, [r5, #0]
 8007a78:	e7ee      	b.n	8007a58 <__swhatbuf_r+0x1e>
 8007a7a:	2340      	movs	r3, #64	; 0x40
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	6023      	str	r3, [r4, #0]
 8007a80:	b016      	add	sp, #88	; 0x58
 8007a82:	bd70      	pop	{r4, r5, r6, pc}

08007a84 <__smakebuf_r>:
 8007a84:	898b      	ldrh	r3, [r1, #12]
 8007a86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a88:	079d      	lsls	r5, r3, #30
 8007a8a:	4606      	mov	r6, r0
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	d507      	bpl.n	8007aa0 <__smakebuf_r+0x1c>
 8007a90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	6123      	str	r3, [r4, #16]
 8007a98:	2301      	movs	r3, #1
 8007a9a:	6163      	str	r3, [r4, #20]
 8007a9c:	b002      	add	sp, #8
 8007a9e:	bd70      	pop	{r4, r5, r6, pc}
 8007aa0:	ab01      	add	r3, sp, #4
 8007aa2:	466a      	mov	r2, sp
 8007aa4:	f7ff ffc9 	bl	8007a3a <__swhatbuf_r>
 8007aa8:	9900      	ldr	r1, [sp, #0]
 8007aaa:	4605      	mov	r5, r0
 8007aac:	4630      	mov	r0, r6
 8007aae:	f000 fc45 	bl	800833c <_malloc_r>
 8007ab2:	b948      	cbnz	r0, 8007ac8 <__smakebuf_r+0x44>
 8007ab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ab8:	059a      	lsls	r2, r3, #22
 8007aba:	d4ef      	bmi.n	8007a9c <__smakebuf_r+0x18>
 8007abc:	f023 0303 	bic.w	r3, r3, #3
 8007ac0:	f043 0302 	orr.w	r3, r3, #2
 8007ac4:	81a3      	strh	r3, [r4, #12]
 8007ac6:	e7e3      	b.n	8007a90 <__smakebuf_r+0xc>
 8007ac8:	4b0d      	ldr	r3, [pc, #52]	; (8007b00 <__smakebuf_r+0x7c>)
 8007aca:	62b3      	str	r3, [r6, #40]	; 0x28
 8007acc:	89a3      	ldrh	r3, [r4, #12]
 8007ace:	6020      	str	r0, [r4, #0]
 8007ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ad4:	81a3      	strh	r3, [r4, #12]
 8007ad6:	9b00      	ldr	r3, [sp, #0]
 8007ad8:	6163      	str	r3, [r4, #20]
 8007ada:	9b01      	ldr	r3, [sp, #4]
 8007adc:	6120      	str	r0, [r4, #16]
 8007ade:	b15b      	cbz	r3, 8007af8 <__smakebuf_r+0x74>
 8007ae0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	f000 feaf 	bl	8008848 <_isatty_r>
 8007aea:	b128      	cbz	r0, 8007af8 <__smakebuf_r+0x74>
 8007aec:	89a3      	ldrh	r3, [r4, #12]
 8007aee:	f023 0303 	bic.w	r3, r3, #3
 8007af2:	f043 0301 	orr.w	r3, r3, #1
 8007af6:	81a3      	strh	r3, [r4, #12]
 8007af8:	89a0      	ldrh	r0, [r4, #12]
 8007afa:	4305      	orrs	r5, r0
 8007afc:	81a5      	strh	r5, [r4, #12]
 8007afe:	e7cd      	b.n	8007a9c <__smakebuf_r+0x18>
 8007b00:	08007889 	.word	0x08007889

08007b04 <malloc>:
 8007b04:	4b02      	ldr	r3, [pc, #8]	; (8007b10 <malloc+0xc>)
 8007b06:	4601      	mov	r1, r0
 8007b08:	6818      	ldr	r0, [r3, #0]
 8007b0a:	f000 bc17 	b.w	800833c <_malloc_r>
 8007b0e:	bf00      	nop
 8007b10:	20000014 	.word	0x20000014

08007b14 <memcpy>:
 8007b14:	440a      	add	r2, r1
 8007b16:	4291      	cmp	r1, r2
 8007b18:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b1c:	d100      	bne.n	8007b20 <memcpy+0xc>
 8007b1e:	4770      	bx	lr
 8007b20:	b510      	push	{r4, lr}
 8007b22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b2a:	4291      	cmp	r1, r2
 8007b2c:	d1f9      	bne.n	8007b22 <memcpy+0xe>
 8007b2e:	bd10      	pop	{r4, pc}

08007b30 <_Balloc>:
 8007b30:	b570      	push	{r4, r5, r6, lr}
 8007b32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b34:	4604      	mov	r4, r0
 8007b36:	460d      	mov	r5, r1
 8007b38:	b976      	cbnz	r6, 8007b58 <_Balloc+0x28>
 8007b3a:	2010      	movs	r0, #16
 8007b3c:	f7ff ffe2 	bl	8007b04 <malloc>
 8007b40:	4602      	mov	r2, r0
 8007b42:	6260      	str	r0, [r4, #36]	; 0x24
 8007b44:	b920      	cbnz	r0, 8007b50 <_Balloc+0x20>
 8007b46:	4b18      	ldr	r3, [pc, #96]	; (8007ba8 <_Balloc+0x78>)
 8007b48:	4818      	ldr	r0, [pc, #96]	; (8007bac <_Balloc+0x7c>)
 8007b4a:	2166      	movs	r1, #102	; 0x66
 8007b4c:	f000 fe2a 	bl	80087a4 <__assert_func>
 8007b50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b54:	6006      	str	r6, [r0, #0]
 8007b56:	60c6      	str	r6, [r0, #12]
 8007b58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b5a:	68f3      	ldr	r3, [r6, #12]
 8007b5c:	b183      	cbz	r3, 8007b80 <_Balloc+0x50>
 8007b5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b66:	b9b8      	cbnz	r0, 8007b98 <_Balloc+0x68>
 8007b68:	2101      	movs	r1, #1
 8007b6a:	fa01 f605 	lsl.w	r6, r1, r5
 8007b6e:	1d72      	adds	r2, r6, #5
 8007b70:	0092      	lsls	r2, r2, #2
 8007b72:	4620      	mov	r0, r4
 8007b74:	f000 fb60 	bl	8008238 <_calloc_r>
 8007b78:	b160      	cbz	r0, 8007b94 <_Balloc+0x64>
 8007b7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b7e:	e00e      	b.n	8007b9e <_Balloc+0x6e>
 8007b80:	2221      	movs	r2, #33	; 0x21
 8007b82:	2104      	movs	r1, #4
 8007b84:	4620      	mov	r0, r4
 8007b86:	f000 fb57 	bl	8008238 <_calloc_r>
 8007b8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b8c:	60f0      	str	r0, [r6, #12]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1e4      	bne.n	8007b5e <_Balloc+0x2e>
 8007b94:	2000      	movs	r0, #0
 8007b96:	bd70      	pop	{r4, r5, r6, pc}
 8007b98:	6802      	ldr	r2, [r0, #0]
 8007b9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ba4:	e7f7      	b.n	8007b96 <_Balloc+0x66>
 8007ba6:	bf00      	nop
 8007ba8:	08008ba5 	.word	0x08008ba5
 8007bac:	08008c88 	.word	0x08008c88

08007bb0 <_Bfree>:
 8007bb0:	b570      	push	{r4, r5, r6, lr}
 8007bb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007bb4:	4605      	mov	r5, r0
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	b976      	cbnz	r6, 8007bd8 <_Bfree+0x28>
 8007bba:	2010      	movs	r0, #16
 8007bbc:	f7ff ffa2 	bl	8007b04 <malloc>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	6268      	str	r0, [r5, #36]	; 0x24
 8007bc4:	b920      	cbnz	r0, 8007bd0 <_Bfree+0x20>
 8007bc6:	4b09      	ldr	r3, [pc, #36]	; (8007bec <_Bfree+0x3c>)
 8007bc8:	4809      	ldr	r0, [pc, #36]	; (8007bf0 <_Bfree+0x40>)
 8007bca:	218a      	movs	r1, #138	; 0x8a
 8007bcc:	f000 fdea 	bl	80087a4 <__assert_func>
 8007bd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bd4:	6006      	str	r6, [r0, #0]
 8007bd6:	60c6      	str	r6, [r0, #12]
 8007bd8:	b13c      	cbz	r4, 8007bea <_Bfree+0x3a>
 8007bda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007bdc:	6862      	ldr	r2, [r4, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007be4:	6021      	str	r1, [r4, #0]
 8007be6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007bea:	bd70      	pop	{r4, r5, r6, pc}
 8007bec:	08008ba5 	.word	0x08008ba5
 8007bf0:	08008c88 	.word	0x08008c88

08007bf4 <__multadd>:
 8007bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf8:	690d      	ldr	r5, [r1, #16]
 8007bfa:	4607      	mov	r7, r0
 8007bfc:	460c      	mov	r4, r1
 8007bfe:	461e      	mov	r6, r3
 8007c00:	f101 0c14 	add.w	ip, r1, #20
 8007c04:	2000      	movs	r0, #0
 8007c06:	f8dc 3000 	ldr.w	r3, [ip]
 8007c0a:	b299      	uxth	r1, r3
 8007c0c:	fb02 6101 	mla	r1, r2, r1, r6
 8007c10:	0c1e      	lsrs	r6, r3, #16
 8007c12:	0c0b      	lsrs	r3, r1, #16
 8007c14:	fb02 3306 	mla	r3, r2, r6, r3
 8007c18:	b289      	uxth	r1, r1
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c20:	4285      	cmp	r5, r0
 8007c22:	f84c 1b04 	str.w	r1, [ip], #4
 8007c26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c2a:	dcec      	bgt.n	8007c06 <__multadd+0x12>
 8007c2c:	b30e      	cbz	r6, 8007c72 <__multadd+0x7e>
 8007c2e:	68a3      	ldr	r3, [r4, #8]
 8007c30:	42ab      	cmp	r3, r5
 8007c32:	dc19      	bgt.n	8007c68 <__multadd+0x74>
 8007c34:	6861      	ldr	r1, [r4, #4]
 8007c36:	4638      	mov	r0, r7
 8007c38:	3101      	adds	r1, #1
 8007c3a:	f7ff ff79 	bl	8007b30 <_Balloc>
 8007c3e:	4680      	mov	r8, r0
 8007c40:	b928      	cbnz	r0, 8007c4e <__multadd+0x5a>
 8007c42:	4602      	mov	r2, r0
 8007c44:	4b0c      	ldr	r3, [pc, #48]	; (8007c78 <__multadd+0x84>)
 8007c46:	480d      	ldr	r0, [pc, #52]	; (8007c7c <__multadd+0x88>)
 8007c48:	21b5      	movs	r1, #181	; 0xb5
 8007c4a:	f000 fdab 	bl	80087a4 <__assert_func>
 8007c4e:	6922      	ldr	r2, [r4, #16]
 8007c50:	3202      	adds	r2, #2
 8007c52:	f104 010c 	add.w	r1, r4, #12
 8007c56:	0092      	lsls	r2, r2, #2
 8007c58:	300c      	adds	r0, #12
 8007c5a:	f7ff ff5b 	bl	8007b14 <memcpy>
 8007c5e:	4621      	mov	r1, r4
 8007c60:	4638      	mov	r0, r7
 8007c62:	f7ff ffa5 	bl	8007bb0 <_Bfree>
 8007c66:	4644      	mov	r4, r8
 8007c68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c6c:	3501      	adds	r5, #1
 8007c6e:	615e      	str	r6, [r3, #20]
 8007c70:	6125      	str	r5, [r4, #16]
 8007c72:	4620      	mov	r0, r4
 8007c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c78:	08008c17 	.word	0x08008c17
 8007c7c:	08008c88 	.word	0x08008c88

08007c80 <__hi0bits>:
 8007c80:	0c03      	lsrs	r3, r0, #16
 8007c82:	041b      	lsls	r3, r3, #16
 8007c84:	b9d3      	cbnz	r3, 8007cbc <__hi0bits+0x3c>
 8007c86:	0400      	lsls	r0, r0, #16
 8007c88:	2310      	movs	r3, #16
 8007c8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007c8e:	bf04      	itt	eq
 8007c90:	0200      	lsleq	r0, r0, #8
 8007c92:	3308      	addeq	r3, #8
 8007c94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007c98:	bf04      	itt	eq
 8007c9a:	0100      	lsleq	r0, r0, #4
 8007c9c:	3304      	addeq	r3, #4
 8007c9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007ca2:	bf04      	itt	eq
 8007ca4:	0080      	lsleq	r0, r0, #2
 8007ca6:	3302      	addeq	r3, #2
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	db05      	blt.n	8007cb8 <__hi0bits+0x38>
 8007cac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007cb0:	f103 0301 	add.w	r3, r3, #1
 8007cb4:	bf08      	it	eq
 8007cb6:	2320      	moveq	r3, #32
 8007cb8:	4618      	mov	r0, r3
 8007cba:	4770      	bx	lr
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	e7e4      	b.n	8007c8a <__hi0bits+0xa>

08007cc0 <__lo0bits>:
 8007cc0:	6803      	ldr	r3, [r0, #0]
 8007cc2:	f013 0207 	ands.w	r2, r3, #7
 8007cc6:	4601      	mov	r1, r0
 8007cc8:	d00b      	beq.n	8007ce2 <__lo0bits+0x22>
 8007cca:	07da      	lsls	r2, r3, #31
 8007ccc:	d423      	bmi.n	8007d16 <__lo0bits+0x56>
 8007cce:	0798      	lsls	r0, r3, #30
 8007cd0:	bf49      	itett	mi
 8007cd2:	085b      	lsrmi	r3, r3, #1
 8007cd4:	089b      	lsrpl	r3, r3, #2
 8007cd6:	2001      	movmi	r0, #1
 8007cd8:	600b      	strmi	r3, [r1, #0]
 8007cda:	bf5c      	itt	pl
 8007cdc:	600b      	strpl	r3, [r1, #0]
 8007cde:	2002      	movpl	r0, #2
 8007ce0:	4770      	bx	lr
 8007ce2:	b298      	uxth	r0, r3
 8007ce4:	b9a8      	cbnz	r0, 8007d12 <__lo0bits+0x52>
 8007ce6:	0c1b      	lsrs	r3, r3, #16
 8007ce8:	2010      	movs	r0, #16
 8007cea:	b2da      	uxtb	r2, r3
 8007cec:	b90a      	cbnz	r2, 8007cf2 <__lo0bits+0x32>
 8007cee:	3008      	adds	r0, #8
 8007cf0:	0a1b      	lsrs	r3, r3, #8
 8007cf2:	071a      	lsls	r2, r3, #28
 8007cf4:	bf04      	itt	eq
 8007cf6:	091b      	lsreq	r3, r3, #4
 8007cf8:	3004      	addeq	r0, #4
 8007cfa:	079a      	lsls	r2, r3, #30
 8007cfc:	bf04      	itt	eq
 8007cfe:	089b      	lsreq	r3, r3, #2
 8007d00:	3002      	addeq	r0, #2
 8007d02:	07da      	lsls	r2, r3, #31
 8007d04:	d403      	bmi.n	8007d0e <__lo0bits+0x4e>
 8007d06:	085b      	lsrs	r3, r3, #1
 8007d08:	f100 0001 	add.w	r0, r0, #1
 8007d0c:	d005      	beq.n	8007d1a <__lo0bits+0x5a>
 8007d0e:	600b      	str	r3, [r1, #0]
 8007d10:	4770      	bx	lr
 8007d12:	4610      	mov	r0, r2
 8007d14:	e7e9      	b.n	8007cea <__lo0bits+0x2a>
 8007d16:	2000      	movs	r0, #0
 8007d18:	4770      	bx	lr
 8007d1a:	2020      	movs	r0, #32
 8007d1c:	4770      	bx	lr
	...

08007d20 <__i2b>:
 8007d20:	b510      	push	{r4, lr}
 8007d22:	460c      	mov	r4, r1
 8007d24:	2101      	movs	r1, #1
 8007d26:	f7ff ff03 	bl	8007b30 <_Balloc>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	b928      	cbnz	r0, 8007d3a <__i2b+0x1a>
 8007d2e:	4b05      	ldr	r3, [pc, #20]	; (8007d44 <__i2b+0x24>)
 8007d30:	4805      	ldr	r0, [pc, #20]	; (8007d48 <__i2b+0x28>)
 8007d32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007d36:	f000 fd35 	bl	80087a4 <__assert_func>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	6144      	str	r4, [r0, #20]
 8007d3e:	6103      	str	r3, [r0, #16]
 8007d40:	bd10      	pop	{r4, pc}
 8007d42:	bf00      	nop
 8007d44:	08008c17 	.word	0x08008c17
 8007d48:	08008c88 	.word	0x08008c88

08007d4c <__multiply>:
 8007d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d50:	4691      	mov	r9, r2
 8007d52:	690a      	ldr	r2, [r1, #16]
 8007d54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	bfb8      	it	lt
 8007d5c:	460b      	movlt	r3, r1
 8007d5e:	460c      	mov	r4, r1
 8007d60:	bfbc      	itt	lt
 8007d62:	464c      	movlt	r4, r9
 8007d64:	4699      	movlt	r9, r3
 8007d66:	6927      	ldr	r7, [r4, #16]
 8007d68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d6c:	68a3      	ldr	r3, [r4, #8]
 8007d6e:	6861      	ldr	r1, [r4, #4]
 8007d70:	eb07 060a 	add.w	r6, r7, sl
 8007d74:	42b3      	cmp	r3, r6
 8007d76:	b085      	sub	sp, #20
 8007d78:	bfb8      	it	lt
 8007d7a:	3101      	addlt	r1, #1
 8007d7c:	f7ff fed8 	bl	8007b30 <_Balloc>
 8007d80:	b930      	cbnz	r0, 8007d90 <__multiply+0x44>
 8007d82:	4602      	mov	r2, r0
 8007d84:	4b44      	ldr	r3, [pc, #272]	; (8007e98 <__multiply+0x14c>)
 8007d86:	4845      	ldr	r0, [pc, #276]	; (8007e9c <__multiply+0x150>)
 8007d88:	f240 115d 	movw	r1, #349	; 0x15d
 8007d8c:	f000 fd0a 	bl	80087a4 <__assert_func>
 8007d90:	f100 0514 	add.w	r5, r0, #20
 8007d94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d98:	462b      	mov	r3, r5
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	4543      	cmp	r3, r8
 8007d9e:	d321      	bcc.n	8007de4 <__multiply+0x98>
 8007da0:	f104 0314 	add.w	r3, r4, #20
 8007da4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007da8:	f109 0314 	add.w	r3, r9, #20
 8007dac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007db0:	9202      	str	r2, [sp, #8]
 8007db2:	1b3a      	subs	r2, r7, r4
 8007db4:	3a15      	subs	r2, #21
 8007db6:	f022 0203 	bic.w	r2, r2, #3
 8007dba:	3204      	adds	r2, #4
 8007dbc:	f104 0115 	add.w	r1, r4, #21
 8007dc0:	428f      	cmp	r7, r1
 8007dc2:	bf38      	it	cc
 8007dc4:	2204      	movcc	r2, #4
 8007dc6:	9201      	str	r2, [sp, #4]
 8007dc8:	9a02      	ldr	r2, [sp, #8]
 8007dca:	9303      	str	r3, [sp, #12]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d80c      	bhi.n	8007dea <__multiply+0x9e>
 8007dd0:	2e00      	cmp	r6, #0
 8007dd2:	dd03      	ble.n	8007ddc <__multiply+0x90>
 8007dd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d05a      	beq.n	8007e92 <__multiply+0x146>
 8007ddc:	6106      	str	r6, [r0, #16]
 8007dde:	b005      	add	sp, #20
 8007de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de4:	f843 2b04 	str.w	r2, [r3], #4
 8007de8:	e7d8      	b.n	8007d9c <__multiply+0x50>
 8007dea:	f8b3 a000 	ldrh.w	sl, [r3]
 8007dee:	f1ba 0f00 	cmp.w	sl, #0
 8007df2:	d024      	beq.n	8007e3e <__multiply+0xf2>
 8007df4:	f104 0e14 	add.w	lr, r4, #20
 8007df8:	46a9      	mov	r9, r5
 8007dfa:	f04f 0c00 	mov.w	ip, #0
 8007dfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007e02:	f8d9 1000 	ldr.w	r1, [r9]
 8007e06:	fa1f fb82 	uxth.w	fp, r2
 8007e0a:	b289      	uxth	r1, r1
 8007e0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007e10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007e14:	f8d9 2000 	ldr.w	r2, [r9]
 8007e18:	4461      	add	r1, ip
 8007e1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007e22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007e26:	b289      	uxth	r1, r1
 8007e28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e2c:	4577      	cmp	r7, lr
 8007e2e:	f849 1b04 	str.w	r1, [r9], #4
 8007e32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e36:	d8e2      	bhi.n	8007dfe <__multiply+0xb2>
 8007e38:	9a01      	ldr	r2, [sp, #4]
 8007e3a:	f845 c002 	str.w	ip, [r5, r2]
 8007e3e:	9a03      	ldr	r2, [sp, #12]
 8007e40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007e44:	3304      	adds	r3, #4
 8007e46:	f1b9 0f00 	cmp.w	r9, #0
 8007e4a:	d020      	beq.n	8007e8e <__multiply+0x142>
 8007e4c:	6829      	ldr	r1, [r5, #0]
 8007e4e:	f104 0c14 	add.w	ip, r4, #20
 8007e52:	46ae      	mov	lr, r5
 8007e54:	f04f 0a00 	mov.w	sl, #0
 8007e58:	f8bc b000 	ldrh.w	fp, [ip]
 8007e5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007e60:	fb09 220b 	mla	r2, r9, fp, r2
 8007e64:	4492      	add	sl, r2
 8007e66:	b289      	uxth	r1, r1
 8007e68:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007e6c:	f84e 1b04 	str.w	r1, [lr], #4
 8007e70:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007e74:	f8be 1000 	ldrh.w	r1, [lr]
 8007e78:	0c12      	lsrs	r2, r2, #16
 8007e7a:	fb09 1102 	mla	r1, r9, r2, r1
 8007e7e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007e82:	4567      	cmp	r7, ip
 8007e84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e88:	d8e6      	bhi.n	8007e58 <__multiply+0x10c>
 8007e8a:	9a01      	ldr	r2, [sp, #4]
 8007e8c:	50a9      	str	r1, [r5, r2]
 8007e8e:	3504      	adds	r5, #4
 8007e90:	e79a      	b.n	8007dc8 <__multiply+0x7c>
 8007e92:	3e01      	subs	r6, #1
 8007e94:	e79c      	b.n	8007dd0 <__multiply+0x84>
 8007e96:	bf00      	nop
 8007e98:	08008c17 	.word	0x08008c17
 8007e9c:	08008c88 	.word	0x08008c88

08007ea0 <__pow5mult>:
 8007ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ea4:	4615      	mov	r5, r2
 8007ea6:	f012 0203 	ands.w	r2, r2, #3
 8007eaa:	4606      	mov	r6, r0
 8007eac:	460f      	mov	r7, r1
 8007eae:	d007      	beq.n	8007ec0 <__pow5mult+0x20>
 8007eb0:	4c25      	ldr	r4, [pc, #148]	; (8007f48 <__pow5mult+0xa8>)
 8007eb2:	3a01      	subs	r2, #1
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007eba:	f7ff fe9b 	bl	8007bf4 <__multadd>
 8007ebe:	4607      	mov	r7, r0
 8007ec0:	10ad      	asrs	r5, r5, #2
 8007ec2:	d03d      	beq.n	8007f40 <__pow5mult+0xa0>
 8007ec4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007ec6:	b97c      	cbnz	r4, 8007ee8 <__pow5mult+0x48>
 8007ec8:	2010      	movs	r0, #16
 8007eca:	f7ff fe1b 	bl	8007b04 <malloc>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	6270      	str	r0, [r6, #36]	; 0x24
 8007ed2:	b928      	cbnz	r0, 8007ee0 <__pow5mult+0x40>
 8007ed4:	4b1d      	ldr	r3, [pc, #116]	; (8007f4c <__pow5mult+0xac>)
 8007ed6:	481e      	ldr	r0, [pc, #120]	; (8007f50 <__pow5mult+0xb0>)
 8007ed8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007edc:	f000 fc62 	bl	80087a4 <__assert_func>
 8007ee0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ee4:	6004      	str	r4, [r0, #0]
 8007ee6:	60c4      	str	r4, [r0, #12]
 8007ee8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007eec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ef0:	b94c      	cbnz	r4, 8007f06 <__pow5mult+0x66>
 8007ef2:	f240 2171 	movw	r1, #625	; 0x271
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	f7ff ff12 	bl	8007d20 <__i2b>
 8007efc:	2300      	movs	r3, #0
 8007efe:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f02:	4604      	mov	r4, r0
 8007f04:	6003      	str	r3, [r0, #0]
 8007f06:	f04f 0900 	mov.w	r9, #0
 8007f0a:	07eb      	lsls	r3, r5, #31
 8007f0c:	d50a      	bpl.n	8007f24 <__pow5mult+0x84>
 8007f0e:	4639      	mov	r1, r7
 8007f10:	4622      	mov	r2, r4
 8007f12:	4630      	mov	r0, r6
 8007f14:	f7ff ff1a 	bl	8007d4c <__multiply>
 8007f18:	4639      	mov	r1, r7
 8007f1a:	4680      	mov	r8, r0
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	f7ff fe47 	bl	8007bb0 <_Bfree>
 8007f22:	4647      	mov	r7, r8
 8007f24:	106d      	asrs	r5, r5, #1
 8007f26:	d00b      	beq.n	8007f40 <__pow5mult+0xa0>
 8007f28:	6820      	ldr	r0, [r4, #0]
 8007f2a:	b938      	cbnz	r0, 8007f3c <__pow5mult+0x9c>
 8007f2c:	4622      	mov	r2, r4
 8007f2e:	4621      	mov	r1, r4
 8007f30:	4630      	mov	r0, r6
 8007f32:	f7ff ff0b 	bl	8007d4c <__multiply>
 8007f36:	6020      	str	r0, [r4, #0]
 8007f38:	f8c0 9000 	str.w	r9, [r0]
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	e7e4      	b.n	8007f0a <__pow5mult+0x6a>
 8007f40:	4638      	mov	r0, r7
 8007f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f46:	bf00      	nop
 8007f48:	08008dd8 	.word	0x08008dd8
 8007f4c:	08008ba5 	.word	0x08008ba5
 8007f50:	08008c88 	.word	0x08008c88

08007f54 <__lshift>:
 8007f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f58:	460c      	mov	r4, r1
 8007f5a:	6849      	ldr	r1, [r1, #4]
 8007f5c:	6923      	ldr	r3, [r4, #16]
 8007f5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f62:	68a3      	ldr	r3, [r4, #8]
 8007f64:	4607      	mov	r7, r0
 8007f66:	4691      	mov	r9, r2
 8007f68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f6c:	f108 0601 	add.w	r6, r8, #1
 8007f70:	42b3      	cmp	r3, r6
 8007f72:	db0b      	blt.n	8007f8c <__lshift+0x38>
 8007f74:	4638      	mov	r0, r7
 8007f76:	f7ff fddb 	bl	8007b30 <_Balloc>
 8007f7a:	4605      	mov	r5, r0
 8007f7c:	b948      	cbnz	r0, 8007f92 <__lshift+0x3e>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	4b2a      	ldr	r3, [pc, #168]	; (800802c <__lshift+0xd8>)
 8007f82:	482b      	ldr	r0, [pc, #172]	; (8008030 <__lshift+0xdc>)
 8007f84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007f88:	f000 fc0c 	bl	80087a4 <__assert_func>
 8007f8c:	3101      	adds	r1, #1
 8007f8e:	005b      	lsls	r3, r3, #1
 8007f90:	e7ee      	b.n	8007f70 <__lshift+0x1c>
 8007f92:	2300      	movs	r3, #0
 8007f94:	f100 0114 	add.w	r1, r0, #20
 8007f98:	f100 0210 	add.w	r2, r0, #16
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	4553      	cmp	r3, sl
 8007fa0:	db37      	blt.n	8008012 <__lshift+0xbe>
 8007fa2:	6920      	ldr	r0, [r4, #16]
 8007fa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007fa8:	f104 0314 	add.w	r3, r4, #20
 8007fac:	f019 091f 	ands.w	r9, r9, #31
 8007fb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007fb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007fb8:	d02f      	beq.n	800801a <__lshift+0xc6>
 8007fba:	f1c9 0e20 	rsb	lr, r9, #32
 8007fbe:	468a      	mov	sl, r1
 8007fc0:	f04f 0c00 	mov.w	ip, #0
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	fa02 f209 	lsl.w	r2, r2, r9
 8007fca:	ea42 020c 	orr.w	r2, r2, ip
 8007fce:	f84a 2b04 	str.w	r2, [sl], #4
 8007fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fd6:	4298      	cmp	r0, r3
 8007fd8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007fdc:	d8f2      	bhi.n	8007fc4 <__lshift+0x70>
 8007fde:	1b03      	subs	r3, r0, r4
 8007fe0:	3b15      	subs	r3, #21
 8007fe2:	f023 0303 	bic.w	r3, r3, #3
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	f104 0215 	add.w	r2, r4, #21
 8007fec:	4290      	cmp	r0, r2
 8007fee:	bf38      	it	cc
 8007ff0:	2304      	movcc	r3, #4
 8007ff2:	f841 c003 	str.w	ip, [r1, r3]
 8007ff6:	f1bc 0f00 	cmp.w	ip, #0
 8007ffa:	d001      	beq.n	8008000 <__lshift+0xac>
 8007ffc:	f108 0602 	add.w	r6, r8, #2
 8008000:	3e01      	subs	r6, #1
 8008002:	4638      	mov	r0, r7
 8008004:	612e      	str	r6, [r5, #16]
 8008006:	4621      	mov	r1, r4
 8008008:	f7ff fdd2 	bl	8007bb0 <_Bfree>
 800800c:	4628      	mov	r0, r5
 800800e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008012:	f842 0f04 	str.w	r0, [r2, #4]!
 8008016:	3301      	adds	r3, #1
 8008018:	e7c1      	b.n	8007f9e <__lshift+0x4a>
 800801a:	3904      	subs	r1, #4
 800801c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008020:	f841 2f04 	str.w	r2, [r1, #4]!
 8008024:	4298      	cmp	r0, r3
 8008026:	d8f9      	bhi.n	800801c <__lshift+0xc8>
 8008028:	e7ea      	b.n	8008000 <__lshift+0xac>
 800802a:	bf00      	nop
 800802c:	08008c17 	.word	0x08008c17
 8008030:	08008c88 	.word	0x08008c88

08008034 <__mcmp>:
 8008034:	b530      	push	{r4, r5, lr}
 8008036:	6902      	ldr	r2, [r0, #16]
 8008038:	690c      	ldr	r4, [r1, #16]
 800803a:	1b12      	subs	r2, r2, r4
 800803c:	d10e      	bne.n	800805c <__mcmp+0x28>
 800803e:	f100 0314 	add.w	r3, r0, #20
 8008042:	3114      	adds	r1, #20
 8008044:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008048:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800804c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008050:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008054:	42a5      	cmp	r5, r4
 8008056:	d003      	beq.n	8008060 <__mcmp+0x2c>
 8008058:	d305      	bcc.n	8008066 <__mcmp+0x32>
 800805a:	2201      	movs	r2, #1
 800805c:	4610      	mov	r0, r2
 800805e:	bd30      	pop	{r4, r5, pc}
 8008060:	4283      	cmp	r3, r0
 8008062:	d3f3      	bcc.n	800804c <__mcmp+0x18>
 8008064:	e7fa      	b.n	800805c <__mcmp+0x28>
 8008066:	f04f 32ff 	mov.w	r2, #4294967295
 800806a:	e7f7      	b.n	800805c <__mcmp+0x28>

0800806c <__mdiff>:
 800806c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008070:	460c      	mov	r4, r1
 8008072:	4606      	mov	r6, r0
 8008074:	4611      	mov	r1, r2
 8008076:	4620      	mov	r0, r4
 8008078:	4690      	mov	r8, r2
 800807a:	f7ff ffdb 	bl	8008034 <__mcmp>
 800807e:	1e05      	subs	r5, r0, #0
 8008080:	d110      	bne.n	80080a4 <__mdiff+0x38>
 8008082:	4629      	mov	r1, r5
 8008084:	4630      	mov	r0, r6
 8008086:	f7ff fd53 	bl	8007b30 <_Balloc>
 800808a:	b930      	cbnz	r0, 800809a <__mdiff+0x2e>
 800808c:	4b3a      	ldr	r3, [pc, #232]	; (8008178 <__mdiff+0x10c>)
 800808e:	4602      	mov	r2, r0
 8008090:	f240 2132 	movw	r1, #562	; 0x232
 8008094:	4839      	ldr	r0, [pc, #228]	; (800817c <__mdiff+0x110>)
 8008096:	f000 fb85 	bl	80087a4 <__assert_func>
 800809a:	2301      	movs	r3, #1
 800809c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80080a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a4:	bfa4      	itt	ge
 80080a6:	4643      	movge	r3, r8
 80080a8:	46a0      	movge	r8, r4
 80080aa:	4630      	mov	r0, r6
 80080ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80080b0:	bfa6      	itte	ge
 80080b2:	461c      	movge	r4, r3
 80080b4:	2500      	movge	r5, #0
 80080b6:	2501      	movlt	r5, #1
 80080b8:	f7ff fd3a 	bl	8007b30 <_Balloc>
 80080bc:	b920      	cbnz	r0, 80080c8 <__mdiff+0x5c>
 80080be:	4b2e      	ldr	r3, [pc, #184]	; (8008178 <__mdiff+0x10c>)
 80080c0:	4602      	mov	r2, r0
 80080c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80080c6:	e7e5      	b.n	8008094 <__mdiff+0x28>
 80080c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80080cc:	6926      	ldr	r6, [r4, #16]
 80080ce:	60c5      	str	r5, [r0, #12]
 80080d0:	f104 0914 	add.w	r9, r4, #20
 80080d4:	f108 0514 	add.w	r5, r8, #20
 80080d8:	f100 0e14 	add.w	lr, r0, #20
 80080dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80080e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80080e4:	f108 0210 	add.w	r2, r8, #16
 80080e8:	46f2      	mov	sl, lr
 80080ea:	2100      	movs	r1, #0
 80080ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80080f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80080f4:	fa1f f883 	uxth.w	r8, r3
 80080f8:	fa11 f18b 	uxtah	r1, r1, fp
 80080fc:	0c1b      	lsrs	r3, r3, #16
 80080fe:	eba1 0808 	sub.w	r8, r1, r8
 8008102:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008106:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800810a:	fa1f f888 	uxth.w	r8, r8
 800810e:	1419      	asrs	r1, r3, #16
 8008110:	454e      	cmp	r6, r9
 8008112:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008116:	f84a 3b04 	str.w	r3, [sl], #4
 800811a:	d8e7      	bhi.n	80080ec <__mdiff+0x80>
 800811c:	1b33      	subs	r3, r6, r4
 800811e:	3b15      	subs	r3, #21
 8008120:	f023 0303 	bic.w	r3, r3, #3
 8008124:	3304      	adds	r3, #4
 8008126:	3415      	adds	r4, #21
 8008128:	42a6      	cmp	r6, r4
 800812a:	bf38      	it	cc
 800812c:	2304      	movcc	r3, #4
 800812e:	441d      	add	r5, r3
 8008130:	4473      	add	r3, lr
 8008132:	469e      	mov	lr, r3
 8008134:	462e      	mov	r6, r5
 8008136:	4566      	cmp	r6, ip
 8008138:	d30e      	bcc.n	8008158 <__mdiff+0xec>
 800813a:	f10c 0203 	add.w	r2, ip, #3
 800813e:	1b52      	subs	r2, r2, r5
 8008140:	f022 0203 	bic.w	r2, r2, #3
 8008144:	3d03      	subs	r5, #3
 8008146:	45ac      	cmp	ip, r5
 8008148:	bf38      	it	cc
 800814a:	2200      	movcc	r2, #0
 800814c:	441a      	add	r2, r3
 800814e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008152:	b17b      	cbz	r3, 8008174 <__mdiff+0x108>
 8008154:	6107      	str	r7, [r0, #16]
 8008156:	e7a3      	b.n	80080a0 <__mdiff+0x34>
 8008158:	f856 8b04 	ldr.w	r8, [r6], #4
 800815c:	fa11 f288 	uxtah	r2, r1, r8
 8008160:	1414      	asrs	r4, r2, #16
 8008162:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008166:	b292      	uxth	r2, r2
 8008168:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800816c:	f84e 2b04 	str.w	r2, [lr], #4
 8008170:	1421      	asrs	r1, r4, #16
 8008172:	e7e0      	b.n	8008136 <__mdiff+0xca>
 8008174:	3f01      	subs	r7, #1
 8008176:	e7ea      	b.n	800814e <__mdiff+0xe2>
 8008178:	08008c17 	.word	0x08008c17
 800817c:	08008c88 	.word	0x08008c88

08008180 <__d2b>:
 8008180:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008184:	4689      	mov	r9, r1
 8008186:	2101      	movs	r1, #1
 8008188:	ec57 6b10 	vmov	r6, r7, d0
 800818c:	4690      	mov	r8, r2
 800818e:	f7ff fccf 	bl	8007b30 <_Balloc>
 8008192:	4604      	mov	r4, r0
 8008194:	b930      	cbnz	r0, 80081a4 <__d2b+0x24>
 8008196:	4602      	mov	r2, r0
 8008198:	4b25      	ldr	r3, [pc, #148]	; (8008230 <__d2b+0xb0>)
 800819a:	4826      	ldr	r0, [pc, #152]	; (8008234 <__d2b+0xb4>)
 800819c:	f240 310a 	movw	r1, #778	; 0x30a
 80081a0:	f000 fb00 	bl	80087a4 <__assert_func>
 80081a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80081a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80081ac:	bb35      	cbnz	r5, 80081fc <__d2b+0x7c>
 80081ae:	2e00      	cmp	r6, #0
 80081b0:	9301      	str	r3, [sp, #4]
 80081b2:	d028      	beq.n	8008206 <__d2b+0x86>
 80081b4:	4668      	mov	r0, sp
 80081b6:	9600      	str	r6, [sp, #0]
 80081b8:	f7ff fd82 	bl	8007cc0 <__lo0bits>
 80081bc:	9900      	ldr	r1, [sp, #0]
 80081be:	b300      	cbz	r0, 8008202 <__d2b+0x82>
 80081c0:	9a01      	ldr	r2, [sp, #4]
 80081c2:	f1c0 0320 	rsb	r3, r0, #32
 80081c6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ca:	430b      	orrs	r3, r1
 80081cc:	40c2      	lsrs	r2, r0
 80081ce:	6163      	str	r3, [r4, #20]
 80081d0:	9201      	str	r2, [sp, #4]
 80081d2:	9b01      	ldr	r3, [sp, #4]
 80081d4:	61a3      	str	r3, [r4, #24]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	bf14      	ite	ne
 80081da:	2202      	movne	r2, #2
 80081dc:	2201      	moveq	r2, #1
 80081de:	6122      	str	r2, [r4, #16]
 80081e0:	b1d5      	cbz	r5, 8008218 <__d2b+0x98>
 80081e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80081e6:	4405      	add	r5, r0
 80081e8:	f8c9 5000 	str.w	r5, [r9]
 80081ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80081f0:	f8c8 0000 	str.w	r0, [r8]
 80081f4:	4620      	mov	r0, r4
 80081f6:	b003      	add	sp, #12
 80081f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008200:	e7d5      	b.n	80081ae <__d2b+0x2e>
 8008202:	6161      	str	r1, [r4, #20]
 8008204:	e7e5      	b.n	80081d2 <__d2b+0x52>
 8008206:	a801      	add	r0, sp, #4
 8008208:	f7ff fd5a 	bl	8007cc0 <__lo0bits>
 800820c:	9b01      	ldr	r3, [sp, #4]
 800820e:	6163      	str	r3, [r4, #20]
 8008210:	2201      	movs	r2, #1
 8008212:	6122      	str	r2, [r4, #16]
 8008214:	3020      	adds	r0, #32
 8008216:	e7e3      	b.n	80081e0 <__d2b+0x60>
 8008218:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800821c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008220:	f8c9 0000 	str.w	r0, [r9]
 8008224:	6918      	ldr	r0, [r3, #16]
 8008226:	f7ff fd2b 	bl	8007c80 <__hi0bits>
 800822a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800822e:	e7df      	b.n	80081f0 <__d2b+0x70>
 8008230:	08008c17 	.word	0x08008c17
 8008234:	08008c88 	.word	0x08008c88

08008238 <_calloc_r>:
 8008238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800823a:	fba1 2402 	umull	r2, r4, r1, r2
 800823e:	b94c      	cbnz	r4, 8008254 <_calloc_r+0x1c>
 8008240:	4611      	mov	r1, r2
 8008242:	9201      	str	r2, [sp, #4]
 8008244:	f000 f87a 	bl	800833c <_malloc_r>
 8008248:	9a01      	ldr	r2, [sp, #4]
 800824a:	4605      	mov	r5, r0
 800824c:	b930      	cbnz	r0, 800825c <_calloc_r+0x24>
 800824e:	4628      	mov	r0, r5
 8008250:	b003      	add	sp, #12
 8008252:	bd30      	pop	{r4, r5, pc}
 8008254:	220c      	movs	r2, #12
 8008256:	6002      	str	r2, [r0, #0]
 8008258:	2500      	movs	r5, #0
 800825a:	e7f8      	b.n	800824e <_calloc_r+0x16>
 800825c:	4621      	mov	r1, r4
 800825e:	f7fd fdf3 	bl	8005e48 <memset>
 8008262:	e7f4      	b.n	800824e <_calloc_r+0x16>

08008264 <_free_r>:
 8008264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008266:	2900      	cmp	r1, #0
 8008268:	d044      	beq.n	80082f4 <_free_r+0x90>
 800826a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800826e:	9001      	str	r0, [sp, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	f1a1 0404 	sub.w	r4, r1, #4
 8008276:	bfb8      	it	lt
 8008278:	18e4      	addlt	r4, r4, r3
 800827a:	f000 fb19 	bl	80088b0 <__malloc_lock>
 800827e:	4a1e      	ldr	r2, [pc, #120]	; (80082f8 <_free_r+0x94>)
 8008280:	9801      	ldr	r0, [sp, #4]
 8008282:	6813      	ldr	r3, [r2, #0]
 8008284:	b933      	cbnz	r3, 8008294 <_free_r+0x30>
 8008286:	6063      	str	r3, [r4, #4]
 8008288:	6014      	str	r4, [r2, #0]
 800828a:	b003      	add	sp, #12
 800828c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008290:	f000 bb14 	b.w	80088bc <__malloc_unlock>
 8008294:	42a3      	cmp	r3, r4
 8008296:	d908      	bls.n	80082aa <_free_r+0x46>
 8008298:	6825      	ldr	r5, [r4, #0]
 800829a:	1961      	adds	r1, r4, r5
 800829c:	428b      	cmp	r3, r1
 800829e:	bf01      	itttt	eq
 80082a0:	6819      	ldreq	r1, [r3, #0]
 80082a2:	685b      	ldreq	r3, [r3, #4]
 80082a4:	1949      	addeq	r1, r1, r5
 80082a6:	6021      	streq	r1, [r4, #0]
 80082a8:	e7ed      	b.n	8008286 <_free_r+0x22>
 80082aa:	461a      	mov	r2, r3
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	b10b      	cbz	r3, 80082b4 <_free_r+0x50>
 80082b0:	42a3      	cmp	r3, r4
 80082b2:	d9fa      	bls.n	80082aa <_free_r+0x46>
 80082b4:	6811      	ldr	r1, [r2, #0]
 80082b6:	1855      	adds	r5, r2, r1
 80082b8:	42a5      	cmp	r5, r4
 80082ba:	d10b      	bne.n	80082d4 <_free_r+0x70>
 80082bc:	6824      	ldr	r4, [r4, #0]
 80082be:	4421      	add	r1, r4
 80082c0:	1854      	adds	r4, r2, r1
 80082c2:	42a3      	cmp	r3, r4
 80082c4:	6011      	str	r1, [r2, #0]
 80082c6:	d1e0      	bne.n	800828a <_free_r+0x26>
 80082c8:	681c      	ldr	r4, [r3, #0]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	6053      	str	r3, [r2, #4]
 80082ce:	4421      	add	r1, r4
 80082d0:	6011      	str	r1, [r2, #0]
 80082d2:	e7da      	b.n	800828a <_free_r+0x26>
 80082d4:	d902      	bls.n	80082dc <_free_r+0x78>
 80082d6:	230c      	movs	r3, #12
 80082d8:	6003      	str	r3, [r0, #0]
 80082da:	e7d6      	b.n	800828a <_free_r+0x26>
 80082dc:	6825      	ldr	r5, [r4, #0]
 80082de:	1961      	adds	r1, r4, r5
 80082e0:	428b      	cmp	r3, r1
 80082e2:	bf04      	itt	eq
 80082e4:	6819      	ldreq	r1, [r3, #0]
 80082e6:	685b      	ldreq	r3, [r3, #4]
 80082e8:	6063      	str	r3, [r4, #4]
 80082ea:	bf04      	itt	eq
 80082ec:	1949      	addeq	r1, r1, r5
 80082ee:	6021      	streq	r1, [r4, #0]
 80082f0:	6054      	str	r4, [r2, #4]
 80082f2:	e7ca      	b.n	800828a <_free_r+0x26>
 80082f4:	b003      	add	sp, #12
 80082f6:	bd30      	pop	{r4, r5, pc}
 80082f8:	20000668 	.word	0x20000668

080082fc <sbrk_aligned>:
 80082fc:	b570      	push	{r4, r5, r6, lr}
 80082fe:	4e0e      	ldr	r6, [pc, #56]	; (8008338 <sbrk_aligned+0x3c>)
 8008300:	460c      	mov	r4, r1
 8008302:	6831      	ldr	r1, [r6, #0]
 8008304:	4605      	mov	r5, r0
 8008306:	b911      	cbnz	r1, 800830e <sbrk_aligned+0x12>
 8008308:	f000 f9e6 	bl	80086d8 <_sbrk_r>
 800830c:	6030      	str	r0, [r6, #0]
 800830e:	4621      	mov	r1, r4
 8008310:	4628      	mov	r0, r5
 8008312:	f000 f9e1 	bl	80086d8 <_sbrk_r>
 8008316:	1c43      	adds	r3, r0, #1
 8008318:	d00a      	beq.n	8008330 <sbrk_aligned+0x34>
 800831a:	1cc4      	adds	r4, r0, #3
 800831c:	f024 0403 	bic.w	r4, r4, #3
 8008320:	42a0      	cmp	r0, r4
 8008322:	d007      	beq.n	8008334 <sbrk_aligned+0x38>
 8008324:	1a21      	subs	r1, r4, r0
 8008326:	4628      	mov	r0, r5
 8008328:	f000 f9d6 	bl	80086d8 <_sbrk_r>
 800832c:	3001      	adds	r0, #1
 800832e:	d101      	bne.n	8008334 <sbrk_aligned+0x38>
 8008330:	f04f 34ff 	mov.w	r4, #4294967295
 8008334:	4620      	mov	r0, r4
 8008336:	bd70      	pop	{r4, r5, r6, pc}
 8008338:	2000066c 	.word	0x2000066c

0800833c <_malloc_r>:
 800833c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008340:	1ccd      	adds	r5, r1, #3
 8008342:	f025 0503 	bic.w	r5, r5, #3
 8008346:	3508      	adds	r5, #8
 8008348:	2d0c      	cmp	r5, #12
 800834a:	bf38      	it	cc
 800834c:	250c      	movcc	r5, #12
 800834e:	2d00      	cmp	r5, #0
 8008350:	4607      	mov	r7, r0
 8008352:	db01      	blt.n	8008358 <_malloc_r+0x1c>
 8008354:	42a9      	cmp	r1, r5
 8008356:	d905      	bls.n	8008364 <_malloc_r+0x28>
 8008358:	230c      	movs	r3, #12
 800835a:	603b      	str	r3, [r7, #0]
 800835c:	2600      	movs	r6, #0
 800835e:	4630      	mov	r0, r6
 8008360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008364:	4e2e      	ldr	r6, [pc, #184]	; (8008420 <_malloc_r+0xe4>)
 8008366:	f000 faa3 	bl	80088b0 <__malloc_lock>
 800836a:	6833      	ldr	r3, [r6, #0]
 800836c:	461c      	mov	r4, r3
 800836e:	bb34      	cbnz	r4, 80083be <_malloc_r+0x82>
 8008370:	4629      	mov	r1, r5
 8008372:	4638      	mov	r0, r7
 8008374:	f7ff ffc2 	bl	80082fc <sbrk_aligned>
 8008378:	1c43      	adds	r3, r0, #1
 800837a:	4604      	mov	r4, r0
 800837c:	d14d      	bne.n	800841a <_malloc_r+0xde>
 800837e:	6834      	ldr	r4, [r6, #0]
 8008380:	4626      	mov	r6, r4
 8008382:	2e00      	cmp	r6, #0
 8008384:	d140      	bne.n	8008408 <_malloc_r+0xcc>
 8008386:	6823      	ldr	r3, [r4, #0]
 8008388:	4631      	mov	r1, r6
 800838a:	4638      	mov	r0, r7
 800838c:	eb04 0803 	add.w	r8, r4, r3
 8008390:	f000 f9a2 	bl	80086d8 <_sbrk_r>
 8008394:	4580      	cmp	r8, r0
 8008396:	d13a      	bne.n	800840e <_malloc_r+0xd2>
 8008398:	6821      	ldr	r1, [r4, #0]
 800839a:	3503      	adds	r5, #3
 800839c:	1a6d      	subs	r5, r5, r1
 800839e:	f025 0503 	bic.w	r5, r5, #3
 80083a2:	3508      	adds	r5, #8
 80083a4:	2d0c      	cmp	r5, #12
 80083a6:	bf38      	it	cc
 80083a8:	250c      	movcc	r5, #12
 80083aa:	4629      	mov	r1, r5
 80083ac:	4638      	mov	r0, r7
 80083ae:	f7ff ffa5 	bl	80082fc <sbrk_aligned>
 80083b2:	3001      	adds	r0, #1
 80083b4:	d02b      	beq.n	800840e <_malloc_r+0xd2>
 80083b6:	6823      	ldr	r3, [r4, #0]
 80083b8:	442b      	add	r3, r5
 80083ba:	6023      	str	r3, [r4, #0]
 80083bc:	e00e      	b.n	80083dc <_malloc_r+0xa0>
 80083be:	6822      	ldr	r2, [r4, #0]
 80083c0:	1b52      	subs	r2, r2, r5
 80083c2:	d41e      	bmi.n	8008402 <_malloc_r+0xc6>
 80083c4:	2a0b      	cmp	r2, #11
 80083c6:	d916      	bls.n	80083f6 <_malloc_r+0xba>
 80083c8:	1961      	adds	r1, r4, r5
 80083ca:	42a3      	cmp	r3, r4
 80083cc:	6025      	str	r5, [r4, #0]
 80083ce:	bf18      	it	ne
 80083d0:	6059      	strne	r1, [r3, #4]
 80083d2:	6863      	ldr	r3, [r4, #4]
 80083d4:	bf08      	it	eq
 80083d6:	6031      	streq	r1, [r6, #0]
 80083d8:	5162      	str	r2, [r4, r5]
 80083da:	604b      	str	r3, [r1, #4]
 80083dc:	4638      	mov	r0, r7
 80083de:	f104 060b 	add.w	r6, r4, #11
 80083e2:	f000 fa6b 	bl	80088bc <__malloc_unlock>
 80083e6:	f026 0607 	bic.w	r6, r6, #7
 80083ea:	1d23      	adds	r3, r4, #4
 80083ec:	1af2      	subs	r2, r6, r3
 80083ee:	d0b6      	beq.n	800835e <_malloc_r+0x22>
 80083f0:	1b9b      	subs	r3, r3, r6
 80083f2:	50a3      	str	r3, [r4, r2]
 80083f4:	e7b3      	b.n	800835e <_malloc_r+0x22>
 80083f6:	6862      	ldr	r2, [r4, #4]
 80083f8:	42a3      	cmp	r3, r4
 80083fa:	bf0c      	ite	eq
 80083fc:	6032      	streq	r2, [r6, #0]
 80083fe:	605a      	strne	r2, [r3, #4]
 8008400:	e7ec      	b.n	80083dc <_malloc_r+0xa0>
 8008402:	4623      	mov	r3, r4
 8008404:	6864      	ldr	r4, [r4, #4]
 8008406:	e7b2      	b.n	800836e <_malloc_r+0x32>
 8008408:	4634      	mov	r4, r6
 800840a:	6876      	ldr	r6, [r6, #4]
 800840c:	e7b9      	b.n	8008382 <_malloc_r+0x46>
 800840e:	230c      	movs	r3, #12
 8008410:	603b      	str	r3, [r7, #0]
 8008412:	4638      	mov	r0, r7
 8008414:	f000 fa52 	bl	80088bc <__malloc_unlock>
 8008418:	e7a1      	b.n	800835e <_malloc_r+0x22>
 800841a:	6025      	str	r5, [r4, #0]
 800841c:	e7de      	b.n	80083dc <_malloc_r+0xa0>
 800841e:	bf00      	nop
 8008420:	20000668 	.word	0x20000668

08008424 <__sfputc_r>:
 8008424:	6893      	ldr	r3, [r2, #8]
 8008426:	3b01      	subs	r3, #1
 8008428:	2b00      	cmp	r3, #0
 800842a:	b410      	push	{r4}
 800842c:	6093      	str	r3, [r2, #8]
 800842e:	da08      	bge.n	8008442 <__sfputc_r+0x1e>
 8008430:	6994      	ldr	r4, [r2, #24]
 8008432:	42a3      	cmp	r3, r4
 8008434:	db01      	blt.n	800843a <__sfputc_r+0x16>
 8008436:	290a      	cmp	r1, #10
 8008438:	d103      	bne.n	8008442 <__sfputc_r+0x1e>
 800843a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800843e:	f7fe ba03 	b.w	8006848 <__swbuf_r>
 8008442:	6813      	ldr	r3, [r2, #0]
 8008444:	1c58      	adds	r0, r3, #1
 8008446:	6010      	str	r0, [r2, #0]
 8008448:	7019      	strb	r1, [r3, #0]
 800844a:	4608      	mov	r0, r1
 800844c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008450:	4770      	bx	lr

08008452 <__sfputs_r>:
 8008452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008454:	4606      	mov	r6, r0
 8008456:	460f      	mov	r7, r1
 8008458:	4614      	mov	r4, r2
 800845a:	18d5      	adds	r5, r2, r3
 800845c:	42ac      	cmp	r4, r5
 800845e:	d101      	bne.n	8008464 <__sfputs_r+0x12>
 8008460:	2000      	movs	r0, #0
 8008462:	e007      	b.n	8008474 <__sfputs_r+0x22>
 8008464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008468:	463a      	mov	r2, r7
 800846a:	4630      	mov	r0, r6
 800846c:	f7ff ffda 	bl	8008424 <__sfputc_r>
 8008470:	1c43      	adds	r3, r0, #1
 8008472:	d1f3      	bne.n	800845c <__sfputs_r+0xa>
 8008474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008478 <_vfiprintf_r>:
 8008478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847c:	460d      	mov	r5, r1
 800847e:	b09d      	sub	sp, #116	; 0x74
 8008480:	4614      	mov	r4, r2
 8008482:	4698      	mov	r8, r3
 8008484:	4606      	mov	r6, r0
 8008486:	b118      	cbz	r0, 8008490 <_vfiprintf_r+0x18>
 8008488:	6983      	ldr	r3, [r0, #24]
 800848a:	b90b      	cbnz	r3, 8008490 <_vfiprintf_r+0x18>
 800848c:	f7ff fa30 	bl	80078f0 <__sinit>
 8008490:	4b89      	ldr	r3, [pc, #548]	; (80086b8 <_vfiprintf_r+0x240>)
 8008492:	429d      	cmp	r5, r3
 8008494:	d11b      	bne.n	80084ce <_vfiprintf_r+0x56>
 8008496:	6875      	ldr	r5, [r6, #4]
 8008498:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800849a:	07d9      	lsls	r1, r3, #31
 800849c:	d405      	bmi.n	80084aa <_vfiprintf_r+0x32>
 800849e:	89ab      	ldrh	r3, [r5, #12]
 80084a0:	059a      	lsls	r2, r3, #22
 80084a2:	d402      	bmi.n	80084aa <_vfiprintf_r+0x32>
 80084a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084a6:	f7ff fac6 	bl	8007a36 <__retarget_lock_acquire_recursive>
 80084aa:	89ab      	ldrh	r3, [r5, #12]
 80084ac:	071b      	lsls	r3, r3, #28
 80084ae:	d501      	bpl.n	80084b4 <_vfiprintf_r+0x3c>
 80084b0:	692b      	ldr	r3, [r5, #16]
 80084b2:	b9eb      	cbnz	r3, 80084f0 <_vfiprintf_r+0x78>
 80084b4:	4629      	mov	r1, r5
 80084b6:	4630      	mov	r0, r6
 80084b8:	f7fe fa18 	bl	80068ec <__swsetup_r>
 80084bc:	b1c0      	cbz	r0, 80084f0 <_vfiprintf_r+0x78>
 80084be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084c0:	07dc      	lsls	r4, r3, #31
 80084c2:	d50e      	bpl.n	80084e2 <_vfiprintf_r+0x6a>
 80084c4:	f04f 30ff 	mov.w	r0, #4294967295
 80084c8:	b01d      	add	sp, #116	; 0x74
 80084ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ce:	4b7b      	ldr	r3, [pc, #492]	; (80086bc <_vfiprintf_r+0x244>)
 80084d0:	429d      	cmp	r5, r3
 80084d2:	d101      	bne.n	80084d8 <_vfiprintf_r+0x60>
 80084d4:	68b5      	ldr	r5, [r6, #8]
 80084d6:	e7df      	b.n	8008498 <_vfiprintf_r+0x20>
 80084d8:	4b79      	ldr	r3, [pc, #484]	; (80086c0 <_vfiprintf_r+0x248>)
 80084da:	429d      	cmp	r5, r3
 80084dc:	bf08      	it	eq
 80084de:	68f5      	ldreq	r5, [r6, #12]
 80084e0:	e7da      	b.n	8008498 <_vfiprintf_r+0x20>
 80084e2:	89ab      	ldrh	r3, [r5, #12]
 80084e4:	0598      	lsls	r0, r3, #22
 80084e6:	d4ed      	bmi.n	80084c4 <_vfiprintf_r+0x4c>
 80084e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084ea:	f7ff faa5 	bl	8007a38 <__retarget_lock_release_recursive>
 80084ee:	e7e9      	b.n	80084c4 <_vfiprintf_r+0x4c>
 80084f0:	2300      	movs	r3, #0
 80084f2:	9309      	str	r3, [sp, #36]	; 0x24
 80084f4:	2320      	movs	r3, #32
 80084f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80084fe:	2330      	movs	r3, #48	; 0x30
 8008500:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80086c4 <_vfiprintf_r+0x24c>
 8008504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008508:	f04f 0901 	mov.w	r9, #1
 800850c:	4623      	mov	r3, r4
 800850e:	469a      	mov	sl, r3
 8008510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008514:	b10a      	cbz	r2, 800851a <_vfiprintf_r+0xa2>
 8008516:	2a25      	cmp	r2, #37	; 0x25
 8008518:	d1f9      	bne.n	800850e <_vfiprintf_r+0x96>
 800851a:	ebba 0b04 	subs.w	fp, sl, r4
 800851e:	d00b      	beq.n	8008538 <_vfiprintf_r+0xc0>
 8008520:	465b      	mov	r3, fp
 8008522:	4622      	mov	r2, r4
 8008524:	4629      	mov	r1, r5
 8008526:	4630      	mov	r0, r6
 8008528:	f7ff ff93 	bl	8008452 <__sfputs_r>
 800852c:	3001      	adds	r0, #1
 800852e:	f000 80aa 	beq.w	8008686 <_vfiprintf_r+0x20e>
 8008532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008534:	445a      	add	r2, fp
 8008536:	9209      	str	r2, [sp, #36]	; 0x24
 8008538:	f89a 3000 	ldrb.w	r3, [sl]
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 80a2 	beq.w	8008686 <_vfiprintf_r+0x20e>
 8008542:	2300      	movs	r3, #0
 8008544:	f04f 32ff 	mov.w	r2, #4294967295
 8008548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800854c:	f10a 0a01 	add.w	sl, sl, #1
 8008550:	9304      	str	r3, [sp, #16]
 8008552:	9307      	str	r3, [sp, #28]
 8008554:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008558:	931a      	str	r3, [sp, #104]	; 0x68
 800855a:	4654      	mov	r4, sl
 800855c:	2205      	movs	r2, #5
 800855e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008562:	4858      	ldr	r0, [pc, #352]	; (80086c4 <_vfiprintf_r+0x24c>)
 8008564:	f7f7 fe14 	bl	8000190 <memchr>
 8008568:	9a04      	ldr	r2, [sp, #16]
 800856a:	b9d8      	cbnz	r0, 80085a4 <_vfiprintf_r+0x12c>
 800856c:	06d1      	lsls	r1, r2, #27
 800856e:	bf44      	itt	mi
 8008570:	2320      	movmi	r3, #32
 8008572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008576:	0713      	lsls	r3, r2, #28
 8008578:	bf44      	itt	mi
 800857a:	232b      	movmi	r3, #43	; 0x2b
 800857c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008580:	f89a 3000 	ldrb.w	r3, [sl]
 8008584:	2b2a      	cmp	r3, #42	; 0x2a
 8008586:	d015      	beq.n	80085b4 <_vfiprintf_r+0x13c>
 8008588:	9a07      	ldr	r2, [sp, #28]
 800858a:	4654      	mov	r4, sl
 800858c:	2000      	movs	r0, #0
 800858e:	f04f 0c0a 	mov.w	ip, #10
 8008592:	4621      	mov	r1, r4
 8008594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008598:	3b30      	subs	r3, #48	; 0x30
 800859a:	2b09      	cmp	r3, #9
 800859c:	d94e      	bls.n	800863c <_vfiprintf_r+0x1c4>
 800859e:	b1b0      	cbz	r0, 80085ce <_vfiprintf_r+0x156>
 80085a0:	9207      	str	r2, [sp, #28]
 80085a2:	e014      	b.n	80085ce <_vfiprintf_r+0x156>
 80085a4:	eba0 0308 	sub.w	r3, r0, r8
 80085a8:	fa09 f303 	lsl.w	r3, r9, r3
 80085ac:	4313      	orrs	r3, r2
 80085ae:	9304      	str	r3, [sp, #16]
 80085b0:	46a2      	mov	sl, r4
 80085b2:	e7d2      	b.n	800855a <_vfiprintf_r+0xe2>
 80085b4:	9b03      	ldr	r3, [sp, #12]
 80085b6:	1d19      	adds	r1, r3, #4
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	9103      	str	r1, [sp, #12]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	bfbb      	ittet	lt
 80085c0:	425b      	neglt	r3, r3
 80085c2:	f042 0202 	orrlt.w	r2, r2, #2
 80085c6:	9307      	strge	r3, [sp, #28]
 80085c8:	9307      	strlt	r3, [sp, #28]
 80085ca:	bfb8      	it	lt
 80085cc:	9204      	strlt	r2, [sp, #16]
 80085ce:	7823      	ldrb	r3, [r4, #0]
 80085d0:	2b2e      	cmp	r3, #46	; 0x2e
 80085d2:	d10c      	bne.n	80085ee <_vfiprintf_r+0x176>
 80085d4:	7863      	ldrb	r3, [r4, #1]
 80085d6:	2b2a      	cmp	r3, #42	; 0x2a
 80085d8:	d135      	bne.n	8008646 <_vfiprintf_r+0x1ce>
 80085da:	9b03      	ldr	r3, [sp, #12]
 80085dc:	1d1a      	adds	r2, r3, #4
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	9203      	str	r2, [sp, #12]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	bfb8      	it	lt
 80085e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80085ea:	3402      	adds	r4, #2
 80085ec:	9305      	str	r3, [sp, #20]
 80085ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80086d4 <_vfiprintf_r+0x25c>
 80085f2:	7821      	ldrb	r1, [r4, #0]
 80085f4:	2203      	movs	r2, #3
 80085f6:	4650      	mov	r0, sl
 80085f8:	f7f7 fdca 	bl	8000190 <memchr>
 80085fc:	b140      	cbz	r0, 8008610 <_vfiprintf_r+0x198>
 80085fe:	2340      	movs	r3, #64	; 0x40
 8008600:	eba0 000a 	sub.w	r0, r0, sl
 8008604:	fa03 f000 	lsl.w	r0, r3, r0
 8008608:	9b04      	ldr	r3, [sp, #16]
 800860a:	4303      	orrs	r3, r0
 800860c:	3401      	adds	r4, #1
 800860e:	9304      	str	r3, [sp, #16]
 8008610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008614:	482c      	ldr	r0, [pc, #176]	; (80086c8 <_vfiprintf_r+0x250>)
 8008616:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800861a:	2206      	movs	r2, #6
 800861c:	f7f7 fdb8 	bl	8000190 <memchr>
 8008620:	2800      	cmp	r0, #0
 8008622:	d03f      	beq.n	80086a4 <_vfiprintf_r+0x22c>
 8008624:	4b29      	ldr	r3, [pc, #164]	; (80086cc <_vfiprintf_r+0x254>)
 8008626:	bb1b      	cbnz	r3, 8008670 <_vfiprintf_r+0x1f8>
 8008628:	9b03      	ldr	r3, [sp, #12]
 800862a:	3307      	adds	r3, #7
 800862c:	f023 0307 	bic.w	r3, r3, #7
 8008630:	3308      	adds	r3, #8
 8008632:	9303      	str	r3, [sp, #12]
 8008634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008636:	443b      	add	r3, r7
 8008638:	9309      	str	r3, [sp, #36]	; 0x24
 800863a:	e767      	b.n	800850c <_vfiprintf_r+0x94>
 800863c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008640:	460c      	mov	r4, r1
 8008642:	2001      	movs	r0, #1
 8008644:	e7a5      	b.n	8008592 <_vfiprintf_r+0x11a>
 8008646:	2300      	movs	r3, #0
 8008648:	3401      	adds	r4, #1
 800864a:	9305      	str	r3, [sp, #20]
 800864c:	4619      	mov	r1, r3
 800864e:	f04f 0c0a 	mov.w	ip, #10
 8008652:	4620      	mov	r0, r4
 8008654:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008658:	3a30      	subs	r2, #48	; 0x30
 800865a:	2a09      	cmp	r2, #9
 800865c:	d903      	bls.n	8008666 <_vfiprintf_r+0x1ee>
 800865e:	2b00      	cmp	r3, #0
 8008660:	d0c5      	beq.n	80085ee <_vfiprintf_r+0x176>
 8008662:	9105      	str	r1, [sp, #20]
 8008664:	e7c3      	b.n	80085ee <_vfiprintf_r+0x176>
 8008666:	fb0c 2101 	mla	r1, ip, r1, r2
 800866a:	4604      	mov	r4, r0
 800866c:	2301      	movs	r3, #1
 800866e:	e7f0      	b.n	8008652 <_vfiprintf_r+0x1da>
 8008670:	ab03      	add	r3, sp, #12
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	462a      	mov	r2, r5
 8008676:	4b16      	ldr	r3, [pc, #88]	; (80086d0 <_vfiprintf_r+0x258>)
 8008678:	a904      	add	r1, sp, #16
 800867a:	4630      	mov	r0, r6
 800867c:	f7fd fc8c 	bl	8005f98 <_printf_float>
 8008680:	4607      	mov	r7, r0
 8008682:	1c78      	adds	r0, r7, #1
 8008684:	d1d6      	bne.n	8008634 <_vfiprintf_r+0x1bc>
 8008686:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008688:	07d9      	lsls	r1, r3, #31
 800868a:	d405      	bmi.n	8008698 <_vfiprintf_r+0x220>
 800868c:	89ab      	ldrh	r3, [r5, #12]
 800868e:	059a      	lsls	r2, r3, #22
 8008690:	d402      	bmi.n	8008698 <_vfiprintf_r+0x220>
 8008692:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008694:	f7ff f9d0 	bl	8007a38 <__retarget_lock_release_recursive>
 8008698:	89ab      	ldrh	r3, [r5, #12]
 800869a:	065b      	lsls	r3, r3, #25
 800869c:	f53f af12 	bmi.w	80084c4 <_vfiprintf_r+0x4c>
 80086a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086a2:	e711      	b.n	80084c8 <_vfiprintf_r+0x50>
 80086a4:	ab03      	add	r3, sp, #12
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	462a      	mov	r2, r5
 80086aa:	4b09      	ldr	r3, [pc, #36]	; (80086d0 <_vfiprintf_r+0x258>)
 80086ac:	a904      	add	r1, sp, #16
 80086ae:	4630      	mov	r0, r6
 80086b0:	f7fd ff16 	bl	80064e0 <_printf_i>
 80086b4:	e7e4      	b.n	8008680 <_vfiprintf_r+0x208>
 80086b6:	bf00      	nop
 80086b8:	08008c48 	.word	0x08008c48
 80086bc:	08008c68 	.word	0x08008c68
 80086c0:	08008c28 	.word	0x08008c28
 80086c4:	08008de4 	.word	0x08008de4
 80086c8:	08008dee 	.word	0x08008dee
 80086cc:	08005f99 	.word	0x08005f99
 80086d0:	08008453 	.word	0x08008453
 80086d4:	08008dea 	.word	0x08008dea

080086d8 <_sbrk_r>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4d06      	ldr	r5, [pc, #24]	; (80086f4 <_sbrk_r+0x1c>)
 80086dc:	2300      	movs	r3, #0
 80086de:	4604      	mov	r4, r0
 80086e0:	4608      	mov	r0, r1
 80086e2:	602b      	str	r3, [r5, #0]
 80086e4:	f7f9 f93e 	bl	8001964 <_sbrk>
 80086e8:	1c43      	adds	r3, r0, #1
 80086ea:	d102      	bne.n	80086f2 <_sbrk_r+0x1a>
 80086ec:	682b      	ldr	r3, [r5, #0]
 80086ee:	b103      	cbz	r3, 80086f2 <_sbrk_r+0x1a>
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
 80086f4:	20000670 	.word	0x20000670

080086f8 <__sread>:
 80086f8:	b510      	push	{r4, lr}
 80086fa:	460c      	mov	r4, r1
 80086fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008700:	f000 f8e2 	bl	80088c8 <_read_r>
 8008704:	2800      	cmp	r0, #0
 8008706:	bfab      	itete	ge
 8008708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800870a:	89a3      	ldrhlt	r3, [r4, #12]
 800870c:	181b      	addge	r3, r3, r0
 800870e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008712:	bfac      	ite	ge
 8008714:	6563      	strge	r3, [r4, #84]	; 0x54
 8008716:	81a3      	strhlt	r3, [r4, #12]
 8008718:	bd10      	pop	{r4, pc}

0800871a <__swrite>:
 800871a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800871e:	461f      	mov	r7, r3
 8008720:	898b      	ldrh	r3, [r1, #12]
 8008722:	05db      	lsls	r3, r3, #23
 8008724:	4605      	mov	r5, r0
 8008726:	460c      	mov	r4, r1
 8008728:	4616      	mov	r6, r2
 800872a:	d505      	bpl.n	8008738 <__swrite+0x1e>
 800872c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008730:	2302      	movs	r3, #2
 8008732:	2200      	movs	r2, #0
 8008734:	f000 f898 	bl	8008868 <_lseek_r>
 8008738:	89a3      	ldrh	r3, [r4, #12]
 800873a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800873e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008742:	81a3      	strh	r3, [r4, #12]
 8008744:	4632      	mov	r2, r6
 8008746:	463b      	mov	r3, r7
 8008748:	4628      	mov	r0, r5
 800874a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800874e:	f000 b817 	b.w	8008780 <_write_r>

08008752 <__sseek>:
 8008752:	b510      	push	{r4, lr}
 8008754:	460c      	mov	r4, r1
 8008756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800875a:	f000 f885 	bl	8008868 <_lseek_r>
 800875e:	1c43      	adds	r3, r0, #1
 8008760:	89a3      	ldrh	r3, [r4, #12]
 8008762:	bf15      	itete	ne
 8008764:	6560      	strne	r0, [r4, #84]	; 0x54
 8008766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800876a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800876e:	81a3      	strheq	r3, [r4, #12]
 8008770:	bf18      	it	ne
 8008772:	81a3      	strhne	r3, [r4, #12]
 8008774:	bd10      	pop	{r4, pc}

08008776 <__sclose>:
 8008776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800877a:	f000 b831 	b.w	80087e0 <_close_r>
	...

08008780 <_write_r>:
 8008780:	b538      	push	{r3, r4, r5, lr}
 8008782:	4d07      	ldr	r5, [pc, #28]	; (80087a0 <_write_r+0x20>)
 8008784:	4604      	mov	r4, r0
 8008786:	4608      	mov	r0, r1
 8008788:	4611      	mov	r1, r2
 800878a:	2200      	movs	r2, #0
 800878c:	602a      	str	r2, [r5, #0]
 800878e:	461a      	mov	r2, r3
 8008790:	f7f8 fcd1 	bl	8001136 <_write>
 8008794:	1c43      	adds	r3, r0, #1
 8008796:	d102      	bne.n	800879e <_write_r+0x1e>
 8008798:	682b      	ldr	r3, [r5, #0]
 800879a:	b103      	cbz	r3, 800879e <_write_r+0x1e>
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	20000670 	.word	0x20000670

080087a4 <__assert_func>:
 80087a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087a6:	4614      	mov	r4, r2
 80087a8:	461a      	mov	r2, r3
 80087aa:	4b09      	ldr	r3, [pc, #36]	; (80087d0 <__assert_func+0x2c>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4605      	mov	r5, r0
 80087b0:	68d8      	ldr	r0, [r3, #12]
 80087b2:	b14c      	cbz	r4, 80087c8 <__assert_func+0x24>
 80087b4:	4b07      	ldr	r3, [pc, #28]	; (80087d4 <__assert_func+0x30>)
 80087b6:	9100      	str	r1, [sp, #0]
 80087b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087bc:	4906      	ldr	r1, [pc, #24]	; (80087d8 <__assert_func+0x34>)
 80087be:	462b      	mov	r3, r5
 80087c0:	f000 f81e 	bl	8008800 <fiprintf>
 80087c4:	f000 f89f 	bl	8008906 <abort>
 80087c8:	4b04      	ldr	r3, [pc, #16]	; (80087dc <__assert_func+0x38>)
 80087ca:	461c      	mov	r4, r3
 80087cc:	e7f3      	b.n	80087b6 <__assert_func+0x12>
 80087ce:	bf00      	nop
 80087d0:	20000014 	.word	0x20000014
 80087d4:	08008df5 	.word	0x08008df5
 80087d8:	08008e02 	.word	0x08008e02
 80087dc:	08008e30 	.word	0x08008e30

080087e0 <_close_r>:
 80087e0:	b538      	push	{r3, r4, r5, lr}
 80087e2:	4d06      	ldr	r5, [pc, #24]	; (80087fc <_close_r+0x1c>)
 80087e4:	2300      	movs	r3, #0
 80087e6:	4604      	mov	r4, r0
 80087e8:	4608      	mov	r0, r1
 80087ea:	602b      	str	r3, [r5, #0]
 80087ec:	f7f9 f885 	bl	80018fa <_close>
 80087f0:	1c43      	adds	r3, r0, #1
 80087f2:	d102      	bne.n	80087fa <_close_r+0x1a>
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	b103      	cbz	r3, 80087fa <_close_r+0x1a>
 80087f8:	6023      	str	r3, [r4, #0]
 80087fa:	bd38      	pop	{r3, r4, r5, pc}
 80087fc:	20000670 	.word	0x20000670

08008800 <fiprintf>:
 8008800:	b40e      	push	{r1, r2, r3}
 8008802:	b503      	push	{r0, r1, lr}
 8008804:	4601      	mov	r1, r0
 8008806:	ab03      	add	r3, sp, #12
 8008808:	4805      	ldr	r0, [pc, #20]	; (8008820 <fiprintf+0x20>)
 800880a:	f853 2b04 	ldr.w	r2, [r3], #4
 800880e:	6800      	ldr	r0, [r0, #0]
 8008810:	9301      	str	r3, [sp, #4]
 8008812:	f7ff fe31 	bl	8008478 <_vfiprintf_r>
 8008816:	b002      	add	sp, #8
 8008818:	f85d eb04 	ldr.w	lr, [sp], #4
 800881c:	b003      	add	sp, #12
 800881e:	4770      	bx	lr
 8008820:	20000014 	.word	0x20000014

08008824 <_fstat_r>:
 8008824:	b538      	push	{r3, r4, r5, lr}
 8008826:	4d07      	ldr	r5, [pc, #28]	; (8008844 <_fstat_r+0x20>)
 8008828:	2300      	movs	r3, #0
 800882a:	4604      	mov	r4, r0
 800882c:	4608      	mov	r0, r1
 800882e:	4611      	mov	r1, r2
 8008830:	602b      	str	r3, [r5, #0]
 8008832:	f7f9 f86e 	bl	8001912 <_fstat>
 8008836:	1c43      	adds	r3, r0, #1
 8008838:	d102      	bne.n	8008840 <_fstat_r+0x1c>
 800883a:	682b      	ldr	r3, [r5, #0]
 800883c:	b103      	cbz	r3, 8008840 <_fstat_r+0x1c>
 800883e:	6023      	str	r3, [r4, #0]
 8008840:	bd38      	pop	{r3, r4, r5, pc}
 8008842:	bf00      	nop
 8008844:	20000670 	.word	0x20000670

08008848 <_isatty_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	4d06      	ldr	r5, [pc, #24]	; (8008864 <_isatty_r+0x1c>)
 800884c:	2300      	movs	r3, #0
 800884e:	4604      	mov	r4, r0
 8008850:	4608      	mov	r0, r1
 8008852:	602b      	str	r3, [r5, #0]
 8008854:	f7f9 f86d 	bl	8001932 <_isatty>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	d102      	bne.n	8008862 <_isatty_r+0x1a>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	b103      	cbz	r3, 8008862 <_isatty_r+0x1a>
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	bd38      	pop	{r3, r4, r5, pc}
 8008864:	20000670 	.word	0x20000670

08008868 <_lseek_r>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	4d07      	ldr	r5, [pc, #28]	; (8008888 <_lseek_r+0x20>)
 800886c:	4604      	mov	r4, r0
 800886e:	4608      	mov	r0, r1
 8008870:	4611      	mov	r1, r2
 8008872:	2200      	movs	r2, #0
 8008874:	602a      	str	r2, [r5, #0]
 8008876:	461a      	mov	r2, r3
 8008878:	f7f9 f866 	bl	8001948 <_lseek>
 800887c:	1c43      	adds	r3, r0, #1
 800887e:	d102      	bne.n	8008886 <_lseek_r+0x1e>
 8008880:	682b      	ldr	r3, [r5, #0]
 8008882:	b103      	cbz	r3, 8008886 <_lseek_r+0x1e>
 8008884:	6023      	str	r3, [r4, #0]
 8008886:	bd38      	pop	{r3, r4, r5, pc}
 8008888:	20000670 	.word	0x20000670

0800888c <__ascii_mbtowc>:
 800888c:	b082      	sub	sp, #8
 800888e:	b901      	cbnz	r1, 8008892 <__ascii_mbtowc+0x6>
 8008890:	a901      	add	r1, sp, #4
 8008892:	b142      	cbz	r2, 80088a6 <__ascii_mbtowc+0x1a>
 8008894:	b14b      	cbz	r3, 80088aa <__ascii_mbtowc+0x1e>
 8008896:	7813      	ldrb	r3, [r2, #0]
 8008898:	600b      	str	r3, [r1, #0]
 800889a:	7812      	ldrb	r2, [r2, #0]
 800889c:	1e10      	subs	r0, r2, #0
 800889e:	bf18      	it	ne
 80088a0:	2001      	movne	r0, #1
 80088a2:	b002      	add	sp, #8
 80088a4:	4770      	bx	lr
 80088a6:	4610      	mov	r0, r2
 80088a8:	e7fb      	b.n	80088a2 <__ascii_mbtowc+0x16>
 80088aa:	f06f 0001 	mvn.w	r0, #1
 80088ae:	e7f8      	b.n	80088a2 <__ascii_mbtowc+0x16>

080088b0 <__malloc_lock>:
 80088b0:	4801      	ldr	r0, [pc, #4]	; (80088b8 <__malloc_lock+0x8>)
 80088b2:	f7ff b8c0 	b.w	8007a36 <__retarget_lock_acquire_recursive>
 80088b6:	bf00      	nop
 80088b8:	20000664 	.word	0x20000664

080088bc <__malloc_unlock>:
 80088bc:	4801      	ldr	r0, [pc, #4]	; (80088c4 <__malloc_unlock+0x8>)
 80088be:	f7ff b8bb 	b.w	8007a38 <__retarget_lock_release_recursive>
 80088c2:	bf00      	nop
 80088c4:	20000664 	.word	0x20000664

080088c8 <_read_r>:
 80088c8:	b538      	push	{r3, r4, r5, lr}
 80088ca:	4d07      	ldr	r5, [pc, #28]	; (80088e8 <_read_r+0x20>)
 80088cc:	4604      	mov	r4, r0
 80088ce:	4608      	mov	r0, r1
 80088d0:	4611      	mov	r1, r2
 80088d2:	2200      	movs	r2, #0
 80088d4:	602a      	str	r2, [r5, #0]
 80088d6:	461a      	mov	r2, r3
 80088d8:	f7f8 fff2 	bl	80018c0 <_read>
 80088dc:	1c43      	adds	r3, r0, #1
 80088de:	d102      	bne.n	80088e6 <_read_r+0x1e>
 80088e0:	682b      	ldr	r3, [r5, #0]
 80088e2:	b103      	cbz	r3, 80088e6 <_read_r+0x1e>
 80088e4:	6023      	str	r3, [r4, #0]
 80088e6:	bd38      	pop	{r3, r4, r5, pc}
 80088e8:	20000670 	.word	0x20000670

080088ec <__ascii_wctomb>:
 80088ec:	b149      	cbz	r1, 8008902 <__ascii_wctomb+0x16>
 80088ee:	2aff      	cmp	r2, #255	; 0xff
 80088f0:	bf85      	ittet	hi
 80088f2:	238a      	movhi	r3, #138	; 0x8a
 80088f4:	6003      	strhi	r3, [r0, #0]
 80088f6:	700a      	strbls	r2, [r1, #0]
 80088f8:	f04f 30ff 	movhi.w	r0, #4294967295
 80088fc:	bf98      	it	ls
 80088fe:	2001      	movls	r0, #1
 8008900:	4770      	bx	lr
 8008902:	4608      	mov	r0, r1
 8008904:	4770      	bx	lr

08008906 <abort>:
 8008906:	b508      	push	{r3, lr}
 8008908:	2006      	movs	r0, #6
 800890a:	f000 f82b 	bl	8008964 <raise>
 800890e:	2001      	movs	r0, #1
 8008910:	f7f8 ffcc 	bl	80018ac <_exit>

08008914 <_raise_r>:
 8008914:	291f      	cmp	r1, #31
 8008916:	b538      	push	{r3, r4, r5, lr}
 8008918:	4604      	mov	r4, r0
 800891a:	460d      	mov	r5, r1
 800891c:	d904      	bls.n	8008928 <_raise_r+0x14>
 800891e:	2316      	movs	r3, #22
 8008920:	6003      	str	r3, [r0, #0]
 8008922:	f04f 30ff 	mov.w	r0, #4294967295
 8008926:	bd38      	pop	{r3, r4, r5, pc}
 8008928:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800892a:	b112      	cbz	r2, 8008932 <_raise_r+0x1e>
 800892c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008930:	b94b      	cbnz	r3, 8008946 <_raise_r+0x32>
 8008932:	4620      	mov	r0, r4
 8008934:	f000 f830 	bl	8008998 <_getpid_r>
 8008938:	462a      	mov	r2, r5
 800893a:	4601      	mov	r1, r0
 800893c:	4620      	mov	r0, r4
 800893e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008942:	f000 b817 	b.w	8008974 <_kill_r>
 8008946:	2b01      	cmp	r3, #1
 8008948:	d00a      	beq.n	8008960 <_raise_r+0x4c>
 800894a:	1c59      	adds	r1, r3, #1
 800894c:	d103      	bne.n	8008956 <_raise_r+0x42>
 800894e:	2316      	movs	r3, #22
 8008950:	6003      	str	r3, [r0, #0]
 8008952:	2001      	movs	r0, #1
 8008954:	e7e7      	b.n	8008926 <_raise_r+0x12>
 8008956:	2400      	movs	r4, #0
 8008958:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800895c:	4628      	mov	r0, r5
 800895e:	4798      	blx	r3
 8008960:	2000      	movs	r0, #0
 8008962:	e7e0      	b.n	8008926 <_raise_r+0x12>

08008964 <raise>:
 8008964:	4b02      	ldr	r3, [pc, #8]	; (8008970 <raise+0xc>)
 8008966:	4601      	mov	r1, r0
 8008968:	6818      	ldr	r0, [r3, #0]
 800896a:	f7ff bfd3 	b.w	8008914 <_raise_r>
 800896e:	bf00      	nop
 8008970:	20000014 	.word	0x20000014

08008974 <_kill_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	4d07      	ldr	r5, [pc, #28]	; (8008994 <_kill_r+0x20>)
 8008978:	2300      	movs	r3, #0
 800897a:	4604      	mov	r4, r0
 800897c:	4608      	mov	r0, r1
 800897e:	4611      	mov	r1, r2
 8008980:	602b      	str	r3, [r5, #0]
 8008982:	f7f8 ff83 	bl	800188c <_kill>
 8008986:	1c43      	adds	r3, r0, #1
 8008988:	d102      	bne.n	8008990 <_kill_r+0x1c>
 800898a:	682b      	ldr	r3, [r5, #0]
 800898c:	b103      	cbz	r3, 8008990 <_kill_r+0x1c>
 800898e:	6023      	str	r3, [r4, #0]
 8008990:	bd38      	pop	{r3, r4, r5, pc}
 8008992:	bf00      	nop
 8008994:	20000670 	.word	0x20000670

08008998 <_getpid_r>:
 8008998:	f7f8 bf70 	b.w	800187c <_getpid>

0800899c <_init>:
 800899c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899e:	bf00      	nop
 80089a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089a2:	bc08      	pop	{r3}
 80089a4:	469e      	mov	lr, r3
 80089a6:	4770      	bx	lr

080089a8 <_fini>:
 80089a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089aa:	bf00      	nop
 80089ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ae:	bc08      	pop	{r3}
 80089b0:	469e      	mov	lr, r3
 80089b2:	4770      	bx	lr
