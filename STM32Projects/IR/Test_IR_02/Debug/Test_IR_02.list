
Test_IR_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2f4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800a438  0800a438  0001a438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a9dc  0800a9dc  0001a9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a9e0  0800a9e0  0001a9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  20000008  0800a9e4  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001e14  200001e8  0800abc4  000201e8  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001ffc  0800abc4  00021ffc  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
  9 .debug_info   00023acd  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004931  00000000  00000000  00043ce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002300  00000000  00000000  00048618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00002128  00000000  00000000  0004a918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00006391  00000000  00000000  0004ca40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00021069  00000000  00000000  00052dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000f1b74  00000000  00000000  00073e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001659ae  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000a53c  00000000  00000000  00165a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e8 	.word	0x200001e8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a41c 	.word	0x0800a41c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001ec 	.word	0x200001ec
 800017c:	0800a41c 	.word	0x0800a41c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
}
 8000b7e:	bf00      	nop
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b085      	sub	sp, #20
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b96:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4013      	ands	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bae:	68fb      	ldr	r3, [r7, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000bc2:	4a1c      	ldr	r2, [pc, #112]	; (8000c34 <MX_I2C1_Init+0x78>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000bc8:	4a1b      	ldr	r2, [pc, #108]	; (8000c38 <MX_I2C1_Init+0x7c>)
 8000bca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bcc:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd2:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bd8:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bde:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bf6:	480e      	ldr	r0, [pc, #56]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000bf8:	f001 f8ac 	bl	8001d54 <HAL_I2C_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c02:	f000 fa81 	bl	8001108 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c06:	2100      	movs	r1, #0
 8000c08:	4809      	ldr	r0, [pc, #36]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000c0a:	f001 fda7 	bl	800275c <HAL_I2CEx_ConfigAnalogFilter>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c14:	f000 fa78 	bl	8001108 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_I2C1_Init+0x74>)
 8000c1c:	f001 fde9 	bl	80027f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c26:	f000 fa6f 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000204 	.word	0x20000204
 8000c34:	40005400 	.word	0x40005400
 8000c38:	00707cbb 	.word	0x00707cbb

08000c3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b09c      	sub	sp, #112	; 0x70
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	2250      	movs	r2, #80	; 0x50
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f006 fece 	bl	80079fe <memset>
  if(i2cHandle->Instance==I2C1)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a17      	ldr	r2, [pc, #92]	; (8000cc4 <HAL_I2C_MspInit+0x88>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d126      	bne.n	8000cba <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c70:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c76:	f107 030c 	add.w	r3, r7, #12
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f003 fa8e 	bl	800419c <HAL_RCCEx_PeriphCLKConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c86:	f000 fa3f 	bl	8001108 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	f7ff ff64 	bl	8000b58 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c94:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c96:	2312      	movs	r3, #18
 8000c98:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000caa:	4619      	mov	r1, r3
 8000cac:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <HAL_I2C_MspInit+0x8c>)
 8000cae:	f000 fec9 	bl	8001a44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cb2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000cb6:	f7ff ff68 	bl	8000b8a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000cba:	bf00      	nop
 8000cbc:	3770      	adds	r7, #112	; 0x70
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40005400 	.word	0x40005400
 8000cc8:	48000400 	.word	0x48000400

08000ccc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cd4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cd8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d013      	beq.n	8000d0c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ce4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ce8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000cec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d00b      	beq.n	8000d0c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000cf4:	e000      	b.n	8000cf8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000cf6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000cf8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f9      	beq.n	8000cf6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d02:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d0c:	687b      	ldr	r3, [r7, #4]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d2a:	f023 0218 	bic.w	r2, r3, #24
 8000d2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <LL_AHB2_GRP1_EnableClock>:
{
 8000d46:	b480      	push	{r7}
 8000d48:	b085      	sub	sp, #20
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4013      	ands	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	e009      	b.n	8000d9e <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	1c5a      	adds	r2, r3, #1
 8000d8e:	60ba      	str	r2, [r7, #8]
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff9a 	bl	8000ccc <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	dbf1      	blt.n	8000d8a <_write+0x12>
}
return len;
 8000da6:	687b      	ldr	r3, [r7, #4]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db6:	f000 fd11 	bl	80017dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dba:	f000 f85d 	bl	8000e78 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000dbe:	f000 f8d1 	bl	8000f64 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc2:	f000 f915 	bl	8000ff0 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000dc6:	f000 f8eb 	bl	8000fa0 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 8000dca:	f7ff fef7 	bl	8000bbc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  mlx90614_init();
 8000dce:	f000 fa1b 	bl	8001208 <mlx90614_init>
  if(mlx90614_init() == true)printf("Initialization OK ! \n");
 8000dd2:	f000 fa19 	bl	8001208 <mlx90614_init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <main+0x34>
 8000ddc:	481d      	ldr	r0, [pc, #116]	; (8000e54 <main+0xa4>)
 8000dde:	f007 fb9b 	bl	8008518 <puts>
 8000de2:	e002      	b.n	8000dea <main+0x3a>
  else printf("Initialization Failed ! \n");
 8000de4:	481c      	ldr	r0, [pc, #112]	; (8000e58 <main+0xa8>)
 8000de6:	f007 fb97 	bl	8008518 <puts>
  if(cap1->id != NULL)
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <main+0xac>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	3328      	adds	r3, #40	; 0x28
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d00f      	beq.n	8000e14 <main+0x64>
  	if (mlx90614_readID(cap1->id))printf("Read_ID ok !");
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <main+0xac>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	3328      	adds	r3, #40	; 0x28
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 fa52 	bl	80012a4 <mlx90614_readID>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <main+0x5e>
 8000e06:	4816      	ldr	r0, [pc, #88]	; (8000e60 <main+0xb0>)
 8000e08:	f007 fb00 	bl	800840c <iprintf>
 8000e0c:	e002      	b.n	8000e14 <main+0x64>
  	else printf("read_Id failed !");
 8000e0e:	4815      	ldr	r0, [pc, #84]	; (8000e64 <main+0xb4>)
 8000e10:	f007 fafc 	bl	800840c <iprintf>
  	for(int i=0 ; i<4 ; i++){
 8000e14:	2300      	movs	r3, #0
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	e00c      	b.n	8000e34 <main+0x84>
  		printf("Read Id : %u \n",cap1->id[i]);
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <main+0xac>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	3214      	adds	r2, #20
 8000e22:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e26:	4619      	mov	r1, r3
 8000e28:	480f      	ldr	r0, [pc, #60]	; (8000e68 <main+0xb8>)
 8000e2a:	f007 faef 	bl	800840c <iprintf>
  	for(int i=0 ; i<4 ; i++){
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3301      	adds	r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	ddef      	ble.n	8000e1a <main+0x6a>
  //mlx90614_setMax(maxTemp1);
  //mlx90614_setMin(minTemp1);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e3a:	f003 ff35 	bl	8004ca8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <main+0xbc>)
 8000e40:	2100      	movs	r1, #0
 8000e42:	480b      	ldr	r0, [pc, #44]	; (8000e70 <main+0xc0>)
 8000e44:	f003 ff7a 	bl	8004d3c <osThreadNew>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <main+0xc4>)
 8000e4c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e4e:	f003 ff4f 	bl	8004cf0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <main+0xa2>
 8000e54:	0800a440 	.word	0x0800a440
 8000e58:	0800a458 	.word	0x0800a458
 8000e5c:	20000550 	.word	0x20000550
 8000e60:	0800a474 	.word	0x0800a474
 8000e64:	0800a484 	.word	0x0800a484
 8000e68:	0800a498 	.word	0x0800a498
 8000e6c:	0800a540 	.word	0x0800a540
 8000e70:	08001081 	.word	0x08001081
 8000e74:	2000054c 	.word	0x2000054c

08000e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b09a      	sub	sp, #104	; 0x68
 8000e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7e:	f107 0320 	add.w	r3, r7, #32
 8000e82:	2248      	movs	r2, #72	; 0x48
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f006 fdb9 	bl	80079fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	615a      	str	r2, [r3, #20]
 8000e9c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000eac:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	f023 0303 	bic.w	r3, r3, #3
 8000eb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ec2:	f001 fdef 	bl	8002aa4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff ff27 	bl	8000d1a <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ecc:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <SystemClock_Config+0xe8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ed4:	4a22      	ldr	r2, [pc, #136]	; (8000f60 <SystemClock_Config+0xe8>)
 8000ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <SystemClock_Config+0xe8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ee4:	603b      	str	r3, [r7, #0]
 8000ee6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000ee8:	2327      	movs	r3, #39	; 0x27
 8000eea:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000efc:	2301      	movs	r3, #1
 8000efe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f00:	2340      	movs	r3, #64	; 0x40
 8000f02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000f04:	2300      	movs	r3, #0
 8000f06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f08:	2360      	movs	r3, #96	; 0x60
 8000f0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f10:	f107 0320 	add.w	r3, r7, #32
 8000f14:	4618      	mov	r0, r3
 8000f16:	f002 f965 	bl	80031e4 <HAL_RCC_OscConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f20:	f000 f8f2 	bl	8001108 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000f24:	236f      	movs	r3, #111	; 0x6f
 8000f26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2101      	movs	r1, #1
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 fcc1 	bl	80038cc <HAL_RCC_ClockConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000f50:	f000 f8da 	bl	8001108 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000f54:	f003 fa98 	bl	8004488 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000f58:	bf00      	nop
 8000f5a:	3768      	adds	r7, #104	; 0x68
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	58000400 	.word	0x58000400

08000f64 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b094      	sub	sp, #80	; 0x50
 8000f68:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	2250      	movs	r2, #80	; 0x50
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f006 fd44 	bl	80079fe <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000f76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f84:	463b      	mov	r3, r7
 8000f86:	4618      	mov	r0, r3
 8000f88:	f003 f908 	bl	800419c <HAL_RCCEx_PeriphCLKConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000f92:	f000 f8b9 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000f96:	bf00      	nop
 8000f98:	3750      	adds	r7, #80	; 0x50
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000fa4:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <MX_USB_PCD_Init+0x48>)
 8000fa6:	4a11      	ldr	r2, [pc, #68]	; (8000fec <MX_USB_PCD_Init+0x4c>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_USB_PCD_Init+0x48>)
 8000fac:	2208      	movs	r2, #8
 8000fae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <MX_USB_PCD_Init+0x48>)
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_USB_PCD_Init+0x48>)
 8000fb8:	2202      	movs	r2, #2
 8000fba:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <MX_USB_PCD_Init+0x48>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_USB_PCD_Init+0x48>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <MX_USB_PCD_Init+0x48>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <MX_USB_PCD_Init+0x48>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000fd4:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <MX_USB_PCD_Init+0x48>)
 8000fd6:	f001 fc58 	bl	800288a <HAL_PCD_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000fe0:	f000 f892 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000258 	.word	0x20000258
 8000fec:	40006800 	.word	0x40006800

08000ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001004:	2004      	movs	r0, #4
 8001006:	f7ff fe9e 	bl	8000d46 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	2002      	movs	r0, #2
 800100c:	f7ff fe9b 	bl	8000d46 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	2001      	movs	r0, #1
 8001012:	f7ff fe98 	bl	8000d46 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001016:	2008      	movs	r0, #8
 8001018:	f7ff fe95 	bl	8000d46 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2123      	movs	r1, #35	; 0x23
 8001020:	4814      	ldr	r0, [pc, #80]	; (8001074 <MX_GPIO_Init+0x84>)
 8001022:	f000 fe7f 	bl	8001d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001026:	2310      	movs	r3, #16
 8001028:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	4619      	mov	r1, r3
 8001036:	4810      	ldr	r0, [pc, #64]	; (8001078 <MX_GPIO_Init+0x88>)
 8001038:	f000 fd04 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800103c:	2323      	movs	r3, #35	; 0x23
 800103e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	2301      	movs	r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	4619      	mov	r1, r3
 8001050:	4808      	ldr	r0, [pc, #32]	; (8001074 <MX_GPIO_Init+0x84>)
 8001052:	f000 fcf7 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001056:	2303      	movs	r3, #3
 8001058:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105a:	2300      	movs	r3, #0
 800105c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	4619      	mov	r1, r3
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_GPIO_Init+0x8c>)
 8001068:	f000 fcec 	bl	8001a44 <HAL_GPIO_Init>

}
 800106c:	bf00      	nop
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	48000400 	.word	0x48000400
 8001078:	48000800 	.word	0x48000800
 800107c:	48000c00 	.word	0x48000c00

08001080 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  printf("task01 start\n");
 8001088:	4811      	ldr	r0, [pc, #68]	; (80010d0 <StartTask01+0x50>)
 800108a:	f007 fa45 	bl	8008518 <puts>
	  mlx90614_getMax(cap1->max);
	  printf("get min : \n");
	  mlx90614_getMin(cap1->min);
*/
	  //mlx90614_getAmbient(&cap1->ambient);
	  if (mlx90614_getAmbient(&cap1->ambient))printf("getAmbient : %f \n", cap1->ambient);
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <StartTask01+0x54>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3314      	adds	r3, #20
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f9c1 	bl	800141c <mlx90614_getAmbient>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00b      	beq.n	80010b8 <StartTask01+0x38>
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <StartTask01+0x54>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fa26 	bl	80004f8 <__aeabi_f2d>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4809      	ldr	r0, [pc, #36]	; (80010d8 <StartTask01+0x58>)
 80010b2:	f007 f9ab 	bl	800840c <iprintf>
 80010b6:	e002      	b.n	80010be <StartTask01+0x3e>
	  else printf("Failed to read ambient temperature\n");
 80010b8:	4808      	ldr	r0, [pc, #32]	; (80010dc <StartTask01+0x5c>)
 80010ba:	f007 fa2d 	bl	8008518 <puts>



	  printf("task01 end\n");
 80010be:	4808      	ldr	r0, [pc, #32]	; (80010e0 <StartTask01+0x60>)
 80010c0:	f007 fa2a 	bl	8008518 <puts>
    osDelay(1000);
 80010c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c8:	f003 feca 	bl	8004e60 <osDelay>
	  printf("task01 start\n");
 80010cc:	e7dc      	b.n	8001088 <StartTask01+0x8>
 80010ce:	bf00      	nop
 80010d0:	0800a4a8 	.word	0x0800a4a8
 80010d4:	20000550 	.word	0x20000550
 80010d8:	0800a4b8 	.word	0x0800a4b8
 80010dc:	0800a4cc 	.word	0x0800a4cc
 80010e0:	0800a4f0 	.word	0x0800a4f0

080010e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010f6:	f000 fb99 	bl	800182c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40014800 	.word	0x40014800

08001108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800110c:	b672      	cpsid	i
}
 800110e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001110:	e7fe      	b.n	8001110 <Error_Handler+0x8>
	...

08001114 <mlx90614_read16>:
  }
  return crc;
}
//###################################################################################################
bool mlx90614_read16(uint8_t address, int16_t *data)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af04      	add	r7, sp, #16
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	71fb      	strb	r3, [r7, #7]
  uint8_t d[3];
  if(HAL_I2C_Mem_Read(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, d, 3, 100) != HAL_OK)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	b29a      	uxth	r2, r3
 8001124:	2364      	movs	r3, #100	; 0x64
 8001126:	9302      	str	r3, [sp, #8]
 8001128:	2303      	movs	r3, #3
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	21b4      	movs	r1, #180	; 0xb4
 8001136:	480b      	ldr	r0, [pc, #44]	; (8001164 <mlx90614_read16+0x50>)
 8001138:	f000 fe9c 	bl	8001e74 <HAL_I2C_Mem_Read>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <mlx90614_read16+0x32>
    return false;
 8001142:	2300      	movs	r3, #0
 8001144:	e009      	b.n	800115a <mlx90614_read16+0x46>
  *data = d[0] | (d[1] << 8);
 8001146:	7b3b      	ldrb	r3, [r7, #12]
 8001148:	b21a      	sxth	r2, r3
 800114a:	7b7b      	ldrb	r3, [r7, #13]
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	b21b      	sxth	r3, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	b21a      	sxth	r2, r3
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	801a      	strh	r2, [r3, #0]
  return true;
 8001158:	2301      	movs	r3, #1
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000204 	.word	0x20000204

08001168 <mlx90614_calcTemperature>:
	}
	return rawTemp;
}
//###################################################################################################
float mlx90614_calcTemperature(int16_t rawTemp)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	80fb      	strh	r3, [r7, #6]
	float retTemp;
	if(mlx90614.unit == MLX90614_UNIT_RAW)
 8001172:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <mlx90614_calcTemperature+0x90>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d108      	bne.n	800118c <mlx90614_calcTemperature+0x24>
	{
		retTemp = (float) rawTemp;
 800117a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001186:	edc7 7a03 	vstr	s15, [r7, #12]
 800118a:	e02b      	b.n	80011e4 <mlx90614_calcTemperature+0x7c>
	}
	else
	{
		retTemp = (float)(rawTemp) * 0.02f;
 800118c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001198:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80011fc <mlx90614_calcTemperature+0x94>
 800119c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011a0:	edc7 7a03 	vstr	s15, [r7, #12]
    if(mlx90614.unit != MLX90614_UNIT_K)
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <mlx90614_calcTemperature+0x90>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d01b      	beq.n	80011e4 <mlx90614_calcTemperature+0x7c>
		{
			retTemp -= 273.15f;
 80011ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80011b0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001200 <mlx90614_calcTemperature+0x98>
 80011b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011b8:	edc7 7a03 	vstr	s15, [r7, #12]
			if(mlx90614.unit == MLX90614_UNIT_F)
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <mlx90614_calcTemperature+0x90>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d10f      	bne.n	80011e4 <mlx90614_calcTemperature+0x7c>
			{
				retTemp = retTemp * 9.0f / 5.0f + 32.0f;
 80011c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011c8:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80011cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011d0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80011d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001204 <mlx90614_calcTemperature+0x9c>
 80011dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011e0:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}
	return retTemp;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	ee07 3a90 	vmov	s15, r3
}
 80011ea:	eeb0 0a67 	vmov.f32	s0, s15
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	20000554 	.word	0x20000554
 80011fc:	3ca3d70a 	.word	0x3ca3d70a
 8001200:	43889333 	.word	0x43889333
 8001204:	42000000 	.word	0x42000000

08001208 <mlx90614_init>:
//###################################################################################################
bool mlx90614_init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  memset(&mlx90614, 0, sizeof(mlx90614));
 800120c:	2234      	movs	r2, #52	; 0x34
 800120e:	2100      	movs	r1, #0
 8001210:	4821      	ldr	r0, [pc, #132]	; (8001298 <mlx90614_init+0x90>)
 8001212:	f006 fbf4 	bl	80079fe <memset>
  mlx90614.unit = MLX90614_UNIT_C;
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <mlx90614_init+0x90>)
 8001218:	2202      	movs	r2, #2
 800121a:	701a      	strb	r2, [r3, #0]
  if(HAL_I2C_IsDeviceReady(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, 1, 100) != HAL_OK)
 800121c:	2364      	movs	r3, #100	; 0x64
 800121e:	2201      	movs	r2, #1
 8001220:	21b4      	movs	r1, #180	; 0xb4
 8001222:	481e      	ldr	r0, [pc, #120]	; (800129c <mlx90614_init+0x94>)
 8001224:	f000 ff40 	bl	80020a8 <HAL_I2C_IsDeviceReady>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <mlx90614_init+0x2a>
    return false;
 800122e:	2300      	movs	r3, #0
 8001230:	e030      	b.n	8001294 <mlx90614_init+0x8c>
  mlx90614_read16(MLX90614_REGISTER_CONFIG, (int16_t*)&mlx90614.configReg);
 8001232:	491b      	ldr	r1, [pc, #108]	; (80012a0 <mlx90614_init+0x98>)
 8001234:	2025      	movs	r0, #37	; 0x25
 8001236:	f7ff ff6d 	bl	8001114 <mlx90614_read16>
  if(mlx90614_readID(NULL) == false)
 800123a:	2000      	movs	r0, #0
 800123c:	f000 f832 	bl	80012a4 <mlx90614_readID>
 8001240:	4603      	mov	r3, r0
 8001242:	f083 0301 	eor.w	r3, r3, #1
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <mlx90614_init+0x48>
    return false;
 800124c:	2300      	movs	r3, #0
 800124e:	e021      	b.n	8001294 <mlx90614_init+0x8c>
  if(mlx90614_getEmissivity(NULL) == false)
 8001250:	2000      	movs	r0, #0
 8001252:	f000 f861 	bl	8001318 <mlx90614_getEmissivity>
 8001256:	4603      	mov	r3, r0
 8001258:	f083 0301 	eor.w	r3, r3, #1
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <mlx90614_init+0x5e>
    return false;
 8001262:	2300      	movs	r3, #0
 8001264:	e016      	b.n	8001294 <mlx90614_init+0x8c>
  if(mlx90614_getMax(NULL) == false)
 8001266:	2000      	movs	r0, #0
 8001268:	f000 f890 	bl	800138c <mlx90614_getMax>
 800126c:	4603      	mov	r3, r0
 800126e:	f083 0301 	eor.w	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <mlx90614_init+0x74>
    return false;
 8001278:	2300      	movs	r3, #0
 800127a:	e00b      	b.n	8001294 <mlx90614_init+0x8c>
  if(mlx90614_getMin(NULL) == false)
 800127c:	2000      	movs	r0, #0
 800127e:	f000 f8a9 	bl	80013d4 <mlx90614_getMin>
 8001282:	4603      	mov	r3, r0
 8001284:	f083 0301 	eor.w	r3, r3, #1
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <mlx90614_init+0x8a>
    return false;
 800128e:	2300      	movs	r3, #0
 8001290:	e000      	b.n	8001294 <mlx90614_init+0x8c>

  return true;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000554 	.word	0x20000554
 800129c:	20000204 	.word	0x20000204
 80012a0:	20000584 	.word	0x20000584

080012a4 <mlx90614_readID>:
{
  mlx90614.unit = MLX90614_UNIT_;
}
//###################################################################################################
bool mlx90614_readID(int16_t *id)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	for (int i=0; i<4; i++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	e028      	b.n	8001304 <mlx90614_readID+0x60>
	{
		int16_t temp = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	817b      	strh	r3, [r7, #10]
		if (!mlx90614_read16(MLX90614_REGISTER_ID0 + i, &temp))
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	333c      	adds	r3, #60	; 0x3c
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	f107 020a 	add.w	r2, r7, #10
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff25 	bl	8001114 <mlx90614_read16>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f083 0301 	eor.w	r3, r3, #1
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <mlx90614_readID+0x36>
			return false;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e018      	b.n	800130c <mlx90614_readID+0x68>
		if(id != NULL)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d006      	beq.n	80012ee <mlx90614_readID+0x4a>
			id[i] = (uint16_t)temp;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	4413      	add	r3, r2
 80012e8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80012ec:	801a      	strh	r2, [r3, #0]
		mlx90614.id[i] = (uint16_t)temp;
 80012ee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012f2:	b299      	uxth	r1, r3
 80012f4:	4a07      	ldr	r2, [pc, #28]	; (8001314 <mlx90614_readID+0x70>)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	3314      	adds	r3, #20
 80012fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i<4; i++)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	3301      	adds	r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b03      	cmp	r3, #3
 8001308:	ddd3      	ble.n	80012b2 <mlx90614_readID+0xe>
	}
	return true;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000554 	.word	0x20000554

08001318 <mlx90614_getEmissivity>:
//###################################################################################################
bool mlx90614_getEmissivity(float *emissivity)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_KE, &mlx90614.rawEmissivity))
 8001320:	4917      	ldr	r1, [pc, #92]	; (8001380 <mlx90614_getEmissivity+0x68>)
 8001322:	2024      	movs	r0, #36	; 0x24
 8001324:	f7ff fef6 	bl	8001114 <mlx90614_read16>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d022      	beq.n	8001374 <mlx90614_getEmissivity+0x5c>
	{
    mlx90614.emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <mlx90614_getEmissivity+0x6c>)
 8001330:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001334:	b29b      	uxth	r3, r3
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800133e:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001388 <mlx90614_getEmissivity+0x70>
 8001342:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <mlx90614_getEmissivity+0x6c>)
 8001348:	edc3 7a04 	vstr	s15, [r3, #16]
		if(emissivity != NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00e      	beq.n	8001370 <mlx90614_getEmissivity+0x58>
      *emissivity = (((float)((uint16_t)mlx90614.rawEmissivity)) / 65535.0f);
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <mlx90614_getEmissivity+0x6c>)
 8001354:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001358:	b29b      	uxth	r3, r3
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001362:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001388 <mlx90614_getEmissivity+0x70>
 8001366:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <mlx90614_getEmissivity+0x5e>
	}
	return false;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000556 	.word	0x20000556
 8001384:	20000554 	.word	0x20000554
 8001388:	477fff00 	.word	0x477fff00

0800138c <mlx90614_getMax>:
	mlx90614.rawMin = mlx90614_calcRawTemp(minTemp);
	return mlx90614_write16(MLX90614_REGISTER_TOMIN, mlx90614.rawMin);
}
//###################################################################################################
bool mlx90614_getMax(float *maxTemp)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMAX, &mlx90614.rawMax))
 8001394:	490d      	ldr	r1, [pc, #52]	; (80013cc <mlx90614_getMax+0x40>)
 8001396:	2020      	movs	r0, #32
 8001398:	f7ff febc 	bl	8001114 <mlx90614_read16>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00e      	beq.n	80013c0 <mlx90614_getMax+0x34>
	{
    if(maxTemp != NULL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d009      	beq.n	80013bc <mlx90614_getMax+0x30>
      *maxTemp = mlx90614.rawMax;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <mlx90614_getMax+0x44>)
 80013aa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80013ae:	ee07 3a90 	vmov	s15, r3
 80013b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	edc3 7a00 	vstr	s15, [r3]
		return true;
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <mlx90614_getMax+0x36>
	}
	return false;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000055e 	.word	0x2000055e
 80013d0:	20000554 	.word	0x20000554

080013d4 <mlx90614_getMin>:
//###################################################################################################
bool mlx90614_getMin(float *minTemp)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	if(mlx90614_read16(MLX90614_REGISTER_TOMIN, &mlx90614.rawMin))
 80013dc:	490d      	ldr	r1, [pc, #52]	; (8001414 <mlx90614_getMin+0x40>)
 80013de:	2021      	movs	r0, #33	; 0x21
 80013e0:	f7ff fe98 	bl	8001114 <mlx90614_read16>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00e      	beq.n	8001408 <mlx90614_getMin+0x34>
	{
    if(minTemp != NULL)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d009      	beq.n	8001404 <mlx90614_getMin+0x30>
      *minTemp = mlx90614.rawMin;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <mlx90614_getMin+0x44>)
 80013f2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80013f6:	ee07 3a90 	vmov	s15, r3
 80013fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <mlx90614_getMin+0x36>
	}
	return false;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000560 	.word	0x20000560
 8001418:	20000554 	.word	0x20000554

0800141c <mlx90614_getAmbient>:
//###################################################################################################
bool mlx90614_getAmbient(float *ambientTemp)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	if (mlx90614_read16(MLX90614_REGISTER_TA, &mlx90614.rawAmbient))
 8001424:	490d      	ldr	r1, [pc, #52]	; (800145c <mlx90614_getAmbient+0x40>)
 8001426:	2006      	movs	r0, #6
 8001428:	f7ff fe74 	bl	8001114 <mlx90614_read16>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00f      	beq.n	8001452 <mlx90614_getAmbient+0x36>
	{
    if(ambientTemp != NULL)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00a      	beq.n	800144e <mlx90614_getAmbient+0x32>
      *ambientTemp = mlx90614_calcTemperature(mlx90614.rawAmbient);
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <mlx90614_getAmbient+0x44>)
 800143a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fe92 	bl	8001168 <mlx90614_calcTemperature>
 8001444:	eef0 7a40 	vmov.f32	s15, s0
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	edc3 7a00 	vstr	s15, [r3]
		return true;
 800144e:	2301      	movs	r3, #1
 8001450:	e000      	b.n	8001454 <mlx90614_getAmbient+0x38>
	}
	return false;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000558 	.word	0x20000558
 8001460:	20000554 	.word	0x20000554

08001464 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800146c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001470:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001472:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4313      	orrs	r3, r2
 800147a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800147c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001480:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4013      	ands	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001488:	68fb      	ldr	r3, [r7, #12]
}
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08c      	sub	sp, #48	; 0x30
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	201a      	movs	r0, #26
 80014ae:	f000 faa1 	bl	80019f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80014b2:	201a      	movs	r0, #26
 80014b4:	f000 fab8 	bl	8001a28 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80014b8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80014bc:	f7ff ffd2 	bl	8001464 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014c0:	f107 0208 	add.w	r2, r7, #8
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	4611      	mov	r1, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f002 fbd4 	bl	8003c78 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014d0:	f002 fbbc 	bl	8003c4c <HAL_RCC_GetPCLK2Freq>
 80014d4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d8:	4a12      	ldr	r2, [pc, #72]	; (8001524 <HAL_InitTick+0x8c>)
 80014da:	fba2 2303 	umull	r2, r3, r2, r3
 80014de:	0c9b      	lsrs	r3, r3, #18
 80014e0:	3b01      	subs	r3, #1
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_InitTick+0x90>)
 80014e6:	4a11      	ldr	r2, [pc, #68]	; (800152c <HAL_InitTick+0x94>)
 80014e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <HAL_InitTick+0x90>)
 80014ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014f0:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80014f2:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <HAL_InitTick+0x90>)
 80014f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f6:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <HAL_InitTick+0x90>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_InitTick+0x90>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001504:	4808      	ldr	r0, [pc, #32]	; (8001528 <HAL_InitTick+0x90>)
 8001506:	f003 f8d6 	bl	80046b6 <HAL_TIM_Base_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d104      	bne.n	800151a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001510:	4805      	ldr	r0, [pc, #20]	; (8001528 <HAL_InitTick+0x90>)
 8001512:	f003 f931 	bl	8004778 <HAL_TIM_Base_Start_IT>
 8001516:	4603      	mov	r3, r0
 8001518:	e000      	b.n	800151c <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
}
 800151c:	4618      	mov	r0, r3
 800151e:	3730      	adds	r7, #48	; 0x30
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	431bde83 	.word	0x431bde83
 8001528:	20000588 	.word	0x20000588
 800152c:	40014800 	.word	0x40014800

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <NMI_Handler+0x4>

08001536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <MemManage_Handler+0x4>

08001542 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <BusFault_Handler+0x4>

08001548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <UsageFault_Handler+0x4>

0800154e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001562:	f003 f957 	bl	8004814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000588 	.word	0x20000588

08001570 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return 1;
 8001574:	2301      	movs	r3, #1
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_kill>:

int _kill(int pid, int sig)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800158a:	f006 f907 	bl	800779c <__errno>
 800158e:	4603      	mov	r3, r0
 8001590:	2216      	movs	r2, #22
 8001592:	601a      	str	r2, [r3, #0]
  return -1;
 8001594:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <_exit>:

void _exit (int status)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015a8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ffe7 	bl	8001580 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015b2:	e7fe      	b.n	80015b2 <_exit+0x12>

080015b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	e00a      	b.n	80015dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015c6:	f3af 8000 	nop.w
 80015ca:	4601      	mov	r1, r0
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	60ba      	str	r2, [r7, #8]
 80015d2:	b2ca      	uxtb	r2, r1
 80015d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3301      	adds	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	dbf0      	blt.n	80015c6 <_read+0x12>
  }

  return len;
 80015e4:	687b      	ldr	r3, [r7, #4]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <_close>:
  }
  return len;
}

int _close(int file)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001616:	605a      	str	r2, [r3, #4]
  return 0;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <_isatty>:

int _isatty(int file)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001660:	4a14      	ldr	r2, [pc, #80]	; (80016b4 <_sbrk+0x5c>)
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <_sbrk+0x60>)
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <_sbrk+0x64>)
 8001676:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <_sbrk+0x68>)
 8001678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	429a      	cmp	r2, r3
 8001686:	d207      	bcs.n	8001698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001688:	f006 f888 	bl	800779c <__errno>
 800168c:	4603      	mov	r3, r0
 800168e:	220c      	movs	r2, #12
 8001690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	e009      	b.n	80016ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169e:	4b07      	ldr	r3, [pc, #28]	; (80016bc <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	4a05      	ldr	r2, [pc, #20]	; (80016bc <_sbrk+0x64>)
 80016a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016aa:	68fb      	ldr	r3, [r7, #12]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20030000 	.word	0x20030000
 80016b8:	00000400 	.word	0x00000400
 80016bc:	200005d4 	.word	0x200005d4
 80016c0:	20002000 	.word	0x20002000

080016c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80016c8:	4b24      	ldr	r3, [pc, #144]	; (800175c <SystemInit+0x98>)
 80016ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ce:	4a23      	ldr	r2, [pc, #140]	; (800175c <SystemInit+0x98>)
 80016d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80016d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80016e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ec:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80016f0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80016f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016fc:	4b18      	ldr	r3, [pc, #96]	; (8001760 <SystemInit+0x9c>)
 80016fe:	4013      	ands	r3, r2
 8001700:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800170a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800170e:	f023 0305 	bic.w	r3, r3, #5
 8001712:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800171a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800171e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001722:	f023 0301 	bic.w	r3, r3, #1
 8001726:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800172a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172e:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <SystemInit+0xa0>)
 8001730:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001736:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <SystemInit+0xa0>)
 8001738:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800173a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001744:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001748:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800174a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00
 8001760:	faf6fefb 	.word	0xfaf6fefb
 8001764:	22041000 	.word	0x22041000

08001768 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001768:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176c:	3304      	adds	r3, #4

0800176e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800176e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001770:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001772:	d3f9      	bcc.n	8001768 <CopyDataInit>
  bx lr
 8001774:	4770      	bx	lr

08001776 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001776:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001778:	3004      	adds	r0, #4

0800177a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800177a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800177c:	d3fb      	bcc.n	8001776 <FillZerobss>
  bx lr
 800177e:	4770      	bx	lr

08001780 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001780:	480c      	ldr	r0, [pc, #48]	; (80017b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001782:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001784:	f7ff ff9e 	bl	80016c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001788:	480b      	ldr	r0, [pc, #44]	; (80017b8 <LoopForever+0x6>)
 800178a:	490c      	ldr	r1, [pc, #48]	; (80017bc <LoopForever+0xa>)
 800178c:	4a0c      	ldr	r2, [pc, #48]	; (80017c0 <LoopForever+0xe>)
 800178e:	2300      	movs	r3, #0
 8001790:	f7ff ffed 	bl	800176e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001794:	480b      	ldr	r0, [pc, #44]	; (80017c4 <LoopForever+0x12>)
 8001796:	490c      	ldr	r1, [pc, #48]	; (80017c8 <LoopForever+0x16>)
 8001798:	4a0c      	ldr	r2, [pc, #48]	; (80017cc <LoopForever+0x1a>)
 800179a:	2300      	movs	r3, #0
 800179c:	f7ff ffe7 	bl	800176e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80017a0:	480b      	ldr	r0, [pc, #44]	; (80017d0 <LoopForever+0x1e>)
 80017a2:	490c      	ldr	r1, [pc, #48]	; (80017d4 <LoopForever+0x22>)
 80017a4:	2300      	movs	r3, #0
 80017a6:	f7ff ffe8 	bl	800177a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017aa:	f006 f8f3 	bl	8007994 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80017ae:	f7ff faff 	bl	8000db0 <main>

080017b2 <LoopForever>:

LoopForever:
  b LoopForever
 80017b2:	e7fe      	b.n	80017b2 <LoopForever>
  ldr   r0, =_estack
 80017b4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80017b8:	20000008 	.word	0x20000008
 80017bc:	200001e8 	.word	0x200001e8
 80017c0:	0800a9e4 	.word	0x0800a9e4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80017c4:	20030000 	.word	0x20030000
 80017c8:	20030000 	.word	0x20030000
 80017cc:	0800abc4 	.word	0x0800abc4
  INIT_BSS _sbss, _ebss
 80017d0:	200001e8 	.word	0x200001e8
 80017d4:	20001ffc 	.word	0x20001ffc

080017d8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017d8:	e7fe      	b.n	80017d8 <ADC1_IRQHandler>
	...

080017dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e6:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <HAL_Init+0x3c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <HAL_Init+0x3c>)
 80017ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f2:	2003      	movs	r0, #3
 80017f4:	f000 f8f3 	bl	80019de <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017f8:	200f      	movs	r0, #15
 80017fa:	f7ff fe4d 	bl	8001498 <HAL_InitTick>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	71fb      	strb	r3, [r7, #7]
 8001808:	e001      	b.n	800180e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800180a:	f000 f807 	bl	800181c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800180e:	79fb      	ldrb	r3, [r7, #7]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	58004000 	.word	0x58004000

0800181c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_IncTick+0x20>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_IncTick+0x24>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4413      	add	r3, r2
 800183c:	4a04      	ldr	r2, [pc, #16]	; (8001850 <HAL_IncTick+0x24>)
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000010 	.word	0x20000010
 8001850:	200005d8 	.word	0x200005d8

08001854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return uwTick;
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <HAL_GetTick+0x14>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	200005d8 	.word	0x200005d8

0800186c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <HAL_GetTickPrio+0x14>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	2000000c 	.word	0x2000000c

08001884 <__NVIC_SetPriorityGrouping>:
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a0:	4013      	ands	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b6:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	60d3      	str	r3, [r2, #12]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_GetPriorityGrouping>:
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0307 	and.w	r3, r3, #7
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_EnableIRQ>:
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	db0b      	blt.n	8001912 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	f003 021f 	and.w	r2, r3, #31
 8001900:	4907      	ldr	r1, [pc, #28]	; (8001920 <__NVIC_EnableIRQ+0x38>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	2001      	movs	r0, #1
 800190a:	fa00 f202 	lsl.w	r2, r0, r2
 800190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000e100 	.word	0xe000e100

08001924 <__NVIC_SetPriority>:
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001934:	2b00      	cmp	r3, #0
 8001936:	db0a      	blt.n	800194e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	490c      	ldr	r1, [pc, #48]	; (8001970 <__NVIC_SetPriority+0x4c>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	0112      	lsls	r2, r2, #4
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	440b      	add	r3, r1
 8001948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800194c:	e00a      	b.n	8001964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4908      	ldr	r1, [pc, #32]	; (8001974 <__NVIC_SetPriority+0x50>)
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	3b04      	subs	r3, #4
 800195c:	0112      	lsls	r2, r2, #4
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	440b      	add	r3, r1
 8001962:	761a      	strb	r2, [r3, #24]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000e100 	.word	0xe000e100
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <NVIC_EncodePriority>:
{
 8001978:	b480      	push	{r7}
 800197a:	b089      	sub	sp, #36	; 0x24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f1c3 0307 	rsb	r3, r3, #7
 8001992:	2b04      	cmp	r3, #4
 8001994:	bf28      	it	cs
 8001996:	2304      	movcs	r3, #4
 8001998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3304      	adds	r3, #4
 800199e:	2b06      	cmp	r3, #6
 80019a0:	d902      	bls.n	80019a8 <NVIC_EncodePriority+0x30>
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3b03      	subs	r3, #3
 80019a6:	e000      	b.n	80019aa <NVIC_EncodePriority+0x32>
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43da      	mvns	r2, r3
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	401a      	ands	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c0:	f04f 31ff 	mov.w	r1, #4294967295
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	43d9      	mvns	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	4313      	orrs	r3, r2
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3724      	adds	r7, #36	; 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ff4c 	bl	8001884 <__NVIC_SetPriorityGrouping>
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
 8001a00:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a02:	f7ff ff63 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001a06:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	68b9      	ldr	r1, [r7, #8]
 8001a0c:	6978      	ldr	r0, [r7, #20]
 8001a0e:	f7ff ffb3 	bl	8001978 <NVIC_EncodePriority>
 8001a12:	4602      	mov	r2, r0
 8001a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ff82 	bl	8001924 <__NVIC_SetPriority>
}
 8001a20:	bf00      	nop
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff ff56 	bl	80018e8 <__NVIC_EnableIRQ>
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a52:	e14c      	b.n	8001cee <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	2101      	movs	r1, #1
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	4013      	ands	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 813e 	beq.w	8001ce8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d005      	beq.n	8001a84 <HAL_GPIO_Init+0x40>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d130      	bne.n	8001ae6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	2203      	movs	r2, #3
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aba:	2201      	movs	r2, #1
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	091b      	lsrs	r3, r3, #4
 8001ad0:	f003 0201 	and.w	r2, r3, #1
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d017      	beq.n	8001b22 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	2203      	movs	r2, #3
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d123      	bne.n	8001b76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	08da      	lsrs	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3208      	adds	r2, #8
 8001b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	220f      	movs	r2, #15
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	691a      	ldr	r2, [r3, #16]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	08da      	lsrs	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3208      	adds	r2, #8
 8001b70:	6939      	ldr	r1, [r7, #16]
 8001b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	2203      	movs	r2, #3
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0203 	and.w	r2, r3, #3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 8098 	beq.w	8001ce8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001bb8:	4a54      	ldr	r2, [pc, #336]	; (8001d0c <HAL_GPIO_Init+0x2c8>)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	089b      	lsrs	r3, r3, #2
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	220f      	movs	r2, #15
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001be2:	d019      	beq.n	8001c18 <HAL_GPIO_Init+0x1d4>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a4a      	ldr	r2, [pc, #296]	; (8001d10 <HAL_GPIO_Init+0x2cc>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d013      	beq.n	8001c14 <HAL_GPIO_Init+0x1d0>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a49      	ldr	r2, [pc, #292]	; (8001d14 <HAL_GPIO_Init+0x2d0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d00d      	beq.n	8001c10 <HAL_GPIO_Init+0x1cc>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a48      	ldr	r2, [pc, #288]	; (8001d18 <HAL_GPIO_Init+0x2d4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d007      	beq.n	8001c0c <HAL_GPIO_Init+0x1c8>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a47      	ldr	r2, [pc, #284]	; (8001d1c <HAL_GPIO_Init+0x2d8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d101      	bne.n	8001c08 <HAL_GPIO_Init+0x1c4>
 8001c04:	2304      	movs	r3, #4
 8001c06:	e008      	b.n	8001c1a <HAL_GPIO_Init+0x1d6>
 8001c08:	2307      	movs	r3, #7
 8001c0a:	e006      	b.n	8001c1a <HAL_GPIO_Init+0x1d6>
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e004      	b.n	8001c1a <HAL_GPIO_Init+0x1d6>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e002      	b.n	8001c1a <HAL_GPIO_Init+0x1d6>
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <HAL_GPIO_Init+0x1d6>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	f002 0203 	and.w	r2, r2, #3
 8001c20:	0092      	lsls	r2, r2, #2
 8001c22:	4093      	lsls	r3, r2
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c2a:	4938      	ldr	r1, [pc, #224]	; (8001d0c <HAL_GPIO_Init+0x2c8>)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	089b      	lsrs	r3, r3, #2
 8001c30:	3302      	adds	r3, #2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c38:	4b39      	ldr	r3, [pc, #228]	; (8001d20 <HAL_GPIO_Init+0x2dc>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c5c:	4a30      	ldr	r2, [pc, #192]	; (8001d20 <HAL_GPIO_Init+0x2dc>)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c62:	4b2f      	ldr	r3, [pc, #188]	; (8001d20 <HAL_GPIO_Init+0x2dc>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c86:	4a26      	ldr	r2, [pc, #152]	; (8001d20 <HAL_GPIO_Init+0x2dc>)
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c8c:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <HAL_GPIO_Init+0x2dc>)
 8001c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cb2:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <HAL_GPIO_Init+0x2dc>)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001cba:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_GPIO_Init+0x2dc>)
 8001cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ce0:	4a0f      	ldr	r2, [pc, #60]	; (8001d20 <HAL_GPIO_Init+0x2dc>)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3301      	adds	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f47f aeab 	bne.w	8001a54 <HAL_GPIO_Init+0x10>
  }
}
 8001cfe:	bf00      	nop
 8001d00:	bf00      	nop
 8001d02:	371c      	adds	r7, #28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	40010000 	.word	0x40010000
 8001d10:	48000400 	.word	0x48000400
 8001d14:	48000800 	.word	0x48000800
 8001d18:	48000c00 	.word	0x48000c00
 8001d1c:	48001000 	.word	0x48001000
 8001d20:	58000800 	.word	0x58000800

08001d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	807b      	strh	r3, [r7, #2]
 8001d30:	4613      	mov	r3, r2
 8001d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d34:	787b      	ldrb	r3, [r7, #1]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d3a:	887a      	ldrh	r2, [r7, #2]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d40:	e002      	b.n	8001d48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d42:	887a      	ldrh	r2, [r7, #2]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e081      	b.n	8001e6a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d106      	bne.n	8001d80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7fe ff5e 	bl	8000c3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2224      	movs	r2, #36	; 0x24
 8001d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0201 	bic.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001da4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001db4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d107      	bne.n	8001dce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	e006      	b.n	8001ddc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001dda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d104      	bne.n	8001dee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691a      	ldr	r2, [r3, #16]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69d9      	ldr	r1, [r3, #28]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1a      	ldr	r2, [r3, #32]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0201 	orr.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2220      	movs	r2, #32
 8001e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af02      	add	r7, sp, #8
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	4608      	mov	r0, r1
 8001e7e:	4611      	mov	r1, r2
 8001e80:	461a      	mov	r2, r3
 8001e82:	4603      	mov	r3, r0
 8001e84:	817b      	strh	r3, [r7, #10]
 8001e86:	460b      	mov	r3, r1
 8001e88:	813b      	strh	r3, [r7, #8]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b20      	cmp	r3, #32
 8001e98:	f040 80fd 	bne.w	8002096 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d002      	beq.n	8001ea8 <HAL_I2C_Mem_Read+0x34>
 8001ea2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d105      	bne.n	8001eb4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0f1      	b.n	8002098 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_I2C_Mem_Read+0x4e>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e0ea      	b.n	8002098 <HAL_I2C_Mem_Read+0x224>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001eca:	f7ff fcc3 	bl	8001854 <HAL_GetTick>
 8001ece:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2319      	movs	r3, #25
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 fa63 	bl	80023a8 <I2C_WaitOnFlagUntilTimeout>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0d5      	b.n	8002098 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2222      	movs	r2, #34	; 0x22
 8001ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2240      	movs	r2, #64	; 0x40
 8001ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6a3a      	ldr	r2, [r7, #32]
 8001f06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f14:	88f8      	ldrh	r0, [r7, #6]
 8001f16:	893a      	ldrh	r2, [r7, #8]
 8001f18:	8979      	ldrh	r1, [r7, #10]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	4603      	mov	r3, r0
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 f9c7 	bl	80022b8 <I2C_RequestMemoryRead>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0ad      	b.n	8002098 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	2bff      	cmp	r3, #255	; 0xff
 8001f44:	d90e      	bls.n	8001f64 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	22ff      	movs	r2, #255	; 0xff
 8001f4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	8979      	ldrh	r1, [r7, #10]
 8001f54:	4b52      	ldr	r3, [pc, #328]	; (80020a0 <HAL_I2C_Mem_Read+0x22c>)
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 fbcb 	bl	80026f8 <I2C_TransferConfig>
 8001f62:	e00f      	b.n	8001f84 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	8979      	ldrh	r1, [r7, #10]
 8001f76:	4b4a      	ldr	r3, [pc, #296]	; (80020a0 <HAL_I2C_Mem_Read+0x22c>)
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 fbba 	bl	80026f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2104      	movs	r1, #4
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 fa0a 	bl	80023a8 <I2C_WaitOnFlagUntilTimeout>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e07c      	b.n	8002098 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d034      	beq.n	8002044 <HAL_I2C_Mem_Read+0x1d0>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d130      	bne.n	8002044 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2180      	movs	r1, #128	; 0x80
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f000 f9db 	bl	80023a8 <I2C_WaitOnFlagUntilTimeout>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e04d      	b.n	8002098 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002000:	b29b      	uxth	r3, r3
 8002002:	2bff      	cmp	r3, #255	; 0xff
 8002004:	d90e      	bls.n	8002024 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	22ff      	movs	r2, #255	; 0xff
 800200a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002010:	b2da      	uxtb	r2, r3
 8002012:	8979      	ldrh	r1, [r7, #10]
 8002014:	2300      	movs	r3, #0
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 fb6b 	bl	80026f8 <I2C_TransferConfig>
 8002022:	e00f      	b.n	8002044 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002032:	b2da      	uxtb	r2, r3
 8002034:	8979      	ldrh	r1, [r7, #10]
 8002036:	2300      	movs	r3, #0
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 fb5a 	bl	80026f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002048:	b29b      	uxth	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d19a      	bne.n	8001f84 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 fa28 	bl	80024a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e01a      	b.n	8002098 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2220      	movs	r2, #32
 8002068:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6859      	ldr	r1, [r3, #4]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_I2C_Mem_Read+0x230>)
 8002076:	400b      	ands	r3, r1
 8002078:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	e000      	b.n	8002098 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002096:	2302      	movs	r3, #2
  }
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	80002400 	.word	0x80002400
 80020a4:	fe00e800 	.word	0xfe00e800

080020a8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	; 0x28
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	460b      	mov	r3, r1
 80020b6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b20      	cmp	r3, #32
 80020c6:	f040 80f1 	bne.w	80022ac <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020d8:	d101      	bne.n	80020de <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80020da:	2302      	movs	r3, #2
 80020dc:	e0e7      	b.n	80022ae <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <HAL_I2C_IsDeviceReady+0x44>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e0e0      	b.n	80022ae <HAL_I2C_IsDeviceReady+0x206>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2224      	movs	r2, #36	; 0x24
 80020f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d107      	bne.n	800211a <HAL_I2C_IsDeviceReady+0x72>
 800210a:	897b      	ldrh	r3, [r7, #10]
 800210c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002110:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002114:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002118:	e004      	b.n	8002124 <HAL_I2C_IsDeviceReady+0x7c>
 800211a:	897b      	ldrh	r3, [r7, #10]
 800211c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002120:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800212a:	f7ff fb93 	bl	8001854 <HAL_GetTick>
 800212e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b20      	cmp	r3, #32
 800213c:	bf0c      	ite	eq
 800213e:	2301      	moveq	r3, #1
 8002140:	2300      	movne	r3, #0
 8002142:	b2db      	uxtb	r3, r3
 8002144:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f003 0310 	and.w	r3, r3, #16
 8002150:	2b10      	cmp	r3, #16
 8002152:	bf0c      	ite	eq
 8002154:	2301      	moveq	r3, #1
 8002156:	2300      	movne	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800215c:	e034      	b.n	80021c8 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002164:	d01a      	beq.n	800219c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002166:	f7ff fb75 	bl	8001854 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d302      	bcc.n	800217c <HAL_I2C_IsDeviceReady+0xd4>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10f      	bne.n	800219c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	f043 0220 	orr.w	r2, r3, #32
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e088      	b.n	80022ae <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	f003 0320 	and.w	r3, r3, #32
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	bf0c      	ite	eq
 80021aa:	2301      	moveq	r3, #1
 80021ac:	2300      	movne	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	2b10      	cmp	r3, #16
 80021be:	bf0c      	ite	eq
 80021c0:	2301      	moveq	r3, #1
 80021c2:	2300      	movne	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80021c8:	7ffb      	ldrb	r3, [r7, #31]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d102      	bne.n	80021d4 <HAL_I2C_IsDeviceReady+0x12c>
 80021ce:	7fbb      	ldrb	r3, [r7, #30]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0c4      	beq.n	800215e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	f003 0310 	and.w	r3, r3, #16
 80021de:	2b10      	cmp	r3, #16
 80021e0:	d01a      	beq.n	8002218 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2200      	movs	r2, #0
 80021ea:	2120      	movs	r1, #32
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f8db 	bl	80023a8 <I2C_WaitOnFlagUntilTimeout>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e058      	b.n	80022ae <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2220      	movs	r2, #32
 8002202:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2220      	movs	r2, #32
 8002208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	e04a      	b.n	80022ae <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	2200      	movs	r2, #0
 8002220:	2120      	movs	r1, #32
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 f8c0 	bl	80023a8 <I2C_WaitOnFlagUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e03d      	b.n	80022ae <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2210      	movs	r2, #16
 8002238:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2220      	movs	r2, #32
 8002240:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	429a      	cmp	r2, r3
 8002248:	d118      	bne.n	800227c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002258:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2200      	movs	r2, #0
 8002262:	2120      	movs	r1, #32
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 f89f 	bl	80023a8 <I2C_WaitOnFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e01c      	b.n	80022ae <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2220      	movs	r2, #32
 800227a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	3301      	adds	r3, #1
 8002280:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	429a      	cmp	r2, r3
 8002288:	f63f af3b 	bhi.w	8002102 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002298:	f043 0220 	orr.w	r2, r3, #32
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80022ac:	2302      	movs	r3, #2
  }
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3720      	adds	r7, #32
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af02      	add	r7, sp, #8
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	4608      	mov	r0, r1
 80022c2:	4611      	mov	r1, r2
 80022c4:	461a      	mov	r2, r3
 80022c6:	4603      	mov	r3, r0
 80022c8:	817b      	strh	r3, [r7, #10]
 80022ca:	460b      	mov	r3, r1
 80022cc:	813b      	strh	r3, [r7, #8]
 80022ce:	4613      	mov	r3, r2
 80022d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	8979      	ldrh	r1, [r7, #10]
 80022d8:	4b20      	ldr	r3, [pc, #128]	; (800235c <I2C_RequestMemoryRead+0xa4>)
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	2300      	movs	r3, #0
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 fa0a 	bl	80026f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022e4:	69fa      	ldr	r2, [r7, #28]
 80022e6:	69b9      	ldr	r1, [r7, #24]
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 f89d 	bl	8002428 <I2C_WaitOnTXISFlagUntilTimeout>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e02c      	b.n	8002352 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d105      	bne.n	800230a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022fe:	893b      	ldrh	r3, [r7, #8]
 8002300:	b2da      	uxtb	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	629a      	str	r2, [r3, #40]	; 0x28
 8002308:	e015      	b.n	8002336 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800230a:	893b      	ldrh	r3, [r7, #8]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	b29b      	uxth	r3, r3
 8002310:	b2da      	uxtb	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	69b9      	ldr	r1, [r7, #24]
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 f883 	bl	8002428 <I2C_WaitOnTXISFlagUntilTimeout>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e012      	b.n	8002352 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800232c:	893b      	ldrh	r3, [r7, #8]
 800232e:	b2da      	uxtb	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	2200      	movs	r2, #0
 800233e:	2140      	movs	r1, #64	; 0x40
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 f831 	bl	80023a8 <I2C_WaitOnFlagUntilTimeout>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	80002000 	.word	0x80002000

08002360 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b02      	cmp	r3, #2
 8002374:	d103      	bne.n	800237e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2200      	movs	r2, #0
 800237c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b01      	cmp	r3, #1
 800238a:	d007      	beq.n	800239c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699a      	ldr	r2, [r3, #24]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	619a      	str	r2, [r3, #24]
  }
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023b8:	e022      	b.n	8002400 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c0:	d01e      	beq.n	8002400 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c2:	f7ff fa47 	bl	8001854 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d302      	bcc.n	80023d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d113      	bne.n	8002400 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023dc:	f043 0220 	orr.w	r2, r3, #32
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e00f      	b.n	8002420 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699a      	ldr	r2, [r3, #24]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	4013      	ands	r3, r2
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	429a      	cmp	r2, r3
 800240e:	bf0c      	ite	eq
 8002410:	2301      	moveq	r3, #1
 8002412:	2300      	movne	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	461a      	mov	r2, r3
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	429a      	cmp	r2, r3
 800241c:	d0cd      	beq.n	80023ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002434:	e02c      	b.n	8002490 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 f870 	bl	8002520 <I2C_IsErrorOccurred>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e02a      	b.n	80024a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002450:	d01e      	beq.n	8002490 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002452:	f7ff f9ff 	bl	8001854 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	429a      	cmp	r2, r3
 8002460:	d302      	bcc.n	8002468 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d113      	bne.n	8002490 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246c:	f043 0220 	orr.w	r2, r3, #32
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e007      	b.n	80024a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b02      	cmp	r3, #2
 800249c:	d1cb      	bne.n	8002436 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024b4:	e028      	b.n	8002508 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 f830 	bl	8002520 <I2C_IsErrorOccurred>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e026      	b.n	8002518 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ca:	f7ff f9c3 	bl	8001854 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d302      	bcc.n	80024e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d113      	bne.n	8002508 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	f043 0220 	orr.w	r2, r3, #32
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e007      	b.n	8002518 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	f003 0320 	and.w	r3, r3, #32
 8002512:	2b20      	cmp	r3, #32
 8002514:	d1cf      	bne.n	80024b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	2b00      	cmp	r3, #0
 800254a:	d075      	beq.n	8002638 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2210      	movs	r2, #16
 8002552:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002554:	e056      	b.n	8002604 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255c:	d052      	beq.n	8002604 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800255e:	f7ff f979 	bl	8001854 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	429a      	cmp	r2, r3
 800256c:	d302      	bcc.n	8002574 <I2C_IsErrorOccurred+0x54>
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d147      	bne.n	8002604 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800257e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002586:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002596:	d12e      	bne.n	80025f6 <I2C_IsErrorOccurred+0xd6>
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800259e:	d02a      	beq.n	80025f6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	d027      	beq.n	80025f6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80025b6:	f7ff f94d 	bl	8001854 <HAL_GetTick>
 80025ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025bc:	e01b      	b.n	80025f6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80025be:	f7ff f949 	bl	8001854 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b19      	cmp	r3, #25
 80025ca:	d914      	bls.n	80025f6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	f043 0220 	orr.w	r2, r3, #32
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b20      	cmp	r3, #32
 8002602:	d1dc      	bne.n	80025be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b20      	cmp	r3, #32
 8002610:	d003      	beq.n	800261a <I2C_IsErrorOccurred+0xfa>
 8002612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002616:	2b00      	cmp	r3, #0
 8002618:	d09d      	beq.n	8002556 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800261a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800261e:	2b00      	cmp	r3, #0
 8002620:	d103      	bne.n	800262a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2220      	movs	r2, #32
 8002628:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	f043 0304 	orr.w	r3, r3, #4
 8002630:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00b      	beq.n	8002662 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f44f 7280 	mov.w	r2, #256	; 0x100
 800265a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00b      	beq.n	8002684 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	f043 0308 	orr.w	r3, r3, #8
 8002672:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800267c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00b      	beq.n	80026a6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800269e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80026a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d01c      	beq.n	80026e8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f7ff fe56 	bl	8002360 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6859      	ldr	r1, [r3, #4]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <I2C_IsErrorOccurred+0x1d4>)
 80026c0:	400b      	ands	r3, r1
 80026c2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80026e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3728      	adds	r7, #40	; 0x28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	fe00e800 	.word	0xfe00e800

080026f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	607b      	str	r3, [r7, #4]
 8002702:	460b      	mov	r3, r1
 8002704:	817b      	strh	r3, [r7, #10]
 8002706:	4613      	mov	r3, r2
 8002708:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800270a:	897b      	ldrh	r3, [r7, #10]
 800270c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002710:	7a7b      	ldrb	r3, [r7, #9]
 8002712:	041b      	lsls	r3, r3, #16
 8002714:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002718:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	4313      	orrs	r3, r2
 8002722:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002726:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	0d5b      	lsrs	r3, r3, #21
 8002732:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002736:	4b08      	ldr	r3, [pc, #32]	; (8002758 <I2C_TransferConfig+0x60>)
 8002738:	430b      	orrs	r3, r1
 800273a:	43db      	mvns	r3, r3
 800273c:	ea02 0103 	and.w	r1, r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	430a      	orrs	r2, r1
 8002748:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800274a:	bf00      	nop
 800274c:	371c      	adds	r7, #28
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	03ff63ff 	.word	0x03ff63ff

0800275c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b20      	cmp	r3, #32
 8002770:	d138      	bne.n	80027e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800277c:	2302      	movs	r3, #2
 800277e:	e032      	b.n	80027e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2224      	movs	r2, #36	; 0x24
 800278c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6819      	ldr	r1, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0201 	orr.w	r2, r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	e000      	b.n	80027e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027e4:	2302      	movs	r3, #2
  }
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b20      	cmp	r3, #32
 8002806:	d139      	bne.n	800287c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002812:	2302      	movs	r3, #2
 8002814:	e033      	b.n	800287e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2224      	movs	r2, #36	; 0x24
 8002822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002844:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4313      	orrs	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	e000      	b.n	800287e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800287c:	2302      	movs	r3, #2
  }
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800288a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800288c:	b08b      	sub	sp, #44	; 0x2c
 800288e:	af06      	add	r7, sp, #24
 8002890:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0cb      	b.n	8002a34 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d106      	bne.n	80028b6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f8c3 	bl	8002a3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2203      	movs	r2, #3
 80028ba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f002 f970 	bl	8004ba8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c8:	2300      	movs	r3, #0
 80028ca:	73fb      	strb	r3, [r7, #15]
 80028cc:	e040      	b.n	8002950 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	3301      	adds	r3, #1
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	440b      	add	r3, r1
 80028f4:	7bfa      	ldrb	r2, [r7, #15]
 80028f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	4613      	mov	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	440b      	add	r3, r1
 8002908:	3303      	adds	r3, #3
 800290a:	2200      	movs	r2, #0
 800290c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800290e:	7bfa      	ldrb	r2, [r7, #15]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	440b      	add	r3, r1
 800291c:	3338      	adds	r3, #56	; 0x38
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002922:	7bfa      	ldrb	r2, [r7, #15]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	440b      	add	r3, r1
 8002930:	333c      	adds	r3, #60	; 0x3c
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002936:	7bfa      	ldrb	r2, [r7, #15]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	440b      	add	r3, r1
 8002944:	3340      	adds	r3, #64	; 0x40
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	3301      	adds	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
 8002950:	7bfa      	ldrb	r2, [r7, #15]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	429a      	cmp	r2, r3
 8002958:	d3b9      	bcc.n	80028ce <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800295a:	2300      	movs	r3, #0
 800295c:	73fb      	strb	r3, [r7, #15]
 800295e:	e044      	b.n	80029ea <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	440b      	add	r3, r1
 800296e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002976:	7bfa      	ldrb	r2, [r7, #15]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	440b      	add	r3, r1
 8002984:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002988:	7bfa      	ldrb	r2, [r7, #15]
 800298a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800298c:	7bfa      	ldrb	r2, [r7, #15]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	440b      	add	r3, r1
 800299a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800299e:	2200      	movs	r2, #0
 80029a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	440b      	add	r3, r1
 80029b0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029b8:	7bfa      	ldrb	r2, [r7, #15]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	440b      	add	r3, r1
 80029c6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029ce:	7bfa      	ldrb	r2, [r7, #15]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	440b      	add	r3, r1
 80029dc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	3301      	adds	r3, #1
 80029e8:	73fb      	strb	r3, [r7, #15]
 80029ea:	7bfa      	ldrb	r2, [r7, #15]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d3b5      	bcc.n	8002960 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	603b      	str	r3, [r7, #0]
 80029fa:	687e      	ldr	r6, [r7, #4]
 80029fc:	466d      	mov	r5, sp
 80029fe:	f106 0410 	add.w	r4, r6, #16
 8002a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a06:	6823      	ldr	r3, [r4, #0]
 8002a08:	602b      	str	r3, [r5, #0]
 8002a0a:	1d33      	adds	r3, r6, #4
 8002a0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a0e:	6838      	ldr	r0, [r7, #0]
 8002a10:	f002 f8e5 	bl	8004bde <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d102      	bne.n	8002a32 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f80f 	bl	8002a50 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a3c <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_MspInit could be implemented in the user file
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	f043 0302 	orr.w	r3, r3, #2
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab2:	6013      	str	r3, [r2, #0]
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	58000400 	.word	0x58000400

08002ac4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <HAL_PWREx_GetVoltageRange+0x18>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	58000400 	.word	0x58000400

08002ae0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002af2:	d101      	bne.n	8002af8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_RCC_HSE_Enable>:
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b16:	6013      	str	r3, [r2, #0]
}
 8002b18:	bf00      	nop
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <LL_RCC_HSE_Disable>:
{
 8002b22:	b480      	push	{r7}
 8002b24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b34:	6013      	str	r3, [r2, #0]
}
 8002b36:	bf00      	nop
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_RCC_HSE_IsReady>:
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b52:	d101      	bne.n	8002b58 <LL_RCC_HSE_IsReady+0x18>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <LL_RCC_HSE_IsReady+0x1a>
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_RCC_HSI_Enable>:
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b76:	6013      	str	r3, [r2, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <LL_RCC_HSI_Disable>:
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b94:	6013      	str	r3, [r2, #0]
}
 8002b96:	bf00      	nop
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <LL_RCC_HSI_IsReady>:
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb2:	d101      	bne.n	8002bb8 <LL_RCC_HSI_IsReady+0x18>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <LL_RCC_HSI_IsReady+0x1a>
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	061b      	lsls	r3, r3, #24
 8002bda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bde:	4313      	orrs	r3, r2
 8002be0:	604b      	str	r3, [r1, #4]
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <LL_RCC_HSI48_Enable>:
{
 8002bee:	b480      	push	{r7}
 8002bf0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002c06:	bf00      	nop
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <LL_RCC_HSI48_Disable>:
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c20:	f023 0301 	bic.w	r3, r3, #1
 8002c24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <LL_RCC_HSI48_IsReady>:
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d101      	bne.n	8002c4a <LL_RCC_HSI48_IsReady+0x18>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <LL_RCC_HSI48_IsReady+0x1a>
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <LL_RCC_LSE_Enable>:
{
 8002c56:	b480      	push	{r7}
 8002c58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c6e:	bf00      	nop
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <LL_RCC_LSE_Disable>:
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <LL_RCC_LSE_EnableBypass>:
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002caa:	f043 0304 	orr.w	r3, r3, #4
 8002cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002cb2:	bf00      	nop
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_RCC_LSE_DisableBypass>:
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ccc:	f023 0304 	bic.w	r3, r3, #4
 8002cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d101      	bne.n	8002cf6 <LL_RCC_LSE_IsReady+0x18>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <LL_RCC_LSE_IsReady+0x1a>
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002d1a:	bf00      	nop
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002d46:	b480      	push	{r7}
 8002d48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d101      	bne.n	8002d5e <LL_RCC_LSI1_IsReady+0x18>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <LL_RCC_LSI1_IsReady+0x1a>
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d7a:	f043 0304 	orr.w	r3, r3, #4
 8002d7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002d82:	bf00      	nop
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d9c:	f023 0304 	bic.w	r3, r3, #4
 8002da0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d101      	bne.n	8002dc6 <LL_RCC_LSI2_IsReady+0x18>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <LL_RCC_LSI2_IsReady+0x1a>
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	6013      	str	r3, [r2, #0]
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e2c:	f023 0301 	bic.w	r3, r3, #1
 8002e30:	6013      	str	r3, [r2, #0]
}
 8002e32:	bf00      	nop
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d101      	bne.n	8002e52 <LL_RCC_MSI_IsReady+0x16>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <LL_RCC_MSI_IsReady+0x18>
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e96:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2bb0      	cmp	r3, #176	; 0xb0
 8002e9c:	d901      	bls.n	8002ea2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002e9e:	23b0      	movs	r3, #176	; 0xb0
 8002ea0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002ea2:	687b      	ldr	r3, [r7, #4]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	604b      	str	r3, [r1, #4]
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f023 0203 	bic.w	r2, r3, #3
 8002eec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	608b      	str	r3, [r1, #8]
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002f02:	b480      	push	{r7}
 8002f04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 030c 	and.w	r3, r3, #12
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	608b      	str	r3, [r1, #8]
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f7e:	f023 020f 	bic.w	r2, r3, #15
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	091b      	lsrs	r3, r3, #4
 8002f86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	608b      	str	r3, [r1, #8]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	608b      	str	r3, [r1, #8]
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8003008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800300c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003014:	4618      	mov	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800301e:	b480      	push	{r7}
 8003020:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003026:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800303a:	b480      	push	{r7}
 800303c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800303e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003048:	4618      	mov	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003052:	b480      	push	{r7}
 8003054:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003060:	4618      	mov	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800306e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003078:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800307c:	6013      	str	r3, [r2, #0]
}
 800307e:	bf00      	nop
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800308c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800309a:	6013      	str	r3, [r2, #0]
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80030a6:	b480      	push	{r7}
 80030a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030b8:	d101      	bne.n	80030be <LL_RCC_PLL_IsReady+0x18>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <LL_RCC_PLL_IsReady+0x1a>
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80030ca:	b480      	push	{r7}
 80030cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80030ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	0a1b      	lsrs	r3, r3, #8
 80030d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80030da:	4618      	mov	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80030e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800310a:	4618      	mov	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f003 0303 	and.w	r3, r3, #3
}
 8003122:	4618      	mov	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800313a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313e:	d101      	bne.n	8003144 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003158:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800315c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003160:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003164:	d101      	bne.n	800316a <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003176:	b480      	push	{r7}
 8003178:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800317a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800317e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318a:	d101      	bne.n	8003190 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80031a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031ae:	d101      	bne.n	80031b4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80031c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031d2:	d101      	bne.n	80031d8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b08d      	sub	sp, #52	; 0x34
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e363      	b.n	80038be <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 808d 	beq.w	800331e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003204:	f7ff fe7d 	bl	8002f02 <LL_RCC_GetSysClkSource>
 8003208:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800320a:	f7ff ff83 	bl	8003114 <LL_RCC_PLL_GetMainSource>
 800320e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <HAL_RCC_OscConfig+0x3e>
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	2b0c      	cmp	r3, #12
 800321a:	d147      	bne.n	80032ac <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321e:	2b01      	cmp	r3, #1
 8003220:	d144      	bne.n	80032ac <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e347      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003232:	f7ff fe28 	bl	8002e86 <LL_RCC_MSI_GetRange>
 8003236:	4603      	mov	r3, r0
 8003238:	429c      	cmp	r4, r3
 800323a:	d914      	bls.n	8003266 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	4618      	mov	r0, r3
 8003242:	f000 fd4b 	bl	8003cdc <RCC_SetFlashLatencyFromMSIRange>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e336      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fe02 	bl	8002e5e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff fe26 	bl	8002eb0 <LL_RCC_MSI_SetCalibTrimming>
 8003264:	e013      	b.n	800328e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fdf7 	bl	8002e5e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fe1b 	bl	8002eb0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fd2c 	bl	8003cdc <RCC_SetFlashLatencyFromMSIRange>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e317      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800328e:	f000 fcc9 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8003292:	4603      	mov	r3, r0
 8003294:	4aa4      	ldr	r2, [pc, #656]	; (8003528 <HAL_RCC_OscConfig+0x344>)
 8003296:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003298:	4ba4      	ldr	r3, [pc, #656]	; (800352c <HAL_RCC_OscConfig+0x348>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe f8fb 	bl	8001498 <HAL_InitTick>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d039      	beq.n	800331c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e308      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01e      	beq.n	80032f2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032b4:	f7ff fda4 	bl	8002e00 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032b8:	f7fe facc 	bl	8001854 <HAL_GetTick>
 80032bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032c0:	f7fe fac8 	bl	8001854 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e2f5      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80032d2:	f7ff fdb3 	bl	8002e3c <LL_RCC_MSI_IsReady>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f1      	beq.n	80032c0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fdbc 	bl	8002e5e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff fde0 	bl	8002eb0 <LL_RCC_MSI_SetCalibTrimming>
 80032f0:	e015      	b.n	800331e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032f2:	f7ff fd94 	bl	8002e1e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032f6:	f7fe faad 	bl	8001854 <HAL_GetTick>
 80032fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032fe:	f7fe faa9 	bl	8001854 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e2d6      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003310:	f7ff fd94 	bl	8002e3c <LL_RCC_MSI_IsReady>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f1      	bne.n	80032fe <HAL_RCC_OscConfig+0x11a>
 800331a:	e000      	b.n	800331e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800331c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d047      	beq.n	80033ba <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800332a:	f7ff fdea 	bl	8002f02 <LL_RCC_GetSysClkSource>
 800332e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003330:	f7ff fef0 	bl	8003114 <LL_RCC_PLL_GetMainSource>
 8003334:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	2b08      	cmp	r3, #8
 800333a:	d005      	beq.n	8003348 <HAL_RCC_OscConfig+0x164>
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	2b0c      	cmp	r3, #12
 8003340:	d108      	bne.n	8003354 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	2b03      	cmp	r3, #3
 8003346:	d105      	bne.n	8003354 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d134      	bne.n	80033ba <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e2b4      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800335c:	d102      	bne.n	8003364 <HAL_RCC_OscConfig+0x180>
 800335e:	f7ff fbd1 	bl	8002b04 <LL_RCC_HSE_Enable>
 8003362:	e001      	b.n	8003368 <HAL_RCC_OscConfig+0x184>
 8003364:	f7ff fbdd 	bl	8002b22 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d012      	beq.n	8003396 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7fe fa70 	bl	8001854 <HAL_GetTick>
 8003374:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003378:	f7fe fa6c 	bl	8001854 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	; 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e299      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800338a:	f7ff fbd9 	bl	8002b40 <LL_RCC_HSE_IsReady>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0f1      	beq.n	8003378 <HAL_RCC_OscConfig+0x194>
 8003394:	e011      	b.n	80033ba <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003396:	f7fe fa5d 	bl	8001854 <HAL_GetTick>
 800339a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800339e:	f7fe fa59 	bl	8001854 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b64      	cmp	r3, #100	; 0x64
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e286      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80033b0:	f7ff fbc6 	bl	8002b40 <LL_RCC_HSE_IsReady>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f1      	bne.n	800339e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d04c      	beq.n	8003460 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033c6:	f7ff fd9c 	bl	8002f02 <LL_RCC_GetSysClkSource>
 80033ca:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033cc:	f7ff fea2 	bl	8003114 <LL_RCC_PLL_GetMainSource>
 80033d0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_OscConfig+0x200>
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2b0c      	cmp	r3, #12
 80033dc:	d10e      	bne.n	80033fc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d10b      	bne.n	80033fc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e266      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff fbe5 	bl	8002bc4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80033fa:	e031      	b.n	8003460 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d019      	beq.n	8003438 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003404:	f7ff fbae 	bl	8002b64 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fe fa24 	bl	8001854 <HAL_GetTick>
 800340c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003410:	f7fe fa20 	bl	8001854 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e24d      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003422:	f7ff fbbd 	bl	8002ba0 <LL_RCC_HSI_IsReady>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f1      	beq.n	8003410 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff fbc7 	bl	8002bc4 <LL_RCC_HSI_SetCalibTrimming>
 8003436:	e013      	b.n	8003460 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003438:	f7ff fba3 	bl	8002b82 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7fe fa0a 	bl	8001854 <HAL_GetTick>
 8003440:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003444:	f7fe fa06 	bl	8001854 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e233      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003456:	f7ff fba3 	bl	8002ba0 <LL_RCC_HSI_IsReady>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f1      	bne.n	8003444 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b00      	cmp	r3, #0
 800346a:	d106      	bne.n	800347a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80a3 	beq.w	80035c0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d076      	beq.n	8003570 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	d046      	beq.n	800351c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800348e:	f7ff fc5a 	bl	8002d46 <LL_RCC_LSI1_IsReady>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d113      	bne.n	80034c0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003498:	f7ff fc33 	bl	8002d02 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800349c:	f7fe f9da 	bl	8001854 <HAL_GetTick>
 80034a0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80034a4:	f7fe f9d6 	bl	8001854 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e203      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80034b6:	f7ff fc46 	bl	8002d46 <LL_RCC_LSI1_IsReady>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f1      	beq.n	80034a4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80034c0:	f7ff fc53 	bl	8002d6a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fe f9c6 	bl	8001854 <HAL_GetTick>
 80034c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80034cc:	f7fe f9c2 	bl	8001854 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e1ef      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80034de:	f7ff fc66 	bl	8002dae <LL_RCC_LSI2_IsReady>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f1      	beq.n	80034cc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fc70 	bl	8002dd2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80034f2:	f7ff fc17 	bl	8002d24 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f6:	f7fe f9ad 	bl	8001854 <HAL_GetTick>
 80034fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80034fe:	f7fe f9a9 	bl	8001854 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e1d6      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003510:	f7ff fc19 	bl	8002d46 <LL_RCC_LSI1_IsReady>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f1      	bne.n	80034fe <HAL_RCC_OscConfig+0x31a>
 800351a:	e051      	b.n	80035c0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800351c:	f7ff fbf1 	bl	8002d02 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003520:	f7fe f998 	bl	8001854 <HAL_GetTick>
 8003524:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003526:	e00c      	b.n	8003542 <HAL_RCC_OscConfig+0x35e>
 8003528:	20000008 	.word	0x20000008
 800352c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003530:	f7fe f990 	bl	8001854 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e1bd      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003542:	f7ff fc00 	bl	8002d46 <LL_RCC_LSI1_IsReady>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0f1      	beq.n	8003530 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800354c:	f7ff fc1e 	bl	8002d8c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003552:	f7fe f97f 	bl	8001854 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b03      	cmp	r3, #3
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e1ac      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003564:	f7ff fc23 	bl	8002dae <LL_RCC_LSI2_IsReady>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f1      	bne.n	8003552 <HAL_RCC_OscConfig+0x36e>
 800356e:	e027      	b.n	80035c0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003570:	f7ff fc0c 	bl	8002d8c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003574:	f7fe f96e 	bl	8001854 <HAL_GetTick>
 8003578:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800357c:	f7fe f96a 	bl	8001854 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b03      	cmp	r3, #3
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e197      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800358e:	f7ff fc0e 	bl	8002dae <LL_RCC_LSI2_IsReady>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f1      	bne.n	800357c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003598:	f7ff fbc4 	bl	8002d24 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359c:	f7fe f95a 	bl	8001854 <HAL_GetTick>
 80035a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80035a4:	f7fe f956 	bl	8001854 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e183      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80035b6:	f7ff fbc6 	bl	8002d46 <LL_RCC_LSI1_IsReady>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1f1      	bne.n	80035a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d05b      	beq.n	8003684 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035cc:	4ba7      	ldr	r3, [pc, #668]	; (800386c <HAL_RCC_OscConfig+0x688>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d114      	bne.n	8003602 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80035d8:	f7ff fa64 	bl	8002aa4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035dc:	f7fe f93a 	bl	8001854 <HAL_GetTick>
 80035e0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e4:	f7fe f936 	bl	8001854 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e163      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f6:	4b9d      	ldr	r3, [pc, #628]	; (800386c <HAL_RCC_OscConfig+0x688>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d102      	bne.n	8003610 <HAL_RCC_OscConfig+0x42c>
 800360a:	f7ff fb24 	bl	8002c56 <LL_RCC_LSE_Enable>
 800360e:	e00c      	b.n	800362a <HAL_RCC_OscConfig+0x446>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2b05      	cmp	r3, #5
 8003616:	d104      	bne.n	8003622 <HAL_RCC_OscConfig+0x43e>
 8003618:	f7ff fb3f 	bl	8002c9a <LL_RCC_LSE_EnableBypass>
 800361c:	f7ff fb1b 	bl	8002c56 <LL_RCC_LSE_Enable>
 8003620:	e003      	b.n	800362a <HAL_RCC_OscConfig+0x446>
 8003622:	f7ff fb29 	bl	8002c78 <LL_RCC_LSE_Disable>
 8003626:	f7ff fb49 	bl	8002cbc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d014      	beq.n	800365c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003632:	f7fe f90f 	bl	8001854 <HAL_GetTick>
 8003636:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003638:	e00a      	b.n	8003650 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363a:	f7fe f90b 	bl	8001854 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	f241 3288 	movw	r2, #5000	; 0x1388
 8003648:	4293      	cmp	r3, r2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e136      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003650:	f7ff fb45 	bl	8002cde <LL_RCC_LSE_IsReady>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0ef      	beq.n	800363a <HAL_RCC_OscConfig+0x456>
 800365a:	e013      	b.n	8003684 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365c:	f7fe f8fa 	bl	8001854 <HAL_GetTick>
 8003660:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003662:	e00a      	b.n	800367a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003664:	f7fe f8f6 	bl	8001854 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003672:	4293      	cmp	r3, r2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e121      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800367a:	f7ff fb30 	bl	8002cde <LL_RCC_LSE_IsReady>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1ef      	bne.n	8003664 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368c:	2b00      	cmp	r3, #0
 800368e:	d02c      	beq.n	80036ea <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003694:	2b00      	cmp	r3, #0
 8003696:	d014      	beq.n	80036c2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003698:	f7ff faa9 	bl	8002bee <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369c:	f7fe f8da 	bl	8001854 <HAL_GetTick>
 80036a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036a4:	f7fe f8d6 	bl	8001854 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e103      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80036b6:	f7ff fabc 	bl	8002c32 <LL_RCC_HSI48_IsReady>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f1      	beq.n	80036a4 <HAL_RCC_OscConfig+0x4c0>
 80036c0:	e013      	b.n	80036ea <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036c2:	f7ff faa5 	bl	8002c10 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c6:	f7fe f8c5 	bl	8001854 <HAL_GetTick>
 80036ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036ce:	f7fe f8c1 	bl	8001854 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e0ee      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80036e0:	f7ff faa7 	bl	8002c32 <LL_RCC_HSI48_IsReady>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f1      	bne.n	80036ce <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 80e4 	beq.w	80038bc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036f4:	f7ff fc05 	bl	8002f02 <LL_RCC_GetSysClkSource>
 80036f8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80036fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	2b02      	cmp	r3, #2
 8003708:	f040 80b4 	bne.w	8003874 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f003 0203 	and.w	r2, r3, #3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	429a      	cmp	r2, r3
 8003718:	d123      	bne.n	8003762 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d11c      	bne.n	8003762 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	0a1b      	lsrs	r3, r3, #8
 800372c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d114      	bne.n	8003762 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003742:	429a      	cmp	r2, r3
 8003744:	d10d      	bne.n	8003762 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003750:	429a      	cmp	r2, r3
 8003752:	d106      	bne.n	8003762 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800375e:	429a      	cmp	r2, r3
 8003760:	d05d      	beq.n	800381e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	2b0c      	cmp	r3, #12
 8003766:	d058      	beq.n	800381a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e0a1      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800377a:	f7ff fc85 	bl	8003088 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800377e:	f7fe f869 	bl	8001854 <HAL_GetTick>
 8003782:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003786:	f7fe f865 	bl	8001854 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e092      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1ef      	bne.n	8003786 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	4b30      	ldr	r3, [pc, #192]	; (8003870 <HAL_RCC_OscConfig+0x68c>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037b8:	4311      	orrs	r1, r2
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037be:	0212      	lsls	r2, r2, #8
 80037c0:	4311      	orrs	r1, r2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037c6:	4311      	orrs	r1, r2
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037cc:	4311      	orrs	r1, r2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80037d2:	430a      	orrs	r2, r1
 80037d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037d8:	4313      	orrs	r3, r2
 80037da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037dc:	f7ff fc45 	bl	800306a <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037f0:	f7fe f830 	bl	8001854 <HAL_GetTick>
 80037f4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f8:	f7fe f82c 	bl	8001854 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e059      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800380a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0ef      	beq.n	80037f8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003818:	e050      	b.n	80038bc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e04f      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800381e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d147      	bne.n	80038bc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800382c:	f7ff fc1d 	bl	800306a <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800383a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800383e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003840:	f7fe f808 	bl	8001854 <HAL_GetTick>
 8003844:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003848:	f7fe f804 	bl	8001854 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e031      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800385a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0ef      	beq.n	8003848 <HAL_RCC_OscConfig+0x664>
 8003868:	e028      	b.n	80038bc <HAL_RCC_OscConfig+0x6d8>
 800386a:	bf00      	nop
 800386c:	58000400 	.word	0x58000400
 8003870:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	2b0c      	cmp	r3, #12
 8003878:	d01e      	beq.n	80038b8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387a:	f7ff fc05 	bl	8003088 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387e:	f7fd ffe9 	bl	8001854 <HAL_GetTick>
 8003882:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003886:	f7fd ffe5 	bl	8001854 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e012      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1ef      	bne.n	8003886 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80038a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_RCC_OscConfig+0x6e4>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	60cb      	str	r3, [r1, #12]
 80038b6:	e001      	b.n	80038bc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3734      	adds	r7, #52	; 0x34
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd90      	pop	{r4, r7, pc}
 80038c6:	bf00      	nop
 80038c8:	eefefffc 	.word	0xeefefffc

080038cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e12d      	b.n	8003b3c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038e0:	4b98      	ldr	r3, [pc, #608]	; (8003b44 <HAL_RCC_ClockConfig+0x278>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d91b      	bls.n	8003926 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ee:	4b95      	ldr	r3, [pc, #596]	; (8003b44 <HAL_RCC_ClockConfig+0x278>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 0207 	bic.w	r2, r3, #7
 80038f6:	4993      	ldr	r1, [pc, #588]	; (8003b44 <HAL_RCC_ClockConfig+0x278>)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038fe:	f7fd ffa9 	bl	8001854 <HAL_GetTick>
 8003902:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003904:	e008      	b.n	8003918 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003906:	f7fd ffa5 	bl	8001854 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e111      	b.n	8003b3c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003918:	4b8a      	ldr	r3, [pc, #552]	; (8003b44 <HAL_RCC_ClockConfig+0x278>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d1ef      	bne.n	8003906 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d016      	beq.n	8003960 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff faef 	bl	8002f1a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800393c:	f7fd ff8a 	bl	8001854 <HAL_GetTick>
 8003940:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003944:	f7fd ff86 	bl	8001854 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e0f2      	b.n	8003b3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003956:	f7ff fbe9 	bl	800312c <LL_RCC_IsActiveFlag_HPRE>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f1      	beq.n	8003944 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b00      	cmp	r3, #0
 800396a:	d016      	beq.n	800399a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff fae6 	bl	8002f42 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003976:	f7fd ff6d 	bl	8001854 <HAL_GetTick>
 800397a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800397c:	e008      	b.n	8003990 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800397e:	f7fd ff69 	bl	8001854 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e0d5      	b.n	8003b3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003990:	f7ff fbde 	bl	8003150 <LL_RCC_IsActiveFlag_C2HPRE>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0f1      	beq.n	800397e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d016      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff fadf 	bl	8002f6e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039b0:	f7fd ff50 	bl	8001854 <HAL_GetTick>
 80039b4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039b8:	f7fd ff4c 	bl	8001854 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e0b8      	b.n	8003b3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80039ca:	f7ff fbd4 	bl	8003176 <LL_RCC_IsActiveFlag_SHDHPRE>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f1      	beq.n	80039b8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d016      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff fad9 	bl	8002f9c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039ea:	f7fd ff33 	bl	8001854 <HAL_GetTick>
 80039ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039f2:	f7fd ff2f 	bl	8001854 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e09b      	b.n	8003b3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003a04:	f7ff fbca 	bl	800319c <LL_RCC_IsActiveFlag_PPRE1>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f1      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d017      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff facf 	bl	8002fc4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a26:	f7fd ff15 	bl	8001854 <HAL_GetTick>
 8003a2a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a2e:	f7fd ff11 	bl	8001854 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e07d      	b.n	8003b3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003a40:	f7ff fbbe 	bl	80031c0 <LL_RCC_IsActiveFlag_PPRE2>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f1      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d043      	beq.n	8003ade <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d106      	bne.n	8003a6c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003a5e:	f7ff f86f 	bl	8002b40 <LL_RCC_HSE_IsReady>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d11e      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e067      	b.n	8003b3c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d106      	bne.n	8003a82 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003a74:	f7ff fb17 	bl	80030a6 <LL_RCC_PLL_IsReady>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d113      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e05c      	b.n	8003b3c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003a8a:	f7ff f9d7 	bl	8002e3c <LL_RCC_MSI_IsReady>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d108      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e051      	b.n	8003b3c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003a98:	f7ff f882 	bl	8002ba0 <LL_RCC_HSI_IsReady>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e04a      	b.n	8003b3c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff fa15 	bl	8002eda <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab0:	f7fd fed0 	bl	8001854 <HAL_GetTick>
 8003ab4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab6:	e00a      	b.n	8003ace <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab8:	f7fd fecc 	bl	8001854 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e036      	b.n	8003b3c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ace:	f7ff fa18 	bl	8002f02 <LL_RCC_GetSysClkSource>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d1ec      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ade:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <HAL_RCC_ClockConfig+0x278>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d21b      	bcs.n	8003b24 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aec:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <HAL_RCC_ClockConfig+0x278>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f023 0207 	bic.w	r2, r3, #7
 8003af4:	4913      	ldr	r1, [pc, #76]	; (8003b44 <HAL_RCC_ClockConfig+0x278>)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003afc:	f7fd feaa 	bl	8001854 <HAL_GetTick>
 8003b00:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003b04:	f7fd fea6 	bl	8001854 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e012      	b.n	8003b3c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b16:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_RCC_ClockConfig+0x278>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d1ef      	bne.n	8003b04 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003b24:	f000 f87e 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	4a07      	ldr	r2, [pc, #28]	; (8003b48 <HAL_RCC_ClockConfig+0x27c>)
 8003b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003b2e:	f7fd fe9d 	bl	800186c <HAL_GetTickPrio>
 8003b32:	4603      	mov	r3, r0
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fd fcaf 	bl	8001498 <HAL_InitTick>
 8003b3a:	4603      	mov	r3, r0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	58004000 	.word	0x58004000
 8003b48:	20000008 	.word	0x20000008

08003b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b4c:	b590      	push	{r4, r7, lr}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b52:	f7ff f9d6 	bl	8002f02 <LL_RCC_GetSysClkSource>
 8003b56:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10a      	bne.n	8003b74 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003b5e:	f7ff f992 	bl	8002e86 <LL_RCC_MSI_GetRange>
 8003b62:	4603      	mov	r3, r0
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	4a2b      	ldr	r2, [pc, #172]	; (8003c18 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	e04b      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d102      	bne.n	8003b80 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b7a:	4b28      	ldr	r3, [pc, #160]	; (8003c1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	e045      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d10a      	bne.n	8003b9c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003b86:	f7fe ffab 	bl	8002ae0 <LL_RCC_HSE_IsEnabledDiv2>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d102      	bne.n	8003b96 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003b90:	4b22      	ldr	r3, [pc, #136]	; (8003c1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	e03a      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003b96:	4b22      	ldr	r3, [pc, #136]	; (8003c20 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	e037      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003b9c:	f7ff faba 	bl	8003114 <LL_RCC_PLL_GetMainSource>
 8003ba0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d003      	beq.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x64>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	d003      	beq.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x6a>
 8003bae:	e00d      	b.n	8003bcc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003bb0:	4b1a      	ldr	r3, [pc, #104]	; (8003c1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003bb2:	60bb      	str	r3, [r7, #8]
        break;
 8003bb4:	e015      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003bb6:	f7fe ff93 	bl	8002ae0 <LL_RCC_HSE_IsEnabledDiv2>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d102      	bne.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003bc0:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003bc2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003bc4:	e00d      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003bc6:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003bc8:	60bb      	str	r3, [r7, #8]
        break;
 8003bca:	e00a      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003bcc:	f7ff f95b 	bl	8002e86 <LL_RCC_MSI_GetRange>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	091b      	lsrs	r3, r3, #4
 8003bd4:	f003 030f 	and.w	r3, r3, #15
 8003bd8:	4a0f      	ldr	r2, [pc, #60]	; (8003c18 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bde:	60bb      	str	r3, [r7, #8]
        break;
 8003be0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003be2:	f7ff fa72 	bl	80030ca <LL_RCC_PLL_GetN>
 8003be6:	4602      	mov	r2, r0
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	fb03 f402 	mul.w	r4, r3, r2
 8003bee:	f7ff fa85 	bl	80030fc <LL_RCC_PLL_GetDivider>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	091b      	lsrs	r3, r3, #4
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	fbb4 f4f3 	udiv	r4, r4, r3
 8003bfc:	f7ff fa72 	bl	80030e4 <LL_RCC_PLL_GetR>
 8003c00:	4603      	mov	r3, r0
 8003c02:	0f5b      	lsrs	r3, r3, #29
 8003c04:	3301      	adds	r3, #1
 8003c06:	fbb4 f3f3 	udiv	r3, r4, r3
 8003c0a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd90      	pop	{r4, r7, pc}
 8003c16:	bf00      	nop
 8003c18:	0800a5c4 	.word	0x0800a5c4
 8003c1c:	00f42400 	.word	0x00f42400
 8003c20:	01e84800 	.word	0x01e84800

08003c24 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c24:	b598      	push	{r3, r4, r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003c28:	f7ff ff90 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 8003c2c:	4604      	mov	r4, r0
 8003c2e:	f7ff f9dd 	bl	8002fec <LL_RCC_GetAHBPrescaler>
 8003c32:	4603      	mov	r3, r0
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	4a03      	ldr	r2, [pc, #12]	; (8003c48 <HAL_RCC_GetHCLKFreq+0x24>)
 8003c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c40:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	bd98      	pop	{r3, r4, r7, pc}
 8003c48:	0800a564 	.word	0x0800a564

08003c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c4c:	b598      	push	{r3, r4, r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003c50:	f7ff ffe8 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8003c54:	4604      	mov	r4, r0
 8003c56:	f7ff f9fc 	bl	8003052 <LL_RCC_GetAPB2Prescaler>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	0adb      	lsrs	r3, r3, #11
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	4a04      	ldr	r2, [pc, #16]	; (8003c74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	bd98      	pop	{r3, r4, r7, pc}
 8003c74:	0800a5a4 	.word	0x0800a5a4

08003c78 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	226f      	movs	r2, #111	; 0x6f
 8003c86:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8003c88:	f7ff f93b 	bl	8002f02 <LL_RCC_GetSysClkSource>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8003c92:	f7ff f9ab 	bl	8002fec <LL_RCC_GetAHBPrescaler>
 8003c96:	4602      	mov	r2, r0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8003c9c:	f7ff f9cd 	bl	800303a <LL_RCC_GetAPB1Prescaler>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8003ca6:	f7ff f9d4 	bl	8003052 <LL_RCC_GetAPB2Prescaler>
 8003caa:	4602      	mov	r2, r0
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8003cb0:	f7ff f9a8 	bl	8003004 <LL_C2_RCC_GetAHBPrescaler>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8003cba:	f7ff f9b0 	bl	800301e <LL_RCC_GetAHB4Prescaler>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003cc4:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <HAL_RCC_GetClockConfig+0x60>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0207 	and.w	r2, r3, #7
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	601a      	str	r2, [r3, #0]
}
 8003cd0:	bf00      	nop
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	58004000 	.word	0x58004000

08003cdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003cdc:	b590      	push	{r4, r7, lr}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2bb0      	cmp	r3, #176	; 0xb0
 8003ce8:	d903      	bls.n	8003cf2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003cea:	4b15      	ldr	r3, [pc, #84]	; (8003d40 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	e007      	b.n	8003d02 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	4a11      	ldr	r2, [pc, #68]	; (8003d40 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d00:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003d02:	f7ff f98c 	bl	800301e <LL_RCC_GetAHB4Prescaler>
 8003d06:	4603      	mov	r3, r0
 8003d08:	091b      	lsrs	r3, r3, #4
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	4a0d      	ldr	r2, [pc, #52]	; (8003d44 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003d20:	fba2 2303 	umull	r2, r3, r2, r3
 8003d24:	0c9c      	lsrs	r4, r3, #18
 8003d26:	f7fe fecd 	bl	8002ac4 <HAL_PWREx_GetVoltageRange>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4620      	mov	r0, r4
 8003d30:	f000 f80c 	bl	8003d4c <RCC_SetFlashLatency>
 8003d34:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd90      	pop	{r4, r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	0800a5c4 	.word	0x0800a5c4
 8003d44:	0800a564 	.word	0x0800a564
 8003d48:	431bde83 	.word	0x431bde83

08003d4c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003d4c:	b590      	push	{r4, r7, lr}
 8003d4e:	b093      	sub	sp, #76	; 0x4c
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003d56:	4b37      	ldr	r3, [pc, #220]	; (8003e34 <RCC_SetFlashLatency+0xe8>)
 8003d58:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003d5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003d62:	4a35      	ldr	r2, [pc, #212]	; (8003e38 <RCC_SetFlashLatency+0xec>)
 8003d64:	f107 031c 	add.w	r3, r7, #28
 8003d68:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003d6e:	4b33      	ldr	r3, [pc, #204]	; (8003e3c <RCC_SetFlashLatency+0xf0>)
 8003d70:	f107 040c 	add.w	r4, r7, #12
 8003d74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d84:	d11a      	bne.n	8003dbc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003d86:	2300      	movs	r3, #0
 8003d88:	643b      	str	r3, [r7, #64]	; 0x40
 8003d8a:	e013      	b.n	8003db4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	3348      	adds	r3, #72	; 0x48
 8003d92:	443b      	add	r3, r7
 8003d94:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d807      	bhi.n	8003dae <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	3348      	adds	r3, #72	; 0x48
 8003da4:	443b      	add	r3, r7
 8003da6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003daa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003dac:	e020      	b.n	8003df0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db0:	3301      	adds	r3, #1
 8003db2:	643b      	str	r3, [r7, #64]	; 0x40
 8003db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d9e8      	bls.n	8003d8c <RCC_SetFlashLatency+0x40>
 8003dba:	e019      	b.n	8003df0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dc0:	e013      	b.n	8003dea <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	3348      	adds	r3, #72	; 0x48
 8003dc8:	443b      	add	r3, r7
 8003dca:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d807      	bhi.n	8003de4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	3348      	adds	r3, #72	; 0x48
 8003dda:	443b      	add	r3, r7
 8003ddc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003de0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003de2:	e005      	b.n	8003df0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de6:	3301      	adds	r3, #1
 8003de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d9e8      	bls.n	8003dc2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003df0:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <RCC_SetFlashLatency+0xf4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f023 0207 	bic.w	r2, r3, #7
 8003df8:	4911      	ldr	r1, [pc, #68]	; (8003e40 <RCC_SetFlashLatency+0xf4>)
 8003dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e00:	f7fd fd28 	bl	8001854 <HAL_GetTick>
 8003e04:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003e06:	e008      	b.n	8003e1a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003e08:	f7fd fd24 	bl	8001854 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e007      	b.n	8003e2a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003e1a:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <RCC_SetFlashLatency+0xf4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d1ef      	bne.n	8003e08 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	374c      	adds	r7, #76	; 0x4c
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd90      	pop	{r4, r7, pc}
 8003e32:	bf00      	nop
 8003e34:	0800a4fc 	.word	0x0800a4fc
 8003e38:	0800a50c 	.word	0x0800a50c
 8003e3c:	0800a518 	.word	0x0800a518
 8003e40:	58004000 	.word	0x58004000

08003e44 <LL_RCC_LSE_IsEnabled>:
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <LL_RCC_LSE_IsEnabled+0x18>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <LL_RCC_LSE_IsEnabled+0x1a>
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <LL_RCC_LSE_IsReady>:
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d101      	bne.n	8003e80 <LL_RCC_LSE_IsReady+0x18>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <LL_RCC_LSE_IsReady+0x1a>
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <LL_RCC_MSI_EnablePLLMode>:
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e9a:	f043 0304 	orr.w	r3, r3, #4
 8003e9e:	6013      	str	r3, [r2, #0]
}
 8003ea0:	bf00      	nop
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <LL_RCC_SetRFWKPClockSource>:
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <LL_RCC_SetSMPSClockSource>:
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	f023 0203 	bic.w	r2, r3, #3
 8003ee8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <LL_RCC_SetSMPSPrescaler>:
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <LL_RCC_SetUSARTClockSource>:
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f023 0203 	bic.w	r2, r3, #3
 8003f3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <LL_RCC_SetLPUARTClockSource>:
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <LL_RCC_SetI2CClockSource>:
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003f96:	43db      	mvns	r3, r3
 8003f98:	401a      	ands	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003fa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <LL_RCC_SetLPTIMClockSource>:
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	0c1b      	lsrs	r3, r3, #16
 8003fcc:	041b      	lsls	r3, r3, #16
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	401a      	ands	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	041b      	lsls	r3, r3, #16
 8003fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <LL_RCC_SetSAIClockSource>:
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004000:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <LL_RCC_SetRNGClockSource>:
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004028:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800402c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <LL_RCC_SetCLK48ClockSource>:
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800404c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004054:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004058:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <LL_RCC_SetUSBClockSource>:
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff ffe3 	bl	8004044 <LL_RCC_SetCLK48ClockSource>
}
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <LL_RCC_SetADCClockSource>:
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800408e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004096:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800409a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <LL_RCC_SetRTCClockSource>:
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80040ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <LL_RCC_GetRTCClockSource>:
{
 80040de:	b480      	push	{r7}
 80040e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80040e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <LL_RCC_ForceBackupDomainReset>:
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80040fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800410c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004110:	bf00      	nop
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <LL_RCC_ReleaseBackupDomainReset>:
{
 800411a:	b480      	push	{r7}
 800411c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800411e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800412a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800412e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004132:	bf00      	nop
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <LL_RCC_PLLSAI1_Enable>:
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800414a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800414e:	6013      	str	r3, [r2, #0]
}
 8004150:	bf00      	nop
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <LL_RCC_PLLSAI1_Disable>:
{
 800415a:	b480      	push	{r7}
 800415c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800415e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004168:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800416c:	6013      	str	r3, [r2, #0]
}
 800416e:	bf00      	nop
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <LL_RCC_PLLSAI1_IsReady>:
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800417c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004186:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800418a:	d101      	bne.n	8004190 <LL_RCC_PLLSAI1_IsReady+0x18>
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80041a4:	2300      	movs	r3, #0
 80041a6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80041a8:	2300      	movs	r3, #0
 80041aa:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d034      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041c0:	d021      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80041c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041c6:	d81b      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041cc:	d01d      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80041ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041d2:	d815      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00b      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80041d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041dc:	d110      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80041de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ec:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80041ee:	e00d      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3304      	adds	r3, #4
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 f94d 	bl	8004494 <RCCEx_PLLSAI1_ConfigNP>
 80041fa:	4603      	mov	r3, r0
 80041fc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80041fe:	e005      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	77fb      	strb	r3, [r7, #31]
        break;
 8004204:	e002      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004206:	bf00      	nop
 8004208:	e000      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800420a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800420c:	7ffb      	ldrb	r3, [r7, #31]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d105      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff fee8 	bl	8003fec <LL_RCC_SetSAIClockSource>
 800421c:	e001      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421e:	7ffb      	ldrb	r3, [r7, #31]
 8004220:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800422a:	2b00      	cmp	r3, #0
 800422c:	d046      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800422e:	f7ff ff56 	bl	80040de <LL_RCC_GetRTCClockSource>
 8004232:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	429a      	cmp	r2, r3
 800423c:	d03c      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800423e:	f7fe fc31 	bl	8002aa4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d105      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff ff30 	bl	80040b2 <LL_RCC_SetRTCClockSource>
 8004252:	e02e      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800425e:	f7ff ff4b 	bl	80040f8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004262:	f7ff ff5a 	bl	800411a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	4313      	orrs	r3, r2
 8004272:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004274:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800427e:	f7ff fde1 	bl	8003e44 <LL_RCC_LSE_IsEnabled>
 8004282:	4603      	mov	r3, r0
 8004284:	2b01      	cmp	r3, #1
 8004286:	d114      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004288:	f7fd fae4 	bl	8001854 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800428e:	e00b      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004290:	f7fd fae0 	bl	8001854 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	f241 3288 	movw	r2, #5000	; 0x1388
 800429e:	4293      	cmp	r3, r2
 80042a0:	d902      	bls.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	77fb      	strb	r3, [r7, #31]
              break;
 80042a6:	e004      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80042a8:	f7ff fdde 	bl	8003e68 <LL_RCC_LSE_IsReady>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d1ee      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80042b2:	7ffb      	ldrb	r3, [r7, #31]
 80042b4:	77bb      	strb	r3, [r7, #30]
 80042b6:	e001      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b8:	7ffb      	ldrb	r3, [r7, #31]
 80042ba:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d004      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff fe2a 	bl	8003f26 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d004      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff fe35 	bl	8003f52 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d004      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff fe5d 	bl	8003fb8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b00      	cmp	r3, #0
 8004308:	d004      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	4618      	mov	r0, r3
 8004310:	f7ff fe52 	bl	8003fb8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d004      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff fe2a 	bl	8003f7e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d004      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fe1f 	bl	8003f7e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004348:	2b00      	cmp	r3, #0
 800434a:	d022      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff fe8d 	bl	8004070 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800435e:	d107      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800436a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800436e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004374:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004378:	d10b      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3304      	adds	r3, #4
 800437e:	4618      	mov	r0, r3
 8004380:	f000 f8e3 	bl	800454a <RCCEx_PLLSAI1_ConfigNQ>
 8004384:	4603      	mov	r3, r0
 8004386:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004388:	7ffb      	ldrb	r3, [r7, #31]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800438e:	7ffb      	ldrb	r3, [r7, #31]
 8004390:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800439a:	2b00      	cmp	r3, #0
 800439c:	d02b      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a6:	d008      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043b0:	d003      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d105      	bne.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff fe2a 	bl	8004018 <LL_RCC_SetRNGClockSource>
 80043c4:	e00a      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x240>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	2000      	movs	r0, #0
 80043d2:	f7ff fe21 	bl	8004018 <LL_RCC_SetRNGClockSource>
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f7ff fe34 	bl	8004044 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80043e4:	d107      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80043e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043f4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d022      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff fe3d 	bl	8004086 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004414:	d107      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004424:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800442e:	d10b      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3304      	adds	r3, #4
 8004434:	4618      	mov	r0, r3
 8004436:	f000 f8e3 	bl	8004600 <RCCEx_PLLSAI1_ConfigNR>
 800443a:	4603      	mov	r3, r0
 800443c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800443e:	7ffb      	ldrb	r3, [r7, #31]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004444:	7ffb      	ldrb	r3, [r7, #31]
 8004446:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d004      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff fd26 	bl	8003eaa <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff fd45 	bl	8003efe <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff fd2c 	bl	8003ed6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800447e:	7fbb      	ldrb	r3, [r7, #30]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3720      	adds	r7, #32
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800448c:	f7ff fcfe 	bl	8003e8c <LL_RCC_MSI_EnablePLLMode>
}
 8004490:	bf00      	nop
 8004492:	bd80      	pop	{r7, pc}

08004494 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80044a0:	f7ff fe5b 	bl	800415a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80044a4:	f7fd f9d6 	bl	8001854 <HAL_GetTick>
 80044a8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80044aa:	e009      	b.n	80044c0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044ac:	f7fd f9d2 	bl	8001854 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d902      	bls.n	80044c0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	73fb      	strb	r3, [r7, #15]
      break;
 80044be:	e004      	b.n	80044ca <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80044c0:	f7ff fe5a 	bl	8004178 <LL_RCC_PLLSAI1_IsReady>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f0      	bne.n	80044ac <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d137      	bne.n	8004540 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80044d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	021b      	lsls	r3, r3, #8
 80044e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044e4:	4313      	orrs	r3, r2
 80044e6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80044e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044fa:	4313      	orrs	r3, r2
 80044fc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80044fe:	f7ff fe1d 	bl	800413c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004502:	f7fd f9a7 	bl	8001854 <HAL_GetTick>
 8004506:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004508:	e009      	b.n	800451e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800450a:	f7fd f9a3 	bl	8001854 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d902      	bls.n	800451e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	73fb      	strb	r3, [r7, #15]
        break;
 800451c:	e004      	b.n	8004528 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800451e:	f7ff fe2b 	bl	8004178 <LL_RCC_PLLSAI1_IsReady>
 8004522:	4603      	mov	r3, r0
 8004524:	2b01      	cmp	r3, #1
 8004526:	d1f0      	bne.n	800450a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004528:	7bfb      	ldrb	r3, [r7, #15]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d108      	bne.n	8004540 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800452e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800453c:	4313      	orrs	r3, r2
 800453e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004540:	7bfb      	ldrb	r3, [r7, #15]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b084      	sub	sp, #16
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004556:	f7ff fe00 	bl	800415a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800455a:	f7fd f97b 	bl	8001854 <HAL_GetTick>
 800455e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004560:	e009      	b.n	8004576 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004562:	f7fd f977 	bl	8001854 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d902      	bls.n	8004576 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	73fb      	strb	r3, [r7, #15]
      break;
 8004574:	e004      	b.n	8004580 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004576:	f7ff fdff 	bl	8004178 <LL_RCC_PLLSAI1_IsReady>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1f0      	bne.n	8004562 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d137      	bne.n	80045f6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800459a:	4313      	orrs	r3, r2
 800459c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800459e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045b0:	4313      	orrs	r3, r2
 80045b2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80045b4:	f7ff fdc2 	bl	800413c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b8:	f7fd f94c 	bl	8001854 <HAL_GetTick>
 80045bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80045be:	e009      	b.n	80045d4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045c0:	f7fd f948 	bl	8001854 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d902      	bls.n	80045d4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	73fb      	strb	r3, [r7, #15]
        break;
 80045d2:	e004      	b.n	80045de <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80045d4:	f7ff fdd0 	bl	8004178 <LL_RCC_PLLSAI1_IsReady>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d1f0      	bne.n	80045c0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d108      	bne.n	80045f6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80045e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045f2:	4313      	orrs	r3, r2
 80045f4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004608:	2300      	movs	r3, #0
 800460a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800460c:	f7ff fda5 	bl	800415a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004610:	f7fd f920 	bl	8001854 <HAL_GetTick>
 8004614:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004616:	e009      	b.n	800462c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004618:	f7fd f91c 	bl	8001854 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d902      	bls.n	800462c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	73fb      	strb	r3, [r7, #15]
      break;
 800462a:	e004      	b.n	8004636 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800462c:	f7ff fda4 	bl	8004178 <LL_RCC_PLLSAI1_IsReady>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f0      	bne.n	8004618 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004636:	7bfb      	ldrb	r3, [r7, #15]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d137      	bne.n	80046ac <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800463c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004650:	4313      	orrs	r3, r2
 8004652:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004666:	4313      	orrs	r3, r2
 8004668:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800466a:	f7ff fd67 	bl	800413c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800466e:	f7fd f8f1 	bl	8001854 <HAL_GetTick>
 8004672:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004674:	e009      	b.n	800468a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004676:	f7fd f8ed 	bl	8001854 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d902      	bls.n	800468a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	73fb      	strb	r3, [r7, #15]
        break;
 8004688:	e004      	b.n	8004694 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800468a:	f7ff fd75 	bl	8004178 <LL_RCC_PLLSAI1_IsReady>
 800468e:	4603      	mov	r3, r0
 8004690:	2b01      	cmp	r3, #1
 8004692:	d1f0      	bne.n	8004676 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d108      	bne.n	80046ac <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800469a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046a8:	4313      	orrs	r3, r2
 80046aa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e049      	b.n	800475c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d106      	bne.n	80046e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f841 	bl	8004764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2202      	movs	r2, #2
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	3304      	adds	r3, #4
 80046f2:	4619      	mov	r1, r3
 80046f4:	4610      	mov	r0, r2
 80046f6:	f000 f9d5 	bl	8004aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b01      	cmp	r3, #1
 800478a:	d001      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e036      	b.n	80047fe <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a17      	ldr	r2, [pc, #92]	; (800480c <HAL_TIM_Base_Start_IT+0x94>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x44>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ba:	d115      	bne.n	80047e8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	4b13      	ldr	r3, [pc, #76]	; (8004810 <HAL_TIM_Base_Start_IT+0x98>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b06      	cmp	r3, #6
 80047cc:	d015      	beq.n	80047fa <HAL_TIM_Base_Start_IT+0x82>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d4:	d011      	beq.n	80047fa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0201 	orr.w	r2, r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e6:	e008      	b.n	80047fa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	e000      	b.n	80047fc <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40012c00 	.word	0x40012c00
 8004810:	00010007 	.word	0x00010007

08004814 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b02      	cmp	r3, #2
 8004828:	d122      	bne.n	8004870 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b02      	cmp	r3, #2
 8004836:	d11b      	bne.n	8004870 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0202 	mvn.w	r2, #2
 8004840:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f905 	bl	8004a66 <HAL_TIM_IC_CaptureCallback>
 800485c:	e005      	b.n	800486a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f8f7 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f908 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b04      	cmp	r3, #4
 800487c:	d122      	bne.n	80048c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b04      	cmp	r3, #4
 800488a:	d11b      	bne.n	80048c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f06f 0204 	mvn.w	r2, #4
 8004894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2202      	movs	r2, #2
 800489a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f8db 	bl	8004a66 <HAL_TIM_IC_CaptureCallback>
 80048b0:	e005      	b.n	80048be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f8cd 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f8de 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d122      	bne.n	8004918 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d11b      	bne.n	8004918 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f06f 0208 	mvn.w	r2, #8
 80048e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2204      	movs	r2, #4
 80048ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f8b1 	bl	8004a66 <HAL_TIM_IC_CaptureCallback>
 8004904:	e005      	b.n	8004912 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f8a3 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f8b4 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f003 0310 	and.w	r3, r3, #16
 8004922:	2b10      	cmp	r3, #16
 8004924:	d122      	bne.n	800496c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f003 0310 	and.w	r3, r3, #16
 8004930:	2b10      	cmp	r3, #16
 8004932:	d11b      	bne.n	800496c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0210 	mvn.w	r2, #16
 800493c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2208      	movs	r2, #8
 8004942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f887 	bl	8004a66 <HAL_TIM_IC_CaptureCallback>
 8004958:	e005      	b.n	8004966 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f879 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f88a 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b01      	cmp	r3, #1
 8004978:	d10e      	bne.n	8004998 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b01      	cmp	r3, #1
 8004986:	d107      	bne.n	8004998 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f06f 0201 	mvn.w	r2, #1
 8004990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7fc fba6 	bl	80010e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a2:	2b80      	cmp	r3, #128	; 0x80
 80049a4:	d10e      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b0:	2b80      	cmp	r3, #128	; 0x80
 80049b2:	d107      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f8de 	bl	8004b80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d2:	d10e      	bne.n	80049f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049de:	2b80      	cmp	r3, #128	; 0x80
 80049e0:	d107      	bne.n	80049f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f8d1 	bl	8004b94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fc:	2b40      	cmp	r3, #64	; 0x40
 80049fe:	d10e      	bne.n	8004a1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0a:	2b40      	cmp	r3, #64	; 0x40
 8004a0c:	d107      	bne.n	8004a1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f838 	bl	8004a8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b20      	cmp	r3, #32
 8004a2a:	d10e      	bne.n	8004a4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b20      	cmp	r3, #32
 8004a38:	d107      	bne.n	8004a4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f06f 0220 	mvn.w	r2, #32
 8004a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f891 	bl	8004b6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a4a:	bf00      	nop
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a2a      	ldr	r2, [pc, #168]	; (8004b60 <TIM_Base_SetConfig+0xbc>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_Base_SetConfig+0x20>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac2:	d108      	bne.n	8004ad6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a21      	ldr	r2, [pc, #132]	; (8004b60 <TIM_Base_SetConfig+0xbc>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00b      	beq.n	8004af6 <TIM_Base_SetConfig+0x52>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae4:	d007      	beq.n	8004af6 <TIM_Base_SetConfig+0x52>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a1e      	ldr	r2, [pc, #120]	; (8004b64 <TIM_Base_SetConfig+0xc0>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d003      	beq.n	8004af6 <TIM_Base_SetConfig+0x52>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a1d      	ldr	r2, [pc, #116]	; (8004b68 <TIM_Base_SetConfig+0xc4>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d108      	bne.n	8004b08 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a0c      	ldr	r2, [pc, #48]	; (8004b60 <TIM_Base_SetConfig+0xbc>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d007      	beq.n	8004b44 <TIM_Base_SetConfig+0xa0>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a0b      	ldr	r2, [pc, #44]	; (8004b64 <TIM_Base_SetConfig+0xc0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d003      	beq.n	8004b44 <TIM_Base_SetConfig+0xa0>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a0a      	ldr	r2, [pc, #40]	; (8004b68 <TIM_Base_SetConfig+0xc4>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d103      	bne.n	8004b4c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	691a      	ldr	r2, [r3, #16]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	615a      	str	r2, [r3, #20]
}
 8004b52:	bf00      	nop
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	40012c00 	.word	0x40012c00
 8004b64:	40014400 	.word	0x40014400
 8004b68:	40014800 	.word	0x40014800

08004b6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004bb0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004bb4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004bde:	b084      	sub	sp, #16
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	f107 0014 	add.w	r0, r7, #20
 8004bec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	b004      	add	sp, #16
 8004c1e:	4770      	bx	lr

08004c20 <__NVIC_SetPriority>:
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	4603      	mov	r3, r0
 8004c28:	6039      	str	r1, [r7, #0]
 8004c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	db0a      	blt.n	8004c4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	490c      	ldr	r1, [pc, #48]	; (8004c6c <__NVIC_SetPriority+0x4c>)
 8004c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3e:	0112      	lsls	r2, r2, #4
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	440b      	add	r3, r1
 8004c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004c48:	e00a      	b.n	8004c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	4908      	ldr	r1, [pc, #32]	; (8004c70 <__NVIC_SetPriority+0x50>)
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	3b04      	subs	r3, #4
 8004c58:	0112      	lsls	r2, r2, #4
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	761a      	strb	r2, [r3, #24]
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	e000e100 	.word	0xe000e100
 8004c70:	e000ed00 	.word	0xe000ed00

08004c74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004c78:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <SysTick_Handler+0x1c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004c7c:	f001 fd28 	bl	80066d0 <xTaskGetSchedulerState>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d001      	beq.n	8004c8a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004c86:	f002 fb0f 	bl	80072a8 <xPortSysTickHandler>
  }
}
 8004c8a:	bf00      	nop
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	e000e010 	.word	0xe000e010

08004c94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004c98:	2100      	movs	r1, #0
 8004c9a:	f06f 0004 	mvn.w	r0, #4
 8004c9e:	f7ff ffbf 	bl	8004c20 <__NVIC_SetPriority>
#endif
}
 8004ca2:	bf00      	nop
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cae:	f3ef 8305 	mrs	r3, IPSR
 8004cb2:	603b      	str	r3, [r7, #0]
  return(result);
 8004cb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004cba:	f06f 0305 	mvn.w	r3, #5
 8004cbe:	607b      	str	r3, [r7, #4]
 8004cc0:	e00c      	b.n	8004cdc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004cc2:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <osKernelInitialize+0x44>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d105      	bne.n	8004cd6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004cca:	4b08      	ldr	r3, [pc, #32]	; (8004cec <osKernelInitialize+0x44>)
 8004ccc:	2201      	movs	r2, #1
 8004cce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	607b      	str	r3, [r7, #4]
 8004cd4:	e002      	b.n	8004cdc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004cdc:	687b      	ldr	r3, [r7, #4]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	200005dc 	.word	0x200005dc

08004cf0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cf6:	f3ef 8305 	mrs	r3, IPSR
 8004cfa:	603b      	str	r3, [r7, #0]
  return(result);
 8004cfc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004d02:	f06f 0305 	mvn.w	r3, #5
 8004d06:	607b      	str	r3, [r7, #4]
 8004d08:	e010      	b.n	8004d2c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004d0a:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <osKernelStart+0x48>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d109      	bne.n	8004d26 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004d12:	f7ff ffbf 	bl	8004c94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004d16:	4b08      	ldr	r3, [pc, #32]	; (8004d38 <osKernelStart+0x48>)
 8004d18:	2202      	movs	r2, #2
 8004d1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004d1c:	f001 f87c 	bl	8005e18 <vTaskStartScheduler>
      stat = osOK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	607b      	str	r3, [r7, #4]
 8004d24:	e002      	b.n	8004d2c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004d26:	f04f 33ff 	mov.w	r3, #4294967295
 8004d2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d2c:	687b      	ldr	r3, [r7, #4]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	200005dc 	.word	0x200005dc

08004d3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08e      	sub	sp, #56	; 0x38
 8004d40:	af04      	add	r7, sp, #16
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d4c:	f3ef 8305 	mrs	r3, IPSR
 8004d50:	617b      	str	r3, [r7, #20]
  return(result);
 8004d52:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d17e      	bne.n	8004e56 <osThreadNew+0x11a>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d07b      	beq.n	8004e56 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004d5e:	2380      	movs	r3, #128	; 0x80
 8004d60:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004d62:	2318      	movs	r3, #24
 8004d64:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004d66:	2300      	movs	r3, #0
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d6e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d045      	beq.n	8004e02 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <osThreadNew+0x48>
        name = attr->name;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d008      	beq.n	8004daa <osThreadNew+0x6e>
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	2b38      	cmp	r3, #56	; 0x38
 8004d9c:	d805      	bhi.n	8004daa <osThreadNew+0x6e>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <osThreadNew+0x72>
        return (NULL);
 8004daa:	2300      	movs	r3, #0
 8004dac:	e054      	b.n	8004e58 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	089b      	lsrs	r3, r3, #2
 8004dbc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00e      	beq.n	8004de4 <osThreadNew+0xa8>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	2bbb      	cmp	r3, #187	; 0xbb
 8004dcc:	d90a      	bls.n	8004de4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d006      	beq.n	8004de4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <osThreadNew+0xa8>
        mem = 1;
 8004dde:	2301      	movs	r3, #1
 8004de0:	61bb      	str	r3, [r7, #24]
 8004de2:	e010      	b.n	8004e06 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10c      	bne.n	8004e06 <osThreadNew+0xca>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d108      	bne.n	8004e06 <osThreadNew+0xca>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d104      	bne.n	8004e06 <osThreadNew+0xca>
          mem = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	61bb      	str	r3, [r7, #24]
 8004e00:	e001      	b.n	8004e06 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d110      	bne.n	8004e2e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e14:	9202      	str	r2, [sp, #8]
 8004e16:	9301      	str	r3, [sp, #4]
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	6a3a      	ldr	r2, [r7, #32]
 8004e20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 fe0c 	bl	8005a40 <xTaskCreateStatic>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	e013      	b.n	8004e56 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d110      	bne.n	8004e56 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	f107 0310 	add.w	r3, r7, #16
 8004e3c:	9301      	str	r3, [sp, #4]
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 fe57 	bl	8005afa <xTaskCreate>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d001      	beq.n	8004e56 <osThreadNew+0x11a>
            hTask = NULL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e56:	693b      	ldr	r3, [r7, #16]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3728      	adds	r7, #40	; 0x28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e68:	f3ef 8305 	mrs	r3, IPSR
 8004e6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e6e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <osDelay+0x1c>
    stat = osErrorISR;
 8004e74:	f06f 0305 	mvn.w	r3, #5
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	e007      	b.n	8004e8c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 ff92 	bl	8005db0 <vTaskDelay>
    }
  }

  return (stat);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
	...

08004e98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4a07      	ldr	r2, [pc, #28]	; (8004ec4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004ea8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	4a06      	ldr	r2, [pc, #24]	; (8004ec8 <vApplicationGetIdleTaskMemory+0x30>)
 8004eae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2280      	movs	r2, #128	; 0x80
 8004eb4:	601a      	str	r2, [r3, #0]
}
 8004eb6:	bf00      	nop
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	200005e0 	.word	0x200005e0
 8004ec8:	2000069c 	.word	0x2000069c

08004ecc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4a07      	ldr	r2, [pc, #28]	; (8004ef8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004edc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4a06      	ldr	r2, [pc, #24]	; (8004efc <vApplicationGetTimerTaskMemory+0x30>)
 8004ee2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004eea:	601a      	str	r2, [r3, #0]
}
 8004eec:	bf00      	nop
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	2000089c 	.word	0x2000089c
 8004efc:	20000958 	.word	0x20000958

08004f00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f103 0208 	add.w	r2, r3, #8
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f04f 32ff 	mov.w	r2, #4294967295
 8004f18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f103 0208 	add.w	r2, r3, #8
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f103 0208 	add.w	r2, r3, #8
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b085      	sub	sp, #20
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	601a      	str	r2, [r3, #0]
}
 8004f96:	bf00      	nop
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b085      	sub	sp, #20
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb8:	d103      	bne.n	8004fc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	e00c      	b.n	8004fdc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	e002      	b.n	8004fd0 <vListInsert+0x2e>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d2f6      	bcs.n	8004fca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	601a      	str	r2, [r3, #0]
}
 8005008:	bf00      	nop
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6892      	ldr	r2, [r2, #8]
 800502a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6852      	ldr	r2, [r2, #4]
 8005034:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	429a      	cmp	r2, r3
 800503e:	d103      	bne.n	8005048 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	1e5a      	subs	r2, r3, #1
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10a      	bne.n	8005092 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800508e:	bf00      	nop
 8005090:	e7fe      	b.n	8005090 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005092:	f002 f877 	bl	8007184 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509e:	68f9      	ldr	r1, [r7, #12]
 80050a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050a2:	fb01 f303 	mul.w	r3, r1, r3
 80050a6:	441a      	add	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c2:	3b01      	subs	r3, #1
 80050c4:	68f9      	ldr	r1, [r7, #12]
 80050c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050c8:	fb01 f303 	mul.w	r3, r1, r3
 80050cc:	441a      	add	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	22ff      	movs	r2, #255	; 0xff
 80050d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	22ff      	movs	r2, #255	; 0xff
 80050de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d114      	bne.n	8005112 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d01a      	beq.n	8005126 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	3310      	adds	r3, #16
 80050f4:	4618      	mov	r0, r3
 80050f6:	f001 f929 	bl	800634c <xTaskRemoveFromEventList>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d012      	beq.n	8005126 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005100:	4b0c      	ldr	r3, [pc, #48]	; (8005134 <xQueueGenericReset+0xcc>)
 8005102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	e009      	b.n	8005126 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3310      	adds	r3, #16
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff fef2 	bl	8004f00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	3324      	adds	r3, #36	; 0x24
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff feed 	bl	8004f00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005126:	f002 f85d 	bl	80071e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800512a:	2301      	movs	r3, #1
}
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	e000ed04 	.word	0xe000ed04

08005138 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005138:	b580      	push	{r7, lr}
 800513a:	b08e      	sub	sp, #56	; 0x38
 800513c:	af02      	add	r7, sp, #8
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
 8005144:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10a      	bne.n	8005162 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800514c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800515e:	bf00      	nop
 8005160:	e7fe      	b.n	8005160 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10a      	bne.n	800517e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516c:	f383 8811 	msr	BASEPRI, r3
 8005170:	f3bf 8f6f 	isb	sy
 8005174:	f3bf 8f4f 	dsb	sy
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
}
 800517a:	bf00      	nop
 800517c:	e7fe      	b.n	800517c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <xQueueGenericCreateStatic+0x52>
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <xQueueGenericCreateStatic+0x56>
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <xQueueGenericCreateStatic+0x58>
 800518e:	2300      	movs	r3, #0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10a      	bne.n	80051aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	623b      	str	r3, [r7, #32]
}
 80051a6:	bf00      	nop
 80051a8:	e7fe      	b.n	80051a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d102      	bne.n	80051b6 <xQueueGenericCreateStatic+0x7e>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <xQueueGenericCreateStatic+0x82>
 80051b6:	2301      	movs	r3, #1
 80051b8:	e000      	b.n	80051bc <xQueueGenericCreateStatic+0x84>
 80051ba:	2300      	movs	r3, #0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10a      	bne.n	80051d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	61fb      	str	r3, [r7, #28]
}
 80051d2:	bf00      	nop
 80051d4:	e7fe      	b.n	80051d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051d6:	2350      	movs	r3, #80	; 0x50
 80051d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b50      	cmp	r3, #80	; 0x50
 80051de:	d00a      	beq.n	80051f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	61bb      	str	r3, [r7, #24]
}
 80051f2:	bf00      	nop
 80051f4:	e7fe      	b.n	80051f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80051f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80051fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00d      	beq.n	800521e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800520a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800520e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	4613      	mov	r3, r2
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 f805 	bl	8005228 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800521e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005220:	4618      	mov	r0, r3
 8005222:	3730      	adds	r7, #48	; 0x30
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d103      	bne.n	8005244 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	e002      	b.n	800524a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005256:	2101      	movs	r1, #1
 8005258:	69b8      	ldr	r0, [r7, #24]
 800525a:	f7ff ff05 	bl	8005068 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	78fa      	ldrb	r2, [r7, #3]
 8005262:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005266:	bf00      	nop
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b08e      	sub	sp, #56	; 0x38
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800527e:	2300      	movs	r3, #0
 8005280:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10a      	bne.n	80052a2 <xQueueGenericSend+0x32>
	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800529e:	bf00      	nop
 80052a0:	e7fe      	b.n	80052a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d103      	bne.n	80052b0 <xQueueGenericSend+0x40>
 80052a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <xQueueGenericSend+0x44>
 80052b0:	2301      	movs	r3, #1
 80052b2:	e000      	b.n	80052b6 <xQueueGenericSend+0x46>
 80052b4:	2300      	movs	r3, #0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10a      	bne.n	80052d0 <xQueueGenericSend+0x60>
	__asm volatile
 80052ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80052cc:	bf00      	nop
 80052ce:	e7fe      	b.n	80052ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d103      	bne.n	80052de <xQueueGenericSend+0x6e>
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d101      	bne.n	80052e2 <xQueueGenericSend+0x72>
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <xQueueGenericSend+0x74>
 80052e2:	2300      	movs	r3, #0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10a      	bne.n	80052fe <xQueueGenericSend+0x8e>
	__asm volatile
 80052e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ec:	f383 8811 	msr	BASEPRI, r3
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	623b      	str	r3, [r7, #32]
}
 80052fa:	bf00      	nop
 80052fc:	e7fe      	b.n	80052fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052fe:	f001 f9e7 	bl	80066d0 <xTaskGetSchedulerState>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d102      	bne.n	800530e <xQueueGenericSend+0x9e>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <xQueueGenericSend+0xa2>
 800530e:	2301      	movs	r3, #1
 8005310:	e000      	b.n	8005314 <xQueueGenericSend+0xa4>
 8005312:	2300      	movs	r3, #0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10a      	bne.n	800532e <xQueueGenericSend+0xbe>
	__asm volatile
 8005318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	61fb      	str	r3, [r7, #28]
}
 800532a:	bf00      	nop
 800532c:	e7fe      	b.n	800532c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800532e:	f001 ff29 	bl	8007184 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533a:	429a      	cmp	r2, r3
 800533c:	d302      	bcc.n	8005344 <xQueueGenericSend+0xd4>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b02      	cmp	r3, #2
 8005342:	d129      	bne.n	8005398 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	68b9      	ldr	r1, [r7, #8]
 8005348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800534a:	f000 fa0b 	bl	8005764 <prvCopyDataToQueue>
 800534e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	2b00      	cmp	r3, #0
 8005356:	d010      	beq.n	800537a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	3324      	adds	r3, #36	; 0x24
 800535c:	4618      	mov	r0, r3
 800535e:	f000 fff5 	bl	800634c <xTaskRemoveFromEventList>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d013      	beq.n	8005390 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005368:	4b3f      	ldr	r3, [pc, #252]	; (8005468 <xQueueGenericSend+0x1f8>)
 800536a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	e00a      	b.n	8005390 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800537a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537c:	2b00      	cmp	r3, #0
 800537e:	d007      	beq.n	8005390 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005380:	4b39      	ldr	r3, [pc, #228]	; (8005468 <xQueueGenericSend+0x1f8>)
 8005382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005390:	f001 ff28 	bl	80071e4 <vPortExitCritical>
				return pdPASS;
 8005394:	2301      	movs	r3, #1
 8005396:	e063      	b.n	8005460 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d103      	bne.n	80053a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800539e:	f001 ff21 	bl	80071e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80053a2:	2300      	movs	r3, #0
 80053a4:	e05c      	b.n	8005460 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d106      	bne.n	80053ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053ac:	f107 0314 	add.w	r3, r7, #20
 80053b0:	4618      	mov	r0, r3
 80053b2:	f001 f82f 	bl	8006414 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053b6:	2301      	movs	r3, #1
 80053b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053ba:	f001 ff13 	bl	80071e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053be:	f000 fd9b 	bl	8005ef8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053c2:	f001 fedf 	bl	8007184 <vPortEnterCritical>
 80053c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053cc:	b25b      	sxtb	r3, r3
 80053ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d2:	d103      	bne.n	80053dc <xQueueGenericSend+0x16c>
 80053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053e2:	b25b      	sxtb	r3, r3
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e8:	d103      	bne.n	80053f2 <xQueueGenericSend+0x182>
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053f2:	f001 fef7 	bl	80071e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053f6:	1d3a      	adds	r2, r7, #4
 80053f8:	f107 0314 	add.w	r3, r7, #20
 80053fc:	4611      	mov	r1, r2
 80053fe:	4618      	mov	r0, r3
 8005400:	f001 f81e 	bl	8006440 <xTaskCheckForTimeOut>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d124      	bne.n	8005454 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800540a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800540c:	f000 faa2 	bl	8005954 <prvIsQueueFull>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d018      	beq.n	8005448 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005418:	3310      	adds	r3, #16
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	4611      	mov	r1, r2
 800541e:	4618      	mov	r0, r3
 8005420:	f000 ff44 	bl	80062ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005426:	f000 fa2d 	bl	8005884 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800542a:	f000 fd73 	bl	8005f14 <xTaskResumeAll>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	f47f af7c 	bne.w	800532e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005436:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <xQueueGenericSend+0x1f8>)
 8005438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	e772      	b.n	800532e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800544a:	f000 fa1b 	bl	8005884 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800544e:	f000 fd61 	bl	8005f14 <xTaskResumeAll>
 8005452:	e76c      	b.n	800532e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005454:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005456:	f000 fa15 	bl	8005884 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800545a:	f000 fd5b 	bl	8005f14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800545e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005460:	4618      	mov	r0, r3
 8005462:	3738      	adds	r7, #56	; 0x38
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	e000ed04 	.word	0xe000ed04

0800546c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b090      	sub	sp, #64	; 0x40
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800547e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005496:	bf00      	nop
 8005498:	e7fe      	b.n	8005498 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d103      	bne.n	80054a8 <xQueueGenericSendFromISR+0x3c>
 80054a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <xQueueGenericSendFromISR+0x40>
 80054a8:	2301      	movs	r3, #1
 80054aa:	e000      	b.n	80054ae <xQueueGenericSendFromISR+0x42>
 80054ac:	2300      	movs	r3, #0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10a      	bne.n	80054c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054c4:	bf00      	nop
 80054c6:	e7fe      	b.n	80054c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d103      	bne.n	80054d6 <xQueueGenericSendFromISR+0x6a>
 80054ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <xQueueGenericSendFromISR+0x6e>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <xQueueGenericSendFromISR+0x70>
 80054da:	2300      	movs	r3, #0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10a      	bne.n	80054f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	623b      	str	r3, [r7, #32]
}
 80054f2:	bf00      	nop
 80054f4:	e7fe      	b.n	80054f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054f6:	f001 ff27 	bl	8007348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054fa:	f3ef 8211 	mrs	r2, BASEPRI
 80054fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	61fa      	str	r2, [r7, #28]
 8005510:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005512:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005514:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551e:	429a      	cmp	r2, r3
 8005520:	d302      	bcc.n	8005528 <xQueueGenericSendFromISR+0xbc>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b02      	cmp	r3, #2
 8005526:	d12f      	bne.n	8005588 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800552e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005536:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	68b9      	ldr	r1, [r7, #8]
 800553c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800553e:	f000 f911 	bl	8005764 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005542:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554a:	d112      	bne.n	8005572 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800554c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	2b00      	cmp	r3, #0
 8005552:	d016      	beq.n	8005582 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005556:	3324      	adds	r3, #36	; 0x24
 8005558:	4618      	mov	r0, r3
 800555a:	f000 fef7 	bl	800634c <xTaskRemoveFromEventList>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00e      	beq.n	8005582 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00b      	beq.n	8005582 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	e007      	b.n	8005582 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005572:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005576:	3301      	adds	r3, #1
 8005578:	b2db      	uxtb	r3, r3
 800557a:	b25a      	sxtb	r2, r3
 800557c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005582:	2301      	movs	r3, #1
 8005584:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005586:	e001      	b.n	800558c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005588:	2300      	movs	r3, #0
 800558a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800558c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005596:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800559a:	4618      	mov	r0, r3
 800559c:	3740      	adds	r7, #64	; 0x40
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08c      	sub	sp, #48	; 0x30
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80055b0:	2300      	movs	r3, #0
 80055b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10a      	bne.n	80055d4 <xQueueReceive+0x30>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	623b      	str	r3, [r7, #32]
}
 80055d0:	bf00      	nop
 80055d2:	e7fe      	b.n	80055d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d103      	bne.n	80055e2 <xQueueReceive+0x3e>
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <xQueueReceive+0x42>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <xQueueReceive+0x44>
 80055e6:	2300      	movs	r3, #0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10a      	bne.n	8005602 <xQueueReceive+0x5e>
	__asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	61fb      	str	r3, [r7, #28]
}
 80055fe:	bf00      	nop
 8005600:	e7fe      	b.n	8005600 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005602:	f001 f865 	bl	80066d0 <xTaskGetSchedulerState>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d102      	bne.n	8005612 <xQueueReceive+0x6e>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <xQueueReceive+0x72>
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <xQueueReceive+0x74>
 8005616:	2300      	movs	r3, #0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10a      	bne.n	8005632 <xQueueReceive+0x8e>
	__asm volatile
 800561c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	61bb      	str	r3, [r7, #24]
}
 800562e:	bf00      	nop
 8005630:	e7fe      	b.n	8005630 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005632:	f001 fda7 	bl	8007184 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563e:	2b00      	cmp	r3, #0
 8005640:	d01f      	beq.n	8005682 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005642:	68b9      	ldr	r1, [r7, #8]
 8005644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005646:	f000 f8f7 	bl	8005838 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	1e5a      	subs	r2, r3, #1
 800564e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005650:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00f      	beq.n	800567a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800565a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565c:	3310      	adds	r3, #16
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fe74 	bl	800634c <xTaskRemoveFromEventList>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d007      	beq.n	800567a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800566a:	4b3d      	ldr	r3, [pc, #244]	; (8005760 <xQueueReceive+0x1bc>)
 800566c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800567a:	f001 fdb3 	bl	80071e4 <vPortExitCritical>
				return pdPASS;
 800567e:	2301      	movs	r3, #1
 8005680:	e069      	b.n	8005756 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d103      	bne.n	8005690 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005688:	f001 fdac 	bl	80071e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800568c:	2300      	movs	r3, #0
 800568e:	e062      	b.n	8005756 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005696:	f107 0310 	add.w	r3, r7, #16
 800569a:	4618      	mov	r0, r3
 800569c:	f000 feba 	bl	8006414 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056a0:	2301      	movs	r3, #1
 80056a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056a4:	f001 fd9e 	bl	80071e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056a8:	f000 fc26 	bl	8005ef8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056ac:	f001 fd6a 	bl	8007184 <vPortEnterCritical>
 80056b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056b6:	b25b      	sxtb	r3, r3
 80056b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056bc:	d103      	bne.n	80056c6 <xQueueReceive+0x122>
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056cc:	b25b      	sxtb	r3, r3
 80056ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d2:	d103      	bne.n	80056dc <xQueueReceive+0x138>
 80056d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056dc:	f001 fd82 	bl	80071e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056e0:	1d3a      	adds	r2, r7, #4
 80056e2:	f107 0310 	add.w	r3, r7, #16
 80056e6:	4611      	mov	r1, r2
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 fea9 	bl	8006440 <xTaskCheckForTimeOut>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d123      	bne.n	800573c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056f6:	f000 f917 	bl	8005928 <prvIsQueueEmpty>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d017      	beq.n	8005730 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	3324      	adds	r3, #36	; 0x24
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	4611      	mov	r1, r2
 8005708:	4618      	mov	r0, r3
 800570a:	f000 fdcf 	bl	80062ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800570e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005710:	f000 f8b8 	bl	8005884 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005714:	f000 fbfe 	bl	8005f14 <xTaskResumeAll>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d189      	bne.n	8005632 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800571e:	4b10      	ldr	r3, [pc, #64]	; (8005760 <xQueueReceive+0x1bc>)
 8005720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	e780      	b.n	8005632 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005732:	f000 f8a7 	bl	8005884 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005736:	f000 fbed 	bl	8005f14 <xTaskResumeAll>
 800573a:	e77a      	b.n	8005632 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800573c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800573e:	f000 f8a1 	bl	8005884 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005742:	f000 fbe7 	bl	8005f14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005748:	f000 f8ee 	bl	8005928 <prvIsQueueEmpty>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	f43f af6f 	beq.w	8005632 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005754:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005756:	4618      	mov	r0, r3
 8005758:	3730      	adds	r7, #48	; 0x30
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	e000ed04 	.word	0xe000ed04

08005764 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005770:	2300      	movs	r3, #0
 8005772:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005778:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10d      	bne.n	800579e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d14d      	bne.n	8005826 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	4618      	mov	r0, r3
 8005790:	f000 ffbc 	bl	800670c <xTaskPriorityDisinherit>
 8005794:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	609a      	str	r2, [r3, #8]
 800579c:	e043      	b.n	8005826 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d119      	bne.n	80057d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6858      	ldr	r0, [r3, #4]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	461a      	mov	r2, r3
 80057ae:	68b9      	ldr	r1, [r7, #8]
 80057b0:	f002 f917 	bl	80079e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	441a      	add	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d32b      	bcc.n	8005826 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	605a      	str	r2, [r3, #4]
 80057d6:	e026      	b.n	8005826 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	68d8      	ldr	r0, [r3, #12]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e0:	461a      	mov	r2, r3
 80057e2:	68b9      	ldr	r1, [r7, #8]
 80057e4:	f002 f8fd 	bl	80079e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	68da      	ldr	r2, [r3, #12]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f0:	425b      	negs	r3, r3
 80057f2:	441a      	add	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	68da      	ldr	r2, [r3, #12]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d207      	bcs.n	8005814 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	425b      	negs	r3, r3
 800580e:	441a      	add	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b02      	cmp	r3, #2
 8005818:	d105      	bne.n	8005826 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	3b01      	subs	r3, #1
 8005824:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800582e:	697b      	ldr	r3, [r7, #20]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3718      	adds	r7, #24
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	2b00      	cmp	r3, #0
 8005848:	d018      	beq.n	800587c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	441a      	add	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68da      	ldr	r2, [r3, #12]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	429a      	cmp	r2, r3
 8005862:	d303      	bcc.n	800586c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68d9      	ldr	r1, [r3, #12]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	461a      	mov	r2, r3
 8005876:	6838      	ldr	r0, [r7, #0]
 8005878:	f002 f8b3 	bl	80079e2 <memcpy>
	}
}
 800587c:	bf00      	nop
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800588c:	f001 fc7a 	bl	8007184 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005896:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005898:	e011      	b.n	80058be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d012      	beq.n	80058c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	3324      	adds	r3, #36	; 0x24
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fd50 	bl	800634c <xTaskRemoveFromEventList>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058b2:	f000 fe27 	bl	8006504 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	dce9      	bgt.n	800589a <prvUnlockQueue+0x16>
 80058c6:	e000      	b.n	80058ca <prvUnlockQueue+0x46>
					break;
 80058c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	22ff      	movs	r2, #255	; 0xff
 80058ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80058d2:	f001 fc87 	bl	80071e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058d6:	f001 fc55 	bl	8007184 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058e2:	e011      	b.n	8005908 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d012      	beq.n	8005912 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3310      	adds	r3, #16
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 fd2b 	bl	800634c <xTaskRemoveFromEventList>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80058fc:	f000 fe02 	bl	8006504 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005900:	7bbb      	ldrb	r3, [r7, #14]
 8005902:	3b01      	subs	r3, #1
 8005904:	b2db      	uxtb	r3, r3
 8005906:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005908:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800590c:	2b00      	cmp	r3, #0
 800590e:	dce9      	bgt.n	80058e4 <prvUnlockQueue+0x60>
 8005910:	e000      	b.n	8005914 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005912:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	22ff      	movs	r2, #255	; 0xff
 8005918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800591c:	f001 fc62 	bl	80071e4 <vPortExitCritical>
}
 8005920:	bf00      	nop
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005930:	f001 fc28 	bl	8007184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800593c:	2301      	movs	r3, #1
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	e001      	b.n	8005946 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005942:	2300      	movs	r3, #0
 8005944:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005946:	f001 fc4d 	bl	80071e4 <vPortExitCritical>

	return xReturn;
 800594a:	68fb      	ldr	r3, [r7, #12]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800595c:	f001 fc12 	bl	8007184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005968:	429a      	cmp	r2, r3
 800596a:	d102      	bne.n	8005972 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800596c:	2301      	movs	r3, #1
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	e001      	b.n	8005976 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005976:	f001 fc35 	bl	80071e4 <vPortExitCritical>

	return xReturn;
 800597a:	68fb      	ldr	r3, [r7, #12]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800598e:	2300      	movs	r3, #0
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	e014      	b.n	80059be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005994:	4a0f      	ldr	r2, [pc, #60]	; (80059d4 <vQueueAddToRegistry+0x50>)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10b      	bne.n	80059b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80059a0:	490c      	ldr	r1, [pc, #48]	; (80059d4 <vQueueAddToRegistry+0x50>)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80059aa:	4a0a      	ldr	r2, [pc, #40]	; (80059d4 <vQueueAddToRegistry+0x50>)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	4413      	add	r3, r2
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80059b6:	e006      	b.n	80059c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	3301      	adds	r3, #1
 80059bc:	60fb      	str	r3, [r7, #12]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2b07      	cmp	r3, #7
 80059c2:	d9e7      	bls.n	8005994 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059c4:	bf00      	nop
 80059c6:	bf00      	nop
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	20000d58 	.word	0x20000d58

080059d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80059e8:	f001 fbcc 	bl	8007184 <vPortEnterCritical>
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059f2:	b25b      	sxtb	r3, r3
 80059f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f8:	d103      	bne.n	8005a02 <vQueueWaitForMessageRestricted+0x2a>
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a08:	b25b      	sxtb	r3, r3
 8005a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0e:	d103      	bne.n	8005a18 <vQueueWaitForMessageRestricted+0x40>
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a18:	f001 fbe4 	bl	80071e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d106      	bne.n	8005a32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	3324      	adds	r3, #36	; 0x24
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	68b9      	ldr	r1, [r7, #8]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 fc61 	bl	80062f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a32:	6978      	ldr	r0, [r7, #20]
 8005a34:	f7ff ff26 	bl	8005884 <prvUnlockQueue>
	}
 8005a38:	bf00      	nop
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08e      	sub	sp, #56	; 0x38
 8005a44:	af04      	add	r7, sp, #16
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
 8005a4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10a      	bne.n	8005a6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	623b      	str	r3, [r7, #32]
}
 8005a66:	bf00      	nop
 8005a68:	e7fe      	b.n	8005a68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10a      	bne.n	8005a86 <xTaskCreateStatic+0x46>
	__asm volatile
 8005a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a74:	f383 8811 	msr	BASEPRI, r3
 8005a78:	f3bf 8f6f 	isb	sy
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	61fb      	str	r3, [r7, #28]
}
 8005a82:	bf00      	nop
 8005a84:	e7fe      	b.n	8005a84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a86:	23bc      	movs	r3, #188	; 0xbc
 8005a88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	2bbc      	cmp	r3, #188	; 0xbc
 8005a8e:	d00a      	beq.n	8005aa6 <xTaskCreateStatic+0x66>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	61bb      	str	r3, [r7, #24]
}
 8005aa2:	bf00      	nop
 8005aa4:	e7fe      	b.n	8005aa4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005aa6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d01e      	beq.n	8005aec <xTaskCreateStatic+0xac>
 8005aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d01b      	beq.n	8005aec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005abc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	9303      	str	r3, [sp, #12]
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	9302      	str	r3, [sp, #8]
 8005ace:	f107 0314 	add.w	r3, r7, #20
 8005ad2:	9301      	str	r3, [sp, #4]
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	68b9      	ldr	r1, [r7, #8]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f850 	bl	8005b84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ae4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ae6:	f000 f8f3 	bl	8005cd0 <prvAddNewTaskToReadyList>
 8005aea:	e001      	b.n	8005af0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005aec:	2300      	movs	r3, #0
 8005aee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005af0:	697b      	ldr	r3, [r7, #20]
	}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3728      	adds	r7, #40	; 0x28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b08c      	sub	sp, #48	; 0x30
 8005afe:	af04      	add	r7, sp, #16
 8005b00:	60f8      	str	r0, [r7, #12]
 8005b02:	60b9      	str	r1, [r7, #8]
 8005b04:	603b      	str	r3, [r7, #0]
 8005b06:	4613      	mov	r3, r2
 8005b08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b0a:	88fb      	ldrh	r3, [r7, #6]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f001 fc5a 	bl	80073c8 <pvPortMalloc>
 8005b14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00e      	beq.n	8005b3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b1c:	20bc      	movs	r0, #188	; 0xbc
 8005b1e:	f001 fc53 	bl	80073c8 <pvPortMalloc>
 8005b22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	631a      	str	r2, [r3, #48]	; 0x30
 8005b30:	e005      	b.n	8005b3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b32:	6978      	ldr	r0, [r7, #20]
 8005b34:	f001 fd14 	bl	8007560 <vPortFree>
 8005b38:	e001      	b.n	8005b3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d017      	beq.n	8005b74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b4c:	88fa      	ldrh	r2, [r7, #6]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	9303      	str	r3, [sp, #12]
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	9302      	str	r3, [sp, #8]
 8005b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b58:	9301      	str	r3, [sp, #4]
 8005b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68b9      	ldr	r1, [r7, #8]
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 f80e 	bl	8005b84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b68:	69f8      	ldr	r0, [r7, #28]
 8005b6a:	f000 f8b1 	bl	8005cd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	61bb      	str	r3, [r7, #24]
 8005b72:	e002      	b.n	8005b7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b74:	f04f 33ff 	mov.w	r3, #4294967295
 8005b78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b7a:	69bb      	ldr	r3, [r7, #24]
	}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3720      	adds	r7, #32
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	21a5      	movs	r1, #165	; 0xa5
 8005b9e:	f001 ff2e 	bl	80079fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005bac:	3b01      	subs	r3, #1
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	f023 0307 	bic.w	r3, r3, #7
 8005bba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00a      	beq.n	8005bdc <prvInitialiseNewTask+0x58>
	__asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	617b      	str	r3, [r7, #20]
}
 8005bd8:	bf00      	nop
 8005bda:	e7fe      	b.n	8005bda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d01f      	beq.n	8005c22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005be2:	2300      	movs	r3, #0
 8005be4:	61fb      	str	r3, [r7, #28]
 8005be6:	e012      	b.n	8005c0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	4413      	add	r3, r2
 8005bee:	7819      	ldrb	r1, [r3, #0]
 8005bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	3334      	adds	r3, #52	; 0x34
 8005bf8:	460a      	mov	r2, r1
 8005bfa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	4413      	add	r3, r2
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d006      	beq.n	8005c16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	61fb      	str	r3, [r7, #28]
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	2b0f      	cmp	r3, #15
 8005c12:	d9e9      	bls.n	8005be8 <prvInitialiseNewTask+0x64>
 8005c14:	e000      	b.n	8005c18 <prvInitialiseNewTask+0x94>
			{
				break;
 8005c16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c20:	e003      	b.n	8005c2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2c:	2b37      	cmp	r3, #55	; 0x37
 8005c2e:	d901      	bls.n	8005c34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c30:	2337      	movs	r3, #55	; 0x37
 8005c32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c42:	2200      	movs	r2, #0
 8005c44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	3304      	adds	r3, #4
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7ff f978 	bl	8004f40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c52:	3318      	adds	r3, #24
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7ff f973 	bl	8004f40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c72:	2200      	movs	r2, #0
 8005c74:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	3354      	adds	r3, #84	; 0x54
 8005c84:	2260      	movs	r2, #96	; 0x60
 8005c86:	2100      	movs	r1, #0
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f001 feb8 	bl	80079fe <memset>
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	4a0c      	ldr	r2, [pc, #48]	; (8005cc4 <prvInitialiseNewTask+0x140>)
 8005c92:	659a      	str	r2, [r3, #88]	; 0x58
 8005c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c96:	4a0c      	ldr	r2, [pc, #48]	; (8005cc8 <prvInitialiseNewTask+0x144>)
 8005c98:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9c:	4a0b      	ldr	r2, [pc, #44]	; (8005ccc <prvInitialiseNewTask+0x148>)
 8005c9e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	68f9      	ldr	r1, [r7, #12]
 8005ca4:	69b8      	ldr	r0, [r7, #24]
 8005ca6:	f001 f941 	bl	8006f2c <pxPortInitialiseStack>
 8005caa:	4602      	mov	r2, r0
 8005cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cbc:	bf00      	nop
 8005cbe:	3720      	adds	r7, #32
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	0800a624 	.word	0x0800a624
 8005cc8:	0800a644 	.word	0x0800a644
 8005ccc:	0800a604 	.word	0x0800a604

08005cd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005cd8:	f001 fa54 	bl	8007184 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005cdc:	4b2d      	ldr	r3, [pc, #180]	; (8005d94 <prvAddNewTaskToReadyList+0xc4>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	4a2c      	ldr	r2, [pc, #176]	; (8005d94 <prvAddNewTaskToReadyList+0xc4>)
 8005ce4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ce6:	4b2c      	ldr	r3, [pc, #176]	; (8005d98 <prvAddNewTaskToReadyList+0xc8>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d109      	bne.n	8005d02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005cee:	4a2a      	ldr	r2, [pc, #168]	; (8005d98 <prvAddNewTaskToReadyList+0xc8>)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005cf4:	4b27      	ldr	r3, [pc, #156]	; (8005d94 <prvAddNewTaskToReadyList+0xc4>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d110      	bne.n	8005d1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005cfc:	f000 fc26 	bl	800654c <prvInitialiseTaskLists>
 8005d00:	e00d      	b.n	8005d1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d02:	4b26      	ldr	r3, [pc, #152]	; (8005d9c <prvAddNewTaskToReadyList+0xcc>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d109      	bne.n	8005d1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d0a:	4b23      	ldr	r3, [pc, #140]	; (8005d98 <prvAddNewTaskToReadyList+0xc8>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d802      	bhi.n	8005d1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d18:	4a1f      	ldr	r2, [pc, #124]	; (8005d98 <prvAddNewTaskToReadyList+0xc8>)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d1e:	4b20      	ldr	r3, [pc, #128]	; (8005da0 <prvAddNewTaskToReadyList+0xd0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3301      	adds	r3, #1
 8005d24:	4a1e      	ldr	r2, [pc, #120]	; (8005da0 <prvAddNewTaskToReadyList+0xd0>)
 8005d26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d28:	4b1d      	ldr	r3, [pc, #116]	; (8005da0 <prvAddNewTaskToReadyList+0xd0>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d34:	4b1b      	ldr	r3, [pc, #108]	; (8005da4 <prvAddNewTaskToReadyList+0xd4>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d903      	bls.n	8005d44 <prvAddNewTaskToReadyList+0x74>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	4a18      	ldr	r2, [pc, #96]	; (8005da4 <prvAddNewTaskToReadyList+0xd4>)
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d48:	4613      	mov	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4a15      	ldr	r2, [pc, #84]	; (8005da8 <prvAddNewTaskToReadyList+0xd8>)
 8005d52:	441a      	add	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3304      	adds	r3, #4
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	f7ff f8fd 	bl	8004f5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d60:	f001 fa40 	bl	80071e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d64:	4b0d      	ldr	r3, [pc, #52]	; (8005d9c <prvAddNewTaskToReadyList+0xcc>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00e      	beq.n	8005d8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d6c:	4b0a      	ldr	r3, [pc, #40]	; (8005d98 <prvAddNewTaskToReadyList+0xc8>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d207      	bcs.n	8005d8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d7a:	4b0c      	ldr	r3, [pc, #48]	; (8005dac <prvAddNewTaskToReadyList+0xdc>)
 8005d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d8a:	bf00      	nop
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	2000126c 	.word	0x2000126c
 8005d98:	20000d98 	.word	0x20000d98
 8005d9c:	20001278 	.word	0x20001278
 8005da0:	20001288 	.word	0x20001288
 8005da4:	20001274 	.word	0x20001274
 8005da8:	20000d9c 	.word	0x20000d9c
 8005dac:	e000ed04 	.word	0xe000ed04

08005db0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005db8:	2300      	movs	r3, #0
 8005dba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d017      	beq.n	8005df2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005dc2:	4b13      	ldr	r3, [pc, #76]	; (8005e10 <vTaskDelay+0x60>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00a      	beq.n	8005de0 <vTaskDelay+0x30>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	60bb      	str	r3, [r7, #8]
}
 8005ddc:	bf00      	nop
 8005dde:	e7fe      	b.n	8005dde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005de0:	f000 f88a 	bl	8005ef8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005de4:	2100      	movs	r1, #0
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fcfe 	bl	80067e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005dec:	f000 f892 	bl	8005f14 <xTaskResumeAll>
 8005df0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d107      	bne.n	8005e08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005df8:	4b06      	ldr	r3, [pc, #24]	; (8005e14 <vTaskDelay+0x64>)
 8005dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e08:	bf00      	nop
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	20001294 	.word	0x20001294
 8005e14:	e000ed04 	.word	0xe000ed04

08005e18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b08a      	sub	sp, #40	; 0x28
 8005e1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e22:	2300      	movs	r3, #0
 8005e24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e26:	463a      	mov	r2, r7
 8005e28:	1d39      	adds	r1, r7, #4
 8005e2a:	f107 0308 	add.w	r3, r7, #8
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7ff f832 	bl	8004e98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e34:	6839      	ldr	r1, [r7, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	9202      	str	r2, [sp, #8]
 8005e3c:	9301      	str	r3, [sp, #4]
 8005e3e:	2300      	movs	r3, #0
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	2300      	movs	r3, #0
 8005e44:	460a      	mov	r2, r1
 8005e46:	4924      	ldr	r1, [pc, #144]	; (8005ed8 <vTaskStartScheduler+0xc0>)
 8005e48:	4824      	ldr	r0, [pc, #144]	; (8005edc <vTaskStartScheduler+0xc4>)
 8005e4a:	f7ff fdf9 	bl	8005a40 <xTaskCreateStatic>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	4a23      	ldr	r2, [pc, #140]	; (8005ee0 <vTaskStartScheduler+0xc8>)
 8005e52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e54:	4b22      	ldr	r3, [pc, #136]	; (8005ee0 <vTaskStartScheduler+0xc8>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	e001      	b.n	8005e66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d102      	bne.n	8005e72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e6c:	f000 fd10 	bl	8006890 <xTimerCreateTimerTask>
 8005e70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d11b      	bne.n	8005eb0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	613b      	str	r3, [r7, #16]
}
 8005e8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e8c:	4b15      	ldr	r3, [pc, #84]	; (8005ee4 <vTaskStartScheduler+0xcc>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3354      	adds	r3, #84	; 0x54
 8005e92:	4a15      	ldr	r2, [pc, #84]	; (8005ee8 <vTaskStartScheduler+0xd0>)
 8005e94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e96:	4b15      	ldr	r3, [pc, #84]	; (8005eec <vTaskStartScheduler+0xd4>)
 8005e98:	f04f 32ff 	mov.w	r2, #4294967295
 8005e9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e9e:	4b14      	ldr	r3, [pc, #80]	; (8005ef0 <vTaskStartScheduler+0xd8>)
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ea4:	4b13      	ldr	r3, [pc, #76]	; (8005ef4 <vTaskStartScheduler+0xdc>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005eaa:	f001 f8c9 	bl	8007040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005eae:	e00e      	b.n	8005ece <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb6:	d10a      	bne.n	8005ece <vTaskStartScheduler+0xb6>
	__asm volatile
 8005eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	60fb      	str	r3, [r7, #12]
}
 8005eca:	bf00      	nop
 8005ecc:	e7fe      	b.n	8005ecc <vTaskStartScheduler+0xb4>
}
 8005ece:	bf00      	nop
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	0800a528 	.word	0x0800a528
 8005edc:	0800651d 	.word	0x0800651d
 8005ee0:	20001290 	.word	0x20001290
 8005ee4:	20000d98 	.word	0x20000d98
 8005ee8:	20000018 	.word	0x20000018
 8005eec:	2000128c 	.word	0x2000128c
 8005ef0:	20001278 	.word	0x20001278
 8005ef4:	20001270 	.word	0x20001270

08005ef8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005efc:	4b04      	ldr	r3, [pc, #16]	; (8005f10 <vTaskSuspendAll+0x18>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3301      	adds	r3, #1
 8005f02:	4a03      	ldr	r2, [pc, #12]	; (8005f10 <vTaskSuspendAll+0x18>)
 8005f04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f06:	bf00      	nop
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	20001294 	.word	0x20001294

08005f14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f22:	4b42      	ldr	r3, [pc, #264]	; (800602c <xTaskResumeAll+0x118>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10a      	bne.n	8005f40 <xTaskResumeAll+0x2c>
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	603b      	str	r3, [r7, #0]
}
 8005f3c:	bf00      	nop
 8005f3e:	e7fe      	b.n	8005f3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f40:	f001 f920 	bl	8007184 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f44:	4b39      	ldr	r3, [pc, #228]	; (800602c <xTaskResumeAll+0x118>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	4a38      	ldr	r2, [pc, #224]	; (800602c <xTaskResumeAll+0x118>)
 8005f4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f4e:	4b37      	ldr	r3, [pc, #220]	; (800602c <xTaskResumeAll+0x118>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d162      	bne.n	800601c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f56:	4b36      	ldr	r3, [pc, #216]	; (8006030 <xTaskResumeAll+0x11c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d05e      	beq.n	800601c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f5e:	e02f      	b.n	8005fc0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f60:	4b34      	ldr	r3, [pc, #208]	; (8006034 <xTaskResumeAll+0x120>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3318      	adds	r3, #24
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff f851 	bl	8005014 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3304      	adds	r3, #4
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7ff f84c 	bl	8005014 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f80:	4b2d      	ldr	r3, [pc, #180]	; (8006038 <xTaskResumeAll+0x124>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d903      	bls.n	8005f90 <xTaskResumeAll+0x7c>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8c:	4a2a      	ldr	r2, [pc, #168]	; (8006038 <xTaskResumeAll+0x124>)
 8005f8e:	6013      	str	r3, [r2, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4a27      	ldr	r2, [pc, #156]	; (800603c <xTaskResumeAll+0x128>)
 8005f9e:	441a      	add	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	4610      	mov	r0, r2
 8005fa8:	f7fe ffd7 	bl	8004f5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb0:	4b23      	ldr	r3, [pc, #140]	; (8006040 <xTaskResumeAll+0x12c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d302      	bcc.n	8005fc0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005fba:	4b22      	ldr	r3, [pc, #136]	; (8006044 <xTaskResumeAll+0x130>)
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fc0:	4b1c      	ldr	r3, [pc, #112]	; (8006034 <xTaskResumeAll+0x120>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1cb      	bne.n	8005f60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005fce:	f000 fb5f 	bl	8006690 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005fd2:	4b1d      	ldr	r3, [pc, #116]	; (8006048 <xTaskResumeAll+0x134>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d010      	beq.n	8006000 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005fde:	f000 f847 	bl	8006070 <xTaskIncrementTick>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005fe8:	4b16      	ldr	r3, [pc, #88]	; (8006044 <xTaskResumeAll+0x130>)
 8005fea:	2201      	movs	r2, #1
 8005fec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1f1      	bne.n	8005fde <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005ffa:	4b13      	ldr	r3, [pc, #76]	; (8006048 <xTaskResumeAll+0x134>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006000:	4b10      	ldr	r3, [pc, #64]	; (8006044 <xTaskResumeAll+0x130>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d009      	beq.n	800601c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006008:	2301      	movs	r3, #1
 800600a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800600c:	4b0f      	ldr	r3, [pc, #60]	; (800604c <xTaskResumeAll+0x138>)
 800600e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800601c:	f001 f8e2 	bl	80071e4 <vPortExitCritical>

	return xAlreadyYielded;
 8006020:	68bb      	ldr	r3, [r7, #8]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	20001294 	.word	0x20001294
 8006030:	2000126c 	.word	0x2000126c
 8006034:	2000122c 	.word	0x2000122c
 8006038:	20001274 	.word	0x20001274
 800603c:	20000d9c 	.word	0x20000d9c
 8006040:	20000d98 	.word	0x20000d98
 8006044:	20001280 	.word	0x20001280
 8006048:	2000127c 	.word	0x2000127c
 800604c:	e000ed04 	.word	0xe000ed04

08006050 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006056:	4b05      	ldr	r3, [pc, #20]	; (800606c <xTaskGetTickCount+0x1c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800605c:	687b      	ldr	r3, [r7, #4]
}
 800605e:	4618      	mov	r0, r3
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	20001270 	.word	0x20001270

08006070 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006076:	2300      	movs	r3, #0
 8006078:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800607a:	4b4f      	ldr	r3, [pc, #316]	; (80061b8 <xTaskIncrementTick+0x148>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	f040 808f 	bne.w	80061a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006084:	4b4d      	ldr	r3, [pc, #308]	; (80061bc <xTaskIncrementTick+0x14c>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	3301      	adds	r3, #1
 800608a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800608c:	4a4b      	ldr	r2, [pc, #300]	; (80061bc <xTaskIncrementTick+0x14c>)
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d120      	bne.n	80060da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006098:	4b49      	ldr	r3, [pc, #292]	; (80061c0 <xTaskIncrementTick+0x150>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00a      	beq.n	80060b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	603b      	str	r3, [r7, #0]
}
 80060b4:	bf00      	nop
 80060b6:	e7fe      	b.n	80060b6 <xTaskIncrementTick+0x46>
 80060b8:	4b41      	ldr	r3, [pc, #260]	; (80061c0 <xTaskIncrementTick+0x150>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	4b41      	ldr	r3, [pc, #260]	; (80061c4 <xTaskIncrementTick+0x154>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a3f      	ldr	r2, [pc, #252]	; (80061c0 <xTaskIncrementTick+0x150>)
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	4a3f      	ldr	r2, [pc, #252]	; (80061c4 <xTaskIncrementTick+0x154>)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	4b3e      	ldr	r3, [pc, #248]	; (80061c8 <xTaskIncrementTick+0x158>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3301      	adds	r3, #1
 80060d2:	4a3d      	ldr	r2, [pc, #244]	; (80061c8 <xTaskIncrementTick+0x158>)
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	f000 fadb 	bl	8006690 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060da:	4b3c      	ldr	r3, [pc, #240]	; (80061cc <xTaskIncrementTick+0x15c>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d349      	bcc.n	8006178 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060e4:	4b36      	ldr	r3, [pc, #216]	; (80061c0 <xTaskIncrementTick+0x150>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d104      	bne.n	80060f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ee:	4b37      	ldr	r3, [pc, #220]	; (80061cc <xTaskIncrementTick+0x15c>)
 80060f0:	f04f 32ff 	mov.w	r2, #4294967295
 80060f4:	601a      	str	r2, [r3, #0]
					break;
 80060f6:	e03f      	b.n	8006178 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060f8:	4b31      	ldr	r3, [pc, #196]	; (80061c0 <xTaskIncrementTick+0x150>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	429a      	cmp	r2, r3
 800610e:	d203      	bcs.n	8006118 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006110:	4a2e      	ldr	r2, [pc, #184]	; (80061cc <xTaskIncrementTick+0x15c>)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006116:	e02f      	b.n	8006178 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	3304      	adds	r3, #4
 800611c:	4618      	mov	r0, r3
 800611e:	f7fe ff79 	bl	8005014 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006126:	2b00      	cmp	r3, #0
 8006128:	d004      	beq.n	8006134 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	3318      	adds	r3, #24
 800612e:	4618      	mov	r0, r3
 8006130:	f7fe ff70 	bl	8005014 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006138:	4b25      	ldr	r3, [pc, #148]	; (80061d0 <xTaskIncrementTick+0x160>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	429a      	cmp	r2, r3
 800613e:	d903      	bls.n	8006148 <xTaskIncrementTick+0xd8>
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006144:	4a22      	ldr	r2, [pc, #136]	; (80061d0 <xTaskIncrementTick+0x160>)
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614c:	4613      	mov	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4a1f      	ldr	r2, [pc, #124]	; (80061d4 <xTaskIncrementTick+0x164>)
 8006156:	441a      	add	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	3304      	adds	r3, #4
 800615c:	4619      	mov	r1, r3
 800615e:	4610      	mov	r0, r2
 8006160:	f7fe fefb 	bl	8004f5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006168:	4b1b      	ldr	r3, [pc, #108]	; (80061d8 <xTaskIncrementTick+0x168>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616e:	429a      	cmp	r2, r3
 8006170:	d3b8      	bcc.n	80060e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006172:	2301      	movs	r3, #1
 8006174:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006176:	e7b5      	b.n	80060e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006178:	4b17      	ldr	r3, [pc, #92]	; (80061d8 <xTaskIncrementTick+0x168>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617e:	4915      	ldr	r1, [pc, #84]	; (80061d4 <xTaskIncrementTick+0x164>)
 8006180:	4613      	mov	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	440b      	add	r3, r1
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d901      	bls.n	8006194 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006190:	2301      	movs	r3, #1
 8006192:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006194:	4b11      	ldr	r3, [pc, #68]	; (80061dc <xTaskIncrementTick+0x16c>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d007      	beq.n	80061ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800619c:	2301      	movs	r3, #1
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	e004      	b.n	80061ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80061a2:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <xTaskIncrementTick+0x170>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3301      	adds	r3, #1
 80061a8:	4a0d      	ldr	r2, [pc, #52]	; (80061e0 <xTaskIncrementTick+0x170>)
 80061aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80061ac:	697b      	ldr	r3, [r7, #20]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20001294 	.word	0x20001294
 80061bc:	20001270 	.word	0x20001270
 80061c0:	20001224 	.word	0x20001224
 80061c4:	20001228 	.word	0x20001228
 80061c8:	20001284 	.word	0x20001284
 80061cc:	2000128c 	.word	0x2000128c
 80061d0:	20001274 	.word	0x20001274
 80061d4:	20000d9c 	.word	0x20000d9c
 80061d8:	20000d98 	.word	0x20000d98
 80061dc:	20001280 	.word	0x20001280
 80061e0:	2000127c 	.word	0x2000127c

080061e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061ea:	4b2a      	ldr	r3, [pc, #168]	; (8006294 <vTaskSwitchContext+0xb0>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061f2:	4b29      	ldr	r3, [pc, #164]	; (8006298 <vTaskSwitchContext+0xb4>)
 80061f4:	2201      	movs	r2, #1
 80061f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061f8:	e046      	b.n	8006288 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80061fa:	4b27      	ldr	r3, [pc, #156]	; (8006298 <vTaskSwitchContext+0xb4>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006200:	4b26      	ldr	r3, [pc, #152]	; (800629c <vTaskSwitchContext+0xb8>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	e010      	b.n	800622a <vTaskSwitchContext+0x46>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10a      	bne.n	8006224 <vTaskSwitchContext+0x40>
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	607b      	str	r3, [r7, #4]
}
 8006220:	bf00      	nop
 8006222:	e7fe      	b.n	8006222 <vTaskSwitchContext+0x3e>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	3b01      	subs	r3, #1
 8006228:	60fb      	str	r3, [r7, #12]
 800622a:	491d      	ldr	r1, [pc, #116]	; (80062a0 <vTaskSwitchContext+0xbc>)
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	4613      	mov	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	440b      	add	r3, r1
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d0e4      	beq.n	8006208 <vTaskSwitchContext+0x24>
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4613      	mov	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4a15      	ldr	r2, [pc, #84]	; (80062a0 <vTaskSwitchContext+0xbc>)
 800624a:	4413      	add	r3, r2
 800624c:	60bb      	str	r3, [r7, #8]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	605a      	str	r2, [r3, #4]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	3308      	adds	r3, #8
 8006260:	429a      	cmp	r2, r3
 8006262:	d104      	bne.n	800626e <vTaskSwitchContext+0x8a>
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	605a      	str	r2, [r3, #4]
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	4a0b      	ldr	r2, [pc, #44]	; (80062a4 <vTaskSwitchContext+0xc0>)
 8006276:	6013      	str	r3, [r2, #0]
 8006278:	4a08      	ldr	r2, [pc, #32]	; (800629c <vTaskSwitchContext+0xb8>)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800627e:	4b09      	ldr	r3, [pc, #36]	; (80062a4 <vTaskSwitchContext+0xc0>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3354      	adds	r3, #84	; 0x54
 8006284:	4a08      	ldr	r2, [pc, #32]	; (80062a8 <vTaskSwitchContext+0xc4>)
 8006286:	6013      	str	r3, [r2, #0]
}
 8006288:	bf00      	nop
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	20001294 	.word	0x20001294
 8006298:	20001280 	.word	0x20001280
 800629c:	20001274 	.word	0x20001274
 80062a0:	20000d9c 	.word	0x20000d9c
 80062a4:	20000d98 	.word	0x20000d98
 80062a8:	20000018 	.word	0x20000018

080062ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10a      	bne.n	80062d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	60fb      	str	r3, [r7, #12]
}
 80062ce:	bf00      	nop
 80062d0:	e7fe      	b.n	80062d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062d2:	4b07      	ldr	r3, [pc, #28]	; (80062f0 <vTaskPlaceOnEventList+0x44>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3318      	adds	r3, #24
 80062d8:	4619      	mov	r1, r3
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7fe fe61 	bl	8004fa2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062e0:	2101      	movs	r1, #1
 80062e2:	6838      	ldr	r0, [r7, #0]
 80062e4:	f000 fa80 	bl	80067e8 <prvAddCurrentTaskToDelayedList>
}
 80062e8:	bf00      	nop
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	20000d98 	.word	0x20000d98

080062f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10a      	bne.n	800631c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	617b      	str	r3, [r7, #20]
}
 8006318:	bf00      	nop
 800631a:	e7fe      	b.n	800631a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800631c:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <vTaskPlaceOnEventListRestricted+0x54>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3318      	adds	r3, #24
 8006322:	4619      	mov	r1, r3
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f7fe fe18 	bl	8004f5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006330:	f04f 33ff 	mov.w	r3, #4294967295
 8006334:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006336:	6879      	ldr	r1, [r7, #4]
 8006338:	68b8      	ldr	r0, [r7, #8]
 800633a:	f000 fa55 	bl	80067e8 <prvAddCurrentTaskToDelayedList>
	}
 800633e:	bf00      	nop
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20000d98 	.word	0x20000d98

0800634c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10a      	bne.n	8006378 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	60fb      	str	r3, [r7, #12]
}
 8006374:	bf00      	nop
 8006376:	e7fe      	b.n	8006376 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	3318      	adds	r3, #24
 800637c:	4618      	mov	r0, r3
 800637e:	f7fe fe49 	bl	8005014 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006382:	4b1e      	ldr	r3, [pc, #120]	; (80063fc <xTaskRemoveFromEventList+0xb0>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d11d      	bne.n	80063c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	3304      	adds	r3, #4
 800638e:	4618      	mov	r0, r3
 8006390:	f7fe fe40 	bl	8005014 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006398:	4b19      	ldr	r3, [pc, #100]	; (8006400 <xTaskRemoveFromEventList+0xb4>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	429a      	cmp	r2, r3
 800639e:	d903      	bls.n	80063a8 <xTaskRemoveFromEventList+0x5c>
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	4a16      	ldr	r2, [pc, #88]	; (8006400 <xTaskRemoveFromEventList+0xb4>)
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ac:	4613      	mov	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4a13      	ldr	r2, [pc, #76]	; (8006404 <xTaskRemoveFromEventList+0xb8>)
 80063b6:	441a      	add	r2, r3
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	3304      	adds	r3, #4
 80063bc:	4619      	mov	r1, r3
 80063be:	4610      	mov	r0, r2
 80063c0:	f7fe fdcb 	bl	8004f5a <vListInsertEnd>
 80063c4:	e005      	b.n	80063d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	3318      	adds	r3, #24
 80063ca:	4619      	mov	r1, r3
 80063cc:	480e      	ldr	r0, [pc, #56]	; (8006408 <xTaskRemoveFromEventList+0xbc>)
 80063ce:	f7fe fdc4 	bl	8004f5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d6:	4b0d      	ldr	r3, [pc, #52]	; (800640c <xTaskRemoveFromEventList+0xc0>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	429a      	cmp	r2, r3
 80063de:	d905      	bls.n	80063ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063e0:	2301      	movs	r3, #1
 80063e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063e4:	4b0a      	ldr	r3, [pc, #40]	; (8006410 <xTaskRemoveFromEventList+0xc4>)
 80063e6:	2201      	movs	r2, #1
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	e001      	b.n	80063f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80063ec:	2300      	movs	r3, #0
 80063ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80063f0:	697b      	ldr	r3, [r7, #20]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	20001294 	.word	0x20001294
 8006400:	20001274 	.word	0x20001274
 8006404:	20000d9c 	.word	0x20000d9c
 8006408:	2000122c 	.word	0x2000122c
 800640c:	20000d98 	.word	0x20000d98
 8006410:	20001280 	.word	0x20001280

08006414 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800641c:	4b06      	ldr	r3, [pc, #24]	; (8006438 <vTaskInternalSetTimeOutState+0x24>)
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006424:	4b05      	ldr	r3, [pc, #20]	; (800643c <vTaskInternalSetTimeOutState+0x28>)
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	605a      	str	r2, [r3, #4]
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	20001284 	.word	0x20001284
 800643c:	20001270 	.word	0x20001270

08006440 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10a      	bne.n	8006466 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	613b      	str	r3, [r7, #16]
}
 8006462:	bf00      	nop
 8006464:	e7fe      	b.n	8006464 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10a      	bne.n	8006482 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	60fb      	str	r3, [r7, #12]
}
 800647e:	bf00      	nop
 8006480:	e7fe      	b.n	8006480 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006482:	f000 fe7f 	bl	8007184 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006486:	4b1d      	ldr	r3, [pc, #116]	; (80064fc <xTaskCheckForTimeOut+0xbc>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649e:	d102      	bne.n	80064a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80064a0:	2300      	movs	r3, #0
 80064a2:	61fb      	str	r3, [r7, #28]
 80064a4:	e023      	b.n	80064ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	4b15      	ldr	r3, [pc, #84]	; (8006500 <xTaskCheckForTimeOut+0xc0>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d007      	beq.n	80064c2 <xTaskCheckForTimeOut+0x82>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d302      	bcc.n	80064c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80064bc:	2301      	movs	r3, #1
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	e015      	b.n	80064ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d20b      	bcs.n	80064e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	1ad2      	subs	r2, r2, r3
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff ff9b 	bl	8006414 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064de:	2300      	movs	r3, #0
 80064e0:	61fb      	str	r3, [r7, #28]
 80064e2:	e004      	b.n	80064ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	2200      	movs	r2, #0
 80064e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064ea:	2301      	movs	r3, #1
 80064ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80064ee:	f000 fe79 	bl	80071e4 <vPortExitCritical>

	return xReturn;
 80064f2:	69fb      	ldr	r3, [r7, #28]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3720      	adds	r7, #32
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	20001270 	.word	0x20001270
 8006500:	20001284 	.word	0x20001284

08006504 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006504:	b480      	push	{r7}
 8006506:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006508:	4b03      	ldr	r3, [pc, #12]	; (8006518 <vTaskMissedYield+0x14>)
 800650a:	2201      	movs	r2, #1
 800650c:	601a      	str	r2, [r3, #0]
}
 800650e:	bf00      	nop
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	20001280 	.word	0x20001280

0800651c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006524:	f000 f852 	bl	80065cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006528:	4b06      	ldr	r3, [pc, #24]	; (8006544 <prvIdleTask+0x28>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d9f9      	bls.n	8006524 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006530:	4b05      	ldr	r3, [pc, #20]	; (8006548 <prvIdleTask+0x2c>)
 8006532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006540:	e7f0      	b.n	8006524 <prvIdleTask+0x8>
 8006542:	bf00      	nop
 8006544:	20000d9c 	.word	0x20000d9c
 8006548:	e000ed04 	.word	0xe000ed04

0800654c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006552:	2300      	movs	r3, #0
 8006554:	607b      	str	r3, [r7, #4]
 8006556:	e00c      	b.n	8006572 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4a12      	ldr	r2, [pc, #72]	; (80065ac <prvInitialiseTaskLists+0x60>)
 8006564:	4413      	add	r3, r2
 8006566:	4618      	mov	r0, r3
 8006568:	f7fe fcca 	bl	8004f00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	3301      	adds	r3, #1
 8006570:	607b      	str	r3, [r7, #4]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b37      	cmp	r3, #55	; 0x37
 8006576:	d9ef      	bls.n	8006558 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006578:	480d      	ldr	r0, [pc, #52]	; (80065b0 <prvInitialiseTaskLists+0x64>)
 800657a:	f7fe fcc1 	bl	8004f00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800657e:	480d      	ldr	r0, [pc, #52]	; (80065b4 <prvInitialiseTaskLists+0x68>)
 8006580:	f7fe fcbe 	bl	8004f00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006584:	480c      	ldr	r0, [pc, #48]	; (80065b8 <prvInitialiseTaskLists+0x6c>)
 8006586:	f7fe fcbb 	bl	8004f00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800658a:	480c      	ldr	r0, [pc, #48]	; (80065bc <prvInitialiseTaskLists+0x70>)
 800658c:	f7fe fcb8 	bl	8004f00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006590:	480b      	ldr	r0, [pc, #44]	; (80065c0 <prvInitialiseTaskLists+0x74>)
 8006592:	f7fe fcb5 	bl	8004f00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006596:	4b0b      	ldr	r3, [pc, #44]	; (80065c4 <prvInitialiseTaskLists+0x78>)
 8006598:	4a05      	ldr	r2, [pc, #20]	; (80065b0 <prvInitialiseTaskLists+0x64>)
 800659a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800659c:	4b0a      	ldr	r3, [pc, #40]	; (80065c8 <prvInitialiseTaskLists+0x7c>)
 800659e:	4a05      	ldr	r2, [pc, #20]	; (80065b4 <prvInitialiseTaskLists+0x68>)
 80065a0:	601a      	str	r2, [r3, #0]
}
 80065a2:	bf00      	nop
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20000d9c 	.word	0x20000d9c
 80065b0:	200011fc 	.word	0x200011fc
 80065b4:	20001210 	.word	0x20001210
 80065b8:	2000122c 	.word	0x2000122c
 80065bc:	20001240 	.word	0x20001240
 80065c0:	20001258 	.word	0x20001258
 80065c4:	20001224 	.word	0x20001224
 80065c8:	20001228 	.word	0x20001228

080065cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065d2:	e019      	b.n	8006608 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065d4:	f000 fdd6 	bl	8007184 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065d8:	4b10      	ldr	r3, [pc, #64]	; (800661c <prvCheckTasksWaitingTermination+0x50>)
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3304      	adds	r3, #4
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fe fd15 	bl	8005014 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065ea:	4b0d      	ldr	r3, [pc, #52]	; (8006620 <prvCheckTasksWaitingTermination+0x54>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3b01      	subs	r3, #1
 80065f0:	4a0b      	ldr	r2, [pc, #44]	; (8006620 <prvCheckTasksWaitingTermination+0x54>)
 80065f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065f4:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <prvCheckTasksWaitingTermination+0x58>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3b01      	subs	r3, #1
 80065fa:	4a0a      	ldr	r2, [pc, #40]	; (8006624 <prvCheckTasksWaitingTermination+0x58>)
 80065fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065fe:	f000 fdf1 	bl	80071e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f810 	bl	8006628 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006608:	4b06      	ldr	r3, [pc, #24]	; (8006624 <prvCheckTasksWaitingTermination+0x58>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1e1      	bne.n	80065d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006610:	bf00      	nop
 8006612:	bf00      	nop
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	20001240 	.word	0x20001240
 8006620:	2000126c 	.word	0x2000126c
 8006624:	20001254 	.word	0x20001254

08006628 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	3354      	adds	r3, #84	; 0x54
 8006634:	4618      	mov	r0, r3
 8006636:	f001 ff85 	bl	8008544 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006640:	2b00      	cmp	r3, #0
 8006642:	d108      	bne.n	8006656 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006648:	4618      	mov	r0, r3
 800664a:	f000 ff89 	bl	8007560 <vPortFree>
				vPortFree( pxTCB );
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 ff86 	bl	8007560 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006654:	e018      	b.n	8006688 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800665c:	2b01      	cmp	r3, #1
 800665e:	d103      	bne.n	8006668 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 ff7d 	bl	8007560 <vPortFree>
	}
 8006666:	e00f      	b.n	8006688 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800666e:	2b02      	cmp	r3, #2
 8006670:	d00a      	beq.n	8006688 <prvDeleteTCB+0x60>
	__asm volatile
 8006672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	60fb      	str	r3, [r7, #12]
}
 8006684:	bf00      	nop
 8006686:	e7fe      	b.n	8006686 <prvDeleteTCB+0x5e>
	}
 8006688:	bf00      	nop
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006696:	4b0c      	ldr	r3, [pc, #48]	; (80066c8 <prvResetNextTaskUnblockTime+0x38>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d104      	bne.n	80066aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066a0:	4b0a      	ldr	r3, [pc, #40]	; (80066cc <prvResetNextTaskUnblockTime+0x3c>)
 80066a2:	f04f 32ff 	mov.w	r2, #4294967295
 80066a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066a8:	e008      	b.n	80066bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066aa:	4b07      	ldr	r3, [pc, #28]	; (80066c8 <prvResetNextTaskUnblockTime+0x38>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	4a04      	ldr	r2, [pc, #16]	; (80066cc <prvResetNextTaskUnblockTime+0x3c>)
 80066ba:	6013      	str	r3, [r2, #0]
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	20001224 	.word	0x20001224
 80066cc:	2000128c 	.word	0x2000128c

080066d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066d6:	4b0b      	ldr	r3, [pc, #44]	; (8006704 <xTaskGetSchedulerState+0x34>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d102      	bne.n	80066e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066de:	2301      	movs	r3, #1
 80066e0:	607b      	str	r3, [r7, #4]
 80066e2:	e008      	b.n	80066f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066e4:	4b08      	ldr	r3, [pc, #32]	; (8006708 <xTaskGetSchedulerState+0x38>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d102      	bne.n	80066f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066ec:	2302      	movs	r3, #2
 80066ee:	607b      	str	r3, [r7, #4]
 80066f0:	e001      	b.n	80066f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066f2:	2300      	movs	r3, #0
 80066f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066f6:	687b      	ldr	r3, [r7, #4]
	}
 80066f8:	4618      	mov	r0, r3
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	20001278 	.word	0x20001278
 8006708:	20001294 	.word	0x20001294

0800670c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006718:	2300      	movs	r3, #0
 800671a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d056      	beq.n	80067d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006722:	4b2e      	ldr	r3, [pc, #184]	; (80067dc <xTaskPriorityDisinherit+0xd0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	429a      	cmp	r2, r3
 800672a:	d00a      	beq.n	8006742 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800672c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	60fb      	str	r3, [r7, #12]
}
 800673e:	bf00      	nop
 8006740:	e7fe      	b.n	8006740 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10a      	bne.n	8006760 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	60bb      	str	r3, [r7, #8]
}
 800675c:	bf00      	nop
 800675e:	e7fe      	b.n	800675e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006764:	1e5a      	subs	r2, r3, #1
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006772:	429a      	cmp	r2, r3
 8006774:	d02c      	beq.n	80067d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800677a:	2b00      	cmp	r3, #0
 800677c:	d128      	bne.n	80067d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	3304      	adds	r3, #4
 8006782:	4618      	mov	r0, r3
 8006784:	f7fe fc46 	bl	8005014 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006794:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a0:	4b0f      	ldr	r3, [pc, #60]	; (80067e0 <xTaskPriorityDisinherit+0xd4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d903      	bls.n	80067b0 <xTaskPriorityDisinherit+0xa4>
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ac:	4a0c      	ldr	r2, [pc, #48]	; (80067e0 <xTaskPriorityDisinherit+0xd4>)
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4a09      	ldr	r2, [pc, #36]	; (80067e4 <xTaskPriorityDisinherit+0xd8>)
 80067be:	441a      	add	r2, r3
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	3304      	adds	r3, #4
 80067c4:	4619      	mov	r1, r3
 80067c6:	4610      	mov	r0, r2
 80067c8:	f7fe fbc7 	bl	8004f5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80067cc:	2301      	movs	r3, #1
 80067ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067d0:	697b      	ldr	r3, [r7, #20]
	}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3718      	adds	r7, #24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20000d98 	.word	0x20000d98
 80067e0:	20001274 	.word	0x20001274
 80067e4:	20000d9c 	.word	0x20000d9c

080067e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067f2:	4b21      	ldr	r3, [pc, #132]	; (8006878 <prvAddCurrentTaskToDelayedList+0x90>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067f8:	4b20      	ldr	r3, [pc, #128]	; (800687c <prvAddCurrentTaskToDelayedList+0x94>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3304      	adds	r3, #4
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fe fc08 	bl	8005014 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680a:	d10a      	bne.n	8006822 <prvAddCurrentTaskToDelayedList+0x3a>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d007      	beq.n	8006822 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006812:	4b1a      	ldr	r3, [pc, #104]	; (800687c <prvAddCurrentTaskToDelayedList+0x94>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3304      	adds	r3, #4
 8006818:	4619      	mov	r1, r3
 800681a:	4819      	ldr	r0, [pc, #100]	; (8006880 <prvAddCurrentTaskToDelayedList+0x98>)
 800681c:	f7fe fb9d 	bl	8004f5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006820:	e026      	b.n	8006870 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4413      	add	r3, r2
 8006828:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800682a:	4b14      	ldr	r3, [pc, #80]	; (800687c <prvAddCurrentTaskToDelayedList+0x94>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	429a      	cmp	r2, r3
 8006838:	d209      	bcs.n	800684e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800683a:	4b12      	ldr	r3, [pc, #72]	; (8006884 <prvAddCurrentTaskToDelayedList+0x9c>)
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	4b0f      	ldr	r3, [pc, #60]	; (800687c <prvAddCurrentTaskToDelayedList+0x94>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3304      	adds	r3, #4
 8006844:	4619      	mov	r1, r3
 8006846:	4610      	mov	r0, r2
 8006848:	f7fe fbab 	bl	8004fa2 <vListInsert>
}
 800684c:	e010      	b.n	8006870 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800684e:	4b0e      	ldr	r3, [pc, #56]	; (8006888 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	4b0a      	ldr	r3, [pc, #40]	; (800687c <prvAddCurrentTaskToDelayedList+0x94>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3304      	adds	r3, #4
 8006858:	4619      	mov	r1, r3
 800685a:	4610      	mov	r0, r2
 800685c:	f7fe fba1 	bl	8004fa2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006860:	4b0a      	ldr	r3, [pc, #40]	; (800688c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	429a      	cmp	r2, r3
 8006868:	d202      	bcs.n	8006870 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800686a:	4a08      	ldr	r2, [pc, #32]	; (800688c <prvAddCurrentTaskToDelayedList+0xa4>)
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	6013      	str	r3, [r2, #0]
}
 8006870:	bf00      	nop
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	20001270 	.word	0x20001270
 800687c:	20000d98 	.word	0x20000d98
 8006880:	20001258 	.word	0x20001258
 8006884:	20001228 	.word	0x20001228
 8006888:	20001224 	.word	0x20001224
 800688c:	2000128c 	.word	0x2000128c

08006890 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b08a      	sub	sp, #40	; 0x28
 8006894:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006896:	2300      	movs	r3, #0
 8006898:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800689a:	f000 fb07 	bl	8006eac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800689e:	4b1c      	ldr	r3, [pc, #112]	; (8006910 <xTimerCreateTimerTask+0x80>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d021      	beq.n	80068ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80068a6:	2300      	movs	r3, #0
 80068a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80068ae:	1d3a      	adds	r2, r7, #4
 80068b0:	f107 0108 	add.w	r1, r7, #8
 80068b4:	f107 030c 	add.w	r3, r7, #12
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fe fb07 	bl	8004ecc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	9202      	str	r2, [sp, #8]
 80068c6:	9301      	str	r3, [sp, #4]
 80068c8:	2302      	movs	r3, #2
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	2300      	movs	r3, #0
 80068ce:	460a      	mov	r2, r1
 80068d0:	4910      	ldr	r1, [pc, #64]	; (8006914 <xTimerCreateTimerTask+0x84>)
 80068d2:	4811      	ldr	r0, [pc, #68]	; (8006918 <xTimerCreateTimerTask+0x88>)
 80068d4:	f7ff f8b4 	bl	8005a40 <xTaskCreateStatic>
 80068d8:	4603      	mov	r3, r0
 80068da:	4a10      	ldr	r2, [pc, #64]	; (800691c <xTimerCreateTimerTask+0x8c>)
 80068dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80068de:	4b0f      	ldr	r3, [pc, #60]	; (800691c <xTimerCreateTimerTask+0x8c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80068e6:	2301      	movs	r3, #1
 80068e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10a      	bne.n	8006906 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	613b      	str	r3, [r7, #16]
}
 8006902:	bf00      	nop
 8006904:	e7fe      	b.n	8006904 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006906:	697b      	ldr	r3, [r7, #20]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3718      	adds	r7, #24
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	200012c8 	.word	0x200012c8
 8006914:	0800a530 	.word	0x0800a530
 8006918:	08006a55 	.word	0x08006a55
 800691c:	200012cc 	.word	0x200012cc

08006920 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b08a      	sub	sp, #40	; 0x28
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800692e:	2300      	movs	r3, #0
 8006930:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10a      	bne.n	800694e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	623b      	str	r3, [r7, #32]
}
 800694a:	bf00      	nop
 800694c:	e7fe      	b.n	800694c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800694e:	4b1a      	ldr	r3, [pc, #104]	; (80069b8 <xTimerGenericCommand+0x98>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d02a      	beq.n	80069ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	2b05      	cmp	r3, #5
 8006966:	dc18      	bgt.n	800699a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006968:	f7ff feb2 	bl	80066d0 <xTaskGetSchedulerState>
 800696c:	4603      	mov	r3, r0
 800696e:	2b02      	cmp	r3, #2
 8006970:	d109      	bne.n	8006986 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006972:	4b11      	ldr	r3, [pc, #68]	; (80069b8 <xTimerGenericCommand+0x98>)
 8006974:	6818      	ldr	r0, [r3, #0]
 8006976:	f107 0110 	add.w	r1, r7, #16
 800697a:	2300      	movs	r3, #0
 800697c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800697e:	f7fe fc77 	bl	8005270 <xQueueGenericSend>
 8006982:	6278      	str	r0, [r7, #36]	; 0x24
 8006984:	e012      	b.n	80069ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006986:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <xTimerGenericCommand+0x98>)
 8006988:	6818      	ldr	r0, [r3, #0]
 800698a:	f107 0110 	add.w	r1, r7, #16
 800698e:	2300      	movs	r3, #0
 8006990:	2200      	movs	r2, #0
 8006992:	f7fe fc6d 	bl	8005270 <xQueueGenericSend>
 8006996:	6278      	str	r0, [r7, #36]	; 0x24
 8006998:	e008      	b.n	80069ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800699a:	4b07      	ldr	r3, [pc, #28]	; (80069b8 <xTimerGenericCommand+0x98>)
 800699c:	6818      	ldr	r0, [r3, #0]
 800699e:	f107 0110 	add.w	r1, r7, #16
 80069a2:	2300      	movs	r3, #0
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	f7fe fd61 	bl	800546c <xQueueGenericSendFromISR>
 80069aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3728      	adds	r7, #40	; 0x28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	200012c8 	.word	0x200012c8

080069bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b088      	sub	sp, #32
 80069c0:	af02      	add	r7, sp, #8
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069c6:	4b22      	ldr	r3, [pc, #136]	; (8006a50 <prvProcessExpiredTimer+0x94>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	3304      	adds	r3, #4
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7fe fb1d 	bl	8005014 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069e0:	f003 0304 	and.w	r3, r3, #4
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d022      	beq.n	8006a2e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	699a      	ldr	r2, [r3, #24]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	18d1      	adds	r1, r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	6978      	ldr	r0, [r7, #20]
 80069f6:	f000 f8d1 	bl	8006b9c <prvInsertTimerInActiveList>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01f      	beq.n	8006a40 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a00:	2300      	movs	r3, #0
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	2300      	movs	r3, #0
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	2100      	movs	r1, #0
 8006a0a:	6978      	ldr	r0, [r7, #20]
 8006a0c:	f7ff ff88 	bl	8006920 <xTimerGenericCommand>
 8006a10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d113      	bne.n	8006a40 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	60fb      	str	r3, [r7, #12]
}
 8006a2a:	bf00      	nop
 8006a2c:	e7fe      	b.n	8006a2c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a34:	f023 0301 	bic.w	r3, r3, #1
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	6978      	ldr	r0, [r7, #20]
 8006a46:	4798      	blx	r3
}
 8006a48:	bf00      	nop
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	200012c0 	.word	0x200012c0

08006a54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a5c:	f107 0308 	add.w	r3, r7, #8
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 f857 	bl	8006b14 <prvGetNextExpireTime>
 8006a66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 f803 	bl	8006a78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a72:	f000 f8d5 	bl	8006c20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a76:	e7f1      	b.n	8006a5c <prvTimerTask+0x8>

08006a78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a82:	f7ff fa39 	bl	8005ef8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a86:	f107 0308 	add.w	r3, r7, #8
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 f866 	bl	8006b5c <prvSampleTimeNow>
 8006a90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d130      	bne.n	8006afa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10a      	bne.n	8006ab4 <prvProcessTimerOrBlockTask+0x3c>
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d806      	bhi.n	8006ab4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006aa6:	f7ff fa35 	bl	8005f14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006aaa:	68f9      	ldr	r1, [r7, #12]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7ff ff85 	bl	80069bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006ab2:	e024      	b.n	8006afe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d008      	beq.n	8006acc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006aba:	4b13      	ldr	r3, [pc, #76]	; (8006b08 <prvProcessTimerOrBlockTask+0x90>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <prvProcessTimerOrBlockTask+0x50>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e000      	b.n	8006aca <prvProcessTimerOrBlockTask+0x52>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006acc:	4b0f      	ldr	r3, [pc, #60]	; (8006b0c <prvProcessTimerOrBlockTask+0x94>)
 8006ace:	6818      	ldr	r0, [r3, #0]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	4619      	mov	r1, r3
 8006ada:	f7fe ff7d 	bl	80059d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ade:	f7ff fa19 	bl	8005f14 <xTaskResumeAll>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10a      	bne.n	8006afe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006ae8:	4b09      	ldr	r3, [pc, #36]	; (8006b10 <prvProcessTimerOrBlockTask+0x98>)
 8006aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aee:	601a      	str	r2, [r3, #0]
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	f3bf 8f6f 	isb	sy
}
 8006af8:	e001      	b.n	8006afe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006afa:	f7ff fa0b 	bl	8005f14 <xTaskResumeAll>
}
 8006afe:	bf00      	nop
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	200012c4 	.word	0x200012c4
 8006b0c:	200012c8 	.word	0x200012c8
 8006b10:	e000ed04 	.word	0xe000ed04

08006b14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b1c:	4b0e      	ldr	r3, [pc, #56]	; (8006b58 <prvGetNextExpireTime+0x44>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <prvGetNextExpireTime+0x16>
 8006b26:	2201      	movs	r2, #1
 8006b28:	e000      	b.n	8006b2c <prvGetNextExpireTime+0x18>
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d105      	bne.n	8006b44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b38:	4b07      	ldr	r3, [pc, #28]	; (8006b58 <prvGetNextExpireTime+0x44>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	e001      	b.n	8006b48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b48:	68fb      	ldr	r3, [r7, #12]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	200012c0 	.word	0x200012c0

08006b5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b64:	f7ff fa74 	bl	8006050 <xTaskGetTickCount>
 8006b68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b6a:	4b0b      	ldr	r3, [pc, #44]	; (8006b98 <prvSampleTimeNow+0x3c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d205      	bcs.n	8006b80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b74:	f000 f936 	bl	8006de4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	e002      	b.n	8006b86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b86:	4a04      	ldr	r2, [pc, #16]	; (8006b98 <prvSampleTimeNow+0x3c>)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	200012d0 	.word	0x200012d0

08006b9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
 8006ba8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006baa:	2300      	movs	r3, #0
 8006bac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d812      	bhi.n	8006be8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	1ad2      	subs	r2, r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d302      	bcc.n	8006bd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	617b      	str	r3, [r7, #20]
 8006bd4:	e01b      	b.n	8006c0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006bd6:	4b10      	ldr	r3, [pc, #64]	; (8006c18 <prvInsertTimerInActiveList+0x7c>)
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	3304      	adds	r3, #4
 8006bde:	4619      	mov	r1, r3
 8006be0:	4610      	mov	r0, r2
 8006be2:	f7fe f9de 	bl	8004fa2 <vListInsert>
 8006be6:	e012      	b.n	8006c0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d206      	bcs.n	8006bfe <prvInsertTimerInActiveList+0x62>
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d302      	bcc.n	8006bfe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	e007      	b.n	8006c0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bfe:	4b07      	ldr	r3, [pc, #28]	; (8006c1c <prvInsertTimerInActiveList+0x80>)
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3304      	adds	r3, #4
 8006c06:	4619      	mov	r1, r3
 8006c08:	4610      	mov	r0, r2
 8006c0a:	f7fe f9ca 	bl	8004fa2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c0e:	697b      	ldr	r3, [r7, #20]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	200012c4 	.word	0x200012c4
 8006c1c:	200012c0 	.word	0x200012c0

08006c20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08e      	sub	sp, #56	; 0x38
 8006c24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c26:	e0ca      	b.n	8006dbe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	da18      	bge.n	8006c60 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c2e:	1d3b      	adds	r3, r7, #4
 8006c30:	3304      	adds	r3, #4
 8006c32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10a      	bne.n	8006c50 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	61fb      	str	r3, [r7, #28]
}
 8006c4c:	bf00      	nop
 8006c4e:	e7fe      	b.n	8006c4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c56:	6850      	ldr	r0, [r2, #4]
 8006c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c5a:	6892      	ldr	r2, [r2, #8]
 8006c5c:	4611      	mov	r1, r2
 8006c5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f2c0 80aa 	blt.w	8006dbc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d004      	beq.n	8006c7e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c76:	3304      	adds	r3, #4
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7fe f9cb 	bl	8005014 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c7e:	463b      	mov	r3, r7
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7ff ff6b 	bl	8006b5c <prvSampleTimeNow>
 8006c86:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b09      	cmp	r3, #9
 8006c8c:	f200 8097 	bhi.w	8006dbe <prvProcessReceivedCommands+0x19e>
 8006c90:	a201      	add	r2, pc, #4	; (adr r2, 8006c98 <prvProcessReceivedCommands+0x78>)
 8006c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c96:	bf00      	nop
 8006c98:	08006cc1 	.word	0x08006cc1
 8006c9c:	08006cc1 	.word	0x08006cc1
 8006ca0:	08006cc1 	.word	0x08006cc1
 8006ca4:	08006d35 	.word	0x08006d35
 8006ca8:	08006d49 	.word	0x08006d49
 8006cac:	08006d93 	.word	0x08006d93
 8006cb0:	08006cc1 	.word	0x08006cc1
 8006cb4:	08006cc1 	.word	0x08006cc1
 8006cb8:	08006d35 	.word	0x08006d35
 8006cbc:	08006d49 	.word	0x08006d49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cc6:	f043 0301 	orr.w	r3, r3, #1
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	18d1      	adds	r1, r2, r3
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ce0:	f7ff ff5c 	bl	8006b9c <prvInsertTimerInActiveList>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d069      	beq.n	8006dbe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cf0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d05e      	beq.n	8006dbe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	441a      	add	r2, r3
 8006d08:	2300      	movs	r3, #0
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	2100      	movs	r1, #0
 8006d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d12:	f7ff fe05 	bl	8006920 <xTimerGenericCommand>
 8006d16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d18:	6a3b      	ldr	r3, [r7, #32]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d14f      	bne.n	8006dbe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	61bb      	str	r3, [r7, #24]
}
 8006d30:	bf00      	nop
 8006d32:	e7fe      	b.n	8006d32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d3a:	f023 0301 	bic.w	r3, r3, #1
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006d46:	e03a      	b.n	8006dbe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d4e:	f043 0301 	orr.w	r3, r3, #1
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10a      	bne.n	8006d7e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	617b      	str	r3, [r7, #20]
}
 8006d7a:	bf00      	nop
 8006d7c:	e7fe      	b.n	8006d7c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d80:	699a      	ldr	r2, [r3, #24]
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	18d1      	adds	r1, r2, r3
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d8c:	f7ff ff06 	bl	8006b9c <prvInsertTimerInActiveList>
					break;
 8006d90:	e015      	b.n	8006dbe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d103      	bne.n	8006da8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006da2:	f000 fbdd 	bl	8007560 <vPortFree>
 8006da6:	e00a      	b.n	8006dbe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dae:	f023 0301 	bic.w	r3, r3, #1
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006dba:	e000      	b.n	8006dbe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006dbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006dbe:	4b08      	ldr	r3, [pc, #32]	; (8006de0 <prvProcessReceivedCommands+0x1c0>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	1d39      	adds	r1, r7, #4
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7fe fbec 	bl	80055a4 <xQueueReceive>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f47f af2a 	bne.w	8006c28 <prvProcessReceivedCommands+0x8>
	}
}
 8006dd4:	bf00      	nop
 8006dd6:	bf00      	nop
 8006dd8:	3730      	adds	r7, #48	; 0x30
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	200012c8 	.word	0x200012c8

08006de4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b088      	sub	sp, #32
 8006de8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dea:	e048      	b.n	8006e7e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dec:	4b2d      	ldr	r3, [pc, #180]	; (8006ea4 <prvSwitchTimerLists+0xc0>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006df6:	4b2b      	ldr	r3, [pc, #172]	; (8006ea4 <prvSwitchTimerLists+0xc0>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3304      	adds	r3, #4
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7fe f905 	bl	8005014 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d02e      	beq.n	8006e7e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	4413      	add	r3, r2
 8006e28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d90e      	bls.n	8006e50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e3e:	4b19      	ldr	r3, [pc, #100]	; (8006ea4 <prvSwitchTimerLists+0xc0>)
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	3304      	adds	r3, #4
 8006e46:	4619      	mov	r1, r3
 8006e48:	4610      	mov	r0, r2
 8006e4a:	f7fe f8aa 	bl	8004fa2 <vListInsert>
 8006e4e:	e016      	b.n	8006e7e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e50:	2300      	movs	r3, #0
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	2300      	movs	r3, #0
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	2100      	movs	r1, #0
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f7ff fd60 	bl	8006920 <xTimerGenericCommand>
 8006e60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10a      	bne.n	8006e7e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6c:	f383 8811 	msr	BASEPRI, r3
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	603b      	str	r3, [r7, #0]
}
 8006e7a:	bf00      	nop
 8006e7c:	e7fe      	b.n	8006e7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e7e:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <prvSwitchTimerLists+0xc0>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1b1      	bne.n	8006dec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e88:	4b06      	ldr	r3, [pc, #24]	; (8006ea4 <prvSwitchTimerLists+0xc0>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e8e:	4b06      	ldr	r3, [pc, #24]	; (8006ea8 <prvSwitchTimerLists+0xc4>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a04      	ldr	r2, [pc, #16]	; (8006ea4 <prvSwitchTimerLists+0xc0>)
 8006e94:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e96:	4a04      	ldr	r2, [pc, #16]	; (8006ea8 <prvSwitchTimerLists+0xc4>)
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	6013      	str	r3, [r2, #0]
}
 8006e9c:	bf00      	nop
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	200012c0 	.word	0x200012c0
 8006ea8:	200012c4 	.word	0x200012c4

08006eac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006eb2:	f000 f967 	bl	8007184 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006eb6:	4b15      	ldr	r3, [pc, #84]	; (8006f0c <prvCheckForValidListAndQueue+0x60>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d120      	bne.n	8006f00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006ebe:	4814      	ldr	r0, [pc, #80]	; (8006f10 <prvCheckForValidListAndQueue+0x64>)
 8006ec0:	f7fe f81e 	bl	8004f00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006ec4:	4813      	ldr	r0, [pc, #76]	; (8006f14 <prvCheckForValidListAndQueue+0x68>)
 8006ec6:	f7fe f81b 	bl	8004f00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006eca:	4b13      	ldr	r3, [pc, #76]	; (8006f18 <prvCheckForValidListAndQueue+0x6c>)
 8006ecc:	4a10      	ldr	r2, [pc, #64]	; (8006f10 <prvCheckForValidListAndQueue+0x64>)
 8006ece:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ed0:	4b12      	ldr	r3, [pc, #72]	; (8006f1c <prvCheckForValidListAndQueue+0x70>)
 8006ed2:	4a10      	ldr	r2, [pc, #64]	; (8006f14 <prvCheckForValidListAndQueue+0x68>)
 8006ed4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	4b11      	ldr	r3, [pc, #68]	; (8006f20 <prvCheckForValidListAndQueue+0x74>)
 8006edc:	4a11      	ldr	r2, [pc, #68]	; (8006f24 <prvCheckForValidListAndQueue+0x78>)
 8006ede:	2110      	movs	r1, #16
 8006ee0:	200a      	movs	r0, #10
 8006ee2:	f7fe f929 	bl	8005138 <xQueueGenericCreateStatic>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	4a08      	ldr	r2, [pc, #32]	; (8006f0c <prvCheckForValidListAndQueue+0x60>)
 8006eea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006eec:	4b07      	ldr	r3, [pc, #28]	; (8006f0c <prvCheckForValidListAndQueue+0x60>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d005      	beq.n	8006f00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ef4:	4b05      	ldr	r3, [pc, #20]	; (8006f0c <prvCheckForValidListAndQueue+0x60>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	490b      	ldr	r1, [pc, #44]	; (8006f28 <prvCheckForValidListAndQueue+0x7c>)
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fe fd42 	bl	8005984 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f00:	f000 f970 	bl	80071e4 <vPortExitCritical>
}
 8006f04:	bf00      	nop
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	200012c8 	.word	0x200012c8
 8006f10:	20001298 	.word	0x20001298
 8006f14:	200012ac 	.word	0x200012ac
 8006f18:	200012c0 	.word	0x200012c0
 8006f1c:	200012c4 	.word	0x200012c4
 8006f20:	20001374 	.word	0x20001374
 8006f24:	200012d4 	.word	0x200012d4
 8006f28:	0800a538 	.word	0x0800a538

08006f2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3b04      	subs	r3, #4
 8006f3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	3b04      	subs	r3, #4
 8006f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f023 0201 	bic.w	r2, r3, #1
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	3b04      	subs	r3, #4
 8006f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f5c:	4a0c      	ldr	r2, [pc, #48]	; (8006f90 <pxPortInitialiseStack+0x64>)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3b14      	subs	r3, #20
 8006f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	3b04      	subs	r3, #4
 8006f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f06f 0202 	mvn.w	r2, #2
 8006f7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	3b20      	subs	r3, #32
 8006f80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f82:	68fb      	ldr	r3, [r7, #12]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	08006f95 	.word	0x08006f95

08006f94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f9e:	4b12      	ldr	r3, [pc, #72]	; (8006fe8 <prvTaskExitError+0x54>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa6:	d00a      	beq.n	8006fbe <prvTaskExitError+0x2a>
	__asm volatile
 8006fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fac:	f383 8811 	msr	BASEPRI, r3
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	60fb      	str	r3, [r7, #12]
}
 8006fba:	bf00      	nop
 8006fbc:	e7fe      	b.n	8006fbc <prvTaskExitError+0x28>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	60bb      	str	r3, [r7, #8]
}
 8006fd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006fd2:	bf00      	nop
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d0fc      	beq.n	8006fd4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006fda:	bf00      	nop
 8006fdc:	bf00      	nop
 8006fde:	3714      	adds	r7, #20
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	20000014 	.word	0x20000014
 8006fec:	00000000 	.word	0x00000000

08006ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ff0:	4b07      	ldr	r3, [pc, #28]	; (8007010 <pxCurrentTCBConst2>)
 8006ff2:	6819      	ldr	r1, [r3, #0]
 8006ff4:	6808      	ldr	r0, [r1, #0]
 8006ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffa:	f380 8809 	msr	PSP, r0
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f04f 0000 	mov.w	r0, #0
 8007006:	f380 8811 	msr	BASEPRI, r0
 800700a:	4770      	bx	lr
 800700c:	f3af 8000 	nop.w

08007010 <pxCurrentTCBConst2>:
 8007010:	20000d98 	.word	0x20000d98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007014:	bf00      	nop
 8007016:	bf00      	nop

08007018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007018:	4808      	ldr	r0, [pc, #32]	; (800703c <prvPortStartFirstTask+0x24>)
 800701a:	6800      	ldr	r0, [r0, #0]
 800701c:	6800      	ldr	r0, [r0, #0]
 800701e:	f380 8808 	msr	MSP, r0
 8007022:	f04f 0000 	mov.w	r0, #0
 8007026:	f380 8814 	msr	CONTROL, r0
 800702a:	b662      	cpsie	i
 800702c:	b661      	cpsie	f
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	df00      	svc	0
 8007038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800703a:	bf00      	nop
 800703c:	e000ed08 	.word	0xe000ed08

08007040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007046:	4b46      	ldr	r3, [pc, #280]	; (8007160 <xPortStartScheduler+0x120>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a46      	ldr	r2, [pc, #280]	; (8007164 <xPortStartScheduler+0x124>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d10a      	bne.n	8007066 <xPortStartScheduler+0x26>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	613b      	str	r3, [r7, #16]
}
 8007062:	bf00      	nop
 8007064:	e7fe      	b.n	8007064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007066:	4b3e      	ldr	r3, [pc, #248]	; (8007160 <xPortStartScheduler+0x120>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a3f      	ldr	r2, [pc, #252]	; (8007168 <xPortStartScheduler+0x128>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d10a      	bne.n	8007086 <xPortStartScheduler+0x46>
	__asm volatile
 8007070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	60fb      	str	r3, [r7, #12]
}
 8007082:	bf00      	nop
 8007084:	e7fe      	b.n	8007084 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007086:	4b39      	ldr	r3, [pc, #228]	; (800716c <xPortStartScheduler+0x12c>)
 8007088:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	b2db      	uxtb	r3, r3
 8007090:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	22ff      	movs	r2, #255	; 0xff
 8007096:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	b2db      	uxtb	r3, r3
 800709e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070a0:	78fb      	ldrb	r3, [r7, #3]
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	4b31      	ldr	r3, [pc, #196]	; (8007170 <xPortStartScheduler+0x130>)
 80070ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070ae:	4b31      	ldr	r3, [pc, #196]	; (8007174 <xPortStartScheduler+0x134>)
 80070b0:	2207      	movs	r2, #7
 80070b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070b4:	e009      	b.n	80070ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80070b6:	4b2f      	ldr	r3, [pc, #188]	; (8007174 <xPortStartScheduler+0x134>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3b01      	subs	r3, #1
 80070bc:	4a2d      	ldr	r2, [pc, #180]	; (8007174 <xPortStartScheduler+0x134>)
 80070be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80070c0:	78fb      	ldrb	r3, [r7, #3]
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070ca:	78fb      	ldrb	r3, [r7, #3]
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d2:	2b80      	cmp	r3, #128	; 0x80
 80070d4:	d0ef      	beq.n	80070b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80070d6:	4b27      	ldr	r3, [pc, #156]	; (8007174 <xPortStartScheduler+0x134>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f1c3 0307 	rsb	r3, r3, #7
 80070de:	2b04      	cmp	r3, #4
 80070e0:	d00a      	beq.n	80070f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	60bb      	str	r3, [r7, #8]
}
 80070f4:	bf00      	nop
 80070f6:	e7fe      	b.n	80070f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80070f8:	4b1e      	ldr	r3, [pc, #120]	; (8007174 <xPortStartScheduler+0x134>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	021b      	lsls	r3, r3, #8
 80070fe:	4a1d      	ldr	r2, [pc, #116]	; (8007174 <xPortStartScheduler+0x134>)
 8007100:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007102:	4b1c      	ldr	r3, [pc, #112]	; (8007174 <xPortStartScheduler+0x134>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800710a:	4a1a      	ldr	r2, [pc, #104]	; (8007174 <xPortStartScheduler+0x134>)
 800710c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	b2da      	uxtb	r2, r3
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007116:	4b18      	ldr	r3, [pc, #96]	; (8007178 <xPortStartScheduler+0x138>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a17      	ldr	r2, [pc, #92]	; (8007178 <xPortStartScheduler+0x138>)
 800711c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007120:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007122:	4b15      	ldr	r3, [pc, #84]	; (8007178 <xPortStartScheduler+0x138>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a14      	ldr	r2, [pc, #80]	; (8007178 <xPortStartScheduler+0x138>)
 8007128:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800712c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800712e:	f000 f8dd 	bl	80072ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007132:	4b12      	ldr	r3, [pc, #72]	; (800717c <xPortStartScheduler+0x13c>)
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007138:	f000 f8fc 	bl	8007334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800713c:	4b10      	ldr	r3, [pc, #64]	; (8007180 <xPortStartScheduler+0x140>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a0f      	ldr	r2, [pc, #60]	; (8007180 <xPortStartScheduler+0x140>)
 8007142:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007146:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007148:	f7ff ff66 	bl	8007018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800714c:	f7ff f84a 	bl	80061e4 <vTaskSwitchContext>
	prvTaskExitError();
 8007150:	f7ff ff20 	bl	8006f94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	e000ed00 	.word	0xe000ed00
 8007164:	410fc271 	.word	0x410fc271
 8007168:	410fc270 	.word	0x410fc270
 800716c:	e000e400 	.word	0xe000e400
 8007170:	200013c4 	.word	0x200013c4
 8007174:	200013c8 	.word	0x200013c8
 8007178:	e000ed20 	.word	0xe000ed20
 800717c:	20000014 	.word	0x20000014
 8007180:	e000ef34 	.word	0xe000ef34

08007184 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
	__asm volatile
 800718a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	607b      	str	r3, [r7, #4]
}
 800719c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800719e:	4b0f      	ldr	r3, [pc, #60]	; (80071dc <vPortEnterCritical+0x58>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3301      	adds	r3, #1
 80071a4:	4a0d      	ldr	r2, [pc, #52]	; (80071dc <vPortEnterCritical+0x58>)
 80071a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071a8:	4b0c      	ldr	r3, [pc, #48]	; (80071dc <vPortEnterCritical+0x58>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d10f      	bne.n	80071d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80071b0:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <vPortEnterCritical+0x5c>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00a      	beq.n	80071d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80071ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	603b      	str	r3, [r7, #0]
}
 80071cc:	bf00      	nop
 80071ce:	e7fe      	b.n	80071ce <vPortEnterCritical+0x4a>
	}
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	20000014 	.word	0x20000014
 80071e0:	e000ed04 	.word	0xe000ed04

080071e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80071ea:	4b12      	ldr	r3, [pc, #72]	; (8007234 <vPortExitCritical+0x50>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10a      	bne.n	8007208 <vPortExitCritical+0x24>
	__asm volatile
 80071f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	607b      	str	r3, [r7, #4]
}
 8007204:	bf00      	nop
 8007206:	e7fe      	b.n	8007206 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007208:	4b0a      	ldr	r3, [pc, #40]	; (8007234 <vPortExitCritical+0x50>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	3b01      	subs	r3, #1
 800720e:	4a09      	ldr	r2, [pc, #36]	; (8007234 <vPortExitCritical+0x50>)
 8007210:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007212:	4b08      	ldr	r3, [pc, #32]	; (8007234 <vPortExitCritical+0x50>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d105      	bne.n	8007226 <vPortExitCritical+0x42>
 800721a:	2300      	movs	r3, #0
 800721c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	f383 8811 	msr	BASEPRI, r3
}
 8007224:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	20000014 	.word	0x20000014
	...

08007240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007240:	f3ef 8009 	mrs	r0, PSP
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	4b15      	ldr	r3, [pc, #84]	; (80072a0 <pxCurrentTCBConst>)
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	f01e 0f10 	tst.w	lr, #16
 8007250:	bf08      	it	eq
 8007252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725a:	6010      	str	r0, [r2, #0]
 800725c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007260:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007264:	f380 8811 	msr	BASEPRI, r0
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f7fe ffb8 	bl	80061e4 <vTaskSwitchContext>
 8007274:	f04f 0000 	mov.w	r0, #0
 8007278:	f380 8811 	msr	BASEPRI, r0
 800727c:	bc09      	pop	{r0, r3}
 800727e:	6819      	ldr	r1, [r3, #0]
 8007280:	6808      	ldr	r0, [r1, #0]
 8007282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007286:	f01e 0f10 	tst.w	lr, #16
 800728a:	bf08      	it	eq
 800728c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007290:	f380 8809 	msr	PSP, r0
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	f3af 8000 	nop.w

080072a0 <pxCurrentTCBConst>:
 80072a0:	20000d98 	.word	0x20000d98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072a4:	bf00      	nop
 80072a6:	bf00      	nop

080072a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	607b      	str	r3, [r7, #4]
}
 80072c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80072c2:	f7fe fed5 	bl	8006070 <xTaskIncrementTick>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80072cc:	4b06      	ldr	r3, [pc, #24]	; (80072e8 <xPortSysTickHandler+0x40>)
 80072ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	2300      	movs	r3, #0
 80072d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	f383 8811 	msr	BASEPRI, r3
}
 80072de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80072e0:	bf00      	nop
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	e000ed04 	.word	0xe000ed04

080072ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072f0:	4b0b      	ldr	r3, [pc, #44]	; (8007320 <vPortSetupTimerInterrupt+0x34>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072f6:	4b0b      	ldr	r3, [pc, #44]	; (8007324 <vPortSetupTimerInterrupt+0x38>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072fc:	4b0a      	ldr	r3, [pc, #40]	; (8007328 <vPortSetupTimerInterrupt+0x3c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a0a      	ldr	r2, [pc, #40]	; (800732c <vPortSetupTimerInterrupt+0x40>)
 8007302:	fba2 2303 	umull	r2, r3, r2, r3
 8007306:	099b      	lsrs	r3, r3, #6
 8007308:	4a09      	ldr	r2, [pc, #36]	; (8007330 <vPortSetupTimerInterrupt+0x44>)
 800730a:	3b01      	subs	r3, #1
 800730c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800730e:	4b04      	ldr	r3, [pc, #16]	; (8007320 <vPortSetupTimerInterrupt+0x34>)
 8007310:	2207      	movs	r2, #7
 8007312:	601a      	str	r2, [r3, #0]
}
 8007314:	bf00      	nop
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	e000e010 	.word	0xe000e010
 8007324:	e000e018 	.word	0xe000e018
 8007328:	20000008 	.word	0x20000008
 800732c:	10624dd3 	.word	0x10624dd3
 8007330:	e000e014 	.word	0xe000e014

08007334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007334:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007344 <vPortEnableVFP+0x10>
 8007338:	6801      	ldr	r1, [r0, #0]
 800733a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800733e:	6001      	str	r1, [r0, #0]
 8007340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007342:	bf00      	nop
 8007344:	e000ed88 	.word	0xe000ed88

08007348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800734e:	f3ef 8305 	mrs	r3, IPSR
 8007352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2b0f      	cmp	r3, #15
 8007358:	d914      	bls.n	8007384 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800735a:	4a17      	ldr	r2, [pc, #92]	; (80073b8 <vPortValidateInterruptPriority+0x70>)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4413      	add	r3, r2
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007364:	4b15      	ldr	r3, [pc, #84]	; (80073bc <vPortValidateInterruptPriority+0x74>)
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	7afa      	ldrb	r2, [r7, #11]
 800736a:	429a      	cmp	r2, r3
 800736c:	d20a      	bcs.n	8007384 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800736e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	607b      	str	r3, [r7, #4]
}
 8007380:	bf00      	nop
 8007382:	e7fe      	b.n	8007382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007384:	4b0e      	ldr	r3, [pc, #56]	; (80073c0 <vPortValidateInterruptPriority+0x78>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800738c:	4b0d      	ldr	r3, [pc, #52]	; (80073c4 <vPortValidateInterruptPriority+0x7c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	429a      	cmp	r2, r3
 8007392:	d90a      	bls.n	80073aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007398:	f383 8811 	msr	BASEPRI, r3
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	603b      	str	r3, [r7, #0]
}
 80073a6:	bf00      	nop
 80073a8:	e7fe      	b.n	80073a8 <vPortValidateInterruptPriority+0x60>
	}
 80073aa:	bf00      	nop
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	e000e3f0 	.word	0xe000e3f0
 80073bc:	200013c4 	.word	0x200013c4
 80073c0:	e000ed0c 	.word	0xe000ed0c
 80073c4:	200013c8 	.word	0x200013c8

080073c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b08a      	sub	sp, #40	; 0x28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80073d0:	2300      	movs	r3, #0
 80073d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80073d4:	f7fe fd90 	bl	8005ef8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073d8:	4b5b      	ldr	r3, [pc, #364]	; (8007548 <pvPortMalloc+0x180>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073e0:	f000 f920 	bl	8007624 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073e4:	4b59      	ldr	r3, [pc, #356]	; (800754c <pvPortMalloc+0x184>)
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4013      	ands	r3, r2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f040 8093 	bne.w	8007518 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d01d      	beq.n	8007434 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80073f8:	2208      	movs	r2, #8
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4413      	add	r3, r2
 80073fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f003 0307 	and.w	r3, r3, #7
 8007406:	2b00      	cmp	r3, #0
 8007408:	d014      	beq.n	8007434 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f023 0307 	bic.w	r3, r3, #7
 8007410:	3308      	adds	r3, #8
 8007412:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f003 0307 	and.w	r3, r3, #7
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00a      	beq.n	8007434 <pvPortMalloc+0x6c>
	__asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	617b      	str	r3, [r7, #20]
}
 8007430:	bf00      	nop
 8007432:	e7fe      	b.n	8007432 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d06e      	beq.n	8007518 <pvPortMalloc+0x150>
 800743a:	4b45      	ldr	r3, [pc, #276]	; (8007550 <pvPortMalloc+0x188>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	429a      	cmp	r2, r3
 8007442:	d869      	bhi.n	8007518 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007444:	4b43      	ldr	r3, [pc, #268]	; (8007554 <pvPortMalloc+0x18c>)
 8007446:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007448:	4b42      	ldr	r3, [pc, #264]	; (8007554 <pvPortMalloc+0x18c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800744e:	e004      	b.n	800745a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	429a      	cmp	r2, r3
 8007462:	d903      	bls.n	800746c <pvPortMalloc+0xa4>
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1f1      	bne.n	8007450 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800746c:	4b36      	ldr	r3, [pc, #216]	; (8007548 <pvPortMalloc+0x180>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007472:	429a      	cmp	r2, r3
 8007474:	d050      	beq.n	8007518 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2208      	movs	r2, #8
 800747c:	4413      	add	r3, r2
 800747e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	1ad2      	subs	r2, r2, r3
 8007490:	2308      	movs	r3, #8
 8007492:	005b      	lsls	r3, r3, #1
 8007494:	429a      	cmp	r2, r3
 8007496:	d91f      	bls.n	80074d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4413      	add	r3, r2
 800749e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	f003 0307 	and.w	r3, r3, #7
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00a      	beq.n	80074c0 <pvPortMalloc+0xf8>
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	613b      	str	r3, [r7, #16]
}
 80074bc:	bf00      	nop
 80074be:	e7fe      	b.n	80074be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	1ad2      	subs	r2, r2, r3
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074d2:	69b8      	ldr	r0, [r7, #24]
 80074d4:	f000 f908 	bl	80076e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074d8:	4b1d      	ldr	r3, [pc, #116]	; (8007550 <pvPortMalloc+0x188>)
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	4a1b      	ldr	r2, [pc, #108]	; (8007550 <pvPortMalloc+0x188>)
 80074e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074e6:	4b1a      	ldr	r3, [pc, #104]	; (8007550 <pvPortMalloc+0x188>)
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	4b1b      	ldr	r3, [pc, #108]	; (8007558 <pvPortMalloc+0x190>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d203      	bcs.n	80074fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074f2:	4b17      	ldr	r3, [pc, #92]	; (8007550 <pvPortMalloc+0x188>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a18      	ldr	r2, [pc, #96]	; (8007558 <pvPortMalloc+0x190>)
 80074f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	4b13      	ldr	r3, [pc, #76]	; (800754c <pvPortMalloc+0x184>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	431a      	orrs	r2, r3
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	2200      	movs	r2, #0
 800750c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800750e:	4b13      	ldr	r3, [pc, #76]	; (800755c <pvPortMalloc+0x194>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3301      	adds	r3, #1
 8007514:	4a11      	ldr	r2, [pc, #68]	; (800755c <pvPortMalloc+0x194>)
 8007516:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007518:	f7fe fcfc 	bl	8005f14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	f003 0307 	and.w	r3, r3, #7
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00a      	beq.n	800753c <pvPortMalloc+0x174>
	__asm volatile
 8007526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	60fb      	str	r3, [r7, #12]
}
 8007538:	bf00      	nop
 800753a:	e7fe      	b.n	800753a <pvPortMalloc+0x172>
	return pvReturn;
 800753c:	69fb      	ldr	r3, [r7, #28]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3728      	adds	r7, #40	; 0x28
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	20001fd4 	.word	0x20001fd4
 800754c:	20001fe8 	.word	0x20001fe8
 8007550:	20001fd8 	.word	0x20001fd8
 8007554:	20001fcc 	.word	0x20001fcc
 8007558:	20001fdc 	.word	0x20001fdc
 800755c:	20001fe0 	.word	0x20001fe0

08007560 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d04d      	beq.n	800760e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007572:	2308      	movs	r3, #8
 8007574:	425b      	negs	r3, r3
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	4413      	add	r3, r2
 800757a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	4b24      	ldr	r3, [pc, #144]	; (8007618 <vPortFree+0xb8>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4013      	ands	r3, r2
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10a      	bne.n	80075a4 <vPortFree+0x44>
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	60fb      	str	r3, [r7, #12]
}
 80075a0:	bf00      	nop
 80075a2:	e7fe      	b.n	80075a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00a      	beq.n	80075c2 <vPortFree+0x62>
	__asm volatile
 80075ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	60bb      	str	r3, [r7, #8]
}
 80075be:	bf00      	nop
 80075c0:	e7fe      	b.n	80075c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	4b14      	ldr	r3, [pc, #80]	; (8007618 <vPortFree+0xb8>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4013      	ands	r3, r2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d01e      	beq.n	800760e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d11a      	bne.n	800760e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	4b0e      	ldr	r3, [pc, #56]	; (8007618 <vPortFree+0xb8>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	43db      	mvns	r3, r3
 80075e2:	401a      	ands	r2, r3
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80075e8:	f7fe fc86 	bl	8005ef8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	4b0a      	ldr	r3, [pc, #40]	; (800761c <vPortFree+0xbc>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4413      	add	r3, r2
 80075f6:	4a09      	ldr	r2, [pc, #36]	; (800761c <vPortFree+0xbc>)
 80075f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075fa:	6938      	ldr	r0, [r7, #16]
 80075fc:	f000 f874 	bl	80076e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007600:	4b07      	ldr	r3, [pc, #28]	; (8007620 <vPortFree+0xc0>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3301      	adds	r3, #1
 8007606:	4a06      	ldr	r2, [pc, #24]	; (8007620 <vPortFree+0xc0>)
 8007608:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800760a:	f7fe fc83 	bl	8005f14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800760e:	bf00      	nop
 8007610:	3718      	adds	r7, #24
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	20001fe8 	.word	0x20001fe8
 800761c:	20001fd8 	.word	0x20001fd8
 8007620:	20001fe4 	.word	0x20001fe4

08007624 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800762a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800762e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007630:	4b27      	ldr	r3, [pc, #156]	; (80076d0 <prvHeapInit+0xac>)
 8007632:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f003 0307 	and.w	r3, r3, #7
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00c      	beq.n	8007658 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3307      	adds	r3, #7
 8007642:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f023 0307 	bic.w	r3, r3, #7
 800764a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	4a1f      	ldr	r2, [pc, #124]	; (80076d0 <prvHeapInit+0xac>)
 8007654:	4413      	add	r3, r2
 8007656:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800765c:	4a1d      	ldr	r2, [pc, #116]	; (80076d4 <prvHeapInit+0xb0>)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007662:	4b1c      	ldr	r3, [pc, #112]	; (80076d4 <prvHeapInit+0xb0>)
 8007664:	2200      	movs	r2, #0
 8007666:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	4413      	add	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007670:	2208      	movs	r2, #8
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	1a9b      	subs	r3, r3, r2
 8007676:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f023 0307 	bic.w	r3, r3, #7
 800767e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4a15      	ldr	r2, [pc, #84]	; (80076d8 <prvHeapInit+0xb4>)
 8007684:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007686:	4b14      	ldr	r3, [pc, #80]	; (80076d8 <prvHeapInit+0xb4>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2200      	movs	r2, #0
 800768c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800768e:	4b12      	ldr	r3, [pc, #72]	; (80076d8 <prvHeapInit+0xb4>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	1ad2      	subs	r2, r2, r3
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076a4:	4b0c      	ldr	r3, [pc, #48]	; (80076d8 <prvHeapInit+0xb4>)
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	4a0a      	ldr	r2, [pc, #40]	; (80076dc <prvHeapInit+0xb8>)
 80076b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	4a09      	ldr	r2, [pc, #36]	; (80076e0 <prvHeapInit+0xbc>)
 80076ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076bc:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <prvHeapInit+0xc0>)
 80076be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076c2:	601a      	str	r2, [r3, #0]
}
 80076c4:	bf00      	nop
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr
 80076d0:	200013cc 	.word	0x200013cc
 80076d4:	20001fcc 	.word	0x20001fcc
 80076d8:	20001fd4 	.word	0x20001fd4
 80076dc:	20001fdc 	.word	0x20001fdc
 80076e0:	20001fd8 	.word	0x20001fd8
 80076e4:	20001fe8 	.word	0x20001fe8

080076e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076f0:	4b28      	ldr	r3, [pc, #160]	; (8007794 <prvInsertBlockIntoFreeList+0xac>)
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	e002      	b.n	80076fc <prvInsertBlockIntoFreeList+0x14>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	429a      	cmp	r2, r3
 8007704:	d8f7      	bhi.n	80076f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	4413      	add	r3, r2
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	429a      	cmp	r2, r3
 8007716:	d108      	bne.n	800772a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	685a      	ldr	r2, [r3, #4]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	441a      	add	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	441a      	add	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	429a      	cmp	r2, r3
 800773c:	d118      	bne.n	8007770 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	4b15      	ldr	r3, [pc, #84]	; (8007798 <prvInsertBlockIntoFreeList+0xb0>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	429a      	cmp	r2, r3
 8007748:	d00d      	beq.n	8007766 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	441a      	add	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	e008      	b.n	8007778 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007766:	4b0c      	ldr	r3, [pc, #48]	; (8007798 <prvInsertBlockIntoFreeList+0xb0>)
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	e003      	b.n	8007778 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	429a      	cmp	r2, r3
 800777e:	d002      	beq.n	8007786 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007786:	bf00      	nop
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	20001fcc 	.word	0x20001fcc
 8007798:	20001fd4 	.word	0x20001fd4

0800779c <__errno>:
 800779c:	4b01      	ldr	r3, [pc, #4]	; (80077a4 <__errno+0x8>)
 800779e:	6818      	ldr	r0, [r3, #0]
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	20000018 	.word	0x20000018

080077a8 <std>:
 80077a8:	2300      	movs	r3, #0
 80077aa:	b510      	push	{r4, lr}
 80077ac:	4604      	mov	r4, r0
 80077ae:	e9c0 3300 	strd	r3, r3, [r0]
 80077b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077b6:	6083      	str	r3, [r0, #8]
 80077b8:	8181      	strh	r1, [r0, #12]
 80077ba:	6643      	str	r3, [r0, #100]	; 0x64
 80077bc:	81c2      	strh	r2, [r0, #14]
 80077be:	6183      	str	r3, [r0, #24]
 80077c0:	4619      	mov	r1, r3
 80077c2:	2208      	movs	r2, #8
 80077c4:	305c      	adds	r0, #92	; 0x5c
 80077c6:	f000 f91a 	bl	80079fe <memset>
 80077ca:	4b05      	ldr	r3, [pc, #20]	; (80077e0 <std+0x38>)
 80077cc:	6263      	str	r3, [r4, #36]	; 0x24
 80077ce:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <std+0x3c>)
 80077d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80077d2:	4b05      	ldr	r3, [pc, #20]	; (80077e8 <std+0x40>)
 80077d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077d6:	4b05      	ldr	r3, [pc, #20]	; (80077ec <std+0x44>)
 80077d8:	6224      	str	r4, [r4, #32]
 80077da:	6323      	str	r3, [r4, #48]	; 0x30
 80077dc:	bd10      	pop	{r4, pc}
 80077de:	bf00      	nop
 80077e0:	0800861d 	.word	0x0800861d
 80077e4:	0800863f 	.word	0x0800863f
 80077e8:	08008677 	.word	0x08008677
 80077ec:	0800869b 	.word	0x0800869b

080077f0 <_cleanup_r>:
 80077f0:	4901      	ldr	r1, [pc, #4]	; (80077f8 <_cleanup_r+0x8>)
 80077f2:	f000 b8af 	b.w	8007954 <_fwalk_reent>
 80077f6:	bf00      	nop
 80077f8:	08009669 	.word	0x08009669

080077fc <__sfmoreglue>:
 80077fc:	b570      	push	{r4, r5, r6, lr}
 80077fe:	2268      	movs	r2, #104	; 0x68
 8007800:	1e4d      	subs	r5, r1, #1
 8007802:	4355      	muls	r5, r2
 8007804:	460e      	mov	r6, r1
 8007806:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800780a:	f000 f921 	bl	8007a50 <_malloc_r>
 800780e:	4604      	mov	r4, r0
 8007810:	b140      	cbz	r0, 8007824 <__sfmoreglue+0x28>
 8007812:	2100      	movs	r1, #0
 8007814:	e9c0 1600 	strd	r1, r6, [r0]
 8007818:	300c      	adds	r0, #12
 800781a:	60a0      	str	r0, [r4, #8]
 800781c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007820:	f000 f8ed 	bl	80079fe <memset>
 8007824:	4620      	mov	r0, r4
 8007826:	bd70      	pop	{r4, r5, r6, pc}

08007828 <__sfp_lock_acquire>:
 8007828:	4801      	ldr	r0, [pc, #4]	; (8007830 <__sfp_lock_acquire+0x8>)
 800782a:	f000 b8d8 	b.w	80079de <__retarget_lock_acquire_recursive>
 800782e:	bf00      	nop
 8007830:	20001fed 	.word	0x20001fed

08007834 <__sfp_lock_release>:
 8007834:	4801      	ldr	r0, [pc, #4]	; (800783c <__sfp_lock_release+0x8>)
 8007836:	f000 b8d3 	b.w	80079e0 <__retarget_lock_release_recursive>
 800783a:	bf00      	nop
 800783c:	20001fed 	.word	0x20001fed

08007840 <__sinit_lock_acquire>:
 8007840:	4801      	ldr	r0, [pc, #4]	; (8007848 <__sinit_lock_acquire+0x8>)
 8007842:	f000 b8cc 	b.w	80079de <__retarget_lock_acquire_recursive>
 8007846:	bf00      	nop
 8007848:	20001fee 	.word	0x20001fee

0800784c <__sinit_lock_release>:
 800784c:	4801      	ldr	r0, [pc, #4]	; (8007854 <__sinit_lock_release+0x8>)
 800784e:	f000 b8c7 	b.w	80079e0 <__retarget_lock_release_recursive>
 8007852:	bf00      	nop
 8007854:	20001fee 	.word	0x20001fee

08007858 <__sinit>:
 8007858:	b510      	push	{r4, lr}
 800785a:	4604      	mov	r4, r0
 800785c:	f7ff fff0 	bl	8007840 <__sinit_lock_acquire>
 8007860:	69a3      	ldr	r3, [r4, #24]
 8007862:	b11b      	cbz	r3, 800786c <__sinit+0x14>
 8007864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007868:	f7ff bff0 	b.w	800784c <__sinit_lock_release>
 800786c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007870:	6523      	str	r3, [r4, #80]	; 0x50
 8007872:	4b13      	ldr	r3, [pc, #76]	; (80078c0 <__sinit+0x68>)
 8007874:	4a13      	ldr	r2, [pc, #76]	; (80078c4 <__sinit+0x6c>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	62a2      	str	r2, [r4, #40]	; 0x28
 800787a:	42a3      	cmp	r3, r4
 800787c:	bf04      	itt	eq
 800787e:	2301      	moveq	r3, #1
 8007880:	61a3      	streq	r3, [r4, #24]
 8007882:	4620      	mov	r0, r4
 8007884:	f000 f820 	bl	80078c8 <__sfp>
 8007888:	6060      	str	r0, [r4, #4]
 800788a:	4620      	mov	r0, r4
 800788c:	f000 f81c 	bl	80078c8 <__sfp>
 8007890:	60a0      	str	r0, [r4, #8]
 8007892:	4620      	mov	r0, r4
 8007894:	f000 f818 	bl	80078c8 <__sfp>
 8007898:	2200      	movs	r2, #0
 800789a:	60e0      	str	r0, [r4, #12]
 800789c:	2104      	movs	r1, #4
 800789e:	6860      	ldr	r0, [r4, #4]
 80078a0:	f7ff ff82 	bl	80077a8 <std>
 80078a4:	68a0      	ldr	r0, [r4, #8]
 80078a6:	2201      	movs	r2, #1
 80078a8:	2109      	movs	r1, #9
 80078aa:	f7ff ff7d 	bl	80077a8 <std>
 80078ae:	68e0      	ldr	r0, [r4, #12]
 80078b0:	2202      	movs	r2, #2
 80078b2:	2112      	movs	r1, #18
 80078b4:	f7ff ff78 	bl	80077a8 <std>
 80078b8:	2301      	movs	r3, #1
 80078ba:	61a3      	str	r3, [r4, #24]
 80078bc:	e7d2      	b.n	8007864 <__sinit+0xc>
 80078be:	bf00      	nop
 80078c0:	0800a664 	.word	0x0800a664
 80078c4:	080077f1 	.word	0x080077f1

080078c8 <__sfp>:
 80078c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ca:	4607      	mov	r7, r0
 80078cc:	f7ff ffac 	bl	8007828 <__sfp_lock_acquire>
 80078d0:	4b1e      	ldr	r3, [pc, #120]	; (800794c <__sfp+0x84>)
 80078d2:	681e      	ldr	r6, [r3, #0]
 80078d4:	69b3      	ldr	r3, [r6, #24]
 80078d6:	b913      	cbnz	r3, 80078de <__sfp+0x16>
 80078d8:	4630      	mov	r0, r6
 80078da:	f7ff ffbd 	bl	8007858 <__sinit>
 80078de:	3648      	adds	r6, #72	; 0x48
 80078e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80078e4:	3b01      	subs	r3, #1
 80078e6:	d503      	bpl.n	80078f0 <__sfp+0x28>
 80078e8:	6833      	ldr	r3, [r6, #0]
 80078ea:	b30b      	cbz	r3, 8007930 <__sfp+0x68>
 80078ec:	6836      	ldr	r6, [r6, #0]
 80078ee:	e7f7      	b.n	80078e0 <__sfp+0x18>
 80078f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80078f4:	b9d5      	cbnz	r5, 800792c <__sfp+0x64>
 80078f6:	4b16      	ldr	r3, [pc, #88]	; (8007950 <__sfp+0x88>)
 80078f8:	60e3      	str	r3, [r4, #12]
 80078fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078fe:	6665      	str	r5, [r4, #100]	; 0x64
 8007900:	f000 f86c 	bl	80079dc <__retarget_lock_init_recursive>
 8007904:	f7ff ff96 	bl	8007834 <__sfp_lock_release>
 8007908:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800790c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007910:	6025      	str	r5, [r4, #0]
 8007912:	61a5      	str	r5, [r4, #24]
 8007914:	2208      	movs	r2, #8
 8007916:	4629      	mov	r1, r5
 8007918:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800791c:	f000 f86f 	bl	80079fe <memset>
 8007920:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007924:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007928:	4620      	mov	r0, r4
 800792a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800792c:	3468      	adds	r4, #104	; 0x68
 800792e:	e7d9      	b.n	80078e4 <__sfp+0x1c>
 8007930:	2104      	movs	r1, #4
 8007932:	4638      	mov	r0, r7
 8007934:	f7ff ff62 	bl	80077fc <__sfmoreglue>
 8007938:	4604      	mov	r4, r0
 800793a:	6030      	str	r0, [r6, #0]
 800793c:	2800      	cmp	r0, #0
 800793e:	d1d5      	bne.n	80078ec <__sfp+0x24>
 8007940:	f7ff ff78 	bl	8007834 <__sfp_lock_release>
 8007944:	230c      	movs	r3, #12
 8007946:	603b      	str	r3, [r7, #0]
 8007948:	e7ee      	b.n	8007928 <__sfp+0x60>
 800794a:	bf00      	nop
 800794c:	0800a664 	.word	0x0800a664
 8007950:	ffff0001 	.word	0xffff0001

08007954 <_fwalk_reent>:
 8007954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007958:	4606      	mov	r6, r0
 800795a:	4688      	mov	r8, r1
 800795c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007960:	2700      	movs	r7, #0
 8007962:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007966:	f1b9 0901 	subs.w	r9, r9, #1
 800796a:	d505      	bpl.n	8007978 <_fwalk_reent+0x24>
 800796c:	6824      	ldr	r4, [r4, #0]
 800796e:	2c00      	cmp	r4, #0
 8007970:	d1f7      	bne.n	8007962 <_fwalk_reent+0xe>
 8007972:	4638      	mov	r0, r7
 8007974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007978:	89ab      	ldrh	r3, [r5, #12]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d907      	bls.n	800798e <_fwalk_reent+0x3a>
 800797e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007982:	3301      	adds	r3, #1
 8007984:	d003      	beq.n	800798e <_fwalk_reent+0x3a>
 8007986:	4629      	mov	r1, r5
 8007988:	4630      	mov	r0, r6
 800798a:	47c0      	blx	r8
 800798c:	4307      	orrs	r7, r0
 800798e:	3568      	adds	r5, #104	; 0x68
 8007990:	e7e9      	b.n	8007966 <_fwalk_reent+0x12>
	...

08007994 <__libc_init_array>:
 8007994:	b570      	push	{r4, r5, r6, lr}
 8007996:	4d0d      	ldr	r5, [pc, #52]	; (80079cc <__libc_init_array+0x38>)
 8007998:	4c0d      	ldr	r4, [pc, #52]	; (80079d0 <__libc_init_array+0x3c>)
 800799a:	1b64      	subs	r4, r4, r5
 800799c:	10a4      	asrs	r4, r4, #2
 800799e:	2600      	movs	r6, #0
 80079a0:	42a6      	cmp	r6, r4
 80079a2:	d109      	bne.n	80079b8 <__libc_init_array+0x24>
 80079a4:	4d0b      	ldr	r5, [pc, #44]	; (80079d4 <__libc_init_array+0x40>)
 80079a6:	4c0c      	ldr	r4, [pc, #48]	; (80079d8 <__libc_init_array+0x44>)
 80079a8:	f002 fd38 	bl	800a41c <_init>
 80079ac:	1b64      	subs	r4, r4, r5
 80079ae:	10a4      	asrs	r4, r4, #2
 80079b0:	2600      	movs	r6, #0
 80079b2:	42a6      	cmp	r6, r4
 80079b4:	d105      	bne.n	80079c2 <__libc_init_array+0x2e>
 80079b6:	bd70      	pop	{r4, r5, r6, pc}
 80079b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80079bc:	4798      	blx	r3
 80079be:	3601      	adds	r6, #1
 80079c0:	e7ee      	b.n	80079a0 <__libc_init_array+0xc>
 80079c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c6:	4798      	blx	r3
 80079c8:	3601      	adds	r6, #1
 80079ca:	e7f2      	b.n	80079b2 <__libc_init_array+0x1e>
 80079cc:	0800a9dc 	.word	0x0800a9dc
 80079d0:	0800a9dc 	.word	0x0800a9dc
 80079d4:	0800a9dc 	.word	0x0800a9dc
 80079d8:	0800a9e0 	.word	0x0800a9e0

080079dc <__retarget_lock_init_recursive>:
 80079dc:	4770      	bx	lr

080079de <__retarget_lock_acquire_recursive>:
 80079de:	4770      	bx	lr

080079e0 <__retarget_lock_release_recursive>:
 80079e0:	4770      	bx	lr

080079e2 <memcpy>:
 80079e2:	440a      	add	r2, r1
 80079e4:	4291      	cmp	r1, r2
 80079e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80079ea:	d100      	bne.n	80079ee <memcpy+0xc>
 80079ec:	4770      	bx	lr
 80079ee:	b510      	push	{r4, lr}
 80079f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079f8:	4291      	cmp	r1, r2
 80079fa:	d1f9      	bne.n	80079f0 <memcpy+0xe>
 80079fc:	bd10      	pop	{r4, pc}

080079fe <memset>:
 80079fe:	4402      	add	r2, r0
 8007a00:	4603      	mov	r3, r0
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d100      	bne.n	8007a08 <memset+0xa>
 8007a06:	4770      	bx	lr
 8007a08:	f803 1b01 	strb.w	r1, [r3], #1
 8007a0c:	e7f9      	b.n	8007a02 <memset+0x4>
	...

08007a10 <sbrk_aligned>:
 8007a10:	b570      	push	{r4, r5, r6, lr}
 8007a12:	4e0e      	ldr	r6, [pc, #56]	; (8007a4c <sbrk_aligned+0x3c>)
 8007a14:	460c      	mov	r4, r1
 8007a16:	6831      	ldr	r1, [r6, #0]
 8007a18:	4605      	mov	r5, r0
 8007a1a:	b911      	cbnz	r1, 8007a22 <sbrk_aligned+0x12>
 8007a1c:	f000 fdee 	bl	80085fc <_sbrk_r>
 8007a20:	6030      	str	r0, [r6, #0]
 8007a22:	4621      	mov	r1, r4
 8007a24:	4628      	mov	r0, r5
 8007a26:	f000 fde9 	bl	80085fc <_sbrk_r>
 8007a2a:	1c43      	adds	r3, r0, #1
 8007a2c:	d00a      	beq.n	8007a44 <sbrk_aligned+0x34>
 8007a2e:	1cc4      	adds	r4, r0, #3
 8007a30:	f024 0403 	bic.w	r4, r4, #3
 8007a34:	42a0      	cmp	r0, r4
 8007a36:	d007      	beq.n	8007a48 <sbrk_aligned+0x38>
 8007a38:	1a21      	subs	r1, r4, r0
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	f000 fdde 	bl	80085fc <_sbrk_r>
 8007a40:	3001      	adds	r0, #1
 8007a42:	d101      	bne.n	8007a48 <sbrk_aligned+0x38>
 8007a44:	f04f 34ff 	mov.w	r4, #4294967295
 8007a48:	4620      	mov	r0, r4
 8007a4a:	bd70      	pop	{r4, r5, r6, pc}
 8007a4c:	20001ff4 	.word	0x20001ff4

08007a50 <_malloc_r>:
 8007a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a54:	1ccd      	adds	r5, r1, #3
 8007a56:	f025 0503 	bic.w	r5, r5, #3
 8007a5a:	3508      	adds	r5, #8
 8007a5c:	2d0c      	cmp	r5, #12
 8007a5e:	bf38      	it	cc
 8007a60:	250c      	movcc	r5, #12
 8007a62:	2d00      	cmp	r5, #0
 8007a64:	4607      	mov	r7, r0
 8007a66:	db01      	blt.n	8007a6c <_malloc_r+0x1c>
 8007a68:	42a9      	cmp	r1, r5
 8007a6a:	d905      	bls.n	8007a78 <_malloc_r+0x28>
 8007a6c:	230c      	movs	r3, #12
 8007a6e:	603b      	str	r3, [r7, #0]
 8007a70:	2600      	movs	r6, #0
 8007a72:	4630      	mov	r0, r6
 8007a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a78:	4e2e      	ldr	r6, [pc, #184]	; (8007b34 <_malloc_r+0xe4>)
 8007a7a:	f001 feb5 	bl	80097e8 <__malloc_lock>
 8007a7e:	6833      	ldr	r3, [r6, #0]
 8007a80:	461c      	mov	r4, r3
 8007a82:	bb34      	cbnz	r4, 8007ad2 <_malloc_r+0x82>
 8007a84:	4629      	mov	r1, r5
 8007a86:	4638      	mov	r0, r7
 8007a88:	f7ff ffc2 	bl	8007a10 <sbrk_aligned>
 8007a8c:	1c43      	adds	r3, r0, #1
 8007a8e:	4604      	mov	r4, r0
 8007a90:	d14d      	bne.n	8007b2e <_malloc_r+0xde>
 8007a92:	6834      	ldr	r4, [r6, #0]
 8007a94:	4626      	mov	r6, r4
 8007a96:	2e00      	cmp	r6, #0
 8007a98:	d140      	bne.n	8007b1c <_malloc_r+0xcc>
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	4631      	mov	r1, r6
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	eb04 0803 	add.w	r8, r4, r3
 8007aa4:	f000 fdaa 	bl	80085fc <_sbrk_r>
 8007aa8:	4580      	cmp	r8, r0
 8007aaa:	d13a      	bne.n	8007b22 <_malloc_r+0xd2>
 8007aac:	6821      	ldr	r1, [r4, #0]
 8007aae:	3503      	adds	r5, #3
 8007ab0:	1a6d      	subs	r5, r5, r1
 8007ab2:	f025 0503 	bic.w	r5, r5, #3
 8007ab6:	3508      	adds	r5, #8
 8007ab8:	2d0c      	cmp	r5, #12
 8007aba:	bf38      	it	cc
 8007abc:	250c      	movcc	r5, #12
 8007abe:	4629      	mov	r1, r5
 8007ac0:	4638      	mov	r0, r7
 8007ac2:	f7ff ffa5 	bl	8007a10 <sbrk_aligned>
 8007ac6:	3001      	adds	r0, #1
 8007ac8:	d02b      	beq.n	8007b22 <_malloc_r+0xd2>
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	442b      	add	r3, r5
 8007ace:	6023      	str	r3, [r4, #0]
 8007ad0:	e00e      	b.n	8007af0 <_malloc_r+0xa0>
 8007ad2:	6822      	ldr	r2, [r4, #0]
 8007ad4:	1b52      	subs	r2, r2, r5
 8007ad6:	d41e      	bmi.n	8007b16 <_malloc_r+0xc6>
 8007ad8:	2a0b      	cmp	r2, #11
 8007ada:	d916      	bls.n	8007b0a <_malloc_r+0xba>
 8007adc:	1961      	adds	r1, r4, r5
 8007ade:	42a3      	cmp	r3, r4
 8007ae0:	6025      	str	r5, [r4, #0]
 8007ae2:	bf18      	it	ne
 8007ae4:	6059      	strne	r1, [r3, #4]
 8007ae6:	6863      	ldr	r3, [r4, #4]
 8007ae8:	bf08      	it	eq
 8007aea:	6031      	streq	r1, [r6, #0]
 8007aec:	5162      	str	r2, [r4, r5]
 8007aee:	604b      	str	r3, [r1, #4]
 8007af0:	4638      	mov	r0, r7
 8007af2:	f104 060b 	add.w	r6, r4, #11
 8007af6:	f001 fe7d 	bl	80097f4 <__malloc_unlock>
 8007afa:	f026 0607 	bic.w	r6, r6, #7
 8007afe:	1d23      	adds	r3, r4, #4
 8007b00:	1af2      	subs	r2, r6, r3
 8007b02:	d0b6      	beq.n	8007a72 <_malloc_r+0x22>
 8007b04:	1b9b      	subs	r3, r3, r6
 8007b06:	50a3      	str	r3, [r4, r2]
 8007b08:	e7b3      	b.n	8007a72 <_malloc_r+0x22>
 8007b0a:	6862      	ldr	r2, [r4, #4]
 8007b0c:	42a3      	cmp	r3, r4
 8007b0e:	bf0c      	ite	eq
 8007b10:	6032      	streq	r2, [r6, #0]
 8007b12:	605a      	strne	r2, [r3, #4]
 8007b14:	e7ec      	b.n	8007af0 <_malloc_r+0xa0>
 8007b16:	4623      	mov	r3, r4
 8007b18:	6864      	ldr	r4, [r4, #4]
 8007b1a:	e7b2      	b.n	8007a82 <_malloc_r+0x32>
 8007b1c:	4634      	mov	r4, r6
 8007b1e:	6876      	ldr	r6, [r6, #4]
 8007b20:	e7b9      	b.n	8007a96 <_malloc_r+0x46>
 8007b22:	230c      	movs	r3, #12
 8007b24:	603b      	str	r3, [r7, #0]
 8007b26:	4638      	mov	r0, r7
 8007b28:	f001 fe64 	bl	80097f4 <__malloc_unlock>
 8007b2c:	e7a1      	b.n	8007a72 <_malloc_r+0x22>
 8007b2e:	6025      	str	r5, [r4, #0]
 8007b30:	e7de      	b.n	8007af0 <_malloc_r+0xa0>
 8007b32:	bf00      	nop
 8007b34:	20001ff0 	.word	0x20001ff0

08007b38 <__cvt>:
 8007b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b3c:	ec55 4b10 	vmov	r4, r5, d0
 8007b40:	2d00      	cmp	r5, #0
 8007b42:	460e      	mov	r6, r1
 8007b44:	4619      	mov	r1, r3
 8007b46:	462b      	mov	r3, r5
 8007b48:	bfbb      	ittet	lt
 8007b4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007b4e:	461d      	movlt	r5, r3
 8007b50:	2300      	movge	r3, #0
 8007b52:	232d      	movlt	r3, #45	; 0x2d
 8007b54:	700b      	strb	r3, [r1, #0]
 8007b56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b5c:	4691      	mov	r9, r2
 8007b5e:	f023 0820 	bic.w	r8, r3, #32
 8007b62:	bfbc      	itt	lt
 8007b64:	4622      	movlt	r2, r4
 8007b66:	4614      	movlt	r4, r2
 8007b68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b6c:	d005      	beq.n	8007b7a <__cvt+0x42>
 8007b6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b72:	d100      	bne.n	8007b76 <__cvt+0x3e>
 8007b74:	3601      	adds	r6, #1
 8007b76:	2102      	movs	r1, #2
 8007b78:	e000      	b.n	8007b7c <__cvt+0x44>
 8007b7a:	2103      	movs	r1, #3
 8007b7c:	ab03      	add	r3, sp, #12
 8007b7e:	9301      	str	r3, [sp, #4]
 8007b80:	ab02      	add	r3, sp, #8
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	ec45 4b10 	vmov	d0, r4, r5
 8007b88:	4653      	mov	r3, sl
 8007b8a:	4632      	mov	r2, r6
 8007b8c:	f000 fef8 	bl	8008980 <_dtoa_r>
 8007b90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b94:	4607      	mov	r7, r0
 8007b96:	d102      	bne.n	8007b9e <__cvt+0x66>
 8007b98:	f019 0f01 	tst.w	r9, #1
 8007b9c:	d022      	beq.n	8007be4 <__cvt+0xac>
 8007b9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ba2:	eb07 0906 	add.w	r9, r7, r6
 8007ba6:	d110      	bne.n	8007bca <__cvt+0x92>
 8007ba8:	783b      	ldrb	r3, [r7, #0]
 8007baa:	2b30      	cmp	r3, #48	; 0x30
 8007bac:	d10a      	bne.n	8007bc4 <__cvt+0x8c>
 8007bae:	2200      	movs	r2, #0
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	4629      	mov	r1, r5
 8007bb6:	f7f8 ff5f 	bl	8000a78 <__aeabi_dcmpeq>
 8007bba:	b918      	cbnz	r0, 8007bc4 <__cvt+0x8c>
 8007bbc:	f1c6 0601 	rsb	r6, r6, #1
 8007bc0:	f8ca 6000 	str.w	r6, [sl]
 8007bc4:	f8da 3000 	ldr.w	r3, [sl]
 8007bc8:	4499      	add	r9, r3
 8007bca:	2200      	movs	r2, #0
 8007bcc:	2300      	movs	r3, #0
 8007bce:	4620      	mov	r0, r4
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	f7f8 ff51 	bl	8000a78 <__aeabi_dcmpeq>
 8007bd6:	b108      	cbz	r0, 8007bdc <__cvt+0xa4>
 8007bd8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007bdc:	2230      	movs	r2, #48	; 0x30
 8007bde:	9b03      	ldr	r3, [sp, #12]
 8007be0:	454b      	cmp	r3, r9
 8007be2:	d307      	bcc.n	8007bf4 <__cvt+0xbc>
 8007be4:	9b03      	ldr	r3, [sp, #12]
 8007be6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007be8:	1bdb      	subs	r3, r3, r7
 8007bea:	4638      	mov	r0, r7
 8007bec:	6013      	str	r3, [r2, #0]
 8007bee:	b004      	add	sp, #16
 8007bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bf4:	1c59      	adds	r1, r3, #1
 8007bf6:	9103      	str	r1, [sp, #12]
 8007bf8:	701a      	strb	r2, [r3, #0]
 8007bfa:	e7f0      	b.n	8007bde <__cvt+0xa6>

08007bfc <__exponent>:
 8007bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2900      	cmp	r1, #0
 8007c02:	bfb8      	it	lt
 8007c04:	4249      	neglt	r1, r1
 8007c06:	f803 2b02 	strb.w	r2, [r3], #2
 8007c0a:	bfb4      	ite	lt
 8007c0c:	222d      	movlt	r2, #45	; 0x2d
 8007c0e:	222b      	movge	r2, #43	; 0x2b
 8007c10:	2909      	cmp	r1, #9
 8007c12:	7042      	strb	r2, [r0, #1]
 8007c14:	dd2a      	ble.n	8007c6c <__exponent+0x70>
 8007c16:	f10d 0407 	add.w	r4, sp, #7
 8007c1a:	46a4      	mov	ip, r4
 8007c1c:	270a      	movs	r7, #10
 8007c1e:	46a6      	mov	lr, r4
 8007c20:	460a      	mov	r2, r1
 8007c22:	fb91 f6f7 	sdiv	r6, r1, r7
 8007c26:	fb07 1516 	mls	r5, r7, r6, r1
 8007c2a:	3530      	adds	r5, #48	; 0x30
 8007c2c:	2a63      	cmp	r2, #99	; 0x63
 8007c2e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007c32:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007c36:	4631      	mov	r1, r6
 8007c38:	dcf1      	bgt.n	8007c1e <__exponent+0x22>
 8007c3a:	3130      	adds	r1, #48	; 0x30
 8007c3c:	f1ae 0502 	sub.w	r5, lr, #2
 8007c40:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007c44:	1c44      	adds	r4, r0, #1
 8007c46:	4629      	mov	r1, r5
 8007c48:	4561      	cmp	r1, ip
 8007c4a:	d30a      	bcc.n	8007c62 <__exponent+0x66>
 8007c4c:	f10d 0209 	add.w	r2, sp, #9
 8007c50:	eba2 020e 	sub.w	r2, r2, lr
 8007c54:	4565      	cmp	r5, ip
 8007c56:	bf88      	it	hi
 8007c58:	2200      	movhi	r2, #0
 8007c5a:	4413      	add	r3, r2
 8007c5c:	1a18      	subs	r0, r3, r0
 8007c5e:	b003      	add	sp, #12
 8007c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c66:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c6a:	e7ed      	b.n	8007c48 <__exponent+0x4c>
 8007c6c:	2330      	movs	r3, #48	; 0x30
 8007c6e:	3130      	adds	r1, #48	; 0x30
 8007c70:	7083      	strb	r3, [r0, #2]
 8007c72:	70c1      	strb	r1, [r0, #3]
 8007c74:	1d03      	adds	r3, r0, #4
 8007c76:	e7f1      	b.n	8007c5c <__exponent+0x60>

08007c78 <_printf_float>:
 8007c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c7c:	ed2d 8b02 	vpush	{d8}
 8007c80:	b08d      	sub	sp, #52	; 0x34
 8007c82:	460c      	mov	r4, r1
 8007c84:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c88:	4616      	mov	r6, r2
 8007c8a:	461f      	mov	r7, r3
 8007c8c:	4605      	mov	r5, r0
 8007c8e:	f001 fd27 	bl	80096e0 <_localeconv_r>
 8007c92:	f8d0 a000 	ldr.w	sl, [r0]
 8007c96:	4650      	mov	r0, sl
 8007c98:	f7f8 fa72 	bl	8000180 <strlen>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	930a      	str	r3, [sp, #40]	; 0x28
 8007ca0:	6823      	ldr	r3, [r4, #0]
 8007ca2:	9305      	str	r3, [sp, #20]
 8007ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ca8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007cac:	3307      	adds	r3, #7
 8007cae:	f023 0307 	bic.w	r3, r3, #7
 8007cb2:	f103 0208 	add.w	r2, r3, #8
 8007cb6:	f8c8 2000 	str.w	r2, [r8]
 8007cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007cc2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007cc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007cca:	9307      	str	r3, [sp, #28]
 8007ccc:	f8cd 8018 	str.w	r8, [sp, #24]
 8007cd0:	ee08 0a10 	vmov	s16, r0
 8007cd4:	4b9f      	ldr	r3, [pc, #636]	; (8007f54 <_printf_float+0x2dc>)
 8007cd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cda:	f04f 32ff 	mov.w	r2, #4294967295
 8007cde:	f7f8 fefd 	bl	8000adc <__aeabi_dcmpun>
 8007ce2:	bb88      	cbnz	r0, 8007d48 <_printf_float+0xd0>
 8007ce4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ce8:	4b9a      	ldr	r3, [pc, #616]	; (8007f54 <_printf_float+0x2dc>)
 8007cea:	f04f 32ff 	mov.w	r2, #4294967295
 8007cee:	f7f8 fed7 	bl	8000aa0 <__aeabi_dcmple>
 8007cf2:	bb48      	cbnz	r0, 8007d48 <_printf_float+0xd0>
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	4640      	mov	r0, r8
 8007cfa:	4649      	mov	r1, r9
 8007cfc:	f7f8 fec6 	bl	8000a8c <__aeabi_dcmplt>
 8007d00:	b110      	cbz	r0, 8007d08 <_printf_float+0x90>
 8007d02:	232d      	movs	r3, #45	; 0x2d
 8007d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d08:	4b93      	ldr	r3, [pc, #588]	; (8007f58 <_printf_float+0x2e0>)
 8007d0a:	4894      	ldr	r0, [pc, #592]	; (8007f5c <_printf_float+0x2e4>)
 8007d0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007d10:	bf94      	ite	ls
 8007d12:	4698      	movls	r8, r3
 8007d14:	4680      	movhi	r8, r0
 8007d16:	2303      	movs	r3, #3
 8007d18:	6123      	str	r3, [r4, #16]
 8007d1a:	9b05      	ldr	r3, [sp, #20]
 8007d1c:	f023 0204 	bic.w	r2, r3, #4
 8007d20:	6022      	str	r2, [r4, #0]
 8007d22:	f04f 0900 	mov.w	r9, #0
 8007d26:	9700      	str	r7, [sp, #0]
 8007d28:	4633      	mov	r3, r6
 8007d2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007d2c:	4621      	mov	r1, r4
 8007d2e:	4628      	mov	r0, r5
 8007d30:	f000 f9d8 	bl	80080e4 <_printf_common>
 8007d34:	3001      	adds	r0, #1
 8007d36:	f040 8090 	bne.w	8007e5a <_printf_float+0x1e2>
 8007d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3e:	b00d      	add	sp, #52	; 0x34
 8007d40:	ecbd 8b02 	vpop	{d8}
 8007d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d48:	4642      	mov	r2, r8
 8007d4a:	464b      	mov	r3, r9
 8007d4c:	4640      	mov	r0, r8
 8007d4e:	4649      	mov	r1, r9
 8007d50:	f7f8 fec4 	bl	8000adc <__aeabi_dcmpun>
 8007d54:	b140      	cbz	r0, 8007d68 <_printf_float+0xf0>
 8007d56:	464b      	mov	r3, r9
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	bfbc      	itt	lt
 8007d5c:	232d      	movlt	r3, #45	; 0x2d
 8007d5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d62:	487f      	ldr	r0, [pc, #508]	; (8007f60 <_printf_float+0x2e8>)
 8007d64:	4b7f      	ldr	r3, [pc, #508]	; (8007f64 <_printf_float+0x2ec>)
 8007d66:	e7d1      	b.n	8007d0c <_printf_float+0x94>
 8007d68:	6863      	ldr	r3, [r4, #4]
 8007d6a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d6e:	9206      	str	r2, [sp, #24]
 8007d70:	1c5a      	adds	r2, r3, #1
 8007d72:	d13f      	bne.n	8007df4 <_printf_float+0x17c>
 8007d74:	2306      	movs	r3, #6
 8007d76:	6063      	str	r3, [r4, #4]
 8007d78:	9b05      	ldr	r3, [sp, #20]
 8007d7a:	6861      	ldr	r1, [r4, #4]
 8007d7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d80:	2300      	movs	r3, #0
 8007d82:	9303      	str	r3, [sp, #12]
 8007d84:	ab0a      	add	r3, sp, #40	; 0x28
 8007d86:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d8a:	ab09      	add	r3, sp, #36	; 0x24
 8007d8c:	ec49 8b10 	vmov	d0, r8, r9
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	6022      	str	r2, [r4, #0]
 8007d94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d98:	4628      	mov	r0, r5
 8007d9a:	f7ff fecd 	bl	8007b38 <__cvt>
 8007d9e:	9b06      	ldr	r3, [sp, #24]
 8007da0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007da2:	2b47      	cmp	r3, #71	; 0x47
 8007da4:	4680      	mov	r8, r0
 8007da6:	d108      	bne.n	8007dba <_printf_float+0x142>
 8007da8:	1cc8      	adds	r0, r1, #3
 8007daa:	db02      	blt.n	8007db2 <_printf_float+0x13a>
 8007dac:	6863      	ldr	r3, [r4, #4]
 8007dae:	4299      	cmp	r1, r3
 8007db0:	dd41      	ble.n	8007e36 <_printf_float+0x1be>
 8007db2:	f1ab 0b02 	sub.w	fp, fp, #2
 8007db6:	fa5f fb8b 	uxtb.w	fp, fp
 8007dba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007dbe:	d820      	bhi.n	8007e02 <_printf_float+0x18a>
 8007dc0:	3901      	subs	r1, #1
 8007dc2:	465a      	mov	r2, fp
 8007dc4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007dc8:	9109      	str	r1, [sp, #36]	; 0x24
 8007dca:	f7ff ff17 	bl	8007bfc <__exponent>
 8007dce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dd0:	1813      	adds	r3, r2, r0
 8007dd2:	2a01      	cmp	r2, #1
 8007dd4:	4681      	mov	r9, r0
 8007dd6:	6123      	str	r3, [r4, #16]
 8007dd8:	dc02      	bgt.n	8007de0 <_printf_float+0x168>
 8007dda:	6822      	ldr	r2, [r4, #0]
 8007ddc:	07d2      	lsls	r2, r2, #31
 8007dde:	d501      	bpl.n	8007de4 <_printf_float+0x16c>
 8007de0:	3301      	adds	r3, #1
 8007de2:	6123      	str	r3, [r4, #16]
 8007de4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d09c      	beq.n	8007d26 <_printf_float+0xae>
 8007dec:	232d      	movs	r3, #45	; 0x2d
 8007dee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007df2:	e798      	b.n	8007d26 <_printf_float+0xae>
 8007df4:	9a06      	ldr	r2, [sp, #24]
 8007df6:	2a47      	cmp	r2, #71	; 0x47
 8007df8:	d1be      	bne.n	8007d78 <_printf_float+0x100>
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1bc      	bne.n	8007d78 <_printf_float+0x100>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e7b9      	b.n	8007d76 <_printf_float+0xfe>
 8007e02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007e06:	d118      	bne.n	8007e3a <_printf_float+0x1c2>
 8007e08:	2900      	cmp	r1, #0
 8007e0a:	6863      	ldr	r3, [r4, #4]
 8007e0c:	dd0b      	ble.n	8007e26 <_printf_float+0x1ae>
 8007e0e:	6121      	str	r1, [r4, #16]
 8007e10:	b913      	cbnz	r3, 8007e18 <_printf_float+0x1a0>
 8007e12:	6822      	ldr	r2, [r4, #0]
 8007e14:	07d0      	lsls	r0, r2, #31
 8007e16:	d502      	bpl.n	8007e1e <_printf_float+0x1a6>
 8007e18:	3301      	adds	r3, #1
 8007e1a:	440b      	add	r3, r1
 8007e1c:	6123      	str	r3, [r4, #16]
 8007e1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e20:	f04f 0900 	mov.w	r9, #0
 8007e24:	e7de      	b.n	8007de4 <_printf_float+0x16c>
 8007e26:	b913      	cbnz	r3, 8007e2e <_printf_float+0x1b6>
 8007e28:	6822      	ldr	r2, [r4, #0]
 8007e2a:	07d2      	lsls	r2, r2, #31
 8007e2c:	d501      	bpl.n	8007e32 <_printf_float+0x1ba>
 8007e2e:	3302      	adds	r3, #2
 8007e30:	e7f4      	b.n	8007e1c <_printf_float+0x1a4>
 8007e32:	2301      	movs	r3, #1
 8007e34:	e7f2      	b.n	8007e1c <_printf_float+0x1a4>
 8007e36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e3c:	4299      	cmp	r1, r3
 8007e3e:	db05      	blt.n	8007e4c <_printf_float+0x1d4>
 8007e40:	6823      	ldr	r3, [r4, #0]
 8007e42:	6121      	str	r1, [r4, #16]
 8007e44:	07d8      	lsls	r0, r3, #31
 8007e46:	d5ea      	bpl.n	8007e1e <_printf_float+0x1a6>
 8007e48:	1c4b      	adds	r3, r1, #1
 8007e4a:	e7e7      	b.n	8007e1c <_printf_float+0x1a4>
 8007e4c:	2900      	cmp	r1, #0
 8007e4e:	bfd4      	ite	le
 8007e50:	f1c1 0202 	rsble	r2, r1, #2
 8007e54:	2201      	movgt	r2, #1
 8007e56:	4413      	add	r3, r2
 8007e58:	e7e0      	b.n	8007e1c <_printf_float+0x1a4>
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	055a      	lsls	r2, r3, #21
 8007e5e:	d407      	bmi.n	8007e70 <_printf_float+0x1f8>
 8007e60:	6923      	ldr	r3, [r4, #16]
 8007e62:	4642      	mov	r2, r8
 8007e64:	4631      	mov	r1, r6
 8007e66:	4628      	mov	r0, r5
 8007e68:	47b8      	blx	r7
 8007e6a:	3001      	adds	r0, #1
 8007e6c:	d12c      	bne.n	8007ec8 <_printf_float+0x250>
 8007e6e:	e764      	b.n	8007d3a <_printf_float+0xc2>
 8007e70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e74:	f240 80e0 	bls.w	8008038 <_printf_float+0x3c0>
 8007e78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2300      	movs	r3, #0
 8007e80:	f7f8 fdfa 	bl	8000a78 <__aeabi_dcmpeq>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	d034      	beq.n	8007ef2 <_printf_float+0x27a>
 8007e88:	4a37      	ldr	r2, [pc, #220]	; (8007f68 <_printf_float+0x2f0>)
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	4631      	mov	r1, r6
 8007e8e:	4628      	mov	r0, r5
 8007e90:	47b8      	blx	r7
 8007e92:	3001      	adds	r0, #1
 8007e94:	f43f af51 	beq.w	8007d3a <_printf_float+0xc2>
 8007e98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	db02      	blt.n	8007ea6 <_printf_float+0x22e>
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	07d8      	lsls	r0, r3, #31
 8007ea4:	d510      	bpl.n	8007ec8 <_printf_float+0x250>
 8007ea6:	ee18 3a10 	vmov	r3, s16
 8007eaa:	4652      	mov	r2, sl
 8007eac:	4631      	mov	r1, r6
 8007eae:	4628      	mov	r0, r5
 8007eb0:	47b8      	blx	r7
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	f43f af41 	beq.w	8007d3a <_printf_float+0xc2>
 8007eb8:	f04f 0800 	mov.w	r8, #0
 8007ebc:	f104 091a 	add.w	r9, r4, #26
 8007ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	4543      	cmp	r3, r8
 8007ec6:	dc09      	bgt.n	8007edc <_printf_float+0x264>
 8007ec8:	6823      	ldr	r3, [r4, #0]
 8007eca:	079b      	lsls	r3, r3, #30
 8007ecc:	f100 8105 	bmi.w	80080da <_printf_float+0x462>
 8007ed0:	68e0      	ldr	r0, [r4, #12]
 8007ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ed4:	4298      	cmp	r0, r3
 8007ed6:	bfb8      	it	lt
 8007ed8:	4618      	movlt	r0, r3
 8007eda:	e730      	b.n	8007d3e <_printf_float+0xc6>
 8007edc:	2301      	movs	r3, #1
 8007ede:	464a      	mov	r2, r9
 8007ee0:	4631      	mov	r1, r6
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	47b8      	blx	r7
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	f43f af27 	beq.w	8007d3a <_printf_float+0xc2>
 8007eec:	f108 0801 	add.w	r8, r8, #1
 8007ef0:	e7e6      	b.n	8007ec0 <_printf_float+0x248>
 8007ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	dc39      	bgt.n	8007f6c <_printf_float+0x2f4>
 8007ef8:	4a1b      	ldr	r2, [pc, #108]	; (8007f68 <_printf_float+0x2f0>)
 8007efa:	2301      	movs	r3, #1
 8007efc:	4631      	mov	r1, r6
 8007efe:	4628      	mov	r0, r5
 8007f00:	47b8      	blx	r7
 8007f02:	3001      	adds	r0, #1
 8007f04:	f43f af19 	beq.w	8007d3a <_printf_float+0xc2>
 8007f08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	d102      	bne.n	8007f16 <_printf_float+0x29e>
 8007f10:	6823      	ldr	r3, [r4, #0]
 8007f12:	07d9      	lsls	r1, r3, #31
 8007f14:	d5d8      	bpl.n	8007ec8 <_printf_float+0x250>
 8007f16:	ee18 3a10 	vmov	r3, s16
 8007f1a:	4652      	mov	r2, sl
 8007f1c:	4631      	mov	r1, r6
 8007f1e:	4628      	mov	r0, r5
 8007f20:	47b8      	blx	r7
 8007f22:	3001      	adds	r0, #1
 8007f24:	f43f af09 	beq.w	8007d3a <_printf_float+0xc2>
 8007f28:	f04f 0900 	mov.w	r9, #0
 8007f2c:	f104 0a1a 	add.w	sl, r4, #26
 8007f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f32:	425b      	negs	r3, r3
 8007f34:	454b      	cmp	r3, r9
 8007f36:	dc01      	bgt.n	8007f3c <_printf_float+0x2c4>
 8007f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f3a:	e792      	b.n	8007e62 <_printf_float+0x1ea>
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	4652      	mov	r2, sl
 8007f40:	4631      	mov	r1, r6
 8007f42:	4628      	mov	r0, r5
 8007f44:	47b8      	blx	r7
 8007f46:	3001      	adds	r0, #1
 8007f48:	f43f aef7 	beq.w	8007d3a <_printf_float+0xc2>
 8007f4c:	f109 0901 	add.w	r9, r9, #1
 8007f50:	e7ee      	b.n	8007f30 <_printf_float+0x2b8>
 8007f52:	bf00      	nop
 8007f54:	7fefffff 	.word	0x7fefffff
 8007f58:	0800a668 	.word	0x0800a668
 8007f5c:	0800a66c 	.word	0x0800a66c
 8007f60:	0800a674 	.word	0x0800a674
 8007f64:	0800a670 	.word	0x0800a670
 8007f68:	0800a678 	.word	0x0800a678
 8007f6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f70:	429a      	cmp	r2, r3
 8007f72:	bfa8      	it	ge
 8007f74:	461a      	movge	r2, r3
 8007f76:	2a00      	cmp	r2, #0
 8007f78:	4691      	mov	r9, r2
 8007f7a:	dc37      	bgt.n	8007fec <_printf_float+0x374>
 8007f7c:	f04f 0b00 	mov.w	fp, #0
 8007f80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f84:	f104 021a 	add.w	r2, r4, #26
 8007f88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f8a:	9305      	str	r3, [sp, #20]
 8007f8c:	eba3 0309 	sub.w	r3, r3, r9
 8007f90:	455b      	cmp	r3, fp
 8007f92:	dc33      	bgt.n	8007ffc <_printf_float+0x384>
 8007f94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	db3b      	blt.n	8008014 <_printf_float+0x39c>
 8007f9c:	6823      	ldr	r3, [r4, #0]
 8007f9e:	07da      	lsls	r2, r3, #31
 8007fa0:	d438      	bmi.n	8008014 <_printf_float+0x39c>
 8007fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fa4:	9a05      	ldr	r2, [sp, #20]
 8007fa6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fa8:	1a9a      	subs	r2, r3, r2
 8007faa:	eba3 0901 	sub.w	r9, r3, r1
 8007fae:	4591      	cmp	r9, r2
 8007fb0:	bfa8      	it	ge
 8007fb2:	4691      	movge	r9, r2
 8007fb4:	f1b9 0f00 	cmp.w	r9, #0
 8007fb8:	dc35      	bgt.n	8008026 <_printf_float+0x3ae>
 8007fba:	f04f 0800 	mov.w	r8, #0
 8007fbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fc2:	f104 0a1a 	add.w	sl, r4, #26
 8007fc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fca:	1a9b      	subs	r3, r3, r2
 8007fcc:	eba3 0309 	sub.w	r3, r3, r9
 8007fd0:	4543      	cmp	r3, r8
 8007fd2:	f77f af79 	ble.w	8007ec8 <_printf_float+0x250>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	4652      	mov	r2, sl
 8007fda:	4631      	mov	r1, r6
 8007fdc:	4628      	mov	r0, r5
 8007fde:	47b8      	blx	r7
 8007fe0:	3001      	adds	r0, #1
 8007fe2:	f43f aeaa 	beq.w	8007d3a <_printf_float+0xc2>
 8007fe6:	f108 0801 	add.w	r8, r8, #1
 8007fea:	e7ec      	b.n	8007fc6 <_printf_float+0x34e>
 8007fec:	4613      	mov	r3, r2
 8007fee:	4631      	mov	r1, r6
 8007ff0:	4642      	mov	r2, r8
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	47b8      	blx	r7
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	d1c0      	bne.n	8007f7c <_printf_float+0x304>
 8007ffa:	e69e      	b.n	8007d3a <_printf_float+0xc2>
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	4631      	mov	r1, r6
 8008000:	4628      	mov	r0, r5
 8008002:	9205      	str	r2, [sp, #20]
 8008004:	47b8      	blx	r7
 8008006:	3001      	adds	r0, #1
 8008008:	f43f ae97 	beq.w	8007d3a <_printf_float+0xc2>
 800800c:	9a05      	ldr	r2, [sp, #20]
 800800e:	f10b 0b01 	add.w	fp, fp, #1
 8008012:	e7b9      	b.n	8007f88 <_printf_float+0x310>
 8008014:	ee18 3a10 	vmov	r3, s16
 8008018:	4652      	mov	r2, sl
 800801a:	4631      	mov	r1, r6
 800801c:	4628      	mov	r0, r5
 800801e:	47b8      	blx	r7
 8008020:	3001      	adds	r0, #1
 8008022:	d1be      	bne.n	8007fa2 <_printf_float+0x32a>
 8008024:	e689      	b.n	8007d3a <_printf_float+0xc2>
 8008026:	9a05      	ldr	r2, [sp, #20]
 8008028:	464b      	mov	r3, r9
 800802a:	4442      	add	r2, r8
 800802c:	4631      	mov	r1, r6
 800802e:	4628      	mov	r0, r5
 8008030:	47b8      	blx	r7
 8008032:	3001      	adds	r0, #1
 8008034:	d1c1      	bne.n	8007fba <_printf_float+0x342>
 8008036:	e680      	b.n	8007d3a <_printf_float+0xc2>
 8008038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800803a:	2a01      	cmp	r2, #1
 800803c:	dc01      	bgt.n	8008042 <_printf_float+0x3ca>
 800803e:	07db      	lsls	r3, r3, #31
 8008040:	d538      	bpl.n	80080b4 <_printf_float+0x43c>
 8008042:	2301      	movs	r3, #1
 8008044:	4642      	mov	r2, r8
 8008046:	4631      	mov	r1, r6
 8008048:	4628      	mov	r0, r5
 800804a:	47b8      	blx	r7
 800804c:	3001      	adds	r0, #1
 800804e:	f43f ae74 	beq.w	8007d3a <_printf_float+0xc2>
 8008052:	ee18 3a10 	vmov	r3, s16
 8008056:	4652      	mov	r2, sl
 8008058:	4631      	mov	r1, r6
 800805a:	4628      	mov	r0, r5
 800805c:	47b8      	blx	r7
 800805e:	3001      	adds	r0, #1
 8008060:	f43f ae6b 	beq.w	8007d3a <_printf_float+0xc2>
 8008064:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008068:	2200      	movs	r2, #0
 800806a:	2300      	movs	r3, #0
 800806c:	f7f8 fd04 	bl	8000a78 <__aeabi_dcmpeq>
 8008070:	b9d8      	cbnz	r0, 80080aa <_printf_float+0x432>
 8008072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008074:	f108 0201 	add.w	r2, r8, #1
 8008078:	3b01      	subs	r3, #1
 800807a:	4631      	mov	r1, r6
 800807c:	4628      	mov	r0, r5
 800807e:	47b8      	blx	r7
 8008080:	3001      	adds	r0, #1
 8008082:	d10e      	bne.n	80080a2 <_printf_float+0x42a>
 8008084:	e659      	b.n	8007d3a <_printf_float+0xc2>
 8008086:	2301      	movs	r3, #1
 8008088:	4652      	mov	r2, sl
 800808a:	4631      	mov	r1, r6
 800808c:	4628      	mov	r0, r5
 800808e:	47b8      	blx	r7
 8008090:	3001      	adds	r0, #1
 8008092:	f43f ae52 	beq.w	8007d3a <_printf_float+0xc2>
 8008096:	f108 0801 	add.w	r8, r8, #1
 800809a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800809c:	3b01      	subs	r3, #1
 800809e:	4543      	cmp	r3, r8
 80080a0:	dcf1      	bgt.n	8008086 <_printf_float+0x40e>
 80080a2:	464b      	mov	r3, r9
 80080a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80080a8:	e6dc      	b.n	8007e64 <_printf_float+0x1ec>
 80080aa:	f04f 0800 	mov.w	r8, #0
 80080ae:	f104 0a1a 	add.w	sl, r4, #26
 80080b2:	e7f2      	b.n	800809a <_printf_float+0x422>
 80080b4:	2301      	movs	r3, #1
 80080b6:	4642      	mov	r2, r8
 80080b8:	e7df      	b.n	800807a <_printf_float+0x402>
 80080ba:	2301      	movs	r3, #1
 80080bc:	464a      	mov	r2, r9
 80080be:	4631      	mov	r1, r6
 80080c0:	4628      	mov	r0, r5
 80080c2:	47b8      	blx	r7
 80080c4:	3001      	adds	r0, #1
 80080c6:	f43f ae38 	beq.w	8007d3a <_printf_float+0xc2>
 80080ca:	f108 0801 	add.w	r8, r8, #1
 80080ce:	68e3      	ldr	r3, [r4, #12]
 80080d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080d2:	1a5b      	subs	r3, r3, r1
 80080d4:	4543      	cmp	r3, r8
 80080d6:	dcf0      	bgt.n	80080ba <_printf_float+0x442>
 80080d8:	e6fa      	b.n	8007ed0 <_printf_float+0x258>
 80080da:	f04f 0800 	mov.w	r8, #0
 80080de:	f104 0919 	add.w	r9, r4, #25
 80080e2:	e7f4      	b.n	80080ce <_printf_float+0x456>

080080e4 <_printf_common>:
 80080e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080e8:	4616      	mov	r6, r2
 80080ea:	4699      	mov	r9, r3
 80080ec:	688a      	ldr	r2, [r1, #8]
 80080ee:	690b      	ldr	r3, [r1, #16]
 80080f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080f4:	4293      	cmp	r3, r2
 80080f6:	bfb8      	it	lt
 80080f8:	4613      	movlt	r3, r2
 80080fa:	6033      	str	r3, [r6, #0]
 80080fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008100:	4607      	mov	r7, r0
 8008102:	460c      	mov	r4, r1
 8008104:	b10a      	cbz	r2, 800810a <_printf_common+0x26>
 8008106:	3301      	adds	r3, #1
 8008108:	6033      	str	r3, [r6, #0]
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	0699      	lsls	r1, r3, #26
 800810e:	bf42      	ittt	mi
 8008110:	6833      	ldrmi	r3, [r6, #0]
 8008112:	3302      	addmi	r3, #2
 8008114:	6033      	strmi	r3, [r6, #0]
 8008116:	6825      	ldr	r5, [r4, #0]
 8008118:	f015 0506 	ands.w	r5, r5, #6
 800811c:	d106      	bne.n	800812c <_printf_common+0x48>
 800811e:	f104 0a19 	add.w	sl, r4, #25
 8008122:	68e3      	ldr	r3, [r4, #12]
 8008124:	6832      	ldr	r2, [r6, #0]
 8008126:	1a9b      	subs	r3, r3, r2
 8008128:	42ab      	cmp	r3, r5
 800812a:	dc26      	bgt.n	800817a <_printf_common+0x96>
 800812c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008130:	1e13      	subs	r3, r2, #0
 8008132:	6822      	ldr	r2, [r4, #0]
 8008134:	bf18      	it	ne
 8008136:	2301      	movne	r3, #1
 8008138:	0692      	lsls	r2, r2, #26
 800813a:	d42b      	bmi.n	8008194 <_printf_common+0xb0>
 800813c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008140:	4649      	mov	r1, r9
 8008142:	4638      	mov	r0, r7
 8008144:	47c0      	blx	r8
 8008146:	3001      	adds	r0, #1
 8008148:	d01e      	beq.n	8008188 <_printf_common+0xa4>
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	68e5      	ldr	r5, [r4, #12]
 800814e:	6832      	ldr	r2, [r6, #0]
 8008150:	f003 0306 	and.w	r3, r3, #6
 8008154:	2b04      	cmp	r3, #4
 8008156:	bf08      	it	eq
 8008158:	1aad      	subeq	r5, r5, r2
 800815a:	68a3      	ldr	r3, [r4, #8]
 800815c:	6922      	ldr	r2, [r4, #16]
 800815e:	bf0c      	ite	eq
 8008160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008164:	2500      	movne	r5, #0
 8008166:	4293      	cmp	r3, r2
 8008168:	bfc4      	itt	gt
 800816a:	1a9b      	subgt	r3, r3, r2
 800816c:	18ed      	addgt	r5, r5, r3
 800816e:	2600      	movs	r6, #0
 8008170:	341a      	adds	r4, #26
 8008172:	42b5      	cmp	r5, r6
 8008174:	d11a      	bne.n	80081ac <_printf_common+0xc8>
 8008176:	2000      	movs	r0, #0
 8008178:	e008      	b.n	800818c <_printf_common+0xa8>
 800817a:	2301      	movs	r3, #1
 800817c:	4652      	mov	r2, sl
 800817e:	4649      	mov	r1, r9
 8008180:	4638      	mov	r0, r7
 8008182:	47c0      	blx	r8
 8008184:	3001      	adds	r0, #1
 8008186:	d103      	bne.n	8008190 <_printf_common+0xac>
 8008188:	f04f 30ff 	mov.w	r0, #4294967295
 800818c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008190:	3501      	adds	r5, #1
 8008192:	e7c6      	b.n	8008122 <_printf_common+0x3e>
 8008194:	18e1      	adds	r1, r4, r3
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	2030      	movs	r0, #48	; 0x30
 800819a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800819e:	4422      	add	r2, r4
 80081a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081a8:	3302      	adds	r3, #2
 80081aa:	e7c7      	b.n	800813c <_printf_common+0x58>
 80081ac:	2301      	movs	r3, #1
 80081ae:	4622      	mov	r2, r4
 80081b0:	4649      	mov	r1, r9
 80081b2:	4638      	mov	r0, r7
 80081b4:	47c0      	blx	r8
 80081b6:	3001      	adds	r0, #1
 80081b8:	d0e6      	beq.n	8008188 <_printf_common+0xa4>
 80081ba:	3601      	adds	r6, #1
 80081bc:	e7d9      	b.n	8008172 <_printf_common+0x8e>
	...

080081c0 <_printf_i>:
 80081c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081c4:	7e0f      	ldrb	r7, [r1, #24]
 80081c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081c8:	2f78      	cmp	r7, #120	; 0x78
 80081ca:	4691      	mov	r9, r2
 80081cc:	4680      	mov	r8, r0
 80081ce:	460c      	mov	r4, r1
 80081d0:	469a      	mov	sl, r3
 80081d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081d6:	d807      	bhi.n	80081e8 <_printf_i+0x28>
 80081d8:	2f62      	cmp	r7, #98	; 0x62
 80081da:	d80a      	bhi.n	80081f2 <_printf_i+0x32>
 80081dc:	2f00      	cmp	r7, #0
 80081de:	f000 80d8 	beq.w	8008392 <_printf_i+0x1d2>
 80081e2:	2f58      	cmp	r7, #88	; 0x58
 80081e4:	f000 80a3 	beq.w	800832e <_printf_i+0x16e>
 80081e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081f0:	e03a      	b.n	8008268 <_printf_i+0xa8>
 80081f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081f6:	2b15      	cmp	r3, #21
 80081f8:	d8f6      	bhi.n	80081e8 <_printf_i+0x28>
 80081fa:	a101      	add	r1, pc, #4	; (adr r1, 8008200 <_printf_i+0x40>)
 80081fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008200:	08008259 	.word	0x08008259
 8008204:	0800826d 	.word	0x0800826d
 8008208:	080081e9 	.word	0x080081e9
 800820c:	080081e9 	.word	0x080081e9
 8008210:	080081e9 	.word	0x080081e9
 8008214:	080081e9 	.word	0x080081e9
 8008218:	0800826d 	.word	0x0800826d
 800821c:	080081e9 	.word	0x080081e9
 8008220:	080081e9 	.word	0x080081e9
 8008224:	080081e9 	.word	0x080081e9
 8008228:	080081e9 	.word	0x080081e9
 800822c:	08008379 	.word	0x08008379
 8008230:	0800829d 	.word	0x0800829d
 8008234:	0800835b 	.word	0x0800835b
 8008238:	080081e9 	.word	0x080081e9
 800823c:	080081e9 	.word	0x080081e9
 8008240:	0800839b 	.word	0x0800839b
 8008244:	080081e9 	.word	0x080081e9
 8008248:	0800829d 	.word	0x0800829d
 800824c:	080081e9 	.word	0x080081e9
 8008250:	080081e9 	.word	0x080081e9
 8008254:	08008363 	.word	0x08008363
 8008258:	682b      	ldr	r3, [r5, #0]
 800825a:	1d1a      	adds	r2, r3, #4
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	602a      	str	r2, [r5, #0]
 8008260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008268:	2301      	movs	r3, #1
 800826a:	e0a3      	b.n	80083b4 <_printf_i+0x1f4>
 800826c:	6820      	ldr	r0, [r4, #0]
 800826e:	6829      	ldr	r1, [r5, #0]
 8008270:	0606      	lsls	r6, r0, #24
 8008272:	f101 0304 	add.w	r3, r1, #4
 8008276:	d50a      	bpl.n	800828e <_printf_i+0xce>
 8008278:	680e      	ldr	r6, [r1, #0]
 800827a:	602b      	str	r3, [r5, #0]
 800827c:	2e00      	cmp	r6, #0
 800827e:	da03      	bge.n	8008288 <_printf_i+0xc8>
 8008280:	232d      	movs	r3, #45	; 0x2d
 8008282:	4276      	negs	r6, r6
 8008284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008288:	485e      	ldr	r0, [pc, #376]	; (8008404 <_printf_i+0x244>)
 800828a:	230a      	movs	r3, #10
 800828c:	e019      	b.n	80082c2 <_printf_i+0x102>
 800828e:	680e      	ldr	r6, [r1, #0]
 8008290:	602b      	str	r3, [r5, #0]
 8008292:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008296:	bf18      	it	ne
 8008298:	b236      	sxthne	r6, r6
 800829a:	e7ef      	b.n	800827c <_printf_i+0xbc>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	6820      	ldr	r0, [r4, #0]
 80082a0:	1d19      	adds	r1, r3, #4
 80082a2:	6029      	str	r1, [r5, #0]
 80082a4:	0601      	lsls	r1, r0, #24
 80082a6:	d501      	bpl.n	80082ac <_printf_i+0xec>
 80082a8:	681e      	ldr	r6, [r3, #0]
 80082aa:	e002      	b.n	80082b2 <_printf_i+0xf2>
 80082ac:	0646      	lsls	r6, r0, #25
 80082ae:	d5fb      	bpl.n	80082a8 <_printf_i+0xe8>
 80082b0:	881e      	ldrh	r6, [r3, #0]
 80082b2:	4854      	ldr	r0, [pc, #336]	; (8008404 <_printf_i+0x244>)
 80082b4:	2f6f      	cmp	r7, #111	; 0x6f
 80082b6:	bf0c      	ite	eq
 80082b8:	2308      	moveq	r3, #8
 80082ba:	230a      	movne	r3, #10
 80082bc:	2100      	movs	r1, #0
 80082be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082c2:	6865      	ldr	r5, [r4, #4]
 80082c4:	60a5      	str	r5, [r4, #8]
 80082c6:	2d00      	cmp	r5, #0
 80082c8:	bfa2      	ittt	ge
 80082ca:	6821      	ldrge	r1, [r4, #0]
 80082cc:	f021 0104 	bicge.w	r1, r1, #4
 80082d0:	6021      	strge	r1, [r4, #0]
 80082d2:	b90e      	cbnz	r6, 80082d8 <_printf_i+0x118>
 80082d4:	2d00      	cmp	r5, #0
 80082d6:	d04d      	beq.n	8008374 <_printf_i+0x1b4>
 80082d8:	4615      	mov	r5, r2
 80082da:	fbb6 f1f3 	udiv	r1, r6, r3
 80082de:	fb03 6711 	mls	r7, r3, r1, r6
 80082e2:	5dc7      	ldrb	r7, [r0, r7]
 80082e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082e8:	4637      	mov	r7, r6
 80082ea:	42bb      	cmp	r3, r7
 80082ec:	460e      	mov	r6, r1
 80082ee:	d9f4      	bls.n	80082da <_printf_i+0x11a>
 80082f0:	2b08      	cmp	r3, #8
 80082f2:	d10b      	bne.n	800830c <_printf_i+0x14c>
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	07de      	lsls	r6, r3, #31
 80082f8:	d508      	bpl.n	800830c <_printf_i+0x14c>
 80082fa:	6923      	ldr	r3, [r4, #16]
 80082fc:	6861      	ldr	r1, [r4, #4]
 80082fe:	4299      	cmp	r1, r3
 8008300:	bfde      	ittt	le
 8008302:	2330      	movle	r3, #48	; 0x30
 8008304:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008308:	f105 35ff 	addle.w	r5, r5, #4294967295
 800830c:	1b52      	subs	r2, r2, r5
 800830e:	6122      	str	r2, [r4, #16]
 8008310:	f8cd a000 	str.w	sl, [sp]
 8008314:	464b      	mov	r3, r9
 8008316:	aa03      	add	r2, sp, #12
 8008318:	4621      	mov	r1, r4
 800831a:	4640      	mov	r0, r8
 800831c:	f7ff fee2 	bl	80080e4 <_printf_common>
 8008320:	3001      	adds	r0, #1
 8008322:	d14c      	bne.n	80083be <_printf_i+0x1fe>
 8008324:	f04f 30ff 	mov.w	r0, #4294967295
 8008328:	b004      	add	sp, #16
 800832a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800832e:	4835      	ldr	r0, [pc, #212]	; (8008404 <_printf_i+0x244>)
 8008330:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008334:	6829      	ldr	r1, [r5, #0]
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	f851 6b04 	ldr.w	r6, [r1], #4
 800833c:	6029      	str	r1, [r5, #0]
 800833e:	061d      	lsls	r5, r3, #24
 8008340:	d514      	bpl.n	800836c <_printf_i+0x1ac>
 8008342:	07df      	lsls	r7, r3, #31
 8008344:	bf44      	itt	mi
 8008346:	f043 0320 	orrmi.w	r3, r3, #32
 800834a:	6023      	strmi	r3, [r4, #0]
 800834c:	b91e      	cbnz	r6, 8008356 <_printf_i+0x196>
 800834e:	6823      	ldr	r3, [r4, #0]
 8008350:	f023 0320 	bic.w	r3, r3, #32
 8008354:	6023      	str	r3, [r4, #0]
 8008356:	2310      	movs	r3, #16
 8008358:	e7b0      	b.n	80082bc <_printf_i+0xfc>
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	f043 0320 	orr.w	r3, r3, #32
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	2378      	movs	r3, #120	; 0x78
 8008364:	4828      	ldr	r0, [pc, #160]	; (8008408 <_printf_i+0x248>)
 8008366:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800836a:	e7e3      	b.n	8008334 <_printf_i+0x174>
 800836c:	0659      	lsls	r1, r3, #25
 800836e:	bf48      	it	mi
 8008370:	b2b6      	uxthmi	r6, r6
 8008372:	e7e6      	b.n	8008342 <_printf_i+0x182>
 8008374:	4615      	mov	r5, r2
 8008376:	e7bb      	b.n	80082f0 <_printf_i+0x130>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	6826      	ldr	r6, [r4, #0]
 800837c:	6961      	ldr	r1, [r4, #20]
 800837e:	1d18      	adds	r0, r3, #4
 8008380:	6028      	str	r0, [r5, #0]
 8008382:	0635      	lsls	r5, r6, #24
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	d501      	bpl.n	800838c <_printf_i+0x1cc>
 8008388:	6019      	str	r1, [r3, #0]
 800838a:	e002      	b.n	8008392 <_printf_i+0x1d2>
 800838c:	0670      	lsls	r0, r6, #25
 800838e:	d5fb      	bpl.n	8008388 <_printf_i+0x1c8>
 8008390:	8019      	strh	r1, [r3, #0]
 8008392:	2300      	movs	r3, #0
 8008394:	6123      	str	r3, [r4, #16]
 8008396:	4615      	mov	r5, r2
 8008398:	e7ba      	b.n	8008310 <_printf_i+0x150>
 800839a:	682b      	ldr	r3, [r5, #0]
 800839c:	1d1a      	adds	r2, r3, #4
 800839e:	602a      	str	r2, [r5, #0]
 80083a0:	681d      	ldr	r5, [r3, #0]
 80083a2:	6862      	ldr	r2, [r4, #4]
 80083a4:	2100      	movs	r1, #0
 80083a6:	4628      	mov	r0, r5
 80083a8:	f7f7 fef2 	bl	8000190 <memchr>
 80083ac:	b108      	cbz	r0, 80083b2 <_printf_i+0x1f2>
 80083ae:	1b40      	subs	r0, r0, r5
 80083b0:	6060      	str	r0, [r4, #4]
 80083b2:	6863      	ldr	r3, [r4, #4]
 80083b4:	6123      	str	r3, [r4, #16]
 80083b6:	2300      	movs	r3, #0
 80083b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083bc:	e7a8      	b.n	8008310 <_printf_i+0x150>
 80083be:	6923      	ldr	r3, [r4, #16]
 80083c0:	462a      	mov	r2, r5
 80083c2:	4649      	mov	r1, r9
 80083c4:	4640      	mov	r0, r8
 80083c6:	47d0      	blx	sl
 80083c8:	3001      	adds	r0, #1
 80083ca:	d0ab      	beq.n	8008324 <_printf_i+0x164>
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	079b      	lsls	r3, r3, #30
 80083d0:	d413      	bmi.n	80083fa <_printf_i+0x23a>
 80083d2:	68e0      	ldr	r0, [r4, #12]
 80083d4:	9b03      	ldr	r3, [sp, #12]
 80083d6:	4298      	cmp	r0, r3
 80083d8:	bfb8      	it	lt
 80083da:	4618      	movlt	r0, r3
 80083dc:	e7a4      	b.n	8008328 <_printf_i+0x168>
 80083de:	2301      	movs	r3, #1
 80083e0:	4632      	mov	r2, r6
 80083e2:	4649      	mov	r1, r9
 80083e4:	4640      	mov	r0, r8
 80083e6:	47d0      	blx	sl
 80083e8:	3001      	adds	r0, #1
 80083ea:	d09b      	beq.n	8008324 <_printf_i+0x164>
 80083ec:	3501      	adds	r5, #1
 80083ee:	68e3      	ldr	r3, [r4, #12]
 80083f0:	9903      	ldr	r1, [sp, #12]
 80083f2:	1a5b      	subs	r3, r3, r1
 80083f4:	42ab      	cmp	r3, r5
 80083f6:	dcf2      	bgt.n	80083de <_printf_i+0x21e>
 80083f8:	e7eb      	b.n	80083d2 <_printf_i+0x212>
 80083fa:	2500      	movs	r5, #0
 80083fc:	f104 0619 	add.w	r6, r4, #25
 8008400:	e7f5      	b.n	80083ee <_printf_i+0x22e>
 8008402:	bf00      	nop
 8008404:	0800a67a 	.word	0x0800a67a
 8008408:	0800a68b 	.word	0x0800a68b

0800840c <iprintf>:
 800840c:	b40f      	push	{r0, r1, r2, r3}
 800840e:	4b0a      	ldr	r3, [pc, #40]	; (8008438 <iprintf+0x2c>)
 8008410:	b513      	push	{r0, r1, r4, lr}
 8008412:	681c      	ldr	r4, [r3, #0]
 8008414:	b124      	cbz	r4, 8008420 <iprintf+0x14>
 8008416:	69a3      	ldr	r3, [r4, #24]
 8008418:	b913      	cbnz	r3, 8008420 <iprintf+0x14>
 800841a:	4620      	mov	r0, r4
 800841c:	f7ff fa1c 	bl	8007858 <__sinit>
 8008420:	ab05      	add	r3, sp, #20
 8008422:	9a04      	ldr	r2, [sp, #16]
 8008424:	68a1      	ldr	r1, [r4, #8]
 8008426:	9301      	str	r3, [sp, #4]
 8008428:	4620      	mov	r0, r4
 800842a:	f001 fdf9 	bl	800a020 <_vfiprintf_r>
 800842e:	b002      	add	sp, #8
 8008430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008434:	b004      	add	sp, #16
 8008436:	4770      	bx	lr
 8008438:	20000018 	.word	0x20000018

0800843c <_puts_r>:
 800843c:	b570      	push	{r4, r5, r6, lr}
 800843e:	460e      	mov	r6, r1
 8008440:	4605      	mov	r5, r0
 8008442:	b118      	cbz	r0, 800844c <_puts_r+0x10>
 8008444:	6983      	ldr	r3, [r0, #24]
 8008446:	b90b      	cbnz	r3, 800844c <_puts_r+0x10>
 8008448:	f7ff fa06 	bl	8007858 <__sinit>
 800844c:	69ab      	ldr	r3, [r5, #24]
 800844e:	68ac      	ldr	r4, [r5, #8]
 8008450:	b913      	cbnz	r3, 8008458 <_puts_r+0x1c>
 8008452:	4628      	mov	r0, r5
 8008454:	f7ff fa00 	bl	8007858 <__sinit>
 8008458:	4b2c      	ldr	r3, [pc, #176]	; (800850c <_puts_r+0xd0>)
 800845a:	429c      	cmp	r4, r3
 800845c:	d120      	bne.n	80084a0 <_puts_r+0x64>
 800845e:	686c      	ldr	r4, [r5, #4]
 8008460:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008462:	07db      	lsls	r3, r3, #31
 8008464:	d405      	bmi.n	8008472 <_puts_r+0x36>
 8008466:	89a3      	ldrh	r3, [r4, #12]
 8008468:	0598      	lsls	r0, r3, #22
 800846a:	d402      	bmi.n	8008472 <_puts_r+0x36>
 800846c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800846e:	f7ff fab6 	bl	80079de <__retarget_lock_acquire_recursive>
 8008472:	89a3      	ldrh	r3, [r4, #12]
 8008474:	0719      	lsls	r1, r3, #28
 8008476:	d51d      	bpl.n	80084b4 <_puts_r+0x78>
 8008478:	6923      	ldr	r3, [r4, #16]
 800847a:	b1db      	cbz	r3, 80084b4 <_puts_r+0x78>
 800847c:	3e01      	subs	r6, #1
 800847e:	68a3      	ldr	r3, [r4, #8]
 8008480:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008484:	3b01      	subs	r3, #1
 8008486:	60a3      	str	r3, [r4, #8]
 8008488:	bb39      	cbnz	r1, 80084da <_puts_r+0x9e>
 800848a:	2b00      	cmp	r3, #0
 800848c:	da38      	bge.n	8008500 <_puts_r+0xc4>
 800848e:	4622      	mov	r2, r4
 8008490:	210a      	movs	r1, #10
 8008492:	4628      	mov	r0, r5
 8008494:	f000 f906 	bl	80086a4 <__swbuf_r>
 8008498:	3001      	adds	r0, #1
 800849a:	d011      	beq.n	80084c0 <_puts_r+0x84>
 800849c:	250a      	movs	r5, #10
 800849e:	e011      	b.n	80084c4 <_puts_r+0x88>
 80084a0:	4b1b      	ldr	r3, [pc, #108]	; (8008510 <_puts_r+0xd4>)
 80084a2:	429c      	cmp	r4, r3
 80084a4:	d101      	bne.n	80084aa <_puts_r+0x6e>
 80084a6:	68ac      	ldr	r4, [r5, #8]
 80084a8:	e7da      	b.n	8008460 <_puts_r+0x24>
 80084aa:	4b1a      	ldr	r3, [pc, #104]	; (8008514 <_puts_r+0xd8>)
 80084ac:	429c      	cmp	r4, r3
 80084ae:	bf08      	it	eq
 80084b0:	68ec      	ldreq	r4, [r5, #12]
 80084b2:	e7d5      	b.n	8008460 <_puts_r+0x24>
 80084b4:	4621      	mov	r1, r4
 80084b6:	4628      	mov	r0, r5
 80084b8:	f000 f958 	bl	800876c <__swsetup_r>
 80084bc:	2800      	cmp	r0, #0
 80084be:	d0dd      	beq.n	800847c <_puts_r+0x40>
 80084c0:	f04f 35ff 	mov.w	r5, #4294967295
 80084c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084c6:	07da      	lsls	r2, r3, #31
 80084c8:	d405      	bmi.n	80084d6 <_puts_r+0x9a>
 80084ca:	89a3      	ldrh	r3, [r4, #12]
 80084cc:	059b      	lsls	r3, r3, #22
 80084ce:	d402      	bmi.n	80084d6 <_puts_r+0x9a>
 80084d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084d2:	f7ff fa85 	bl	80079e0 <__retarget_lock_release_recursive>
 80084d6:	4628      	mov	r0, r5
 80084d8:	bd70      	pop	{r4, r5, r6, pc}
 80084da:	2b00      	cmp	r3, #0
 80084dc:	da04      	bge.n	80084e8 <_puts_r+0xac>
 80084de:	69a2      	ldr	r2, [r4, #24]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	dc06      	bgt.n	80084f2 <_puts_r+0xb6>
 80084e4:	290a      	cmp	r1, #10
 80084e6:	d004      	beq.n	80084f2 <_puts_r+0xb6>
 80084e8:	6823      	ldr	r3, [r4, #0]
 80084ea:	1c5a      	adds	r2, r3, #1
 80084ec:	6022      	str	r2, [r4, #0]
 80084ee:	7019      	strb	r1, [r3, #0]
 80084f0:	e7c5      	b.n	800847e <_puts_r+0x42>
 80084f2:	4622      	mov	r2, r4
 80084f4:	4628      	mov	r0, r5
 80084f6:	f000 f8d5 	bl	80086a4 <__swbuf_r>
 80084fa:	3001      	adds	r0, #1
 80084fc:	d1bf      	bne.n	800847e <_puts_r+0x42>
 80084fe:	e7df      	b.n	80084c0 <_puts_r+0x84>
 8008500:	6823      	ldr	r3, [r4, #0]
 8008502:	250a      	movs	r5, #10
 8008504:	1c5a      	adds	r2, r3, #1
 8008506:	6022      	str	r2, [r4, #0]
 8008508:	701d      	strb	r5, [r3, #0]
 800850a:	e7db      	b.n	80084c4 <_puts_r+0x88>
 800850c:	0800a624 	.word	0x0800a624
 8008510:	0800a644 	.word	0x0800a644
 8008514:	0800a604 	.word	0x0800a604

08008518 <puts>:
 8008518:	4b02      	ldr	r3, [pc, #8]	; (8008524 <puts+0xc>)
 800851a:	4601      	mov	r1, r0
 800851c:	6818      	ldr	r0, [r3, #0]
 800851e:	f7ff bf8d 	b.w	800843c <_puts_r>
 8008522:	bf00      	nop
 8008524:	20000018 	.word	0x20000018

08008528 <cleanup_glue>:
 8008528:	b538      	push	{r3, r4, r5, lr}
 800852a:	460c      	mov	r4, r1
 800852c:	6809      	ldr	r1, [r1, #0]
 800852e:	4605      	mov	r5, r0
 8008530:	b109      	cbz	r1, 8008536 <cleanup_glue+0xe>
 8008532:	f7ff fff9 	bl	8008528 <cleanup_glue>
 8008536:	4621      	mov	r1, r4
 8008538:	4628      	mov	r0, r5
 800853a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800853e:	f001 bcf9 	b.w	8009f34 <_free_r>
	...

08008544 <_reclaim_reent>:
 8008544:	4b2c      	ldr	r3, [pc, #176]	; (80085f8 <_reclaim_reent+0xb4>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4283      	cmp	r3, r0
 800854a:	b570      	push	{r4, r5, r6, lr}
 800854c:	4604      	mov	r4, r0
 800854e:	d051      	beq.n	80085f4 <_reclaim_reent+0xb0>
 8008550:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008552:	b143      	cbz	r3, 8008566 <_reclaim_reent+0x22>
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d14a      	bne.n	80085f0 <_reclaim_reent+0xac>
 800855a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800855c:	6819      	ldr	r1, [r3, #0]
 800855e:	b111      	cbz	r1, 8008566 <_reclaim_reent+0x22>
 8008560:	4620      	mov	r0, r4
 8008562:	f001 fce7 	bl	8009f34 <_free_r>
 8008566:	6961      	ldr	r1, [r4, #20]
 8008568:	b111      	cbz	r1, 8008570 <_reclaim_reent+0x2c>
 800856a:	4620      	mov	r0, r4
 800856c:	f001 fce2 	bl	8009f34 <_free_r>
 8008570:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008572:	b111      	cbz	r1, 800857a <_reclaim_reent+0x36>
 8008574:	4620      	mov	r0, r4
 8008576:	f001 fcdd 	bl	8009f34 <_free_r>
 800857a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800857c:	b111      	cbz	r1, 8008584 <_reclaim_reent+0x40>
 800857e:	4620      	mov	r0, r4
 8008580:	f001 fcd8 	bl	8009f34 <_free_r>
 8008584:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008586:	b111      	cbz	r1, 800858e <_reclaim_reent+0x4a>
 8008588:	4620      	mov	r0, r4
 800858a:	f001 fcd3 	bl	8009f34 <_free_r>
 800858e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008590:	b111      	cbz	r1, 8008598 <_reclaim_reent+0x54>
 8008592:	4620      	mov	r0, r4
 8008594:	f001 fcce 	bl	8009f34 <_free_r>
 8008598:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800859a:	b111      	cbz	r1, 80085a2 <_reclaim_reent+0x5e>
 800859c:	4620      	mov	r0, r4
 800859e:	f001 fcc9 	bl	8009f34 <_free_r>
 80085a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80085a4:	b111      	cbz	r1, 80085ac <_reclaim_reent+0x68>
 80085a6:	4620      	mov	r0, r4
 80085a8:	f001 fcc4 	bl	8009f34 <_free_r>
 80085ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085ae:	b111      	cbz	r1, 80085b6 <_reclaim_reent+0x72>
 80085b0:	4620      	mov	r0, r4
 80085b2:	f001 fcbf 	bl	8009f34 <_free_r>
 80085b6:	69a3      	ldr	r3, [r4, #24]
 80085b8:	b1e3      	cbz	r3, 80085f4 <_reclaim_reent+0xb0>
 80085ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80085bc:	4620      	mov	r0, r4
 80085be:	4798      	blx	r3
 80085c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80085c2:	b1b9      	cbz	r1, 80085f4 <_reclaim_reent+0xb0>
 80085c4:	4620      	mov	r0, r4
 80085c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80085ca:	f7ff bfad 	b.w	8008528 <cleanup_glue>
 80085ce:	5949      	ldr	r1, [r1, r5]
 80085d0:	b941      	cbnz	r1, 80085e4 <_reclaim_reent+0xa0>
 80085d2:	3504      	adds	r5, #4
 80085d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085d6:	2d80      	cmp	r5, #128	; 0x80
 80085d8:	68d9      	ldr	r1, [r3, #12]
 80085da:	d1f8      	bne.n	80085ce <_reclaim_reent+0x8a>
 80085dc:	4620      	mov	r0, r4
 80085de:	f001 fca9 	bl	8009f34 <_free_r>
 80085e2:	e7ba      	b.n	800855a <_reclaim_reent+0x16>
 80085e4:	680e      	ldr	r6, [r1, #0]
 80085e6:	4620      	mov	r0, r4
 80085e8:	f001 fca4 	bl	8009f34 <_free_r>
 80085ec:	4631      	mov	r1, r6
 80085ee:	e7ef      	b.n	80085d0 <_reclaim_reent+0x8c>
 80085f0:	2500      	movs	r5, #0
 80085f2:	e7ef      	b.n	80085d4 <_reclaim_reent+0x90>
 80085f4:	bd70      	pop	{r4, r5, r6, pc}
 80085f6:	bf00      	nop
 80085f8:	20000018 	.word	0x20000018

080085fc <_sbrk_r>:
 80085fc:	b538      	push	{r3, r4, r5, lr}
 80085fe:	4d06      	ldr	r5, [pc, #24]	; (8008618 <_sbrk_r+0x1c>)
 8008600:	2300      	movs	r3, #0
 8008602:	4604      	mov	r4, r0
 8008604:	4608      	mov	r0, r1
 8008606:	602b      	str	r3, [r5, #0]
 8008608:	f7f9 f826 	bl	8001658 <_sbrk>
 800860c:	1c43      	adds	r3, r0, #1
 800860e:	d102      	bne.n	8008616 <_sbrk_r+0x1a>
 8008610:	682b      	ldr	r3, [r5, #0]
 8008612:	b103      	cbz	r3, 8008616 <_sbrk_r+0x1a>
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	bd38      	pop	{r3, r4, r5, pc}
 8008618:	20001ff8 	.word	0x20001ff8

0800861c <__sread>:
 800861c:	b510      	push	{r4, lr}
 800861e:	460c      	mov	r4, r1
 8008620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008624:	f001 fe2c 	bl	800a280 <_read_r>
 8008628:	2800      	cmp	r0, #0
 800862a:	bfab      	itete	ge
 800862c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800862e:	89a3      	ldrhlt	r3, [r4, #12]
 8008630:	181b      	addge	r3, r3, r0
 8008632:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008636:	bfac      	ite	ge
 8008638:	6563      	strge	r3, [r4, #84]	; 0x54
 800863a:	81a3      	strhlt	r3, [r4, #12]
 800863c:	bd10      	pop	{r4, pc}

0800863e <__swrite>:
 800863e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008642:	461f      	mov	r7, r3
 8008644:	898b      	ldrh	r3, [r1, #12]
 8008646:	05db      	lsls	r3, r3, #23
 8008648:	4605      	mov	r5, r0
 800864a:	460c      	mov	r4, r1
 800864c:	4616      	mov	r6, r2
 800864e:	d505      	bpl.n	800865c <__swrite+0x1e>
 8008650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008654:	2302      	movs	r3, #2
 8008656:	2200      	movs	r2, #0
 8008658:	f001 f846 	bl	80096e8 <_lseek_r>
 800865c:	89a3      	ldrh	r3, [r4, #12]
 800865e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008662:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008666:	81a3      	strh	r3, [r4, #12]
 8008668:	4632      	mov	r2, r6
 800866a:	463b      	mov	r3, r7
 800866c:	4628      	mov	r0, r5
 800866e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008672:	f000 b869 	b.w	8008748 <_write_r>

08008676 <__sseek>:
 8008676:	b510      	push	{r4, lr}
 8008678:	460c      	mov	r4, r1
 800867a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800867e:	f001 f833 	bl	80096e8 <_lseek_r>
 8008682:	1c43      	adds	r3, r0, #1
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	bf15      	itete	ne
 8008688:	6560      	strne	r0, [r4, #84]	; 0x54
 800868a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800868e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008692:	81a3      	strheq	r3, [r4, #12]
 8008694:	bf18      	it	ne
 8008696:	81a3      	strhne	r3, [r4, #12]
 8008698:	bd10      	pop	{r4, pc}

0800869a <__sclose>:
 800869a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800869e:	f000 b8d3 	b.w	8008848 <_close_r>
	...

080086a4 <__swbuf_r>:
 80086a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a6:	460e      	mov	r6, r1
 80086a8:	4614      	mov	r4, r2
 80086aa:	4605      	mov	r5, r0
 80086ac:	b118      	cbz	r0, 80086b6 <__swbuf_r+0x12>
 80086ae:	6983      	ldr	r3, [r0, #24]
 80086b0:	b90b      	cbnz	r3, 80086b6 <__swbuf_r+0x12>
 80086b2:	f7ff f8d1 	bl	8007858 <__sinit>
 80086b6:	4b21      	ldr	r3, [pc, #132]	; (800873c <__swbuf_r+0x98>)
 80086b8:	429c      	cmp	r4, r3
 80086ba:	d12b      	bne.n	8008714 <__swbuf_r+0x70>
 80086bc:	686c      	ldr	r4, [r5, #4]
 80086be:	69a3      	ldr	r3, [r4, #24]
 80086c0:	60a3      	str	r3, [r4, #8]
 80086c2:	89a3      	ldrh	r3, [r4, #12]
 80086c4:	071a      	lsls	r2, r3, #28
 80086c6:	d52f      	bpl.n	8008728 <__swbuf_r+0x84>
 80086c8:	6923      	ldr	r3, [r4, #16]
 80086ca:	b36b      	cbz	r3, 8008728 <__swbuf_r+0x84>
 80086cc:	6923      	ldr	r3, [r4, #16]
 80086ce:	6820      	ldr	r0, [r4, #0]
 80086d0:	1ac0      	subs	r0, r0, r3
 80086d2:	6963      	ldr	r3, [r4, #20]
 80086d4:	b2f6      	uxtb	r6, r6
 80086d6:	4283      	cmp	r3, r0
 80086d8:	4637      	mov	r7, r6
 80086da:	dc04      	bgt.n	80086e6 <__swbuf_r+0x42>
 80086dc:	4621      	mov	r1, r4
 80086de:	4628      	mov	r0, r5
 80086e0:	f000 ffc2 	bl	8009668 <_fflush_r>
 80086e4:	bb30      	cbnz	r0, 8008734 <__swbuf_r+0x90>
 80086e6:	68a3      	ldr	r3, [r4, #8]
 80086e8:	3b01      	subs	r3, #1
 80086ea:	60a3      	str	r3, [r4, #8]
 80086ec:	6823      	ldr	r3, [r4, #0]
 80086ee:	1c5a      	adds	r2, r3, #1
 80086f0:	6022      	str	r2, [r4, #0]
 80086f2:	701e      	strb	r6, [r3, #0]
 80086f4:	6963      	ldr	r3, [r4, #20]
 80086f6:	3001      	adds	r0, #1
 80086f8:	4283      	cmp	r3, r0
 80086fa:	d004      	beq.n	8008706 <__swbuf_r+0x62>
 80086fc:	89a3      	ldrh	r3, [r4, #12]
 80086fe:	07db      	lsls	r3, r3, #31
 8008700:	d506      	bpl.n	8008710 <__swbuf_r+0x6c>
 8008702:	2e0a      	cmp	r6, #10
 8008704:	d104      	bne.n	8008710 <__swbuf_r+0x6c>
 8008706:	4621      	mov	r1, r4
 8008708:	4628      	mov	r0, r5
 800870a:	f000 ffad 	bl	8009668 <_fflush_r>
 800870e:	b988      	cbnz	r0, 8008734 <__swbuf_r+0x90>
 8008710:	4638      	mov	r0, r7
 8008712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008714:	4b0a      	ldr	r3, [pc, #40]	; (8008740 <__swbuf_r+0x9c>)
 8008716:	429c      	cmp	r4, r3
 8008718:	d101      	bne.n	800871e <__swbuf_r+0x7a>
 800871a:	68ac      	ldr	r4, [r5, #8]
 800871c:	e7cf      	b.n	80086be <__swbuf_r+0x1a>
 800871e:	4b09      	ldr	r3, [pc, #36]	; (8008744 <__swbuf_r+0xa0>)
 8008720:	429c      	cmp	r4, r3
 8008722:	bf08      	it	eq
 8008724:	68ec      	ldreq	r4, [r5, #12]
 8008726:	e7ca      	b.n	80086be <__swbuf_r+0x1a>
 8008728:	4621      	mov	r1, r4
 800872a:	4628      	mov	r0, r5
 800872c:	f000 f81e 	bl	800876c <__swsetup_r>
 8008730:	2800      	cmp	r0, #0
 8008732:	d0cb      	beq.n	80086cc <__swbuf_r+0x28>
 8008734:	f04f 37ff 	mov.w	r7, #4294967295
 8008738:	e7ea      	b.n	8008710 <__swbuf_r+0x6c>
 800873a:	bf00      	nop
 800873c:	0800a624 	.word	0x0800a624
 8008740:	0800a644 	.word	0x0800a644
 8008744:	0800a604 	.word	0x0800a604

08008748 <_write_r>:
 8008748:	b538      	push	{r3, r4, r5, lr}
 800874a:	4d07      	ldr	r5, [pc, #28]	; (8008768 <_write_r+0x20>)
 800874c:	4604      	mov	r4, r0
 800874e:	4608      	mov	r0, r1
 8008750:	4611      	mov	r1, r2
 8008752:	2200      	movs	r2, #0
 8008754:	602a      	str	r2, [r5, #0]
 8008756:	461a      	mov	r2, r3
 8008758:	f7f8 fb0e 	bl	8000d78 <_write>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	d102      	bne.n	8008766 <_write_r+0x1e>
 8008760:	682b      	ldr	r3, [r5, #0]
 8008762:	b103      	cbz	r3, 8008766 <_write_r+0x1e>
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	bd38      	pop	{r3, r4, r5, pc}
 8008768:	20001ff8 	.word	0x20001ff8

0800876c <__swsetup_r>:
 800876c:	4b32      	ldr	r3, [pc, #200]	; (8008838 <__swsetup_r+0xcc>)
 800876e:	b570      	push	{r4, r5, r6, lr}
 8008770:	681d      	ldr	r5, [r3, #0]
 8008772:	4606      	mov	r6, r0
 8008774:	460c      	mov	r4, r1
 8008776:	b125      	cbz	r5, 8008782 <__swsetup_r+0x16>
 8008778:	69ab      	ldr	r3, [r5, #24]
 800877a:	b913      	cbnz	r3, 8008782 <__swsetup_r+0x16>
 800877c:	4628      	mov	r0, r5
 800877e:	f7ff f86b 	bl	8007858 <__sinit>
 8008782:	4b2e      	ldr	r3, [pc, #184]	; (800883c <__swsetup_r+0xd0>)
 8008784:	429c      	cmp	r4, r3
 8008786:	d10f      	bne.n	80087a8 <__swsetup_r+0x3c>
 8008788:	686c      	ldr	r4, [r5, #4]
 800878a:	89a3      	ldrh	r3, [r4, #12]
 800878c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008790:	0719      	lsls	r1, r3, #28
 8008792:	d42c      	bmi.n	80087ee <__swsetup_r+0x82>
 8008794:	06dd      	lsls	r5, r3, #27
 8008796:	d411      	bmi.n	80087bc <__swsetup_r+0x50>
 8008798:	2309      	movs	r3, #9
 800879a:	6033      	str	r3, [r6, #0]
 800879c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087a0:	81a3      	strh	r3, [r4, #12]
 80087a2:	f04f 30ff 	mov.w	r0, #4294967295
 80087a6:	e03e      	b.n	8008826 <__swsetup_r+0xba>
 80087a8:	4b25      	ldr	r3, [pc, #148]	; (8008840 <__swsetup_r+0xd4>)
 80087aa:	429c      	cmp	r4, r3
 80087ac:	d101      	bne.n	80087b2 <__swsetup_r+0x46>
 80087ae:	68ac      	ldr	r4, [r5, #8]
 80087b0:	e7eb      	b.n	800878a <__swsetup_r+0x1e>
 80087b2:	4b24      	ldr	r3, [pc, #144]	; (8008844 <__swsetup_r+0xd8>)
 80087b4:	429c      	cmp	r4, r3
 80087b6:	bf08      	it	eq
 80087b8:	68ec      	ldreq	r4, [r5, #12]
 80087ba:	e7e6      	b.n	800878a <__swsetup_r+0x1e>
 80087bc:	0758      	lsls	r0, r3, #29
 80087be:	d512      	bpl.n	80087e6 <__swsetup_r+0x7a>
 80087c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087c2:	b141      	cbz	r1, 80087d6 <__swsetup_r+0x6a>
 80087c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087c8:	4299      	cmp	r1, r3
 80087ca:	d002      	beq.n	80087d2 <__swsetup_r+0x66>
 80087cc:	4630      	mov	r0, r6
 80087ce:	f001 fbb1 	bl	8009f34 <_free_r>
 80087d2:	2300      	movs	r3, #0
 80087d4:	6363      	str	r3, [r4, #52]	; 0x34
 80087d6:	89a3      	ldrh	r3, [r4, #12]
 80087d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087dc:	81a3      	strh	r3, [r4, #12]
 80087de:	2300      	movs	r3, #0
 80087e0:	6063      	str	r3, [r4, #4]
 80087e2:	6923      	ldr	r3, [r4, #16]
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	89a3      	ldrh	r3, [r4, #12]
 80087e8:	f043 0308 	orr.w	r3, r3, #8
 80087ec:	81a3      	strh	r3, [r4, #12]
 80087ee:	6923      	ldr	r3, [r4, #16]
 80087f0:	b94b      	cbnz	r3, 8008806 <__swsetup_r+0x9a>
 80087f2:	89a3      	ldrh	r3, [r4, #12]
 80087f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087fc:	d003      	beq.n	8008806 <__swsetup_r+0x9a>
 80087fe:	4621      	mov	r1, r4
 8008800:	4630      	mov	r0, r6
 8008802:	f000 ffa9 	bl	8009758 <__smakebuf_r>
 8008806:	89a0      	ldrh	r0, [r4, #12]
 8008808:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800880c:	f010 0301 	ands.w	r3, r0, #1
 8008810:	d00a      	beq.n	8008828 <__swsetup_r+0xbc>
 8008812:	2300      	movs	r3, #0
 8008814:	60a3      	str	r3, [r4, #8]
 8008816:	6963      	ldr	r3, [r4, #20]
 8008818:	425b      	negs	r3, r3
 800881a:	61a3      	str	r3, [r4, #24]
 800881c:	6923      	ldr	r3, [r4, #16]
 800881e:	b943      	cbnz	r3, 8008832 <__swsetup_r+0xc6>
 8008820:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008824:	d1ba      	bne.n	800879c <__swsetup_r+0x30>
 8008826:	bd70      	pop	{r4, r5, r6, pc}
 8008828:	0781      	lsls	r1, r0, #30
 800882a:	bf58      	it	pl
 800882c:	6963      	ldrpl	r3, [r4, #20]
 800882e:	60a3      	str	r3, [r4, #8]
 8008830:	e7f4      	b.n	800881c <__swsetup_r+0xb0>
 8008832:	2000      	movs	r0, #0
 8008834:	e7f7      	b.n	8008826 <__swsetup_r+0xba>
 8008836:	bf00      	nop
 8008838:	20000018 	.word	0x20000018
 800883c:	0800a624 	.word	0x0800a624
 8008840:	0800a644 	.word	0x0800a644
 8008844:	0800a604 	.word	0x0800a604

08008848 <_close_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	4d06      	ldr	r5, [pc, #24]	; (8008864 <_close_r+0x1c>)
 800884c:	2300      	movs	r3, #0
 800884e:	4604      	mov	r4, r0
 8008850:	4608      	mov	r0, r1
 8008852:	602b      	str	r3, [r5, #0]
 8008854:	f7f8 fecb 	bl	80015ee <_close>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	d102      	bne.n	8008862 <_close_r+0x1a>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	b103      	cbz	r3, 8008862 <_close_r+0x1a>
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	bd38      	pop	{r3, r4, r5, pc}
 8008864:	20001ff8 	.word	0x20001ff8

08008868 <quorem>:
 8008868:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800886c:	6903      	ldr	r3, [r0, #16]
 800886e:	690c      	ldr	r4, [r1, #16]
 8008870:	42a3      	cmp	r3, r4
 8008872:	4607      	mov	r7, r0
 8008874:	f2c0 8081 	blt.w	800897a <quorem+0x112>
 8008878:	3c01      	subs	r4, #1
 800887a:	f101 0814 	add.w	r8, r1, #20
 800887e:	f100 0514 	add.w	r5, r0, #20
 8008882:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008886:	9301      	str	r3, [sp, #4]
 8008888:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800888c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008890:	3301      	adds	r3, #1
 8008892:	429a      	cmp	r2, r3
 8008894:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008898:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800889c:	fbb2 f6f3 	udiv	r6, r2, r3
 80088a0:	d331      	bcc.n	8008906 <quorem+0x9e>
 80088a2:	f04f 0e00 	mov.w	lr, #0
 80088a6:	4640      	mov	r0, r8
 80088a8:	46ac      	mov	ip, r5
 80088aa:	46f2      	mov	sl, lr
 80088ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80088b0:	b293      	uxth	r3, r2
 80088b2:	fb06 e303 	mla	r3, r6, r3, lr
 80088b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	ebaa 0303 	sub.w	r3, sl, r3
 80088c0:	f8dc a000 	ldr.w	sl, [ip]
 80088c4:	0c12      	lsrs	r2, r2, #16
 80088c6:	fa13 f38a 	uxtah	r3, r3, sl
 80088ca:	fb06 e202 	mla	r2, r6, r2, lr
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	9b00      	ldr	r3, [sp, #0]
 80088d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088d6:	b292      	uxth	r2, r2
 80088d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80088dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80088e4:	4581      	cmp	r9, r0
 80088e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088ea:	f84c 3b04 	str.w	r3, [ip], #4
 80088ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80088f2:	d2db      	bcs.n	80088ac <quorem+0x44>
 80088f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80088f8:	b92b      	cbnz	r3, 8008906 <quorem+0x9e>
 80088fa:	9b01      	ldr	r3, [sp, #4]
 80088fc:	3b04      	subs	r3, #4
 80088fe:	429d      	cmp	r5, r3
 8008900:	461a      	mov	r2, r3
 8008902:	d32e      	bcc.n	8008962 <quorem+0xfa>
 8008904:	613c      	str	r4, [r7, #16]
 8008906:	4638      	mov	r0, r7
 8008908:	f001 f9fc 	bl	8009d04 <__mcmp>
 800890c:	2800      	cmp	r0, #0
 800890e:	db24      	blt.n	800895a <quorem+0xf2>
 8008910:	3601      	adds	r6, #1
 8008912:	4628      	mov	r0, r5
 8008914:	f04f 0c00 	mov.w	ip, #0
 8008918:	f858 2b04 	ldr.w	r2, [r8], #4
 800891c:	f8d0 e000 	ldr.w	lr, [r0]
 8008920:	b293      	uxth	r3, r2
 8008922:	ebac 0303 	sub.w	r3, ip, r3
 8008926:	0c12      	lsrs	r2, r2, #16
 8008928:	fa13 f38e 	uxtah	r3, r3, lr
 800892c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008930:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008934:	b29b      	uxth	r3, r3
 8008936:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800893a:	45c1      	cmp	r9, r8
 800893c:	f840 3b04 	str.w	r3, [r0], #4
 8008940:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008944:	d2e8      	bcs.n	8008918 <quorem+0xb0>
 8008946:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800894a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800894e:	b922      	cbnz	r2, 800895a <quorem+0xf2>
 8008950:	3b04      	subs	r3, #4
 8008952:	429d      	cmp	r5, r3
 8008954:	461a      	mov	r2, r3
 8008956:	d30a      	bcc.n	800896e <quorem+0x106>
 8008958:	613c      	str	r4, [r7, #16]
 800895a:	4630      	mov	r0, r6
 800895c:	b003      	add	sp, #12
 800895e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008962:	6812      	ldr	r2, [r2, #0]
 8008964:	3b04      	subs	r3, #4
 8008966:	2a00      	cmp	r2, #0
 8008968:	d1cc      	bne.n	8008904 <quorem+0x9c>
 800896a:	3c01      	subs	r4, #1
 800896c:	e7c7      	b.n	80088fe <quorem+0x96>
 800896e:	6812      	ldr	r2, [r2, #0]
 8008970:	3b04      	subs	r3, #4
 8008972:	2a00      	cmp	r2, #0
 8008974:	d1f0      	bne.n	8008958 <quorem+0xf0>
 8008976:	3c01      	subs	r4, #1
 8008978:	e7eb      	b.n	8008952 <quorem+0xea>
 800897a:	2000      	movs	r0, #0
 800897c:	e7ee      	b.n	800895c <quorem+0xf4>
	...

08008980 <_dtoa_r>:
 8008980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	ed2d 8b04 	vpush	{d8-d9}
 8008988:	ec57 6b10 	vmov	r6, r7, d0
 800898c:	b093      	sub	sp, #76	; 0x4c
 800898e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008990:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008994:	9106      	str	r1, [sp, #24]
 8008996:	ee10 aa10 	vmov	sl, s0
 800899a:	4604      	mov	r4, r0
 800899c:	9209      	str	r2, [sp, #36]	; 0x24
 800899e:	930c      	str	r3, [sp, #48]	; 0x30
 80089a0:	46bb      	mov	fp, r7
 80089a2:	b975      	cbnz	r5, 80089c2 <_dtoa_r+0x42>
 80089a4:	2010      	movs	r0, #16
 80089a6:	f000 ff17 	bl	80097d8 <malloc>
 80089aa:	4602      	mov	r2, r0
 80089ac:	6260      	str	r0, [r4, #36]	; 0x24
 80089ae:	b920      	cbnz	r0, 80089ba <_dtoa_r+0x3a>
 80089b0:	4ba7      	ldr	r3, [pc, #668]	; (8008c50 <_dtoa_r+0x2d0>)
 80089b2:	21ea      	movs	r1, #234	; 0xea
 80089b4:	48a7      	ldr	r0, [pc, #668]	; (8008c54 <_dtoa_r+0x2d4>)
 80089b6:	f001 fc75 	bl	800a2a4 <__assert_func>
 80089ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80089be:	6005      	str	r5, [r0, #0]
 80089c0:	60c5      	str	r5, [r0, #12]
 80089c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089c4:	6819      	ldr	r1, [r3, #0]
 80089c6:	b151      	cbz	r1, 80089de <_dtoa_r+0x5e>
 80089c8:	685a      	ldr	r2, [r3, #4]
 80089ca:	604a      	str	r2, [r1, #4]
 80089cc:	2301      	movs	r3, #1
 80089ce:	4093      	lsls	r3, r2
 80089d0:	608b      	str	r3, [r1, #8]
 80089d2:	4620      	mov	r0, r4
 80089d4:	f000 ff54 	bl	8009880 <_Bfree>
 80089d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089da:	2200      	movs	r2, #0
 80089dc:	601a      	str	r2, [r3, #0]
 80089de:	1e3b      	subs	r3, r7, #0
 80089e0:	bfaa      	itet	ge
 80089e2:	2300      	movge	r3, #0
 80089e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80089e8:	f8c8 3000 	strge.w	r3, [r8]
 80089ec:	4b9a      	ldr	r3, [pc, #616]	; (8008c58 <_dtoa_r+0x2d8>)
 80089ee:	bfbc      	itt	lt
 80089f0:	2201      	movlt	r2, #1
 80089f2:	f8c8 2000 	strlt.w	r2, [r8]
 80089f6:	ea33 030b 	bics.w	r3, r3, fp
 80089fa:	d11b      	bne.n	8008a34 <_dtoa_r+0xb4>
 80089fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a02:	6013      	str	r3, [r2, #0]
 8008a04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a08:	4333      	orrs	r3, r6
 8008a0a:	f000 8592 	beq.w	8009532 <_dtoa_r+0xbb2>
 8008a0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a10:	b963      	cbnz	r3, 8008a2c <_dtoa_r+0xac>
 8008a12:	4b92      	ldr	r3, [pc, #584]	; (8008c5c <_dtoa_r+0x2dc>)
 8008a14:	e022      	b.n	8008a5c <_dtoa_r+0xdc>
 8008a16:	4b92      	ldr	r3, [pc, #584]	; (8008c60 <_dtoa_r+0x2e0>)
 8008a18:	9301      	str	r3, [sp, #4]
 8008a1a:	3308      	adds	r3, #8
 8008a1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a1e:	6013      	str	r3, [r2, #0]
 8008a20:	9801      	ldr	r0, [sp, #4]
 8008a22:	b013      	add	sp, #76	; 0x4c
 8008a24:	ecbd 8b04 	vpop	{d8-d9}
 8008a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a2c:	4b8b      	ldr	r3, [pc, #556]	; (8008c5c <_dtoa_r+0x2dc>)
 8008a2e:	9301      	str	r3, [sp, #4]
 8008a30:	3303      	adds	r3, #3
 8008a32:	e7f3      	b.n	8008a1c <_dtoa_r+0x9c>
 8008a34:	2200      	movs	r2, #0
 8008a36:	2300      	movs	r3, #0
 8008a38:	4650      	mov	r0, sl
 8008a3a:	4659      	mov	r1, fp
 8008a3c:	f7f8 f81c 	bl	8000a78 <__aeabi_dcmpeq>
 8008a40:	ec4b ab19 	vmov	d9, sl, fp
 8008a44:	4680      	mov	r8, r0
 8008a46:	b158      	cbz	r0, 8008a60 <_dtoa_r+0xe0>
 8008a48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	6013      	str	r3, [r2, #0]
 8008a4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f000 856b 	beq.w	800952c <_dtoa_r+0xbac>
 8008a56:	4883      	ldr	r0, [pc, #524]	; (8008c64 <_dtoa_r+0x2e4>)
 8008a58:	6018      	str	r0, [r3, #0]
 8008a5a:	1e43      	subs	r3, r0, #1
 8008a5c:	9301      	str	r3, [sp, #4]
 8008a5e:	e7df      	b.n	8008a20 <_dtoa_r+0xa0>
 8008a60:	ec4b ab10 	vmov	d0, sl, fp
 8008a64:	aa10      	add	r2, sp, #64	; 0x40
 8008a66:	a911      	add	r1, sp, #68	; 0x44
 8008a68:	4620      	mov	r0, r4
 8008a6a:	f001 f9f1 	bl	8009e50 <__d2b>
 8008a6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008a72:	ee08 0a10 	vmov	s16, r0
 8008a76:	2d00      	cmp	r5, #0
 8008a78:	f000 8084 	beq.w	8008b84 <_dtoa_r+0x204>
 8008a7c:	ee19 3a90 	vmov	r3, s19
 8008a80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008a88:	4656      	mov	r6, sl
 8008a8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008a8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008a96:	4b74      	ldr	r3, [pc, #464]	; (8008c68 <_dtoa_r+0x2e8>)
 8008a98:	2200      	movs	r2, #0
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	4639      	mov	r1, r7
 8008a9e:	f7f7 fbcb 	bl	8000238 <__aeabi_dsub>
 8008aa2:	a365      	add	r3, pc, #404	; (adr r3, 8008c38 <_dtoa_r+0x2b8>)
 8008aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa8:	f7f7 fd7e 	bl	80005a8 <__aeabi_dmul>
 8008aac:	a364      	add	r3, pc, #400	; (adr r3, 8008c40 <_dtoa_r+0x2c0>)
 8008aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab2:	f7f7 fbc3 	bl	800023c <__adddf3>
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	4628      	mov	r0, r5
 8008aba:	460f      	mov	r7, r1
 8008abc:	f7f7 fd0a 	bl	80004d4 <__aeabi_i2d>
 8008ac0:	a361      	add	r3, pc, #388	; (adr r3, 8008c48 <_dtoa_r+0x2c8>)
 8008ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac6:	f7f7 fd6f 	bl	80005a8 <__aeabi_dmul>
 8008aca:	4602      	mov	r2, r0
 8008acc:	460b      	mov	r3, r1
 8008ace:	4630      	mov	r0, r6
 8008ad0:	4639      	mov	r1, r7
 8008ad2:	f7f7 fbb3 	bl	800023c <__adddf3>
 8008ad6:	4606      	mov	r6, r0
 8008ad8:	460f      	mov	r7, r1
 8008ada:	f7f8 f815 	bl	8000b08 <__aeabi_d2iz>
 8008ade:	2200      	movs	r2, #0
 8008ae0:	9000      	str	r0, [sp, #0]
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	4630      	mov	r0, r6
 8008ae6:	4639      	mov	r1, r7
 8008ae8:	f7f7 ffd0 	bl	8000a8c <__aeabi_dcmplt>
 8008aec:	b150      	cbz	r0, 8008b04 <_dtoa_r+0x184>
 8008aee:	9800      	ldr	r0, [sp, #0]
 8008af0:	f7f7 fcf0 	bl	80004d4 <__aeabi_i2d>
 8008af4:	4632      	mov	r2, r6
 8008af6:	463b      	mov	r3, r7
 8008af8:	f7f7 ffbe 	bl	8000a78 <__aeabi_dcmpeq>
 8008afc:	b910      	cbnz	r0, 8008b04 <_dtoa_r+0x184>
 8008afe:	9b00      	ldr	r3, [sp, #0]
 8008b00:	3b01      	subs	r3, #1
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	9b00      	ldr	r3, [sp, #0]
 8008b06:	2b16      	cmp	r3, #22
 8008b08:	d85a      	bhi.n	8008bc0 <_dtoa_r+0x240>
 8008b0a:	9a00      	ldr	r2, [sp, #0]
 8008b0c:	4b57      	ldr	r3, [pc, #348]	; (8008c6c <_dtoa_r+0x2ec>)
 8008b0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b16:	ec51 0b19 	vmov	r0, r1, d9
 8008b1a:	f7f7 ffb7 	bl	8000a8c <__aeabi_dcmplt>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d050      	beq.n	8008bc4 <_dtoa_r+0x244>
 8008b22:	9b00      	ldr	r3, [sp, #0]
 8008b24:	3b01      	subs	r3, #1
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	2300      	movs	r3, #0
 8008b2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b2e:	1b5d      	subs	r5, r3, r5
 8008b30:	1e6b      	subs	r3, r5, #1
 8008b32:	9305      	str	r3, [sp, #20]
 8008b34:	bf45      	ittet	mi
 8008b36:	f1c5 0301 	rsbmi	r3, r5, #1
 8008b3a:	9304      	strmi	r3, [sp, #16]
 8008b3c:	2300      	movpl	r3, #0
 8008b3e:	2300      	movmi	r3, #0
 8008b40:	bf4c      	ite	mi
 8008b42:	9305      	strmi	r3, [sp, #20]
 8008b44:	9304      	strpl	r3, [sp, #16]
 8008b46:	9b00      	ldr	r3, [sp, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	db3d      	blt.n	8008bc8 <_dtoa_r+0x248>
 8008b4c:	9b05      	ldr	r3, [sp, #20]
 8008b4e:	9a00      	ldr	r2, [sp, #0]
 8008b50:	920a      	str	r2, [sp, #40]	; 0x28
 8008b52:	4413      	add	r3, r2
 8008b54:	9305      	str	r3, [sp, #20]
 8008b56:	2300      	movs	r3, #0
 8008b58:	9307      	str	r3, [sp, #28]
 8008b5a:	9b06      	ldr	r3, [sp, #24]
 8008b5c:	2b09      	cmp	r3, #9
 8008b5e:	f200 8089 	bhi.w	8008c74 <_dtoa_r+0x2f4>
 8008b62:	2b05      	cmp	r3, #5
 8008b64:	bfc4      	itt	gt
 8008b66:	3b04      	subgt	r3, #4
 8008b68:	9306      	strgt	r3, [sp, #24]
 8008b6a:	9b06      	ldr	r3, [sp, #24]
 8008b6c:	f1a3 0302 	sub.w	r3, r3, #2
 8008b70:	bfcc      	ite	gt
 8008b72:	2500      	movgt	r5, #0
 8008b74:	2501      	movle	r5, #1
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	f200 8087 	bhi.w	8008c8a <_dtoa_r+0x30a>
 8008b7c:	e8df f003 	tbb	[pc, r3]
 8008b80:	59383a2d 	.word	0x59383a2d
 8008b84:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008b88:	441d      	add	r5, r3
 8008b8a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008b8e:	2b20      	cmp	r3, #32
 8008b90:	bfc1      	itttt	gt
 8008b92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b96:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008b9a:	fa0b f303 	lslgt.w	r3, fp, r3
 8008b9e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008ba2:	bfda      	itte	le
 8008ba4:	f1c3 0320 	rsble	r3, r3, #32
 8008ba8:	fa06 f003 	lslle.w	r0, r6, r3
 8008bac:	4318      	orrgt	r0, r3
 8008bae:	f7f7 fc81 	bl	80004b4 <__aeabi_ui2d>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	4606      	mov	r6, r0
 8008bb6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008bba:	3d01      	subs	r5, #1
 8008bbc:	930e      	str	r3, [sp, #56]	; 0x38
 8008bbe:	e76a      	b.n	8008a96 <_dtoa_r+0x116>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e7b2      	b.n	8008b2a <_dtoa_r+0x1aa>
 8008bc4:	900b      	str	r0, [sp, #44]	; 0x2c
 8008bc6:	e7b1      	b.n	8008b2c <_dtoa_r+0x1ac>
 8008bc8:	9b04      	ldr	r3, [sp, #16]
 8008bca:	9a00      	ldr	r2, [sp, #0]
 8008bcc:	1a9b      	subs	r3, r3, r2
 8008bce:	9304      	str	r3, [sp, #16]
 8008bd0:	4253      	negs	r3, r2
 8008bd2:	9307      	str	r3, [sp, #28]
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8008bd8:	e7bf      	b.n	8008b5a <_dtoa_r+0x1da>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	9308      	str	r3, [sp, #32]
 8008bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	dc55      	bgt.n	8008c90 <_dtoa_r+0x310>
 8008be4:	2301      	movs	r3, #1
 8008be6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008bea:	461a      	mov	r2, r3
 8008bec:	9209      	str	r2, [sp, #36]	; 0x24
 8008bee:	e00c      	b.n	8008c0a <_dtoa_r+0x28a>
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e7f3      	b.n	8008bdc <_dtoa_r+0x25c>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bf8:	9308      	str	r3, [sp, #32]
 8008bfa:	9b00      	ldr	r3, [sp, #0]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	9302      	str	r3, [sp, #8]
 8008c00:	3301      	adds	r3, #1
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	9303      	str	r3, [sp, #12]
 8008c06:	bfb8      	it	lt
 8008c08:	2301      	movlt	r3, #1
 8008c0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	6042      	str	r2, [r0, #4]
 8008c10:	2204      	movs	r2, #4
 8008c12:	f102 0614 	add.w	r6, r2, #20
 8008c16:	429e      	cmp	r6, r3
 8008c18:	6841      	ldr	r1, [r0, #4]
 8008c1a:	d93d      	bls.n	8008c98 <_dtoa_r+0x318>
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	f000 fdef 	bl	8009800 <_Balloc>
 8008c22:	9001      	str	r0, [sp, #4]
 8008c24:	2800      	cmp	r0, #0
 8008c26:	d13b      	bne.n	8008ca0 <_dtoa_r+0x320>
 8008c28:	4b11      	ldr	r3, [pc, #68]	; (8008c70 <_dtoa_r+0x2f0>)
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008c30:	e6c0      	b.n	80089b4 <_dtoa_r+0x34>
 8008c32:	2301      	movs	r3, #1
 8008c34:	e7df      	b.n	8008bf6 <_dtoa_r+0x276>
 8008c36:	bf00      	nop
 8008c38:	636f4361 	.word	0x636f4361
 8008c3c:	3fd287a7 	.word	0x3fd287a7
 8008c40:	8b60c8b3 	.word	0x8b60c8b3
 8008c44:	3fc68a28 	.word	0x3fc68a28
 8008c48:	509f79fb 	.word	0x509f79fb
 8008c4c:	3fd34413 	.word	0x3fd34413
 8008c50:	0800a6a9 	.word	0x0800a6a9
 8008c54:	0800a6c0 	.word	0x0800a6c0
 8008c58:	7ff00000 	.word	0x7ff00000
 8008c5c:	0800a6a5 	.word	0x0800a6a5
 8008c60:	0800a69c 	.word	0x0800a69c
 8008c64:	0800a679 	.word	0x0800a679
 8008c68:	3ff80000 	.word	0x3ff80000
 8008c6c:	0800a7b0 	.word	0x0800a7b0
 8008c70:	0800a71b 	.word	0x0800a71b
 8008c74:	2501      	movs	r5, #1
 8008c76:	2300      	movs	r3, #0
 8008c78:	9306      	str	r3, [sp, #24]
 8008c7a:	9508      	str	r5, [sp, #32]
 8008c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c84:	2200      	movs	r2, #0
 8008c86:	2312      	movs	r3, #18
 8008c88:	e7b0      	b.n	8008bec <_dtoa_r+0x26c>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	9308      	str	r3, [sp, #32]
 8008c8e:	e7f5      	b.n	8008c7c <_dtoa_r+0x2fc>
 8008c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c96:	e7b8      	b.n	8008c0a <_dtoa_r+0x28a>
 8008c98:	3101      	adds	r1, #1
 8008c9a:	6041      	str	r1, [r0, #4]
 8008c9c:	0052      	lsls	r2, r2, #1
 8008c9e:	e7b8      	b.n	8008c12 <_dtoa_r+0x292>
 8008ca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ca2:	9a01      	ldr	r2, [sp, #4]
 8008ca4:	601a      	str	r2, [r3, #0]
 8008ca6:	9b03      	ldr	r3, [sp, #12]
 8008ca8:	2b0e      	cmp	r3, #14
 8008caa:	f200 809d 	bhi.w	8008de8 <_dtoa_r+0x468>
 8008cae:	2d00      	cmp	r5, #0
 8008cb0:	f000 809a 	beq.w	8008de8 <_dtoa_r+0x468>
 8008cb4:	9b00      	ldr	r3, [sp, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	dd32      	ble.n	8008d20 <_dtoa_r+0x3a0>
 8008cba:	4ab7      	ldr	r2, [pc, #732]	; (8008f98 <_dtoa_r+0x618>)
 8008cbc:	f003 030f 	and.w	r3, r3, #15
 8008cc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008cc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008cc8:	9b00      	ldr	r3, [sp, #0]
 8008cca:	05d8      	lsls	r0, r3, #23
 8008ccc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008cd0:	d516      	bpl.n	8008d00 <_dtoa_r+0x380>
 8008cd2:	4bb2      	ldr	r3, [pc, #712]	; (8008f9c <_dtoa_r+0x61c>)
 8008cd4:	ec51 0b19 	vmov	r0, r1, d9
 8008cd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008cdc:	f7f7 fd8e 	bl	80007fc <__aeabi_ddiv>
 8008ce0:	f007 070f 	and.w	r7, r7, #15
 8008ce4:	4682      	mov	sl, r0
 8008ce6:	468b      	mov	fp, r1
 8008ce8:	2503      	movs	r5, #3
 8008cea:	4eac      	ldr	r6, [pc, #688]	; (8008f9c <_dtoa_r+0x61c>)
 8008cec:	b957      	cbnz	r7, 8008d04 <_dtoa_r+0x384>
 8008cee:	4642      	mov	r2, r8
 8008cf0:	464b      	mov	r3, r9
 8008cf2:	4650      	mov	r0, sl
 8008cf4:	4659      	mov	r1, fp
 8008cf6:	f7f7 fd81 	bl	80007fc <__aeabi_ddiv>
 8008cfa:	4682      	mov	sl, r0
 8008cfc:	468b      	mov	fp, r1
 8008cfe:	e028      	b.n	8008d52 <_dtoa_r+0x3d2>
 8008d00:	2502      	movs	r5, #2
 8008d02:	e7f2      	b.n	8008cea <_dtoa_r+0x36a>
 8008d04:	07f9      	lsls	r1, r7, #31
 8008d06:	d508      	bpl.n	8008d1a <_dtoa_r+0x39a>
 8008d08:	4640      	mov	r0, r8
 8008d0a:	4649      	mov	r1, r9
 8008d0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d10:	f7f7 fc4a 	bl	80005a8 <__aeabi_dmul>
 8008d14:	3501      	adds	r5, #1
 8008d16:	4680      	mov	r8, r0
 8008d18:	4689      	mov	r9, r1
 8008d1a:	107f      	asrs	r7, r7, #1
 8008d1c:	3608      	adds	r6, #8
 8008d1e:	e7e5      	b.n	8008cec <_dtoa_r+0x36c>
 8008d20:	f000 809b 	beq.w	8008e5a <_dtoa_r+0x4da>
 8008d24:	9b00      	ldr	r3, [sp, #0]
 8008d26:	4f9d      	ldr	r7, [pc, #628]	; (8008f9c <_dtoa_r+0x61c>)
 8008d28:	425e      	negs	r6, r3
 8008d2a:	4b9b      	ldr	r3, [pc, #620]	; (8008f98 <_dtoa_r+0x618>)
 8008d2c:	f006 020f 	and.w	r2, r6, #15
 8008d30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d38:	ec51 0b19 	vmov	r0, r1, d9
 8008d3c:	f7f7 fc34 	bl	80005a8 <__aeabi_dmul>
 8008d40:	1136      	asrs	r6, r6, #4
 8008d42:	4682      	mov	sl, r0
 8008d44:	468b      	mov	fp, r1
 8008d46:	2300      	movs	r3, #0
 8008d48:	2502      	movs	r5, #2
 8008d4a:	2e00      	cmp	r6, #0
 8008d4c:	d17a      	bne.n	8008e44 <_dtoa_r+0x4c4>
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1d3      	bne.n	8008cfa <_dtoa_r+0x37a>
 8008d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f000 8082 	beq.w	8008e5e <_dtoa_r+0x4de>
 8008d5a:	4b91      	ldr	r3, [pc, #580]	; (8008fa0 <_dtoa_r+0x620>)
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	4650      	mov	r0, sl
 8008d60:	4659      	mov	r1, fp
 8008d62:	f7f7 fe93 	bl	8000a8c <__aeabi_dcmplt>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	d079      	beq.n	8008e5e <_dtoa_r+0x4de>
 8008d6a:	9b03      	ldr	r3, [sp, #12]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d076      	beq.n	8008e5e <_dtoa_r+0x4de>
 8008d70:	9b02      	ldr	r3, [sp, #8]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	dd36      	ble.n	8008de4 <_dtoa_r+0x464>
 8008d76:	9b00      	ldr	r3, [sp, #0]
 8008d78:	4650      	mov	r0, sl
 8008d7a:	4659      	mov	r1, fp
 8008d7c:	1e5f      	subs	r7, r3, #1
 8008d7e:	2200      	movs	r2, #0
 8008d80:	4b88      	ldr	r3, [pc, #544]	; (8008fa4 <_dtoa_r+0x624>)
 8008d82:	f7f7 fc11 	bl	80005a8 <__aeabi_dmul>
 8008d86:	9e02      	ldr	r6, [sp, #8]
 8008d88:	4682      	mov	sl, r0
 8008d8a:	468b      	mov	fp, r1
 8008d8c:	3501      	adds	r5, #1
 8008d8e:	4628      	mov	r0, r5
 8008d90:	f7f7 fba0 	bl	80004d4 <__aeabi_i2d>
 8008d94:	4652      	mov	r2, sl
 8008d96:	465b      	mov	r3, fp
 8008d98:	f7f7 fc06 	bl	80005a8 <__aeabi_dmul>
 8008d9c:	4b82      	ldr	r3, [pc, #520]	; (8008fa8 <_dtoa_r+0x628>)
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f7f7 fa4c 	bl	800023c <__adddf3>
 8008da4:	46d0      	mov	r8, sl
 8008da6:	46d9      	mov	r9, fp
 8008da8:	4682      	mov	sl, r0
 8008daa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008dae:	2e00      	cmp	r6, #0
 8008db0:	d158      	bne.n	8008e64 <_dtoa_r+0x4e4>
 8008db2:	4b7e      	ldr	r3, [pc, #504]	; (8008fac <_dtoa_r+0x62c>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	4640      	mov	r0, r8
 8008db8:	4649      	mov	r1, r9
 8008dba:	f7f7 fa3d 	bl	8000238 <__aeabi_dsub>
 8008dbe:	4652      	mov	r2, sl
 8008dc0:	465b      	mov	r3, fp
 8008dc2:	4680      	mov	r8, r0
 8008dc4:	4689      	mov	r9, r1
 8008dc6:	f7f7 fe7f 	bl	8000ac8 <__aeabi_dcmpgt>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	f040 8295 	bne.w	80092fa <_dtoa_r+0x97a>
 8008dd0:	4652      	mov	r2, sl
 8008dd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008dd6:	4640      	mov	r0, r8
 8008dd8:	4649      	mov	r1, r9
 8008dda:	f7f7 fe57 	bl	8000a8c <__aeabi_dcmplt>
 8008dde:	2800      	cmp	r0, #0
 8008de0:	f040 8289 	bne.w	80092f6 <_dtoa_r+0x976>
 8008de4:	ec5b ab19 	vmov	sl, fp, d9
 8008de8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f2c0 8148 	blt.w	8009080 <_dtoa_r+0x700>
 8008df0:	9a00      	ldr	r2, [sp, #0]
 8008df2:	2a0e      	cmp	r2, #14
 8008df4:	f300 8144 	bgt.w	8009080 <_dtoa_r+0x700>
 8008df8:	4b67      	ldr	r3, [pc, #412]	; (8008f98 <_dtoa_r+0x618>)
 8008dfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f280 80d5 	bge.w	8008fb4 <_dtoa_r+0x634>
 8008e0a:	9b03      	ldr	r3, [sp, #12]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f300 80d1 	bgt.w	8008fb4 <_dtoa_r+0x634>
 8008e12:	f040 826f 	bne.w	80092f4 <_dtoa_r+0x974>
 8008e16:	4b65      	ldr	r3, [pc, #404]	; (8008fac <_dtoa_r+0x62c>)
 8008e18:	2200      	movs	r2, #0
 8008e1a:	4640      	mov	r0, r8
 8008e1c:	4649      	mov	r1, r9
 8008e1e:	f7f7 fbc3 	bl	80005a8 <__aeabi_dmul>
 8008e22:	4652      	mov	r2, sl
 8008e24:	465b      	mov	r3, fp
 8008e26:	f7f7 fe45 	bl	8000ab4 <__aeabi_dcmpge>
 8008e2a:	9e03      	ldr	r6, [sp, #12]
 8008e2c:	4637      	mov	r7, r6
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	f040 8245 	bne.w	80092be <_dtoa_r+0x93e>
 8008e34:	9d01      	ldr	r5, [sp, #4]
 8008e36:	2331      	movs	r3, #49	; 0x31
 8008e38:	f805 3b01 	strb.w	r3, [r5], #1
 8008e3c:	9b00      	ldr	r3, [sp, #0]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	e240      	b.n	80092c6 <_dtoa_r+0x946>
 8008e44:	07f2      	lsls	r2, r6, #31
 8008e46:	d505      	bpl.n	8008e54 <_dtoa_r+0x4d4>
 8008e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e4c:	f7f7 fbac 	bl	80005a8 <__aeabi_dmul>
 8008e50:	3501      	adds	r5, #1
 8008e52:	2301      	movs	r3, #1
 8008e54:	1076      	asrs	r6, r6, #1
 8008e56:	3708      	adds	r7, #8
 8008e58:	e777      	b.n	8008d4a <_dtoa_r+0x3ca>
 8008e5a:	2502      	movs	r5, #2
 8008e5c:	e779      	b.n	8008d52 <_dtoa_r+0x3d2>
 8008e5e:	9f00      	ldr	r7, [sp, #0]
 8008e60:	9e03      	ldr	r6, [sp, #12]
 8008e62:	e794      	b.n	8008d8e <_dtoa_r+0x40e>
 8008e64:	9901      	ldr	r1, [sp, #4]
 8008e66:	4b4c      	ldr	r3, [pc, #304]	; (8008f98 <_dtoa_r+0x618>)
 8008e68:	4431      	add	r1, r6
 8008e6a:	910d      	str	r1, [sp, #52]	; 0x34
 8008e6c:	9908      	ldr	r1, [sp, #32]
 8008e6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008e72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e76:	2900      	cmp	r1, #0
 8008e78:	d043      	beq.n	8008f02 <_dtoa_r+0x582>
 8008e7a:	494d      	ldr	r1, [pc, #308]	; (8008fb0 <_dtoa_r+0x630>)
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	f7f7 fcbd 	bl	80007fc <__aeabi_ddiv>
 8008e82:	4652      	mov	r2, sl
 8008e84:	465b      	mov	r3, fp
 8008e86:	f7f7 f9d7 	bl	8000238 <__aeabi_dsub>
 8008e8a:	9d01      	ldr	r5, [sp, #4]
 8008e8c:	4682      	mov	sl, r0
 8008e8e:	468b      	mov	fp, r1
 8008e90:	4649      	mov	r1, r9
 8008e92:	4640      	mov	r0, r8
 8008e94:	f7f7 fe38 	bl	8000b08 <__aeabi_d2iz>
 8008e98:	4606      	mov	r6, r0
 8008e9a:	f7f7 fb1b 	bl	80004d4 <__aeabi_i2d>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	4640      	mov	r0, r8
 8008ea4:	4649      	mov	r1, r9
 8008ea6:	f7f7 f9c7 	bl	8000238 <__aeabi_dsub>
 8008eaa:	3630      	adds	r6, #48	; 0x30
 8008eac:	f805 6b01 	strb.w	r6, [r5], #1
 8008eb0:	4652      	mov	r2, sl
 8008eb2:	465b      	mov	r3, fp
 8008eb4:	4680      	mov	r8, r0
 8008eb6:	4689      	mov	r9, r1
 8008eb8:	f7f7 fde8 	bl	8000a8c <__aeabi_dcmplt>
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	d163      	bne.n	8008f88 <_dtoa_r+0x608>
 8008ec0:	4642      	mov	r2, r8
 8008ec2:	464b      	mov	r3, r9
 8008ec4:	4936      	ldr	r1, [pc, #216]	; (8008fa0 <_dtoa_r+0x620>)
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	f7f7 f9b6 	bl	8000238 <__aeabi_dsub>
 8008ecc:	4652      	mov	r2, sl
 8008ece:	465b      	mov	r3, fp
 8008ed0:	f7f7 fddc 	bl	8000a8c <__aeabi_dcmplt>
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	f040 80b5 	bne.w	8009044 <_dtoa_r+0x6c4>
 8008eda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008edc:	429d      	cmp	r5, r3
 8008ede:	d081      	beq.n	8008de4 <_dtoa_r+0x464>
 8008ee0:	4b30      	ldr	r3, [pc, #192]	; (8008fa4 <_dtoa_r+0x624>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	4650      	mov	r0, sl
 8008ee6:	4659      	mov	r1, fp
 8008ee8:	f7f7 fb5e 	bl	80005a8 <__aeabi_dmul>
 8008eec:	4b2d      	ldr	r3, [pc, #180]	; (8008fa4 <_dtoa_r+0x624>)
 8008eee:	4682      	mov	sl, r0
 8008ef0:	468b      	mov	fp, r1
 8008ef2:	4640      	mov	r0, r8
 8008ef4:	4649      	mov	r1, r9
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f7f7 fb56 	bl	80005a8 <__aeabi_dmul>
 8008efc:	4680      	mov	r8, r0
 8008efe:	4689      	mov	r9, r1
 8008f00:	e7c6      	b.n	8008e90 <_dtoa_r+0x510>
 8008f02:	4650      	mov	r0, sl
 8008f04:	4659      	mov	r1, fp
 8008f06:	f7f7 fb4f 	bl	80005a8 <__aeabi_dmul>
 8008f0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f0c:	9d01      	ldr	r5, [sp, #4]
 8008f0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f10:	4682      	mov	sl, r0
 8008f12:	468b      	mov	fp, r1
 8008f14:	4649      	mov	r1, r9
 8008f16:	4640      	mov	r0, r8
 8008f18:	f7f7 fdf6 	bl	8000b08 <__aeabi_d2iz>
 8008f1c:	4606      	mov	r6, r0
 8008f1e:	f7f7 fad9 	bl	80004d4 <__aeabi_i2d>
 8008f22:	3630      	adds	r6, #48	; 0x30
 8008f24:	4602      	mov	r2, r0
 8008f26:	460b      	mov	r3, r1
 8008f28:	4640      	mov	r0, r8
 8008f2a:	4649      	mov	r1, r9
 8008f2c:	f7f7 f984 	bl	8000238 <__aeabi_dsub>
 8008f30:	f805 6b01 	strb.w	r6, [r5], #1
 8008f34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f36:	429d      	cmp	r5, r3
 8008f38:	4680      	mov	r8, r0
 8008f3a:	4689      	mov	r9, r1
 8008f3c:	f04f 0200 	mov.w	r2, #0
 8008f40:	d124      	bne.n	8008f8c <_dtoa_r+0x60c>
 8008f42:	4b1b      	ldr	r3, [pc, #108]	; (8008fb0 <_dtoa_r+0x630>)
 8008f44:	4650      	mov	r0, sl
 8008f46:	4659      	mov	r1, fp
 8008f48:	f7f7 f978 	bl	800023c <__adddf3>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	460b      	mov	r3, r1
 8008f50:	4640      	mov	r0, r8
 8008f52:	4649      	mov	r1, r9
 8008f54:	f7f7 fdb8 	bl	8000ac8 <__aeabi_dcmpgt>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	d173      	bne.n	8009044 <_dtoa_r+0x6c4>
 8008f5c:	4652      	mov	r2, sl
 8008f5e:	465b      	mov	r3, fp
 8008f60:	4913      	ldr	r1, [pc, #76]	; (8008fb0 <_dtoa_r+0x630>)
 8008f62:	2000      	movs	r0, #0
 8008f64:	f7f7 f968 	bl	8000238 <__aeabi_dsub>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	4640      	mov	r0, r8
 8008f6e:	4649      	mov	r1, r9
 8008f70:	f7f7 fd8c 	bl	8000a8c <__aeabi_dcmplt>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	f43f af35 	beq.w	8008de4 <_dtoa_r+0x464>
 8008f7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008f7c:	1e6b      	subs	r3, r5, #1
 8008f7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f84:	2b30      	cmp	r3, #48	; 0x30
 8008f86:	d0f8      	beq.n	8008f7a <_dtoa_r+0x5fa>
 8008f88:	9700      	str	r7, [sp, #0]
 8008f8a:	e049      	b.n	8009020 <_dtoa_r+0x6a0>
 8008f8c:	4b05      	ldr	r3, [pc, #20]	; (8008fa4 <_dtoa_r+0x624>)
 8008f8e:	f7f7 fb0b 	bl	80005a8 <__aeabi_dmul>
 8008f92:	4680      	mov	r8, r0
 8008f94:	4689      	mov	r9, r1
 8008f96:	e7bd      	b.n	8008f14 <_dtoa_r+0x594>
 8008f98:	0800a7b0 	.word	0x0800a7b0
 8008f9c:	0800a788 	.word	0x0800a788
 8008fa0:	3ff00000 	.word	0x3ff00000
 8008fa4:	40240000 	.word	0x40240000
 8008fa8:	401c0000 	.word	0x401c0000
 8008fac:	40140000 	.word	0x40140000
 8008fb0:	3fe00000 	.word	0x3fe00000
 8008fb4:	9d01      	ldr	r5, [sp, #4]
 8008fb6:	4656      	mov	r6, sl
 8008fb8:	465f      	mov	r7, fp
 8008fba:	4642      	mov	r2, r8
 8008fbc:	464b      	mov	r3, r9
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	4639      	mov	r1, r7
 8008fc2:	f7f7 fc1b 	bl	80007fc <__aeabi_ddiv>
 8008fc6:	f7f7 fd9f 	bl	8000b08 <__aeabi_d2iz>
 8008fca:	4682      	mov	sl, r0
 8008fcc:	f7f7 fa82 	bl	80004d4 <__aeabi_i2d>
 8008fd0:	4642      	mov	r2, r8
 8008fd2:	464b      	mov	r3, r9
 8008fd4:	f7f7 fae8 	bl	80005a8 <__aeabi_dmul>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	4630      	mov	r0, r6
 8008fde:	4639      	mov	r1, r7
 8008fe0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008fe4:	f7f7 f928 	bl	8000238 <__aeabi_dsub>
 8008fe8:	f805 6b01 	strb.w	r6, [r5], #1
 8008fec:	9e01      	ldr	r6, [sp, #4]
 8008fee:	9f03      	ldr	r7, [sp, #12]
 8008ff0:	1bae      	subs	r6, r5, r6
 8008ff2:	42b7      	cmp	r7, r6
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	d135      	bne.n	8009066 <_dtoa_r+0x6e6>
 8008ffa:	f7f7 f91f 	bl	800023c <__adddf3>
 8008ffe:	4642      	mov	r2, r8
 8009000:	464b      	mov	r3, r9
 8009002:	4606      	mov	r6, r0
 8009004:	460f      	mov	r7, r1
 8009006:	f7f7 fd5f 	bl	8000ac8 <__aeabi_dcmpgt>
 800900a:	b9d0      	cbnz	r0, 8009042 <_dtoa_r+0x6c2>
 800900c:	4642      	mov	r2, r8
 800900e:	464b      	mov	r3, r9
 8009010:	4630      	mov	r0, r6
 8009012:	4639      	mov	r1, r7
 8009014:	f7f7 fd30 	bl	8000a78 <__aeabi_dcmpeq>
 8009018:	b110      	cbz	r0, 8009020 <_dtoa_r+0x6a0>
 800901a:	f01a 0f01 	tst.w	sl, #1
 800901e:	d110      	bne.n	8009042 <_dtoa_r+0x6c2>
 8009020:	4620      	mov	r0, r4
 8009022:	ee18 1a10 	vmov	r1, s16
 8009026:	f000 fc2b 	bl	8009880 <_Bfree>
 800902a:	2300      	movs	r3, #0
 800902c:	9800      	ldr	r0, [sp, #0]
 800902e:	702b      	strb	r3, [r5, #0]
 8009030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009032:	3001      	adds	r0, #1
 8009034:	6018      	str	r0, [r3, #0]
 8009036:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009038:	2b00      	cmp	r3, #0
 800903a:	f43f acf1 	beq.w	8008a20 <_dtoa_r+0xa0>
 800903e:	601d      	str	r5, [r3, #0]
 8009040:	e4ee      	b.n	8008a20 <_dtoa_r+0xa0>
 8009042:	9f00      	ldr	r7, [sp, #0]
 8009044:	462b      	mov	r3, r5
 8009046:	461d      	mov	r5, r3
 8009048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800904c:	2a39      	cmp	r2, #57	; 0x39
 800904e:	d106      	bne.n	800905e <_dtoa_r+0x6de>
 8009050:	9a01      	ldr	r2, [sp, #4]
 8009052:	429a      	cmp	r2, r3
 8009054:	d1f7      	bne.n	8009046 <_dtoa_r+0x6c6>
 8009056:	9901      	ldr	r1, [sp, #4]
 8009058:	2230      	movs	r2, #48	; 0x30
 800905a:	3701      	adds	r7, #1
 800905c:	700a      	strb	r2, [r1, #0]
 800905e:	781a      	ldrb	r2, [r3, #0]
 8009060:	3201      	adds	r2, #1
 8009062:	701a      	strb	r2, [r3, #0]
 8009064:	e790      	b.n	8008f88 <_dtoa_r+0x608>
 8009066:	4ba6      	ldr	r3, [pc, #664]	; (8009300 <_dtoa_r+0x980>)
 8009068:	2200      	movs	r2, #0
 800906a:	f7f7 fa9d 	bl	80005a8 <__aeabi_dmul>
 800906e:	2200      	movs	r2, #0
 8009070:	2300      	movs	r3, #0
 8009072:	4606      	mov	r6, r0
 8009074:	460f      	mov	r7, r1
 8009076:	f7f7 fcff 	bl	8000a78 <__aeabi_dcmpeq>
 800907a:	2800      	cmp	r0, #0
 800907c:	d09d      	beq.n	8008fba <_dtoa_r+0x63a>
 800907e:	e7cf      	b.n	8009020 <_dtoa_r+0x6a0>
 8009080:	9a08      	ldr	r2, [sp, #32]
 8009082:	2a00      	cmp	r2, #0
 8009084:	f000 80d7 	beq.w	8009236 <_dtoa_r+0x8b6>
 8009088:	9a06      	ldr	r2, [sp, #24]
 800908a:	2a01      	cmp	r2, #1
 800908c:	f300 80ba 	bgt.w	8009204 <_dtoa_r+0x884>
 8009090:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009092:	2a00      	cmp	r2, #0
 8009094:	f000 80b2 	beq.w	80091fc <_dtoa_r+0x87c>
 8009098:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800909c:	9e07      	ldr	r6, [sp, #28]
 800909e:	9d04      	ldr	r5, [sp, #16]
 80090a0:	9a04      	ldr	r2, [sp, #16]
 80090a2:	441a      	add	r2, r3
 80090a4:	9204      	str	r2, [sp, #16]
 80090a6:	9a05      	ldr	r2, [sp, #20]
 80090a8:	2101      	movs	r1, #1
 80090aa:	441a      	add	r2, r3
 80090ac:	4620      	mov	r0, r4
 80090ae:	9205      	str	r2, [sp, #20]
 80090b0:	f000 fc9e 	bl	80099f0 <__i2b>
 80090b4:	4607      	mov	r7, r0
 80090b6:	2d00      	cmp	r5, #0
 80090b8:	dd0c      	ble.n	80090d4 <_dtoa_r+0x754>
 80090ba:	9b05      	ldr	r3, [sp, #20]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	dd09      	ble.n	80090d4 <_dtoa_r+0x754>
 80090c0:	42ab      	cmp	r3, r5
 80090c2:	9a04      	ldr	r2, [sp, #16]
 80090c4:	bfa8      	it	ge
 80090c6:	462b      	movge	r3, r5
 80090c8:	1ad2      	subs	r2, r2, r3
 80090ca:	9204      	str	r2, [sp, #16]
 80090cc:	9a05      	ldr	r2, [sp, #20]
 80090ce:	1aed      	subs	r5, r5, r3
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	9305      	str	r3, [sp, #20]
 80090d4:	9b07      	ldr	r3, [sp, #28]
 80090d6:	b31b      	cbz	r3, 8009120 <_dtoa_r+0x7a0>
 80090d8:	9b08      	ldr	r3, [sp, #32]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f000 80af 	beq.w	800923e <_dtoa_r+0x8be>
 80090e0:	2e00      	cmp	r6, #0
 80090e2:	dd13      	ble.n	800910c <_dtoa_r+0x78c>
 80090e4:	4639      	mov	r1, r7
 80090e6:	4632      	mov	r2, r6
 80090e8:	4620      	mov	r0, r4
 80090ea:	f000 fd41 	bl	8009b70 <__pow5mult>
 80090ee:	ee18 2a10 	vmov	r2, s16
 80090f2:	4601      	mov	r1, r0
 80090f4:	4607      	mov	r7, r0
 80090f6:	4620      	mov	r0, r4
 80090f8:	f000 fc90 	bl	8009a1c <__multiply>
 80090fc:	ee18 1a10 	vmov	r1, s16
 8009100:	4680      	mov	r8, r0
 8009102:	4620      	mov	r0, r4
 8009104:	f000 fbbc 	bl	8009880 <_Bfree>
 8009108:	ee08 8a10 	vmov	s16, r8
 800910c:	9b07      	ldr	r3, [sp, #28]
 800910e:	1b9a      	subs	r2, r3, r6
 8009110:	d006      	beq.n	8009120 <_dtoa_r+0x7a0>
 8009112:	ee18 1a10 	vmov	r1, s16
 8009116:	4620      	mov	r0, r4
 8009118:	f000 fd2a 	bl	8009b70 <__pow5mult>
 800911c:	ee08 0a10 	vmov	s16, r0
 8009120:	2101      	movs	r1, #1
 8009122:	4620      	mov	r0, r4
 8009124:	f000 fc64 	bl	80099f0 <__i2b>
 8009128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800912a:	2b00      	cmp	r3, #0
 800912c:	4606      	mov	r6, r0
 800912e:	f340 8088 	ble.w	8009242 <_dtoa_r+0x8c2>
 8009132:	461a      	mov	r2, r3
 8009134:	4601      	mov	r1, r0
 8009136:	4620      	mov	r0, r4
 8009138:	f000 fd1a 	bl	8009b70 <__pow5mult>
 800913c:	9b06      	ldr	r3, [sp, #24]
 800913e:	2b01      	cmp	r3, #1
 8009140:	4606      	mov	r6, r0
 8009142:	f340 8081 	ble.w	8009248 <_dtoa_r+0x8c8>
 8009146:	f04f 0800 	mov.w	r8, #0
 800914a:	6933      	ldr	r3, [r6, #16]
 800914c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009150:	6918      	ldr	r0, [r3, #16]
 8009152:	f000 fbfd 	bl	8009950 <__hi0bits>
 8009156:	f1c0 0020 	rsb	r0, r0, #32
 800915a:	9b05      	ldr	r3, [sp, #20]
 800915c:	4418      	add	r0, r3
 800915e:	f010 001f 	ands.w	r0, r0, #31
 8009162:	f000 8092 	beq.w	800928a <_dtoa_r+0x90a>
 8009166:	f1c0 0320 	rsb	r3, r0, #32
 800916a:	2b04      	cmp	r3, #4
 800916c:	f340 808a 	ble.w	8009284 <_dtoa_r+0x904>
 8009170:	f1c0 001c 	rsb	r0, r0, #28
 8009174:	9b04      	ldr	r3, [sp, #16]
 8009176:	4403      	add	r3, r0
 8009178:	9304      	str	r3, [sp, #16]
 800917a:	9b05      	ldr	r3, [sp, #20]
 800917c:	4403      	add	r3, r0
 800917e:	4405      	add	r5, r0
 8009180:	9305      	str	r3, [sp, #20]
 8009182:	9b04      	ldr	r3, [sp, #16]
 8009184:	2b00      	cmp	r3, #0
 8009186:	dd07      	ble.n	8009198 <_dtoa_r+0x818>
 8009188:	ee18 1a10 	vmov	r1, s16
 800918c:	461a      	mov	r2, r3
 800918e:	4620      	mov	r0, r4
 8009190:	f000 fd48 	bl	8009c24 <__lshift>
 8009194:	ee08 0a10 	vmov	s16, r0
 8009198:	9b05      	ldr	r3, [sp, #20]
 800919a:	2b00      	cmp	r3, #0
 800919c:	dd05      	ble.n	80091aa <_dtoa_r+0x82a>
 800919e:	4631      	mov	r1, r6
 80091a0:	461a      	mov	r2, r3
 80091a2:	4620      	mov	r0, r4
 80091a4:	f000 fd3e 	bl	8009c24 <__lshift>
 80091a8:	4606      	mov	r6, r0
 80091aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d06e      	beq.n	800928e <_dtoa_r+0x90e>
 80091b0:	ee18 0a10 	vmov	r0, s16
 80091b4:	4631      	mov	r1, r6
 80091b6:	f000 fda5 	bl	8009d04 <__mcmp>
 80091ba:	2800      	cmp	r0, #0
 80091bc:	da67      	bge.n	800928e <_dtoa_r+0x90e>
 80091be:	9b00      	ldr	r3, [sp, #0]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	ee18 1a10 	vmov	r1, s16
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	220a      	movs	r2, #10
 80091ca:	2300      	movs	r3, #0
 80091cc:	4620      	mov	r0, r4
 80091ce:	f000 fb79 	bl	80098c4 <__multadd>
 80091d2:	9b08      	ldr	r3, [sp, #32]
 80091d4:	ee08 0a10 	vmov	s16, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 81b1 	beq.w	8009540 <_dtoa_r+0xbc0>
 80091de:	2300      	movs	r3, #0
 80091e0:	4639      	mov	r1, r7
 80091e2:	220a      	movs	r2, #10
 80091e4:	4620      	mov	r0, r4
 80091e6:	f000 fb6d 	bl	80098c4 <__multadd>
 80091ea:	9b02      	ldr	r3, [sp, #8]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	4607      	mov	r7, r0
 80091f0:	f300 808e 	bgt.w	8009310 <_dtoa_r+0x990>
 80091f4:	9b06      	ldr	r3, [sp, #24]
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	dc51      	bgt.n	800929e <_dtoa_r+0x91e>
 80091fa:	e089      	b.n	8009310 <_dtoa_r+0x990>
 80091fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009202:	e74b      	b.n	800909c <_dtoa_r+0x71c>
 8009204:	9b03      	ldr	r3, [sp, #12]
 8009206:	1e5e      	subs	r6, r3, #1
 8009208:	9b07      	ldr	r3, [sp, #28]
 800920a:	42b3      	cmp	r3, r6
 800920c:	bfbf      	itttt	lt
 800920e:	9b07      	ldrlt	r3, [sp, #28]
 8009210:	9607      	strlt	r6, [sp, #28]
 8009212:	1af2      	sublt	r2, r6, r3
 8009214:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009216:	bfb6      	itet	lt
 8009218:	189b      	addlt	r3, r3, r2
 800921a:	1b9e      	subge	r6, r3, r6
 800921c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800921e:	9b03      	ldr	r3, [sp, #12]
 8009220:	bfb8      	it	lt
 8009222:	2600      	movlt	r6, #0
 8009224:	2b00      	cmp	r3, #0
 8009226:	bfb7      	itett	lt
 8009228:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800922c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009230:	1a9d      	sublt	r5, r3, r2
 8009232:	2300      	movlt	r3, #0
 8009234:	e734      	b.n	80090a0 <_dtoa_r+0x720>
 8009236:	9e07      	ldr	r6, [sp, #28]
 8009238:	9d04      	ldr	r5, [sp, #16]
 800923a:	9f08      	ldr	r7, [sp, #32]
 800923c:	e73b      	b.n	80090b6 <_dtoa_r+0x736>
 800923e:	9a07      	ldr	r2, [sp, #28]
 8009240:	e767      	b.n	8009112 <_dtoa_r+0x792>
 8009242:	9b06      	ldr	r3, [sp, #24]
 8009244:	2b01      	cmp	r3, #1
 8009246:	dc18      	bgt.n	800927a <_dtoa_r+0x8fa>
 8009248:	f1ba 0f00 	cmp.w	sl, #0
 800924c:	d115      	bne.n	800927a <_dtoa_r+0x8fa>
 800924e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009252:	b993      	cbnz	r3, 800927a <_dtoa_r+0x8fa>
 8009254:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009258:	0d1b      	lsrs	r3, r3, #20
 800925a:	051b      	lsls	r3, r3, #20
 800925c:	b183      	cbz	r3, 8009280 <_dtoa_r+0x900>
 800925e:	9b04      	ldr	r3, [sp, #16]
 8009260:	3301      	adds	r3, #1
 8009262:	9304      	str	r3, [sp, #16]
 8009264:	9b05      	ldr	r3, [sp, #20]
 8009266:	3301      	adds	r3, #1
 8009268:	9305      	str	r3, [sp, #20]
 800926a:	f04f 0801 	mov.w	r8, #1
 800926e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009270:	2b00      	cmp	r3, #0
 8009272:	f47f af6a 	bne.w	800914a <_dtoa_r+0x7ca>
 8009276:	2001      	movs	r0, #1
 8009278:	e76f      	b.n	800915a <_dtoa_r+0x7da>
 800927a:	f04f 0800 	mov.w	r8, #0
 800927e:	e7f6      	b.n	800926e <_dtoa_r+0x8ee>
 8009280:	4698      	mov	r8, r3
 8009282:	e7f4      	b.n	800926e <_dtoa_r+0x8ee>
 8009284:	f43f af7d 	beq.w	8009182 <_dtoa_r+0x802>
 8009288:	4618      	mov	r0, r3
 800928a:	301c      	adds	r0, #28
 800928c:	e772      	b.n	8009174 <_dtoa_r+0x7f4>
 800928e:	9b03      	ldr	r3, [sp, #12]
 8009290:	2b00      	cmp	r3, #0
 8009292:	dc37      	bgt.n	8009304 <_dtoa_r+0x984>
 8009294:	9b06      	ldr	r3, [sp, #24]
 8009296:	2b02      	cmp	r3, #2
 8009298:	dd34      	ble.n	8009304 <_dtoa_r+0x984>
 800929a:	9b03      	ldr	r3, [sp, #12]
 800929c:	9302      	str	r3, [sp, #8]
 800929e:	9b02      	ldr	r3, [sp, #8]
 80092a0:	b96b      	cbnz	r3, 80092be <_dtoa_r+0x93e>
 80092a2:	4631      	mov	r1, r6
 80092a4:	2205      	movs	r2, #5
 80092a6:	4620      	mov	r0, r4
 80092a8:	f000 fb0c 	bl	80098c4 <__multadd>
 80092ac:	4601      	mov	r1, r0
 80092ae:	4606      	mov	r6, r0
 80092b0:	ee18 0a10 	vmov	r0, s16
 80092b4:	f000 fd26 	bl	8009d04 <__mcmp>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	f73f adbb 	bgt.w	8008e34 <_dtoa_r+0x4b4>
 80092be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092c0:	9d01      	ldr	r5, [sp, #4]
 80092c2:	43db      	mvns	r3, r3
 80092c4:	9300      	str	r3, [sp, #0]
 80092c6:	f04f 0800 	mov.w	r8, #0
 80092ca:	4631      	mov	r1, r6
 80092cc:	4620      	mov	r0, r4
 80092ce:	f000 fad7 	bl	8009880 <_Bfree>
 80092d2:	2f00      	cmp	r7, #0
 80092d4:	f43f aea4 	beq.w	8009020 <_dtoa_r+0x6a0>
 80092d8:	f1b8 0f00 	cmp.w	r8, #0
 80092dc:	d005      	beq.n	80092ea <_dtoa_r+0x96a>
 80092de:	45b8      	cmp	r8, r7
 80092e0:	d003      	beq.n	80092ea <_dtoa_r+0x96a>
 80092e2:	4641      	mov	r1, r8
 80092e4:	4620      	mov	r0, r4
 80092e6:	f000 facb 	bl	8009880 <_Bfree>
 80092ea:	4639      	mov	r1, r7
 80092ec:	4620      	mov	r0, r4
 80092ee:	f000 fac7 	bl	8009880 <_Bfree>
 80092f2:	e695      	b.n	8009020 <_dtoa_r+0x6a0>
 80092f4:	2600      	movs	r6, #0
 80092f6:	4637      	mov	r7, r6
 80092f8:	e7e1      	b.n	80092be <_dtoa_r+0x93e>
 80092fa:	9700      	str	r7, [sp, #0]
 80092fc:	4637      	mov	r7, r6
 80092fe:	e599      	b.n	8008e34 <_dtoa_r+0x4b4>
 8009300:	40240000 	.word	0x40240000
 8009304:	9b08      	ldr	r3, [sp, #32]
 8009306:	2b00      	cmp	r3, #0
 8009308:	f000 80ca 	beq.w	80094a0 <_dtoa_r+0xb20>
 800930c:	9b03      	ldr	r3, [sp, #12]
 800930e:	9302      	str	r3, [sp, #8]
 8009310:	2d00      	cmp	r5, #0
 8009312:	dd05      	ble.n	8009320 <_dtoa_r+0x9a0>
 8009314:	4639      	mov	r1, r7
 8009316:	462a      	mov	r2, r5
 8009318:	4620      	mov	r0, r4
 800931a:	f000 fc83 	bl	8009c24 <__lshift>
 800931e:	4607      	mov	r7, r0
 8009320:	f1b8 0f00 	cmp.w	r8, #0
 8009324:	d05b      	beq.n	80093de <_dtoa_r+0xa5e>
 8009326:	6879      	ldr	r1, [r7, #4]
 8009328:	4620      	mov	r0, r4
 800932a:	f000 fa69 	bl	8009800 <_Balloc>
 800932e:	4605      	mov	r5, r0
 8009330:	b928      	cbnz	r0, 800933e <_dtoa_r+0x9be>
 8009332:	4b87      	ldr	r3, [pc, #540]	; (8009550 <_dtoa_r+0xbd0>)
 8009334:	4602      	mov	r2, r0
 8009336:	f240 21ea 	movw	r1, #746	; 0x2ea
 800933a:	f7ff bb3b 	b.w	80089b4 <_dtoa_r+0x34>
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	3202      	adds	r2, #2
 8009342:	0092      	lsls	r2, r2, #2
 8009344:	f107 010c 	add.w	r1, r7, #12
 8009348:	300c      	adds	r0, #12
 800934a:	f7fe fb4a 	bl	80079e2 <memcpy>
 800934e:	2201      	movs	r2, #1
 8009350:	4629      	mov	r1, r5
 8009352:	4620      	mov	r0, r4
 8009354:	f000 fc66 	bl	8009c24 <__lshift>
 8009358:	9b01      	ldr	r3, [sp, #4]
 800935a:	f103 0901 	add.w	r9, r3, #1
 800935e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009362:	4413      	add	r3, r2
 8009364:	9305      	str	r3, [sp, #20]
 8009366:	f00a 0301 	and.w	r3, sl, #1
 800936a:	46b8      	mov	r8, r7
 800936c:	9304      	str	r3, [sp, #16]
 800936e:	4607      	mov	r7, r0
 8009370:	4631      	mov	r1, r6
 8009372:	ee18 0a10 	vmov	r0, s16
 8009376:	f7ff fa77 	bl	8008868 <quorem>
 800937a:	4641      	mov	r1, r8
 800937c:	9002      	str	r0, [sp, #8]
 800937e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009382:	ee18 0a10 	vmov	r0, s16
 8009386:	f000 fcbd 	bl	8009d04 <__mcmp>
 800938a:	463a      	mov	r2, r7
 800938c:	9003      	str	r0, [sp, #12]
 800938e:	4631      	mov	r1, r6
 8009390:	4620      	mov	r0, r4
 8009392:	f000 fcd3 	bl	8009d3c <__mdiff>
 8009396:	68c2      	ldr	r2, [r0, #12]
 8009398:	f109 3bff 	add.w	fp, r9, #4294967295
 800939c:	4605      	mov	r5, r0
 800939e:	bb02      	cbnz	r2, 80093e2 <_dtoa_r+0xa62>
 80093a0:	4601      	mov	r1, r0
 80093a2:	ee18 0a10 	vmov	r0, s16
 80093a6:	f000 fcad 	bl	8009d04 <__mcmp>
 80093aa:	4602      	mov	r2, r0
 80093ac:	4629      	mov	r1, r5
 80093ae:	4620      	mov	r0, r4
 80093b0:	9207      	str	r2, [sp, #28]
 80093b2:	f000 fa65 	bl	8009880 <_Bfree>
 80093b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80093ba:	ea43 0102 	orr.w	r1, r3, r2
 80093be:	9b04      	ldr	r3, [sp, #16]
 80093c0:	430b      	orrs	r3, r1
 80093c2:	464d      	mov	r5, r9
 80093c4:	d10f      	bne.n	80093e6 <_dtoa_r+0xa66>
 80093c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80093ca:	d02a      	beq.n	8009422 <_dtoa_r+0xaa2>
 80093cc:	9b03      	ldr	r3, [sp, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	dd02      	ble.n	80093d8 <_dtoa_r+0xa58>
 80093d2:	9b02      	ldr	r3, [sp, #8]
 80093d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80093d8:	f88b a000 	strb.w	sl, [fp]
 80093dc:	e775      	b.n	80092ca <_dtoa_r+0x94a>
 80093de:	4638      	mov	r0, r7
 80093e0:	e7ba      	b.n	8009358 <_dtoa_r+0x9d8>
 80093e2:	2201      	movs	r2, #1
 80093e4:	e7e2      	b.n	80093ac <_dtoa_r+0xa2c>
 80093e6:	9b03      	ldr	r3, [sp, #12]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	db04      	blt.n	80093f6 <_dtoa_r+0xa76>
 80093ec:	9906      	ldr	r1, [sp, #24]
 80093ee:	430b      	orrs	r3, r1
 80093f0:	9904      	ldr	r1, [sp, #16]
 80093f2:	430b      	orrs	r3, r1
 80093f4:	d122      	bne.n	800943c <_dtoa_r+0xabc>
 80093f6:	2a00      	cmp	r2, #0
 80093f8:	ddee      	ble.n	80093d8 <_dtoa_r+0xa58>
 80093fa:	ee18 1a10 	vmov	r1, s16
 80093fe:	2201      	movs	r2, #1
 8009400:	4620      	mov	r0, r4
 8009402:	f000 fc0f 	bl	8009c24 <__lshift>
 8009406:	4631      	mov	r1, r6
 8009408:	ee08 0a10 	vmov	s16, r0
 800940c:	f000 fc7a 	bl	8009d04 <__mcmp>
 8009410:	2800      	cmp	r0, #0
 8009412:	dc03      	bgt.n	800941c <_dtoa_r+0xa9c>
 8009414:	d1e0      	bne.n	80093d8 <_dtoa_r+0xa58>
 8009416:	f01a 0f01 	tst.w	sl, #1
 800941a:	d0dd      	beq.n	80093d8 <_dtoa_r+0xa58>
 800941c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009420:	d1d7      	bne.n	80093d2 <_dtoa_r+0xa52>
 8009422:	2339      	movs	r3, #57	; 0x39
 8009424:	f88b 3000 	strb.w	r3, [fp]
 8009428:	462b      	mov	r3, r5
 800942a:	461d      	mov	r5, r3
 800942c:	3b01      	subs	r3, #1
 800942e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009432:	2a39      	cmp	r2, #57	; 0x39
 8009434:	d071      	beq.n	800951a <_dtoa_r+0xb9a>
 8009436:	3201      	adds	r2, #1
 8009438:	701a      	strb	r2, [r3, #0]
 800943a:	e746      	b.n	80092ca <_dtoa_r+0x94a>
 800943c:	2a00      	cmp	r2, #0
 800943e:	dd07      	ble.n	8009450 <_dtoa_r+0xad0>
 8009440:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009444:	d0ed      	beq.n	8009422 <_dtoa_r+0xaa2>
 8009446:	f10a 0301 	add.w	r3, sl, #1
 800944a:	f88b 3000 	strb.w	r3, [fp]
 800944e:	e73c      	b.n	80092ca <_dtoa_r+0x94a>
 8009450:	9b05      	ldr	r3, [sp, #20]
 8009452:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009456:	4599      	cmp	r9, r3
 8009458:	d047      	beq.n	80094ea <_dtoa_r+0xb6a>
 800945a:	ee18 1a10 	vmov	r1, s16
 800945e:	2300      	movs	r3, #0
 8009460:	220a      	movs	r2, #10
 8009462:	4620      	mov	r0, r4
 8009464:	f000 fa2e 	bl	80098c4 <__multadd>
 8009468:	45b8      	cmp	r8, r7
 800946a:	ee08 0a10 	vmov	s16, r0
 800946e:	f04f 0300 	mov.w	r3, #0
 8009472:	f04f 020a 	mov.w	r2, #10
 8009476:	4641      	mov	r1, r8
 8009478:	4620      	mov	r0, r4
 800947a:	d106      	bne.n	800948a <_dtoa_r+0xb0a>
 800947c:	f000 fa22 	bl	80098c4 <__multadd>
 8009480:	4680      	mov	r8, r0
 8009482:	4607      	mov	r7, r0
 8009484:	f109 0901 	add.w	r9, r9, #1
 8009488:	e772      	b.n	8009370 <_dtoa_r+0x9f0>
 800948a:	f000 fa1b 	bl	80098c4 <__multadd>
 800948e:	4639      	mov	r1, r7
 8009490:	4680      	mov	r8, r0
 8009492:	2300      	movs	r3, #0
 8009494:	220a      	movs	r2, #10
 8009496:	4620      	mov	r0, r4
 8009498:	f000 fa14 	bl	80098c4 <__multadd>
 800949c:	4607      	mov	r7, r0
 800949e:	e7f1      	b.n	8009484 <_dtoa_r+0xb04>
 80094a0:	9b03      	ldr	r3, [sp, #12]
 80094a2:	9302      	str	r3, [sp, #8]
 80094a4:	9d01      	ldr	r5, [sp, #4]
 80094a6:	ee18 0a10 	vmov	r0, s16
 80094aa:	4631      	mov	r1, r6
 80094ac:	f7ff f9dc 	bl	8008868 <quorem>
 80094b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80094b4:	9b01      	ldr	r3, [sp, #4]
 80094b6:	f805 ab01 	strb.w	sl, [r5], #1
 80094ba:	1aea      	subs	r2, r5, r3
 80094bc:	9b02      	ldr	r3, [sp, #8]
 80094be:	4293      	cmp	r3, r2
 80094c0:	dd09      	ble.n	80094d6 <_dtoa_r+0xb56>
 80094c2:	ee18 1a10 	vmov	r1, s16
 80094c6:	2300      	movs	r3, #0
 80094c8:	220a      	movs	r2, #10
 80094ca:	4620      	mov	r0, r4
 80094cc:	f000 f9fa 	bl	80098c4 <__multadd>
 80094d0:	ee08 0a10 	vmov	s16, r0
 80094d4:	e7e7      	b.n	80094a6 <_dtoa_r+0xb26>
 80094d6:	9b02      	ldr	r3, [sp, #8]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	bfc8      	it	gt
 80094dc:	461d      	movgt	r5, r3
 80094de:	9b01      	ldr	r3, [sp, #4]
 80094e0:	bfd8      	it	le
 80094e2:	2501      	movle	r5, #1
 80094e4:	441d      	add	r5, r3
 80094e6:	f04f 0800 	mov.w	r8, #0
 80094ea:	ee18 1a10 	vmov	r1, s16
 80094ee:	2201      	movs	r2, #1
 80094f0:	4620      	mov	r0, r4
 80094f2:	f000 fb97 	bl	8009c24 <__lshift>
 80094f6:	4631      	mov	r1, r6
 80094f8:	ee08 0a10 	vmov	s16, r0
 80094fc:	f000 fc02 	bl	8009d04 <__mcmp>
 8009500:	2800      	cmp	r0, #0
 8009502:	dc91      	bgt.n	8009428 <_dtoa_r+0xaa8>
 8009504:	d102      	bne.n	800950c <_dtoa_r+0xb8c>
 8009506:	f01a 0f01 	tst.w	sl, #1
 800950a:	d18d      	bne.n	8009428 <_dtoa_r+0xaa8>
 800950c:	462b      	mov	r3, r5
 800950e:	461d      	mov	r5, r3
 8009510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009514:	2a30      	cmp	r2, #48	; 0x30
 8009516:	d0fa      	beq.n	800950e <_dtoa_r+0xb8e>
 8009518:	e6d7      	b.n	80092ca <_dtoa_r+0x94a>
 800951a:	9a01      	ldr	r2, [sp, #4]
 800951c:	429a      	cmp	r2, r3
 800951e:	d184      	bne.n	800942a <_dtoa_r+0xaaa>
 8009520:	9b00      	ldr	r3, [sp, #0]
 8009522:	3301      	adds	r3, #1
 8009524:	9300      	str	r3, [sp, #0]
 8009526:	2331      	movs	r3, #49	; 0x31
 8009528:	7013      	strb	r3, [r2, #0]
 800952a:	e6ce      	b.n	80092ca <_dtoa_r+0x94a>
 800952c:	4b09      	ldr	r3, [pc, #36]	; (8009554 <_dtoa_r+0xbd4>)
 800952e:	f7ff ba95 	b.w	8008a5c <_dtoa_r+0xdc>
 8009532:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009534:	2b00      	cmp	r3, #0
 8009536:	f47f aa6e 	bne.w	8008a16 <_dtoa_r+0x96>
 800953a:	4b07      	ldr	r3, [pc, #28]	; (8009558 <_dtoa_r+0xbd8>)
 800953c:	f7ff ba8e 	b.w	8008a5c <_dtoa_r+0xdc>
 8009540:	9b02      	ldr	r3, [sp, #8]
 8009542:	2b00      	cmp	r3, #0
 8009544:	dcae      	bgt.n	80094a4 <_dtoa_r+0xb24>
 8009546:	9b06      	ldr	r3, [sp, #24]
 8009548:	2b02      	cmp	r3, #2
 800954a:	f73f aea8 	bgt.w	800929e <_dtoa_r+0x91e>
 800954e:	e7a9      	b.n	80094a4 <_dtoa_r+0xb24>
 8009550:	0800a71b 	.word	0x0800a71b
 8009554:	0800a678 	.word	0x0800a678
 8009558:	0800a69c 	.word	0x0800a69c

0800955c <__sflush_r>:
 800955c:	898a      	ldrh	r2, [r1, #12]
 800955e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009562:	4605      	mov	r5, r0
 8009564:	0710      	lsls	r0, r2, #28
 8009566:	460c      	mov	r4, r1
 8009568:	d458      	bmi.n	800961c <__sflush_r+0xc0>
 800956a:	684b      	ldr	r3, [r1, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	dc05      	bgt.n	800957c <__sflush_r+0x20>
 8009570:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009572:	2b00      	cmp	r3, #0
 8009574:	dc02      	bgt.n	800957c <__sflush_r+0x20>
 8009576:	2000      	movs	r0, #0
 8009578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800957c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800957e:	2e00      	cmp	r6, #0
 8009580:	d0f9      	beq.n	8009576 <__sflush_r+0x1a>
 8009582:	2300      	movs	r3, #0
 8009584:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009588:	682f      	ldr	r7, [r5, #0]
 800958a:	602b      	str	r3, [r5, #0]
 800958c:	d032      	beq.n	80095f4 <__sflush_r+0x98>
 800958e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009590:	89a3      	ldrh	r3, [r4, #12]
 8009592:	075a      	lsls	r2, r3, #29
 8009594:	d505      	bpl.n	80095a2 <__sflush_r+0x46>
 8009596:	6863      	ldr	r3, [r4, #4]
 8009598:	1ac0      	subs	r0, r0, r3
 800959a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800959c:	b10b      	cbz	r3, 80095a2 <__sflush_r+0x46>
 800959e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095a0:	1ac0      	subs	r0, r0, r3
 80095a2:	2300      	movs	r3, #0
 80095a4:	4602      	mov	r2, r0
 80095a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095a8:	6a21      	ldr	r1, [r4, #32]
 80095aa:	4628      	mov	r0, r5
 80095ac:	47b0      	blx	r6
 80095ae:	1c43      	adds	r3, r0, #1
 80095b0:	89a3      	ldrh	r3, [r4, #12]
 80095b2:	d106      	bne.n	80095c2 <__sflush_r+0x66>
 80095b4:	6829      	ldr	r1, [r5, #0]
 80095b6:	291d      	cmp	r1, #29
 80095b8:	d82c      	bhi.n	8009614 <__sflush_r+0xb8>
 80095ba:	4a2a      	ldr	r2, [pc, #168]	; (8009664 <__sflush_r+0x108>)
 80095bc:	40ca      	lsrs	r2, r1
 80095be:	07d6      	lsls	r6, r2, #31
 80095c0:	d528      	bpl.n	8009614 <__sflush_r+0xb8>
 80095c2:	2200      	movs	r2, #0
 80095c4:	6062      	str	r2, [r4, #4]
 80095c6:	04d9      	lsls	r1, r3, #19
 80095c8:	6922      	ldr	r2, [r4, #16]
 80095ca:	6022      	str	r2, [r4, #0]
 80095cc:	d504      	bpl.n	80095d8 <__sflush_r+0x7c>
 80095ce:	1c42      	adds	r2, r0, #1
 80095d0:	d101      	bne.n	80095d6 <__sflush_r+0x7a>
 80095d2:	682b      	ldr	r3, [r5, #0]
 80095d4:	b903      	cbnz	r3, 80095d8 <__sflush_r+0x7c>
 80095d6:	6560      	str	r0, [r4, #84]	; 0x54
 80095d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095da:	602f      	str	r7, [r5, #0]
 80095dc:	2900      	cmp	r1, #0
 80095de:	d0ca      	beq.n	8009576 <__sflush_r+0x1a>
 80095e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095e4:	4299      	cmp	r1, r3
 80095e6:	d002      	beq.n	80095ee <__sflush_r+0x92>
 80095e8:	4628      	mov	r0, r5
 80095ea:	f000 fca3 	bl	8009f34 <_free_r>
 80095ee:	2000      	movs	r0, #0
 80095f0:	6360      	str	r0, [r4, #52]	; 0x34
 80095f2:	e7c1      	b.n	8009578 <__sflush_r+0x1c>
 80095f4:	6a21      	ldr	r1, [r4, #32]
 80095f6:	2301      	movs	r3, #1
 80095f8:	4628      	mov	r0, r5
 80095fa:	47b0      	blx	r6
 80095fc:	1c41      	adds	r1, r0, #1
 80095fe:	d1c7      	bne.n	8009590 <__sflush_r+0x34>
 8009600:	682b      	ldr	r3, [r5, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d0c4      	beq.n	8009590 <__sflush_r+0x34>
 8009606:	2b1d      	cmp	r3, #29
 8009608:	d001      	beq.n	800960e <__sflush_r+0xb2>
 800960a:	2b16      	cmp	r3, #22
 800960c:	d101      	bne.n	8009612 <__sflush_r+0xb6>
 800960e:	602f      	str	r7, [r5, #0]
 8009610:	e7b1      	b.n	8009576 <__sflush_r+0x1a>
 8009612:	89a3      	ldrh	r3, [r4, #12]
 8009614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009618:	81a3      	strh	r3, [r4, #12]
 800961a:	e7ad      	b.n	8009578 <__sflush_r+0x1c>
 800961c:	690f      	ldr	r7, [r1, #16]
 800961e:	2f00      	cmp	r7, #0
 8009620:	d0a9      	beq.n	8009576 <__sflush_r+0x1a>
 8009622:	0793      	lsls	r3, r2, #30
 8009624:	680e      	ldr	r6, [r1, #0]
 8009626:	bf08      	it	eq
 8009628:	694b      	ldreq	r3, [r1, #20]
 800962a:	600f      	str	r7, [r1, #0]
 800962c:	bf18      	it	ne
 800962e:	2300      	movne	r3, #0
 8009630:	eba6 0807 	sub.w	r8, r6, r7
 8009634:	608b      	str	r3, [r1, #8]
 8009636:	f1b8 0f00 	cmp.w	r8, #0
 800963a:	dd9c      	ble.n	8009576 <__sflush_r+0x1a>
 800963c:	6a21      	ldr	r1, [r4, #32]
 800963e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009640:	4643      	mov	r3, r8
 8009642:	463a      	mov	r2, r7
 8009644:	4628      	mov	r0, r5
 8009646:	47b0      	blx	r6
 8009648:	2800      	cmp	r0, #0
 800964a:	dc06      	bgt.n	800965a <__sflush_r+0xfe>
 800964c:	89a3      	ldrh	r3, [r4, #12]
 800964e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009652:	81a3      	strh	r3, [r4, #12]
 8009654:	f04f 30ff 	mov.w	r0, #4294967295
 8009658:	e78e      	b.n	8009578 <__sflush_r+0x1c>
 800965a:	4407      	add	r7, r0
 800965c:	eba8 0800 	sub.w	r8, r8, r0
 8009660:	e7e9      	b.n	8009636 <__sflush_r+0xda>
 8009662:	bf00      	nop
 8009664:	20400001 	.word	0x20400001

08009668 <_fflush_r>:
 8009668:	b538      	push	{r3, r4, r5, lr}
 800966a:	690b      	ldr	r3, [r1, #16]
 800966c:	4605      	mov	r5, r0
 800966e:	460c      	mov	r4, r1
 8009670:	b913      	cbnz	r3, 8009678 <_fflush_r+0x10>
 8009672:	2500      	movs	r5, #0
 8009674:	4628      	mov	r0, r5
 8009676:	bd38      	pop	{r3, r4, r5, pc}
 8009678:	b118      	cbz	r0, 8009682 <_fflush_r+0x1a>
 800967a:	6983      	ldr	r3, [r0, #24]
 800967c:	b90b      	cbnz	r3, 8009682 <_fflush_r+0x1a>
 800967e:	f7fe f8eb 	bl	8007858 <__sinit>
 8009682:	4b14      	ldr	r3, [pc, #80]	; (80096d4 <_fflush_r+0x6c>)
 8009684:	429c      	cmp	r4, r3
 8009686:	d11b      	bne.n	80096c0 <_fflush_r+0x58>
 8009688:	686c      	ldr	r4, [r5, #4]
 800968a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d0ef      	beq.n	8009672 <_fflush_r+0xa>
 8009692:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009694:	07d0      	lsls	r0, r2, #31
 8009696:	d404      	bmi.n	80096a2 <_fflush_r+0x3a>
 8009698:	0599      	lsls	r1, r3, #22
 800969a:	d402      	bmi.n	80096a2 <_fflush_r+0x3a>
 800969c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800969e:	f7fe f99e 	bl	80079de <__retarget_lock_acquire_recursive>
 80096a2:	4628      	mov	r0, r5
 80096a4:	4621      	mov	r1, r4
 80096a6:	f7ff ff59 	bl	800955c <__sflush_r>
 80096aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096ac:	07da      	lsls	r2, r3, #31
 80096ae:	4605      	mov	r5, r0
 80096b0:	d4e0      	bmi.n	8009674 <_fflush_r+0xc>
 80096b2:	89a3      	ldrh	r3, [r4, #12]
 80096b4:	059b      	lsls	r3, r3, #22
 80096b6:	d4dd      	bmi.n	8009674 <_fflush_r+0xc>
 80096b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096ba:	f7fe f991 	bl	80079e0 <__retarget_lock_release_recursive>
 80096be:	e7d9      	b.n	8009674 <_fflush_r+0xc>
 80096c0:	4b05      	ldr	r3, [pc, #20]	; (80096d8 <_fflush_r+0x70>)
 80096c2:	429c      	cmp	r4, r3
 80096c4:	d101      	bne.n	80096ca <_fflush_r+0x62>
 80096c6:	68ac      	ldr	r4, [r5, #8]
 80096c8:	e7df      	b.n	800968a <_fflush_r+0x22>
 80096ca:	4b04      	ldr	r3, [pc, #16]	; (80096dc <_fflush_r+0x74>)
 80096cc:	429c      	cmp	r4, r3
 80096ce:	bf08      	it	eq
 80096d0:	68ec      	ldreq	r4, [r5, #12]
 80096d2:	e7da      	b.n	800968a <_fflush_r+0x22>
 80096d4:	0800a624 	.word	0x0800a624
 80096d8:	0800a644 	.word	0x0800a644
 80096dc:	0800a604 	.word	0x0800a604

080096e0 <_localeconv_r>:
 80096e0:	4800      	ldr	r0, [pc, #0]	; (80096e4 <_localeconv_r+0x4>)
 80096e2:	4770      	bx	lr
 80096e4:	2000016c 	.word	0x2000016c

080096e8 <_lseek_r>:
 80096e8:	b538      	push	{r3, r4, r5, lr}
 80096ea:	4d07      	ldr	r5, [pc, #28]	; (8009708 <_lseek_r+0x20>)
 80096ec:	4604      	mov	r4, r0
 80096ee:	4608      	mov	r0, r1
 80096f0:	4611      	mov	r1, r2
 80096f2:	2200      	movs	r2, #0
 80096f4:	602a      	str	r2, [r5, #0]
 80096f6:	461a      	mov	r2, r3
 80096f8:	f7f7 ffa0 	bl	800163c <_lseek>
 80096fc:	1c43      	adds	r3, r0, #1
 80096fe:	d102      	bne.n	8009706 <_lseek_r+0x1e>
 8009700:	682b      	ldr	r3, [r5, #0]
 8009702:	b103      	cbz	r3, 8009706 <_lseek_r+0x1e>
 8009704:	6023      	str	r3, [r4, #0]
 8009706:	bd38      	pop	{r3, r4, r5, pc}
 8009708:	20001ff8 	.word	0x20001ff8

0800970c <__swhatbuf_r>:
 800970c:	b570      	push	{r4, r5, r6, lr}
 800970e:	460e      	mov	r6, r1
 8009710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009714:	2900      	cmp	r1, #0
 8009716:	b096      	sub	sp, #88	; 0x58
 8009718:	4614      	mov	r4, r2
 800971a:	461d      	mov	r5, r3
 800971c:	da08      	bge.n	8009730 <__swhatbuf_r+0x24>
 800971e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009722:	2200      	movs	r2, #0
 8009724:	602a      	str	r2, [r5, #0]
 8009726:	061a      	lsls	r2, r3, #24
 8009728:	d410      	bmi.n	800974c <__swhatbuf_r+0x40>
 800972a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800972e:	e00e      	b.n	800974e <__swhatbuf_r+0x42>
 8009730:	466a      	mov	r2, sp
 8009732:	f000 fde7 	bl	800a304 <_fstat_r>
 8009736:	2800      	cmp	r0, #0
 8009738:	dbf1      	blt.n	800971e <__swhatbuf_r+0x12>
 800973a:	9a01      	ldr	r2, [sp, #4]
 800973c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009740:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009744:	425a      	negs	r2, r3
 8009746:	415a      	adcs	r2, r3
 8009748:	602a      	str	r2, [r5, #0]
 800974a:	e7ee      	b.n	800972a <__swhatbuf_r+0x1e>
 800974c:	2340      	movs	r3, #64	; 0x40
 800974e:	2000      	movs	r0, #0
 8009750:	6023      	str	r3, [r4, #0]
 8009752:	b016      	add	sp, #88	; 0x58
 8009754:	bd70      	pop	{r4, r5, r6, pc}
	...

08009758 <__smakebuf_r>:
 8009758:	898b      	ldrh	r3, [r1, #12]
 800975a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800975c:	079d      	lsls	r5, r3, #30
 800975e:	4606      	mov	r6, r0
 8009760:	460c      	mov	r4, r1
 8009762:	d507      	bpl.n	8009774 <__smakebuf_r+0x1c>
 8009764:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009768:	6023      	str	r3, [r4, #0]
 800976a:	6123      	str	r3, [r4, #16]
 800976c:	2301      	movs	r3, #1
 800976e:	6163      	str	r3, [r4, #20]
 8009770:	b002      	add	sp, #8
 8009772:	bd70      	pop	{r4, r5, r6, pc}
 8009774:	ab01      	add	r3, sp, #4
 8009776:	466a      	mov	r2, sp
 8009778:	f7ff ffc8 	bl	800970c <__swhatbuf_r>
 800977c:	9900      	ldr	r1, [sp, #0]
 800977e:	4605      	mov	r5, r0
 8009780:	4630      	mov	r0, r6
 8009782:	f7fe f965 	bl	8007a50 <_malloc_r>
 8009786:	b948      	cbnz	r0, 800979c <__smakebuf_r+0x44>
 8009788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800978c:	059a      	lsls	r2, r3, #22
 800978e:	d4ef      	bmi.n	8009770 <__smakebuf_r+0x18>
 8009790:	f023 0303 	bic.w	r3, r3, #3
 8009794:	f043 0302 	orr.w	r3, r3, #2
 8009798:	81a3      	strh	r3, [r4, #12]
 800979a:	e7e3      	b.n	8009764 <__smakebuf_r+0xc>
 800979c:	4b0d      	ldr	r3, [pc, #52]	; (80097d4 <__smakebuf_r+0x7c>)
 800979e:	62b3      	str	r3, [r6, #40]	; 0x28
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	6020      	str	r0, [r4, #0]
 80097a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097a8:	81a3      	strh	r3, [r4, #12]
 80097aa:	9b00      	ldr	r3, [sp, #0]
 80097ac:	6163      	str	r3, [r4, #20]
 80097ae:	9b01      	ldr	r3, [sp, #4]
 80097b0:	6120      	str	r0, [r4, #16]
 80097b2:	b15b      	cbz	r3, 80097cc <__smakebuf_r+0x74>
 80097b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097b8:	4630      	mov	r0, r6
 80097ba:	f000 fdb5 	bl	800a328 <_isatty_r>
 80097be:	b128      	cbz	r0, 80097cc <__smakebuf_r+0x74>
 80097c0:	89a3      	ldrh	r3, [r4, #12]
 80097c2:	f023 0303 	bic.w	r3, r3, #3
 80097c6:	f043 0301 	orr.w	r3, r3, #1
 80097ca:	81a3      	strh	r3, [r4, #12]
 80097cc:	89a0      	ldrh	r0, [r4, #12]
 80097ce:	4305      	orrs	r5, r0
 80097d0:	81a5      	strh	r5, [r4, #12]
 80097d2:	e7cd      	b.n	8009770 <__smakebuf_r+0x18>
 80097d4:	080077f1 	.word	0x080077f1

080097d8 <malloc>:
 80097d8:	4b02      	ldr	r3, [pc, #8]	; (80097e4 <malloc+0xc>)
 80097da:	4601      	mov	r1, r0
 80097dc:	6818      	ldr	r0, [r3, #0]
 80097de:	f7fe b937 	b.w	8007a50 <_malloc_r>
 80097e2:	bf00      	nop
 80097e4:	20000018 	.word	0x20000018

080097e8 <__malloc_lock>:
 80097e8:	4801      	ldr	r0, [pc, #4]	; (80097f0 <__malloc_lock+0x8>)
 80097ea:	f7fe b8f8 	b.w	80079de <__retarget_lock_acquire_recursive>
 80097ee:	bf00      	nop
 80097f0:	20001fec 	.word	0x20001fec

080097f4 <__malloc_unlock>:
 80097f4:	4801      	ldr	r0, [pc, #4]	; (80097fc <__malloc_unlock+0x8>)
 80097f6:	f7fe b8f3 	b.w	80079e0 <__retarget_lock_release_recursive>
 80097fa:	bf00      	nop
 80097fc:	20001fec 	.word	0x20001fec

08009800 <_Balloc>:
 8009800:	b570      	push	{r4, r5, r6, lr}
 8009802:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009804:	4604      	mov	r4, r0
 8009806:	460d      	mov	r5, r1
 8009808:	b976      	cbnz	r6, 8009828 <_Balloc+0x28>
 800980a:	2010      	movs	r0, #16
 800980c:	f7ff ffe4 	bl	80097d8 <malloc>
 8009810:	4602      	mov	r2, r0
 8009812:	6260      	str	r0, [r4, #36]	; 0x24
 8009814:	b920      	cbnz	r0, 8009820 <_Balloc+0x20>
 8009816:	4b18      	ldr	r3, [pc, #96]	; (8009878 <_Balloc+0x78>)
 8009818:	4818      	ldr	r0, [pc, #96]	; (800987c <_Balloc+0x7c>)
 800981a:	2166      	movs	r1, #102	; 0x66
 800981c:	f000 fd42 	bl	800a2a4 <__assert_func>
 8009820:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009824:	6006      	str	r6, [r0, #0]
 8009826:	60c6      	str	r6, [r0, #12]
 8009828:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800982a:	68f3      	ldr	r3, [r6, #12]
 800982c:	b183      	cbz	r3, 8009850 <_Balloc+0x50>
 800982e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009836:	b9b8      	cbnz	r0, 8009868 <_Balloc+0x68>
 8009838:	2101      	movs	r1, #1
 800983a:	fa01 f605 	lsl.w	r6, r1, r5
 800983e:	1d72      	adds	r2, r6, #5
 8009840:	0092      	lsls	r2, r2, #2
 8009842:	4620      	mov	r0, r4
 8009844:	f000 fb60 	bl	8009f08 <_calloc_r>
 8009848:	b160      	cbz	r0, 8009864 <_Balloc+0x64>
 800984a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800984e:	e00e      	b.n	800986e <_Balloc+0x6e>
 8009850:	2221      	movs	r2, #33	; 0x21
 8009852:	2104      	movs	r1, #4
 8009854:	4620      	mov	r0, r4
 8009856:	f000 fb57 	bl	8009f08 <_calloc_r>
 800985a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800985c:	60f0      	str	r0, [r6, #12]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1e4      	bne.n	800982e <_Balloc+0x2e>
 8009864:	2000      	movs	r0, #0
 8009866:	bd70      	pop	{r4, r5, r6, pc}
 8009868:	6802      	ldr	r2, [r0, #0]
 800986a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800986e:	2300      	movs	r3, #0
 8009870:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009874:	e7f7      	b.n	8009866 <_Balloc+0x66>
 8009876:	bf00      	nop
 8009878:	0800a6a9 	.word	0x0800a6a9
 800987c:	0800a72c 	.word	0x0800a72c

08009880 <_Bfree>:
 8009880:	b570      	push	{r4, r5, r6, lr}
 8009882:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009884:	4605      	mov	r5, r0
 8009886:	460c      	mov	r4, r1
 8009888:	b976      	cbnz	r6, 80098a8 <_Bfree+0x28>
 800988a:	2010      	movs	r0, #16
 800988c:	f7ff ffa4 	bl	80097d8 <malloc>
 8009890:	4602      	mov	r2, r0
 8009892:	6268      	str	r0, [r5, #36]	; 0x24
 8009894:	b920      	cbnz	r0, 80098a0 <_Bfree+0x20>
 8009896:	4b09      	ldr	r3, [pc, #36]	; (80098bc <_Bfree+0x3c>)
 8009898:	4809      	ldr	r0, [pc, #36]	; (80098c0 <_Bfree+0x40>)
 800989a:	218a      	movs	r1, #138	; 0x8a
 800989c:	f000 fd02 	bl	800a2a4 <__assert_func>
 80098a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098a4:	6006      	str	r6, [r0, #0]
 80098a6:	60c6      	str	r6, [r0, #12]
 80098a8:	b13c      	cbz	r4, 80098ba <_Bfree+0x3a>
 80098aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80098ac:	6862      	ldr	r2, [r4, #4]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098b4:	6021      	str	r1, [r4, #0]
 80098b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098ba:	bd70      	pop	{r4, r5, r6, pc}
 80098bc:	0800a6a9 	.word	0x0800a6a9
 80098c0:	0800a72c 	.word	0x0800a72c

080098c4 <__multadd>:
 80098c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098c8:	690d      	ldr	r5, [r1, #16]
 80098ca:	4607      	mov	r7, r0
 80098cc:	460c      	mov	r4, r1
 80098ce:	461e      	mov	r6, r3
 80098d0:	f101 0c14 	add.w	ip, r1, #20
 80098d4:	2000      	movs	r0, #0
 80098d6:	f8dc 3000 	ldr.w	r3, [ip]
 80098da:	b299      	uxth	r1, r3
 80098dc:	fb02 6101 	mla	r1, r2, r1, r6
 80098e0:	0c1e      	lsrs	r6, r3, #16
 80098e2:	0c0b      	lsrs	r3, r1, #16
 80098e4:	fb02 3306 	mla	r3, r2, r6, r3
 80098e8:	b289      	uxth	r1, r1
 80098ea:	3001      	adds	r0, #1
 80098ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80098f0:	4285      	cmp	r5, r0
 80098f2:	f84c 1b04 	str.w	r1, [ip], #4
 80098f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80098fa:	dcec      	bgt.n	80098d6 <__multadd+0x12>
 80098fc:	b30e      	cbz	r6, 8009942 <__multadd+0x7e>
 80098fe:	68a3      	ldr	r3, [r4, #8]
 8009900:	42ab      	cmp	r3, r5
 8009902:	dc19      	bgt.n	8009938 <__multadd+0x74>
 8009904:	6861      	ldr	r1, [r4, #4]
 8009906:	4638      	mov	r0, r7
 8009908:	3101      	adds	r1, #1
 800990a:	f7ff ff79 	bl	8009800 <_Balloc>
 800990e:	4680      	mov	r8, r0
 8009910:	b928      	cbnz	r0, 800991e <__multadd+0x5a>
 8009912:	4602      	mov	r2, r0
 8009914:	4b0c      	ldr	r3, [pc, #48]	; (8009948 <__multadd+0x84>)
 8009916:	480d      	ldr	r0, [pc, #52]	; (800994c <__multadd+0x88>)
 8009918:	21b5      	movs	r1, #181	; 0xb5
 800991a:	f000 fcc3 	bl	800a2a4 <__assert_func>
 800991e:	6922      	ldr	r2, [r4, #16]
 8009920:	3202      	adds	r2, #2
 8009922:	f104 010c 	add.w	r1, r4, #12
 8009926:	0092      	lsls	r2, r2, #2
 8009928:	300c      	adds	r0, #12
 800992a:	f7fe f85a 	bl	80079e2 <memcpy>
 800992e:	4621      	mov	r1, r4
 8009930:	4638      	mov	r0, r7
 8009932:	f7ff ffa5 	bl	8009880 <_Bfree>
 8009936:	4644      	mov	r4, r8
 8009938:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800993c:	3501      	adds	r5, #1
 800993e:	615e      	str	r6, [r3, #20]
 8009940:	6125      	str	r5, [r4, #16]
 8009942:	4620      	mov	r0, r4
 8009944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009948:	0800a71b 	.word	0x0800a71b
 800994c:	0800a72c 	.word	0x0800a72c

08009950 <__hi0bits>:
 8009950:	0c03      	lsrs	r3, r0, #16
 8009952:	041b      	lsls	r3, r3, #16
 8009954:	b9d3      	cbnz	r3, 800998c <__hi0bits+0x3c>
 8009956:	0400      	lsls	r0, r0, #16
 8009958:	2310      	movs	r3, #16
 800995a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800995e:	bf04      	itt	eq
 8009960:	0200      	lsleq	r0, r0, #8
 8009962:	3308      	addeq	r3, #8
 8009964:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009968:	bf04      	itt	eq
 800996a:	0100      	lsleq	r0, r0, #4
 800996c:	3304      	addeq	r3, #4
 800996e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009972:	bf04      	itt	eq
 8009974:	0080      	lsleq	r0, r0, #2
 8009976:	3302      	addeq	r3, #2
 8009978:	2800      	cmp	r0, #0
 800997a:	db05      	blt.n	8009988 <__hi0bits+0x38>
 800997c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009980:	f103 0301 	add.w	r3, r3, #1
 8009984:	bf08      	it	eq
 8009986:	2320      	moveq	r3, #32
 8009988:	4618      	mov	r0, r3
 800998a:	4770      	bx	lr
 800998c:	2300      	movs	r3, #0
 800998e:	e7e4      	b.n	800995a <__hi0bits+0xa>

08009990 <__lo0bits>:
 8009990:	6803      	ldr	r3, [r0, #0]
 8009992:	f013 0207 	ands.w	r2, r3, #7
 8009996:	4601      	mov	r1, r0
 8009998:	d00b      	beq.n	80099b2 <__lo0bits+0x22>
 800999a:	07da      	lsls	r2, r3, #31
 800999c:	d423      	bmi.n	80099e6 <__lo0bits+0x56>
 800999e:	0798      	lsls	r0, r3, #30
 80099a0:	bf49      	itett	mi
 80099a2:	085b      	lsrmi	r3, r3, #1
 80099a4:	089b      	lsrpl	r3, r3, #2
 80099a6:	2001      	movmi	r0, #1
 80099a8:	600b      	strmi	r3, [r1, #0]
 80099aa:	bf5c      	itt	pl
 80099ac:	600b      	strpl	r3, [r1, #0]
 80099ae:	2002      	movpl	r0, #2
 80099b0:	4770      	bx	lr
 80099b2:	b298      	uxth	r0, r3
 80099b4:	b9a8      	cbnz	r0, 80099e2 <__lo0bits+0x52>
 80099b6:	0c1b      	lsrs	r3, r3, #16
 80099b8:	2010      	movs	r0, #16
 80099ba:	b2da      	uxtb	r2, r3
 80099bc:	b90a      	cbnz	r2, 80099c2 <__lo0bits+0x32>
 80099be:	3008      	adds	r0, #8
 80099c0:	0a1b      	lsrs	r3, r3, #8
 80099c2:	071a      	lsls	r2, r3, #28
 80099c4:	bf04      	itt	eq
 80099c6:	091b      	lsreq	r3, r3, #4
 80099c8:	3004      	addeq	r0, #4
 80099ca:	079a      	lsls	r2, r3, #30
 80099cc:	bf04      	itt	eq
 80099ce:	089b      	lsreq	r3, r3, #2
 80099d0:	3002      	addeq	r0, #2
 80099d2:	07da      	lsls	r2, r3, #31
 80099d4:	d403      	bmi.n	80099de <__lo0bits+0x4e>
 80099d6:	085b      	lsrs	r3, r3, #1
 80099d8:	f100 0001 	add.w	r0, r0, #1
 80099dc:	d005      	beq.n	80099ea <__lo0bits+0x5a>
 80099de:	600b      	str	r3, [r1, #0]
 80099e0:	4770      	bx	lr
 80099e2:	4610      	mov	r0, r2
 80099e4:	e7e9      	b.n	80099ba <__lo0bits+0x2a>
 80099e6:	2000      	movs	r0, #0
 80099e8:	4770      	bx	lr
 80099ea:	2020      	movs	r0, #32
 80099ec:	4770      	bx	lr
	...

080099f0 <__i2b>:
 80099f0:	b510      	push	{r4, lr}
 80099f2:	460c      	mov	r4, r1
 80099f4:	2101      	movs	r1, #1
 80099f6:	f7ff ff03 	bl	8009800 <_Balloc>
 80099fa:	4602      	mov	r2, r0
 80099fc:	b928      	cbnz	r0, 8009a0a <__i2b+0x1a>
 80099fe:	4b05      	ldr	r3, [pc, #20]	; (8009a14 <__i2b+0x24>)
 8009a00:	4805      	ldr	r0, [pc, #20]	; (8009a18 <__i2b+0x28>)
 8009a02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009a06:	f000 fc4d 	bl	800a2a4 <__assert_func>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	6144      	str	r4, [r0, #20]
 8009a0e:	6103      	str	r3, [r0, #16]
 8009a10:	bd10      	pop	{r4, pc}
 8009a12:	bf00      	nop
 8009a14:	0800a71b 	.word	0x0800a71b
 8009a18:	0800a72c 	.word	0x0800a72c

08009a1c <__multiply>:
 8009a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a20:	4691      	mov	r9, r2
 8009a22:	690a      	ldr	r2, [r1, #16]
 8009a24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	bfb8      	it	lt
 8009a2c:	460b      	movlt	r3, r1
 8009a2e:	460c      	mov	r4, r1
 8009a30:	bfbc      	itt	lt
 8009a32:	464c      	movlt	r4, r9
 8009a34:	4699      	movlt	r9, r3
 8009a36:	6927      	ldr	r7, [r4, #16]
 8009a38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a3c:	68a3      	ldr	r3, [r4, #8]
 8009a3e:	6861      	ldr	r1, [r4, #4]
 8009a40:	eb07 060a 	add.w	r6, r7, sl
 8009a44:	42b3      	cmp	r3, r6
 8009a46:	b085      	sub	sp, #20
 8009a48:	bfb8      	it	lt
 8009a4a:	3101      	addlt	r1, #1
 8009a4c:	f7ff fed8 	bl	8009800 <_Balloc>
 8009a50:	b930      	cbnz	r0, 8009a60 <__multiply+0x44>
 8009a52:	4602      	mov	r2, r0
 8009a54:	4b44      	ldr	r3, [pc, #272]	; (8009b68 <__multiply+0x14c>)
 8009a56:	4845      	ldr	r0, [pc, #276]	; (8009b6c <__multiply+0x150>)
 8009a58:	f240 115d 	movw	r1, #349	; 0x15d
 8009a5c:	f000 fc22 	bl	800a2a4 <__assert_func>
 8009a60:	f100 0514 	add.w	r5, r0, #20
 8009a64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a68:	462b      	mov	r3, r5
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	4543      	cmp	r3, r8
 8009a6e:	d321      	bcc.n	8009ab4 <__multiply+0x98>
 8009a70:	f104 0314 	add.w	r3, r4, #20
 8009a74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009a78:	f109 0314 	add.w	r3, r9, #20
 8009a7c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009a80:	9202      	str	r2, [sp, #8]
 8009a82:	1b3a      	subs	r2, r7, r4
 8009a84:	3a15      	subs	r2, #21
 8009a86:	f022 0203 	bic.w	r2, r2, #3
 8009a8a:	3204      	adds	r2, #4
 8009a8c:	f104 0115 	add.w	r1, r4, #21
 8009a90:	428f      	cmp	r7, r1
 8009a92:	bf38      	it	cc
 8009a94:	2204      	movcc	r2, #4
 8009a96:	9201      	str	r2, [sp, #4]
 8009a98:	9a02      	ldr	r2, [sp, #8]
 8009a9a:	9303      	str	r3, [sp, #12]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d80c      	bhi.n	8009aba <__multiply+0x9e>
 8009aa0:	2e00      	cmp	r6, #0
 8009aa2:	dd03      	ble.n	8009aac <__multiply+0x90>
 8009aa4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d05a      	beq.n	8009b62 <__multiply+0x146>
 8009aac:	6106      	str	r6, [r0, #16]
 8009aae:	b005      	add	sp, #20
 8009ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab4:	f843 2b04 	str.w	r2, [r3], #4
 8009ab8:	e7d8      	b.n	8009a6c <__multiply+0x50>
 8009aba:	f8b3 a000 	ldrh.w	sl, [r3]
 8009abe:	f1ba 0f00 	cmp.w	sl, #0
 8009ac2:	d024      	beq.n	8009b0e <__multiply+0xf2>
 8009ac4:	f104 0e14 	add.w	lr, r4, #20
 8009ac8:	46a9      	mov	r9, r5
 8009aca:	f04f 0c00 	mov.w	ip, #0
 8009ace:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009ad2:	f8d9 1000 	ldr.w	r1, [r9]
 8009ad6:	fa1f fb82 	uxth.w	fp, r2
 8009ada:	b289      	uxth	r1, r1
 8009adc:	fb0a 110b 	mla	r1, sl, fp, r1
 8009ae0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009ae4:	f8d9 2000 	ldr.w	r2, [r9]
 8009ae8:	4461      	add	r1, ip
 8009aea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009aee:	fb0a c20b 	mla	r2, sl, fp, ip
 8009af2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009af6:	b289      	uxth	r1, r1
 8009af8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009afc:	4577      	cmp	r7, lr
 8009afe:	f849 1b04 	str.w	r1, [r9], #4
 8009b02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b06:	d8e2      	bhi.n	8009ace <__multiply+0xb2>
 8009b08:	9a01      	ldr	r2, [sp, #4]
 8009b0a:	f845 c002 	str.w	ip, [r5, r2]
 8009b0e:	9a03      	ldr	r2, [sp, #12]
 8009b10:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b14:	3304      	adds	r3, #4
 8009b16:	f1b9 0f00 	cmp.w	r9, #0
 8009b1a:	d020      	beq.n	8009b5e <__multiply+0x142>
 8009b1c:	6829      	ldr	r1, [r5, #0]
 8009b1e:	f104 0c14 	add.w	ip, r4, #20
 8009b22:	46ae      	mov	lr, r5
 8009b24:	f04f 0a00 	mov.w	sl, #0
 8009b28:	f8bc b000 	ldrh.w	fp, [ip]
 8009b2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009b30:	fb09 220b 	mla	r2, r9, fp, r2
 8009b34:	4492      	add	sl, r2
 8009b36:	b289      	uxth	r1, r1
 8009b38:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009b3c:	f84e 1b04 	str.w	r1, [lr], #4
 8009b40:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009b44:	f8be 1000 	ldrh.w	r1, [lr]
 8009b48:	0c12      	lsrs	r2, r2, #16
 8009b4a:	fb09 1102 	mla	r1, r9, r2, r1
 8009b4e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009b52:	4567      	cmp	r7, ip
 8009b54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009b58:	d8e6      	bhi.n	8009b28 <__multiply+0x10c>
 8009b5a:	9a01      	ldr	r2, [sp, #4]
 8009b5c:	50a9      	str	r1, [r5, r2]
 8009b5e:	3504      	adds	r5, #4
 8009b60:	e79a      	b.n	8009a98 <__multiply+0x7c>
 8009b62:	3e01      	subs	r6, #1
 8009b64:	e79c      	b.n	8009aa0 <__multiply+0x84>
 8009b66:	bf00      	nop
 8009b68:	0800a71b 	.word	0x0800a71b
 8009b6c:	0800a72c 	.word	0x0800a72c

08009b70 <__pow5mult>:
 8009b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b74:	4615      	mov	r5, r2
 8009b76:	f012 0203 	ands.w	r2, r2, #3
 8009b7a:	4606      	mov	r6, r0
 8009b7c:	460f      	mov	r7, r1
 8009b7e:	d007      	beq.n	8009b90 <__pow5mult+0x20>
 8009b80:	4c25      	ldr	r4, [pc, #148]	; (8009c18 <__pow5mult+0xa8>)
 8009b82:	3a01      	subs	r2, #1
 8009b84:	2300      	movs	r3, #0
 8009b86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b8a:	f7ff fe9b 	bl	80098c4 <__multadd>
 8009b8e:	4607      	mov	r7, r0
 8009b90:	10ad      	asrs	r5, r5, #2
 8009b92:	d03d      	beq.n	8009c10 <__pow5mult+0xa0>
 8009b94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b96:	b97c      	cbnz	r4, 8009bb8 <__pow5mult+0x48>
 8009b98:	2010      	movs	r0, #16
 8009b9a:	f7ff fe1d 	bl	80097d8 <malloc>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	6270      	str	r0, [r6, #36]	; 0x24
 8009ba2:	b928      	cbnz	r0, 8009bb0 <__pow5mult+0x40>
 8009ba4:	4b1d      	ldr	r3, [pc, #116]	; (8009c1c <__pow5mult+0xac>)
 8009ba6:	481e      	ldr	r0, [pc, #120]	; (8009c20 <__pow5mult+0xb0>)
 8009ba8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009bac:	f000 fb7a 	bl	800a2a4 <__assert_func>
 8009bb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bb4:	6004      	str	r4, [r0, #0]
 8009bb6:	60c4      	str	r4, [r0, #12]
 8009bb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009bbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bc0:	b94c      	cbnz	r4, 8009bd6 <__pow5mult+0x66>
 8009bc2:	f240 2171 	movw	r1, #625	; 0x271
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	f7ff ff12 	bl	80099f0 <__i2b>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	6003      	str	r3, [r0, #0]
 8009bd6:	f04f 0900 	mov.w	r9, #0
 8009bda:	07eb      	lsls	r3, r5, #31
 8009bdc:	d50a      	bpl.n	8009bf4 <__pow5mult+0x84>
 8009bde:	4639      	mov	r1, r7
 8009be0:	4622      	mov	r2, r4
 8009be2:	4630      	mov	r0, r6
 8009be4:	f7ff ff1a 	bl	8009a1c <__multiply>
 8009be8:	4639      	mov	r1, r7
 8009bea:	4680      	mov	r8, r0
 8009bec:	4630      	mov	r0, r6
 8009bee:	f7ff fe47 	bl	8009880 <_Bfree>
 8009bf2:	4647      	mov	r7, r8
 8009bf4:	106d      	asrs	r5, r5, #1
 8009bf6:	d00b      	beq.n	8009c10 <__pow5mult+0xa0>
 8009bf8:	6820      	ldr	r0, [r4, #0]
 8009bfa:	b938      	cbnz	r0, 8009c0c <__pow5mult+0x9c>
 8009bfc:	4622      	mov	r2, r4
 8009bfe:	4621      	mov	r1, r4
 8009c00:	4630      	mov	r0, r6
 8009c02:	f7ff ff0b 	bl	8009a1c <__multiply>
 8009c06:	6020      	str	r0, [r4, #0]
 8009c08:	f8c0 9000 	str.w	r9, [r0]
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	e7e4      	b.n	8009bda <__pow5mult+0x6a>
 8009c10:	4638      	mov	r0, r7
 8009c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c16:	bf00      	nop
 8009c18:	0800a878 	.word	0x0800a878
 8009c1c:	0800a6a9 	.word	0x0800a6a9
 8009c20:	0800a72c 	.word	0x0800a72c

08009c24 <__lshift>:
 8009c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c28:	460c      	mov	r4, r1
 8009c2a:	6849      	ldr	r1, [r1, #4]
 8009c2c:	6923      	ldr	r3, [r4, #16]
 8009c2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c32:	68a3      	ldr	r3, [r4, #8]
 8009c34:	4607      	mov	r7, r0
 8009c36:	4691      	mov	r9, r2
 8009c38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c3c:	f108 0601 	add.w	r6, r8, #1
 8009c40:	42b3      	cmp	r3, r6
 8009c42:	db0b      	blt.n	8009c5c <__lshift+0x38>
 8009c44:	4638      	mov	r0, r7
 8009c46:	f7ff fddb 	bl	8009800 <_Balloc>
 8009c4a:	4605      	mov	r5, r0
 8009c4c:	b948      	cbnz	r0, 8009c62 <__lshift+0x3e>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	4b2a      	ldr	r3, [pc, #168]	; (8009cfc <__lshift+0xd8>)
 8009c52:	482b      	ldr	r0, [pc, #172]	; (8009d00 <__lshift+0xdc>)
 8009c54:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c58:	f000 fb24 	bl	800a2a4 <__assert_func>
 8009c5c:	3101      	adds	r1, #1
 8009c5e:	005b      	lsls	r3, r3, #1
 8009c60:	e7ee      	b.n	8009c40 <__lshift+0x1c>
 8009c62:	2300      	movs	r3, #0
 8009c64:	f100 0114 	add.w	r1, r0, #20
 8009c68:	f100 0210 	add.w	r2, r0, #16
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	4553      	cmp	r3, sl
 8009c70:	db37      	blt.n	8009ce2 <__lshift+0xbe>
 8009c72:	6920      	ldr	r0, [r4, #16]
 8009c74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c78:	f104 0314 	add.w	r3, r4, #20
 8009c7c:	f019 091f 	ands.w	r9, r9, #31
 8009c80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009c88:	d02f      	beq.n	8009cea <__lshift+0xc6>
 8009c8a:	f1c9 0e20 	rsb	lr, r9, #32
 8009c8e:	468a      	mov	sl, r1
 8009c90:	f04f 0c00 	mov.w	ip, #0
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	fa02 f209 	lsl.w	r2, r2, r9
 8009c9a:	ea42 020c 	orr.w	r2, r2, ip
 8009c9e:	f84a 2b04 	str.w	r2, [sl], #4
 8009ca2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ca6:	4298      	cmp	r0, r3
 8009ca8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009cac:	d8f2      	bhi.n	8009c94 <__lshift+0x70>
 8009cae:	1b03      	subs	r3, r0, r4
 8009cb0:	3b15      	subs	r3, #21
 8009cb2:	f023 0303 	bic.w	r3, r3, #3
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	f104 0215 	add.w	r2, r4, #21
 8009cbc:	4290      	cmp	r0, r2
 8009cbe:	bf38      	it	cc
 8009cc0:	2304      	movcc	r3, #4
 8009cc2:	f841 c003 	str.w	ip, [r1, r3]
 8009cc6:	f1bc 0f00 	cmp.w	ip, #0
 8009cca:	d001      	beq.n	8009cd0 <__lshift+0xac>
 8009ccc:	f108 0602 	add.w	r6, r8, #2
 8009cd0:	3e01      	subs	r6, #1
 8009cd2:	4638      	mov	r0, r7
 8009cd4:	612e      	str	r6, [r5, #16]
 8009cd6:	4621      	mov	r1, r4
 8009cd8:	f7ff fdd2 	bl	8009880 <_Bfree>
 8009cdc:	4628      	mov	r0, r5
 8009cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ce2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	e7c1      	b.n	8009c6e <__lshift+0x4a>
 8009cea:	3904      	subs	r1, #4
 8009cec:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cf0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009cf4:	4298      	cmp	r0, r3
 8009cf6:	d8f9      	bhi.n	8009cec <__lshift+0xc8>
 8009cf8:	e7ea      	b.n	8009cd0 <__lshift+0xac>
 8009cfa:	bf00      	nop
 8009cfc:	0800a71b 	.word	0x0800a71b
 8009d00:	0800a72c 	.word	0x0800a72c

08009d04 <__mcmp>:
 8009d04:	b530      	push	{r4, r5, lr}
 8009d06:	6902      	ldr	r2, [r0, #16]
 8009d08:	690c      	ldr	r4, [r1, #16]
 8009d0a:	1b12      	subs	r2, r2, r4
 8009d0c:	d10e      	bne.n	8009d2c <__mcmp+0x28>
 8009d0e:	f100 0314 	add.w	r3, r0, #20
 8009d12:	3114      	adds	r1, #20
 8009d14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009d18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009d1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009d20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009d24:	42a5      	cmp	r5, r4
 8009d26:	d003      	beq.n	8009d30 <__mcmp+0x2c>
 8009d28:	d305      	bcc.n	8009d36 <__mcmp+0x32>
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	4610      	mov	r0, r2
 8009d2e:	bd30      	pop	{r4, r5, pc}
 8009d30:	4283      	cmp	r3, r0
 8009d32:	d3f3      	bcc.n	8009d1c <__mcmp+0x18>
 8009d34:	e7fa      	b.n	8009d2c <__mcmp+0x28>
 8009d36:	f04f 32ff 	mov.w	r2, #4294967295
 8009d3a:	e7f7      	b.n	8009d2c <__mcmp+0x28>

08009d3c <__mdiff>:
 8009d3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d40:	460c      	mov	r4, r1
 8009d42:	4606      	mov	r6, r0
 8009d44:	4611      	mov	r1, r2
 8009d46:	4620      	mov	r0, r4
 8009d48:	4690      	mov	r8, r2
 8009d4a:	f7ff ffdb 	bl	8009d04 <__mcmp>
 8009d4e:	1e05      	subs	r5, r0, #0
 8009d50:	d110      	bne.n	8009d74 <__mdiff+0x38>
 8009d52:	4629      	mov	r1, r5
 8009d54:	4630      	mov	r0, r6
 8009d56:	f7ff fd53 	bl	8009800 <_Balloc>
 8009d5a:	b930      	cbnz	r0, 8009d6a <__mdiff+0x2e>
 8009d5c:	4b3a      	ldr	r3, [pc, #232]	; (8009e48 <__mdiff+0x10c>)
 8009d5e:	4602      	mov	r2, r0
 8009d60:	f240 2132 	movw	r1, #562	; 0x232
 8009d64:	4839      	ldr	r0, [pc, #228]	; (8009e4c <__mdiff+0x110>)
 8009d66:	f000 fa9d 	bl	800a2a4 <__assert_func>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d74:	bfa4      	itt	ge
 8009d76:	4643      	movge	r3, r8
 8009d78:	46a0      	movge	r8, r4
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009d80:	bfa6      	itte	ge
 8009d82:	461c      	movge	r4, r3
 8009d84:	2500      	movge	r5, #0
 8009d86:	2501      	movlt	r5, #1
 8009d88:	f7ff fd3a 	bl	8009800 <_Balloc>
 8009d8c:	b920      	cbnz	r0, 8009d98 <__mdiff+0x5c>
 8009d8e:	4b2e      	ldr	r3, [pc, #184]	; (8009e48 <__mdiff+0x10c>)
 8009d90:	4602      	mov	r2, r0
 8009d92:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d96:	e7e5      	b.n	8009d64 <__mdiff+0x28>
 8009d98:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009d9c:	6926      	ldr	r6, [r4, #16]
 8009d9e:	60c5      	str	r5, [r0, #12]
 8009da0:	f104 0914 	add.w	r9, r4, #20
 8009da4:	f108 0514 	add.w	r5, r8, #20
 8009da8:	f100 0e14 	add.w	lr, r0, #20
 8009dac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009db0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009db4:	f108 0210 	add.w	r2, r8, #16
 8009db8:	46f2      	mov	sl, lr
 8009dba:	2100      	movs	r1, #0
 8009dbc:	f859 3b04 	ldr.w	r3, [r9], #4
 8009dc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009dc4:	fa1f f883 	uxth.w	r8, r3
 8009dc8:	fa11 f18b 	uxtah	r1, r1, fp
 8009dcc:	0c1b      	lsrs	r3, r3, #16
 8009dce:	eba1 0808 	sub.w	r8, r1, r8
 8009dd2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009dd6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009dda:	fa1f f888 	uxth.w	r8, r8
 8009dde:	1419      	asrs	r1, r3, #16
 8009de0:	454e      	cmp	r6, r9
 8009de2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009de6:	f84a 3b04 	str.w	r3, [sl], #4
 8009dea:	d8e7      	bhi.n	8009dbc <__mdiff+0x80>
 8009dec:	1b33      	subs	r3, r6, r4
 8009dee:	3b15      	subs	r3, #21
 8009df0:	f023 0303 	bic.w	r3, r3, #3
 8009df4:	3304      	adds	r3, #4
 8009df6:	3415      	adds	r4, #21
 8009df8:	42a6      	cmp	r6, r4
 8009dfa:	bf38      	it	cc
 8009dfc:	2304      	movcc	r3, #4
 8009dfe:	441d      	add	r5, r3
 8009e00:	4473      	add	r3, lr
 8009e02:	469e      	mov	lr, r3
 8009e04:	462e      	mov	r6, r5
 8009e06:	4566      	cmp	r6, ip
 8009e08:	d30e      	bcc.n	8009e28 <__mdiff+0xec>
 8009e0a:	f10c 0203 	add.w	r2, ip, #3
 8009e0e:	1b52      	subs	r2, r2, r5
 8009e10:	f022 0203 	bic.w	r2, r2, #3
 8009e14:	3d03      	subs	r5, #3
 8009e16:	45ac      	cmp	ip, r5
 8009e18:	bf38      	it	cc
 8009e1a:	2200      	movcc	r2, #0
 8009e1c:	441a      	add	r2, r3
 8009e1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009e22:	b17b      	cbz	r3, 8009e44 <__mdiff+0x108>
 8009e24:	6107      	str	r7, [r0, #16]
 8009e26:	e7a3      	b.n	8009d70 <__mdiff+0x34>
 8009e28:	f856 8b04 	ldr.w	r8, [r6], #4
 8009e2c:	fa11 f288 	uxtah	r2, r1, r8
 8009e30:	1414      	asrs	r4, r2, #16
 8009e32:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009e36:	b292      	uxth	r2, r2
 8009e38:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009e3c:	f84e 2b04 	str.w	r2, [lr], #4
 8009e40:	1421      	asrs	r1, r4, #16
 8009e42:	e7e0      	b.n	8009e06 <__mdiff+0xca>
 8009e44:	3f01      	subs	r7, #1
 8009e46:	e7ea      	b.n	8009e1e <__mdiff+0xe2>
 8009e48:	0800a71b 	.word	0x0800a71b
 8009e4c:	0800a72c 	.word	0x0800a72c

08009e50 <__d2b>:
 8009e50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e54:	4689      	mov	r9, r1
 8009e56:	2101      	movs	r1, #1
 8009e58:	ec57 6b10 	vmov	r6, r7, d0
 8009e5c:	4690      	mov	r8, r2
 8009e5e:	f7ff fccf 	bl	8009800 <_Balloc>
 8009e62:	4604      	mov	r4, r0
 8009e64:	b930      	cbnz	r0, 8009e74 <__d2b+0x24>
 8009e66:	4602      	mov	r2, r0
 8009e68:	4b25      	ldr	r3, [pc, #148]	; (8009f00 <__d2b+0xb0>)
 8009e6a:	4826      	ldr	r0, [pc, #152]	; (8009f04 <__d2b+0xb4>)
 8009e6c:	f240 310a 	movw	r1, #778	; 0x30a
 8009e70:	f000 fa18 	bl	800a2a4 <__assert_func>
 8009e74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009e78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e7c:	bb35      	cbnz	r5, 8009ecc <__d2b+0x7c>
 8009e7e:	2e00      	cmp	r6, #0
 8009e80:	9301      	str	r3, [sp, #4]
 8009e82:	d028      	beq.n	8009ed6 <__d2b+0x86>
 8009e84:	4668      	mov	r0, sp
 8009e86:	9600      	str	r6, [sp, #0]
 8009e88:	f7ff fd82 	bl	8009990 <__lo0bits>
 8009e8c:	9900      	ldr	r1, [sp, #0]
 8009e8e:	b300      	cbz	r0, 8009ed2 <__d2b+0x82>
 8009e90:	9a01      	ldr	r2, [sp, #4]
 8009e92:	f1c0 0320 	rsb	r3, r0, #32
 8009e96:	fa02 f303 	lsl.w	r3, r2, r3
 8009e9a:	430b      	orrs	r3, r1
 8009e9c:	40c2      	lsrs	r2, r0
 8009e9e:	6163      	str	r3, [r4, #20]
 8009ea0:	9201      	str	r2, [sp, #4]
 8009ea2:	9b01      	ldr	r3, [sp, #4]
 8009ea4:	61a3      	str	r3, [r4, #24]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	bf14      	ite	ne
 8009eaa:	2202      	movne	r2, #2
 8009eac:	2201      	moveq	r2, #1
 8009eae:	6122      	str	r2, [r4, #16]
 8009eb0:	b1d5      	cbz	r5, 8009ee8 <__d2b+0x98>
 8009eb2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009eb6:	4405      	add	r5, r0
 8009eb8:	f8c9 5000 	str.w	r5, [r9]
 8009ebc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ec0:	f8c8 0000 	str.w	r0, [r8]
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	b003      	add	sp, #12
 8009ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ecc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ed0:	e7d5      	b.n	8009e7e <__d2b+0x2e>
 8009ed2:	6161      	str	r1, [r4, #20]
 8009ed4:	e7e5      	b.n	8009ea2 <__d2b+0x52>
 8009ed6:	a801      	add	r0, sp, #4
 8009ed8:	f7ff fd5a 	bl	8009990 <__lo0bits>
 8009edc:	9b01      	ldr	r3, [sp, #4]
 8009ede:	6163      	str	r3, [r4, #20]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	6122      	str	r2, [r4, #16]
 8009ee4:	3020      	adds	r0, #32
 8009ee6:	e7e3      	b.n	8009eb0 <__d2b+0x60>
 8009ee8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009eec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ef0:	f8c9 0000 	str.w	r0, [r9]
 8009ef4:	6918      	ldr	r0, [r3, #16]
 8009ef6:	f7ff fd2b 	bl	8009950 <__hi0bits>
 8009efa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009efe:	e7df      	b.n	8009ec0 <__d2b+0x70>
 8009f00:	0800a71b 	.word	0x0800a71b
 8009f04:	0800a72c 	.word	0x0800a72c

08009f08 <_calloc_r>:
 8009f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f0a:	fba1 2402 	umull	r2, r4, r1, r2
 8009f0e:	b94c      	cbnz	r4, 8009f24 <_calloc_r+0x1c>
 8009f10:	4611      	mov	r1, r2
 8009f12:	9201      	str	r2, [sp, #4]
 8009f14:	f7fd fd9c 	bl	8007a50 <_malloc_r>
 8009f18:	9a01      	ldr	r2, [sp, #4]
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	b930      	cbnz	r0, 8009f2c <_calloc_r+0x24>
 8009f1e:	4628      	mov	r0, r5
 8009f20:	b003      	add	sp, #12
 8009f22:	bd30      	pop	{r4, r5, pc}
 8009f24:	220c      	movs	r2, #12
 8009f26:	6002      	str	r2, [r0, #0]
 8009f28:	2500      	movs	r5, #0
 8009f2a:	e7f8      	b.n	8009f1e <_calloc_r+0x16>
 8009f2c:	4621      	mov	r1, r4
 8009f2e:	f7fd fd66 	bl	80079fe <memset>
 8009f32:	e7f4      	b.n	8009f1e <_calloc_r+0x16>

08009f34 <_free_r>:
 8009f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f36:	2900      	cmp	r1, #0
 8009f38:	d044      	beq.n	8009fc4 <_free_r+0x90>
 8009f3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f3e:	9001      	str	r0, [sp, #4]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	f1a1 0404 	sub.w	r4, r1, #4
 8009f46:	bfb8      	it	lt
 8009f48:	18e4      	addlt	r4, r4, r3
 8009f4a:	f7ff fc4d 	bl	80097e8 <__malloc_lock>
 8009f4e:	4a1e      	ldr	r2, [pc, #120]	; (8009fc8 <_free_r+0x94>)
 8009f50:	9801      	ldr	r0, [sp, #4]
 8009f52:	6813      	ldr	r3, [r2, #0]
 8009f54:	b933      	cbnz	r3, 8009f64 <_free_r+0x30>
 8009f56:	6063      	str	r3, [r4, #4]
 8009f58:	6014      	str	r4, [r2, #0]
 8009f5a:	b003      	add	sp, #12
 8009f5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f60:	f7ff bc48 	b.w	80097f4 <__malloc_unlock>
 8009f64:	42a3      	cmp	r3, r4
 8009f66:	d908      	bls.n	8009f7a <_free_r+0x46>
 8009f68:	6825      	ldr	r5, [r4, #0]
 8009f6a:	1961      	adds	r1, r4, r5
 8009f6c:	428b      	cmp	r3, r1
 8009f6e:	bf01      	itttt	eq
 8009f70:	6819      	ldreq	r1, [r3, #0]
 8009f72:	685b      	ldreq	r3, [r3, #4]
 8009f74:	1949      	addeq	r1, r1, r5
 8009f76:	6021      	streq	r1, [r4, #0]
 8009f78:	e7ed      	b.n	8009f56 <_free_r+0x22>
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	b10b      	cbz	r3, 8009f84 <_free_r+0x50>
 8009f80:	42a3      	cmp	r3, r4
 8009f82:	d9fa      	bls.n	8009f7a <_free_r+0x46>
 8009f84:	6811      	ldr	r1, [r2, #0]
 8009f86:	1855      	adds	r5, r2, r1
 8009f88:	42a5      	cmp	r5, r4
 8009f8a:	d10b      	bne.n	8009fa4 <_free_r+0x70>
 8009f8c:	6824      	ldr	r4, [r4, #0]
 8009f8e:	4421      	add	r1, r4
 8009f90:	1854      	adds	r4, r2, r1
 8009f92:	42a3      	cmp	r3, r4
 8009f94:	6011      	str	r1, [r2, #0]
 8009f96:	d1e0      	bne.n	8009f5a <_free_r+0x26>
 8009f98:	681c      	ldr	r4, [r3, #0]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	6053      	str	r3, [r2, #4]
 8009f9e:	4421      	add	r1, r4
 8009fa0:	6011      	str	r1, [r2, #0]
 8009fa2:	e7da      	b.n	8009f5a <_free_r+0x26>
 8009fa4:	d902      	bls.n	8009fac <_free_r+0x78>
 8009fa6:	230c      	movs	r3, #12
 8009fa8:	6003      	str	r3, [r0, #0]
 8009faa:	e7d6      	b.n	8009f5a <_free_r+0x26>
 8009fac:	6825      	ldr	r5, [r4, #0]
 8009fae:	1961      	adds	r1, r4, r5
 8009fb0:	428b      	cmp	r3, r1
 8009fb2:	bf04      	itt	eq
 8009fb4:	6819      	ldreq	r1, [r3, #0]
 8009fb6:	685b      	ldreq	r3, [r3, #4]
 8009fb8:	6063      	str	r3, [r4, #4]
 8009fba:	bf04      	itt	eq
 8009fbc:	1949      	addeq	r1, r1, r5
 8009fbe:	6021      	streq	r1, [r4, #0]
 8009fc0:	6054      	str	r4, [r2, #4]
 8009fc2:	e7ca      	b.n	8009f5a <_free_r+0x26>
 8009fc4:	b003      	add	sp, #12
 8009fc6:	bd30      	pop	{r4, r5, pc}
 8009fc8:	20001ff0 	.word	0x20001ff0

08009fcc <__sfputc_r>:
 8009fcc:	6893      	ldr	r3, [r2, #8]
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	b410      	push	{r4}
 8009fd4:	6093      	str	r3, [r2, #8]
 8009fd6:	da08      	bge.n	8009fea <__sfputc_r+0x1e>
 8009fd8:	6994      	ldr	r4, [r2, #24]
 8009fda:	42a3      	cmp	r3, r4
 8009fdc:	db01      	blt.n	8009fe2 <__sfputc_r+0x16>
 8009fde:	290a      	cmp	r1, #10
 8009fe0:	d103      	bne.n	8009fea <__sfputc_r+0x1e>
 8009fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fe6:	f7fe bb5d 	b.w	80086a4 <__swbuf_r>
 8009fea:	6813      	ldr	r3, [r2, #0]
 8009fec:	1c58      	adds	r0, r3, #1
 8009fee:	6010      	str	r0, [r2, #0]
 8009ff0:	7019      	strb	r1, [r3, #0]
 8009ff2:	4608      	mov	r0, r1
 8009ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ff8:	4770      	bx	lr

08009ffa <__sfputs_r>:
 8009ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffc:	4606      	mov	r6, r0
 8009ffe:	460f      	mov	r7, r1
 800a000:	4614      	mov	r4, r2
 800a002:	18d5      	adds	r5, r2, r3
 800a004:	42ac      	cmp	r4, r5
 800a006:	d101      	bne.n	800a00c <__sfputs_r+0x12>
 800a008:	2000      	movs	r0, #0
 800a00a:	e007      	b.n	800a01c <__sfputs_r+0x22>
 800a00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a010:	463a      	mov	r2, r7
 800a012:	4630      	mov	r0, r6
 800a014:	f7ff ffda 	bl	8009fcc <__sfputc_r>
 800a018:	1c43      	adds	r3, r0, #1
 800a01a:	d1f3      	bne.n	800a004 <__sfputs_r+0xa>
 800a01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a020 <_vfiprintf_r>:
 800a020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a024:	460d      	mov	r5, r1
 800a026:	b09d      	sub	sp, #116	; 0x74
 800a028:	4614      	mov	r4, r2
 800a02a:	4698      	mov	r8, r3
 800a02c:	4606      	mov	r6, r0
 800a02e:	b118      	cbz	r0, 800a038 <_vfiprintf_r+0x18>
 800a030:	6983      	ldr	r3, [r0, #24]
 800a032:	b90b      	cbnz	r3, 800a038 <_vfiprintf_r+0x18>
 800a034:	f7fd fc10 	bl	8007858 <__sinit>
 800a038:	4b89      	ldr	r3, [pc, #548]	; (800a260 <_vfiprintf_r+0x240>)
 800a03a:	429d      	cmp	r5, r3
 800a03c:	d11b      	bne.n	800a076 <_vfiprintf_r+0x56>
 800a03e:	6875      	ldr	r5, [r6, #4]
 800a040:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a042:	07d9      	lsls	r1, r3, #31
 800a044:	d405      	bmi.n	800a052 <_vfiprintf_r+0x32>
 800a046:	89ab      	ldrh	r3, [r5, #12]
 800a048:	059a      	lsls	r2, r3, #22
 800a04a:	d402      	bmi.n	800a052 <_vfiprintf_r+0x32>
 800a04c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a04e:	f7fd fcc6 	bl	80079de <__retarget_lock_acquire_recursive>
 800a052:	89ab      	ldrh	r3, [r5, #12]
 800a054:	071b      	lsls	r3, r3, #28
 800a056:	d501      	bpl.n	800a05c <_vfiprintf_r+0x3c>
 800a058:	692b      	ldr	r3, [r5, #16]
 800a05a:	b9eb      	cbnz	r3, 800a098 <_vfiprintf_r+0x78>
 800a05c:	4629      	mov	r1, r5
 800a05e:	4630      	mov	r0, r6
 800a060:	f7fe fb84 	bl	800876c <__swsetup_r>
 800a064:	b1c0      	cbz	r0, 800a098 <_vfiprintf_r+0x78>
 800a066:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a068:	07dc      	lsls	r4, r3, #31
 800a06a:	d50e      	bpl.n	800a08a <_vfiprintf_r+0x6a>
 800a06c:	f04f 30ff 	mov.w	r0, #4294967295
 800a070:	b01d      	add	sp, #116	; 0x74
 800a072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a076:	4b7b      	ldr	r3, [pc, #492]	; (800a264 <_vfiprintf_r+0x244>)
 800a078:	429d      	cmp	r5, r3
 800a07a:	d101      	bne.n	800a080 <_vfiprintf_r+0x60>
 800a07c:	68b5      	ldr	r5, [r6, #8]
 800a07e:	e7df      	b.n	800a040 <_vfiprintf_r+0x20>
 800a080:	4b79      	ldr	r3, [pc, #484]	; (800a268 <_vfiprintf_r+0x248>)
 800a082:	429d      	cmp	r5, r3
 800a084:	bf08      	it	eq
 800a086:	68f5      	ldreq	r5, [r6, #12]
 800a088:	e7da      	b.n	800a040 <_vfiprintf_r+0x20>
 800a08a:	89ab      	ldrh	r3, [r5, #12]
 800a08c:	0598      	lsls	r0, r3, #22
 800a08e:	d4ed      	bmi.n	800a06c <_vfiprintf_r+0x4c>
 800a090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a092:	f7fd fca5 	bl	80079e0 <__retarget_lock_release_recursive>
 800a096:	e7e9      	b.n	800a06c <_vfiprintf_r+0x4c>
 800a098:	2300      	movs	r3, #0
 800a09a:	9309      	str	r3, [sp, #36]	; 0x24
 800a09c:	2320      	movs	r3, #32
 800a09e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0a6:	2330      	movs	r3, #48	; 0x30
 800a0a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a26c <_vfiprintf_r+0x24c>
 800a0ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0b0:	f04f 0901 	mov.w	r9, #1
 800a0b4:	4623      	mov	r3, r4
 800a0b6:	469a      	mov	sl, r3
 800a0b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0bc:	b10a      	cbz	r2, 800a0c2 <_vfiprintf_r+0xa2>
 800a0be:	2a25      	cmp	r2, #37	; 0x25
 800a0c0:	d1f9      	bne.n	800a0b6 <_vfiprintf_r+0x96>
 800a0c2:	ebba 0b04 	subs.w	fp, sl, r4
 800a0c6:	d00b      	beq.n	800a0e0 <_vfiprintf_r+0xc0>
 800a0c8:	465b      	mov	r3, fp
 800a0ca:	4622      	mov	r2, r4
 800a0cc:	4629      	mov	r1, r5
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	f7ff ff93 	bl	8009ffa <__sfputs_r>
 800a0d4:	3001      	adds	r0, #1
 800a0d6:	f000 80aa 	beq.w	800a22e <_vfiprintf_r+0x20e>
 800a0da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0dc:	445a      	add	r2, fp
 800a0de:	9209      	str	r2, [sp, #36]	; 0x24
 800a0e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f000 80a2 	beq.w	800a22e <_vfiprintf_r+0x20e>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a0f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0f4:	f10a 0a01 	add.w	sl, sl, #1
 800a0f8:	9304      	str	r3, [sp, #16]
 800a0fa:	9307      	str	r3, [sp, #28]
 800a0fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a100:	931a      	str	r3, [sp, #104]	; 0x68
 800a102:	4654      	mov	r4, sl
 800a104:	2205      	movs	r2, #5
 800a106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a10a:	4858      	ldr	r0, [pc, #352]	; (800a26c <_vfiprintf_r+0x24c>)
 800a10c:	f7f6 f840 	bl	8000190 <memchr>
 800a110:	9a04      	ldr	r2, [sp, #16]
 800a112:	b9d8      	cbnz	r0, 800a14c <_vfiprintf_r+0x12c>
 800a114:	06d1      	lsls	r1, r2, #27
 800a116:	bf44      	itt	mi
 800a118:	2320      	movmi	r3, #32
 800a11a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a11e:	0713      	lsls	r3, r2, #28
 800a120:	bf44      	itt	mi
 800a122:	232b      	movmi	r3, #43	; 0x2b
 800a124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a128:	f89a 3000 	ldrb.w	r3, [sl]
 800a12c:	2b2a      	cmp	r3, #42	; 0x2a
 800a12e:	d015      	beq.n	800a15c <_vfiprintf_r+0x13c>
 800a130:	9a07      	ldr	r2, [sp, #28]
 800a132:	4654      	mov	r4, sl
 800a134:	2000      	movs	r0, #0
 800a136:	f04f 0c0a 	mov.w	ip, #10
 800a13a:	4621      	mov	r1, r4
 800a13c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a140:	3b30      	subs	r3, #48	; 0x30
 800a142:	2b09      	cmp	r3, #9
 800a144:	d94e      	bls.n	800a1e4 <_vfiprintf_r+0x1c4>
 800a146:	b1b0      	cbz	r0, 800a176 <_vfiprintf_r+0x156>
 800a148:	9207      	str	r2, [sp, #28]
 800a14a:	e014      	b.n	800a176 <_vfiprintf_r+0x156>
 800a14c:	eba0 0308 	sub.w	r3, r0, r8
 800a150:	fa09 f303 	lsl.w	r3, r9, r3
 800a154:	4313      	orrs	r3, r2
 800a156:	9304      	str	r3, [sp, #16]
 800a158:	46a2      	mov	sl, r4
 800a15a:	e7d2      	b.n	800a102 <_vfiprintf_r+0xe2>
 800a15c:	9b03      	ldr	r3, [sp, #12]
 800a15e:	1d19      	adds	r1, r3, #4
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	9103      	str	r1, [sp, #12]
 800a164:	2b00      	cmp	r3, #0
 800a166:	bfbb      	ittet	lt
 800a168:	425b      	neglt	r3, r3
 800a16a:	f042 0202 	orrlt.w	r2, r2, #2
 800a16e:	9307      	strge	r3, [sp, #28]
 800a170:	9307      	strlt	r3, [sp, #28]
 800a172:	bfb8      	it	lt
 800a174:	9204      	strlt	r2, [sp, #16]
 800a176:	7823      	ldrb	r3, [r4, #0]
 800a178:	2b2e      	cmp	r3, #46	; 0x2e
 800a17a:	d10c      	bne.n	800a196 <_vfiprintf_r+0x176>
 800a17c:	7863      	ldrb	r3, [r4, #1]
 800a17e:	2b2a      	cmp	r3, #42	; 0x2a
 800a180:	d135      	bne.n	800a1ee <_vfiprintf_r+0x1ce>
 800a182:	9b03      	ldr	r3, [sp, #12]
 800a184:	1d1a      	adds	r2, r3, #4
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	9203      	str	r2, [sp, #12]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	bfb8      	it	lt
 800a18e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a192:	3402      	adds	r4, #2
 800a194:	9305      	str	r3, [sp, #20]
 800a196:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a27c <_vfiprintf_r+0x25c>
 800a19a:	7821      	ldrb	r1, [r4, #0]
 800a19c:	2203      	movs	r2, #3
 800a19e:	4650      	mov	r0, sl
 800a1a0:	f7f5 fff6 	bl	8000190 <memchr>
 800a1a4:	b140      	cbz	r0, 800a1b8 <_vfiprintf_r+0x198>
 800a1a6:	2340      	movs	r3, #64	; 0x40
 800a1a8:	eba0 000a 	sub.w	r0, r0, sl
 800a1ac:	fa03 f000 	lsl.w	r0, r3, r0
 800a1b0:	9b04      	ldr	r3, [sp, #16]
 800a1b2:	4303      	orrs	r3, r0
 800a1b4:	3401      	adds	r4, #1
 800a1b6:	9304      	str	r3, [sp, #16]
 800a1b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1bc:	482c      	ldr	r0, [pc, #176]	; (800a270 <_vfiprintf_r+0x250>)
 800a1be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1c2:	2206      	movs	r2, #6
 800a1c4:	f7f5 ffe4 	bl	8000190 <memchr>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	d03f      	beq.n	800a24c <_vfiprintf_r+0x22c>
 800a1cc:	4b29      	ldr	r3, [pc, #164]	; (800a274 <_vfiprintf_r+0x254>)
 800a1ce:	bb1b      	cbnz	r3, 800a218 <_vfiprintf_r+0x1f8>
 800a1d0:	9b03      	ldr	r3, [sp, #12]
 800a1d2:	3307      	adds	r3, #7
 800a1d4:	f023 0307 	bic.w	r3, r3, #7
 800a1d8:	3308      	adds	r3, #8
 800a1da:	9303      	str	r3, [sp, #12]
 800a1dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1de:	443b      	add	r3, r7
 800a1e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1e2:	e767      	b.n	800a0b4 <_vfiprintf_r+0x94>
 800a1e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1e8:	460c      	mov	r4, r1
 800a1ea:	2001      	movs	r0, #1
 800a1ec:	e7a5      	b.n	800a13a <_vfiprintf_r+0x11a>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	3401      	adds	r4, #1
 800a1f2:	9305      	str	r3, [sp, #20]
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	f04f 0c0a 	mov.w	ip, #10
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a200:	3a30      	subs	r2, #48	; 0x30
 800a202:	2a09      	cmp	r2, #9
 800a204:	d903      	bls.n	800a20e <_vfiprintf_r+0x1ee>
 800a206:	2b00      	cmp	r3, #0
 800a208:	d0c5      	beq.n	800a196 <_vfiprintf_r+0x176>
 800a20a:	9105      	str	r1, [sp, #20]
 800a20c:	e7c3      	b.n	800a196 <_vfiprintf_r+0x176>
 800a20e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a212:	4604      	mov	r4, r0
 800a214:	2301      	movs	r3, #1
 800a216:	e7f0      	b.n	800a1fa <_vfiprintf_r+0x1da>
 800a218:	ab03      	add	r3, sp, #12
 800a21a:	9300      	str	r3, [sp, #0]
 800a21c:	462a      	mov	r2, r5
 800a21e:	4b16      	ldr	r3, [pc, #88]	; (800a278 <_vfiprintf_r+0x258>)
 800a220:	a904      	add	r1, sp, #16
 800a222:	4630      	mov	r0, r6
 800a224:	f7fd fd28 	bl	8007c78 <_printf_float>
 800a228:	4607      	mov	r7, r0
 800a22a:	1c78      	adds	r0, r7, #1
 800a22c:	d1d6      	bne.n	800a1dc <_vfiprintf_r+0x1bc>
 800a22e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a230:	07d9      	lsls	r1, r3, #31
 800a232:	d405      	bmi.n	800a240 <_vfiprintf_r+0x220>
 800a234:	89ab      	ldrh	r3, [r5, #12]
 800a236:	059a      	lsls	r2, r3, #22
 800a238:	d402      	bmi.n	800a240 <_vfiprintf_r+0x220>
 800a23a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a23c:	f7fd fbd0 	bl	80079e0 <__retarget_lock_release_recursive>
 800a240:	89ab      	ldrh	r3, [r5, #12]
 800a242:	065b      	lsls	r3, r3, #25
 800a244:	f53f af12 	bmi.w	800a06c <_vfiprintf_r+0x4c>
 800a248:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a24a:	e711      	b.n	800a070 <_vfiprintf_r+0x50>
 800a24c:	ab03      	add	r3, sp, #12
 800a24e:	9300      	str	r3, [sp, #0]
 800a250:	462a      	mov	r2, r5
 800a252:	4b09      	ldr	r3, [pc, #36]	; (800a278 <_vfiprintf_r+0x258>)
 800a254:	a904      	add	r1, sp, #16
 800a256:	4630      	mov	r0, r6
 800a258:	f7fd ffb2 	bl	80081c0 <_printf_i>
 800a25c:	e7e4      	b.n	800a228 <_vfiprintf_r+0x208>
 800a25e:	bf00      	nop
 800a260:	0800a624 	.word	0x0800a624
 800a264:	0800a644 	.word	0x0800a644
 800a268:	0800a604 	.word	0x0800a604
 800a26c:	0800a884 	.word	0x0800a884
 800a270:	0800a88e 	.word	0x0800a88e
 800a274:	08007c79 	.word	0x08007c79
 800a278:	08009ffb 	.word	0x08009ffb
 800a27c:	0800a88a 	.word	0x0800a88a

0800a280 <_read_r>:
 800a280:	b538      	push	{r3, r4, r5, lr}
 800a282:	4d07      	ldr	r5, [pc, #28]	; (800a2a0 <_read_r+0x20>)
 800a284:	4604      	mov	r4, r0
 800a286:	4608      	mov	r0, r1
 800a288:	4611      	mov	r1, r2
 800a28a:	2200      	movs	r2, #0
 800a28c:	602a      	str	r2, [r5, #0]
 800a28e:	461a      	mov	r2, r3
 800a290:	f7f7 f990 	bl	80015b4 <_read>
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	d102      	bne.n	800a29e <_read_r+0x1e>
 800a298:	682b      	ldr	r3, [r5, #0]
 800a29a:	b103      	cbz	r3, 800a29e <_read_r+0x1e>
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
 800a2a0:	20001ff8 	.word	0x20001ff8

0800a2a4 <__assert_func>:
 800a2a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2a6:	4614      	mov	r4, r2
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	4b09      	ldr	r3, [pc, #36]	; (800a2d0 <__assert_func+0x2c>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4605      	mov	r5, r0
 800a2b0:	68d8      	ldr	r0, [r3, #12]
 800a2b2:	b14c      	cbz	r4, 800a2c8 <__assert_func+0x24>
 800a2b4:	4b07      	ldr	r3, [pc, #28]	; (800a2d4 <__assert_func+0x30>)
 800a2b6:	9100      	str	r1, [sp, #0]
 800a2b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2bc:	4906      	ldr	r1, [pc, #24]	; (800a2d8 <__assert_func+0x34>)
 800a2be:	462b      	mov	r3, r5
 800a2c0:	f000 f80e 	bl	800a2e0 <fiprintf>
 800a2c4:	f000 f85f 	bl	800a386 <abort>
 800a2c8:	4b04      	ldr	r3, [pc, #16]	; (800a2dc <__assert_func+0x38>)
 800a2ca:	461c      	mov	r4, r3
 800a2cc:	e7f3      	b.n	800a2b6 <__assert_func+0x12>
 800a2ce:	bf00      	nop
 800a2d0:	20000018 	.word	0x20000018
 800a2d4:	0800a895 	.word	0x0800a895
 800a2d8:	0800a8a2 	.word	0x0800a8a2
 800a2dc:	0800a8d0 	.word	0x0800a8d0

0800a2e0 <fiprintf>:
 800a2e0:	b40e      	push	{r1, r2, r3}
 800a2e2:	b503      	push	{r0, r1, lr}
 800a2e4:	4601      	mov	r1, r0
 800a2e6:	ab03      	add	r3, sp, #12
 800a2e8:	4805      	ldr	r0, [pc, #20]	; (800a300 <fiprintf+0x20>)
 800a2ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2ee:	6800      	ldr	r0, [r0, #0]
 800a2f0:	9301      	str	r3, [sp, #4]
 800a2f2:	f7ff fe95 	bl	800a020 <_vfiprintf_r>
 800a2f6:	b002      	add	sp, #8
 800a2f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2fc:	b003      	add	sp, #12
 800a2fe:	4770      	bx	lr
 800a300:	20000018 	.word	0x20000018

0800a304 <_fstat_r>:
 800a304:	b538      	push	{r3, r4, r5, lr}
 800a306:	4d07      	ldr	r5, [pc, #28]	; (800a324 <_fstat_r+0x20>)
 800a308:	2300      	movs	r3, #0
 800a30a:	4604      	mov	r4, r0
 800a30c:	4608      	mov	r0, r1
 800a30e:	4611      	mov	r1, r2
 800a310:	602b      	str	r3, [r5, #0]
 800a312:	f7f7 f978 	bl	8001606 <_fstat>
 800a316:	1c43      	adds	r3, r0, #1
 800a318:	d102      	bne.n	800a320 <_fstat_r+0x1c>
 800a31a:	682b      	ldr	r3, [r5, #0]
 800a31c:	b103      	cbz	r3, 800a320 <_fstat_r+0x1c>
 800a31e:	6023      	str	r3, [r4, #0]
 800a320:	bd38      	pop	{r3, r4, r5, pc}
 800a322:	bf00      	nop
 800a324:	20001ff8 	.word	0x20001ff8

0800a328 <_isatty_r>:
 800a328:	b538      	push	{r3, r4, r5, lr}
 800a32a:	4d06      	ldr	r5, [pc, #24]	; (800a344 <_isatty_r+0x1c>)
 800a32c:	2300      	movs	r3, #0
 800a32e:	4604      	mov	r4, r0
 800a330:	4608      	mov	r0, r1
 800a332:	602b      	str	r3, [r5, #0]
 800a334:	f7f7 f977 	bl	8001626 <_isatty>
 800a338:	1c43      	adds	r3, r0, #1
 800a33a:	d102      	bne.n	800a342 <_isatty_r+0x1a>
 800a33c:	682b      	ldr	r3, [r5, #0]
 800a33e:	b103      	cbz	r3, 800a342 <_isatty_r+0x1a>
 800a340:	6023      	str	r3, [r4, #0]
 800a342:	bd38      	pop	{r3, r4, r5, pc}
 800a344:	20001ff8 	.word	0x20001ff8

0800a348 <__ascii_mbtowc>:
 800a348:	b082      	sub	sp, #8
 800a34a:	b901      	cbnz	r1, 800a34e <__ascii_mbtowc+0x6>
 800a34c:	a901      	add	r1, sp, #4
 800a34e:	b142      	cbz	r2, 800a362 <__ascii_mbtowc+0x1a>
 800a350:	b14b      	cbz	r3, 800a366 <__ascii_mbtowc+0x1e>
 800a352:	7813      	ldrb	r3, [r2, #0]
 800a354:	600b      	str	r3, [r1, #0]
 800a356:	7812      	ldrb	r2, [r2, #0]
 800a358:	1e10      	subs	r0, r2, #0
 800a35a:	bf18      	it	ne
 800a35c:	2001      	movne	r0, #1
 800a35e:	b002      	add	sp, #8
 800a360:	4770      	bx	lr
 800a362:	4610      	mov	r0, r2
 800a364:	e7fb      	b.n	800a35e <__ascii_mbtowc+0x16>
 800a366:	f06f 0001 	mvn.w	r0, #1
 800a36a:	e7f8      	b.n	800a35e <__ascii_mbtowc+0x16>

0800a36c <__ascii_wctomb>:
 800a36c:	b149      	cbz	r1, 800a382 <__ascii_wctomb+0x16>
 800a36e:	2aff      	cmp	r2, #255	; 0xff
 800a370:	bf85      	ittet	hi
 800a372:	238a      	movhi	r3, #138	; 0x8a
 800a374:	6003      	strhi	r3, [r0, #0]
 800a376:	700a      	strbls	r2, [r1, #0]
 800a378:	f04f 30ff 	movhi.w	r0, #4294967295
 800a37c:	bf98      	it	ls
 800a37e:	2001      	movls	r0, #1
 800a380:	4770      	bx	lr
 800a382:	4608      	mov	r0, r1
 800a384:	4770      	bx	lr

0800a386 <abort>:
 800a386:	b508      	push	{r3, lr}
 800a388:	2006      	movs	r0, #6
 800a38a:	f000 f82b 	bl	800a3e4 <raise>
 800a38e:	2001      	movs	r0, #1
 800a390:	f7f7 f906 	bl	80015a0 <_exit>

0800a394 <_raise_r>:
 800a394:	291f      	cmp	r1, #31
 800a396:	b538      	push	{r3, r4, r5, lr}
 800a398:	4604      	mov	r4, r0
 800a39a:	460d      	mov	r5, r1
 800a39c:	d904      	bls.n	800a3a8 <_raise_r+0x14>
 800a39e:	2316      	movs	r3, #22
 800a3a0:	6003      	str	r3, [r0, #0]
 800a3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a6:	bd38      	pop	{r3, r4, r5, pc}
 800a3a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a3aa:	b112      	cbz	r2, 800a3b2 <_raise_r+0x1e>
 800a3ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a3b0:	b94b      	cbnz	r3, 800a3c6 <_raise_r+0x32>
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	f000 f830 	bl	800a418 <_getpid_r>
 800a3b8:	462a      	mov	r2, r5
 800a3ba:	4601      	mov	r1, r0
 800a3bc:	4620      	mov	r0, r4
 800a3be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3c2:	f000 b817 	b.w	800a3f4 <_kill_r>
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d00a      	beq.n	800a3e0 <_raise_r+0x4c>
 800a3ca:	1c59      	adds	r1, r3, #1
 800a3cc:	d103      	bne.n	800a3d6 <_raise_r+0x42>
 800a3ce:	2316      	movs	r3, #22
 800a3d0:	6003      	str	r3, [r0, #0]
 800a3d2:	2001      	movs	r0, #1
 800a3d4:	e7e7      	b.n	800a3a6 <_raise_r+0x12>
 800a3d6:	2400      	movs	r4, #0
 800a3d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a3dc:	4628      	mov	r0, r5
 800a3de:	4798      	blx	r3
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	e7e0      	b.n	800a3a6 <_raise_r+0x12>

0800a3e4 <raise>:
 800a3e4:	4b02      	ldr	r3, [pc, #8]	; (800a3f0 <raise+0xc>)
 800a3e6:	4601      	mov	r1, r0
 800a3e8:	6818      	ldr	r0, [r3, #0]
 800a3ea:	f7ff bfd3 	b.w	800a394 <_raise_r>
 800a3ee:	bf00      	nop
 800a3f0:	20000018 	.word	0x20000018

0800a3f4 <_kill_r>:
 800a3f4:	b538      	push	{r3, r4, r5, lr}
 800a3f6:	4d07      	ldr	r5, [pc, #28]	; (800a414 <_kill_r+0x20>)
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	4608      	mov	r0, r1
 800a3fe:	4611      	mov	r1, r2
 800a400:	602b      	str	r3, [r5, #0]
 800a402:	f7f7 f8bd 	bl	8001580 <_kill>
 800a406:	1c43      	adds	r3, r0, #1
 800a408:	d102      	bne.n	800a410 <_kill_r+0x1c>
 800a40a:	682b      	ldr	r3, [r5, #0]
 800a40c:	b103      	cbz	r3, 800a410 <_kill_r+0x1c>
 800a40e:	6023      	str	r3, [r4, #0]
 800a410:	bd38      	pop	{r3, r4, r5, pc}
 800a412:	bf00      	nop
 800a414:	20001ff8 	.word	0x20001ff8

0800a418 <_getpid_r>:
 800a418:	f7f7 b8aa 	b.w	8001570 <_getpid>

0800a41c <_init>:
 800a41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41e:	bf00      	nop
 800a420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a422:	bc08      	pop	{r3}
 800a424:	469e      	mov	lr, r3
 800a426:	4770      	bx	lr

0800a428 <_fini>:
 800a428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42a:	bf00      	nop
 800a42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a42e:	bc08      	pop	{r3}
 800a430:	469e      	mov	lr, r3
 800a432:	4770      	bx	lr
